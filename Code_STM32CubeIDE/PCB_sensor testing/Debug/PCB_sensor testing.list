
PCB_sensor testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d74  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e50  08002e50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e50  08002e50  00012e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e58  08002e58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e58  08002e58  00012e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e5c  08002e5c  00012e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08002e6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002e6c  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdf0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc1  00000000  00000000  0002be24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  0002d9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  0002e658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002075  00000000  00000000  0002f1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2e5  00000000  00000000  00031255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008331e  00000000  00000000  0003f53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2858  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d20  00000000  00000000  000c28a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e1c 	.word	0x08002e1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002e1c 	.word	0x08002e1c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8d8 	bl	8000490 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8d3 	bl	8000490 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzsi2>:
 8000454:	211c      	movs	r1, #28
 8000456:	2301      	movs	r3, #1
 8000458:	041b      	lsls	r3, r3, #16
 800045a:	4298      	cmp	r0, r3
 800045c:	d301      	bcc.n	8000462 <__clzsi2+0xe>
 800045e:	0c00      	lsrs	r0, r0, #16
 8000460:	3910      	subs	r1, #16
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	4298      	cmp	r0, r3
 8000466:	d301      	bcc.n	800046c <__clzsi2+0x18>
 8000468:	0a00      	lsrs	r0, r0, #8
 800046a:	3908      	subs	r1, #8
 800046c:	091b      	lsrs	r3, r3, #4
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0x22>
 8000472:	0900      	lsrs	r0, r0, #4
 8000474:	3904      	subs	r1, #4
 8000476:	a202      	add	r2, pc, #8	; (adr r2, 8000480 <__clzsi2+0x2c>)
 8000478:	5c10      	ldrb	r0, [r2, r0]
 800047a:	1840      	adds	r0, r0, r1
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	02020304 	.word	0x02020304
 8000484:	01010101 	.word	0x01010101
	...

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f7ff ffdd 	bl	8000454 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f7ff ffd8 	bl	8000454 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float DHT_Temp = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
	float DHT_Hum = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	613b      	str	r3, [r7, #16]
	uint8_t t1, t2, h1, h2, p;
	uint16_t temp, hum, sum;

	uint8_t DS18B20_Temp1, DS18B20_Temp2;
	uint16_t DS18B20_T;
	float internalTemp = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60fb      	str	r3, [r7, #12]

	uint16_t light = 0;
 80004ba:	230a      	movs	r3, #10
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	2200      	movs	r2, #0
 80004c0:	801a      	strh	r2, [r3, #0]
	float voltage;

	uint16_t  moisture = 0;
 80004c2:	2308      	movs	r3, #8
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	2200      	movs	r2, #0
 80004c8:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fb1f 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f841 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80004d2:	f000 f963 	bl	800079c <MX_TIM2_Init>
  MX_GPIO_Init();
 80004d6:	f000 f9b5 	bl	8000844 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004da:	f000 f91f 	bl	800071c <MX_I2C1_Init>
  MX_ADC_Init();
 80004de:	f000 f8ab 	bl	8000638 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80004e2:	4b1a      	ldr	r3, [pc, #104]	; (800054c <main+0xa4>)
 80004e4:	0018      	movs	r0, r3
 80004e6:	f002 f9f9 	bl	80028dc <HAL_TIM_Base_Start>

	  */


	  //---------------------------------------------------------------------------Soil moisture
	  ADC_ChannelConfTypeDef sConfig = {0};
 80004ea:	003b      	movs	r3, r7
 80004ec:	0018      	movs	r0, r3
 80004ee:	2308      	movs	r3, #8
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f002 fc8a 	bl	8002e0c <memset>
	  //sConfig.Channel = ADC_CHANNEL_13;
	  /////////////////////////////////////////////
	  sConfig.Channel = ADC_CHANNEL_0;
 80004f8:	003b      	movs	r3, r7
 80004fa:	2201      	movs	r2, #1
 80004fc:	601a      	str	r2, [r3, #0]
	  /////////////////////////////////////////////////
	  sConfig.Rank = 1;
 80004fe:	003b      	movs	r3, r7
 8000500:	2201      	movs	r2, #1
 8000502:	605a      	str	r2, [r3, #4]
	  // sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
	  if(HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000504:	003a      	movs	r2, r7
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <main+0xa8>)
 8000508:	0011      	movs	r1, r2
 800050a:	0018      	movs	r0, r3
 800050c:	f000 fe02 	bl	8001114 <HAL_ADC_ConfigChannel>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d001      	beq.n	8000518 <main+0x70>
		  Error_Handler();
 8000514:	f000 f9e6 	bl	80008e4 <Error_Handler>
	  }
	  HAL_ADC_Start(&hadc); //Start Soil ADC
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <main+0xa8>)
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fcfe 	bl	8000f1c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000520:	2301      	movs	r3, #1
 8000522:	425a      	negs	r2, r3
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <main+0xa8>)
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f000 fd4b 	bl	8000fc4 <HAL_ADC_PollForConversion>
	  moisture = HAL_ADC_GetValue(&hadc);
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <main+0xa8>)
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fde3 	bl	80010fc <HAL_ADC_GetValue>
 8000536:	0002      	movs	r2, r0
 8000538:	2308      	movs	r3, #8
 800053a:	18fb      	adds	r3, r7, r3
 800053c:	801a      	strh	r2, [r3, #0]
	  //gcvt(voltage, 6, voltBuffer);
	  HAL_Delay(1000);
 800053e:	23fa      	movs	r3, #250	; 0xfa
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fb52 	bl	8000bec <HAL_Delay>
  {
 8000548:	e7cf      	b.n	80004ea <main+0x42>
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	200000d0 	.word	0x200000d0
 8000550:	20000028 	.word	0x20000028

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b09d      	sub	sp, #116	; 0x74
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	2438      	movs	r4, #56	; 0x38
 800055c:	193b      	adds	r3, r7, r4
 800055e:	0018      	movs	r0, r3
 8000560:	2338      	movs	r3, #56	; 0x38
 8000562:	001a      	movs	r2, r3
 8000564:	2100      	movs	r1, #0
 8000566:	f002 fc51 	bl	8002e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056a:	2324      	movs	r3, #36	; 0x24
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	0018      	movs	r0, r3
 8000570:	2314      	movs	r3, #20
 8000572:	001a      	movs	r2, r3
 8000574:	2100      	movs	r1, #0
 8000576:	f002 fc49 	bl	8002e0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800057a:	003b      	movs	r3, r7
 800057c:	0018      	movs	r0, r3
 800057e:	2324      	movs	r3, #36	; 0x24
 8000580:	001a      	movs	r2, r3
 8000582:	2100      	movs	r1, #0
 8000584:	f002 fc42 	bl	8002e0c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <SystemClock_Config+0xdc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a29      	ldr	r2, [pc, #164]	; (8000634 <SystemClock_Config+0xe0>)
 800058e:	401a      	ands	r2, r3
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <SystemClock_Config+0xdc>)
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	0109      	lsls	r1, r1, #4
 8000596:	430a      	orrs	r2, r1
 8000598:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059a:	0021      	movs	r1, r4
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2202      	movs	r2, #2
 80005a0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2201      	movs	r2, #1
 80005a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2210      	movs	r2, #16
 80005ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2202      	movs	r2, #2
 80005b2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2200      	movs	r2, #0
 80005b8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2280      	movs	r2, #128	; 0x80
 80005be:	02d2      	lsls	r2, r2, #11
 80005c0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2280      	movs	r2, #128	; 0x80
 80005c6:	03d2      	lsls	r2, r2, #15
 80005c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fa2d 	bl	8001a2c <HAL_RCC_OscConfig>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005d6:	f000 f985 	bl	80008e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	2124      	movs	r1, #36	; 0x24
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	220f      	movs	r2, #15
 80005e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2203      	movs	r2, #3
 80005e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2101      	movs	r1, #1
 80005fe:	0018      	movs	r0, r3
 8000600:	f001 fde8 	bl	80021d4 <HAL_RCC_ClockConfig>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000608:	f000 f96c 	bl	80008e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800060c:	003b      	movs	r3, r7
 800060e:	2208      	movs	r2, #8
 8000610:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000612:	003b      	movs	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000618:	003b      	movs	r3, r7
 800061a:	0018      	movs	r0, r3
 800061c:	f001 ffc8 	bl	80025b0 <HAL_RCCEx_PeriphCLKConfig>
 8000620:	1e03      	subs	r3, r0, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000624:	f000 f95e 	bl	80008e4 <Error_Handler>
  }
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b01d      	add	sp, #116	; 0x74
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	40007000 	.word	0x40007000
 8000634:	ffffe7ff 	.word	0xffffe7ff

08000638 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	003b      	movs	r3, r7
 8000640:	0018      	movs	r0, r3
 8000642:	2308      	movs	r3, #8
 8000644:	001a      	movs	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	f002 fbe0 	bl	8002e0c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800064c:	4b30      	ldr	r3, [pc, #192]	; (8000710 <MX_ADC_Init+0xd8>)
 800064e:	4a31      	ldr	r2, [pc, #196]	; (8000714 <MX_ADC_Init+0xdc>)
 8000650:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000652:	4b2f      	ldr	r3, [pc, #188]	; (8000710 <MX_ADC_Init+0xd8>)
 8000654:	2200      	movs	r2, #0
 8000656:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000658:	4b2d      	ldr	r3, [pc, #180]	; (8000710 <MX_ADC_Init+0xd8>)
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	05d2      	lsls	r2, r2, #23
 800065e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000660:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <MX_ADC_Init+0xd8>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000666:	4b2a      	ldr	r3, [pc, #168]	; (8000710 <MX_ADC_Init+0xd8>)
 8000668:	2200      	movs	r2, #0
 800066a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <MX_ADC_Init+0xd8>)
 800066e:	2201      	movs	r2, #1
 8000670:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000672:	4b27      	ldr	r3, [pc, #156]	; (8000710 <MX_ADC_Init+0xd8>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <MX_ADC_Init+0xd8>)
 800067a:	2220      	movs	r2, #32
 800067c:	2100      	movs	r1, #0
 800067e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000680:	4b23      	ldr	r3, [pc, #140]	; (8000710 <MX_ADC_Init+0xd8>)
 8000682:	2221      	movs	r2, #33	; 0x21
 8000684:	2100      	movs	r1, #0
 8000686:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <MX_ADC_Init+0xd8>)
 800068a:	2200      	movs	r2, #0
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <MX_ADC_Init+0xd8>)
 8000690:	22c2      	movs	r2, #194	; 0xc2
 8000692:	32ff      	adds	r2, #255	; 0xff
 8000694:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <MX_ADC_Init+0xd8>)
 8000698:	222c      	movs	r2, #44	; 0x2c
 800069a:	2100      	movs	r1, #0
 800069c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_ADC_Init+0xd8>)
 80006a0:	2204      	movs	r2, #4
 80006a2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_ADC_Init+0xd8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_ADC_Init+0xd8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_ADC_Init+0xd8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_ADC_Init+0xd8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_ADC_Init+0xd8>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fab8 	bl	8000c34 <HAL_ADC_Init>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80006c8:	f000 f90c 	bl	80008e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006cc:	003b      	movs	r3, r7
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006d2:	003b      	movs	r3, r7
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0152      	lsls	r2, r2, #5
 80006d8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006da:	003a      	movs	r2, r7
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_ADC_Init+0xd8>)
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fd17 	bl	8001114 <HAL_ADC_ConfigChannel>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80006ea:	f000 f8fb 	bl	80008e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80006ee:	003b      	movs	r3, r7
 80006f0:	4a09      	ldr	r2, [pc, #36]	; (8000718 <MX_ADC_Init+0xe0>)
 80006f2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006f4:	003a      	movs	r2, r7
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_ADC_Init+0xd8>)
 80006f8:	0011      	movs	r1, r2
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 fd0a 	bl	8001114 <HAL_ADC_ConfigChannel>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000704:	f000 f8ee 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	b002      	add	sp, #8
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000028 	.word	0x20000028
 8000714:	40012400 	.word	0x40012400
 8000718:	34002000 	.word	0x34002000

0800071c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_I2C1_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_I2C1_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_I2C1_Init+0x74>)
 8000728:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <MX_I2C1_Init+0x7c>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_I2C1_Init+0x74>)
 8000734:	2201      	movs	r2, #1
 8000736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_I2C1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_I2C1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2C1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_I2C1_Init+0x74>)
 8000758:	0018      	movs	r0, r3
 800075a:	f001 f839 	bl	80017d0 <HAL_I2C_Init>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000762:	f000 f8bf 	bl	80008e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_I2C1_Init+0x74>)
 8000768:	2100      	movs	r1, #0
 800076a:	0018      	movs	r0, r3
 800076c:	f001 f8c6 	bl	80018fc <HAL_I2CEx_ConfigAnalogFilter>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000774:	f000 f8b6 	bl	80008e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <MX_I2C1_Init+0x74>)
 800077a:	2100      	movs	r1, #0
 800077c:	0018      	movs	r0, r3
 800077e:	f001 f909 	bl	8001994 <HAL_I2CEx_ConfigDigitalFilter>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 f8ad 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000084 	.word	0x20000084
 8000794:	40005400 	.word	0x40005400
 8000798:	00707cbb 	.word	0x00707cbb

0800079c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	2308      	movs	r3, #8
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	0018      	movs	r0, r3
 80007a8:	2310      	movs	r3, #16
 80007aa:	001a      	movs	r2, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	f002 fb2d 	bl	8002e0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b2:	003b      	movs	r3, r7
 80007b4:	0018      	movs	r0, r3
 80007b6:	2308      	movs	r3, #8
 80007b8:	001a      	movs	r2, r3
 80007ba:	2100      	movs	r1, #0
 80007bc:	f002 fb26 	bl	8002e0c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_TIM2_Init+0xa0>)
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	05d2      	lsls	r2, r2, #23
 80007c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_TIM2_Init+0xa0>)
 80007ca:	2218      	movs	r2, #24
 80007cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_TIM2_Init+0xa0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_TIM2_Init+0xa0>)
 80007d6:	4a1a      	ldr	r2, [pc, #104]	; (8000840 <MX_TIM2_Init+0xa4>)
 80007d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_TIM2_Init+0xa0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_TIM2_Init+0xa0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_TIM2_Init+0xa0>)
 80007e8:	0018      	movs	r0, r3
 80007ea:	f002 f837 	bl	800285c <HAL_TIM_Base_Init>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80007f2:	f000 f877 	bl	80008e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f6:	2108      	movs	r1, #8
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	0152      	lsls	r2, r2, #5
 80007fe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000800:	187a      	adds	r2, r7, r1
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_TIM2_Init+0xa0>)
 8000804:	0011      	movs	r1, r2
 8000806:	0018      	movs	r0, r3
 8000808:	f002 f8b2 	bl	8002970 <HAL_TIM_ConfigClockSource>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000810:	f000 f868 	bl	80008e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000814:	003b      	movs	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081a:	003b      	movs	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000820:	003a      	movs	r2, r7
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_TIM2_Init+0xa0>)
 8000824:	0011      	movs	r1, r2
 8000826:	0018      	movs	r0, r3
 8000828:	f002 fa6e 	bl	8002d08 <HAL_TIMEx_MasterConfigSynchronization>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000830:	f000 f858 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b006      	add	sp, #24
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000d0 	.word	0x200000d0
 8000840:	0000ffff 	.word	0x0000ffff

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	240c      	movs	r4, #12
 800084c:	193b      	adds	r3, r7, r4
 800084e:	0018      	movs	r0, r3
 8000850:	2314      	movs	r3, #20
 8000852:	001a      	movs	r2, r3
 8000854:	2100      	movs	r1, #0
 8000856:	f002 fad9 	bl	8002e0c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_GPIO_Init+0x98>)
 800085c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_GPIO_Init+0x98>)
 8000860:	2104      	movs	r1, #4
 8000862:	430a      	orrs	r2, r1
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_GPIO_Init+0x98>)
 8000868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086a:	2204      	movs	r2, #4
 800086c:	4013      	ands	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_GPIO_Init+0x98>)
 8000874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_GPIO_Init+0x98>)
 8000878:	2101      	movs	r1, #1
 800087a:	430a      	orrs	r2, r1
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_GPIO_Init+0x98>)
 8000880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000882:	2201      	movs	r2, #1
 8000884:	4013      	ands	r3, r2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_GPIO_Init+0x98>)
 800088c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_GPIO_Init+0x98>)
 8000890:	2102      	movs	r1, #2
 8000892:	430a      	orrs	r2, r1
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_GPIO_Init+0x98>)
 8000898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089a:	2202      	movs	r2, #2
 800089c:	4013      	ands	r3, r2
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_GPIO_Init+0x9c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	2106      	movs	r1, #6
 80008a8:	0018      	movs	r0, r3
 80008aa:	f000 ff73 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80008ae:	0021      	movs	r1, r4
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2206      	movs	r2, #6
 80008b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2201      	movs	r2, #1
 80008ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <MX_GPIO_Init+0x9c>)
 80008cc:	0019      	movs	r1, r3
 80008ce:	0010      	movs	r0, r2
 80008d0:	f000 fde2 	bl	8001498 <HAL_GPIO_Init>

}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b009      	add	sp, #36	; 0x24
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	40021000 	.word	0x40021000
 80008e0:	50000800 	.word	0x50000800

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <HAL_MspInit+0x24>)
 80008f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x24>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	430a      	orrs	r2, r1
 80008fe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <HAL_MspInit+0x24>)
 8000902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <HAL_MspInit+0x24>)
 8000906:	2180      	movs	r1, #128	; 0x80
 8000908:	0549      	lsls	r1, r1, #21
 800090a:	430a      	orrs	r2, r1
 800090c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b08b      	sub	sp, #44	; 0x2c
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	2414      	movs	r4, #20
 8000922:	193b      	adds	r3, r7, r4
 8000924:	0018      	movs	r0, r3
 8000926:	2314      	movs	r3, #20
 8000928:	001a      	movs	r2, r3
 800092a:	2100      	movs	r1, #0
 800092c:	f002 fa6e 	bl	8002e0c <memset>
  if(hadc->Instance==ADC1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <HAL_ADC_MspInit+0xa8>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d13e      	bne.n	80009b8 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800093a:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <HAL_ADC_MspInit+0xac>)
 800093c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_ADC_MspInit+0xac>)
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	0089      	lsls	r1, r1, #2
 8000944:	430a      	orrs	r2, r1
 8000946:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_ADC_MspInit+0xac>)
 800094a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <HAL_ADC_MspInit+0xac>)
 800094e:	2104      	movs	r1, #4
 8000950:	430a      	orrs	r2, r1
 8000952:	62da      	str	r2, [r3, #44]	; 0x2c
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <HAL_ADC_MspInit+0xac>)
 8000956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000958:	2204      	movs	r2, #4
 800095a:	4013      	ands	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_ADC_MspInit+0xac>)
 8000962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_ADC_MspInit+0xac>)
 8000966:	2101      	movs	r1, #1
 8000968:	430a      	orrs	r2, r1
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_ADC_MspInit+0xac>)
 800096e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000970:	2201      	movs	r2, #1
 8000972:	4013      	ands	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC3     ------> ADC_IN13
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2208      	movs	r2, #8
 800097c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2203      	movs	r2, #3
 8000982:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	193b      	adds	r3, r7, r4
 800098c:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <HAL_ADC_MspInit+0xb0>)
 800098e:	0019      	movs	r1, r3
 8000990:	0010      	movs	r0, r2
 8000992:	f000 fd81 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000996:	0021      	movs	r1, r4
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2201      	movs	r2, #1
 800099c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2203      	movs	r2, #3
 80009a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	187a      	adds	r2, r7, r1
 80009ac:	23a0      	movs	r3, #160	; 0xa0
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	0011      	movs	r1, r2
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 fd70 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b00b      	add	sp, #44	; 0x2c
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	40012400 	.word	0x40012400
 80009c4:	40021000 	.word	0x40021000
 80009c8:	50000800 	.word	0x50000800

080009cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b089      	sub	sp, #36	; 0x24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	240c      	movs	r4, #12
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	0018      	movs	r0, r3
 80009da:	2314      	movs	r3, #20
 80009dc:	001a      	movs	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	f002 fa14 	bl	8002e0c <memset>
  if(hi2c->Instance==I2C1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <HAL_I2C_MspInit+0x7c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d128      	bne.n	8000a40 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 80009f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 80009f4:	2102      	movs	r1, #2
 80009f6:	430a      	orrs	r2, r1
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 80009fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fe:	2202      	movs	r2, #2
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a06:	0021      	movs	r1, r4
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	22c0      	movs	r2, #192	; 0xc0
 8000a0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2212      	movs	r2, #18
 8000a12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2201      	movs	r2, #1
 8000a24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <HAL_I2C_MspInit+0x84>)
 8000a2a:	0019      	movs	r1, r3
 8000a2c:	0010      	movs	r0, r2
 8000a2e:	f000 fd33 	bl	8001498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 8000a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 8000a38:	2180      	movs	r1, #128	; 0x80
 8000a3a:	0389      	lsls	r1, r1, #14
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b009      	add	sp, #36	; 0x24
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	50000400 	.word	0x50000400

08000a54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	05db      	lsls	r3, r3, #23
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d105      	bne.n	8000a74 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <HAL_TIM_Base_MspInit+0x28>)
 8000a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <HAL_TIM_Base_MspInit+0x28>)
 8000a6e:	2101      	movs	r1, #1
 8000a70:	430a      	orrs	r2, r1
 8000a72:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b002      	add	sp, #8
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40021000 	.word	0x40021000

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <NMI_Handler+0x4>

08000a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa4:	f000 f886 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ab8:	480d      	ldr	r0, [pc, #52]	; (8000af0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000aba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000abe:	490e      	ldr	r1, [pc, #56]	; (8000af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac0:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <LoopForever+0xe>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad4:	4c0b      	ldr	r4, [pc, #44]	; (8000b04 <LoopForever+0x16>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ae2:	f7ff ffe4 	bl	8000aae <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f002 f96d 	bl	8002dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aea:	f7ff fcdd 	bl	80004a8 <main>

08000aee <LoopForever>:

LoopForever:
    b LoopForever
 8000aee:	e7fe      	b.n	8000aee <LoopForever>
   ldr   r0, =_estack
 8000af0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000afc:	08002e60 	.word	0x08002e60
  ldr r2, =_sbss
 8000b00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b04:	20000114 	.word	0x20000114

08000b08 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC1_COMP_IRQHandler>
	...

08000b0c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_Init+0x3c>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_Init+0x3c>)
 8000b1e:	2140      	movs	r1, #64	; 0x40
 8000b20:	430a      	orrs	r2, r1
 8000b22:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f811 	bl	8000b4c <HAL_InitTick>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
 8000b34:	e001      	b.n	8000b3a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b36:	f7ff fedb 	bl	80008f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
}
 8000b3e:	0018      	movs	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	40022000 	.word	0x40022000

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <HAL_InitTick+0x5c>)
 8000b56:	681c      	ldr	r4, [r3, #0]
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_InitTick+0x60>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	23fa      	movs	r3, #250	; 0xfa
 8000b60:	0098      	lsls	r0, r3, #2
 8000b62:	f7ff fad1 	bl	8000108 <__udivsi3>
 8000b66:	0003      	movs	r3, r0
 8000b68:	0019      	movs	r1, r3
 8000b6a:	0020      	movs	r0, r4
 8000b6c:	f7ff facc 	bl	8000108 <__udivsi3>
 8000b70:	0003      	movs	r3, r0
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 fc83 	bl	800147e <HAL_SYSTICK_Config>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e00f      	b.n	8000ba0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	d80b      	bhi.n	8000b9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	425b      	negs	r3, r3
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 fc60 	bl	8001454 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_InitTick+0x64>)
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b003      	add	sp, #12
 8000ba6:	bd90      	pop	{r4, r7, pc}
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x1c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	18d2      	adds	r2, r2, r3
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc6:	601a      	str	r2, [r3, #0]
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000110 	.word	0x20000110

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <HAL_GetTick+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	0018      	movs	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	20000110 	.word	0x20000110

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff fff0 	bl	8000bd8 <HAL_GetTick>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	3301      	adds	r3, #1
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	001a      	movs	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	189b      	adds	r3, r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	f7ff ffe0 	bl	8000bd8 <HAL_GetTick>
 8000c18:	0002      	movs	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b004      	add	sp, #16
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	20000008 	.word	0x20000008

08000c34 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e159      	b.n	8000efa <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10a      	bne.n	8000c64 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2250      	movs	r2, #80	; 0x50
 8000c58:	2100      	movs	r1, #0
 8000c5a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff fe5a 	bl	8000918 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c68:	2210      	movs	r2, #16
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	2b10      	cmp	r3, #16
 8000c6e:	d005      	beq.n	8000c7c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	2204      	movs	r2, #4
 8000c78:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000c7a:	d00b      	beq.n	8000c94 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c80:	2210      	movs	r2, #16
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2250      	movs	r2, #80	; 0x50
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	e132      	b.n	8000efa <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c98:	4a9a      	ldr	r2, [pc, #616]	; (8000f04 <HAL_ADC_Init+0x2d0>)
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	2203      	movs	r2, #3
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d108      	bne.n	8000cc4 <HAL_ADC_Init+0x90>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4013      	ands	r3, r2
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d101      	bne.n	8000cc4 <HAL_ADC_Init+0x90>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <HAL_ADC_Init+0x92>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d149      	bne.n	8000d5e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	23c0      	movs	r3, #192	; 0xc0
 8000cd0:	061b      	lsls	r3, r3, #24
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d00b      	beq.n	8000cee <HAL_ADC_Init+0xba>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	05db      	lsls	r3, r3, #23
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d005      	beq.n	8000cee <HAL_ADC_Init+0xba>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	061b      	lsls	r3, r3, #24
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d111      	bne.n	8000d12 <HAL_ADC_Init+0xde>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	691a      	ldr	r2, [r3, #16]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	0092      	lsls	r2, r2, #2
 8000cfa:	0892      	lsrs	r2, r2, #2
 8000cfc:	611a      	str	r2, [r3, #16]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6919      	ldr	r1, [r3, #16]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	e014      	b.n	8000d3c <HAL_ADC_Init+0x108>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	0092      	lsls	r2, r2, #2
 8000d1e:	0892      	lsrs	r2, r2, #2
 8000d20:	611a      	str	r2, [r3, #16]
 8000d22:	4b79      	ldr	r3, [pc, #484]	; (8000f08 <HAL_ADC_Init+0x2d4>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b78      	ldr	r3, [pc, #480]	; (8000f08 <HAL_ADC_Init+0x2d4>)
 8000d28:	4978      	ldr	r1, [pc, #480]	; (8000f0c <HAL_ADC_Init+0x2d8>)
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	4b76      	ldr	r3, [pc, #472]	; (8000f08 <HAL_ADC_Init+0x2d4>)
 8000d30:	6819      	ldr	r1, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	4b74      	ldr	r3, [pc, #464]	; (8000f08 <HAL_ADC_Init+0x2d4>)
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2118      	movs	r1, #24
 8000d48:	438a      	bics	r2, r1
 8000d4a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68d9      	ldr	r1, [r3, #12]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000d5e:	4b6a      	ldr	r3, [pc, #424]	; (8000f08 <HAL_ADC_Init+0x2d4>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4b69      	ldr	r3, [pc, #420]	; (8000f08 <HAL_ADC_Init+0x2d4>)
 8000d64:	496a      	ldr	r1, [pc, #424]	; (8000f10 <HAL_ADC_Init+0x2dc>)
 8000d66:	400a      	ands	r2, r1
 8000d68:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000d6a:	4b67      	ldr	r3, [pc, #412]	; (8000f08 <HAL_ADC_Init+0x2d4>)
 8000d6c:	6819      	ldr	r1, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d72:	065a      	lsls	r2, r3, #25
 8000d74:	4b64      	ldr	r3, [pc, #400]	; (8000f08 <HAL_ADC_Init+0x2d4>)
 8000d76:	430a      	orrs	r2, r1
 8000d78:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	055b      	lsls	r3, r3, #21
 8000d84:	4013      	ands	r3, r2
 8000d86:	d108      	bne.n	8000d9a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2180      	movs	r1, #128	; 0x80
 8000d94:	0549      	lsls	r1, r1, #21
 8000d96:	430a      	orrs	r2, r1
 8000d98:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	495b      	ldr	r1, [pc, #364]	; (8000f14 <HAL_ADC_Init+0x2e0>)
 8000da6:	400a      	ands	r2, r1
 8000da8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68d9      	ldr	r1, [r3, #12]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d101      	bne.n	8000dc0 <HAL_ADC_Init+0x18c>
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	e000      	b.n	8000dc2 <HAL_ADC_Init+0x18e>
 8000dc0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000dc2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2020      	movs	r0, #32
 8000dc8:	5c1b      	ldrb	r3, [r3, r0]
 8000dca:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000dcc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	202c      	movs	r0, #44	; 0x2c
 8000dd2:	5c1b      	ldrb	r3, [r3, r0]
 8000dd4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000dd6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ddc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000de4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000dec:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	430a      	orrs	r2, r1
 8000df4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dfa:	23c2      	movs	r3, #194	; 0xc2
 8000dfc:	33ff      	adds	r3, #255	; 0xff
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d00b      	beq.n	8000e1a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68d9      	ldr	r1, [r3, #12]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e10:	431a      	orrs	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	430a      	orrs	r2, r1
 8000e18:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2221      	movs	r2, #33	; 0x21
 8000e1e:	5c9b      	ldrb	r3, [r3, r2]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d11a      	bne.n	8000e5a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2220      	movs	r2, #32
 8000e28:	5c9b      	ldrb	r3, [r3, r2]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d109      	bne.n	8000e42 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	0249      	lsls	r1, r1, #9
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	e00b      	b.n	8000e5a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e46:	2220      	movs	r2, #32
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e52:	2201      	movs	r2, #1
 8000e54:	431a      	orrs	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d11f      	bne.n	8000ea2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	691a      	ldr	r2, [r3, #16]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	492a      	ldr	r1, [pc, #168]	; (8000f18 <HAL_ADC_Init+0x2e4>)
 8000e6e:	400a      	ands	r2, r1
 8000e70:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6919      	ldr	r1, [r3, #16]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000e80:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000e86:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	691a      	ldr	r2, [r3, #16]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	e00e      	b.n	8000ec0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d107      	bne.n	8000ec0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	691a      	ldr	r2, [r3, #16]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2101      	movs	r1, #1
 8000ebc:	438a      	bics	r2, r1
 8000ebe:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	695a      	ldr	r2, [r3, #20]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2107      	movs	r1, #7
 8000ecc:	438a      	bics	r2, r1
 8000ece:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6959      	ldr	r1, [r3, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eec:	2203      	movs	r2, #3
 8000eee:	4393      	bics	r3, r2
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	0018      	movs	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b002      	add	sp, #8
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	fffffefd 	.word	0xfffffefd
 8000f08:	40012708 	.word	0x40012708
 8000f0c:	ffc3ffff 	.word	0xffc3ffff
 8000f10:	fdffffff 	.word	0xfdffffff
 8000f14:	fffe0219 	.word	0xfffe0219
 8000f18:	fffffc03 	.word	0xfffffc03

08000f1c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f24:	230f      	movs	r3, #15
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2204      	movs	r2, #4
 8000f34:	4013      	ands	r3, r2
 8000f36:	d138      	bne.n	8000faa <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2250      	movs	r2, #80	; 0x50
 8000f3c:	5c9b      	ldrb	r3, [r3, r2]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d101      	bne.n	8000f46 <HAL_ADC_Start+0x2a>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e038      	b.n	8000fb8 <HAL_ADC_Start+0x9c>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2250      	movs	r2, #80	; 0x50
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d007      	beq.n	8000f66 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000f56:	230f      	movs	r3, #15
 8000f58:	18fc      	adds	r4, r7, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f000 f95f 	bl	8001220 <ADC_Enable>
 8000f62:	0003      	movs	r3, r0
 8000f64:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f66:	230f      	movs	r3, #15
 8000f68:	18fb      	adds	r3, r7, r3
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d120      	bne.n	8000fb2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f74:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <HAL_ADC_Start+0xa4>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	0052      	lsls	r2, r2, #1
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2250      	movs	r2, #80	; 0x50
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	221c      	movs	r2, #28
 8000f96:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	e003      	b.n	8000fb2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000faa:	230f      	movs	r3, #15
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	2202      	movs	r2, #2
 8000fb0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	781b      	ldrb	r3, [r3, #0]
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b005      	add	sp, #20
 8000fbe:	bd90      	pop	{r4, r7, pc}
 8000fc0:	fffff0fe 	.word	0xfffff0fe

08000fc4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d102      	bne.n	8000fe4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	e014      	b.n	800100e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	2201      	movs	r2, #1
 8000fec:	4013      	ands	r3, r2
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d10b      	bne.n	800100a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2250      	movs	r2, #80	; 0x50
 8001002:	2100      	movs	r1, #0
 8001004:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e072      	b.n	80010f0 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800100a:	230c      	movs	r3, #12
 800100c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800100e:	f7ff fde3 	bl	8000bd8 <HAL_GetTick>
 8001012:	0003      	movs	r3, r0
 8001014:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001016:	e01f      	b.n	8001058 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	d01c      	beq.n	8001058 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d007      	beq.n	8001034 <HAL_ADC_PollForConversion+0x70>
 8001024:	f7ff fdd8 	bl	8000bd8 <HAL_GetTick>
 8001028:	0002      	movs	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d211      	bcs.n	8001058 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4013      	ands	r3, r2
 800103e:	d10b      	bne.n	8001058 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001044:	2204      	movs	r2, #4
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2250      	movs	r2, #80	; 0x50
 8001050:	2100      	movs	r1, #0
 8001052:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e04b      	b.n	80010f0 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	4013      	ands	r3, r2
 8001062:	d0d9      	beq.n	8001018 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	431a      	orrs	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	23c0      	movs	r3, #192	; 0xc0
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	4013      	ands	r3, r2
 800107e:	d12e      	bne.n	80010de <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2220      	movs	r2, #32
 8001084:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001086:	2b00      	cmp	r3, #0
 8001088:	d129      	bne.n	80010de <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2208      	movs	r2, #8
 8001092:	4013      	ands	r3, r2
 8001094:	2b08      	cmp	r3, #8
 8001096:	d122      	bne.n	80010de <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2204      	movs	r2, #4
 80010a0:	4013      	ands	r3, r2
 80010a2:	d110      	bne.n	80010c6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	210c      	movs	r1, #12
 80010b0:	438a      	bics	r2, r1
 80010b2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b8:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <HAL_ADC_PollForConversion+0x134>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	2201      	movs	r2, #1
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	655a      	str	r2, [r3, #84]	; 0x54
 80010c4:	e00b      	b.n	80010de <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ca:	2220      	movs	r2, #32
 80010cc:	431a      	orrs	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	2201      	movs	r2, #1
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d103      	bne.n	80010ee <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	0018      	movs	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b004      	add	sp, #16
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	fffffefe 	.word	0xfffffefe

080010fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2250      	movs	r2, #80	; 0x50
 8001122:	5c9b      	ldrb	r3, [r3, r2]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d101      	bne.n	800112c <HAL_ADC_ConfigChannel+0x18>
 8001128:	2302      	movs	r3, #2
 800112a:	e06c      	b.n	8001206 <HAL_ADC_ConfigChannel+0xf2>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2250      	movs	r2, #80	; 0x50
 8001130:	2101      	movs	r1, #1
 8001132:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	2204      	movs	r2, #4
 800113c:	4013      	ands	r3, r2
 800113e:	d00b      	beq.n	8001158 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001144:	2220      	movs	r2, #32
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2250      	movs	r2, #80	; 0x50
 8001150:	2100      	movs	r1, #0
 8001152:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e056      	b.n	8001206 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4a2c      	ldr	r2, [pc, #176]	; (8001210 <HAL_ADC_ConfigChannel+0xfc>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d028      	beq.n	80011b4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	035b      	lsls	r3, r3, #13
 800116e:	0b5a      	lsrs	r2, r3, #13
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	02db      	lsls	r3, r3, #11
 8001180:	4013      	ands	r3, r2
 8001182:	d009      	beq.n	8001198 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001184:	4b23      	ldr	r3, [pc, #140]	; (8001214 <HAL_ADC_ConfigChannel+0x100>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <HAL_ADC_ConfigChannel+0x100>)
 800118a:	2180      	movs	r1, #128	; 0x80
 800118c:	0409      	lsls	r1, r1, #16
 800118e:	430a      	orrs	r2, r1
 8001190:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001192:	200a      	movs	r0, #10
 8001194:	f000 f8ac 	bl	80012f0 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	029b      	lsls	r3, r3, #10
 80011a0:	4013      	ands	r3, r2
 80011a2:	d02b      	beq.n	80011fc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_ADC_ConfigChannel+0x100>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_ADC_ConfigChannel+0x100>)
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	03c9      	lsls	r1, r1, #15
 80011ae:	430a      	orrs	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	e023      	b.n	80011fc <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	035b      	lsls	r3, r3, #13
 80011c0:	0b5b      	lsrs	r3, r3, #13
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	400a      	ands	r2, r1
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	02db      	lsls	r3, r3, #11
 80011d4:	4013      	ands	r3, r2
 80011d6:	d005      	beq.n	80011e4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_ADC_ConfigChannel+0x100>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_ADC_ConfigChannel+0x100>)
 80011de:	490e      	ldr	r1, [pc, #56]	; (8001218 <HAL_ADC_ConfigChannel+0x104>)
 80011e0:	400a      	ands	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	029b      	lsls	r3, r3, #10
 80011ec:	4013      	ands	r3, r2
 80011ee:	d005      	beq.n	80011fc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HAL_ADC_ConfigChannel+0x100>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <HAL_ADC_ConfigChannel+0x100>)
 80011f6:	4909      	ldr	r1, [pc, #36]	; (800121c <HAL_ADC_ConfigChannel+0x108>)
 80011f8:	400a      	ands	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2250      	movs	r2, #80	; 0x50
 8001200:	2100      	movs	r1, #0
 8001202:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	0018      	movs	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	00001001 	.word	0x00001001
 8001214:	40012708 	.word	0x40012708
 8001218:	ff7fffff 	.word	0xff7fffff
 800121c:	ffbfffff 	.word	0xffbfffff

08001220 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2203      	movs	r2, #3
 8001234:	4013      	ands	r3, r2
 8001236:	2b01      	cmp	r3, #1
 8001238:	d108      	bne.n	800124c <ADC_Enable+0x2c>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2201      	movs	r2, #1
 8001242:	4013      	ands	r3, r2
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <ADC_Enable+0x2c>
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <ADC_Enable+0x2e>
 800124c:	2300      	movs	r3, #0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d146      	bne.n	80012e0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4a24      	ldr	r2, [pc, #144]	; (80012ec <ADC_Enable+0xcc>)
 800125a:	4013      	ands	r3, r2
 800125c:	d00d      	beq.n	800127a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001262:	2210      	movs	r2, #16
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	2201      	movs	r2, #1
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e033      	b.n	80012e2 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2101      	movs	r1, #1
 8001286:	430a      	orrs	r2, r1
 8001288:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800128a:	2001      	movs	r0, #1
 800128c:	f000 f830 	bl	80012f0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001290:	f7ff fca2 	bl	8000bd8 <HAL_GetTick>
 8001294:	0003      	movs	r3, r0
 8001296:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001298:	e01b      	b.n	80012d2 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800129a:	f7ff fc9d 	bl	8000bd8 <HAL_GetTick>
 800129e:	0002      	movs	r2, r0
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b0a      	cmp	r3, #10
 80012a6:	d914      	bls.n	80012d2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2201      	movs	r2, #1
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d00d      	beq.n	80012d2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ba:	2210      	movs	r2, #16
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c6:	2201      	movs	r2, #1
 80012c8:	431a      	orrs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e007      	b.n	80012e2 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2201      	movs	r2, #1
 80012da:	4013      	ands	r3, r2
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d1dc      	bne.n	800129a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	0018      	movs	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b004      	add	sp, #16
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	80000017 	.word	0x80000017

080012f0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <ADC_DelayMicroSecond+0x38>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	490b      	ldr	r1, [pc, #44]	; (800132c <ADC_DelayMicroSecond+0x3c>)
 80012fe:	0018      	movs	r0, r3
 8001300:	f7fe ff02 	bl	8000108 <__udivsi3>
 8001304:	0003      	movs	r3, r0
 8001306:	001a      	movs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4353      	muls	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800130e:	e002      	b.n	8001316 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	3b01      	subs	r3, #1
 8001314:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f9      	bne.n	8001310 <ADC_DelayMicroSecond+0x20>
  } 
}
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	46bd      	mov	sp, r7
 8001322:	b004      	add	sp, #16
 8001324:	bd80      	pop	{r7, pc}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	20000000 	.word	0x20000000
 800132c:	000f4240 	.word	0x000f4240

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	0002      	movs	r2, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b7f      	cmp	r3, #127	; 0x7f
 8001344:	d828      	bhi.n	8001398 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001346:	4a2f      	ldr	r2, [pc, #188]	; (8001404 <__NVIC_SetPriority+0xd4>)
 8001348:	1dfb      	adds	r3, r7, #7
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b25b      	sxtb	r3, r3
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	33c0      	adds	r3, #192	; 0xc0
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	589b      	ldr	r3, [r3, r2]
 8001356:	1dfa      	adds	r2, r7, #7
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	0011      	movs	r1, r2
 800135c:	2203      	movs	r2, #3
 800135e:	400a      	ands	r2, r1
 8001360:	00d2      	lsls	r2, r2, #3
 8001362:	21ff      	movs	r1, #255	; 0xff
 8001364:	4091      	lsls	r1, r2
 8001366:	000a      	movs	r2, r1
 8001368:	43d2      	mvns	r2, r2
 800136a:	401a      	ands	r2, r3
 800136c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	019b      	lsls	r3, r3, #6
 8001372:	22ff      	movs	r2, #255	; 0xff
 8001374:	401a      	ands	r2, r3
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	0018      	movs	r0, r3
 800137c:	2303      	movs	r3, #3
 800137e:	4003      	ands	r3, r0
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001384:	481f      	ldr	r0, [pc, #124]	; (8001404 <__NVIC_SetPriority+0xd4>)
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b25b      	sxtb	r3, r3
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	430a      	orrs	r2, r1
 8001390:	33c0      	adds	r3, #192	; 0xc0
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001396:	e031      	b.n	80013fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <__NVIC_SetPriority+0xd8>)
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	0019      	movs	r1, r3
 80013a0:	230f      	movs	r3, #15
 80013a2:	400b      	ands	r3, r1
 80013a4:	3b08      	subs	r3, #8
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	3306      	adds	r3, #6
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	18d3      	adds	r3, r2, r3
 80013ae:	3304      	adds	r3, #4
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	1dfa      	adds	r2, r7, #7
 80013b4:	7812      	ldrb	r2, [r2, #0]
 80013b6:	0011      	movs	r1, r2
 80013b8:	2203      	movs	r2, #3
 80013ba:	400a      	ands	r2, r1
 80013bc:	00d2      	lsls	r2, r2, #3
 80013be:	21ff      	movs	r1, #255	; 0xff
 80013c0:	4091      	lsls	r1, r2
 80013c2:	000a      	movs	r2, r1
 80013c4:	43d2      	mvns	r2, r2
 80013c6:	401a      	ands	r2, r3
 80013c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	019b      	lsls	r3, r3, #6
 80013ce:	22ff      	movs	r2, #255	; 0xff
 80013d0:	401a      	ands	r2, r3
 80013d2:	1dfb      	adds	r3, r7, #7
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	0018      	movs	r0, r3
 80013d8:	2303      	movs	r3, #3
 80013da:	4003      	ands	r3, r0
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e0:	4809      	ldr	r0, [pc, #36]	; (8001408 <__NVIC_SetPriority+0xd8>)
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	001c      	movs	r4, r3
 80013e8:	230f      	movs	r3, #15
 80013ea:	4023      	ands	r3, r4
 80013ec:	3b08      	subs	r3, #8
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	430a      	orrs	r2, r1
 80013f2:	3306      	adds	r3, #6
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	18c3      	adds	r3, r0, r3
 80013f8:	3304      	adds	r3, #4
 80013fa:	601a      	str	r2, [r3, #0]
}
 80013fc:	46c0      	nop			; (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b003      	add	sp, #12
 8001402:	bd90      	pop	{r4, r7, pc}
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	1e5a      	subs	r2, r3, #1
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	045b      	lsls	r3, r3, #17
 800141c:	429a      	cmp	r2, r3
 800141e:	d301      	bcc.n	8001424 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001420:	2301      	movs	r3, #1
 8001422:	e010      	b.n	8001446 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <SysTick_Config+0x44>)
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	3a01      	subs	r2, #1
 800142a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142c:	2301      	movs	r3, #1
 800142e:	425b      	negs	r3, r3
 8001430:	2103      	movs	r1, #3
 8001432:	0018      	movs	r0, r3
 8001434:	f7ff ff7c 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <SysTick_Config+0x44>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <SysTick_Config+0x44>)
 8001440:	2207      	movs	r2, #7
 8001442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001444:	2300      	movs	r3, #0
}
 8001446:	0018      	movs	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	b002      	add	sp, #8
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	210f      	movs	r1, #15
 8001460:	187b      	adds	r3, r7, r1
 8001462:	1c02      	adds	r2, r0, #0
 8001464:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	187b      	adds	r3, r7, r1
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b25b      	sxtb	r3, r3
 800146e:	0011      	movs	r1, r2
 8001470:	0018      	movs	r0, r3
 8001472:	f7ff ff5d 	bl	8001330 <__NVIC_SetPriority>
}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	b004      	add	sp, #16
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	0018      	movs	r0, r3
 800148a:	f7ff ffbf 	bl	800140c <SysTick_Config>
 800148e:	0003      	movs	r3, r0
}
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	b002      	add	sp, #8
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80014ae:	e155      	b.n	800175c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2101      	movs	r1, #1
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4091      	lsls	r1, r2
 80014ba:	000a      	movs	r2, r1
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d100      	bne.n	80014c8 <HAL_GPIO_Init+0x30>
 80014c6:	e146      	b.n	8001756 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2203      	movs	r2, #3
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d005      	beq.n	80014e0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2203      	movs	r2, #3
 80014da:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d130      	bne.n	8001542 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2203      	movs	r2, #3
 80014ec:	409a      	lsls	r2, r3
 80014ee:	0013      	movs	r3, r2
 80014f0:	43da      	mvns	r2, r3
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	409a      	lsls	r2, r3
 8001502:	0013      	movs	r3, r2
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001516:	2201      	movs	r2, #1
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	43da      	mvns	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	2201      	movs	r2, #1
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2203      	movs	r2, #3
 8001548:	4013      	ands	r3, r2
 800154a:	2b03      	cmp	r3, #3
 800154c:	d017      	beq.n	800157e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	409a      	lsls	r2, r3
 800155c:	0013      	movs	r3, r2
 800155e:	43da      	mvns	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	409a      	lsls	r2, r3
 8001570:	0013      	movs	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2203      	movs	r2, #3
 8001584:	4013      	ands	r3, r2
 8001586:	2b02      	cmp	r3, #2
 8001588:	d123      	bne.n	80015d2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	58d3      	ldr	r3, [r2, r3]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2207      	movs	r2, #7
 800159c:	4013      	ands	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	409a      	lsls	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	43da      	mvns	r2, r3
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	691a      	ldr	r2, [r3, #16]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2107      	movs	r1, #7
 80015b6:	400b      	ands	r3, r1
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	08da      	lsrs	r2, r3, #3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3208      	adds	r2, #8
 80015cc:	0092      	lsls	r2, r2, #2
 80015ce:	6939      	ldr	r1, [r7, #16]
 80015d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	409a      	lsls	r2, r3
 80015e0:	0013      	movs	r3, r2
 80015e2:	43da      	mvns	r2, r3
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2203      	movs	r2, #3
 80015f0:	401a      	ands	r2, r3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	409a      	lsls	r2, r3
 80015f8:	0013      	movs	r3, r2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	23c0      	movs	r3, #192	; 0xc0
 800160c:	029b      	lsls	r3, r3, #10
 800160e:	4013      	ands	r3, r2
 8001610:	d100      	bne.n	8001614 <HAL_GPIO_Init+0x17c>
 8001612:	e0a0      	b.n	8001756 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001614:	4b57      	ldr	r3, [pc, #348]	; (8001774 <HAL_GPIO_Init+0x2dc>)
 8001616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001618:	4b56      	ldr	r3, [pc, #344]	; (8001774 <HAL_GPIO_Init+0x2dc>)
 800161a:	2101      	movs	r1, #1
 800161c:	430a      	orrs	r2, r1
 800161e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001620:	4a55      	ldr	r2, [pc, #340]	; (8001778 <HAL_GPIO_Init+0x2e0>)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	3302      	adds	r3, #2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	589b      	ldr	r3, [r3, r2]
 800162c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	2203      	movs	r2, #3
 8001632:	4013      	ands	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	220f      	movs	r2, #15
 8001638:	409a      	lsls	r2, r3
 800163a:	0013      	movs	r3, r2
 800163c:	43da      	mvns	r2, r3
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	23a0      	movs	r3, #160	; 0xa0
 8001648:	05db      	lsls	r3, r3, #23
 800164a:	429a      	cmp	r2, r3
 800164c:	d01f      	beq.n	800168e <HAL_GPIO_Init+0x1f6>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4a      	ldr	r2, [pc, #296]	; (800177c <HAL_GPIO_Init+0x2e4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d019      	beq.n	800168a <HAL_GPIO_Init+0x1f2>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a49      	ldr	r2, [pc, #292]	; (8001780 <HAL_GPIO_Init+0x2e8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d013      	beq.n	8001686 <HAL_GPIO_Init+0x1ee>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a48      	ldr	r2, [pc, #288]	; (8001784 <HAL_GPIO_Init+0x2ec>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d00d      	beq.n	8001682 <HAL_GPIO_Init+0x1ea>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a47      	ldr	r2, [pc, #284]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d007      	beq.n	800167e <HAL_GPIO_Init+0x1e6>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a46      	ldr	r2, [pc, #280]	; (800178c <HAL_GPIO_Init+0x2f4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d101      	bne.n	800167a <HAL_GPIO_Init+0x1e2>
 8001676:	2305      	movs	r3, #5
 8001678:	e00a      	b.n	8001690 <HAL_GPIO_Init+0x1f8>
 800167a:	2306      	movs	r3, #6
 800167c:	e008      	b.n	8001690 <HAL_GPIO_Init+0x1f8>
 800167e:	2304      	movs	r3, #4
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x1f8>
 8001682:	2303      	movs	r3, #3
 8001684:	e004      	b.n	8001690 <HAL_GPIO_Init+0x1f8>
 8001686:	2302      	movs	r3, #2
 8001688:	e002      	b.n	8001690 <HAL_GPIO_Init+0x1f8>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <HAL_GPIO_Init+0x1f8>
 800168e:	2300      	movs	r3, #0
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	2103      	movs	r1, #3
 8001694:	400a      	ands	r2, r1
 8001696:	0092      	lsls	r2, r2, #2
 8001698:	4093      	lsls	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a0:	4935      	ldr	r1, [pc, #212]	; (8001778 <HAL_GPIO_Init+0x2e0>)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	3302      	adds	r3, #2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_GPIO_Init+0x2f8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	43da      	mvns	r2, r3
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	025b      	lsls	r3, r3, #9
 80016c6:	4013      	ands	r3, r2
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016d2:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <HAL_GPIO_Init+0x2f8>)
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80016d8:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_GPIO_Init+0x2f8>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	43da      	mvns	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	029b      	lsls	r3, r3, #10
 80016f0:	4013      	ands	r3, r2
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016fc:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_GPIO_Init+0x2f8>)
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <HAL_GPIO_Init+0x2f8>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43da      	mvns	r2, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	035b      	lsls	r3, r3, #13
 800171a:	4013      	ands	r3, r2
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_GPIO_Init+0x2f8>)
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_GPIO_Init+0x2f8>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	43da      	mvns	r2, r3
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	039b      	lsls	r3, r3, #14
 8001744:	4013      	ands	r3, r2
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_GPIO_Init+0x2f8>)
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3301      	adds	r3, #1
 800175a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	40da      	lsrs	r2, r3
 8001764:	1e13      	subs	r3, r2, #0
 8001766:	d000      	beq.n	800176a <HAL_GPIO_Init+0x2d2>
 8001768:	e6a2      	b.n	80014b0 <HAL_GPIO_Init+0x18>
  }
}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	b006      	add	sp, #24
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40021000 	.word	0x40021000
 8001778:	40010000 	.word	0x40010000
 800177c:	50000400 	.word	0x50000400
 8001780:	50000800 	.word	0x50000800
 8001784:	50000c00 	.word	0x50000c00
 8001788:	50001000 	.word	0x50001000
 800178c:	50001c00 	.word	0x50001c00
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	0008      	movs	r0, r1
 800179e:	0011      	movs	r1, r2
 80017a0:	1cbb      	adds	r3, r7, #2
 80017a2:	1c02      	adds	r2, r0, #0
 80017a4:	801a      	strh	r2, [r3, #0]
 80017a6:	1c7b      	adds	r3, r7, #1
 80017a8:	1c0a      	adds	r2, r1, #0
 80017aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ac:	1c7b      	adds	r3, r7, #1
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b4:	1cbb      	adds	r3, r7, #2
 80017b6:	881a      	ldrh	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80017bc:	e003      	b.n	80017c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80017be:	1cbb      	adds	r3, r7, #2
 80017c0:	881a      	ldrh	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b002      	add	sp, #8
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e082      	b.n	80018e8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2241      	movs	r2, #65	; 0x41
 80017e6:	5c9b      	ldrb	r3, [r3, r2]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d107      	bne.n	80017fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2240      	movs	r2, #64	; 0x40
 80017f2:	2100      	movs	r1, #0
 80017f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff f8e7 	bl	80009cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2241      	movs	r2, #65	; 0x41
 8001802:	2124      	movs	r1, #36	; 0x24
 8001804:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	438a      	bics	r2, r1
 8001814:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4934      	ldr	r1, [pc, #208]	; (80018f0 <HAL_I2C_Init+0x120>)
 8001820:	400a      	ands	r2, r1
 8001822:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4931      	ldr	r1, [pc, #196]	; (80018f4 <HAL_I2C_Init+0x124>)
 8001830:	400a      	ands	r2, r1
 8001832:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d108      	bne.n	800184e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	0209      	lsls	r1, r1, #8
 8001848:	430a      	orrs	r2, r1
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	e007      	b.n	800185e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2184      	movs	r1, #132	; 0x84
 8001858:	0209      	lsls	r1, r1, #8
 800185a:	430a      	orrs	r2, r1
 800185c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d104      	bne.n	8001870 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	491f      	ldr	r1, [pc, #124]	; (80018f8 <HAL_I2C_Init+0x128>)
 800187c:	430a      	orrs	r2, r1
 800187e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	491a      	ldr	r1, [pc, #104]	; (80018f4 <HAL_I2C_Init+0x124>)
 800188c:	400a      	ands	r2, r1
 800188e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	431a      	orrs	r2, r3
 800189a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69d9      	ldr	r1, [r3, #28]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1a      	ldr	r2, [r3, #32]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2101      	movs	r1, #1
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2241      	movs	r2, #65	; 0x41
 80018d4:	2120      	movs	r1, #32
 80018d6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2242      	movs	r2, #66	; 0x42
 80018e2:	2100      	movs	r1, #0
 80018e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b002      	add	sp, #8
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	f0ffffff 	.word	0xf0ffffff
 80018f4:	ffff7fff 	.word	0xffff7fff
 80018f8:	02008000 	.word	0x02008000

080018fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2241      	movs	r2, #65	; 0x41
 800190a:	5c9b      	ldrb	r3, [r3, r2]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b20      	cmp	r3, #32
 8001910:	d138      	bne.n	8001984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2240      	movs	r2, #64	; 0x40
 8001916:	5c9b      	ldrb	r3, [r3, r2]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800191c:	2302      	movs	r3, #2
 800191e:	e032      	b.n	8001986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2240      	movs	r2, #64	; 0x40
 8001924:	2101      	movs	r1, #1
 8001926:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2241      	movs	r2, #65	; 0x41
 800192c:	2124      	movs	r1, #36	; 0x24
 800192e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2101      	movs	r1, #1
 800193c:	438a      	bics	r2, r1
 800193e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4911      	ldr	r1, [pc, #68]	; (8001990 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800194c:	400a      	ands	r2, r1
 800194e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6819      	ldr	r1, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2101      	movs	r1, #1
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2241      	movs	r2, #65	; 0x41
 8001974:	2120      	movs	r1, #32
 8001976:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2240      	movs	r2, #64	; 0x40
 800197c:	2100      	movs	r1, #0
 800197e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	e000      	b.n	8001986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001984:	2302      	movs	r3, #2
  }
}
 8001986:	0018      	movs	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	b002      	add	sp, #8
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	ffffefff 	.word	0xffffefff

08001994 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2241      	movs	r2, #65	; 0x41
 80019a2:	5c9b      	ldrb	r3, [r3, r2]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b20      	cmp	r3, #32
 80019a8:	d139      	bne.n	8001a1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2240      	movs	r2, #64	; 0x40
 80019ae:	5c9b      	ldrb	r3, [r3, r2]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e033      	b.n	8001a20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2240      	movs	r2, #64	; 0x40
 80019bc:	2101      	movs	r1, #1
 80019be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2241      	movs	r2, #65	; 0x41
 80019c4:	2124      	movs	r1, #36	; 0x24
 80019c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2101      	movs	r1, #1
 80019d4:	438a      	bics	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4a11      	ldr	r2, [pc, #68]	; (8001a28 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2101      	movs	r1, #1
 8001a06:	430a      	orrs	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2241      	movs	r2, #65	; 0x41
 8001a0e:	2120      	movs	r1, #32
 8001a10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2240      	movs	r2, #64	; 0x40
 8001a16:	2100      	movs	r1, #0
 8001a18:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a1e:	2302      	movs	r3, #2
  }
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b004      	add	sp, #16
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	fffff0ff 	.word	0xfffff0ff

08001a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a2c:	b5b0      	push	{r4, r5, r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d102      	bne.n	8001a40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f000 fbbf 	bl	80021be <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a40:	4bc9      	ldr	r3, [pc, #804]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	220c      	movs	r2, #12
 8001a46:	4013      	ands	r3, r2
 8001a48:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a4a:	4bc7      	ldr	r3, [pc, #796]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	025b      	lsls	r3, r3, #9
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d100      	bne.n	8001a62 <HAL_RCC_OscConfig+0x36>
 8001a60:	e07e      	b.n	8001b60 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d007      	beq.n	8001a78 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	d112      	bne.n	8001a94 <HAL_RCC_OscConfig+0x68>
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	025b      	lsls	r3, r3, #9
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d10d      	bne.n	8001a94 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	4bbb      	ldr	r3, [pc, #748]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	029b      	lsls	r3, r3, #10
 8001a80:	4013      	ands	r3, r2
 8001a82:	d100      	bne.n	8001a86 <HAL_RCC_OscConfig+0x5a>
 8001a84:	e06b      	b.n	8001b5e <HAL_RCC_OscConfig+0x132>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d167      	bne.n	8001b5e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f000 fb95 	bl	80021be <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	025b      	lsls	r3, r3, #9
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x84>
 8001aa0:	4bb1      	ldr	r3, [pc, #708]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4bb0      	ldr	r3, [pc, #704]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001aa6:	2180      	movs	r1, #128	; 0x80
 8001aa8:	0249      	lsls	r1, r1, #9
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	e027      	b.n	8001b00 <HAL_RCC_OscConfig+0xd4>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	23a0      	movs	r3, #160	; 0xa0
 8001ab6:	02db      	lsls	r3, r3, #11
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d10e      	bne.n	8001ada <HAL_RCC_OscConfig+0xae>
 8001abc:	4baa      	ldr	r3, [pc, #680]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4ba9      	ldr	r3, [pc, #676]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	02c9      	lsls	r1, r1, #11
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	4ba7      	ldr	r3, [pc, #668]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4ba6      	ldr	r3, [pc, #664]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001ad0:	2180      	movs	r1, #128	; 0x80
 8001ad2:	0249      	lsls	r1, r1, #9
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e012      	b.n	8001b00 <HAL_RCC_OscConfig+0xd4>
 8001ada:	4ba3      	ldr	r3, [pc, #652]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4ba2      	ldr	r3, [pc, #648]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001ae0:	49a2      	ldr	r1, [pc, #648]	; (8001d6c <HAL_RCC_OscConfig+0x340>)
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	4ba0      	ldr	r3, [pc, #640]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	025b      	lsls	r3, r3, #9
 8001aee:	4013      	ands	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4b9c      	ldr	r3, [pc, #624]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b9b      	ldr	r3, [pc, #620]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001afa:	499d      	ldr	r1, [pc, #628]	; (8001d70 <HAL_RCC_OscConfig+0x344>)
 8001afc:	400a      	ands	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d015      	beq.n	8001b34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7ff f866 	bl	8000bd8 <HAL_GetTick>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b10:	e009      	b.n	8001b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b12:	f7ff f861 	bl	8000bd8 <HAL_GetTick>
 8001b16:	0002      	movs	r2, r0
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b64      	cmp	r3, #100	; 0x64
 8001b1e:	d902      	bls.n	8001b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	f000 fb4c 	bl	80021be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b26:	4b90      	ldr	r3, [pc, #576]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	029b      	lsls	r3, r3, #10
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d0ef      	beq.n	8001b12 <HAL_RCC_OscConfig+0xe6>
 8001b32:	e015      	b.n	8001b60 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff f850 	bl	8000bd8 <HAL_GetTick>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b3e:	f7ff f84b 	bl	8000bd8 <HAL_GetTick>
 8001b42:	0002      	movs	r2, r0
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e336      	b.n	80021be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b50:	4b85      	ldr	r3, [pc, #532]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	029b      	lsls	r3, r3, #10
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x112>
 8001b5c:	e000      	b.n	8001b60 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2202      	movs	r2, #2
 8001b66:	4013      	ands	r3, r2
 8001b68:	d100      	bne.n	8001b6c <HAL_RCC_OscConfig+0x140>
 8001b6a:	e099      	b.n	8001ca0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	2220      	movs	r2, #32
 8001b76:	4013      	ands	r3, r2
 8001b78:	d009      	beq.n	8001b8e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001b7a:	4b7b      	ldr	r3, [pc, #492]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b7a      	ldr	r3, [pc, #488]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001b80:	2120      	movs	r1, #32
 8001b82:	430a      	orrs	r2, r1
 8001b84:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	2220      	movs	r2, #32
 8001b8a:	4393      	bics	r3, r2
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	2b0c      	cmp	r3, #12
 8001b98:	d13e      	bne.n	8001c18 <HAL_RCC_OscConfig+0x1ec>
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d13b      	bne.n	8001c18 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001ba0:	4b71      	ldr	r3, [pc, #452]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d004      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x188>
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e304      	b.n	80021be <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb4:	4b6c      	ldr	r3, [pc, #432]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	4a6e      	ldr	r2, [pc, #440]	; (8001d74 <HAL_RCC_OscConfig+0x348>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	021a      	lsls	r2, r3, #8
 8001bc4:	4b68      	ldr	r3, [pc, #416]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001bca:	4b67      	ldr	r3, [pc, #412]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2209      	movs	r2, #9
 8001bd0:	4393      	bics	r3, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	4b64      	ldr	r3, [pc, #400]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bdc:	f000 fc42 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8001be0:	0001      	movs	r1, r0
 8001be2:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	220f      	movs	r2, #15
 8001bea:	4013      	ands	r3, r2
 8001bec:	4a62      	ldr	r2, [pc, #392]	; (8001d78 <HAL_RCC_OscConfig+0x34c>)
 8001bee:	5cd3      	ldrb	r3, [r2, r3]
 8001bf0:	000a      	movs	r2, r1
 8001bf2:	40da      	lsrs	r2, r3
 8001bf4:	4b61      	ldr	r3, [pc, #388]	; (8001d7c <HAL_RCC_OscConfig+0x350>)
 8001bf6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001bf8:	4b61      	ldr	r3, [pc, #388]	; (8001d80 <HAL_RCC_OscConfig+0x354>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2513      	movs	r5, #19
 8001bfe:	197c      	adds	r4, r7, r5
 8001c00:	0018      	movs	r0, r3
 8001c02:	f7fe ffa3 	bl	8000b4c <HAL_InitTick>
 8001c06:	0003      	movs	r3, r0
 8001c08:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c0a:	197b      	adds	r3, r7, r5
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d046      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001c12:	197b      	adds	r3, r7, r5
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	e2d2      	b.n	80021be <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d027      	beq.n	8001c6e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c1e:	4b52      	ldr	r3, [pc, #328]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2209      	movs	r2, #9
 8001c24:	4393      	bics	r3, r2
 8001c26:	0019      	movs	r1, r3
 8001c28:	4b4f      	ldr	r3, [pc, #316]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7fe ffd2 	bl	8000bd8 <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c3a:	f7fe ffcd 	bl	8000bd8 <HAL_GetTick>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e2b8      	b.n	80021be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c4c:	4b46      	ldr	r3, [pc, #280]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2204      	movs	r2, #4
 8001c52:	4013      	ands	r3, r2
 8001c54:	d0f1      	beq.n	8001c3a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c56:	4b44      	ldr	r3, [pc, #272]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4a46      	ldr	r2, [pc, #280]	; (8001d74 <HAL_RCC_OscConfig+0x348>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	0019      	movs	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	021a      	lsls	r2, r3, #8
 8001c66:	4b40      	ldr	r3, [pc, #256]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	e018      	b.n	8001ca0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6e:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001c74:	2101      	movs	r1, #1
 8001c76:	438a      	bics	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7fe ffad 	bl	8000bd8 <HAL_GetTick>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c84:	f7fe ffa8 	bl	8000bd8 <HAL_GetTick>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e293      	b.n	80021be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d1f1      	bne.n	8001c84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d100      	bne.n	8001cac <HAL_RCC_OscConfig+0x280>
 8001caa:	e0a2      	b.n	8001df2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d140      	bne.n	8001d34 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d005      	beq.n	8001cca <HAL_RCC_OscConfig+0x29e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e279      	b.n	80021be <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cca:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4a2d      	ldr	r2, [pc, #180]	; (8001d84 <HAL_RCC_OscConfig+0x358>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cd8:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cde:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	0a19      	lsrs	r1, r3, #8
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	061a      	lsls	r2, r3, #24
 8001cec:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	0b5b      	lsrs	r3, r3, #13
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	0212      	lsls	r2, r2, #8
 8001cfe:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	210f      	movs	r1, #15
 8001d08:	400b      	ands	r3, r1
 8001d0a:	491b      	ldr	r1, [pc, #108]	; (8001d78 <HAL_RCC_OscConfig+0x34c>)
 8001d0c:	5ccb      	ldrb	r3, [r1, r3]
 8001d0e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_RCC_OscConfig+0x350>)
 8001d12:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <HAL_RCC_OscConfig+0x354>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2513      	movs	r5, #19
 8001d1a:	197c      	adds	r4, r7, r5
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7fe ff15 	bl	8000b4c <HAL_InitTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d26:	197b      	adds	r3, r7, r5
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d061      	beq.n	8001df2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001d2e:	197b      	adds	r3, r7, r5
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	e244      	b.n	80021be <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d040      	beq.n	8001dbe <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001d42:	2180      	movs	r1, #128	; 0x80
 8001d44:	0049      	lsls	r1, r1, #1
 8001d46:	430a      	orrs	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4a:	f7fe ff45 	bl	8000bd8 <HAL_GetTick>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d52:	e019      	b.n	8001d88 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d54:	f7fe ff40 	bl	8000bd8 <HAL_GetTick>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d912      	bls.n	8001d88 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e22b      	b.n	80021be <HAL_RCC_OscConfig+0x792>
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	fffeffff 	.word	0xfffeffff
 8001d70:	fffbffff 	.word	0xfffbffff
 8001d74:	ffffe0ff 	.word	0xffffe0ff
 8001d78:	08002e34 	.word	0x08002e34
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	20000004 	.word	0x20000004
 8001d84:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d88:	4bca      	ldr	r3, [pc, #808]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4013      	ands	r3, r2
 8001d92:	d0df      	beq.n	8001d54 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d94:	4bc7      	ldr	r3, [pc, #796]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	4ac7      	ldr	r2, [pc, #796]	; (80020b8 <HAL_RCC_OscConfig+0x68c>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001da2:	4bc4      	ldr	r3, [pc, #784]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001da4:	430a      	orrs	r2, r1
 8001da6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da8:	4bc2      	ldr	r3, [pc, #776]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	0a19      	lsrs	r1, r3, #8
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	061a      	lsls	r2, r3, #24
 8001db6:	4bbf      	ldr	r3, [pc, #764]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	e019      	b.n	8001df2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dbe:	4bbd      	ldr	r3, [pc, #756]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4bbc      	ldr	r3, [pc, #752]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001dc4:	49bd      	ldr	r1, [pc, #756]	; (80020bc <HAL_RCC_OscConfig+0x690>)
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7fe ff05 	bl	8000bd8 <HAL_GetTick>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dd4:	f7fe ff00 	bl	8000bd8 <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e1eb      	b.n	80021be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001de6:	4bb3      	ldr	r3, [pc, #716]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4013      	ands	r3, r2
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2208      	movs	r2, #8
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d036      	beq.n	8001e6a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d019      	beq.n	8001e38 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e04:	4bab      	ldr	r3, [pc, #684]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001e06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e08:	4baa      	ldr	r3, [pc, #680]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e10:	f7fe fee2 	bl	8000bd8 <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e1a:	f7fe fedd 	bl	8000bd8 <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1c8      	b.n	80021be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e2c:	4ba1      	ldr	r3, [pc, #644]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e30:	2202      	movs	r2, #2
 8001e32:	4013      	ands	r3, r2
 8001e34:	d0f1      	beq.n	8001e1a <HAL_RCC_OscConfig+0x3ee>
 8001e36:	e018      	b.n	8001e6a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e38:	4b9e      	ldr	r3, [pc, #632]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001e3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e3c:	4b9d      	ldr	r3, [pc, #628]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001e3e:	2101      	movs	r1, #1
 8001e40:	438a      	bics	r2, r1
 8001e42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e44:	f7fe fec8 	bl	8000bd8 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e4e:	f7fe fec3 	bl	8000bd8 <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e1ae      	b.n	80021be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e60:	4b94      	ldr	r3, [pc, #592]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e64:	2202      	movs	r2, #2
 8001e66:	4013      	ands	r3, r2
 8001e68:	d1f1      	bne.n	8001e4e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2204      	movs	r2, #4
 8001e70:	4013      	ands	r3, r2
 8001e72:	d100      	bne.n	8001e76 <HAL_RCC_OscConfig+0x44a>
 8001e74:	e0ae      	b.n	8001fd4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2023      	movs	r0, #35	; 0x23
 8001e78:	183b      	adds	r3, r7, r0
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7e:	4b8d      	ldr	r3, [pc, #564]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	055b      	lsls	r3, r3, #21
 8001e86:	4013      	ands	r3, r2
 8001e88:	d109      	bne.n	8001e9e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b8a      	ldr	r3, [pc, #552]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e8e:	4b89      	ldr	r3, [pc, #548]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001e90:	2180      	movs	r1, #128	; 0x80
 8001e92:	0549      	lsls	r1, r1, #21
 8001e94:	430a      	orrs	r2, r1
 8001e96:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e98:	183b      	adds	r3, r7, r0
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	4b88      	ldr	r3, [pc, #544]	; (80020c0 <HAL_RCC_OscConfig+0x694>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d11a      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eaa:	4b85      	ldr	r3, [pc, #532]	; (80020c0 <HAL_RCC_OscConfig+0x694>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4b84      	ldr	r3, [pc, #528]	; (80020c0 <HAL_RCC_OscConfig+0x694>)
 8001eb0:	2180      	movs	r1, #128	; 0x80
 8001eb2:	0049      	lsls	r1, r1, #1
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb8:	f7fe fe8e 	bl	8000bd8 <HAL_GetTick>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec2:	f7fe fe89 	bl	8000bd8 <HAL_GetTick>
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b64      	cmp	r3, #100	; 0x64
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e174      	b.n	80021be <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed4:	4b7a      	ldr	r3, [pc, #488]	; (80020c0 <HAL_RCC_OscConfig+0x694>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4013      	ands	r3, r2
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_OscConfig+0x4d0>
 8001eec:	4b71      	ldr	r3, [pc, #452]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001eee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ef0:	4b70      	ldr	r3, [pc, #448]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	0049      	lsls	r1, r1, #1
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	651a      	str	r2, [r3, #80]	; 0x50
 8001efa:	e031      	b.n	8001f60 <HAL_RCC_OscConfig+0x534>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10c      	bne.n	8001f1e <HAL_RCC_OscConfig+0x4f2>
 8001f04:	4b6b      	ldr	r3, [pc, #428]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001f06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f08:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001f0a:	496c      	ldr	r1, [pc, #432]	; (80020bc <HAL_RCC_OscConfig+0x690>)
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	651a      	str	r2, [r3, #80]	; 0x50
 8001f10:	4b68      	ldr	r3, [pc, #416]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001f12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f14:	4b67      	ldr	r3, [pc, #412]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001f16:	496b      	ldr	r1, [pc, #428]	; (80020c4 <HAL_RCC_OscConfig+0x698>)
 8001f18:	400a      	ands	r2, r1
 8001f1a:	651a      	str	r2, [r3, #80]	; 0x50
 8001f1c:	e020      	b.n	8001f60 <HAL_RCC_OscConfig+0x534>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	23a0      	movs	r3, #160	; 0xa0
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d10e      	bne.n	8001f48 <HAL_RCC_OscConfig+0x51c>
 8001f2a:	4b62      	ldr	r3, [pc, #392]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001f2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f2e:	4b61      	ldr	r3, [pc, #388]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001f30:	2180      	movs	r1, #128	; 0x80
 8001f32:	00c9      	lsls	r1, r1, #3
 8001f34:	430a      	orrs	r2, r1
 8001f36:	651a      	str	r2, [r3, #80]	; 0x50
 8001f38:	4b5e      	ldr	r3, [pc, #376]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001f3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f3c:	4b5d      	ldr	r3, [pc, #372]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	0049      	lsls	r1, r1, #1
 8001f42:	430a      	orrs	r2, r1
 8001f44:	651a      	str	r2, [r3, #80]	; 0x50
 8001f46:	e00b      	b.n	8001f60 <HAL_RCC_OscConfig+0x534>
 8001f48:	4b5a      	ldr	r3, [pc, #360]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001f4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f4c:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001f4e:	495b      	ldr	r1, [pc, #364]	; (80020bc <HAL_RCC_OscConfig+0x690>)
 8001f50:	400a      	ands	r2, r1
 8001f52:	651a      	str	r2, [r3, #80]	; 0x50
 8001f54:	4b57      	ldr	r3, [pc, #348]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001f56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f58:	4b56      	ldr	r3, [pc, #344]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001f5a:	495a      	ldr	r1, [pc, #360]	; (80020c4 <HAL_RCC_OscConfig+0x698>)
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d015      	beq.n	8001f94 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7fe fe36 	bl	8000bd8 <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f70:	e009      	b.n	8001f86 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f72:	f7fe fe31 	bl	8000bd8 <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	4a52      	ldr	r2, [pc, #328]	; (80020c8 <HAL_RCC_OscConfig+0x69c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e11b      	b.n	80021be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f86:	4b4b      	ldr	r3, [pc, #300]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001f88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d0ef      	beq.n	8001f72 <HAL_RCC_OscConfig+0x546>
 8001f92:	e014      	b.n	8001fbe <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f94:	f7fe fe20 	bl	8000bd8 <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f9c:	e009      	b.n	8001fb2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7fe fe1b 	bl	8000bd8 <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	4a47      	ldr	r2, [pc, #284]	; (80020c8 <HAL_RCC_OscConfig+0x69c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e105      	b.n	80021be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fb2:	4b40      	ldr	r3, [pc, #256]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d1ef      	bne.n	8001f9e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fbe:	2323      	movs	r3, #35	; 0x23
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fcc:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001fce:	493f      	ldr	r1, [pc, #252]	; (80020cc <HAL_RCC_OscConfig+0x6a0>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d049      	beq.n	8002072 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d026      	beq.n	8002034 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001fe6:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001fec:	2101      	movs	r1, #1
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ff6:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ffe:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <HAL_RCC_OscConfig+0x6a4>)
 8002000:	6a1a      	ldr	r2, [r3, #32]
 8002002:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <HAL_RCC_OscConfig+0x6a4>)
 8002004:	2180      	movs	r1, #128	; 0x80
 8002006:	0189      	lsls	r1, r1, #6
 8002008:	430a      	orrs	r2, r1
 800200a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe fde4 	bl	8000bd8 <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002016:	f7fe fddf 	bl	8000bd8 <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e0ca      	b.n	80021be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002028:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2202      	movs	r2, #2
 800202e:	4013      	ands	r3, r2
 8002030:	d0f1      	beq.n	8002016 <HAL_RCC_OscConfig+0x5ea>
 8002032:	e01e      	b.n	8002072 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002034:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 800203a:	2101      	movs	r1, #1
 800203c:	438a      	bics	r2, r1
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <HAL_RCC_OscConfig+0x6a4>)
 8002042:	6a1a      	ldr	r2, [r3, #32]
 8002044:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <HAL_RCC_OscConfig+0x6a4>)
 8002046:	4923      	ldr	r1, [pc, #140]	; (80020d4 <HAL_RCC_OscConfig+0x6a8>)
 8002048:	400a      	ands	r2, r1
 800204a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7fe fdc4 	bl	8000bd8 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002056:	f7fe fdbf 	bl	8000bd8 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e0aa      	b.n	80021be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2202      	movs	r2, #2
 800206e:	4013      	ands	r3, r2
 8002070:	d1f1      	bne.n	8002056 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	2b00      	cmp	r3, #0
 8002078:	d100      	bne.n	800207c <HAL_RCC_OscConfig+0x650>
 800207a:	e09f      	b.n	80021bc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	2b0c      	cmp	r3, #12
 8002080:	d100      	bne.n	8002084 <HAL_RCC_OscConfig+0x658>
 8002082:	e078      	b.n	8002176 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	2b02      	cmp	r3, #2
 800208a:	d159      	bne.n	8002140 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_RCC_OscConfig+0x688>)
 8002092:	4911      	ldr	r1, [pc, #68]	; (80020d8 <HAL_RCC_OscConfig+0x6ac>)
 8002094:	400a      	ands	r2, r1
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7fe fd9e 	bl	8000bd8 <HAL_GetTick>
 800209c:	0003      	movs	r3, r0
 800209e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020a0:	e01c      	b.n	80020dc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a2:	f7fe fd99 	bl	8000bd8 <HAL_GetTick>
 80020a6:	0002      	movs	r2, r0
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d915      	bls.n	80020dc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e084      	b.n	80021be <HAL_RCC_OscConfig+0x792>
 80020b4:	40021000 	.word	0x40021000
 80020b8:	ffff1fff 	.word	0xffff1fff
 80020bc:	fffffeff 	.word	0xfffffeff
 80020c0:	40007000 	.word	0x40007000
 80020c4:	fffffbff 	.word	0xfffffbff
 80020c8:	00001388 	.word	0x00001388
 80020cc:	efffffff 	.word	0xefffffff
 80020d0:	40010000 	.word	0x40010000
 80020d4:	ffffdfff 	.word	0xffffdfff
 80020d8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020dc:	4b3a      	ldr	r3, [pc, #232]	; (80021c8 <HAL_RCC_OscConfig+0x79c>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	049b      	lsls	r3, r3, #18
 80020e4:	4013      	ands	r3, r2
 80020e6:	d1dc      	bne.n	80020a2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e8:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <HAL_RCC_OscConfig+0x79c>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4a37      	ldr	r2, [pc, #220]	; (80021cc <HAL_RCC_OscConfig+0x7a0>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002100:	431a      	orrs	r2, r3
 8002102:	4b31      	ldr	r3, [pc, #196]	; (80021c8 <HAL_RCC_OscConfig+0x79c>)
 8002104:	430a      	orrs	r2, r1
 8002106:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002108:	4b2f      	ldr	r3, [pc, #188]	; (80021c8 <HAL_RCC_OscConfig+0x79c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <HAL_RCC_OscConfig+0x79c>)
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	0449      	lsls	r1, r1, #17
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7fe fd5f 	bl	8000bd8 <HAL_GetTick>
 800211a:	0003      	movs	r3, r0
 800211c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002120:	f7fe fd5a 	bl	8000bd8 <HAL_GetTick>
 8002124:	0002      	movs	r2, r0
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e045      	b.n	80021be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002132:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <HAL_RCC_OscConfig+0x79c>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	049b      	lsls	r3, r3, #18
 800213a:	4013      	ands	r3, r2
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x6f4>
 800213e:	e03d      	b.n	80021bc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002140:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <HAL_RCC_OscConfig+0x79c>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <HAL_RCC_OscConfig+0x79c>)
 8002146:	4922      	ldr	r1, [pc, #136]	; (80021d0 <HAL_RCC_OscConfig+0x7a4>)
 8002148:	400a      	ands	r2, r1
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7fe fd44 	bl	8000bd8 <HAL_GetTick>
 8002150:	0003      	movs	r3, r0
 8002152:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002156:	f7fe fd3f 	bl	8000bd8 <HAL_GetTick>
 800215a:	0002      	movs	r2, r0
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e02a      	b.n	80021be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002168:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <HAL_RCC_OscConfig+0x79c>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	049b      	lsls	r3, r3, #18
 8002170:	4013      	ands	r3, r2
 8002172:	d1f0      	bne.n	8002156 <HAL_RCC_OscConfig+0x72a>
 8002174:	e022      	b.n	80021bc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e01d      	b.n	80021be <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_RCC_OscConfig+0x79c>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	025b      	lsls	r3, r3, #9
 800218e:	401a      	ands	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	429a      	cmp	r2, r3
 8002196:	d10f      	bne.n	80021b8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	23f0      	movs	r3, #240	; 0xf0
 800219c:	039b      	lsls	r3, r3, #14
 800219e:	401a      	ands	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d107      	bne.n	80021b8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	23c0      	movs	r3, #192	; 0xc0
 80021ac:	041b      	lsls	r3, r3, #16
 80021ae:	401a      	ands	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b00a      	add	sp, #40	; 0x28
 80021c4:	bdb0      	pop	{r4, r5, r7, pc}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	40021000 	.word	0x40021000
 80021cc:	ff02ffff 	.word	0xff02ffff
 80021d0:	feffffff 	.word	0xfeffffff

080021d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d4:	b5b0      	push	{r4, r5, r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e128      	b.n	800243a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e8:	4b96      	ldr	r3, [pc, #600]	; (8002444 <HAL_RCC_ClockConfig+0x270>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2201      	movs	r2, #1
 80021ee:	4013      	ands	r3, r2
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d91e      	bls.n	8002234 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b93      	ldr	r3, [pc, #588]	; (8002444 <HAL_RCC_ClockConfig+0x270>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2201      	movs	r2, #1
 80021fc:	4393      	bics	r3, r2
 80021fe:	0019      	movs	r1, r3
 8002200:	4b90      	ldr	r3, [pc, #576]	; (8002444 <HAL_RCC_ClockConfig+0x270>)
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002208:	f7fe fce6 	bl	8000bd8 <HAL_GetTick>
 800220c:	0003      	movs	r3, r0
 800220e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002210:	e009      	b.n	8002226 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002212:	f7fe fce1 	bl	8000bd8 <HAL_GetTick>
 8002216:	0002      	movs	r2, r0
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	4a8a      	ldr	r2, [pc, #552]	; (8002448 <HAL_RCC_ClockConfig+0x274>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e109      	b.n	800243a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b87      	ldr	r3, [pc, #540]	; (8002444 <HAL_RCC_ClockConfig+0x270>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2201      	movs	r2, #1
 800222c:	4013      	ands	r3, r2
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d1ee      	bne.n	8002212 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2202      	movs	r2, #2
 800223a:	4013      	ands	r3, r2
 800223c:	d009      	beq.n	8002252 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223e:	4b83      	ldr	r3, [pc, #524]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	22f0      	movs	r2, #240	; 0xf0
 8002244:	4393      	bics	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	4b7f      	ldr	r3, [pc, #508]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 800224e:	430a      	orrs	r2, r1
 8002250:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2201      	movs	r2, #1
 8002258:	4013      	ands	r3, r2
 800225a:	d100      	bne.n	800225e <HAL_RCC_ClockConfig+0x8a>
 800225c:	e089      	b.n	8002372 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002266:	4b79      	ldr	r3, [pc, #484]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	029b      	lsls	r3, r3, #10
 800226e:	4013      	ands	r3, r2
 8002270:	d120      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0e1      	b.n	800243a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800227e:	4b73      	ldr	r3, [pc, #460]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	049b      	lsls	r3, r3, #18
 8002286:	4013      	ands	r3, r2
 8002288:	d114      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0d5      	b.n	800243a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d106      	bne.n	80022a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002296:	4b6d      	ldr	r3, [pc, #436]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2204      	movs	r2, #4
 800229c:	4013      	ands	r3, r2
 800229e:	d109      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0ca      	b.n	800243a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022a4:	4b69      	ldr	r3, [pc, #420]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4013      	ands	r3, r2
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0c2      	b.n	800243a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b4:	4b65      	ldr	r3, [pc, #404]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	2203      	movs	r2, #3
 80022ba:	4393      	bics	r3, r2
 80022bc:	0019      	movs	r1, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	4b62      	ldr	r3, [pc, #392]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 80022c4:	430a      	orrs	r2, r1
 80022c6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c8:	f7fe fc86 	bl	8000bd8 <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d111      	bne.n	80022fc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022d8:	e009      	b.n	80022ee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022da:	f7fe fc7d 	bl	8000bd8 <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	4a58      	ldr	r2, [pc, #352]	; (8002448 <HAL_RCC_ClockConfig+0x274>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e0a5      	b.n	800243a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ee:	4b57      	ldr	r3, [pc, #348]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	220c      	movs	r2, #12
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d1ef      	bne.n	80022da <HAL_RCC_ClockConfig+0x106>
 80022fa:	e03a      	b.n	8002372 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d111      	bne.n	8002328 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002304:	e009      	b.n	800231a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002306:	f7fe fc67 	bl	8000bd8 <HAL_GetTick>
 800230a:	0002      	movs	r2, r0
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	4a4d      	ldr	r2, [pc, #308]	; (8002448 <HAL_RCC_ClockConfig+0x274>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e08f      	b.n	800243a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800231a:	4b4c      	ldr	r3, [pc, #304]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	220c      	movs	r2, #12
 8002320:	4013      	ands	r3, r2
 8002322:	2b0c      	cmp	r3, #12
 8002324:	d1ef      	bne.n	8002306 <HAL_RCC_ClockConfig+0x132>
 8002326:	e024      	b.n	8002372 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d11b      	bne.n	8002368 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002330:	e009      	b.n	8002346 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002332:	f7fe fc51 	bl	8000bd8 <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	4a42      	ldr	r2, [pc, #264]	; (8002448 <HAL_RCC_ClockConfig+0x274>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e079      	b.n	800243a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002346:	4b41      	ldr	r3, [pc, #260]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	220c      	movs	r2, #12
 800234c:	4013      	ands	r3, r2
 800234e:	2b04      	cmp	r3, #4
 8002350:	d1ef      	bne.n	8002332 <HAL_RCC_ClockConfig+0x15e>
 8002352:	e00e      	b.n	8002372 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002354:	f7fe fc40 	bl	8000bd8 <HAL_GetTick>
 8002358:	0002      	movs	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	4a3a      	ldr	r2, [pc, #232]	; (8002448 <HAL_RCC_ClockConfig+0x274>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e068      	b.n	800243a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002368:	4b38      	ldr	r3, [pc, #224]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	220c      	movs	r2, #12
 800236e:	4013      	ands	r3, r2
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002372:	4b34      	ldr	r3, [pc, #208]	; (8002444 <HAL_RCC_ClockConfig+0x270>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2201      	movs	r2, #1
 8002378:	4013      	ands	r3, r2
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d21e      	bcs.n	80023be <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002380:	4b30      	ldr	r3, [pc, #192]	; (8002444 <HAL_RCC_ClockConfig+0x270>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2201      	movs	r2, #1
 8002386:	4393      	bics	r3, r2
 8002388:	0019      	movs	r1, r3
 800238a:	4b2e      	ldr	r3, [pc, #184]	; (8002444 <HAL_RCC_ClockConfig+0x270>)
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002392:	f7fe fc21 	bl	8000bd8 <HAL_GetTick>
 8002396:	0003      	movs	r3, r0
 8002398:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	e009      	b.n	80023b0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239c:	f7fe fc1c 	bl	8000bd8 <HAL_GetTick>
 80023a0:	0002      	movs	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	4a28      	ldr	r2, [pc, #160]	; (8002448 <HAL_RCC_ClockConfig+0x274>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e044      	b.n	800243a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b0:	4b24      	ldr	r3, [pc, #144]	; (8002444 <HAL_RCC_ClockConfig+0x270>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2201      	movs	r2, #1
 80023b6:	4013      	ands	r3, r2
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d1ee      	bne.n	800239c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2204      	movs	r2, #4
 80023c4:	4013      	ands	r3, r2
 80023c6:	d009      	beq.n	80023dc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c8:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4a20      	ldr	r2, [pc, #128]	; (8002450 <HAL_RCC_ClockConfig+0x27c>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 80023d8:	430a      	orrs	r2, r1
 80023da:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2208      	movs	r2, #8
 80023e2:	4013      	ands	r3, r2
 80023e4:	d00a      	beq.n	80023fc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	4a1a      	ldr	r2, [pc, #104]	; (8002454 <HAL_RCC_ClockConfig+0x280>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	00da      	lsls	r2, r3, #3
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 80023f8:	430a      	orrs	r2, r1
 80023fa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023fc:	f000 f832 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8002400:	0001      	movs	r1, r0
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_RCC_ClockConfig+0x278>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	220f      	movs	r2, #15
 800240a:	4013      	ands	r3, r2
 800240c:	4a12      	ldr	r2, [pc, #72]	; (8002458 <HAL_RCC_ClockConfig+0x284>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	000a      	movs	r2, r1
 8002412:	40da      	lsrs	r2, r3
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_RCC_ClockConfig+0x288>)
 8002416:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <HAL_RCC_ClockConfig+0x28c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	250b      	movs	r5, #11
 800241e:	197c      	adds	r4, r7, r5
 8002420:	0018      	movs	r0, r3
 8002422:	f7fe fb93 	bl	8000b4c <HAL_InitTick>
 8002426:	0003      	movs	r3, r0
 8002428:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800242a:	197b      	adds	r3, r7, r5
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002432:	197b      	adds	r3, r7, r5
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	e000      	b.n	800243a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	0018      	movs	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	b004      	add	sp, #16
 8002440:	bdb0      	pop	{r4, r5, r7, pc}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	40022000 	.word	0x40022000
 8002448:	00001388 	.word	0x00001388
 800244c:	40021000 	.word	0x40021000
 8002450:	fffff8ff 	.word	0xfffff8ff
 8002454:	ffffc7ff 	.word	0xffffc7ff
 8002458:	08002e34 	.word	0x08002e34
 800245c:	20000000 	.word	0x20000000
 8002460:	20000004 	.word	0x20000004

08002464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	b5b0      	push	{r4, r5, r7, lr}
 8002466:	b08e      	sub	sp, #56	; 0x38
 8002468:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800246a:	4b4c      	ldr	r3, [pc, #304]	; (800259c <HAL_RCC_GetSysClockFreq+0x138>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002472:	230c      	movs	r3, #12
 8002474:	4013      	ands	r3, r2
 8002476:	2b0c      	cmp	r3, #12
 8002478:	d014      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0x40>
 800247a:	d900      	bls.n	800247e <HAL_RCC_GetSysClockFreq+0x1a>
 800247c:	e07b      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0x112>
 800247e:	2b04      	cmp	r3, #4
 8002480:	d002      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x24>
 8002482:	2b08      	cmp	r3, #8
 8002484:	d00b      	beq.n	800249e <HAL_RCC_GetSysClockFreq+0x3a>
 8002486:	e076      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002488:	4b44      	ldr	r3, [pc, #272]	; (800259c <HAL_RCC_GetSysClockFreq+0x138>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2210      	movs	r2, #16
 800248e:	4013      	ands	r3, r2
 8002490:	d002      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002492:	4b43      	ldr	r3, [pc, #268]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002496:	e07c      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002498:	4b42      	ldr	r3, [pc, #264]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800249c:	e079      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800249e:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80024a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024a2:	e076      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	0c9a      	lsrs	r2, r3, #18
 80024a8:	230f      	movs	r3, #15
 80024aa:	401a      	ands	r2, r3
 80024ac:	4b3f      	ldr	r3, [pc, #252]	; (80025ac <HAL_RCC_GetSysClockFreq+0x148>)
 80024ae:	5c9b      	ldrb	r3, [r3, r2]
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	0d9a      	lsrs	r2, r3, #22
 80024b6:	2303      	movs	r3, #3
 80024b8:	4013      	ands	r3, r2
 80024ba:	3301      	adds	r3, #1
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024be:	4b37      	ldr	r3, [pc, #220]	; (800259c <HAL_RCC_GetSysClockFreq+0x138>)
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	025b      	lsls	r3, r3, #9
 80024c6:	4013      	ands	r3, r2
 80024c8:	d01a      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	4a35      	ldr	r2, [pc, #212]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80024d4:	2300      	movs	r3, #0
 80024d6:	69b8      	ldr	r0, [r7, #24]
 80024d8:	69f9      	ldr	r1, [r7, #28]
 80024da:	f7fd fec1 	bl	8000260 <__aeabi_lmul>
 80024de:	0002      	movs	r2, r0
 80024e0:	000b      	movs	r3, r1
 80024e2:	0010      	movs	r0, r2
 80024e4:	0019      	movs	r1, r3
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f7fd fe95 	bl	8000220 <__aeabi_uldivmod>
 80024f6:	0002      	movs	r2, r0
 80024f8:	000b      	movs	r3, r1
 80024fa:	0013      	movs	r3, r2
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
 80024fe:	e037      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002500:	4b26      	ldr	r3, [pc, #152]	; (800259c <HAL_RCC_GetSysClockFreq+0x138>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2210      	movs	r2, #16
 8002506:	4013      	ands	r3, r2
 8002508:	d01a      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	4a23      	ldr	r2, [pc, #140]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002514:	2300      	movs	r3, #0
 8002516:	68b8      	ldr	r0, [r7, #8]
 8002518:	68f9      	ldr	r1, [r7, #12]
 800251a:	f7fd fea1 	bl	8000260 <__aeabi_lmul>
 800251e:	0002      	movs	r2, r0
 8002520:	000b      	movs	r3, r1
 8002522:	0010      	movs	r0, r2
 8002524:	0019      	movs	r1, r3
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f7fd fe75 	bl	8000220 <__aeabi_uldivmod>
 8002536:	0002      	movs	r2, r0
 8002538:	000b      	movs	r3, r1
 800253a:	0013      	movs	r3, r2
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
 800253e:	e017      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002542:	0018      	movs	r0, r3
 8002544:	2300      	movs	r3, #0
 8002546:	0019      	movs	r1, r3
 8002548:	4a16      	ldr	r2, [pc, #88]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800254a:	2300      	movs	r3, #0
 800254c:	f7fd fe88 	bl	8000260 <__aeabi_lmul>
 8002550:	0002      	movs	r2, r0
 8002552:	000b      	movs	r3, r1
 8002554:	0010      	movs	r0, r2
 8002556:	0019      	movs	r1, r3
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	001c      	movs	r4, r3
 800255c:	2300      	movs	r3, #0
 800255e:	001d      	movs	r5, r3
 8002560:	0022      	movs	r2, r4
 8002562:	002b      	movs	r3, r5
 8002564:	f7fd fe5c 	bl	8000220 <__aeabi_uldivmod>
 8002568:	0002      	movs	r2, r0
 800256a:	000b      	movs	r3, r1
 800256c:	0013      	movs	r3, r2
 800256e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002572:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002574:	e00d      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_RCC_GetSysClockFreq+0x138>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	0b5b      	lsrs	r3, r3, #13
 800257c:	2207      	movs	r2, #7
 800257e:	4013      	ands	r3, r2
 8002580:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	3301      	adds	r3, #1
 8002586:	2280      	movs	r2, #128	; 0x80
 8002588:	0212      	lsls	r2, r2, #8
 800258a:	409a      	lsls	r2, r3
 800258c:	0013      	movs	r3, r2
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002590:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	b00e      	add	sp, #56	; 0x38
 800259a:	bdb0      	pop	{r4, r5, r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	003d0900 	.word	0x003d0900
 80025a4:	00f42400 	.word	0x00f42400
 80025a8:	007a1200 	.word	0x007a1200
 80025ac:	08002e44 	.word	0x08002e44

080025b0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80025b8:	2017      	movs	r0, #23
 80025ba:	183b      	adds	r3, r7, r0
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2220      	movs	r2, #32
 80025c6:	4013      	ands	r3, r2
 80025c8:	d100      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80025ca:	e0c2      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025cc:	4b98      	ldr	r3, [pc, #608]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	055b      	lsls	r3, r3, #21
 80025d4:	4013      	ands	r3, r2
 80025d6:	d109      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b95      	ldr	r3, [pc, #596]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025dc:	4b94      	ldr	r3, [pc, #592]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025de:	2180      	movs	r1, #128	; 0x80
 80025e0:	0549      	lsls	r1, r1, #21
 80025e2:	430a      	orrs	r2, r1
 80025e4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80025e6:	183b      	adds	r3, r7, r0
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	4b91      	ldr	r3, [pc, #580]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4013      	ands	r3, r2
 80025f6:	d11a      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f8:	4b8e      	ldr	r3, [pc, #568]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b8d      	ldr	r3, [pc, #564]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80025fe:	2180      	movs	r1, #128	; 0x80
 8002600:	0049      	lsls	r1, r1, #1
 8002602:	430a      	orrs	r2, r1
 8002604:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002606:	f7fe fae7 	bl	8000bd8 <HAL_GetTick>
 800260a:	0003      	movs	r3, r0
 800260c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	e008      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002610:	f7fe fae2 	bl	8000bd8 <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	; 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e102      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002622:	4b84      	ldr	r3, [pc, #528]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4013      	ands	r3, r2
 800262c:	d0f0      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800262e:	4b80      	ldr	r3, [pc, #512]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	23c0      	movs	r3, #192	; 0xc0
 8002634:	039b      	lsls	r3, r3, #14
 8002636:	4013      	ands	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	23c0      	movs	r3, #192	; 0xc0
 8002640:	039b      	lsls	r3, r3, #14
 8002642:	4013      	ands	r3, r2
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	429a      	cmp	r2, r3
 8002648:	d013      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	23c0      	movs	r3, #192	; 0xc0
 8002650:	029b      	lsls	r3, r3, #10
 8002652:	401a      	ands	r2, r3
 8002654:	23c0      	movs	r3, #192	; 0xc0
 8002656:	029b      	lsls	r3, r3, #10
 8002658:	429a      	cmp	r2, r3
 800265a:	d10a      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800265c:	4b74      	ldr	r3, [pc, #464]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	029b      	lsls	r3, r3, #10
 8002664:	401a      	ands	r2, r3
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	029b      	lsls	r3, r3, #10
 800266a:	429a      	cmp	r2, r3
 800266c:	d101      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e0da      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002672:	4b6f      	ldr	r3, [pc, #444]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002674:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002676:	23c0      	movs	r3, #192	; 0xc0
 8002678:	029b      	lsls	r3, r3, #10
 800267a:	4013      	ands	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d03b      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	23c0      	movs	r3, #192	; 0xc0
 800268a:	029b      	lsls	r3, r3, #10
 800268c:	4013      	ands	r3, r2
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	429a      	cmp	r2, r3
 8002692:	d033      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2220      	movs	r2, #32
 800269a:	4013      	ands	r3, r2
 800269c:	d02e      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800269e:	4b64      	ldr	r3, [pc, #400]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a2:	4a65      	ldr	r2, [pc, #404]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026a8:	4b61      	ldr	r3, [pc, #388]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026ac:	4b60      	ldr	r3, [pc, #384]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026ae:	2180      	movs	r1, #128	; 0x80
 80026b0:	0309      	lsls	r1, r1, #12
 80026b2:	430a      	orrs	r2, r1
 80026b4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026b6:	4b5e      	ldr	r3, [pc, #376]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026ba:	4b5d      	ldr	r3, [pc, #372]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026bc:	495f      	ldr	r1, [pc, #380]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80026be:	400a      	ands	r2, r1
 80026c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80026c2:	4b5b      	ldr	r3, [pc, #364]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4013      	ands	r3, r2
 80026d0:	d014      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7fe fa81 	bl	8000bd8 <HAL_GetTick>
 80026d6:	0003      	movs	r3, r0
 80026d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026da:	e009      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe fa7c 	bl	8000bd8 <HAL_GetTick>
 80026e0:	0002      	movs	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	4a56      	ldr	r2, [pc, #344]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e09b      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026f0:	4b4f      	ldr	r3, [pc, #316]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4013      	ands	r3, r2
 80026fa:	d0ef      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	23c0      	movs	r3, #192	; 0xc0
 8002702:	029b      	lsls	r3, r3, #10
 8002704:	401a      	ands	r2, r3
 8002706:	23c0      	movs	r3, #192	; 0xc0
 8002708:	029b      	lsls	r3, r3, #10
 800270a:	429a      	cmp	r2, r3
 800270c:	d10c      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800270e:	4b48      	ldr	r3, [pc, #288]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a4c      	ldr	r2, [pc, #304]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002714:	4013      	ands	r3, r2
 8002716:	0019      	movs	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	23c0      	movs	r3, #192	; 0xc0
 800271e:	039b      	lsls	r3, r3, #14
 8002720:	401a      	ands	r2, r3
 8002722:	4b43      	ldr	r3, [pc, #268]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002724:	430a      	orrs	r2, r1
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	4b41      	ldr	r3, [pc, #260]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800272a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	23c0      	movs	r3, #192	; 0xc0
 8002732:	029b      	lsls	r3, r3, #10
 8002734:	401a      	ands	r2, r3
 8002736:	4b3e      	ldr	r3, [pc, #248]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002738:	430a      	orrs	r2, r1
 800273a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800273c:	2317      	movs	r3, #23
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d105      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002746:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800274a:	4b39      	ldr	r3, [pc, #228]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800274c:	493e      	ldr	r1, [pc, #248]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800274e:	400a      	ands	r2, r1
 8002750:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2201      	movs	r2, #1
 8002758:	4013      	ands	r3, r2
 800275a:	d009      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800275c:	4b34      	ldr	r3, [pc, #208]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800275e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002760:	2203      	movs	r2, #3
 8002762:	4393      	bics	r3, r2
 8002764:	0019      	movs	r1, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	4b31      	ldr	r3, [pc, #196]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800276c:	430a      	orrs	r2, r1
 800276e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2202      	movs	r2, #2
 8002776:	4013      	ands	r3, r2
 8002778:	d009      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800277a:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277e:	220c      	movs	r2, #12
 8002780:	4393      	bics	r3, r2
 8002782:	0019      	movs	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	4b29      	ldr	r3, [pc, #164]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800278a:	430a      	orrs	r2, r1
 800278c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2204      	movs	r2, #4
 8002794:	4013      	ands	r3, r2
 8002796:	d009      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002798:	4b25      	ldr	r3, [pc, #148]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800279a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279c:	4a2b      	ldr	r2, [pc, #172]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800279e:	4013      	ands	r3, r2
 80027a0:	0019      	movs	r1, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	4b22      	ldr	r3, [pc, #136]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027a8:	430a      	orrs	r2, r1
 80027aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2208      	movs	r2, #8
 80027b2:	4013      	ands	r3, r2
 80027b4:	d009      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027b6:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ba:	4a25      	ldr	r2, [pc, #148]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80027bc:	4013      	ands	r3, r2
 80027be:	0019      	movs	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027c6:	430a      	orrs	r2, r1
 80027c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4013      	ands	r3, r2
 80027d4:	d009      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027d6:	4b16      	ldr	r3, [pc, #88]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	4a17      	ldr	r2, [pc, #92]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80027dc:	4013      	ands	r3, r2
 80027de:	0019      	movs	r1, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699a      	ldr	r2, [r3, #24]
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027e6:	430a      	orrs	r2, r1
 80027e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2240      	movs	r2, #64	; 0x40
 80027f0:	4013      	ands	r3, r2
 80027f2:	d009      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f8:	4a16      	ldr	r2, [pc, #88]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	0019      	movs	r1, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1a      	ldr	r2, [r3, #32]
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002804:	430a      	orrs	r2, r1
 8002806:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2280      	movs	r2, #128	; 0x80
 800280e:	4013      	ands	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002816:	4a10      	ldr	r2, [pc, #64]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002818:	4013      	ands	r3, r2
 800281a:	0019      	movs	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69da      	ldr	r2, [r3, #28]
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002822:	430a      	orrs	r2, r1
 8002824:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	b006      	add	sp, #24
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	40007000 	.word	0x40007000
 8002838:	fffcffff 	.word	0xfffcffff
 800283c:	fff7ffff 	.word	0xfff7ffff
 8002840:	00001388 	.word	0x00001388
 8002844:	ffcfffff 	.word	0xffcfffff
 8002848:	efffffff 	.word	0xefffffff
 800284c:	fffff3ff 	.word	0xfffff3ff
 8002850:	ffffcfff 	.word	0xffffcfff
 8002854:	fbffffff 	.word	0xfbffffff
 8002858:	fff3ffff 	.word	0xfff3ffff

0800285c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e032      	b.n	80028d4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2239      	movs	r2, #57	; 0x39
 8002872:	5c9b      	ldrb	r3, [r3, r2]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d107      	bne.n	800288a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2238      	movs	r2, #56	; 0x38
 800287e:	2100      	movs	r1, #0
 8002880:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0018      	movs	r0, r3
 8002886:	f7fe f8e5 	bl	8000a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2239      	movs	r2, #57	; 0x39
 800288e:	2102      	movs	r1, #2
 8002890:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3304      	adds	r3, #4
 800289a:	0019      	movs	r1, r3
 800289c:	0010      	movs	r0, r2
 800289e:	f000 f93b 	bl	8002b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	223e      	movs	r2, #62	; 0x3e
 80028a6:	2101      	movs	r1, #1
 80028a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	223a      	movs	r2, #58	; 0x3a
 80028ae:	2101      	movs	r1, #1
 80028b0:	5499      	strb	r1, [r3, r2]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	223b      	movs	r2, #59	; 0x3b
 80028b6:	2101      	movs	r1, #1
 80028b8:	5499      	strb	r1, [r3, r2]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	223c      	movs	r2, #60	; 0x3c
 80028be:	2101      	movs	r1, #1
 80028c0:	5499      	strb	r1, [r3, r2]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	223d      	movs	r2, #61	; 0x3d
 80028c6:	2101      	movs	r1, #1
 80028c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2239      	movs	r2, #57	; 0x39
 80028ce:	2101      	movs	r1, #1
 80028d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2239      	movs	r2, #57	; 0x39
 80028e8:	5c9b      	ldrb	r3, [r3, r2]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d001      	beq.n	80028f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e033      	b.n	800295c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2239      	movs	r2, #57	; 0x39
 80028f8:	2102      	movs	r1, #2
 80028fa:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	05db      	lsls	r3, r3, #23
 8002904:	429a      	cmp	r2, r3
 8002906:	d00e      	beq.n	8002926 <HAL_TIM_Base_Start+0x4a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a15      	ldr	r2, [pc, #84]	; (8002964 <HAL_TIM_Base_Start+0x88>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d009      	beq.n	8002926 <HAL_TIM_Base_Start+0x4a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a14      	ldr	r2, [pc, #80]	; (8002968 <HAL_TIM_Base_Start+0x8c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d004      	beq.n	8002926 <HAL_TIM_Base_Start+0x4a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a12      	ldr	r2, [pc, #72]	; (800296c <HAL_TIM_Base_Start+0x90>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d111      	bne.n	800294a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2207      	movs	r2, #7
 800292e:	4013      	ands	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b06      	cmp	r3, #6
 8002936:	d010      	beq.n	800295a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2101      	movs	r1, #1
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002948:	e007      	b.n	800295a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2101      	movs	r1, #1
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b004      	add	sp, #16
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40000400 	.word	0x40000400
 8002968:	40010800 	.word	0x40010800
 800296c:	40011400 	.word	0x40011400

08002970 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800297a:	230f      	movs	r3, #15
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2238      	movs	r2, #56	; 0x38
 8002986:	5c9b      	ldrb	r3, [r3, r2]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_TIM_ConfigClockSource+0x20>
 800298c:	2302      	movs	r3, #2
 800298e:	e0bc      	b.n	8002b0a <HAL_TIM_ConfigClockSource+0x19a>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2238      	movs	r2, #56	; 0x38
 8002994:	2101      	movs	r1, #1
 8002996:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2239      	movs	r2, #57	; 0x39
 800299c:	2102      	movs	r1, #2
 800299e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2277      	movs	r2, #119	; 0x77
 80029ac:	4393      	bics	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4a58      	ldr	r2, [pc, #352]	; (8002b14 <HAL_TIM_ConfigClockSource+0x1a4>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2280      	movs	r2, #128	; 0x80
 80029c6:	0192      	lsls	r2, r2, #6
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d040      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0xde>
 80029cc:	2280      	movs	r2, #128	; 0x80
 80029ce:	0192      	lsls	r2, r2, #6
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d900      	bls.n	80029d6 <HAL_TIM_ConfigClockSource+0x66>
 80029d4:	e088      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x178>
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	0152      	lsls	r2, r2, #5
 80029da:	4293      	cmp	r3, r2
 80029dc:	d100      	bne.n	80029e0 <HAL_TIM_ConfigClockSource+0x70>
 80029de:	e088      	b.n	8002af2 <HAL_TIM_ConfigClockSource+0x182>
 80029e0:	2280      	movs	r2, #128	; 0x80
 80029e2:	0152      	lsls	r2, r2, #5
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d900      	bls.n	80029ea <HAL_TIM_ConfigClockSource+0x7a>
 80029e8:	e07e      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x178>
 80029ea:	2b70      	cmp	r3, #112	; 0x70
 80029ec:	d018      	beq.n	8002a20 <HAL_TIM_ConfigClockSource+0xb0>
 80029ee:	d900      	bls.n	80029f2 <HAL_TIM_ConfigClockSource+0x82>
 80029f0:	e07a      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x178>
 80029f2:	2b60      	cmp	r3, #96	; 0x60
 80029f4:	d04f      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x126>
 80029f6:	d900      	bls.n	80029fa <HAL_TIM_ConfigClockSource+0x8a>
 80029f8:	e076      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x178>
 80029fa:	2b50      	cmp	r3, #80	; 0x50
 80029fc:	d03b      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x106>
 80029fe:	d900      	bls.n	8002a02 <HAL_TIM_ConfigClockSource+0x92>
 8002a00:	e072      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x178>
 8002a02:	2b40      	cmp	r3, #64	; 0x40
 8002a04:	d057      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x146>
 8002a06:	d900      	bls.n	8002a0a <HAL_TIM_ConfigClockSource+0x9a>
 8002a08:	e06e      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x178>
 8002a0a:	2b30      	cmp	r3, #48	; 0x30
 8002a0c:	d063      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0x166>
 8002a0e:	d86b      	bhi.n	8002ae8 <HAL_TIM_ConfigClockSource+0x178>
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d060      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0x166>
 8002a14:	d868      	bhi.n	8002ae8 <HAL_TIM_ConfigClockSource+0x178>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d05d      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0x166>
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d05b      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0x166>
 8002a1e:	e063      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6899      	ldr	r1, [r3, #8]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f000 f94a 	bl	8002cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2277      	movs	r2, #119	; 0x77
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	609a      	str	r2, [r3, #8]
      break;
 8002a4c:	e052      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6899      	ldr	r1, [r3, #8]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f000 f933 	bl	8002cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	01c9      	lsls	r1, r1, #7
 8002a70:	430a      	orrs	r2, r1
 8002a72:	609a      	str	r2, [r3, #8]
      break;
 8002a74:	e03e      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6859      	ldr	r1, [r3, #4]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	001a      	movs	r2, r3
 8002a84:	f000 f8a6 	bl	8002bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2150      	movs	r1, #80	; 0x50
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f000 f900 	bl	8002c94 <TIM_ITRx_SetConfig>
      break;
 8002a94:	e02e      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6859      	ldr	r1, [r3, #4]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	001a      	movs	r2, r3
 8002aa4:	f000 f8c4 	bl	8002c30 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2160      	movs	r1, #96	; 0x60
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f000 f8f0 	bl	8002c94 <TIM_ITRx_SetConfig>
      break;
 8002ab4:	e01e      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6859      	ldr	r1, [r3, #4]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	001a      	movs	r2, r3
 8002ac4:	f000 f886 	bl	8002bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2140      	movs	r1, #64	; 0x40
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 f8e0 	bl	8002c94 <TIM_ITRx_SetConfig>
      break;
 8002ad4:	e00e      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	0019      	movs	r1, r3
 8002ae0:	0010      	movs	r0, r2
 8002ae2:	f000 f8d7 	bl	8002c94 <TIM_ITRx_SetConfig>
      break;
 8002ae6:	e005      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002ae8:	230f      	movs	r3, #15
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
      break;
 8002af0:	e000      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002af2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2239      	movs	r2, #57	; 0x39
 8002af8:	2101      	movs	r1, #1
 8002afa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2238      	movs	r2, #56	; 0x38
 8002b00:	2100      	movs	r1, #0
 8002b02:	5499      	strb	r1, [r3, r2]

  return status;
 8002b04:	230f      	movs	r3, #15
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	781b      	ldrb	r3, [r3, #0]
}
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b004      	add	sp, #16
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	ffff00ff 	.word	0xffff00ff

08002b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	05db      	lsls	r3, r3, #23
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d00b      	beq.n	8002b4a <TIM_Base_SetConfig+0x32>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a23      	ldr	r2, [pc, #140]	; (8002bc4 <TIM_Base_SetConfig+0xac>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d007      	beq.n	8002b4a <TIM_Base_SetConfig+0x32>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a22      	ldr	r2, [pc, #136]	; (8002bc8 <TIM_Base_SetConfig+0xb0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d003      	beq.n	8002b4a <TIM_Base_SetConfig+0x32>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <TIM_Base_SetConfig+0xb4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d108      	bne.n	8002b5c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2270      	movs	r2, #112	; 0x70
 8002b4e:	4393      	bics	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	05db      	lsls	r3, r3, #23
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d00b      	beq.n	8002b7e <TIM_Base_SetConfig+0x66>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a16      	ldr	r2, [pc, #88]	; (8002bc4 <TIM_Base_SetConfig+0xac>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d007      	beq.n	8002b7e <TIM_Base_SetConfig+0x66>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a15      	ldr	r2, [pc, #84]	; (8002bc8 <TIM_Base_SetConfig+0xb0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d003      	beq.n	8002b7e <TIM_Base_SetConfig+0x66>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <TIM_Base_SetConfig+0xb4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d108      	bne.n	8002b90 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <TIM_Base_SetConfig+0xb8>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2280      	movs	r2, #128	; 0x80
 8002b94:	4393      	bics	r3, r2
 8002b96:	001a      	movs	r2, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	615a      	str	r2, [r3, #20]
}
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b004      	add	sp, #16
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40000400 	.word	0x40000400
 8002bc8:	40010800 	.word	0x40010800
 8002bcc:	40011400 	.word	0x40011400
 8002bd0:	fffffcff 	.word	0xfffffcff

08002bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	2201      	movs	r2, #1
 8002bec:	4393      	bics	r3, r2
 8002bee:	001a      	movs	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	22f0      	movs	r2, #240	; 0xf0
 8002bfe:	4393      	bics	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	220a      	movs	r2, #10
 8002c10:	4393      	bics	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	621a      	str	r2, [r3, #32]
}
 8002c28:	46c0      	nop			; (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b006      	add	sp, #24
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	2210      	movs	r2, #16
 8002c42:	4393      	bics	r3, r2
 8002c44:	001a      	movs	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	4a0d      	ldr	r2, [pc, #52]	; (8002c90 <TIM_TI2_ConfigInputStage+0x60>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	031b      	lsls	r3, r3, #12
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	22a0      	movs	r2, #160	; 0xa0
 8002c6c:	4393      	bics	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	621a      	str	r2, [r3, #32]
}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b006      	add	sp, #24
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	ffff0fff 	.word	0xffff0fff

08002c94 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2270      	movs	r2, #112	; 0x70
 8002ca8:	4393      	bics	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	2207      	movs	r2, #7
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	609a      	str	r2, [r3, #8]
}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b004      	add	sp, #16
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <TIM_ETR_SetConfig+0x3c>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	021a      	lsls	r2, r3, #8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	609a      	str	r2, [r3, #8]
}
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b006      	add	sp, #24
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	ffff00ff 	.word	0xffff00ff

08002d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2238      	movs	r2, #56	; 0x38
 8002d16:	5c9b      	ldrb	r3, [r3, r2]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e047      	b.n	8002db0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2238      	movs	r2, #56	; 0x38
 8002d24:	2101      	movs	r1, #1
 8002d26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2239      	movs	r2, #57	; 0x39
 8002d2c:	2102      	movs	r1, #2
 8002d2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2270      	movs	r2, #112	; 0x70
 8002d44:	4393      	bics	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	05db      	lsls	r3, r3, #23
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d00e      	beq.n	8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a13      	ldr	r2, [pc, #76]	; (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d009      	beq.n	8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a11      	ldr	r2, [pc, #68]	; (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d004      	beq.n	8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a10      	ldr	r2, [pc, #64]	; (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10c      	bne.n	8002d9e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2280      	movs	r2, #128	; 0x80
 8002d88:	4393      	bics	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2239      	movs	r2, #57	; 0x39
 8002da2:	2101      	movs	r1, #1
 8002da4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2238      	movs	r2, #56	; 0x38
 8002daa:	2100      	movs	r1, #0
 8002dac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	0018      	movs	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b004      	add	sp, #16
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40000400 	.word	0x40000400
 8002dbc:	40010800 	.word	0x40010800
 8002dc0:	40011400 	.word	0x40011400

08002dc4 <__libc_init_array>:
 8002dc4:	b570      	push	{r4, r5, r6, lr}
 8002dc6:	2600      	movs	r6, #0
 8002dc8:	4d0c      	ldr	r5, [pc, #48]	; (8002dfc <__libc_init_array+0x38>)
 8002dca:	4c0d      	ldr	r4, [pc, #52]	; (8002e00 <__libc_init_array+0x3c>)
 8002dcc:	1b64      	subs	r4, r4, r5
 8002dce:	10a4      	asrs	r4, r4, #2
 8002dd0:	42a6      	cmp	r6, r4
 8002dd2:	d109      	bne.n	8002de8 <__libc_init_array+0x24>
 8002dd4:	2600      	movs	r6, #0
 8002dd6:	f000 f821 	bl	8002e1c <_init>
 8002dda:	4d0a      	ldr	r5, [pc, #40]	; (8002e04 <__libc_init_array+0x40>)
 8002ddc:	4c0a      	ldr	r4, [pc, #40]	; (8002e08 <__libc_init_array+0x44>)
 8002dde:	1b64      	subs	r4, r4, r5
 8002de0:	10a4      	asrs	r4, r4, #2
 8002de2:	42a6      	cmp	r6, r4
 8002de4:	d105      	bne.n	8002df2 <__libc_init_array+0x2e>
 8002de6:	bd70      	pop	{r4, r5, r6, pc}
 8002de8:	00b3      	lsls	r3, r6, #2
 8002dea:	58eb      	ldr	r3, [r5, r3]
 8002dec:	4798      	blx	r3
 8002dee:	3601      	adds	r6, #1
 8002df0:	e7ee      	b.n	8002dd0 <__libc_init_array+0xc>
 8002df2:	00b3      	lsls	r3, r6, #2
 8002df4:	58eb      	ldr	r3, [r5, r3]
 8002df6:	4798      	blx	r3
 8002df8:	3601      	adds	r6, #1
 8002dfa:	e7f2      	b.n	8002de2 <__libc_init_array+0x1e>
 8002dfc:	08002e58 	.word	0x08002e58
 8002e00:	08002e58 	.word	0x08002e58
 8002e04:	08002e58 	.word	0x08002e58
 8002e08:	08002e5c 	.word	0x08002e5c

08002e0c <memset>:
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	1882      	adds	r2, r0, r2
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d100      	bne.n	8002e16 <memset+0xa>
 8002e14:	4770      	bx	lr
 8002e16:	7019      	strb	r1, [r3, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	e7f9      	b.n	8002e10 <memset+0x4>

08002e1c <_init>:
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e22:	bc08      	pop	{r3}
 8002e24:	469e      	mov	lr, r3
 8002e26:	4770      	bx	lr

08002e28 <_fini>:
 8002e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2e:	bc08      	pop	{r3}
 8002e30:	469e      	mov	lr, r3
 8002e32:	4770      	bx	lr
