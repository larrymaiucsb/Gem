
PCBv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08007d18  08007d18  00017d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eb8  08007eb8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007eb8  08007eb8  00017eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ec0  08007ec0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ec0  08007ec0  00017ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ec4  08007ec4  00017ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000074  08007f3c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08007f3c  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edf9  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002425  00000000  00000000  0002ee95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  000312c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  00032018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015852  00000000  00000000  00032c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105ee  00000000  00000000  0004849a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083fde  00000000  00000000  00058a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dca66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034c0  00000000  00000000  000dcabc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007d00 	.word	0x08007d00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08007d00 	.word	0x08007d00

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fca9 	bl	8001b88 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 fbf3 	bl	8001a2c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fc9b 	bl	8001b88 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fc91 	bl	8001b88 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fc15 	bl	8001aa4 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fc0b 	bl	8001aa4 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_uldivmod>:
 800029c:	2b00      	cmp	r3, #0
 800029e:	d111      	bne.n	80002c4 <__aeabi_uldivmod+0x28>
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	d10f      	bne.n	80002c4 <__aeabi_uldivmod+0x28>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	d100      	bne.n	80002aa <__aeabi_uldivmod+0xe>
 80002a8:	2800      	cmp	r0, #0
 80002aa:	d002      	beq.n	80002b2 <__aeabi_uldivmod+0x16>
 80002ac:	2100      	movs	r1, #0
 80002ae:	43c9      	mvns	r1, r1
 80002b0:	1c08      	adds	r0, r1, #0
 80002b2:	b407      	push	{r0, r1, r2}
 80002b4:	4802      	ldr	r0, [pc, #8]	; (80002c0 <__aeabi_uldivmod+0x24>)
 80002b6:	a102      	add	r1, pc, #8	; (adr r1, 80002c0 <__aeabi_uldivmod+0x24>)
 80002b8:	1840      	adds	r0, r0, r1
 80002ba:	9002      	str	r0, [sp, #8]
 80002bc:	bd03      	pop	{r0, r1, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	ffffff5d 	.word	0xffffff5d
 80002c4:	b403      	push	{r0, r1}
 80002c6:	4668      	mov	r0, sp
 80002c8:	b501      	push	{r0, lr}
 80002ca:	9802      	ldr	r0, [sp, #8]
 80002cc:	f000 f84c 	bl	8000368 <__udivmoddi4>
 80002d0:	9b01      	ldr	r3, [sp, #4]
 80002d2:	469e      	mov	lr, r3
 80002d4:	b002      	add	sp, #8
 80002d6:	bc0c      	pop	{r2, r3}
 80002d8:	4770      	bx	lr
 80002da:	46c0      	nop			; (mov r8, r8)

080002dc <__aeabi_lmul>:
 80002dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002de:	0415      	lsls	r5, r2, #16
 80002e0:	0c2d      	lsrs	r5, r5, #16
 80002e2:	000f      	movs	r7, r1
 80002e4:	0001      	movs	r1, r0
 80002e6:	002e      	movs	r6, r5
 80002e8:	46c6      	mov	lr, r8
 80002ea:	4684      	mov	ip, r0
 80002ec:	0400      	lsls	r0, r0, #16
 80002ee:	0c14      	lsrs	r4, r2, #16
 80002f0:	0c00      	lsrs	r0, r0, #16
 80002f2:	0c09      	lsrs	r1, r1, #16
 80002f4:	4346      	muls	r6, r0
 80002f6:	434d      	muls	r5, r1
 80002f8:	4360      	muls	r0, r4
 80002fa:	4361      	muls	r1, r4
 80002fc:	1940      	adds	r0, r0, r5
 80002fe:	0c34      	lsrs	r4, r6, #16
 8000300:	1824      	adds	r4, r4, r0
 8000302:	b500      	push	{lr}
 8000304:	42a5      	cmp	r5, r4
 8000306:	d903      	bls.n	8000310 <__aeabi_lmul+0x34>
 8000308:	2080      	movs	r0, #128	; 0x80
 800030a:	0240      	lsls	r0, r0, #9
 800030c:	4680      	mov	r8, r0
 800030e:	4441      	add	r1, r8
 8000310:	0c25      	lsrs	r5, r4, #16
 8000312:	186d      	adds	r5, r5, r1
 8000314:	4661      	mov	r1, ip
 8000316:	4359      	muls	r1, r3
 8000318:	437a      	muls	r2, r7
 800031a:	0430      	lsls	r0, r6, #16
 800031c:	1949      	adds	r1, r1, r5
 800031e:	0424      	lsls	r4, r4, #16
 8000320:	0c00      	lsrs	r0, r0, #16
 8000322:	1820      	adds	r0, r4, r0
 8000324:	1889      	adds	r1, r1, r2
 8000326:	bc80      	pop	{r7}
 8000328:	46b8      	mov	r8, r7
 800032a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800032c <__aeabi_d2uiz>:
 800032c:	b570      	push	{r4, r5, r6, lr}
 800032e:	2200      	movs	r2, #0
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <__aeabi_d2uiz+0x38>)
 8000332:	0004      	movs	r4, r0
 8000334:	000d      	movs	r5, r1
 8000336:	f7ff ffa7 	bl	8000288 <__aeabi_dcmpge>
 800033a:	2800      	cmp	r0, #0
 800033c:	d104      	bne.n	8000348 <__aeabi_d2uiz+0x1c>
 800033e:	0020      	movs	r0, r4
 8000340:	0029      	movs	r1, r5
 8000342:	f002 faad 	bl	80028a0 <__aeabi_d2iz>
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <__aeabi_d2uiz+0x38>)
 800034a:	2200      	movs	r2, #0
 800034c:	0020      	movs	r0, r4
 800034e:	0029      	movs	r1, r5
 8000350:	f001 fef6 	bl	8002140 <__aeabi_dsub>
 8000354:	f002 faa4 	bl	80028a0 <__aeabi_d2iz>
 8000358:	2380      	movs	r3, #128	; 0x80
 800035a:	061b      	lsls	r3, r3, #24
 800035c:	469c      	mov	ip, r3
 800035e:	4460      	add	r0, ip
 8000360:	e7f1      	b.n	8000346 <__aeabi_d2uiz+0x1a>
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	41e00000 	.word	0x41e00000

08000368 <__udivmoddi4>:
 8000368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036a:	4657      	mov	r7, sl
 800036c:	464e      	mov	r6, r9
 800036e:	4645      	mov	r5, r8
 8000370:	46de      	mov	lr, fp
 8000372:	b5e0      	push	{r5, r6, r7, lr}
 8000374:	0004      	movs	r4, r0
 8000376:	000d      	movs	r5, r1
 8000378:	4692      	mov	sl, r2
 800037a:	4699      	mov	r9, r3
 800037c:	b083      	sub	sp, #12
 800037e:	428b      	cmp	r3, r1
 8000380:	d830      	bhi.n	80003e4 <__udivmoddi4+0x7c>
 8000382:	d02d      	beq.n	80003e0 <__udivmoddi4+0x78>
 8000384:	4649      	mov	r1, r9
 8000386:	4650      	mov	r0, sl
 8000388:	f002 fc04 	bl	8002b94 <__clzdi2>
 800038c:	0029      	movs	r1, r5
 800038e:	0006      	movs	r6, r0
 8000390:	0020      	movs	r0, r4
 8000392:	f002 fbff 	bl	8002b94 <__clzdi2>
 8000396:	1a33      	subs	r3, r6, r0
 8000398:	4698      	mov	r8, r3
 800039a:	3b20      	subs	r3, #32
 800039c:	469b      	mov	fp, r3
 800039e:	d433      	bmi.n	8000408 <__udivmoddi4+0xa0>
 80003a0:	465a      	mov	r2, fp
 80003a2:	4653      	mov	r3, sl
 80003a4:	4093      	lsls	r3, r2
 80003a6:	4642      	mov	r2, r8
 80003a8:	001f      	movs	r7, r3
 80003aa:	4653      	mov	r3, sl
 80003ac:	4093      	lsls	r3, r2
 80003ae:	001e      	movs	r6, r3
 80003b0:	42af      	cmp	r7, r5
 80003b2:	d83a      	bhi.n	800042a <__udivmoddi4+0xc2>
 80003b4:	42af      	cmp	r7, r5
 80003b6:	d100      	bne.n	80003ba <__udivmoddi4+0x52>
 80003b8:	e078      	b.n	80004ac <__udivmoddi4+0x144>
 80003ba:	465b      	mov	r3, fp
 80003bc:	1ba4      	subs	r4, r4, r6
 80003be:	41bd      	sbcs	r5, r7
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	da00      	bge.n	80003c6 <__udivmoddi4+0x5e>
 80003c4:	e075      	b.n	80004b2 <__udivmoddi4+0x14a>
 80003c6:	2200      	movs	r2, #0
 80003c8:	2300      	movs	r3, #0
 80003ca:	9200      	str	r2, [sp, #0]
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	2301      	movs	r3, #1
 80003d0:	465a      	mov	r2, fp
 80003d2:	4093      	lsls	r3, r2
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	2301      	movs	r3, #1
 80003d8:	4642      	mov	r2, r8
 80003da:	4093      	lsls	r3, r2
 80003dc:	9300      	str	r3, [sp, #0]
 80003de:	e028      	b.n	8000432 <__udivmoddi4+0xca>
 80003e0:	4282      	cmp	r2, r0
 80003e2:	d9cf      	bls.n	8000384 <__udivmoddi4+0x1c>
 80003e4:	2200      	movs	r2, #0
 80003e6:	2300      	movs	r3, #0
 80003e8:	9200      	str	r2, [sp, #0]
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <__udivmoddi4+0x8e>
 80003f2:	601c      	str	r4, [r3, #0]
 80003f4:	605d      	str	r5, [r3, #4]
 80003f6:	9800      	ldr	r0, [sp, #0]
 80003f8:	9901      	ldr	r1, [sp, #4]
 80003fa:	b003      	add	sp, #12
 80003fc:	bcf0      	pop	{r4, r5, r6, r7}
 80003fe:	46bb      	mov	fp, r7
 8000400:	46b2      	mov	sl, r6
 8000402:	46a9      	mov	r9, r5
 8000404:	46a0      	mov	r8, r4
 8000406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	4652      	mov	r2, sl
 8000410:	40da      	lsrs	r2, r3
 8000412:	4641      	mov	r1, r8
 8000414:	0013      	movs	r3, r2
 8000416:	464a      	mov	r2, r9
 8000418:	408a      	lsls	r2, r1
 800041a:	0017      	movs	r7, r2
 800041c:	4642      	mov	r2, r8
 800041e:	431f      	orrs	r7, r3
 8000420:	4653      	mov	r3, sl
 8000422:	4093      	lsls	r3, r2
 8000424:	001e      	movs	r6, r3
 8000426:	42af      	cmp	r7, r5
 8000428:	d9c4      	bls.n	80003b4 <__udivmoddi4+0x4c>
 800042a:	2200      	movs	r2, #0
 800042c:	2300      	movs	r3, #0
 800042e:	9200      	str	r2, [sp, #0]
 8000430:	9301      	str	r3, [sp, #4]
 8000432:	4643      	mov	r3, r8
 8000434:	2b00      	cmp	r3, #0
 8000436:	d0d9      	beq.n	80003ec <__udivmoddi4+0x84>
 8000438:	07fb      	lsls	r3, r7, #31
 800043a:	0872      	lsrs	r2, r6, #1
 800043c:	431a      	orrs	r2, r3
 800043e:	4646      	mov	r6, r8
 8000440:	087b      	lsrs	r3, r7, #1
 8000442:	e00e      	b.n	8000462 <__udivmoddi4+0xfa>
 8000444:	42ab      	cmp	r3, r5
 8000446:	d101      	bne.n	800044c <__udivmoddi4+0xe4>
 8000448:	42a2      	cmp	r2, r4
 800044a:	d80c      	bhi.n	8000466 <__udivmoddi4+0xfe>
 800044c:	1aa4      	subs	r4, r4, r2
 800044e:	419d      	sbcs	r5, r3
 8000450:	2001      	movs	r0, #1
 8000452:	1924      	adds	r4, r4, r4
 8000454:	416d      	adcs	r5, r5
 8000456:	2100      	movs	r1, #0
 8000458:	3e01      	subs	r6, #1
 800045a:	1824      	adds	r4, r4, r0
 800045c:	414d      	adcs	r5, r1
 800045e:	2e00      	cmp	r6, #0
 8000460:	d006      	beq.n	8000470 <__udivmoddi4+0x108>
 8000462:	42ab      	cmp	r3, r5
 8000464:	d9ee      	bls.n	8000444 <__udivmoddi4+0xdc>
 8000466:	3e01      	subs	r6, #1
 8000468:	1924      	adds	r4, r4, r4
 800046a:	416d      	adcs	r5, r5
 800046c:	2e00      	cmp	r6, #0
 800046e:	d1f8      	bne.n	8000462 <__udivmoddi4+0xfa>
 8000470:	9800      	ldr	r0, [sp, #0]
 8000472:	9901      	ldr	r1, [sp, #4]
 8000474:	465b      	mov	r3, fp
 8000476:	1900      	adds	r0, r0, r4
 8000478:	4169      	adcs	r1, r5
 800047a:	2b00      	cmp	r3, #0
 800047c:	db24      	blt.n	80004c8 <__udivmoddi4+0x160>
 800047e:	002b      	movs	r3, r5
 8000480:	465a      	mov	r2, fp
 8000482:	4644      	mov	r4, r8
 8000484:	40d3      	lsrs	r3, r2
 8000486:	002a      	movs	r2, r5
 8000488:	40e2      	lsrs	r2, r4
 800048a:	001c      	movs	r4, r3
 800048c:	465b      	mov	r3, fp
 800048e:	0015      	movs	r5, r2
 8000490:	2b00      	cmp	r3, #0
 8000492:	db2a      	blt.n	80004ea <__udivmoddi4+0x182>
 8000494:	0026      	movs	r6, r4
 8000496:	409e      	lsls	r6, r3
 8000498:	0033      	movs	r3, r6
 800049a:	0026      	movs	r6, r4
 800049c:	4647      	mov	r7, r8
 800049e:	40be      	lsls	r6, r7
 80004a0:	0032      	movs	r2, r6
 80004a2:	1a80      	subs	r0, r0, r2
 80004a4:	4199      	sbcs	r1, r3
 80004a6:	9000      	str	r0, [sp, #0]
 80004a8:	9101      	str	r1, [sp, #4]
 80004aa:	e79f      	b.n	80003ec <__udivmoddi4+0x84>
 80004ac:	42a3      	cmp	r3, r4
 80004ae:	d8bc      	bhi.n	800042a <__udivmoddi4+0xc2>
 80004b0:	e783      	b.n	80003ba <__udivmoddi4+0x52>
 80004b2:	4642      	mov	r2, r8
 80004b4:	2320      	movs	r3, #32
 80004b6:	2100      	movs	r1, #0
 80004b8:	1a9b      	subs	r3, r3, r2
 80004ba:	2200      	movs	r2, #0
 80004bc:	9100      	str	r1, [sp, #0]
 80004be:	9201      	str	r2, [sp, #4]
 80004c0:	2201      	movs	r2, #1
 80004c2:	40da      	lsrs	r2, r3
 80004c4:	9201      	str	r2, [sp, #4]
 80004c6:	e786      	b.n	80003d6 <__udivmoddi4+0x6e>
 80004c8:	4642      	mov	r2, r8
 80004ca:	2320      	movs	r3, #32
 80004cc:	1a9b      	subs	r3, r3, r2
 80004ce:	002a      	movs	r2, r5
 80004d0:	4646      	mov	r6, r8
 80004d2:	409a      	lsls	r2, r3
 80004d4:	0023      	movs	r3, r4
 80004d6:	40f3      	lsrs	r3, r6
 80004d8:	4644      	mov	r4, r8
 80004da:	4313      	orrs	r3, r2
 80004dc:	002a      	movs	r2, r5
 80004de:	40e2      	lsrs	r2, r4
 80004e0:	001c      	movs	r4, r3
 80004e2:	465b      	mov	r3, fp
 80004e4:	0015      	movs	r5, r2
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	dad4      	bge.n	8000494 <__udivmoddi4+0x12c>
 80004ea:	4642      	mov	r2, r8
 80004ec:	002f      	movs	r7, r5
 80004ee:	2320      	movs	r3, #32
 80004f0:	0026      	movs	r6, r4
 80004f2:	4097      	lsls	r7, r2
 80004f4:	1a9b      	subs	r3, r3, r2
 80004f6:	40de      	lsrs	r6, r3
 80004f8:	003b      	movs	r3, r7
 80004fa:	4333      	orrs	r3, r6
 80004fc:	e7cd      	b.n	800049a <__udivmoddi4+0x132>
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fadd>:
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	4646      	mov	r6, r8
 8000504:	46d6      	mov	lr, sl
 8000506:	464f      	mov	r7, r9
 8000508:	024d      	lsls	r5, r1, #9
 800050a:	0242      	lsls	r2, r0, #9
 800050c:	b5c0      	push	{r6, r7, lr}
 800050e:	0a52      	lsrs	r2, r2, #9
 8000510:	0a6e      	lsrs	r6, r5, #9
 8000512:	0047      	lsls	r7, r0, #1
 8000514:	46b0      	mov	r8, r6
 8000516:	0e3f      	lsrs	r7, r7, #24
 8000518:	004e      	lsls	r6, r1, #1
 800051a:	0fc4      	lsrs	r4, r0, #31
 800051c:	00d0      	lsls	r0, r2, #3
 800051e:	4694      	mov	ip, r2
 8000520:	003b      	movs	r3, r7
 8000522:	4682      	mov	sl, r0
 8000524:	0e36      	lsrs	r6, r6, #24
 8000526:	0fc9      	lsrs	r1, r1, #31
 8000528:	09ad      	lsrs	r5, r5, #6
 800052a:	428c      	cmp	r4, r1
 800052c:	d06d      	beq.n	800060a <__aeabi_fadd+0x10a>
 800052e:	1bb8      	subs	r0, r7, r6
 8000530:	4681      	mov	r9, r0
 8000532:	2800      	cmp	r0, #0
 8000534:	dd4d      	ble.n	80005d2 <__aeabi_fadd+0xd2>
 8000536:	2e00      	cmp	r6, #0
 8000538:	d100      	bne.n	800053c <__aeabi_fadd+0x3c>
 800053a:	e088      	b.n	800064e <__aeabi_fadd+0x14e>
 800053c:	2fff      	cmp	r7, #255	; 0xff
 800053e:	d05a      	beq.n	80005f6 <__aeabi_fadd+0xf6>
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	04db      	lsls	r3, r3, #19
 8000544:	431d      	orrs	r5, r3
 8000546:	464b      	mov	r3, r9
 8000548:	2201      	movs	r2, #1
 800054a:	2b1b      	cmp	r3, #27
 800054c:	dc0a      	bgt.n	8000564 <__aeabi_fadd+0x64>
 800054e:	002b      	movs	r3, r5
 8000550:	464a      	mov	r2, r9
 8000552:	4649      	mov	r1, r9
 8000554:	40d3      	lsrs	r3, r2
 8000556:	2220      	movs	r2, #32
 8000558:	1a52      	subs	r2, r2, r1
 800055a:	4095      	lsls	r5, r2
 800055c:	002a      	movs	r2, r5
 800055e:	1e55      	subs	r5, r2, #1
 8000560:	41aa      	sbcs	r2, r5
 8000562:	431a      	orrs	r2, r3
 8000564:	4653      	mov	r3, sl
 8000566:	1a9a      	subs	r2, r3, r2
 8000568:	0153      	lsls	r3, r2, #5
 800056a:	d400      	bmi.n	800056e <__aeabi_fadd+0x6e>
 800056c:	e0b9      	b.n	80006e2 <__aeabi_fadd+0x1e2>
 800056e:	0192      	lsls	r2, r2, #6
 8000570:	0996      	lsrs	r6, r2, #6
 8000572:	0030      	movs	r0, r6
 8000574:	f002 faf0 	bl	8002b58 <__clzsi2>
 8000578:	3805      	subs	r0, #5
 800057a:	4086      	lsls	r6, r0
 800057c:	4287      	cmp	r7, r0
 800057e:	dd00      	ble.n	8000582 <__aeabi_fadd+0x82>
 8000580:	e0d4      	b.n	800072c <__aeabi_fadd+0x22c>
 8000582:	0033      	movs	r3, r6
 8000584:	1bc7      	subs	r7, r0, r7
 8000586:	2020      	movs	r0, #32
 8000588:	3701      	adds	r7, #1
 800058a:	40fb      	lsrs	r3, r7
 800058c:	1bc7      	subs	r7, r0, r7
 800058e:	40be      	lsls	r6, r7
 8000590:	0032      	movs	r2, r6
 8000592:	1e56      	subs	r6, r2, #1
 8000594:	41b2      	sbcs	r2, r6
 8000596:	2700      	movs	r7, #0
 8000598:	431a      	orrs	r2, r3
 800059a:	0753      	lsls	r3, r2, #29
 800059c:	d004      	beq.n	80005a8 <__aeabi_fadd+0xa8>
 800059e:	230f      	movs	r3, #15
 80005a0:	4013      	ands	r3, r2
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	d000      	beq.n	80005a8 <__aeabi_fadd+0xa8>
 80005a6:	3204      	adds	r2, #4
 80005a8:	0153      	lsls	r3, r2, #5
 80005aa:	d400      	bmi.n	80005ae <__aeabi_fadd+0xae>
 80005ac:	e09c      	b.n	80006e8 <__aeabi_fadd+0x1e8>
 80005ae:	1c7b      	adds	r3, r7, #1
 80005b0:	2ffe      	cmp	r7, #254	; 0xfe
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fadd+0xb6>
 80005b4:	e09a      	b.n	80006ec <__aeabi_fadd+0x1ec>
 80005b6:	0192      	lsls	r2, r2, #6
 80005b8:	0a52      	lsrs	r2, r2, #9
 80005ba:	4694      	mov	ip, r2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	05d8      	lsls	r0, r3, #23
 80005c0:	4663      	mov	r3, ip
 80005c2:	07e4      	lsls	r4, r4, #31
 80005c4:	4318      	orrs	r0, r3
 80005c6:	4320      	orrs	r0, r4
 80005c8:	bce0      	pop	{r5, r6, r7}
 80005ca:	46ba      	mov	sl, r7
 80005cc:	46b1      	mov	r9, r6
 80005ce:	46a8      	mov	r8, r5
 80005d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d2:	2800      	cmp	r0, #0
 80005d4:	d049      	beq.n	800066a <__aeabi_fadd+0x16a>
 80005d6:	1bf3      	subs	r3, r6, r7
 80005d8:	2f00      	cmp	r7, #0
 80005da:	d000      	beq.n	80005de <__aeabi_fadd+0xde>
 80005dc:	e0b6      	b.n	800074c <__aeabi_fadd+0x24c>
 80005de:	4652      	mov	r2, sl
 80005e0:	2a00      	cmp	r2, #0
 80005e2:	d060      	beq.n	80006a6 <__aeabi_fadd+0x1a6>
 80005e4:	3b01      	subs	r3, #1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d100      	bne.n	80005ec <__aeabi_fadd+0xec>
 80005ea:	e0fc      	b.n	80007e6 <__aeabi_fadd+0x2e6>
 80005ec:	2eff      	cmp	r6, #255	; 0xff
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0xf2>
 80005f0:	e0b4      	b.n	800075c <__aeabi_fadd+0x25c>
 80005f2:	000c      	movs	r4, r1
 80005f4:	4642      	mov	r2, r8
 80005f6:	2a00      	cmp	r2, #0
 80005f8:	d078      	beq.n	80006ec <__aeabi_fadd+0x1ec>
 80005fa:	2080      	movs	r0, #128	; 0x80
 80005fc:	03c0      	lsls	r0, r0, #15
 80005fe:	4310      	orrs	r0, r2
 8000600:	0242      	lsls	r2, r0, #9
 8000602:	0a53      	lsrs	r3, r2, #9
 8000604:	469c      	mov	ip, r3
 8000606:	23ff      	movs	r3, #255	; 0xff
 8000608:	e7d9      	b.n	80005be <__aeabi_fadd+0xbe>
 800060a:	1bb9      	subs	r1, r7, r6
 800060c:	2900      	cmp	r1, #0
 800060e:	dd71      	ble.n	80006f4 <__aeabi_fadd+0x1f4>
 8000610:	2e00      	cmp	r6, #0
 8000612:	d03f      	beq.n	8000694 <__aeabi_fadd+0x194>
 8000614:	2fff      	cmp	r7, #255	; 0xff
 8000616:	d0ee      	beq.n	80005f6 <__aeabi_fadd+0xf6>
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	04db      	lsls	r3, r3, #19
 800061c:	431d      	orrs	r5, r3
 800061e:	2201      	movs	r2, #1
 8000620:	291b      	cmp	r1, #27
 8000622:	dc07      	bgt.n	8000634 <__aeabi_fadd+0x134>
 8000624:	002a      	movs	r2, r5
 8000626:	2320      	movs	r3, #32
 8000628:	40ca      	lsrs	r2, r1
 800062a:	1a59      	subs	r1, r3, r1
 800062c:	408d      	lsls	r5, r1
 800062e:	1e6b      	subs	r3, r5, #1
 8000630:	419d      	sbcs	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	4452      	add	r2, sl
 8000636:	0153      	lsls	r3, r2, #5
 8000638:	d553      	bpl.n	80006e2 <__aeabi_fadd+0x1e2>
 800063a:	3701      	adds	r7, #1
 800063c:	2fff      	cmp	r7, #255	; 0xff
 800063e:	d055      	beq.n	80006ec <__aeabi_fadd+0x1ec>
 8000640:	2301      	movs	r3, #1
 8000642:	497b      	ldr	r1, [pc, #492]	; (8000830 <__aeabi_fadd+0x330>)
 8000644:	4013      	ands	r3, r2
 8000646:	0852      	lsrs	r2, r2, #1
 8000648:	400a      	ands	r2, r1
 800064a:	431a      	orrs	r2, r3
 800064c:	e7a5      	b.n	800059a <__aeabi_fadd+0x9a>
 800064e:	2d00      	cmp	r5, #0
 8000650:	d02c      	beq.n	80006ac <__aeabi_fadd+0x1ac>
 8000652:	2301      	movs	r3, #1
 8000654:	425b      	negs	r3, r3
 8000656:	469c      	mov	ip, r3
 8000658:	44e1      	add	r9, ip
 800065a:	464b      	mov	r3, r9
 800065c:	2b00      	cmp	r3, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x162>
 8000660:	e0ad      	b.n	80007be <__aeabi_fadd+0x2be>
 8000662:	2fff      	cmp	r7, #255	; 0xff
 8000664:	d000      	beq.n	8000668 <__aeabi_fadd+0x168>
 8000666:	e76e      	b.n	8000546 <__aeabi_fadd+0x46>
 8000668:	e7c5      	b.n	80005f6 <__aeabi_fadd+0xf6>
 800066a:	20fe      	movs	r0, #254	; 0xfe
 800066c:	1c7e      	adds	r6, r7, #1
 800066e:	4230      	tst	r0, r6
 8000670:	d160      	bne.n	8000734 <__aeabi_fadd+0x234>
 8000672:	2f00      	cmp	r7, #0
 8000674:	d000      	beq.n	8000678 <__aeabi_fadd+0x178>
 8000676:	e093      	b.n	80007a0 <__aeabi_fadd+0x2a0>
 8000678:	4652      	mov	r2, sl
 800067a:	2a00      	cmp	r2, #0
 800067c:	d100      	bne.n	8000680 <__aeabi_fadd+0x180>
 800067e:	e0b6      	b.n	80007ee <__aeabi_fadd+0x2ee>
 8000680:	2d00      	cmp	r5, #0
 8000682:	d09c      	beq.n	80005be <__aeabi_fadd+0xbe>
 8000684:	1b52      	subs	r2, r2, r5
 8000686:	0150      	lsls	r0, r2, #5
 8000688:	d400      	bmi.n	800068c <__aeabi_fadd+0x18c>
 800068a:	e0c3      	b.n	8000814 <__aeabi_fadd+0x314>
 800068c:	4653      	mov	r3, sl
 800068e:	000c      	movs	r4, r1
 8000690:	1aea      	subs	r2, r5, r3
 8000692:	e782      	b.n	800059a <__aeabi_fadd+0x9a>
 8000694:	2d00      	cmp	r5, #0
 8000696:	d009      	beq.n	80006ac <__aeabi_fadd+0x1ac>
 8000698:	3901      	subs	r1, #1
 800069a:	2900      	cmp	r1, #0
 800069c:	d100      	bne.n	80006a0 <__aeabi_fadd+0x1a0>
 800069e:	e08b      	b.n	80007b8 <__aeabi_fadd+0x2b8>
 80006a0:	2fff      	cmp	r7, #255	; 0xff
 80006a2:	d1bc      	bne.n	800061e <__aeabi_fadd+0x11e>
 80006a4:	e7a7      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80006a6:	000c      	movs	r4, r1
 80006a8:	4642      	mov	r2, r8
 80006aa:	0037      	movs	r7, r6
 80006ac:	2fff      	cmp	r7, #255	; 0xff
 80006ae:	d0a2      	beq.n	80005f6 <__aeabi_fadd+0xf6>
 80006b0:	0252      	lsls	r2, r2, #9
 80006b2:	0a53      	lsrs	r3, r2, #9
 80006b4:	469c      	mov	ip, r3
 80006b6:	b2fb      	uxtb	r3, r7
 80006b8:	e781      	b.n	80005be <__aeabi_fadd+0xbe>
 80006ba:	21fe      	movs	r1, #254	; 0xfe
 80006bc:	3701      	adds	r7, #1
 80006be:	4239      	tst	r1, r7
 80006c0:	d165      	bne.n	800078e <__aeabi_fadd+0x28e>
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d17e      	bne.n	80007c4 <__aeabi_fadd+0x2c4>
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d100      	bne.n	80006cc <__aeabi_fadd+0x1cc>
 80006ca:	e0aa      	b.n	8000822 <__aeabi_fadd+0x322>
 80006cc:	2d00      	cmp	r5, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_fadd+0x1d2>
 80006d0:	e775      	b.n	80005be <__aeabi_fadd+0xbe>
 80006d2:	002a      	movs	r2, r5
 80006d4:	4452      	add	r2, sl
 80006d6:	2700      	movs	r7, #0
 80006d8:	0153      	lsls	r3, r2, #5
 80006da:	d502      	bpl.n	80006e2 <__aeabi_fadd+0x1e2>
 80006dc:	4b55      	ldr	r3, [pc, #340]	; (8000834 <__aeabi_fadd+0x334>)
 80006de:	3701      	adds	r7, #1
 80006e0:	401a      	ands	r2, r3
 80006e2:	0753      	lsls	r3, r2, #29
 80006e4:	d000      	beq.n	80006e8 <__aeabi_fadd+0x1e8>
 80006e6:	e75a      	b.n	800059e <__aeabi_fadd+0x9e>
 80006e8:	08d2      	lsrs	r2, r2, #3
 80006ea:	e7df      	b.n	80006ac <__aeabi_fadd+0x1ac>
 80006ec:	2200      	movs	r2, #0
 80006ee:	23ff      	movs	r3, #255	; 0xff
 80006f0:	4694      	mov	ip, r2
 80006f2:	e764      	b.n	80005be <__aeabi_fadd+0xbe>
 80006f4:	2900      	cmp	r1, #0
 80006f6:	d0e0      	beq.n	80006ba <__aeabi_fadd+0x1ba>
 80006f8:	1bf3      	subs	r3, r6, r7
 80006fa:	2f00      	cmp	r7, #0
 80006fc:	d03e      	beq.n	800077c <__aeabi_fadd+0x27c>
 80006fe:	2eff      	cmp	r6, #255	; 0xff
 8000700:	d100      	bne.n	8000704 <__aeabi_fadd+0x204>
 8000702:	e777      	b.n	80005f4 <__aeabi_fadd+0xf4>
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	0001      	movs	r1, r0
 8000708:	04d2      	lsls	r2, r2, #19
 800070a:	4311      	orrs	r1, r2
 800070c:	468a      	mov	sl, r1
 800070e:	2201      	movs	r2, #1
 8000710:	2b1b      	cmp	r3, #27
 8000712:	dc08      	bgt.n	8000726 <__aeabi_fadd+0x226>
 8000714:	4652      	mov	r2, sl
 8000716:	2120      	movs	r1, #32
 8000718:	4650      	mov	r0, sl
 800071a:	40da      	lsrs	r2, r3
 800071c:	1acb      	subs	r3, r1, r3
 800071e:	4098      	lsls	r0, r3
 8000720:	1e43      	subs	r3, r0, #1
 8000722:	4198      	sbcs	r0, r3
 8000724:	4302      	orrs	r2, r0
 8000726:	0037      	movs	r7, r6
 8000728:	1952      	adds	r2, r2, r5
 800072a:	e784      	b.n	8000636 <__aeabi_fadd+0x136>
 800072c:	4a41      	ldr	r2, [pc, #260]	; (8000834 <__aeabi_fadd+0x334>)
 800072e:	1a3f      	subs	r7, r7, r0
 8000730:	4032      	ands	r2, r6
 8000732:	e732      	b.n	800059a <__aeabi_fadd+0x9a>
 8000734:	4653      	mov	r3, sl
 8000736:	1b5e      	subs	r6, r3, r5
 8000738:	0173      	lsls	r3, r6, #5
 800073a:	d42d      	bmi.n	8000798 <__aeabi_fadd+0x298>
 800073c:	2e00      	cmp	r6, #0
 800073e:	d000      	beq.n	8000742 <__aeabi_fadd+0x242>
 8000740:	e717      	b.n	8000572 <__aeabi_fadd+0x72>
 8000742:	2200      	movs	r2, #0
 8000744:	2400      	movs	r4, #0
 8000746:	2300      	movs	r3, #0
 8000748:	4694      	mov	ip, r2
 800074a:	e738      	b.n	80005be <__aeabi_fadd+0xbe>
 800074c:	2eff      	cmp	r6, #255	; 0xff
 800074e:	d100      	bne.n	8000752 <__aeabi_fadd+0x252>
 8000750:	e74f      	b.n	80005f2 <__aeabi_fadd+0xf2>
 8000752:	2280      	movs	r2, #128	; 0x80
 8000754:	4650      	mov	r0, sl
 8000756:	04d2      	lsls	r2, r2, #19
 8000758:	4310      	orrs	r0, r2
 800075a:	4682      	mov	sl, r0
 800075c:	2201      	movs	r2, #1
 800075e:	2b1b      	cmp	r3, #27
 8000760:	dc08      	bgt.n	8000774 <__aeabi_fadd+0x274>
 8000762:	4652      	mov	r2, sl
 8000764:	2420      	movs	r4, #32
 8000766:	4650      	mov	r0, sl
 8000768:	40da      	lsrs	r2, r3
 800076a:	1ae3      	subs	r3, r4, r3
 800076c:	4098      	lsls	r0, r3
 800076e:	1e43      	subs	r3, r0, #1
 8000770:	4198      	sbcs	r0, r3
 8000772:	4302      	orrs	r2, r0
 8000774:	000c      	movs	r4, r1
 8000776:	0037      	movs	r7, r6
 8000778:	1aaa      	subs	r2, r5, r2
 800077a:	e6f5      	b.n	8000568 <__aeabi_fadd+0x68>
 800077c:	2800      	cmp	r0, #0
 800077e:	d093      	beq.n	80006a8 <__aeabi_fadd+0x1a8>
 8000780:	3b01      	subs	r3, #1
 8000782:	2b00      	cmp	r3, #0
 8000784:	d04f      	beq.n	8000826 <__aeabi_fadd+0x326>
 8000786:	2eff      	cmp	r6, #255	; 0xff
 8000788:	d1c1      	bne.n	800070e <__aeabi_fadd+0x20e>
 800078a:	4642      	mov	r2, r8
 800078c:	e733      	b.n	80005f6 <__aeabi_fadd+0xf6>
 800078e:	2fff      	cmp	r7, #255	; 0xff
 8000790:	d0ac      	beq.n	80006ec <__aeabi_fadd+0x1ec>
 8000792:	4455      	add	r5, sl
 8000794:	086a      	lsrs	r2, r5, #1
 8000796:	e7a4      	b.n	80006e2 <__aeabi_fadd+0x1e2>
 8000798:	4653      	mov	r3, sl
 800079a:	000c      	movs	r4, r1
 800079c:	1aee      	subs	r6, r5, r3
 800079e:	e6e8      	b.n	8000572 <__aeabi_fadd+0x72>
 80007a0:	4653      	mov	r3, sl
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d128      	bne.n	80007f8 <__aeabi_fadd+0x2f8>
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d000      	beq.n	80007ac <__aeabi_fadd+0x2ac>
 80007aa:	e722      	b.n	80005f2 <__aeabi_fadd+0xf2>
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	03db      	lsls	r3, r3, #15
 80007b0:	469c      	mov	ip, r3
 80007b2:	2400      	movs	r4, #0
 80007b4:	23ff      	movs	r3, #255	; 0xff
 80007b6:	e702      	b.n	80005be <__aeabi_fadd+0xbe>
 80007b8:	002a      	movs	r2, r5
 80007ba:	4452      	add	r2, sl
 80007bc:	e73b      	b.n	8000636 <__aeabi_fadd+0x136>
 80007be:	4653      	mov	r3, sl
 80007c0:	1b5a      	subs	r2, r3, r5
 80007c2:	e6d1      	b.n	8000568 <__aeabi_fadd+0x68>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d100      	bne.n	80007ca <__aeabi_fadd+0x2ca>
 80007c8:	e714      	b.n	80005f4 <__aeabi_fadd+0xf4>
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x2d0>
 80007ce:	e712      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	03db      	lsls	r3, r3, #15
 80007d4:	421a      	tst	r2, r3
 80007d6:	d100      	bne.n	80007da <__aeabi_fadd+0x2da>
 80007d8:	e70d      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007da:	4641      	mov	r1, r8
 80007dc:	4219      	tst	r1, r3
 80007de:	d000      	beq.n	80007e2 <__aeabi_fadd+0x2e2>
 80007e0:	e709      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007e2:	4642      	mov	r2, r8
 80007e4:	e707      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007e6:	000c      	movs	r4, r1
 80007e8:	0037      	movs	r7, r6
 80007ea:	1aaa      	subs	r2, r5, r2
 80007ec:	e6bc      	b.n	8000568 <__aeabi_fadd+0x68>
 80007ee:	2d00      	cmp	r5, #0
 80007f0:	d013      	beq.n	800081a <__aeabi_fadd+0x31a>
 80007f2:	000c      	movs	r4, r1
 80007f4:	46c4      	mov	ip, r8
 80007f6:	e6e2      	b.n	80005be <__aeabi_fadd+0xbe>
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x2fe>
 80007fc:	e6fb      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	03db      	lsls	r3, r3, #15
 8000802:	421a      	tst	r2, r3
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x308>
 8000806:	e6f6      	b.n	80005f6 <__aeabi_fadd+0xf6>
 8000808:	4640      	mov	r0, r8
 800080a:	4218      	tst	r0, r3
 800080c:	d000      	beq.n	8000810 <__aeabi_fadd+0x310>
 800080e:	e6f2      	b.n	80005f6 <__aeabi_fadd+0xf6>
 8000810:	000c      	movs	r4, r1
 8000812:	e6ef      	b.n	80005f4 <__aeabi_fadd+0xf4>
 8000814:	2a00      	cmp	r2, #0
 8000816:	d000      	beq.n	800081a <__aeabi_fadd+0x31a>
 8000818:	e763      	b.n	80006e2 <__aeabi_fadd+0x1e2>
 800081a:	2200      	movs	r2, #0
 800081c:	2400      	movs	r4, #0
 800081e:	4694      	mov	ip, r2
 8000820:	e6cd      	b.n	80005be <__aeabi_fadd+0xbe>
 8000822:	46c4      	mov	ip, r8
 8000824:	e6cb      	b.n	80005be <__aeabi_fadd+0xbe>
 8000826:	002a      	movs	r2, r5
 8000828:	0037      	movs	r7, r6
 800082a:	4452      	add	r2, sl
 800082c:	e703      	b.n	8000636 <__aeabi_fadd+0x136>
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	7dffffff 	.word	0x7dffffff
 8000834:	fbffffff 	.word	0xfbffffff

08000838 <__aeabi_fdiv>:
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	464f      	mov	r7, r9
 800083c:	4646      	mov	r6, r8
 800083e:	46d6      	mov	lr, sl
 8000840:	0245      	lsls	r5, r0, #9
 8000842:	b5c0      	push	{r6, r7, lr}
 8000844:	0047      	lsls	r7, r0, #1
 8000846:	1c0c      	adds	r4, r1, #0
 8000848:	0a6d      	lsrs	r5, r5, #9
 800084a:	0e3f      	lsrs	r7, r7, #24
 800084c:	0fc6      	lsrs	r6, r0, #31
 800084e:	2f00      	cmp	r7, #0
 8000850:	d066      	beq.n	8000920 <__aeabi_fdiv+0xe8>
 8000852:	2fff      	cmp	r7, #255	; 0xff
 8000854:	d06c      	beq.n	8000930 <__aeabi_fdiv+0xf8>
 8000856:	2300      	movs	r3, #0
 8000858:	00ea      	lsls	r2, r5, #3
 800085a:	2580      	movs	r5, #128	; 0x80
 800085c:	4699      	mov	r9, r3
 800085e:	469a      	mov	sl, r3
 8000860:	04ed      	lsls	r5, r5, #19
 8000862:	4315      	orrs	r5, r2
 8000864:	3f7f      	subs	r7, #127	; 0x7f
 8000866:	0260      	lsls	r0, r4, #9
 8000868:	0061      	lsls	r1, r4, #1
 800086a:	0a43      	lsrs	r3, r0, #9
 800086c:	4698      	mov	r8, r3
 800086e:	0e09      	lsrs	r1, r1, #24
 8000870:	0fe4      	lsrs	r4, r4, #31
 8000872:	2900      	cmp	r1, #0
 8000874:	d048      	beq.n	8000908 <__aeabi_fdiv+0xd0>
 8000876:	29ff      	cmp	r1, #255	; 0xff
 8000878:	d010      	beq.n	800089c <__aeabi_fdiv+0x64>
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	00d8      	lsls	r0, r3, #3
 800087e:	04d2      	lsls	r2, r2, #19
 8000880:	4302      	orrs	r2, r0
 8000882:	4690      	mov	r8, r2
 8000884:	2000      	movs	r0, #0
 8000886:	397f      	subs	r1, #127	; 0x7f
 8000888:	464a      	mov	r2, r9
 800088a:	0033      	movs	r3, r6
 800088c:	1a7f      	subs	r7, r7, r1
 800088e:	4302      	orrs	r2, r0
 8000890:	496c      	ldr	r1, [pc, #432]	; (8000a44 <__aeabi_fdiv+0x20c>)
 8000892:	0092      	lsls	r2, r2, #2
 8000894:	588a      	ldr	r2, [r1, r2]
 8000896:	4063      	eors	r3, r4
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4697      	mov	pc, r2
 800089c:	2b00      	cmp	r3, #0
 800089e:	d16d      	bne.n	800097c <__aeabi_fdiv+0x144>
 80008a0:	2002      	movs	r0, #2
 80008a2:	3fff      	subs	r7, #255	; 0xff
 80008a4:	e033      	b.n	800090e <__aeabi_fdiv+0xd6>
 80008a6:	2300      	movs	r3, #0
 80008a8:	4698      	mov	r8, r3
 80008aa:	0026      	movs	r6, r4
 80008ac:	4645      	mov	r5, r8
 80008ae:	4682      	mov	sl, r0
 80008b0:	4653      	mov	r3, sl
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fdiv+0x80>
 80008b6:	e07f      	b.n	80009b8 <__aeabi_fdiv+0x180>
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d100      	bne.n	80008be <__aeabi_fdiv+0x86>
 80008bc:	e094      	b.n	80009e8 <__aeabi_fdiv+0x1b0>
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d017      	beq.n	80008f2 <__aeabi_fdiv+0xba>
 80008c2:	0038      	movs	r0, r7
 80008c4:	307f      	adds	r0, #127	; 0x7f
 80008c6:	2800      	cmp	r0, #0
 80008c8:	dd5f      	ble.n	800098a <__aeabi_fdiv+0x152>
 80008ca:	076b      	lsls	r3, r5, #29
 80008cc:	d004      	beq.n	80008d8 <__aeabi_fdiv+0xa0>
 80008ce:	230f      	movs	r3, #15
 80008d0:	402b      	ands	r3, r5
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fdiv+0xa0>
 80008d6:	3504      	adds	r5, #4
 80008d8:	012b      	lsls	r3, r5, #4
 80008da:	d503      	bpl.n	80008e4 <__aeabi_fdiv+0xac>
 80008dc:	0038      	movs	r0, r7
 80008de:	4b5a      	ldr	r3, [pc, #360]	; (8000a48 <__aeabi_fdiv+0x210>)
 80008e0:	3080      	adds	r0, #128	; 0x80
 80008e2:	401d      	ands	r5, r3
 80008e4:	28fe      	cmp	r0, #254	; 0xfe
 80008e6:	dc67      	bgt.n	80009b8 <__aeabi_fdiv+0x180>
 80008e8:	01ad      	lsls	r5, r5, #6
 80008ea:	0a6d      	lsrs	r5, r5, #9
 80008ec:	b2c0      	uxtb	r0, r0
 80008ee:	e002      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80008f0:	001e      	movs	r6, r3
 80008f2:	2000      	movs	r0, #0
 80008f4:	2500      	movs	r5, #0
 80008f6:	05c0      	lsls	r0, r0, #23
 80008f8:	4328      	orrs	r0, r5
 80008fa:	07f6      	lsls	r6, r6, #31
 80008fc:	4330      	orrs	r0, r6
 80008fe:	bce0      	pop	{r5, r6, r7}
 8000900:	46ba      	mov	sl, r7
 8000902:	46b1      	mov	r9, r6
 8000904:	46a8      	mov	r8, r5
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000908:	2b00      	cmp	r3, #0
 800090a:	d12b      	bne.n	8000964 <__aeabi_fdiv+0x12c>
 800090c:	2001      	movs	r0, #1
 800090e:	464a      	mov	r2, r9
 8000910:	0033      	movs	r3, r6
 8000912:	494e      	ldr	r1, [pc, #312]	; (8000a4c <__aeabi_fdiv+0x214>)
 8000914:	4302      	orrs	r2, r0
 8000916:	0092      	lsls	r2, r2, #2
 8000918:	588a      	ldr	r2, [r1, r2]
 800091a:	4063      	eors	r3, r4
 800091c:	b2db      	uxtb	r3, r3
 800091e:	4697      	mov	pc, r2
 8000920:	2d00      	cmp	r5, #0
 8000922:	d113      	bne.n	800094c <__aeabi_fdiv+0x114>
 8000924:	2304      	movs	r3, #4
 8000926:	4699      	mov	r9, r3
 8000928:	3b03      	subs	r3, #3
 800092a:	2700      	movs	r7, #0
 800092c:	469a      	mov	sl, r3
 800092e:	e79a      	b.n	8000866 <__aeabi_fdiv+0x2e>
 8000930:	2d00      	cmp	r5, #0
 8000932:	d105      	bne.n	8000940 <__aeabi_fdiv+0x108>
 8000934:	2308      	movs	r3, #8
 8000936:	4699      	mov	r9, r3
 8000938:	3b06      	subs	r3, #6
 800093a:	27ff      	movs	r7, #255	; 0xff
 800093c:	469a      	mov	sl, r3
 800093e:	e792      	b.n	8000866 <__aeabi_fdiv+0x2e>
 8000940:	230c      	movs	r3, #12
 8000942:	4699      	mov	r9, r3
 8000944:	3b09      	subs	r3, #9
 8000946:	27ff      	movs	r7, #255	; 0xff
 8000948:	469a      	mov	sl, r3
 800094a:	e78c      	b.n	8000866 <__aeabi_fdiv+0x2e>
 800094c:	0028      	movs	r0, r5
 800094e:	f002 f903 	bl	8002b58 <__clzsi2>
 8000952:	2776      	movs	r7, #118	; 0x76
 8000954:	1f43      	subs	r3, r0, #5
 8000956:	409d      	lsls	r5, r3
 8000958:	2300      	movs	r3, #0
 800095a:	427f      	negs	r7, r7
 800095c:	4699      	mov	r9, r3
 800095e:	469a      	mov	sl, r3
 8000960:	1a3f      	subs	r7, r7, r0
 8000962:	e780      	b.n	8000866 <__aeabi_fdiv+0x2e>
 8000964:	0018      	movs	r0, r3
 8000966:	f002 f8f7 	bl	8002b58 <__clzsi2>
 800096a:	4642      	mov	r2, r8
 800096c:	1f43      	subs	r3, r0, #5
 800096e:	2176      	movs	r1, #118	; 0x76
 8000970:	409a      	lsls	r2, r3
 8000972:	4249      	negs	r1, r1
 8000974:	1a09      	subs	r1, r1, r0
 8000976:	4690      	mov	r8, r2
 8000978:	2000      	movs	r0, #0
 800097a:	e785      	b.n	8000888 <__aeabi_fdiv+0x50>
 800097c:	21ff      	movs	r1, #255	; 0xff
 800097e:	2003      	movs	r0, #3
 8000980:	e782      	b.n	8000888 <__aeabi_fdiv+0x50>
 8000982:	001e      	movs	r6, r3
 8000984:	20ff      	movs	r0, #255	; 0xff
 8000986:	2500      	movs	r5, #0
 8000988:	e7b5      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 800098a:	2301      	movs	r3, #1
 800098c:	1a1b      	subs	r3, r3, r0
 800098e:	2b1b      	cmp	r3, #27
 8000990:	dcaf      	bgt.n	80008f2 <__aeabi_fdiv+0xba>
 8000992:	379e      	adds	r7, #158	; 0x9e
 8000994:	0029      	movs	r1, r5
 8000996:	40bd      	lsls	r5, r7
 8000998:	40d9      	lsrs	r1, r3
 800099a:	1e6a      	subs	r2, r5, #1
 800099c:	4195      	sbcs	r5, r2
 800099e:	430d      	orrs	r5, r1
 80009a0:	076b      	lsls	r3, r5, #29
 80009a2:	d004      	beq.n	80009ae <__aeabi_fdiv+0x176>
 80009a4:	230f      	movs	r3, #15
 80009a6:	402b      	ands	r3, r5
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d000      	beq.n	80009ae <__aeabi_fdiv+0x176>
 80009ac:	3504      	adds	r5, #4
 80009ae:	016b      	lsls	r3, r5, #5
 80009b0:	d544      	bpl.n	8000a3c <__aeabi_fdiv+0x204>
 80009b2:	2001      	movs	r0, #1
 80009b4:	2500      	movs	r5, #0
 80009b6:	e79e      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009b8:	20ff      	movs	r0, #255	; 0xff
 80009ba:	2500      	movs	r5, #0
 80009bc:	e79b      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009be:	2580      	movs	r5, #128	; 0x80
 80009c0:	2600      	movs	r6, #0
 80009c2:	20ff      	movs	r0, #255	; 0xff
 80009c4:	03ed      	lsls	r5, r5, #15
 80009c6:	e796      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009c8:	2300      	movs	r3, #0
 80009ca:	4698      	mov	r8, r3
 80009cc:	2080      	movs	r0, #128	; 0x80
 80009ce:	03c0      	lsls	r0, r0, #15
 80009d0:	4205      	tst	r5, r0
 80009d2:	d009      	beq.n	80009e8 <__aeabi_fdiv+0x1b0>
 80009d4:	4643      	mov	r3, r8
 80009d6:	4203      	tst	r3, r0
 80009d8:	d106      	bne.n	80009e8 <__aeabi_fdiv+0x1b0>
 80009da:	4645      	mov	r5, r8
 80009dc:	4305      	orrs	r5, r0
 80009de:	026d      	lsls	r5, r5, #9
 80009e0:	0026      	movs	r6, r4
 80009e2:	20ff      	movs	r0, #255	; 0xff
 80009e4:	0a6d      	lsrs	r5, r5, #9
 80009e6:	e786      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009e8:	2080      	movs	r0, #128	; 0x80
 80009ea:	03c0      	lsls	r0, r0, #15
 80009ec:	4305      	orrs	r5, r0
 80009ee:	026d      	lsls	r5, r5, #9
 80009f0:	20ff      	movs	r0, #255	; 0xff
 80009f2:	0a6d      	lsrs	r5, r5, #9
 80009f4:	e77f      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009f6:	4641      	mov	r1, r8
 80009f8:	016a      	lsls	r2, r5, #5
 80009fa:	0148      	lsls	r0, r1, #5
 80009fc:	4282      	cmp	r2, r0
 80009fe:	d219      	bcs.n	8000a34 <__aeabi_fdiv+0x1fc>
 8000a00:	211b      	movs	r1, #27
 8000a02:	2500      	movs	r5, #0
 8000a04:	3f01      	subs	r7, #1
 8000a06:	2601      	movs	r6, #1
 8000a08:	0014      	movs	r4, r2
 8000a0a:	006d      	lsls	r5, r5, #1
 8000a0c:	0052      	lsls	r2, r2, #1
 8000a0e:	2c00      	cmp	r4, #0
 8000a10:	db01      	blt.n	8000a16 <__aeabi_fdiv+0x1de>
 8000a12:	4290      	cmp	r0, r2
 8000a14:	d801      	bhi.n	8000a1a <__aeabi_fdiv+0x1e2>
 8000a16:	1a12      	subs	r2, r2, r0
 8000a18:	4335      	orrs	r5, r6
 8000a1a:	3901      	subs	r1, #1
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	d1f3      	bne.n	8000a08 <__aeabi_fdiv+0x1d0>
 8000a20:	1e50      	subs	r0, r2, #1
 8000a22:	4182      	sbcs	r2, r0
 8000a24:	0038      	movs	r0, r7
 8000a26:	307f      	adds	r0, #127	; 0x7f
 8000a28:	001e      	movs	r6, r3
 8000a2a:	4315      	orrs	r5, r2
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	dd00      	ble.n	8000a32 <__aeabi_fdiv+0x1fa>
 8000a30:	e74b      	b.n	80008ca <__aeabi_fdiv+0x92>
 8000a32:	e7aa      	b.n	800098a <__aeabi_fdiv+0x152>
 8000a34:	211a      	movs	r1, #26
 8000a36:	2501      	movs	r5, #1
 8000a38:	1a12      	subs	r2, r2, r0
 8000a3a:	e7e4      	b.n	8000a06 <__aeabi_fdiv+0x1ce>
 8000a3c:	01ad      	lsls	r5, r5, #6
 8000a3e:	2000      	movs	r0, #0
 8000a40:	0a6d      	lsrs	r5, r5, #9
 8000a42:	e758      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 8000a44:	08007d1c 	.word	0x08007d1c
 8000a48:	f7ffffff 	.word	0xf7ffffff
 8000a4c:	08007d5c 	.word	0x08007d5c

08000a50 <__aeabi_fmul>:
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a52:	4657      	mov	r7, sl
 8000a54:	464e      	mov	r6, r9
 8000a56:	4645      	mov	r5, r8
 8000a58:	46de      	mov	lr, fp
 8000a5a:	0244      	lsls	r4, r0, #9
 8000a5c:	b5e0      	push	{r5, r6, r7, lr}
 8000a5e:	0045      	lsls	r5, r0, #1
 8000a60:	1c0f      	adds	r7, r1, #0
 8000a62:	0a64      	lsrs	r4, r4, #9
 8000a64:	0e2d      	lsrs	r5, r5, #24
 8000a66:	0fc6      	lsrs	r6, r0, #31
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d047      	beq.n	8000afc <__aeabi_fmul+0xac>
 8000a6c:	2dff      	cmp	r5, #255	; 0xff
 8000a6e:	d04d      	beq.n	8000b0c <__aeabi_fmul+0xbc>
 8000a70:	2300      	movs	r3, #0
 8000a72:	2080      	movs	r0, #128	; 0x80
 8000a74:	469a      	mov	sl, r3
 8000a76:	469b      	mov	fp, r3
 8000a78:	00e4      	lsls	r4, r4, #3
 8000a7a:	04c0      	lsls	r0, r0, #19
 8000a7c:	4304      	orrs	r4, r0
 8000a7e:	3d7f      	subs	r5, #127	; 0x7f
 8000a80:	0278      	lsls	r0, r7, #9
 8000a82:	0a43      	lsrs	r3, r0, #9
 8000a84:	4699      	mov	r9, r3
 8000a86:	007a      	lsls	r2, r7, #1
 8000a88:	0ffb      	lsrs	r3, r7, #31
 8000a8a:	4698      	mov	r8, r3
 8000a8c:	0e12      	lsrs	r2, r2, #24
 8000a8e:	464b      	mov	r3, r9
 8000a90:	d044      	beq.n	8000b1c <__aeabi_fmul+0xcc>
 8000a92:	2aff      	cmp	r2, #255	; 0xff
 8000a94:	d011      	beq.n	8000aba <__aeabi_fmul+0x6a>
 8000a96:	00d8      	lsls	r0, r3, #3
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	04db      	lsls	r3, r3, #19
 8000a9c:	4303      	orrs	r3, r0
 8000a9e:	4699      	mov	r9, r3
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	3a7f      	subs	r2, #127	; 0x7f
 8000aa4:	18ad      	adds	r5, r5, r2
 8000aa6:	4647      	mov	r7, r8
 8000aa8:	4653      	mov	r3, sl
 8000aaa:	4077      	eors	r7, r6
 8000aac:	1c69      	adds	r1, r5, #1
 8000aae:	2b0f      	cmp	r3, #15
 8000ab0:	d83f      	bhi.n	8000b32 <__aeabi_fmul+0xe2>
 8000ab2:	4a72      	ldr	r2, [pc, #456]	; (8000c7c <__aeabi_fmul+0x22c>)
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	58d3      	ldr	r3, [r2, r3]
 8000ab8:	469f      	mov	pc, r3
 8000aba:	35ff      	adds	r5, #255	; 0xff
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_fmul+0x72>
 8000ac0:	e079      	b.n	8000bb6 <__aeabi_fmul+0x166>
 8000ac2:	4652      	mov	r2, sl
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	4692      	mov	sl, r2
 8000aca:	2002      	movs	r0, #2
 8000acc:	e7eb      	b.n	8000aa6 <__aeabi_fmul+0x56>
 8000ace:	4647      	mov	r7, r8
 8000ad0:	464c      	mov	r4, r9
 8000ad2:	4683      	mov	fp, r0
 8000ad4:	465b      	mov	r3, fp
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d028      	beq.n	8000b2c <__aeabi_fmul+0xdc>
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_fmul+0x90>
 8000ade:	e0c6      	b.n	8000c6e <__aeabi_fmul+0x21e>
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d14f      	bne.n	8000b84 <__aeabi_fmul+0x134>
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2400      	movs	r4, #0
 8000ae8:	05c0      	lsls	r0, r0, #23
 8000aea:	07ff      	lsls	r7, r7, #31
 8000aec:	4320      	orrs	r0, r4
 8000aee:	4338      	orrs	r0, r7
 8000af0:	bcf0      	pop	{r4, r5, r6, r7}
 8000af2:	46bb      	mov	fp, r7
 8000af4:	46b2      	mov	sl, r6
 8000af6:	46a9      	mov	r9, r5
 8000af8:	46a0      	mov	r8, r4
 8000afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000afc:	2c00      	cmp	r4, #0
 8000afe:	d171      	bne.n	8000be4 <__aeabi_fmul+0x194>
 8000b00:	2304      	movs	r3, #4
 8000b02:	469a      	mov	sl, r3
 8000b04:	3b03      	subs	r3, #3
 8000b06:	2500      	movs	r5, #0
 8000b08:	469b      	mov	fp, r3
 8000b0a:	e7b9      	b.n	8000a80 <__aeabi_fmul+0x30>
 8000b0c:	2c00      	cmp	r4, #0
 8000b0e:	d163      	bne.n	8000bd8 <__aeabi_fmul+0x188>
 8000b10:	2308      	movs	r3, #8
 8000b12:	469a      	mov	sl, r3
 8000b14:	3b06      	subs	r3, #6
 8000b16:	25ff      	movs	r5, #255	; 0xff
 8000b18:	469b      	mov	fp, r3
 8000b1a:	e7b1      	b.n	8000a80 <__aeabi_fmul+0x30>
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d150      	bne.n	8000bc2 <__aeabi_fmul+0x172>
 8000b20:	4652      	mov	r2, sl
 8000b22:	3301      	adds	r3, #1
 8000b24:	431a      	orrs	r2, r3
 8000b26:	4692      	mov	sl, r2
 8000b28:	2001      	movs	r0, #1
 8000b2a:	e7bc      	b.n	8000aa6 <__aeabi_fmul+0x56>
 8000b2c:	20ff      	movs	r0, #255	; 0xff
 8000b2e:	2400      	movs	r4, #0
 8000b30:	e7da      	b.n	8000ae8 <__aeabi_fmul+0x98>
 8000b32:	4648      	mov	r0, r9
 8000b34:	0c26      	lsrs	r6, r4, #16
 8000b36:	0424      	lsls	r4, r4, #16
 8000b38:	0c22      	lsrs	r2, r4, #16
 8000b3a:	0404      	lsls	r4, r0, #16
 8000b3c:	0c24      	lsrs	r4, r4, #16
 8000b3e:	464b      	mov	r3, r9
 8000b40:	0020      	movs	r0, r4
 8000b42:	0c1b      	lsrs	r3, r3, #16
 8000b44:	4350      	muls	r0, r2
 8000b46:	4374      	muls	r4, r6
 8000b48:	435a      	muls	r2, r3
 8000b4a:	435e      	muls	r6, r3
 8000b4c:	1912      	adds	r2, r2, r4
 8000b4e:	0c03      	lsrs	r3, r0, #16
 8000b50:	189b      	adds	r3, r3, r2
 8000b52:	429c      	cmp	r4, r3
 8000b54:	d903      	bls.n	8000b5e <__aeabi_fmul+0x10e>
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	0252      	lsls	r2, r2, #9
 8000b5a:	4694      	mov	ip, r2
 8000b5c:	4466      	add	r6, ip
 8000b5e:	0400      	lsls	r0, r0, #16
 8000b60:	041a      	lsls	r2, r3, #16
 8000b62:	0c00      	lsrs	r0, r0, #16
 8000b64:	1812      	adds	r2, r2, r0
 8000b66:	0194      	lsls	r4, r2, #6
 8000b68:	1e60      	subs	r0, r4, #1
 8000b6a:	4184      	sbcs	r4, r0
 8000b6c:	0c1b      	lsrs	r3, r3, #16
 8000b6e:	0e92      	lsrs	r2, r2, #26
 8000b70:	199b      	adds	r3, r3, r6
 8000b72:	4314      	orrs	r4, r2
 8000b74:	019b      	lsls	r3, r3, #6
 8000b76:	431c      	orrs	r4, r3
 8000b78:	011b      	lsls	r3, r3, #4
 8000b7a:	d572      	bpl.n	8000c62 <__aeabi_fmul+0x212>
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	0863      	lsrs	r3, r4, #1
 8000b80:	4004      	ands	r4, r0
 8000b82:	431c      	orrs	r4, r3
 8000b84:	0008      	movs	r0, r1
 8000b86:	307f      	adds	r0, #127	; 0x7f
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	dd3c      	ble.n	8000c06 <__aeabi_fmul+0x1b6>
 8000b8c:	0763      	lsls	r3, r4, #29
 8000b8e:	d004      	beq.n	8000b9a <__aeabi_fmul+0x14a>
 8000b90:	230f      	movs	r3, #15
 8000b92:	4023      	ands	r3, r4
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	d000      	beq.n	8000b9a <__aeabi_fmul+0x14a>
 8000b98:	3404      	adds	r4, #4
 8000b9a:	0123      	lsls	r3, r4, #4
 8000b9c:	d503      	bpl.n	8000ba6 <__aeabi_fmul+0x156>
 8000b9e:	3180      	adds	r1, #128	; 0x80
 8000ba0:	0008      	movs	r0, r1
 8000ba2:	4b37      	ldr	r3, [pc, #220]	; (8000c80 <__aeabi_fmul+0x230>)
 8000ba4:	401c      	ands	r4, r3
 8000ba6:	28fe      	cmp	r0, #254	; 0xfe
 8000ba8:	dcc0      	bgt.n	8000b2c <__aeabi_fmul+0xdc>
 8000baa:	01a4      	lsls	r4, r4, #6
 8000bac:	0a64      	lsrs	r4, r4, #9
 8000bae:	b2c0      	uxtb	r0, r0
 8000bb0:	e79a      	b.n	8000ae8 <__aeabi_fmul+0x98>
 8000bb2:	0037      	movs	r7, r6
 8000bb4:	e78e      	b.n	8000ad4 <__aeabi_fmul+0x84>
 8000bb6:	4652      	mov	r2, sl
 8000bb8:	2303      	movs	r3, #3
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	4692      	mov	sl, r2
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	e771      	b.n	8000aa6 <__aeabi_fmul+0x56>
 8000bc2:	4648      	mov	r0, r9
 8000bc4:	f001 ffc8 	bl	8002b58 <__clzsi2>
 8000bc8:	464a      	mov	r2, r9
 8000bca:	1f43      	subs	r3, r0, #5
 8000bcc:	409a      	lsls	r2, r3
 8000bce:	1a2d      	subs	r5, r5, r0
 8000bd0:	4691      	mov	r9, r2
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	3d76      	subs	r5, #118	; 0x76
 8000bd6:	e766      	b.n	8000aa6 <__aeabi_fmul+0x56>
 8000bd8:	230c      	movs	r3, #12
 8000bda:	469a      	mov	sl, r3
 8000bdc:	3b09      	subs	r3, #9
 8000bde:	25ff      	movs	r5, #255	; 0xff
 8000be0:	469b      	mov	fp, r3
 8000be2:	e74d      	b.n	8000a80 <__aeabi_fmul+0x30>
 8000be4:	0020      	movs	r0, r4
 8000be6:	f001 ffb7 	bl	8002b58 <__clzsi2>
 8000bea:	2576      	movs	r5, #118	; 0x76
 8000bec:	1f43      	subs	r3, r0, #5
 8000bee:	409c      	lsls	r4, r3
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	426d      	negs	r5, r5
 8000bf4:	469a      	mov	sl, r3
 8000bf6:	469b      	mov	fp, r3
 8000bf8:	1a2d      	subs	r5, r5, r0
 8000bfa:	e741      	b.n	8000a80 <__aeabi_fmul+0x30>
 8000bfc:	2480      	movs	r4, #128	; 0x80
 8000bfe:	2700      	movs	r7, #0
 8000c00:	20ff      	movs	r0, #255	; 0xff
 8000c02:	03e4      	lsls	r4, r4, #15
 8000c04:	e770      	b.n	8000ae8 <__aeabi_fmul+0x98>
 8000c06:	2301      	movs	r3, #1
 8000c08:	1a1b      	subs	r3, r3, r0
 8000c0a:	2b1b      	cmp	r3, #27
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fmul+0x1c0>
 8000c0e:	e769      	b.n	8000ae4 <__aeabi_fmul+0x94>
 8000c10:	319e      	adds	r1, #158	; 0x9e
 8000c12:	0020      	movs	r0, r4
 8000c14:	408c      	lsls	r4, r1
 8000c16:	40d8      	lsrs	r0, r3
 8000c18:	1e63      	subs	r3, r4, #1
 8000c1a:	419c      	sbcs	r4, r3
 8000c1c:	4304      	orrs	r4, r0
 8000c1e:	0763      	lsls	r3, r4, #29
 8000c20:	d004      	beq.n	8000c2c <__aeabi_fmul+0x1dc>
 8000c22:	230f      	movs	r3, #15
 8000c24:	4023      	ands	r3, r4
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	d000      	beq.n	8000c2c <__aeabi_fmul+0x1dc>
 8000c2a:	3404      	adds	r4, #4
 8000c2c:	0163      	lsls	r3, r4, #5
 8000c2e:	d51a      	bpl.n	8000c66 <__aeabi_fmul+0x216>
 8000c30:	2001      	movs	r0, #1
 8000c32:	2400      	movs	r4, #0
 8000c34:	e758      	b.n	8000ae8 <__aeabi_fmul+0x98>
 8000c36:	2080      	movs	r0, #128	; 0x80
 8000c38:	03c0      	lsls	r0, r0, #15
 8000c3a:	4204      	tst	r4, r0
 8000c3c:	d009      	beq.n	8000c52 <__aeabi_fmul+0x202>
 8000c3e:	464b      	mov	r3, r9
 8000c40:	4203      	tst	r3, r0
 8000c42:	d106      	bne.n	8000c52 <__aeabi_fmul+0x202>
 8000c44:	464c      	mov	r4, r9
 8000c46:	4304      	orrs	r4, r0
 8000c48:	0264      	lsls	r4, r4, #9
 8000c4a:	4647      	mov	r7, r8
 8000c4c:	20ff      	movs	r0, #255	; 0xff
 8000c4e:	0a64      	lsrs	r4, r4, #9
 8000c50:	e74a      	b.n	8000ae8 <__aeabi_fmul+0x98>
 8000c52:	2080      	movs	r0, #128	; 0x80
 8000c54:	03c0      	lsls	r0, r0, #15
 8000c56:	4304      	orrs	r4, r0
 8000c58:	0264      	lsls	r4, r4, #9
 8000c5a:	0037      	movs	r7, r6
 8000c5c:	20ff      	movs	r0, #255	; 0xff
 8000c5e:	0a64      	lsrs	r4, r4, #9
 8000c60:	e742      	b.n	8000ae8 <__aeabi_fmul+0x98>
 8000c62:	0029      	movs	r1, r5
 8000c64:	e78e      	b.n	8000b84 <__aeabi_fmul+0x134>
 8000c66:	01a4      	lsls	r4, r4, #6
 8000c68:	2000      	movs	r0, #0
 8000c6a:	0a64      	lsrs	r4, r4, #9
 8000c6c:	e73c      	b.n	8000ae8 <__aeabi_fmul+0x98>
 8000c6e:	2080      	movs	r0, #128	; 0x80
 8000c70:	03c0      	lsls	r0, r0, #15
 8000c72:	4304      	orrs	r4, r0
 8000c74:	0264      	lsls	r4, r4, #9
 8000c76:	20ff      	movs	r0, #255	; 0xff
 8000c78:	0a64      	lsrs	r4, r4, #9
 8000c7a:	e735      	b.n	8000ae8 <__aeabi_fmul+0x98>
 8000c7c:	08007d9c 	.word	0x08007d9c
 8000c80:	f7ffffff 	.word	0xf7ffffff

08000c84 <__aeabi_i2f>:
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	2800      	cmp	r0, #0
 8000c88:	d013      	beq.n	8000cb2 <__aeabi_i2f+0x2e>
 8000c8a:	17c3      	asrs	r3, r0, #31
 8000c8c:	18c5      	adds	r5, r0, r3
 8000c8e:	405d      	eors	r5, r3
 8000c90:	0fc4      	lsrs	r4, r0, #31
 8000c92:	0028      	movs	r0, r5
 8000c94:	f001 ff60 	bl	8002b58 <__clzsi2>
 8000c98:	239e      	movs	r3, #158	; 0x9e
 8000c9a:	0001      	movs	r1, r0
 8000c9c:	1a1b      	subs	r3, r3, r0
 8000c9e:	2b96      	cmp	r3, #150	; 0x96
 8000ca0:	dc0f      	bgt.n	8000cc2 <__aeabi_i2f+0x3e>
 8000ca2:	2808      	cmp	r0, #8
 8000ca4:	dd01      	ble.n	8000caa <__aeabi_i2f+0x26>
 8000ca6:	3908      	subs	r1, #8
 8000ca8:	408d      	lsls	r5, r1
 8000caa:	026d      	lsls	r5, r5, #9
 8000cac:	0a6d      	lsrs	r5, r5, #9
 8000cae:	b2d8      	uxtb	r0, r3
 8000cb0:	e002      	b.n	8000cb8 <__aeabi_i2f+0x34>
 8000cb2:	2400      	movs	r4, #0
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	2500      	movs	r5, #0
 8000cb8:	05c0      	lsls	r0, r0, #23
 8000cba:	4328      	orrs	r0, r5
 8000cbc:	07e4      	lsls	r4, r4, #31
 8000cbe:	4320      	orrs	r0, r4
 8000cc0:	bd70      	pop	{r4, r5, r6, pc}
 8000cc2:	2b99      	cmp	r3, #153	; 0x99
 8000cc4:	dd0b      	ble.n	8000cde <__aeabi_i2f+0x5a>
 8000cc6:	2205      	movs	r2, #5
 8000cc8:	002e      	movs	r6, r5
 8000cca:	1a12      	subs	r2, r2, r0
 8000ccc:	40d6      	lsrs	r6, r2
 8000cce:	0002      	movs	r2, r0
 8000cd0:	321b      	adds	r2, #27
 8000cd2:	4095      	lsls	r5, r2
 8000cd4:	0028      	movs	r0, r5
 8000cd6:	1e45      	subs	r5, r0, #1
 8000cd8:	41a8      	sbcs	r0, r5
 8000cda:	0035      	movs	r5, r6
 8000cdc:	4305      	orrs	r5, r0
 8000cde:	2905      	cmp	r1, #5
 8000ce0:	dd01      	ble.n	8000ce6 <__aeabi_i2f+0x62>
 8000ce2:	1f4a      	subs	r2, r1, #5
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	002a      	movs	r2, r5
 8000ce8:	4e08      	ldr	r6, [pc, #32]	; (8000d0c <__aeabi_i2f+0x88>)
 8000cea:	4032      	ands	r2, r6
 8000cec:	0768      	lsls	r0, r5, #29
 8000cee:	d009      	beq.n	8000d04 <__aeabi_i2f+0x80>
 8000cf0:	200f      	movs	r0, #15
 8000cf2:	4028      	ands	r0, r5
 8000cf4:	2804      	cmp	r0, #4
 8000cf6:	d005      	beq.n	8000d04 <__aeabi_i2f+0x80>
 8000cf8:	3204      	adds	r2, #4
 8000cfa:	0150      	lsls	r0, r2, #5
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_i2f+0x80>
 8000cfe:	239f      	movs	r3, #159	; 0x9f
 8000d00:	4032      	ands	r2, r6
 8000d02:	1a5b      	subs	r3, r3, r1
 8000d04:	0192      	lsls	r2, r2, #6
 8000d06:	0a55      	lsrs	r5, r2, #9
 8000d08:	b2d8      	uxtb	r0, r3
 8000d0a:	e7d5      	b.n	8000cb8 <__aeabi_i2f+0x34>
 8000d0c:	fbffffff 	.word	0xfbffffff

08000d10 <__aeabi_ui2f>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	1e05      	subs	r5, r0, #0
 8000d14:	d00e      	beq.n	8000d34 <__aeabi_ui2f+0x24>
 8000d16:	f001 ff1f 	bl	8002b58 <__clzsi2>
 8000d1a:	239e      	movs	r3, #158	; 0x9e
 8000d1c:	0004      	movs	r4, r0
 8000d1e:	1a1b      	subs	r3, r3, r0
 8000d20:	2b96      	cmp	r3, #150	; 0x96
 8000d22:	dc0c      	bgt.n	8000d3e <__aeabi_ui2f+0x2e>
 8000d24:	2808      	cmp	r0, #8
 8000d26:	dd01      	ble.n	8000d2c <__aeabi_ui2f+0x1c>
 8000d28:	3c08      	subs	r4, #8
 8000d2a:	40a5      	lsls	r5, r4
 8000d2c:	026d      	lsls	r5, r5, #9
 8000d2e:	0a6d      	lsrs	r5, r5, #9
 8000d30:	b2d8      	uxtb	r0, r3
 8000d32:	e001      	b.n	8000d38 <__aeabi_ui2f+0x28>
 8000d34:	2000      	movs	r0, #0
 8000d36:	2500      	movs	r5, #0
 8000d38:	05c0      	lsls	r0, r0, #23
 8000d3a:	4328      	orrs	r0, r5
 8000d3c:	bd70      	pop	{r4, r5, r6, pc}
 8000d3e:	2b99      	cmp	r3, #153	; 0x99
 8000d40:	dd09      	ble.n	8000d56 <__aeabi_ui2f+0x46>
 8000d42:	0002      	movs	r2, r0
 8000d44:	0029      	movs	r1, r5
 8000d46:	321b      	adds	r2, #27
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	1e4a      	subs	r2, r1, #1
 8000d4c:	4191      	sbcs	r1, r2
 8000d4e:	2205      	movs	r2, #5
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	40d5      	lsrs	r5, r2
 8000d54:	430d      	orrs	r5, r1
 8000d56:	2c05      	cmp	r4, #5
 8000d58:	dd01      	ble.n	8000d5e <__aeabi_ui2f+0x4e>
 8000d5a:	1f62      	subs	r2, r4, #5
 8000d5c:	4095      	lsls	r5, r2
 8000d5e:	0029      	movs	r1, r5
 8000d60:	4e08      	ldr	r6, [pc, #32]	; (8000d84 <__aeabi_ui2f+0x74>)
 8000d62:	4031      	ands	r1, r6
 8000d64:	076a      	lsls	r2, r5, #29
 8000d66:	d009      	beq.n	8000d7c <__aeabi_ui2f+0x6c>
 8000d68:	200f      	movs	r0, #15
 8000d6a:	4028      	ands	r0, r5
 8000d6c:	2804      	cmp	r0, #4
 8000d6e:	d005      	beq.n	8000d7c <__aeabi_ui2f+0x6c>
 8000d70:	3104      	adds	r1, #4
 8000d72:	014a      	lsls	r2, r1, #5
 8000d74:	d502      	bpl.n	8000d7c <__aeabi_ui2f+0x6c>
 8000d76:	239f      	movs	r3, #159	; 0x9f
 8000d78:	4031      	ands	r1, r6
 8000d7a:	1b1b      	subs	r3, r3, r4
 8000d7c:	0189      	lsls	r1, r1, #6
 8000d7e:	0a4d      	lsrs	r5, r1, #9
 8000d80:	b2d8      	uxtb	r0, r3
 8000d82:	e7d9      	b.n	8000d38 <__aeabi_ui2f+0x28>
 8000d84:	fbffffff 	.word	0xfbffffff

08000d88 <__aeabi_dadd>:
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	464f      	mov	r7, r9
 8000d8c:	46d6      	mov	lr, sl
 8000d8e:	4646      	mov	r6, r8
 8000d90:	000d      	movs	r5, r1
 8000d92:	0001      	movs	r1, r0
 8000d94:	0018      	movs	r0, r3
 8000d96:	b5c0      	push	{r6, r7, lr}
 8000d98:	0017      	movs	r7, r2
 8000d9a:	032b      	lsls	r3, r5, #12
 8000d9c:	0a5a      	lsrs	r2, r3, #9
 8000d9e:	0f4b      	lsrs	r3, r1, #29
 8000da0:	4313      	orrs	r3, r2
 8000da2:	00ca      	lsls	r2, r1, #3
 8000da4:	4691      	mov	r9, r2
 8000da6:	0302      	lsls	r2, r0, #12
 8000da8:	006e      	lsls	r6, r5, #1
 8000daa:	0041      	lsls	r1, r0, #1
 8000dac:	0a52      	lsrs	r2, r2, #9
 8000dae:	0fec      	lsrs	r4, r5, #31
 8000db0:	0f7d      	lsrs	r5, r7, #29
 8000db2:	4315      	orrs	r5, r2
 8000db4:	0d76      	lsrs	r6, r6, #21
 8000db6:	0d49      	lsrs	r1, r1, #21
 8000db8:	0fc0      	lsrs	r0, r0, #31
 8000dba:	4682      	mov	sl, r0
 8000dbc:	46ac      	mov	ip, r5
 8000dbe:	00ff      	lsls	r7, r7, #3
 8000dc0:	1a72      	subs	r2, r6, r1
 8000dc2:	4284      	cmp	r4, r0
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_dadd+0x40>
 8000dc6:	e098      	b.n	8000efa <__aeabi_dadd+0x172>
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	dc00      	bgt.n	8000dce <__aeabi_dadd+0x46>
 8000dcc:	e081      	b.n	8000ed2 <__aeabi_dadd+0x14a>
 8000dce:	2900      	cmp	r1, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_dadd+0x4c>
 8000dd2:	e0b6      	b.n	8000f42 <__aeabi_dadd+0x1ba>
 8000dd4:	49c9      	ldr	r1, [pc, #804]	; (80010fc <__aeabi_dadd+0x374>)
 8000dd6:	428e      	cmp	r6, r1
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_dadd+0x54>
 8000dda:	e172      	b.n	80010c2 <__aeabi_dadd+0x33a>
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	0028      	movs	r0, r5
 8000de0:	0409      	lsls	r1, r1, #16
 8000de2:	4308      	orrs	r0, r1
 8000de4:	4684      	mov	ip, r0
 8000de6:	2a38      	cmp	r2, #56	; 0x38
 8000de8:	dd00      	ble.n	8000dec <__aeabi_dadd+0x64>
 8000dea:	e15e      	b.n	80010aa <__aeabi_dadd+0x322>
 8000dec:	2a1f      	cmp	r2, #31
 8000dee:	dd00      	ble.n	8000df2 <__aeabi_dadd+0x6a>
 8000df0:	e1ee      	b.n	80011d0 <__aeabi_dadd+0x448>
 8000df2:	2020      	movs	r0, #32
 8000df4:	0039      	movs	r1, r7
 8000df6:	4665      	mov	r5, ip
 8000df8:	1a80      	subs	r0, r0, r2
 8000dfa:	4087      	lsls	r7, r0
 8000dfc:	40d1      	lsrs	r1, r2
 8000dfe:	4085      	lsls	r5, r0
 8000e00:	430d      	orrs	r5, r1
 8000e02:	0039      	movs	r1, r7
 8000e04:	1e4f      	subs	r7, r1, #1
 8000e06:	41b9      	sbcs	r1, r7
 8000e08:	4667      	mov	r7, ip
 8000e0a:	40d7      	lsrs	r7, r2
 8000e0c:	4329      	orrs	r1, r5
 8000e0e:	1bdb      	subs	r3, r3, r7
 8000e10:	464a      	mov	r2, r9
 8000e12:	1a55      	subs	r5, r2, r1
 8000e14:	45a9      	cmp	r9, r5
 8000e16:	4189      	sbcs	r1, r1
 8000e18:	4249      	negs	r1, r1
 8000e1a:	1a5b      	subs	r3, r3, r1
 8000e1c:	4698      	mov	r8, r3
 8000e1e:	4643      	mov	r3, r8
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	d400      	bmi.n	8000e26 <__aeabi_dadd+0x9e>
 8000e24:	e0cc      	b.n	8000fc0 <__aeabi_dadd+0x238>
 8000e26:	4643      	mov	r3, r8
 8000e28:	025b      	lsls	r3, r3, #9
 8000e2a:	0a5b      	lsrs	r3, r3, #9
 8000e2c:	4698      	mov	r8, r3
 8000e2e:	4643      	mov	r3, r8
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0xae>
 8000e34:	e12c      	b.n	8001090 <__aeabi_dadd+0x308>
 8000e36:	4640      	mov	r0, r8
 8000e38:	f001 fe8e 	bl	8002b58 <__clzsi2>
 8000e3c:	0001      	movs	r1, r0
 8000e3e:	3908      	subs	r1, #8
 8000e40:	2220      	movs	r2, #32
 8000e42:	0028      	movs	r0, r5
 8000e44:	4643      	mov	r3, r8
 8000e46:	1a52      	subs	r2, r2, r1
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	40d0      	lsrs	r0, r2
 8000e4c:	408d      	lsls	r5, r1
 8000e4e:	4303      	orrs	r3, r0
 8000e50:	428e      	cmp	r6, r1
 8000e52:	dd00      	ble.n	8000e56 <__aeabi_dadd+0xce>
 8000e54:	e117      	b.n	8001086 <__aeabi_dadd+0x2fe>
 8000e56:	1b8e      	subs	r6, r1, r6
 8000e58:	1c72      	adds	r2, r6, #1
 8000e5a:	2a1f      	cmp	r2, #31
 8000e5c:	dd00      	ble.n	8000e60 <__aeabi_dadd+0xd8>
 8000e5e:	e1a7      	b.n	80011b0 <__aeabi_dadd+0x428>
 8000e60:	2120      	movs	r1, #32
 8000e62:	0018      	movs	r0, r3
 8000e64:	002e      	movs	r6, r5
 8000e66:	1a89      	subs	r1, r1, r2
 8000e68:	408d      	lsls	r5, r1
 8000e6a:	4088      	lsls	r0, r1
 8000e6c:	40d6      	lsrs	r6, r2
 8000e6e:	40d3      	lsrs	r3, r2
 8000e70:	1e69      	subs	r1, r5, #1
 8000e72:	418d      	sbcs	r5, r1
 8000e74:	4330      	orrs	r0, r6
 8000e76:	4698      	mov	r8, r3
 8000e78:	2600      	movs	r6, #0
 8000e7a:	4305      	orrs	r5, r0
 8000e7c:	076b      	lsls	r3, r5, #29
 8000e7e:	d009      	beq.n	8000e94 <__aeabi_dadd+0x10c>
 8000e80:	230f      	movs	r3, #15
 8000e82:	402b      	ands	r3, r5
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d005      	beq.n	8000e94 <__aeabi_dadd+0x10c>
 8000e88:	1d2b      	adds	r3, r5, #4
 8000e8a:	42ab      	cmp	r3, r5
 8000e8c:	41ad      	sbcs	r5, r5
 8000e8e:	426d      	negs	r5, r5
 8000e90:	44a8      	add	r8, r5
 8000e92:	001d      	movs	r5, r3
 8000e94:	4643      	mov	r3, r8
 8000e96:	021b      	lsls	r3, r3, #8
 8000e98:	d400      	bmi.n	8000e9c <__aeabi_dadd+0x114>
 8000e9a:	e094      	b.n	8000fc6 <__aeabi_dadd+0x23e>
 8000e9c:	4b97      	ldr	r3, [pc, #604]	; (80010fc <__aeabi_dadd+0x374>)
 8000e9e:	1c72      	adds	r2, r6, #1
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_dadd+0x11e>
 8000ea4:	e09d      	b.n	8000fe2 <__aeabi_dadd+0x25a>
 8000ea6:	4641      	mov	r1, r8
 8000ea8:	4b95      	ldr	r3, [pc, #596]	; (8001100 <__aeabi_dadd+0x378>)
 8000eaa:	08ed      	lsrs	r5, r5, #3
 8000eac:	4019      	ands	r1, r3
 8000eae:	000b      	movs	r3, r1
 8000eb0:	0552      	lsls	r2, r2, #21
 8000eb2:	0749      	lsls	r1, r1, #29
 8000eb4:	025b      	lsls	r3, r3, #9
 8000eb6:	4329      	orrs	r1, r5
 8000eb8:	0b1b      	lsrs	r3, r3, #12
 8000eba:	0d52      	lsrs	r2, r2, #21
 8000ebc:	0512      	lsls	r2, r2, #20
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	07e4      	lsls	r4, r4, #31
 8000ec2:	4323      	orrs	r3, r4
 8000ec4:	0008      	movs	r0, r1
 8000ec6:	0019      	movs	r1, r3
 8000ec8:	bce0      	pop	{r5, r6, r7}
 8000eca:	46ba      	mov	sl, r7
 8000ecc:	46b1      	mov	r9, r6
 8000ece:	46a8      	mov	r8, r5
 8000ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	d043      	beq.n	8000f5e <__aeabi_dadd+0x1d6>
 8000ed6:	1b8a      	subs	r2, r1, r6
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d000      	beq.n	8000ede <__aeabi_dadd+0x156>
 8000edc:	e12a      	b.n	8001134 <__aeabi_dadd+0x3ac>
 8000ede:	464c      	mov	r4, r9
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_dadd+0x15e>
 8000ee4:	e1d1      	b.n	800128a <__aeabi_dadd+0x502>
 8000ee6:	1e54      	subs	r4, r2, #1
 8000ee8:	2a01      	cmp	r2, #1
 8000eea:	d100      	bne.n	8000eee <__aeabi_dadd+0x166>
 8000eec:	e21f      	b.n	800132e <__aeabi_dadd+0x5a6>
 8000eee:	4d83      	ldr	r5, [pc, #524]	; (80010fc <__aeabi_dadd+0x374>)
 8000ef0:	42aa      	cmp	r2, r5
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_dadd+0x16e>
 8000ef4:	e272      	b.n	80013dc <__aeabi_dadd+0x654>
 8000ef6:	0022      	movs	r2, r4
 8000ef8:	e123      	b.n	8001142 <__aeabi_dadd+0x3ba>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	dc00      	bgt.n	8000f00 <__aeabi_dadd+0x178>
 8000efe:	e098      	b.n	8001032 <__aeabi_dadd+0x2aa>
 8000f00:	2900      	cmp	r1, #0
 8000f02:	d042      	beq.n	8000f8a <__aeabi_dadd+0x202>
 8000f04:	497d      	ldr	r1, [pc, #500]	; (80010fc <__aeabi_dadd+0x374>)
 8000f06:	428e      	cmp	r6, r1
 8000f08:	d100      	bne.n	8000f0c <__aeabi_dadd+0x184>
 8000f0a:	e0da      	b.n	80010c2 <__aeabi_dadd+0x33a>
 8000f0c:	2180      	movs	r1, #128	; 0x80
 8000f0e:	0028      	movs	r0, r5
 8000f10:	0409      	lsls	r1, r1, #16
 8000f12:	4308      	orrs	r0, r1
 8000f14:	4684      	mov	ip, r0
 8000f16:	2a38      	cmp	r2, #56	; 0x38
 8000f18:	dd00      	ble.n	8000f1c <__aeabi_dadd+0x194>
 8000f1a:	e129      	b.n	8001170 <__aeabi_dadd+0x3e8>
 8000f1c:	2a1f      	cmp	r2, #31
 8000f1e:	dc00      	bgt.n	8000f22 <__aeabi_dadd+0x19a>
 8000f20:	e187      	b.n	8001232 <__aeabi_dadd+0x4aa>
 8000f22:	0011      	movs	r1, r2
 8000f24:	4665      	mov	r5, ip
 8000f26:	3920      	subs	r1, #32
 8000f28:	40cd      	lsrs	r5, r1
 8000f2a:	2a20      	cmp	r2, #32
 8000f2c:	d004      	beq.n	8000f38 <__aeabi_dadd+0x1b0>
 8000f2e:	2040      	movs	r0, #64	; 0x40
 8000f30:	4661      	mov	r1, ip
 8000f32:	1a82      	subs	r2, r0, r2
 8000f34:	4091      	lsls	r1, r2
 8000f36:	430f      	orrs	r7, r1
 8000f38:	0039      	movs	r1, r7
 8000f3a:	1e4f      	subs	r7, r1, #1
 8000f3c:	41b9      	sbcs	r1, r7
 8000f3e:	430d      	orrs	r5, r1
 8000f40:	e11b      	b.n	800117a <__aeabi_dadd+0x3f2>
 8000f42:	0029      	movs	r1, r5
 8000f44:	4339      	orrs	r1, r7
 8000f46:	d100      	bne.n	8000f4a <__aeabi_dadd+0x1c2>
 8000f48:	e0b5      	b.n	80010b6 <__aeabi_dadd+0x32e>
 8000f4a:	1e51      	subs	r1, r2, #1
 8000f4c:	2a01      	cmp	r2, #1
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_dadd+0x1ca>
 8000f50:	e1ab      	b.n	80012aa <__aeabi_dadd+0x522>
 8000f52:	486a      	ldr	r0, [pc, #424]	; (80010fc <__aeabi_dadd+0x374>)
 8000f54:	4282      	cmp	r2, r0
 8000f56:	d100      	bne.n	8000f5a <__aeabi_dadd+0x1d2>
 8000f58:	e1b2      	b.n	80012c0 <__aeabi_dadd+0x538>
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	e743      	b.n	8000de6 <__aeabi_dadd+0x5e>
 8000f5e:	4969      	ldr	r1, [pc, #420]	; (8001104 <__aeabi_dadd+0x37c>)
 8000f60:	1c75      	adds	r5, r6, #1
 8000f62:	420d      	tst	r5, r1
 8000f64:	d000      	beq.n	8000f68 <__aeabi_dadd+0x1e0>
 8000f66:	e0cf      	b.n	8001108 <__aeabi_dadd+0x380>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d000      	beq.n	8000f6e <__aeabi_dadd+0x1e6>
 8000f6c:	e193      	b.n	8001296 <__aeabi_dadd+0x50e>
 8000f6e:	4649      	mov	r1, r9
 8000f70:	4319      	orrs	r1, r3
 8000f72:	d100      	bne.n	8000f76 <__aeabi_dadd+0x1ee>
 8000f74:	e1d1      	b.n	800131a <__aeabi_dadd+0x592>
 8000f76:	4661      	mov	r1, ip
 8000f78:	4339      	orrs	r1, r7
 8000f7a:	d000      	beq.n	8000f7e <__aeabi_dadd+0x1f6>
 8000f7c:	e1e3      	b.n	8001346 <__aeabi_dadd+0x5be>
 8000f7e:	4649      	mov	r1, r9
 8000f80:	0758      	lsls	r0, r3, #29
 8000f82:	08c9      	lsrs	r1, r1, #3
 8000f84:	4301      	orrs	r1, r0
 8000f86:	08db      	lsrs	r3, r3, #3
 8000f88:	e026      	b.n	8000fd8 <__aeabi_dadd+0x250>
 8000f8a:	0029      	movs	r1, r5
 8000f8c:	4339      	orrs	r1, r7
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_dadd+0x20a>
 8000f90:	e091      	b.n	80010b6 <__aeabi_dadd+0x32e>
 8000f92:	1e51      	subs	r1, r2, #1
 8000f94:	2a01      	cmp	r2, #1
 8000f96:	d005      	beq.n	8000fa4 <__aeabi_dadd+0x21c>
 8000f98:	4858      	ldr	r0, [pc, #352]	; (80010fc <__aeabi_dadd+0x374>)
 8000f9a:	4282      	cmp	r2, r0
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dadd+0x218>
 8000f9e:	e18f      	b.n	80012c0 <__aeabi_dadd+0x538>
 8000fa0:	000a      	movs	r2, r1
 8000fa2:	e7b8      	b.n	8000f16 <__aeabi_dadd+0x18e>
 8000fa4:	003d      	movs	r5, r7
 8000fa6:	444d      	add	r5, r9
 8000fa8:	454d      	cmp	r5, r9
 8000faa:	4189      	sbcs	r1, r1
 8000fac:	4463      	add	r3, ip
 8000fae:	4698      	mov	r8, r3
 8000fb0:	4249      	negs	r1, r1
 8000fb2:	4488      	add	r8, r1
 8000fb4:	4643      	mov	r3, r8
 8000fb6:	2602      	movs	r6, #2
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	d500      	bpl.n	8000fbe <__aeabi_dadd+0x236>
 8000fbc:	e0eb      	b.n	8001196 <__aeabi_dadd+0x40e>
 8000fbe:	3e01      	subs	r6, #1
 8000fc0:	076b      	lsls	r3, r5, #29
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_dadd+0x23e>
 8000fc4:	e75c      	b.n	8000e80 <__aeabi_dadd+0xf8>
 8000fc6:	4643      	mov	r3, r8
 8000fc8:	08e9      	lsrs	r1, r5, #3
 8000fca:	075a      	lsls	r2, r3, #29
 8000fcc:	4311      	orrs	r1, r2
 8000fce:	0032      	movs	r2, r6
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	484a      	ldr	r0, [pc, #296]	; (80010fc <__aeabi_dadd+0x374>)
 8000fd4:	4282      	cmp	r2, r0
 8000fd6:	d021      	beq.n	800101c <__aeabi_dadd+0x294>
 8000fd8:	031b      	lsls	r3, r3, #12
 8000fda:	0552      	lsls	r2, r2, #21
 8000fdc:	0b1b      	lsrs	r3, r3, #12
 8000fde:	0d52      	lsrs	r2, r2, #21
 8000fe0:	e76c      	b.n	8000ebc <__aeabi_dadd+0x134>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	e769      	b.n	8000ebc <__aeabi_dadd+0x134>
 8000fe8:	002a      	movs	r2, r5
 8000fea:	433a      	orrs	r2, r7
 8000fec:	d069      	beq.n	80010c2 <__aeabi_dadd+0x33a>
 8000fee:	464a      	mov	r2, r9
 8000ff0:	0758      	lsls	r0, r3, #29
 8000ff2:	08d1      	lsrs	r1, r2, #3
 8000ff4:	08da      	lsrs	r2, r3, #3
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	031b      	lsls	r3, r3, #12
 8000ffa:	4308      	orrs	r0, r1
 8000ffc:	421a      	tst	r2, r3
 8000ffe:	d007      	beq.n	8001010 <__aeabi_dadd+0x288>
 8001000:	0029      	movs	r1, r5
 8001002:	08ed      	lsrs	r5, r5, #3
 8001004:	421d      	tst	r5, r3
 8001006:	d103      	bne.n	8001010 <__aeabi_dadd+0x288>
 8001008:	002a      	movs	r2, r5
 800100a:	08ff      	lsrs	r7, r7, #3
 800100c:	0748      	lsls	r0, r1, #29
 800100e:	4338      	orrs	r0, r7
 8001010:	0f43      	lsrs	r3, r0, #29
 8001012:	00c1      	lsls	r1, r0, #3
 8001014:	075b      	lsls	r3, r3, #29
 8001016:	08c9      	lsrs	r1, r1, #3
 8001018:	4319      	orrs	r1, r3
 800101a:	0013      	movs	r3, r2
 800101c:	000a      	movs	r2, r1
 800101e:	431a      	orrs	r2, r3
 8001020:	d100      	bne.n	8001024 <__aeabi_dadd+0x29c>
 8001022:	e213      	b.n	800144c <__aeabi_dadd+0x6c4>
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	0312      	lsls	r2, r2, #12
 8001028:	4313      	orrs	r3, r2
 800102a:	031b      	lsls	r3, r3, #12
 800102c:	4a33      	ldr	r2, [pc, #204]	; (80010fc <__aeabi_dadd+0x374>)
 800102e:	0b1b      	lsrs	r3, r3, #12
 8001030:	e744      	b.n	8000ebc <__aeabi_dadd+0x134>
 8001032:	2a00      	cmp	r2, #0
 8001034:	d04b      	beq.n	80010ce <__aeabi_dadd+0x346>
 8001036:	1b8a      	subs	r2, r1, r6
 8001038:	2e00      	cmp	r6, #0
 800103a:	d100      	bne.n	800103e <__aeabi_dadd+0x2b6>
 800103c:	e0e7      	b.n	800120e <__aeabi_dadd+0x486>
 800103e:	482f      	ldr	r0, [pc, #188]	; (80010fc <__aeabi_dadd+0x374>)
 8001040:	4281      	cmp	r1, r0
 8001042:	d100      	bne.n	8001046 <__aeabi_dadd+0x2be>
 8001044:	e195      	b.n	8001372 <__aeabi_dadd+0x5ea>
 8001046:	2080      	movs	r0, #128	; 0x80
 8001048:	0400      	lsls	r0, r0, #16
 800104a:	4303      	orrs	r3, r0
 800104c:	2a38      	cmp	r2, #56	; 0x38
 800104e:	dd00      	ble.n	8001052 <__aeabi_dadd+0x2ca>
 8001050:	e143      	b.n	80012da <__aeabi_dadd+0x552>
 8001052:	2a1f      	cmp	r2, #31
 8001054:	dd00      	ble.n	8001058 <__aeabi_dadd+0x2d0>
 8001056:	e1db      	b.n	8001410 <__aeabi_dadd+0x688>
 8001058:	2020      	movs	r0, #32
 800105a:	001d      	movs	r5, r3
 800105c:	464e      	mov	r6, r9
 800105e:	1a80      	subs	r0, r0, r2
 8001060:	4085      	lsls	r5, r0
 8001062:	40d6      	lsrs	r6, r2
 8001064:	4335      	orrs	r5, r6
 8001066:	464e      	mov	r6, r9
 8001068:	4086      	lsls	r6, r0
 800106a:	0030      	movs	r0, r6
 800106c:	40d3      	lsrs	r3, r2
 800106e:	1e46      	subs	r6, r0, #1
 8001070:	41b0      	sbcs	r0, r6
 8001072:	449c      	add	ip, r3
 8001074:	4305      	orrs	r5, r0
 8001076:	19ed      	adds	r5, r5, r7
 8001078:	42bd      	cmp	r5, r7
 800107a:	419b      	sbcs	r3, r3
 800107c:	425b      	negs	r3, r3
 800107e:	4463      	add	r3, ip
 8001080:	4698      	mov	r8, r3
 8001082:	000e      	movs	r6, r1
 8001084:	e07f      	b.n	8001186 <__aeabi_dadd+0x3fe>
 8001086:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <__aeabi_dadd+0x378>)
 8001088:	1a76      	subs	r6, r6, r1
 800108a:	4013      	ands	r3, r2
 800108c:	4698      	mov	r8, r3
 800108e:	e6f5      	b.n	8000e7c <__aeabi_dadd+0xf4>
 8001090:	0028      	movs	r0, r5
 8001092:	f001 fd61 	bl	8002b58 <__clzsi2>
 8001096:	0001      	movs	r1, r0
 8001098:	3118      	adds	r1, #24
 800109a:	291f      	cmp	r1, #31
 800109c:	dc00      	bgt.n	80010a0 <__aeabi_dadd+0x318>
 800109e:	e6cf      	b.n	8000e40 <__aeabi_dadd+0xb8>
 80010a0:	002b      	movs	r3, r5
 80010a2:	3808      	subs	r0, #8
 80010a4:	4083      	lsls	r3, r0
 80010a6:	2500      	movs	r5, #0
 80010a8:	e6d2      	b.n	8000e50 <__aeabi_dadd+0xc8>
 80010aa:	4662      	mov	r2, ip
 80010ac:	433a      	orrs	r2, r7
 80010ae:	0011      	movs	r1, r2
 80010b0:	1e4f      	subs	r7, r1, #1
 80010b2:	41b9      	sbcs	r1, r7
 80010b4:	e6ac      	b.n	8000e10 <__aeabi_dadd+0x88>
 80010b6:	4649      	mov	r1, r9
 80010b8:	0758      	lsls	r0, r3, #29
 80010ba:	08c9      	lsrs	r1, r1, #3
 80010bc:	4301      	orrs	r1, r0
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	e787      	b.n	8000fd2 <__aeabi_dadd+0x24a>
 80010c2:	4649      	mov	r1, r9
 80010c4:	075a      	lsls	r2, r3, #29
 80010c6:	08c9      	lsrs	r1, r1, #3
 80010c8:	4311      	orrs	r1, r2
 80010ca:	08db      	lsrs	r3, r3, #3
 80010cc:	e7a6      	b.n	800101c <__aeabi_dadd+0x294>
 80010ce:	490d      	ldr	r1, [pc, #52]	; (8001104 <__aeabi_dadd+0x37c>)
 80010d0:	1c70      	adds	r0, r6, #1
 80010d2:	4208      	tst	r0, r1
 80010d4:	d000      	beq.n	80010d8 <__aeabi_dadd+0x350>
 80010d6:	e0bb      	b.n	8001250 <__aeabi_dadd+0x4c8>
 80010d8:	2e00      	cmp	r6, #0
 80010da:	d000      	beq.n	80010de <__aeabi_dadd+0x356>
 80010dc:	e114      	b.n	8001308 <__aeabi_dadd+0x580>
 80010de:	4649      	mov	r1, r9
 80010e0:	4319      	orrs	r1, r3
 80010e2:	d100      	bne.n	80010e6 <__aeabi_dadd+0x35e>
 80010e4:	e175      	b.n	80013d2 <__aeabi_dadd+0x64a>
 80010e6:	0029      	movs	r1, r5
 80010e8:	4339      	orrs	r1, r7
 80010ea:	d000      	beq.n	80010ee <__aeabi_dadd+0x366>
 80010ec:	e17e      	b.n	80013ec <__aeabi_dadd+0x664>
 80010ee:	4649      	mov	r1, r9
 80010f0:	0758      	lsls	r0, r3, #29
 80010f2:	08c9      	lsrs	r1, r1, #3
 80010f4:	4301      	orrs	r1, r0
 80010f6:	08db      	lsrs	r3, r3, #3
 80010f8:	e76e      	b.n	8000fd8 <__aeabi_dadd+0x250>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	000007ff 	.word	0x000007ff
 8001100:	ff7fffff 	.word	0xff7fffff
 8001104:	000007fe 	.word	0x000007fe
 8001108:	4649      	mov	r1, r9
 800110a:	1bcd      	subs	r5, r1, r7
 800110c:	4661      	mov	r1, ip
 800110e:	1a58      	subs	r0, r3, r1
 8001110:	45a9      	cmp	r9, r5
 8001112:	4189      	sbcs	r1, r1
 8001114:	4249      	negs	r1, r1
 8001116:	4688      	mov	r8, r1
 8001118:	0001      	movs	r1, r0
 800111a:	4640      	mov	r0, r8
 800111c:	1a09      	subs	r1, r1, r0
 800111e:	4688      	mov	r8, r1
 8001120:	0209      	lsls	r1, r1, #8
 8001122:	d500      	bpl.n	8001126 <__aeabi_dadd+0x39e>
 8001124:	e0a6      	b.n	8001274 <__aeabi_dadd+0x4ec>
 8001126:	4641      	mov	r1, r8
 8001128:	4329      	orrs	r1, r5
 800112a:	d000      	beq.n	800112e <__aeabi_dadd+0x3a6>
 800112c:	e67f      	b.n	8000e2e <__aeabi_dadd+0xa6>
 800112e:	2300      	movs	r3, #0
 8001130:	2400      	movs	r4, #0
 8001132:	e751      	b.n	8000fd8 <__aeabi_dadd+0x250>
 8001134:	4cc7      	ldr	r4, [pc, #796]	; (8001454 <__aeabi_dadd+0x6cc>)
 8001136:	42a1      	cmp	r1, r4
 8001138:	d100      	bne.n	800113c <__aeabi_dadd+0x3b4>
 800113a:	e0c7      	b.n	80012cc <__aeabi_dadd+0x544>
 800113c:	2480      	movs	r4, #128	; 0x80
 800113e:	0424      	lsls	r4, r4, #16
 8001140:	4323      	orrs	r3, r4
 8001142:	2a38      	cmp	r2, #56	; 0x38
 8001144:	dc54      	bgt.n	80011f0 <__aeabi_dadd+0x468>
 8001146:	2a1f      	cmp	r2, #31
 8001148:	dd00      	ble.n	800114c <__aeabi_dadd+0x3c4>
 800114a:	e0cc      	b.n	80012e6 <__aeabi_dadd+0x55e>
 800114c:	2420      	movs	r4, #32
 800114e:	4648      	mov	r0, r9
 8001150:	1aa4      	subs	r4, r4, r2
 8001152:	001d      	movs	r5, r3
 8001154:	464e      	mov	r6, r9
 8001156:	40a0      	lsls	r0, r4
 8001158:	40d6      	lsrs	r6, r2
 800115a:	40a5      	lsls	r5, r4
 800115c:	0004      	movs	r4, r0
 800115e:	40d3      	lsrs	r3, r2
 8001160:	4662      	mov	r2, ip
 8001162:	4335      	orrs	r5, r6
 8001164:	1e66      	subs	r6, r4, #1
 8001166:	41b4      	sbcs	r4, r6
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	469c      	mov	ip, r3
 800116c:	4325      	orrs	r5, r4
 800116e:	e044      	b.n	80011fa <__aeabi_dadd+0x472>
 8001170:	4662      	mov	r2, ip
 8001172:	433a      	orrs	r2, r7
 8001174:	0015      	movs	r5, r2
 8001176:	1e6f      	subs	r7, r5, #1
 8001178:	41bd      	sbcs	r5, r7
 800117a:	444d      	add	r5, r9
 800117c:	454d      	cmp	r5, r9
 800117e:	4189      	sbcs	r1, r1
 8001180:	4249      	negs	r1, r1
 8001182:	4688      	mov	r8, r1
 8001184:	4498      	add	r8, r3
 8001186:	4643      	mov	r3, r8
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	d400      	bmi.n	800118e <__aeabi_dadd+0x406>
 800118c:	e718      	b.n	8000fc0 <__aeabi_dadd+0x238>
 800118e:	4bb1      	ldr	r3, [pc, #708]	; (8001454 <__aeabi_dadd+0x6cc>)
 8001190:	3601      	adds	r6, #1
 8001192:	429e      	cmp	r6, r3
 8001194:	d049      	beq.n	800122a <__aeabi_dadd+0x4a2>
 8001196:	4642      	mov	r2, r8
 8001198:	4baf      	ldr	r3, [pc, #700]	; (8001458 <__aeabi_dadd+0x6d0>)
 800119a:	2101      	movs	r1, #1
 800119c:	401a      	ands	r2, r3
 800119e:	0013      	movs	r3, r2
 80011a0:	086a      	lsrs	r2, r5, #1
 80011a2:	400d      	ands	r5, r1
 80011a4:	4315      	orrs	r5, r2
 80011a6:	07d9      	lsls	r1, r3, #31
 80011a8:	085b      	lsrs	r3, r3, #1
 80011aa:	4698      	mov	r8, r3
 80011ac:	430d      	orrs	r5, r1
 80011ae:	e665      	b.n	8000e7c <__aeabi_dadd+0xf4>
 80011b0:	0018      	movs	r0, r3
 80011b2:	3e1f      	subs	r6, #31
 80011b4:	40f0      	lsrs	r0, r6
 80011b6:	2a20      	cmp	r2, #32
 80011b8:	d003      	beq.n	80011c2 <__aeabi_dadd+0x43a>
 80011ba:	2140      	movs	r1, #64	; 0x40
 80011bc:	1a8a      	subs	r2, r1, r2
 80011be:	4093      	lsls	r3, r2
 80011c0:	431d      	orrs	r5, r3
 80011c2:	1e69      	subs	r1, r5, #1
 80011c4:	418d      	sbcs	r5, r1
 80011c6:	2300      	movs	r3, #0
 80011c8:	2600      	movs	r6, #0
 80011ca:	4698      	mov	r8, r3
 80011cc:	4305      	orrs	r5, r0
 80011ce:	e6f7      	b.n	8000fc0 <__aeabi_dadd+0x238>
 80011d0:	0011      	movs	r1, r2
 80011d2:	4665      	mov	r5, ip
 80011d4:	3920      	subs	r1, #32
 80011d6:	40cd      	lsrs	r5, r1
 80011d8:	2a20      	cmp	r2, #32
 80011da:	d004      	beq.n	80011e6 <__aeabi_dadd+0x45e>
 80011dc:	2040      	movs	r0, #64	; 0x40
 80011de:	4661      	mov	r1, ip
 80011e0:	1a82      	subs	r2, r0, r2
 80011e2:	4091      	lsls	r1, r2
 80011e4:	430f      	orrs	r7, r1
 80011e6:	0039      	movs	r1, r7
 80011e8:	1e4f      	subs	r7, r1, #1
 80011ea:	41b9      	sbcs	r1, r7
 80011ec:	4329      	orrs	r1, r5
 80011ee:	e60f      	b.n	8000e10 <__aeabi_dadd+0x88>
 80011f0:	464a      	mov	r2, r9
 80011f2:	4313      	orrs	r3, r2
 80011f4:	001d      	movs	r5, r3
 80011f6:	1e6b      	subs	r3, r5, #1
 80011f8:	419d      	sbcs	r5, r3
 80011fa:	1b7d      	subs	r5, r7, r5
 80011fc:	42af      	cmp	r7, r5
 80011fe:	419b      	sbcs	r3, r3
 8001200:	4662      	mov	r2, ip
 8001202:	425b      	negs	r3, r3
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	4698      	mov	r8, r3
 8001208:	4654      	mov	r4, sl
 800120a:	000e      	movs	r6, r1
 800120c:	e607      	b.n	8000e1e <__aeabi_dadd+0x96>
 800120e:	4648      	mov	r0, r9
 8001210:	4318      	orrs	r0, r3
 8001212:	d100      	bne.n	8001216 <__aeabi_dadd+0x48e>
 8001214:	e0b3      	b.n	800137e <__aeabi_dadd+0x5f6>
 8001216:	1e50      	subs	r0, r2, #1
 8001218:	2a01      	cmp	r2, #1
 800121a:	d100      	bne.n	800121e <__aeabi_dadd+0x496>
 800121c:	e10d      	b.n	800143a <__aeabi_dadd+0x6b2>
 800121e:	4d8d      	ldr	r5, [pc, #564]	; (8001454 <__aeabi_dadd+0x6cc>)
 8001220:	42aa      	cmp	r2, r5
 8001222:	d100      	bne.n	8001226 <__aeabi_dadd+0x49e>
 8001224:	e0a5      	b.n	8001372 <__aeabi_dadd+0x5ea>
 8001226:	0002      	movs	r2, r0
 8001228:	e710      	b.n	800104c <__aeabi_dadd+0x2c4>
 800122a:	0032      	movs	r2, r6
 800122c:	2300      	movs	r3, #0
 800122e:	2100      	movs	r1, #0
 8001230:	e644      	b.n	8000ebc <__aeabi_dadd+0x134>
 8001232:	2120      	movs	r1, #32
 8001234:	0038      	movs	r0, r7
 8001236:	1a89      	subs	r1, r1, r2
 8001238:	4665      	mov	r5, ip
 800123a:	408f      	lsls	r7, r1
 800123c:	408d      	lsls	r5, r1
 800123e:	40d0      	lsrs	r0, r2
 8001240:	1e79      	subs	r1, r7, #1
 8001242:	418f      	sbcs	r7, r1
 8001244:	4305      	orrs	r5, r0
 8001246:	433d      	orrs	r5, r7
 8001248:	4667      	mov	r7, ip
 800124a:	40d7      	lsrs	r7, r2
 800124c:	19db      	adds	r3, r3, r7
 800124e:	e794      	b.n	800117a <__aeabi_dadd+0x3f2>
 8001250:	4a80      	ldr	r2, [pc, #512]	; (8001454 <__aeabi_dadd+0x6cc>)
 8001252:	4290      	cmp	r0, r2
 8001254:	d100      	bne.n	8001258 <__aeabi_dadd+0x4d0>
 8001256:	e0ec      	b.n	8001432 <__aeabi_dadd+0x6aa>
 8001258:	0039      	movs	r1, r7
 800125a:	4449      	add	r1, r9
 800125c:	4549      	cmp	r1, r9
 800125e:	4192      	sbcs	r2, r2
 8001260:	4463      	add	r3, ip
 8001262:	4252      	negs	r2, r2
 8001264:	189b      	adds	r3, r3, r2
 8001266:	07dd      	lsls	r5, r3, #31
 8001268:	0849      	lsrs	r1, r1, #1
 800126a:	085b      	lsrs	r3, r3, #1
 800126c:	4698      	mov	r8, r3
 800126e:	0006      	movs	r6, r0
 8001270:	430d      	orrs	r5, r1
 8001272:	e6a5      	b.n	8000fc0 <__aeabi_dadd+0x238>
 8001274:	464a      	mov	r2, r9
 8001276:	1abd      	subs	r5, r7, r2
 8001278:	42af      	cmp	r7, r5
 800127a:	4189      	sbcs	r1, r1
 800127c:	4662      	mov	r2, ip
 800127e:	4249      	negs	r1, r1
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	1a5b      	subs	r3, r3, r1
 8001284:	4698      	mov	r8, r3
 8001286:	4654      	mov	r4, sl
 8001288:	e5d1      	b.n	8000e2e <__aeabi_dadd+0xa6>
 800128a:	076c      	lsls	r4, r5, #29
 800128c:	08f9      	lsrs	r1, r7, #3
 800128e:	4321      	orrs	r1, r4
 8001290:	08eb      	lsrs	r3, r5, #3
 8001292:	0004      	movs	r4, r0
 8001294:	e69d      	b.n	8000fd2 <__aeabi_dadd+0x24a>
 8001296:	464a      	mov	r2, r9
 8001298:	431a      	orrs	r2, r3
 800129a:	d175      	bne.n	8001388 <__aeabi_dadd+0x600>
 800129c:	4661      	mov	r1, ip
 800129e:	4339      	orrs	r1, r7
 80012a0:	d114      	bne.n	80012cc <__aeabi_dadd+0x544>
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	2400      	movs	r4, #0
 80012a6:	031b      	lsls	r3, r3, #12
 80012a8:	e6bc      	b.n	8001024 <__aeabi_dadd+0x29c>
 80012aa:	464a      	mov	r2, r9
 80012ac:	1bd5      	subs	r5, r2, r7
 80012ae:	45a9      	cmp	r9, r5
 80012b0:	4189      	sbcs	r1, r1
 80012b2:	4662      	mov	r2, ip
 80012b4:	4249      	negs	r1, r1
 80012b6:	1a9b      	subs	r3, r3, r2
 80012b8:	1a5b      	subs	r3, r3, r1
 80012ba:	4698      	mov	r8, r3
 80012bc:	2601      	movs	r6, #1
 80012be:	e5ae      	b.n	8000e1e <__aeabi_dadd+0x96>
 80012c0:	464a      	mov	r2, r9
 80012c2:	08d1      	lsrs	r1, r2, #3
 80012c4:	075a      	lsls	r2, r3, #29
 80012c6:	4311      	orrs	r1, r2
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	e6a7      	b.n	800101c <__aeabi_dadd+0x294>
 80012cc:	4663      	mov	r3, ip
 80012ce:	08f9      	lsrs	r1, r7, #3
 80012d0:	075a      	lsls	r2, r3, #29
 80012d2:	4654      	mov	r4, sl
 80012d4:	4311      	orrs	r1, r2
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	e6a0      	b.n	800101c <__aeabi_dadd+0x294>
 80012da:	464a      	mov	r2, r9
 80012dc:	4313      	orrs	r3, r2
 80012de:	001d      	movs	r5, r3
 80012e0:	1e6b      	subs	r3, r5, #1
 80012e2:	419d      	sbcs	r5, r3
 80012e4:	e6c7      	b.n	8001076 <__aeabi_dadd+0x2ee>
 80012e6:	0014      	movs	r4, r2
 80012e8:	001e      	movs	r6, r3
 80012ea:	3c20      	subs	r4, #32
 80012ec:	40e6      	lsrs	r6, r4
 80012ee:	2a20      	cmp	r2, #32
 80012f0:	d005      	beq.n	80012fe <__aeabi_dadd+0x576>
 80012f2:	2440      	movs	r4, #64	; 0x40
 80012f4:	1aa2      	subs	r2, r4, r2
 80012f6:	4093      	lsls	r3, r2
 80012f8:	464a      	mov	r2, r9
 80012fa:	431a      	orrs	r2, r3
 80012fc:	4691      	mov	r9, r2
 80012fe:	464d      	mov	r5, r9
 8001300:	1e6b      	subs	r3, r5, #1
 8001302:	419d      	sbcs	r5, r3
 8001304:	4335      	orrs	r5, r6
 8001306:	e778      	b.n	80011fa <__aeabi_dadd+0x472>
 8001308:	464a      	mov	r2, r9
 800130a:	431a      	orrs	r2, r3
 800130c:	d000      	beq.n	8001310 <__aeabi_dadd+0x588>
 800130e:	e66b      	b.n	8000fe8 <__aeabi_dadd+0x260>
 8001310:	076b      	lsls	r3, r5, #29
 8001312:	08f9      	lsrs	r1, r7, #3
 8001314:	4319      	orrs	r1, r3
 8001316:	08eb      	lsrs	r3, r5, #3
 8001318:	e680      	b.n	800101c <__aeabi_dadd+0x294>
 800131a:	4661      	mov	r1, ip
 800131c:	4339      	orrs	r1, r7
 800131e:	d054      	beq.n	80013ca <__aeabi_dadd+0x642>
 8001320:	4663      	mov	r3, ip
 8001322:	08f9      	lsrs	r1, r7, #3
 8001324:	075c      	lsls	r4, r3, #29
 8001326:	4321      	orrs	r1, r4
 8001328:	08db      	lsrs	r3, r3, #3
 800132a:	0004      	movs	r4, r0
 800132c:	e654      	b.n	8000fd8 <__aeabi_dadd+0x250>
 800132e:	464a      	mov	r2, r9
 8001330:	1abd      	subs	r5, r7, r2
 8001332:	42af      	cmp	r7, r5
 8001334:	4189      	sbcs	r1, r1
 8001336:	4662      	mov	r2, ip
 8001338:	4249      	negs	r1, r1
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	1a5b      	subs	r3, r3, r1
 800133e:	4698      	mov	r8, r3
 8001340:	0004      	movs	r4, r0
 8001342:	2601      	movs	r6, #1
 8001344:	e56b      	b.n	8000e1e <__aeabi_dadd+0x96>
 8001346:	464a      	mov	r2, r9
 8001348:	1bd5      	subs	r5, r2, r7
 800134a:	45a9      	cmp	r9, r5
 800134c:	4189      	sbcs	r1, r1
 800134e:	4662      	mov	r2, ip
 8001350:	4249      	negs	r1, r1
 8001352:	1a9a      	subs	r2, r3, r2
 8001354:	1a52      	subs	r2, r2, r1
 8001356:	4690      	mov	r8, r2
 8001358:	0212      	lsls	r2, r2, #8
 800135a:	d532      	bpl.n	80013c2 <__aeabi_dadd+0x63a>
 800135c:	464a      	mov	r2, r9
 800135e:	1abd      	subs	r5, r7, r2
 8001360:	42af      	cmp	r7, r5
 8001362:	4189      	sbcs	r1, r1
 8001364:	4662      	mov	r2, ip
 8001366:	4249      	negs	r1, r1
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	1a5b      	subs	r3, r3, r1
 800136c:	4698      	mov	r8, r3
 800136e:	0004      	movs	r4, r0
 8001370:	e584      	b.n	8000e7c <__aeabi_dadd+0xf4>
 8001372:	4663      	mov	r3, ip
 8001374:	08f9      	lsrs	r1, r7, #3
 8001376:	075a      	lsls	r2, r3, #29
 8001378:	4311      	orrs	r1, r2
 800137a:	08db      	lsrs	r3, r3, #3
 800137c:	e64e      	b.n	800101c <__aeabi_dadd+0x294>
 800137e:	08f9      	lsrs	r1, r7, #3
 8001380:	0768      	lsls	r0, r5, #29
 8001382:	4301      	orrs	r1, r0
 8001384:	08eb      	lsrs	r3, r5, #3
 8001386:	e624      	b.n	8000fd2 <__aeabi_dadd+0x24a>
 8001388:	4662      	mov	r2, ip
 800138a:	433a      	orrs	r2, r7
 800138c:	d100      	bne.n	8001390 <__aeabi_dadd+0x608>
 800138e:	e698      	b.n	80010c2 <__aeabi_dadd+0x33a>
 8001390:	464a      	mov	r2, r9
 8001392:	08d1      	lsrs	r1, r2, #3
 8001394:	075a      	lsls	r2, r3, #29
 8001396:	4311      	orrs	r1, r2
 8001398:	08da      	lsrs	r2, r3, #3
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	031b      	lsls	r3, r3, #12
 800139e:	421a      	tst	r2, r3
 80013a0:	d008      	beq.n	80013b4 <__aeabi_dadd+0x62c>
 80013a2:	4660      	mov	r0, ip
 80013a4:	08c5      	lsrs	r5, r0, #3
 80013a6:	421d      	tst	r5, r3
 80013a8:	d104      	bne.n	80013b4 <__aeabi_dadd+0x62c>
 80013aa:	4654      	mov	r4, sl
 80013ac:	002a      	movs	r2, r5
 80013ae:	08f9      	lsrs	r1, r7, #3
 80013b0:	0743      	lsls	r3, r0, #29
 80013b2:	4319      	orrs	r1, r3
 80013b4:	0f4b      	lsrs	r3, r1, #29
 80013b6:	00c9      	lsls	r1, r1, #3
 80013b8:	075b      	lsls	r3, r3, #29
 80013ba:	08c9      	lsrs	r1, r1, #3
 80013bc:	4319      	orrs	r1, r3
 80013be:	0013      	movs	r3, r2
 80013c0:	e62c      	b.n	800101c <__aeabi_dadd+0x294>
 80013c2:	4641      	mov	r1, r8
 80013c4:	4329      	orrs	r1, r5
 80013c6:	d000      	beq.n	80013ca <__aeabi_dadd+0x642>
 80013c8:	e5fa      	b.n	8000fc0 <__aeabi_dadd+0x238>
 80013ca:	2300      	movs	r3, #0
 80013cc:	000a      	movs	r2, r1
 80013ce:	2400      	movs	r4, #0
 80013d0:	e602      	b.n	8000fd8 <__aeabi_dadd+0x250>
 80013d2:	076b      	lsls	r3, r5, #29
 80013d4:	08f9      	lsrs	r1, r7, #3
 80013d6:	4319      	orrs	r1, r3
 80013d8:	08eb      	lsrs	r3, r5, #3
 80013da:	e5fd      	b.n	8000fd8 <__aeabi_dadd+0x250>
 80013dc:	4663      	mov	r3, ip
 80013de:	08f9      	lsrs	r1, r7, #3
 80013e0:	075b      	lsls	r3, r3, #29
 80013e2:	4319      	orrs	r1, r3
 80013e4:	4663      	mov	r3, ip
 80013e6:	0004      	movs	r4, r0
 80013e8:	08db      	lsrs	r3, r3, #3
 80013ea:	e617      	b.n	800101c <__aeabi_dadd+0x294>
 80013ec:	003d      	movs	r5, r7
 80013ee:	444d      	add	r5, r9
 80013f0:	4463      	add	r3, ip
 80013f2:	454d      	cmp	r5, r9
 80013f4:	4189      	sbcs	r1, r1
 80013f6:	4698      	mov	r8, r3
 80013f8:	4249      	negs	r1, r1
 80013fa:	4488      	add	r8, r1
 80013fc:	4643      	mov	r3, r8
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	d400      	bmi.n	8001404 <__aeabi_dadd+0x67c>
 8001402:	e5dd      	b.n	8000fc0 <__aeabi_dadd+0x238>
 8001404:	4642      	mov	r2, r8
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <__aeabi_dadd+0x6d0>)
 8001408:	2601      	movs	r6, #1
 800140a:	401a      	ands	r2, r3
 800140c:	4690      	mov	r8, r2
 800140e:	e5d7      	b.n	8000fc0 <__aeabi_dadd+0x238>
 8001410:	0010      	movs	r0, r2
 8001412:	001e      	movs	r6, r3
 8001414:	3820      	subs	r0, #32
 8001416:	40c6      	lsrs	r6, r0
 8001418:	2a20      	cmp	r2, #32
 800141a:	d005      	beq.n	8001428 <__aeabi_dadd+0x6a0>
 800141c:	2040      	movs	r0, #64	; 0x40
 800141e:	1a82      	subs	r2, r0, r2
 8001420:	4093      	lsls	r3, r2
 8001422:	464a      	mov	r2, r9
 8001424:	431a      	orrs	r2, r3
 8001426:	4691      	mov	r9, r2
 8001428:	464d      	mov	r5, r9
 800142a:	1e6b      	subs	r3, r5, #1
 800142c:	419d      	sbcs	r5, r3
 800142e:	4335      	orrs	r5, r6
 8001430:	e621      	b.n	8001076 <__aeabi_dadd+0x2ee>
 8001432:	0002      	movs	r2, r0
 8001434:	2300      	movs	r3, #0
 8001436:	2100      	movs	r1, #0
 8001438:	e540      	b.n	8000ebc <__aeabi_dadd+0x134>
 800143a:	464a      	mov	r2, r9
 800143c:	19d5      	adds	r5, r2, r7
 800143e:	42bd      	cmp	r5, r7
 8001440:	4189      	sbcs	r1, r1
 8001442:	4463      	add	r3, ip
 8001444:	4698      	mov	r8, r3
 8001446:	4249      	negs	r1, r1
 8001448:	4488      	add	r8, r1
 800144a:	e5b3      	b.n	8000fb4 <__aeabi_dadd+0x22c>
 800144c:	2100      	movs	r1, #0
 800144e:	4a01      	ldr	r2, [pc, #4]	; (8001454 <__aeabi_dadd+0x6cc>)
 8001450:	000b      	movs	r3, r1
 8001452:	e533      	b.n	8000ebc <__aeabi_dadd+0x134>
 8001454:	000007ff 	.word	0x000007ff
 8001458:	ff7fffff 	.word	0xff7fffff

0800145c <__aeabi_ddiv>:
 800145c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145e:	4657      	mov	r7, sl
 8001460:	464e      	mov	r6, r9
 8001462:	4645      	mov	r5, r8
 8001464:	46de      	mov	lr, fp
 8001466:	b5e0      	push	{r5, r6, r7, lr}
 8001468:	4681      	mov	r9, r0
 800146a:	0005      	movs	r5, r0
 800146c:	030c      	lsls	r4, r1, #12
 800146e:	0048      	lsls	r0, r1, #1
 8001470:	4692      	mov	sl, r2
 8001472:	001f      	movs	r7, r3
 8001474:	b085      	sub	sp, #20
 8001476:	0b24      	lsrs	r4, r4, #12
 8001478:	0d40      	lsrs	r0, r0, #21
 800147a:	0fce      	lsrs	r6, r1, #31
 800147c:	2800      	cmp	r0, #0
 800147e:	d059      	beq.n	8001534 <__aeabi_ddiv+0xd8>
 8001480:	4b87      	ldr	r3, [pc, #540]	; (80016a0 <__aeabi_ddiv+0x244>)
 8001482:	4298      	cmp	r0, r3
 8001484:	d100      	bne.n	8001488 <__aeabi_ddiv+0x2c>
 8001486:	e098      	b.n	80015ba <__aeabi_ddiv+0x15e>
 8001488:	0f6b      	lsrs	r3, r5, #29
 800148a:	00e4      	lsls	r4, r4, #3
 800148c:	431c      	orrs	r4, r3
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	041b      	lsls	r3, r3, #16
 8001492:	4323      	orrs	r3, r4
 8001494:	4698      	mov	r8, r3
 8001496:	4b83      	ldr	r3, [pc, #524]	; (80016a4 <__aeabi_ddiv+0x248>)
 8001498:	00ed      	lsls	r5, r5, #3
 800149a:	469b      	mov	fp, r3
 800149c:	2300      	movs	r3, #0
 800149e:	4699      	mov	r9, r3
 80014a0:	4483      	add	fp, r0
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	033c      	lsls	r4, r7, #12
 80014a6:	007b      	lsls	r3, r7, #1
 80014a8:	4650      	mov	r0, sl
 80014aa:	0b24      	lsrs	r4, r4, #12
 80014ac:	0d5b      	lsrs	r3, r3, #21
 80014ae:	0fff      	lsrs	r7, r7, #31
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d067      	beq.n	8001584 <__aeabi_ddiv+0x128>
 80014b4:	4a7a      	ldr	r2, [pc, #488]	; (80016a0 <__aeabi_ddiv+0x244>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d018      	beq.n	80014ec <__aeabi_ddiv+0x90>
 80014ba:	497a      	ldr	r1, [pc, #488]	; (80016a4 <__aeabi_ddiv+0x248>)
 80014bc:	0f42      	lsrs	r2, r0, #29
 80014be:	468c      	mov	ip, r1
 80014c0:	00e4      	lsls	r4, r4, #3
 80014c2:	4659      	mov	r1, fp
 80014c4:	4314      	orrs	r4, r2
 80014c6:	2280      	movs	r2, #128	; 0x80
 80014c8:	4463      	add	r3, ip
 80014ca:	0412      	lsls	r2, r2, #16
 80014cc:	1acb      	subs	r3, r1, r3
 80014ce:	4314      	orrs	r4, r2
 80014d0:	469b      	mov	fp, r3
 80014d2:	00c2      	lsls	r2, r0, #3
 80014d4:	2000      	movs	r0, #0
 80014d6:	0033      	movs	r3, r6
 80014d8:	407b      	eors	r3, r7
 80014da:	469a      	mov	sl, r3
 80014dc:	464b      	mov	r3, r9
 80014de:	2b0f      	cmp	r3, #15
 80014e0:	d900      	bls.n	80014e4 <__aeabi_ddiv+0x88>
 80014e2:	e0ef      	b.n	80016c4 <__aeabi_ddiv+0x268>
 80014e4:	4970      	ldr	r1, [pc, #448]	; (80016a8 <__aeabi_ddiv+0x24c>)
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	58cb      	ldr	r3, [r1, r3]
 80014ea:	469f      	mov	pc, r3
 80014ec:	4b6f      	ldr	r3, [pc, #444]	; (80016ac <__aeabi_ddiv+0x250>)
 80014ee:	4652      	mov	r2, sl
 80014f0:	469c      	mov	ip, r3
 80014f2:	4322      	orrs	r2, r4
 80014f4:	44e3      	add	fp, ip
 80014f6:	2a00      	cmp	r2, #0
 80014f8:	d000      	beq.n	80014fc <__aeabi_ddiv+0xa0>
 80014fa:	e095      	b.n	8001628 <__aeabi_ddiv+0x1cc>
 80014fc:	4649      	mov	r1, r9
 80014fe:	2302      	movs	r3, #2
 8001500:	4319      	orrs	r1, r3
 8001502:	4689      	mov	r9, r1
 8001504:	2400      	movs	r4, #0
 8001506:	2002      	movs	r0, #2
 8001508:	e7e5      	b.n	80014d6 <__aeabi_ddiv+0x7a>
 800150a:	2300      	movs	r3, #0
 800150c:	2400      	movs	r4, #0
 800150e:	2500      	movs	r5, #0
 8001510:	4652      	mov	r2, sl
 8001512:	051b      	lsls	r3, r3, #20
 8001514:	4323      	orrs	r3, r4
 8001516:	07d2      	lsls	r2, r2, #31
 8001518:	4313      	orrs	r3, r2
 800151a:	0028      	movs	r0, r5
 800151c:	0019      	movs	r1, r3
 800151e:	b005      	add	sp, #20
 8001520:	bcf0      	pop	{r4, r5, r6, r7}
 8001522:	46bb      	mov	fp, r7
 8001524:	46b2      	mov	sl, r6
 8001526:	46a9      	mov	r9, r5
 8001528:	46a0      	mov	r8, r4
 800152a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152c:	2400      	movs	r4, #0
 800152e:	2500      	movs	r5, #0
 8001530:	4b5b      	ldr	r3, [pc, #364]	; (80016a0 <__aeabi_ddiv+0x244>)
 8001532:	e7ed      	b.n	8001510 <__aeabi_ddiv+0xb4>
 8001534:	464b      	mov	r3, r9
 8001536:	4323      	orrs	r3, r4
 8001538:	4698      	mov	r8, r3
 800153a:	d100      	bne.n	800153e <__aeabi_ddiv+0xe2>
 800153c:	e089      	b.n	8001652 <__aeabi_ddiv+0x1f6>
 800153e:	2c00      	cmp	r4, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_ddiv+0xe8>
 8001542:	e1e0      	b.n	8001906 <__aeabi_ddiv+0x4aa>
 8001544:	0020      	movs	r0, r4
 8001546:	f001 fb07 	bl	8002b58 <__clzsi2>
 800154a:	0001      	movs	r1, r0
 800154c:	0002      	movs	r2, r0
 800154e:	390b      	subs	r1, #11
 8001550:	231d      	movs	r3, #29
 8001552:	1a5b      	subs	r3, r3, r1
 8001554:	4649      	mov	r1, r9
 8001556:	0010      	movs	r0, r2
 8001558:	40d9      	lsrs	r1, r3
 800155a:	3808      	subs	r0, #8
 800155c:	4084      	lsls	r4, r0
 800155e:	000b      	movs	r3, r1
 8001560:	464d      	mov	r5, r9
 8001562:	4323      	orrs	r3, r4
 8001564:	4698      	mov	r8, r3
 8001566:	4085      	lsls	r5, r0
 8001568:	4851      	ldr	r0, [pc, #324]	; (80016b0 <__aeabi_ddiv+0x254>)
 800156a:	033c      	lsls	r4, r7, #12
 800156c:	1a83      	subs	r3, r0, r2
 800156e:	469b      	mov	fp, r3
 8001570:	2300      	movs	r3, #0
 8001572:	4699      	mov	r9, r3
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	007b      	lsls	r3, r7, #1
 8001578:	4650      	mov	r0, sl
 800157a:	0b24      	lsrs	r4, r4, #12
 800157c:	0d5b      	lsrs	r3, r3, #21
 800157e:	0fff      	lsrs	r7, r7, #31
 8001580:	2b00      	cmp	r3, #0
 8001582:	d197      	bne.n	80014b4 <__aeabi_ddiv+0x58>
 8001584:	4652      	mov	r2, sl
 8001586:	4322      	orrs	r2, r4
 8001588:	d055      	beq.n	8001636 <__aeabi_ddiv+0x1da>
 800158a:	2c00      	cmp	r4, #0
 800158c:	d100      	bne.n	8001590 <__aeabi_ddiv+0x134>
 800158e:	e1ca      	b.n	8001926 <__aeabi_ddiv+0x4ca>
 8001590:	0020      	movs	r0, r4
 8001592:	f001 fae1 	bl	8002b58 <__clzsi2>
 8001596:	0002      	movs	r2, r0
 8001598:	3a0b      	subs	r2, #11
 800159a:	231d      	movs	r3, #29
 800159c:	0001      	movs	r1, r0
 800159e:	1a9b      	subs	r3, r3, r2
 80015a0:	4652      	mov	r2, sl
 80015a2:	3908      	subs	r1, #8
 80015a4:	40da      	lsrs	r2, r3
 80015a6:	408c      	lsls	r4, r1
 80015a8:	4314      	orrs	r4, r2
 80015aa:	4652      	mov	r2, sl
 80015ac:	408a      	lsls	r2, r1
 80015ae:	4b41      	ldr	r3, [pc, #260]	; (80016b4 <__aeabi_ddiv+0x258>)
 80015b0:	4458      	add	r0, fp
 80015b2:	469b      	mov	fp, r3
 80015b4:	4483      	add	fp, r0
 80015b6:	2000      	movs	r0, #0
 80015b8:	e78d      	b.n	80014d6 <__aeabi_ddiv+0x7a>
 80015ba:	464b      	mov	r3, r9
 80015bc:	4323      	orrs	r3, r4
 80015be:	4698      	mov	r8, r3
 80015c0:	d140      	bne.n	8001644 <__aeabi_ddiv+0x1e8>
 80015c2:	2308      	movs	r3, #8
 80015c4:	4699      	mov	r9, r3
 80015c6:	3b06      	subs	r3, #6
 80015c8:	2500      	movs	r5, #0
 80015ca:	4683      	mov	fp, r0
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	e769      	b.n	80014a4 <__aeabi_ddiv+0x48>
 80015d0:	46b2      	mov	sl, r6
 80015d2:	9b00      	ldr	r3, [sp, #0]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d0a9      	beq.n	800152c <__aeabi_ddiv+0xd0>
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d100      	bne.n	80015de <__aeabi_ddiv+0x182>
 80015dc:	e211      	b.n	8001a02 <__aeabi_ddiv+0x5a6>
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d093      	beq.n	800150a <__aeabi_ddiv+0xae>
 80015e2:	4a35      	ldr	r2, [pc, #212]	; (80016b8 <__aeabi_ddiv+0x25c>)
 80015e4:	445a      	add	r2, fp
 80015e6:	2a00      	cmp	r2, #0
 80015e8:	dc00      	bgt.n	80015ec <__aeabi_ddiv+0x190>
 80015ea:	e13c      	b.n	8001866 <__aeabi_ddiv+0x40a>
 80015ec:	076b      	lsls	r3, r5, #29
 80015ee:	d000      	beq.n	80015f2 <__aeabi_ddiv+0x196>
 80015f0:	e1a7      	b.n	8001942 <__aeabi_ddiv+0x4e6>
 80015f2:	08ed      	lsrs	r5, r5, #3
 80015f4:	4643      	mov	r3, r8
 80015f6:	01db      	lsls	r3, r3, #7
 80015f8:	d506      	bpl.n	8001608 <__aeabi_ddiv+0x1ac>
 80015fa:	4642      	mov	r2, r8
 80015fc:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <__aeabi_ddiv+0x260>)
 80015fe:	401a      	ands	r2, r3
 8001600:	4690      	mov	r8, r2
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	00d2      	lsls	r2, r2, #3
 8001606:	445a      	add	r2, fp
 8001608:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <__aeabi_ddiv+0x264>)
 800160a:	429a      	cmp	r2, r3
 800160c:	dc8e      	bgt.n	800152c <__aeabi_ddiv+0xd0>
 800160e:	4643      	mov	r3, r8
 8001610:	0552      	lsls	r2, r2, #21
 8001612:	0758      	lsls	r0, r3, #29
 8001614:	025c      	lsls	r4, r3, #9
 8001616:	4305      	orrs	r5, r0
 8001618:	0b24      	lsrs	r4, r4, #12
 800161a:	0d53      	lsrs	r3, r2, #21
 800161c:	e778      	b.n	8001510 <__aeabi_ddiv+0xb4>
 800161e:	46ba      	mov	sl, r7
 8001620:	46a0      	mov	r8, r4
 8001622:	0015      	movs	r5, r2
 8001624:	9000      	str	r0, [sp, #0]
 8001626:	e7d4      	b.n	80015d2 <__aeabi_ddiv+0x176>
 8001628:	464a      	mov	r2, r9
 800162a:	2303      	movs	r3, #3
 800162c:	431a      	orrs	r2, r3
 800162e:	4691      	mov	r9, r2
 8001630:	2003      	movs	r0, #3
 8001632:	4652      	mov	r2, sl
 8001634:	e74f      	b.n	80014d6 <__aeabi_ddiv+0x7a>
 8001636:	4649      	mov	r1, r9
 8001638:	2301      	movs	r3, #1
 800163a:	4319      	orrs	r1, r3
 800163c:	4689      	mov	r9, r1
 800163e:	2400      	movs	r4, #0
 8001640:	2001      	movs	r0, #1
 8001642:	e748      	b.n	80014d6 <__aeabi_ddiv+0x7a>
 8001644:	230c      	movs	r3, #12
 8001646:	4699      	mov	r9, r3
 8001648:	3b09      	subs	r3, #9
 800164a:	46a0      	mov	r8, r4
 800164c:	4683      	mov	fp, r0
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	e728      	b.n	80014a4 <__aeabi_ddiv+0x48>
 8001652:	2304      	movs	r3, #4
 8001654:	4699      	mov	r9, r3
 8001656:	2300      	movs	r3, #0
 8001658:	469b      	mov	fp, r3
 800165a:	3301      	adds	r3, #1
 800165c:	2500      	movs	r5, #0
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	e720      	b.n	80014a4 <__aeabi_ddiv+0x48>
 8001662:	2300      	movs	r3, #0
 8001664:	2480      	movs	r4, #128	; 0x80
 8001666:	469a      	mov	sl, r3
 8001668:	2500      	movs	r5, #0
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <__aeabi_ddiv+0x244>)
 800166c:	0324      	lsls	r4, r4, #12
 800166e:	e74f      	b.n	8001510 <__aeabi_ddiv+0xb4>
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	4641      	mov	r1, r8
 8001674:	031b      	lsls	r3, r3, #12
 8001676:	4219      	tst	r1, r3
 8001678:	d008      	beq.n	800168c <__aeabi_ddiv+0x230>
 800167a:	421c      	tst	r4, r3
 800167c:	d106      	bne.n	800168c <__aeabi_ddiv+0x230>
 800167e:	431c      	orrs	r4, r3
 8001680:	0324      	lsls	r4, r4, #12
 8001682:	46ba      	mov	sl, r7
 8001684:	0015      	movs	r5, r2
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <__aeabi_ddiv+0x244>)
 8001688:	0b24      	lsrs	r4, r4, #12
 800168a:	e741      	b.n	8001510 <__aeabi_ddiv+0xb4>
 800168c:	2480      	movs	r4, #128	; 0x80
 800168e:	4643      	mov	r3, r8
 8001690:	0324      	lsls	r4, r4, #12
 8001692:	431c      	orrs	r4, r3
 8001694:	0324      	lsls	r4, r4, #12
 8001696:	46b2      	mov	sl, r6
 8001698:	4b01      	ldr	r3, [pc, #4]	; (80016a0 <__aeabi_ddiv+0x244>)
 800169a:	0b24      	lsrs	r4, r4, #12
 800169c:	e738      	b.n	8001510 <__aeabi_ddiv+0xb4>
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	000007ff 	.word	0x000007ff
 80016a4:	fffffc01 	.word	0xfffffc01
 80016a8:	08007ddc 	.word	0x08007ddc
 80016ac:	fffff801 	.word	0xfffff801
 80016b0:	fffffc0d 	.word	0xfffffc0d
 80016b4:	000003f3 	.word	0x000003f3
 80016b8:	000003ff 	.word	0x000003ff
 80016bc:	feffffff 	.word	0xfeffffff
 80016c0:	000007fe 	.word	0x000007fe
 80016c4:	4544      	cmp	r4, r8
 80016c6:	d200      	bcs.n	80016ca <__aeabi_ddiv+0x26e>
 80016c8:	e116      	b.n	80018f8 <__aeabi_ddiv+0x49c>
 80016ca:	d100      	bne.n	80016ce <__aeabi_ddiv+0x272>
 80016cc:	e111      	b.n	80018f2 <__aeabi_ddiv+0x496>
 80016ce:	2301      	movs	r3, #1
 80016d0:	425b      	negs	r3, r3
 80016d2:	469c      	mov	ip, r3
 80016d4:	002e      	movs	r6, r5
 80016d6:	4640      	mov	r0, r8
 80016d8:	2500      	movs	r5, #0
 80016da:	44e3      	add	fp, ip
 80016dc:	0223      	lsls	r3, r4, #8
 80016de:	0e14      	lsrs	r4, r2, #24
 80016e0:	431c      	orrs	r4, r3
 80016e2:	0c1b      	lsrs	r3, r3, #16
 80016e4:	4699      	mov	r9, r3
 80016e6:	0423      	lsls	r3, r4, #16
 80016e8:	0c1f      	lsrs	r7, r3, #16
 80016ea:	0212      	lsls	r2, r2, #8
 80016ec:	4649      	mov	r1, r9
 80016ee:	9200      	str	r2, [sp, #0]
 80016f0:	9701      	str	r7, [sp, #4]
 80016f2:	f7fe fd8f 	bl	8000214 <__aeabi_uidivmod>
 80016f6:	0002      	movs	r2, r0
 80016f8:	437a      	muls	r2, r7
 80016fa:	040b      	lsls	r3, r1, #16
 80016fc:	0c31      	lsrs	r1, r6, #16
 80016fe:	4680      	mov	r8, r0
 8001700:	4319      	orrs	r1, r3
 8001702:	428a      	cmp	r2, r1
 8001704:	d90b      	bls.n	800171e <__aeabi_ddiv+0x2c2>
 8001706:	2301      	movs	r3, #1
 8001708:	425b      	negs	r3, r3
 800170a:	469c      	mov	ip, r3
 800170c:	1909      	adds	r1, r1, r4
 800170e:	44e0      	add	r8, ip
 8001710:	428c      	cmp	r4, r1
 8001712:	d804      	bhi.n	800171e <__aeabi_ddiv+0x2c2>
 8001714:	428a      	cmp	r2, r1
 8001716:	d902      	bls.n	800171e <__aeabi_ddiv+0x2c2>
 8001718:	1e83      	subs	r3, r0, #2
 800171a:	4698      	mov	r8, r3
 800171c:	1909      	adds	r1, r1, r4
 800171e:	1a88      	subs	r0, r1, r2
 8001720:	4649      	mov	r1, r9
 8001722:	f7fe fd77 	bl	8000214 <__aeabi_uidivmod>
 8001726:	0409      	lsls	r1, r1, #16
 8001728:	468c      	mov	ip, r1
 800172a:	0431      	lsls	r1, r6, #16
 800172c:	4666      	mov	r6, ip
 800172e:	9a01      	ldr	r2, [sp, #4]
 8001730:	0c09      	lsrs	r1, r1, #16
 8001732:	4342      	muls	r2, r0
 8001734:	0003      	movs	r3, r0
 8001736:	4331      	orrs	r1, r6
 8001738:	428a      	cmp	r2, r1
 800173a:	d904      	bls.n	8001746 <__aeabi_ddiv+0x2ea>
 800173c:	1909      	adds	r1, r1, r4
 800173e:	3b01      	subs	r3, #1
 8001740:	428c      	cmp	r4, r1
 8001742:	d800      	bhi.n	8001746 <__aeabi_ddiv+0x2ea>
 8001744:	e111      	b.n	800196a <__aeabi_ddiv+0x50e>
 8001746:	1a89      	subs	r1, r1, r2
 8001748:	4642      	mov	r2, r8
 800174a:	9e00      	ldr	r6, [sp, #0]
 800174c:	0412      	lsls	r2, r2, #16
 800174e:	431a      	orrs	r2, r3
 8001750:	0c33      	lsrs	r3, r6, #16
 8001752:	001f      	movs	r7, r3
 8001754:	0c10      	lsrs	r0, r2, #16
 8001756:	4690      	mov	r8, r2
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	0413      	lsls	r3, r2, #16
 800175c:	0432      	lsls	r2, r6, #16
 800175e:	0c16      	lsrs	r6, r2, #16
 8001760:	0032      	movs	r2, r6
 8001762:	0c1b      	lsrs	r3, r3, #16
 8001764:	435a      	muls	r2, r3
 8001766:	9603      	str	r6, [sp, #12]
 8001768:	437b      	muls	r3, r7
 800176a:	4346      	muls	r6, r0
 800176c:	4378      	muls	r0, r7
 800176e:	0c17      	lsrs	r7, r2, #16
 8001770:	46bc      	mov	ip, r7
 8001772:	199b      	adds	r3, r3, r6
 8001774:	4463      	add	r3, ip
 8001776:	429e      	cmp	r6, r3
 8001778:	d903      	bls.n	8001782 <__aeabi_ddiv+0x326>
 800177a:	2680      	movs	r6, #128	; 0x80
 800177c:	0276      	lsls	r6, r6, #9
 800177e:	46b4      	mov	ip, r6
 8001780:	4460      	add	r0, ip
 8001782:	0c1e      	lsrs	r6, r3, #16
 8001784:	1830      	adds	r0, r6, r0
 8001786:	0416      	lsls	r6, r2, #16
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	0c36      	lsrs	r6, r6, #16
 800178c:	199e      	adds	r6, r3, r6
 800178e:	4281      	cmp	r1, r0
 8001790:	d200      	bcs.n	8001794 <__aeabi_ddiv+0x338>
 8001792:	e09c      	b.n	80018ce <__aeabi_ddiv+0x472>
 8001794:	d100      	bne.n	8001798 <__aeabi_ddiv+0x33c>
 8001796:	e097      	b.n	80018c8 <__aeabi_ddiv+0x46c>
 8001798:	1bae      	subs	r6, r5, r6
 800179a:	1a09      	subs	r1, r1, r0
 800179c:	42b5      	cmp	r5, r6
 800179e:	4180      	sbcs	r0, r0
 80017a0:	4240      	negs	r0, r0
 80017a2:	1a08      	subs	r0, r1, r0
 80017a4:	4284      	cmp	r4, r0
 80017a6:	d100      	bne.n	80017aa <__aeabi_ddiv+0x34e>
 80017a8:	e111      	b.n	80019ce <__aeabi_ddiv+0x572>
 80017aa:	4649      	mov	r1, r9
 80017ac:	f7fe fd32 	bl	8000214 <__aeabi_uidivmod>
 80017b0:	9a01      	ldr	r2, [sp, #4]
 80017b2:	040b      	lsls	r3, r1, #16
 80017b4:	4342      	muls	r2, r0
 80017b6:	0c31      	lsrs	r1, r6, #16
 80017b8:	0005      	movs	r5, r0
 80017ba:	4319      	orrs	r1, r3
 80017bc:	428a      	cmp	r2, r1
 80017be:	d907      	bls.n	80017d0 <__aeabi_ddiv+0x374>
 80017c0:	1909      	adds	r1, r1, r4
 80017c2:	3d01      	subs	r5, #1
 80017c4:	428c      	cmp	r4, r1
 80017c6:	d803      	bhi.n	80017d0 <__aeabi_ddiv+0x374>
 80017c8:	428a      	cmp	r2, r1
 80017ca:	d901      	bls.n	80017d0 <__aeabi_ddiv+0x374>
 80017cc:	1e85      	subs	r5, r0, #2
 80017ce:	1909      	adds	r1, r1, r4
 80017d0:	1a88      	subs	r0, r1, r2
 80017d2:	4649      	mov	r1, r9
 80017d4:	f7fe fd1e 	bl	8000214 <__aeabi_uidivmod>
 80017d8:	0409      	lsls	r1, r1, #16
 80017da:	468c      	mov	ip, r1
 80017dc:	0431      	lsls	r1, r6, #16
 80017de:	4666      	mov	r6, ip
 80017e0:	9a01      	ldr	r2, [sp, #4]
 80017e2:	0c09      	lsrs	r1, r1, #16
 80017e4:	4342      	muls	r2, r0
 80017e6:	0003      	movs	r3, r0
 80017e8:	4331      	orrs	r1, r6
 80017ea:	428a      	cmp	r2, r1
 80017ec:	d907      	bls.n	80017fe <__aeabi_ddiv+0x3a2>
 80017ee:	1909      	adds	r1, r1, r4
 80017f0:	3b01      	subs	r3, #1
 80017f2:	428c      	cmp	r4, r1
 80017f4:	d803      	bhi.n	80017fe <__aeabi_ddiv+0x3a2>
 80017f6:	428a      	cmp	r2, r1
 80017f8:	d901      	bls.n	80017fe <__aeabi_ddiv+0x3a2>
 80017fa:	1e83      	subs	r3, r0, #2
 80017fc:	1909      	adds	r1, r1, r4
 80017fe:	9e03      	ldr	r6, [sp, #12]
 8001800:	1a89      	subs	r1, r1, r2
 8001802:	0032      	movs	r2, r6
 8001804:	042d      	lsls	r5, r5, #16
 8001806:	431d      	orrs	r5, r3
 8001808:	9f02      	ldr	r7, [sp, #8]
 800180a:	042b      	lsls	r3, r5, #16
 800180c:	0c1b      	lsrs	r3, r3, #16
 800180e:	435a      	muls	r2, r3
 8001810:	437b      	muls	r3, r7
 8001812:	469c      	mov	ip, r3
 8001814:	0c28      	lsrs	r0, r5, #16
 8001816:	4346      	muls	r6, r0
 8001818:	0c13      	lsrs	r3, r2, #16
 800181a:	44b4      	add	ip, r6
 800181c:	4463      	add	r3, ip
 800181e:	4378      	muls	r0, r7
 8001820:	429e      	cmp	r6, r3
 8001822:	d903      	bls.n	800182c <__aeabi_ddiv+0x3d0>
 8001824:	2680      	movs	r6, #128	; 0x80
 8001826:	0276      	lsls	r6, r6, #9
 8001828:	46b4      	mov	ip, r6
 800182a:	4460      	add	r0, ip
 800182c:	0c1e      	lsrs	r6, r3, #16
 800182e:	0412      	lsls	r2, r2, #16
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	0c12      	lsrs	r2, r2, #16
 8001834:	1830      	adds	r0, r6, r0
 8001836:	189b      	adds	r3, r3, r2
 8001838:	4281      	cmp	r1, r0
 800183a:	d306      	bcc.n	800184a <__aeabi_ddiv+0x3ee>
 800183c:	d002      	beq.n	8001844 <__aeabi_ddiv+0x3e8>
 800183e:	2301      	movs	r3, #1
 8001840:	431d      	orrs	r5, r3
 8001842:	e6ce      	b.n	80015e2 <__aeabi_ddiv+0x186>
 8001844:	2b00      	cmp	r3, #0
 8001846:	d100      	bne.n	800184a <__aeabi_ddiv+0x3ee>
 8001848:	e6cb      	b.n	80015e2 <__aeabi_ddiv+0x186>
 800184a:	1861      	adds	r1, r4, r1
 800184c:	1e6e      	subs	r6, r5, #1
 800184e:	42a1      	cmp	r1, r4
 8001850:	d200      	bcs.n	8001854 <__aeabi_ddiv+0x3f8>
 8001852:	e0a4      	b.n	800199e <__aeabi_ddiv+0x542>
 8001854:	4281      	cmp	r1, r0
 8001856:	d200      	bcs.n	800185a <__aeabi_ddiv+0x3fe>
 8001858:	e0c9      	b.n	80019ee <__aeabi_ddiv+0x592>
 800185a:	d100      	bne.n	800185e <__aeabi_ddiv+0x402>
 800185c:	e0d9      	b.n	8001a12 <__aeabi_ddiv+0x5b6>
 800185e:	0035      	movs	r5, r6
 8001860:	e7ed      	b.n	800183e <__aeabi_ddiv+0x3e2>
 8001862:	2501      	movs	r5, #1
 8001864:	426d      	negs	r5, r5
 8001866:	2101      	movs	r1, #1
 8001868:	1a89      	subs	r1, r1, r2
 800186a:	2938      	cmp	r1, #56	; 0x38
 800186c:	dd00      	ble.n	8001870 <__aeabi_ddiv+0x414>
 800186e:	e64c      	b.n	800150a <__aeabi_ddiv+0xae>
 8001870:	291f      	cmp	r1, #31
 8001872:	dc00      	bgt.n	8001876 <__aeabi_ddiv+0x41a>
 8001874:	e07f      	b.n	8001976 <__aeabi_ddiv+0x51a>
 8001876:	231f      	movs	r3, #31
 8001878:	425b      	negs	r3, r3
 800187a:	1a9a      	subs	r2, r3, r2
 800187c:	4643      	mov	r3, r8
 800187e:	40d3      	lsrs	r3, r2
 8001880:	2920      	cmp	r1, #32
 8001882:	d004      	beq.n	800188e <__aeabi_ddiv+0x432>
 8001884:	4644      	mov	r4, r8
 8001886:	4a65      	ldr	r2, [pc, #404]	; (8001a1c <__aeabi_ddiv+0x5c0>)
 8001888:	445a      	add	r2, fp
 800188a:	4094      	lsls	r4, r2
 800188c:	4325      	orrs	r5, r4
 800188e:	1e6a      	subs	r2, r5, #1
 8001890:	4195      	sbcs	r5, r2
 8001892:	2207      	movs	r2, #7
 8001894:	432b      	orrs	r3, r5
 8001896:	0015      	movs	r5, r2
 8001898:	2400      	movs	r4, #0
 800189a:	401d      	ands	r5, r3
 800189c:	421a      	tst	r2, r3
 800189e:	d100      	bne.n	80018a2 <__aeabi_ddiv+0x446>
 80018a0:	e0a1      	b.n	80019e6 <__aeabi_ddiv+0x58a>
 80018a2:	220f      	movs	r2, #15
 80018a4:	2400      	movs	r4, #0
 80018a6:	401a      	ands	r2, r3
 80018a8:	2a04      	cmp	r2, #4
 80018aa:	d100      	bne.n	80018ae <__aeabi_ddiv+0x452>
 80018ac:	e098      	b.n	80019e0 <__aeabi_ddiv+0x584>
 80018ae:	1d1a      	adds	r2, r3, #4
 80018b0:	429a      	cmp	r2, r3
 80018b2:	419b      	sbcs	r3, r3
 80018b4:	425b      	negs	r3, r3
 80018b6:	18e4      	adds	r4, r4, r3
 80018b8:	0013      	movs	r3, r2
 80018ba:	0222      	lsls	r2, r4, #8
 80018bc:	d400      	bmi.n	80018c0 <__aeabi_ddiv+0x464>
 80018be:	e08f      	b.n	80019e0 <__aeabi_ddiv+0x584>
 80018c0:	2301      	movs	r3, #1
 80018c2:	2400      	movs	r4, #0
 80018c4:	2500      	movs	r5, #0
 80018c6:	e623      	b.n	8001510 <__aeabi_ddiv+0xb4>
 80018c8:	42b5      	cmp	r5, r6
 80018ca:	d300      	bcc.n	80018ce <__aeabi_ddiv+0x472>
 80018cc:	e764      	b.n	8001798 <__aeabi_ddiv+0x33c>
 80018ce:	4643      	mov	r3, r8
 80018d0:	1e5a      	subs	r2, r3, #1
 80018d2:	9b00      	ldr	r3, [sp, #0]
 80018d4:	469c      	mov	ip, r3
 80018d6:	4465      	add	r5, ip
 80018d8:	001f      	movs	r7, r3
 80018da:	429d      	cmp	r5, r3
 80018dc:	419b      	sbcs	r3, r3
 80018de:	425b      	negs	r3, r3
 80018e0:	191b      	adds	r3, r3, r4
 80018e2:	18c9      	adds	r1, r1, r3
 80018e4:	428c      	cmp	r4, r1
 80018e6:	d23a      	bcs.n	800195e <__aeabi_ddiv+0x502>
 80018e8:	4288      	cmp	r0, r1
 80018ea:	d863      	bhi.n	80019b4 <__aeabi_ddiv+0x558>
 80018ec:	d060      	beq.n	80019b0 <__aeabi_ddiv+0x554>
 80018ee:	4690      	mov	r8, r2
 80018f0:	e752      	b.n	8001798 <__aeabi_ddiv+0x33c>
 80018f2:	42aa      	cmp	r2, r5
 80018f4:	d900      	bls.n	80018f8 <__aeabi_ddiv+0x49c>
 80018f6:	e6ea      	b.n	80016ce <__aeabi_ddiv+0x272>
 80018f8:	4643      	mov	r3, r8
 80018fa:	07de      	lsls	r6, r3, #31
 80018fc:	0858      	lsrs	r0, r3, #1
 80018fe:	086b      	lsrs	r3, r5, #1
 8001900:	431e      	orrs	r6, r3
 8001902:	07ed      	lsls	r5, r5, #31
 8001904:	e6ea      	b.n	80016dc <__aeabi_ddiv+0x280>
 8001906:	4648      	mov	r0, r9
 8001908:	f001 f926 	bl	8002b58 <__clzsi2>
 800190c:	0001      	movs	r1, r0
 800190e:	0002      	movs	r2, r0
 8001910:	3115      	adds	r1, #21
 8001912:	3220      	adds	r2, #32
 8001914:	291c      	cmp	r1, #28
 8001916:	dc00      	bgt.n	800191a <__aeabi_ddiv+0x4be>
 8001918:	e61a      	b.n	8001550 <__aeabi_ddiv+0xf4>
 800191a:	464b      	mov	r3, r9
 800191c:	3808      	subs	r0, #8
 800191e:	4083      	lsls	r3, r0
 8001920:	2500      	movs	r5, #0
 8001922:	4698      	mov	r8, r3
 8001924:	e620      	b.n	8001568 <__aeabi_ddiv+0x10c>
 8001926:	f001 f917 	bl	8002b58 <__clzsi2>
 800192a:	0003      	movs	r3, r0
 800192c:	001a      	movs	r2, r3
 800192e:	3215      	adds	r2, #21
 8001930:	3020      	adds	r0, #32
 8001932:	2a1c      	cmp	r2, #28
 8001934:	dc00      	bgt.n	8001938 <__aeabi_ddiv+0x4dc>
 8001936:	e630      	b.n	800159a <__aeabi_ddiv+0x13e>
 8001938:	4654      	mov	r4, sl
 800193a:	3b08      	subs	r3, #8
 800193c:	2200      	movs	r2, #0
 800193e:	409c      	lsls	r4, r3
 8001940:	e635      	b.n	80015ae <__aeabi_ddiv+0x152>
 8001942:	230f      	movs	r3, #15
 8001944:	402b      	ands	r3, r5
 8001946:	2b04      	cmp	r3, #4
 8001948:	d100      	bne.n	800194c <__aeabi_ddiv+0x4f0>
 800194a:	e652      	b.n	80015f2 <__aeabi_ddiv+0x196>
 800194c:	2305      	movs	r3, #5
 800194e:	425b      	negs	r3, r3
 8001950:	42ab      	cmp	r3, r5
 8001952:	419b      	sbcs	r3, r3
 8001954:	3504      	adds	r5, #4
 8001956:	425b      	negs	r3, r3
 8001958:	08ed      	lsrs	r5, r5, #3
 800195a:	4498      	add	r8, r3
 800195c:	e64a      	b.n	80015f4 <__aeabi_ddiv+0x198>
 800195e:	428c      	cmp	r4, r1
 8001960:	d1c5      	bne.n	80018ee <__aeabi_ddiv+0x492>
 8001962:	42af      	cmp	r7, r5
 8001964:	d9c0      	bls.n	80018e8 <__aeabi_ddiv+0x48c>
 8001966:	4690      	mov	r8, r2
 8001968:	e716      	b.n	8001798 <__aeabi_ddiv+0x33c>
 800196a:	428a      	cmp	r2, r1
 800196c:	d800      	bhi.n	8001970 <__aeabi_ddiv+0x514>
 800196e:	e6ea      	b.n	8001746 <__aeabi_ddiv+0x2ea>
 8001970:	1e83      	subs	r3, r0, #2
 8001972:	1909      	adds	r1, r1, r4
 8001974:	e6e7      	b.n	8001746 <__aeabi_ddiv+0x2ea>
 8001976:	4a2a      	ldr	r2, [pc, #168]	; (8001a20 <__aeabi_ddiv+0x5c4>)
 8001978:	0028      	movs	r0, r5
 800197a:	445a      	add	r2, fp
 800197c:	4643      	mov	r3, r8
 800197e:	4095      	lsls	r5, r2
 8001980:	4093      	lsls	r3, r2
 8001982:	40c8      	lsrs	r0, r1
 8001984:	1e6a      	subs	r2, r5, #1
 8001986:	4195      	sbcs	r5, r2
 8001988:	4644      	mov	r4, r8
 800198a:	4303      	orrs	r3, r0
 800198c:	432b      	orrs	r3, r5
 800198e:	40cc      	lsrs	r4, r1
 8001990:	075a      	lsls	r2, r3, #29
 8001992:	d092      	beq.n	80018ba <__aeabi_ddiv+0x45e>
 8001994:	220f      	movs	r2, #15
 8001996:	401a      	ands	r2, r3
 8001998:	2a04      	cmp	r2, #4
 800199a:	d188      	bne.n	80018ae <__aeabi_ddiv+0x452>
 800199c:	e78d      	b.n	80018ba <__aeabi_ddiv+0x45e>
 800199e:	0035      	movs	r5, r6
 80019a0:	4281      	cmp	r1, r0
 80019a2:	d000      	beq.n	80019a6 <__aeabi_ddiv+0x54a>
 80019a4:	e74b      	b.n	800183e <__aeabi_ddiv+0x3e2>
 80019a6:	9a00      	ldr	r2, [sp, #0]
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d000      	beq.n	80019ae <__aeabi_ddiv+0x552>
 80019ac:	e747      	b.n	800183e <__aeabi_ddiv+0x3e2>
 80019ae:	e618      	b.n	80015e2 <__aeabi_ddiv+0x186>
 80019b0:	42ae      	cmp	r6, r5
 80019b2:	d99c      	bls.n	80018ee <__aeabi_ddiv+0x492>
 80019b4:	2302      	movs	r3, #2
 80019b6:	425b      	negs	r3, r3
 80019b8:	469c      	mov	ip, r3
 80019ba:	9b00      	ldr	r3, [sp, #0]
 80019bc:	44e0      	add	r8, ip
 80019be:	469c      	mov	ip, r3
 80019c0:	4465      	add	r5, ip
 80019c2:	429d      	cmp	r5, r3
 80019c4:	419b      	sbcs	r3, r3
 80019c6:	425b      	negs	r3, r3
 80019c8:	191b      	adds	r3, r3, r4
 80019ca:	18c9      	adds	r1, r1, r3
 80019cc:	e6e4      	b.n	8001798 <__aeabi_ddiv+0x33c>
 80019ce:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <__aeabi_ddiv+0x5c8>)
 80019d0:	445a      	add	r2, fp
 80019d2:	2a00      	cmp	r2, #0
 80019d4:	dc00      	bgt.n	80019d8 <__aeabi_ddiv+0x57c>
 80019d6:	e744      	b.n	8001862 <__aeabi_ddiv+0x406>
 80019d8:	2301      	movs	r3, #1
 80019da:	2500      	movs	r5, #0
 80019dc:	4498      	add	r8, r3
 80019de:	e609      	b.n	80015f4 <__aeabi_ddiv+0x198>
 80019e0:	0765      	lsls	r5, r4, #29
 80019e2:	0264      	lsls	r4, r4, #9
 80019e4:	0b24      	lsrs	r4, r4, #12
 80019e6:	08db      	lsrs	r3, r3, #3
 80019e8:	431d      	orrs	r5, r3
 80019ea:	2300      	movs	r3, #0
 80019ec:	e590      	b.n	8001510 <__aeabi_ddiv+0xb4>
 80019ee:	9e00      	ldr	r6, [sp, #0]
 80019f0:	3d02      	subs	r5, #2
 80019f2:	0072      	lsls	r2, r6, #1
 80019f4:	42b2      	cmp	r2, r6
 80019f6:	41bf      	sbcs	r7, r7
 80019f8:	427f      	negs	r7, r7
 80019fa:	193c      	adds	r4, r7, r4
 80019fc:	1909      	adds	r1, r1, r4
 80019fe:	9200      	str	r2, [sp, #0]
 8001a00:	e7ce      	b.n	80019a0 <__aeabi_ddiv+0x544>
 8001a02:	2480      	movs	r4, #128	; 0x80
 8001a04:	4643      	mov	r3, r8
 8001a06:	0324      	lsls	r4, r4, #12
 8001a08:	431c      	orrs	r4, r3
 8001a0a:	0324      	lsls	r4, r4, #12
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <__aeabi_ddiv+0x5cc>)
 8001a0e:	0b24      	lsrs	r4, r4, #12
 8001a10:	e57e      	b.n	8001510 <__aeabi_ddiv+0xb4>
 8001a12:	9a00      	ldr	r2, [sp, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d3ea      	bcc.n	80019ee <__aeabi_ddiv+0x592>
 8001a18:	0035      	movs	r5, r6
 8001a1a:	e7c4      	b.n	80019a6 <__aeabi_ddiv+0x54a>
 8001a1c:	0000043e 	.word	0x0000043e
 8001a20:	0000041e 	.word	0x0000041e
 8001a24:	000003ff 	.word	0x000003ff
 8001a28:	000007ff 	.word	0x000007ff

08001a2c <__eqdf2>:
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	464f      	mov	r7, r9
 8001a30:	4646      	mov	r6, r8
 8001a32:	46d6      	mov	lr, sl
 8001a34:	4694      	mov	ip, r2
 8001a36:	4691      	mov	r9, r2
 8001a38:	031a      	lsls	r2, r3, #12
 8001a3a:	0b12      	lsrs	r2, r2, #12
 8001a3c:	4d18      	ldr	r5, [pc, #96]	; (8001aa0 <__eqdf2+0x74>)
 8001a3e:	b5c0      	push	{r6, r7, lr}
 8001a40:	004c      	lsls	r4, r1, #1
 8001a42:	030f      	lsls	r7, r1, #12
 8001a44:	4692      	mov	sl, r2
 8001a46:	005a      	lsls	r2, r3, #1
 8001a48:	0006      	movs	r6, r0
 8001a4a:	4680      	mov	r8, r0
 8001a4c:	0b3f      	lsrs	r7, r7, #12
 8001a4e:	2001      	movs	r0, #1
 8001a50:	0d64      	lsrs	r4, r4, #21
 8001a52:	0fc9      	lsrs	r1, r1, #31
 8001a54:	0d52      	lsrs	r2, r2, #21
 8001a56:	0fdb      	lsrs	r3, r3, #31
 8001a58:	42ac      	cmp	r4, r5
 8001a5a:	d00a      	beq.n	8001a72 <__eqdf2+0x46>
 8001a5c:	42aa      	cmp	r2, r5
 8001a5e:	d003      	beq.n	8001a68 <__eqdf2+0x3c>
 8001a60:	4294      	cmp	r4, r2
 8001a62:	d101      	bne.n	8001a68 <__eqdf2+0x3c>
 8001a64:	4557      	cmp	r7, sl
 8001a66:	d00d      	beq.n	8001a84 <__eqdf2+0x58>
 8001a68:	bce0      	pop	{r5, r6, r7}
 8001a6a:	46ba      	mov	sl, r7
 8001a6c:	46b1      	mov	r9, r6
 8001a6e:	46a8      	mov	r8, r5
 8001a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a72:	003d      	movs	r5, r7
 8001a74:	4335      	orrs	r5, r6
 8001a76:	d1f7      	bne.n	8001a68 <__eqdf2+0x3c>
 8001a78:	42a2      	cmp	r2, r4
 8001a7a:	d1f5      	bne.n	8001a68 <__eqdf2+0x3c>
 8001a7c:	4652      	mov	r2, sl
 8001a7e:	4665      	mov	r5, ip
 8001a80:	432a      	orrs	r2, r5
 8001a82:	d1f1      	bne.n	8001a68 <__eqdf2+0x3c>
 8001a84:	2001      	movs	r0, #1
 8001a86:	45c8      	cmp	r8, r9
 8001a88:	d1ee      	bne.n	8001a68 <__eqdf2+0x3c>
 8001a8a:	4299      	cmp	r1, r3
 8001a8c:	d006      	beq.n	8001a9c <__eqdf2+0x70>
 8001a8e:	2c00      	cmp	r4, #0
 8001a90:	d1ea      	bne.n	8001a68 <__eqdf2+0x3c>
 8001a92:	433e      	orrs	r6, r7
 8001a94:	0030      	movs	r0, r6
 8001a96:	1e46      	subs	r6, r0, #1
 8001a98:	41b0      	sbcs	r0, r6
 8001a9a:	e7e5      	b.n	8001a68 <__eqdf2+0x3c>
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	e7e3      	b.n	8001a68 <__eqdf2+0x3c>
 8001aa0:	000007ff 	.word	0x000007ff

08001aa4 <__gedf2>:
 8001aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aa6:	464e      	mov	r6, r9
 8001aa8:	4645      	mov	r5, r8
 8001aaa:	4657      	mov	r7, sl
 8001aac:	46de      	mov	lr, fp
 8001aae:	0004      	movs	r4, r0
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	b5e0      	push	{r5, r6, r7, lr}
 8001ab4:	0016      	movs	r6, r2
 8001ab6:	031b      	lsls	r3, r3, #12
 8001ab8:	0b1b      	lsrs	r3, r3, #12
 8001aba:	4d32      	ldr	r5, [pc, #200]	; (8001b84 <__gedf2+0xe0>)
 8001abc:	030f      	lsls	r7, r1, #12
 8001abe:	004a      	lsls	r2, r1, #1
 8001ac0:	4699      	mov	r9, r3
 8001ac2:	0043      	lsls	r3, r0, #1
 8001ac4:	46a4      	mov	ip, r4
 8001ac6:	46b0      	mov	r8, r6
 8001ac8:	0b3f      	lsrs	r7, r7, #12
 8001aca:	0d52      	lsrs	r2, r2, #21
 8001acc:	0fc9      	lsrs	r1, r1, #31
 8001ace:	0d5b      	lsrs	r3, r3, #21
 8001ad0:	0fc0      	lsrs	r0, r0, #31
 8001ad2:	42aa      	cmp	r2, r5
 8001ad4:	d029      	beq.n	8001b2a <__gedf2+0x86>
 8001ad6:	42ab      	cmp	r3, r5
 8001ad8:	d018      	beq.n	8001b0c <__gedf2+0x68>
 8001ada:	2a00      	cmp	r2, #0
 8001adc:	d12a      	bne.n	8001b34 <__gedf2+0x90>
 8001ade:	433c      	orrs	r4, r7
 8001ae0:	46a3      	mov	fp, r4
 8001ae2:	4265      	negs	r5, r4
 8001ae4:	4165      	adcs	r5, r4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d102      	bne.n	8001af0 <__gedf2+0x4c>
 8001aea:	464c      	mov	r4, r9
 8001aec:	4326      	orrs	r6, r4
 8001aee:	d027      	beq.n	8001b40 <__gedf2+0x9c>
 8001af0:	2d00      	cmp	r5, #0
 8001af2:	d115      	bne.n	8001b20 <__gedf2+0x7c>
 8001af4:	4281      	cmp	r1, r0
 8001af6:	d028      	beq.n	8001b4a <__gedf2+0xa6>
 8001af8:	2002      	movs	r0, #2
 8001afa:	3901      	subs	r1, #1
 8001afc:	4008      	ands	r0, r1
 8001afe:	3801      	subs	r0, #1
 8001b00:	bcf0      	pop	{r4, r5, r6, r7}
 8001b02:	46bb      	mov	fp, r7
 8001b04:	46b2      	mov	sl, r6
 8001b06:	46a9      	mov	r9, r5
 8001b08:	46a0      	mov	r8, r4
 8001b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b0c:	464d      	mov	r5, r9
 8001b0e:	432e      	orrs	r6, r5
 8001b10:	d12f      	bne.n	8001b72 <__gedf2+0xce>
 8001b12:	2a00      	cmp	r2, #0
 8001b14:	d1ee      	bne.n	8001af4 <__gedf2+0x50>
 8001b16:	433c      	orrs	r4, r7
 8001b18:	4265      	negs	r5, r4
 8001b1a:	4165      	adcs	r5, r4
 8001b1c:	2d00      	cmp	r5, #0
 8001b1e:	d0e9      	beq.n	8001af4 <__gedf2+0x50>
 8001b20:	2800      	cmp	r0, #0
 8001b22:	d1ed      	bne.n	8001b00 <__gedf2+0x5c>
 8001b24:	2001      	movs	r0, #1
 8001b26:	4240      	negs	r0, r0
 8001b28:	e7ea      	b.n	8001b00 <__gedf2+0x5c>
 8001b2a:	003d      	movs	r5, r7
 8001b2c:	4325      	orrs	r5, r4
 8001b2e:	d120      	bne.n	8001b72 <__gedf2+0xce>
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d0eb      	beq.n	8001b0c <__gedf2+0x68>
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1dd      	bne.n	8001af4 <__gedf2+0x50>
 8001b38:	464c      	mov	r4, r9
 8001b3a:	4326      	orrs	r6, r4
 8001b3c:	d1da      	bne.n	8001af4 <__gedf2+0x50>
 8001b3e:	e7db      	b.n	8001af8 <__gedf2+0x54>
 8001b40:	465b      	mov	r3, fp
 8001b42:	2000      	movs	r0, #0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0db      	beq.n	8001b00 <__gedf2+0x5c>
 8001b48:	e7d6      	b.n	8001af8 <__gedf2+0x54>
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	dc0a      	bgt.n	8001b64 <__gedf2+0xc0>
 8001b4e:	dbe7      	blt.n	8001b20 <__gedf2+0x7c>
 8001b50:	454f      	cmp	r7, r9
 8001b52:	d8d1      	bhi.n	8001af8 <__gedf2+0x54>
 8001b54:	d010      	beq.n	8001b78 <__gedf2+0xd4>
 8001b56:	2000      	movs	r0, #0
 8001b58:	454f      	cmp	r7, r9
 8001b5a:	d2d1      	bcs.n	8001b00 <__gedf2+0x5c>
 8001b5c:	2900      	cmp	r1, #0
 8001b5e:	d0e1      	beq.n	8001b24 <__gedf2+0x80>
 8001b60:	0008      	movs	r0, r1
 8001b62:	e7cd      	b.n	8001b00 <__gedf2+0x5c>
 8001b64:	4243      	negs	r3, r0
 8001b66:	4158      	adcs	r0, r3
 8001b68:	2302      	movs	r3, #2
 8001b6a:	4240      	negs	r0, r0
 8001b6c:	4018      	ands	r0, r3
 8001b6e:	3801      	subs	r0, #1
 8001b70:	e7c6      	b.n	8001b00 <__gedf2+0x5c>
 8001b72:	2002      	movs	r0, #2
 8001b74:	4240      	negs	r0, r0
 8001b76:	e7c3      	b.n	8001b00 <__gedf2+0x5c>
 8001b78:	45c4      	cmp	ip, r8
 8001b7a:	d8bd      	bhi.n	8001af8 <__gedf2+0x54>
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	45c4      	cmp	ip, r8
 8001b80:	d2be      	bcs.n	8001b00 <__gedf2+0x5c>
 8001b82:	e7eb      	b.n	8001b5c <__gedf2+0xb8>
 8001b84:	000007ff 	.word	0x000007ff

08001b88 <__ledf2>:
 8001b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b8a:	464e      	mov	r6, r9
 8001b8c:	4645      	mov	r5, r8
 8001b8e:	4657      	mov	r7, sl
 8001b90:	46de      	mov	lr, fp
 8001b92:	0004      	movs	r4, r0
 8001b94:	0018      	movs	r0, r3
 8001b96:	b5e0      	push	{r5, r6, r7, lr}
 8001b98:	0016      	movs	r6, r2
 8001b9a:	031b      	lsls	r3, r3, #12
 8001b9c:	0b1b      	lsrs	r3, r3, #12
 8001b9e:	4d31      	ldr	r5, [pc, #196]	; (8001c64 <__ledf2+0xdc>)
 8001ba0:	030f      	lsls	r7, r1, #12
 8001ba2:	004a      	lsls	r2, r1, #1
 8001ba4:	4699      	mov	r9, r3
 8001ba6:	0043      	lsls	r3, r0, #1
 8001ba8:	46a4      	mov	ip, r4
 8001baa:	46b0      	mov	r8, r6
 8001bac:	0b3f      	lsrs	r7, r7, #12
 8001bae:	0d52      	lsrs	r2, r2, #21
 8001bb0:	0fc9      	lsrs	r1, r1, #31
 8001bb2:	0d5b      	lsrs	r3, r3, #21
 8001bb4:	0fc0      	lsrs	r0, r0, #31
 8001bb6:	42aa      	cmp	r2, r5
 8001bb8:	d011      	beq.n	8001bde <__ledf2+0x56>
 8001bba:	42ab      	cmp	r3, r5
 8001bbc:	d014      	beq.n	8001be8 <__ledf2+0x60>
 8001bbe:	2a00      	cmp	r2, #0
 8001bc0:	d12f      	bne.n	8001c22 <__ledf2+0x9a>
 8001bc2:	433c      	orrs	r4, r7
 8001bc4:	46a3      	mov	fp, r4
 8001bc6:	4265      	negs	r5, r4
 8001bc8:	4165      	adcs	r5, r4
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d114      	bne.n	8001bf8 <__ledf2+0x70>
 8001bce:	464c      	mov	r4, r9
 8001bd0:	4326      	orrs	r6, r4
 8001bd2:	d111      	bne.n	8001bf8 <__ledf2+0x70>
 8001bd4:	465b      	mov	r3, fp
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d017      	beq.n	8001c0c <__ledf2+0x84>
 8001bdc:	e010      	b.n	8001c00 <__ledf2+0x78>
 8001bde:	003d      	movs	r5, r7
 8001be0:	4325      	orrs	r5, r4
 8001be2:	d112      	bne.n	8001c0a <__ledf2+0x82>
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d11c      	bne.n	8001c22 <__ledf2+0x9a>
 8001be8:	464d      	mov	r5, r9
 8001bea:	432e      	orrs	r6, r5
 8001bec:	d10d      	bne.n	8001c0a <__ledf2+0x82>
 8001bee:	2a00      	cmp	r2, #0
 8001bf0:	d104      	bne.n	8001bfc <__ledf2+0x74>
 8001bf2:	433c      	orrs	r4, r7
 8001bf4:	4265      	negs	r5, r4
 8001bf6:	4165      	adcs	r5, r4
 8001bf8:	2d00      	cmp	r5, #0
 8001bfa:	d10d      	bne.n	8001c18 <__ledf2+0x90>
 8001bfc:	4281      	cmp	r1, r0
 8001bfe:	d016      	beq.n	8001c2e <__ledf2+0xa6>
 8001c00:	2002      	movs	r0, #2
 8001c02:	3901      	subs	r1, #1
 8001c04:	4008      	ands	r0, r1
 8001c06:	3801      	subs	r0, #1
 8001c08:	e000      	b.n	8001c0c <__ledf2+0x84>
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c0e:	46bb      	mov	fp, r7
 8001c10:	46b2      	mov	sl, r6
 8001c12:	46a9      	mov	r9, r5
 8001c14:	46a0      	mov	r8, r4
 8001c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c18:	2800      	cmp	r0, #0
 8001c1a:	d1f7      	bne.n	8001c0c <__ledf2+0x84>
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	4240      	negs	r0, r0
 8001c20:	e7f4      	b.n	8001c0c <__ledf2+0x84>
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1ea      	bne.n	8001bfc <__ledf2+0x74>
 8001c26:	464c      	mov	r4, r9
 8001c28:	4326      	orrs	r6, r4
 8001c2a:	d1e7      	bne.n	8001bfc <__ledf2+0x74>
 8001c2c:	e7e8      	b.n	8001c00 <__ledf2+0x78>
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	dd06      	ble.n	8001c40 <__ledf2+0xb8>
 8001c32:	4243      	negs	r3, r0
 8001c34:	4158      	adcs	r0, r3
 8001c36:	2302      	movs	r3, #2
 8001c38:	4240      	negs	r0, r0
 8001c3a:	4018      	ands	r0, r3
 8001c3c:	3801      	subs	r0, #1
 8001c3e:	e7e5      	b.n	8001c0c <__ledf2+0x84>
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbe9      	blt.n	8001c18 <__ledf2+0x90>
 8001c44:	454f      	cmp	r7, r9
 8001c46:	d8db      	bhi.n	8001c00 <__ledf2+0x78>
 8001c48:	d006      	beq.n	8001c58 <__ledf2+0xd0>
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	454f      	cmp	r7, r9
 8001c4e:	d2dd      	bcs.n	8001c0c <__ledf2+0x84>
 8001c50:	2900      	cmp	r1, #0
 8001c52:	d0e3      	beq.n	8001c1c <__ledf2+0x94>
 8001c54:	0008      	movs	r0, r1
 8001c56:	e7d9      	b.n	8001c0c <__ledf2+0x84>
 8001c58:	45c4      	cmp	ip, r8
 8001c5a:	d8d1      	bhi.n	8001c00 <__ledf2+0x78>
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	45c4      	cmp	ip, r8
 8001c60:	d2d4      	bcs.n	8001c0c <__ledf2+0x84>
 8001c62:	e7f5      	b.n	8001c50 <__ledf2+0xc8>
 8001c64:	000007ff 	.word	0x000007ff

08001c68 <__aeabi_dmul>:
 8001c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6a:	4657      	mov	r7, sl
 8001c6c:	464e      	mov	r6, r9
 8001c6e:	4645      	mov	r5, r8
 8001c70:	46de      	mov	lr, fp
 8001c72:	b5e0      	push	{r5, r6, r7, lr}
 8001c74:	4698      	mov	r8, r3
 8001c76:	030c      	lsls	r4, r1, #12
 8001c78:	004b      	lsls	r3, r1, #1
 8001c7a:	0006      	movs	r6, r0
 8001c7c:	4692      	mov	sl, r2
 8001c7e:	b087      	sub	sp, #28
 8001c80:	0b24      	lsrs	r4, r4, #12
 8001c82:	0d5b      	lsrs	r3, r3, #21
 8001c84:	0fcf      	lsrs	r7, r1, #31
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d06c      	beq.n	8001d64 <__aeabi_dmul+0xfc>
 8001c8a:	4add      	ldr	r2, [pc, #884]	; (8002000 <__aeabi_dmul+0x398>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_dmul+0x2a>
 8001c90:	e086      	b.n	8001da0 <__aeabi_dmul+0x138>
 8001c92:	0f42      	lsrs	r2, r0, #29
 8001c94:	00e4      	lsls	r4, r4, #3
 8001c96:	4314      	orrs	r4, r2
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	0412      	lsls	r2, r2, #16
 8001c9c:	4314      	orrs	r4, r2
 8001c9e:	4ad9      	ldr	r2, [pc, #868]	; (8002004 <__aeabi_dmul+0x39c>)
 8001ca0:	00c5      	lsls	r5, r0, #3
 8001ca2:	4694      	mov	ip, r2
 8001ca4:	4463      	add	r3, ip
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	4699      	mov	r9, r3
 8001cac:	469b      	mov	fp, r3
 8001cae:	4643      	mov	r3, r8
 8001cb0:	4642      	mov	r2, r8
 8001cb2:	031e      	lsls	r6, r3, #12
 8001cb4:	0fd2      	lsrs	r2, r2, #31
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4650      	mov	r0, sl
 8001cba:	4690      	mov	r8, r2
 8001cbc:	0b36      	lsrs	r6, r6, #12
 8001cbe:	0d5b      	lsrs	r3, r3, #21
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_dmul+0x5c>
 8001cc2:	e078      	b.n	8001db6 <__aeabi_dmul+0x14e>
 8001cc4:	4ace      	ldr	r2, [pc, #824]	; (8002000 <__aeabi_dmul+0x398>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d01d      	beq.n	8001d06 <__aeabi_dmul+0x9e>
 8001cca:	49ce      	ldr	r1, [pc, #824]	; (8002004 <__aeabi_dmul+0x39c>)
 8001ccc:	0f42      	lsrs	r2, r0, #29
 8001cce:	468c      	mov	ip, r1
 8001cd0:	9900      	ldr	r1, [sp, #0]
 8001cd2:	4463      	add	r3, ip
 8001cd4:	00f6      	lsls	r6, r6, #3
 8001cd6:	468c      	mov	ip, r1
 8001cd8:	4316      	orrs	r6, r2
 8001cda:	2280      	movs	r2, #128	; 0x80
 8001cdc:	449c      	add	ip, r3
 8001cde:	0412      	lsls	r2, r2, #16
 8001ce0:	4663      	mov	r3, ip
 8001ce2:	4316      	orrs	r6, r2
 8001ce4:	00c2      	lsls	r2, r0, #3
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	9900      	ldr	r1, [sp, #0]
 8001cec:	4643      	mov	r3, r8
 8001cee:	3101      	adds	r1, #1
 8001cf0:	468c      	mov	ip, r1
 8001cf2:	4649      	mov	r1, r9
 8001cf4:	407b      	eors	r3, r7
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	290f      	cmp	r1, #15
 8001cfa:	d900      	bls.n	8001cfe <__aeabi_dmul+0x96>
 8001cfc:	e07e      	b.n	8001dfc <__aeabi_dmul+0x194>
 8001cfe:	4bc2      	ldr	r3, [pc, #776]	; (8002008 <__aeabi_dmul+0x3a0>)
 8001d00:	0089      	lsls	r1, r1, #2
 8001d02:	5859      	ldr	r1, [r3, r1]
 8001d04:	468f      	mov	pc, r1
 8001d06:	4652      	mov	r2, sl
 8001d08:	9b00      	ldr	r3, [sp, #0]
 8001d0a:	4332      	orrs	r2, r6
 8001d0c:	d000      	beq.n	8001d10 <__aeabi_dmul+0xa8>
 8001d0e:	e156      	b.n	8001fbe <__aeabi_dmul+0x356>
 8001d10:	49bb      	ldr	r1, [pc, #748]	; (8002000 <__aeabi_dmul+0x398>)
 8001d12:	2600      	movs	r6, #0
 8001d14:	468c      	mov	ip, r1
 8001d16:	4463      	add	r3, ip
 8001d18:	4649      	mov	r1, r9
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	4319      	orrs	r1, r3
 8001d20:	4689      	mov	r9, r1
 8001d22:	2002      	movs	r0, #2
 8001d24:	e7e1      	b.n	8001cea <__aeabi_dmul+0x82>
 8001d26:	4643      	mov	r3, r8
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	0034      	movs	r4, r6
 8001d2c:	0015      	movs	r5, r2
 8001d2e:	4683      	mov	fp, r0
 8001d30:	465b      	mov	r3, fp
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d05e      	beq.n	8001df4 <__aeabi_dmul+0x18c>
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d100      	bne.n	8001d3c <__aeabi_dmul+0xd4>
 8001d3a:	e1f3      	b.n	8002124 <__aeabi_dmul+0x4bc>
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d000      	beq.n	8001d42 <__aeabi_dmul+0xda>
 8001d40:	e118      	b.n	8001f74 <__aeabi_dmul+0x30c>
 8001d42:	2200      	movs	r2, #0
 8001d44:	2400      	movs	r4, #0
 8001d46:	2500      	movs	r5, #0
 8001d48:	9b01      	ldr	r3, [sp, #4]
 8001d4a:	0512      	lsls	r2, r2, #20
 8001d4c:	4322      	orrs	r2, r4
 8001d4e:	07db      	lsls	r3, r3, #31
 8001d50:	431a      	orrs	r2, r3
 8001d52:	0028      	movs	r0, r5
 8001d54:	0011      	movs	r1, r2
 8001d56:	b007      	add	sp, #28
 8001d58:	bcf0      	pop	{r4, r5, r6, r7}
 8001d5a:	46bb      	mov	fp, r7
 8001d5c:	46b2      	mov	sl, r6
 8001d5e:	46a9      	mov	r9, r5
 8001d60:	46a0      	mov	r8, r4
 8001d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d64:	0025      	movs	r5, r4
 8001d66:	4305      	orrs	r5, r0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dmul+0x104>
 8001d6a:	e141      	b.n	8001ff0 <__aeabi_dmul+0x388>
 8001d6c:	2c00      	cmp	r4, #0
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dmul+0x10a>
 8001d70:	e1ad      	b.n	80020ce <__aeabi_dmul+0x466>
 8001d72:	0020      	movs	r0, r4
 8001d74:	f000 fef0 	bl	8002b58 <__clzsi2>
 8001d78:	0001      	movs	r1, r0
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	390b      	subs	r1, #11
 8001d7e:	231d      	movs	r3, #29
 8001d80:	0010      	movs	r0, r2
 8001d82:	1a5b      	subs	r3, r3, r1
 8001d84:	0031      	movs	r1, r6
 8001d86:	0035      	movs	r5, r6
 8001d88:	3808      	subs	r0, #8
 8001d8a:	4084      	lsls	r4, r0
 8001d8c:	40d9      	lsrs	r1, r3
 8001d8e:	4085      	lsls	r5, r0
 8001d90:	430c      	orrs	r4, r1
 8001d92:	489e      	ldr	r0, [pc, #632]	; (800200c <__aeabi_dmul+0x3a4>)
 8001d94:	1a83      	subs	r3, r0, r2
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	4699      	mov	r9, r3
 8001d9c:	469b      	mov	fp, r3
 8001d9e:	e786      	b.n	8001cae <__aeabi_dmul+0x46>
 8001da0:	0005      	movs	r5, r0
 8001da2:	4325      	orrs	r5, r4
 8001da4:	d000      	beq.n	8001da8 <__aeabi_dmul+0x140>
 8001da6:	e11c      	b.n	8001fe2 <__aeabi_dmul+0x37a>
 8001da8:	2208      	movs	r2, #8
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2302      	movs	r3, #2
 8001dae:	2400      	movs	r4, #0
 8001db0:	4691      	mov	r9, r2
 8001db2:	469b      	mov	fp, r3
 8001db4:	e77b      	b.n	8001cae <__aeabi_dmul+0x46>
 8001db6:	4652      	mov	r2, sl
 8001db8:	4332      	orrs	r2, r6
 8001dba:	d100      	bne.n	8001dbe <__aeabi_dmul+0x156>
 8001dbc:	e10a      	b.n	8001fd4 <__aeabi_dmul+0x36c>
 8001dbe:	2e00      	cmp	r6, #0
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dmul+0x15c>
 8001dc2:	e176      	b.n	80020b2 <__aeabi_dmul+0x44a>
 8001dc4:	0030      	movs	r0, r6
 8001dc6:	f000 fec7 	bl	8002b58 <__clzsi2>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	3a0b      	subs	r2, #11
 8001dce:	231d      	movs	r3, #29
 8001dd0:	0001      	movs	r1, r0
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	4652      	mov	r2, sl
 8001dd6:	3908      	subs	r1, #8
 8001dd8:	40da      	lsrs	r2, r3
 8001dda:	408e      	lsls	r6, r1
 8001ddc:	4316      	orrs	r6, r2
 8001dde:	4652      	mov	r2, sl
 8001de0:	408a      	lsls	r2, r1
 8001de2:	9b00      	ldr	r3, [sp, #0]
 8001de4:	4989      	ldr	r1, [pc, #548]	; (800200c <__aeabi_dmul+0x3a4>)
 8001de6:	1a18      	subs	r0, r3, r0
 8001de8:	0003      	movs	r3, r0
 8001dea:	468c      	mov	ip, r1
 8001dec:	4463      	add	r3, ip
 8001dee:	2000      	movs	r0, #0
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	e77a      	b.n	8001cea <__aeabi_dmul+0x82>
 8001df4:	2400      	movs	r4, #0
 8001df6:	2500      	movs	r5, #0
 8001df8:	4a81      	ldr	r2, [pc, #516]	; (8002000 <__aeabi_dmul+0x398>)
 8001dfa:	e7a5      	b.n	8001d48 <__aeabi_dmul+0xe0>
 8001dfc:	0c2f      	lsrs	r7, r5, #16
 8001dfe:	042d      	lsls	r5, r5, #16
 8001e00:	0c2d      	lsrs	r5, r5, #16
 8001e02:	002b      	movs	r3, r5
 8001e04:	0c11      	lsrs	r1, r2, #16
 8001e06:	0412      	lsls	r2, r2, #16
 8001e08:	0c12      	lsrs	r2, r2, #16
 8001e0a:	4353      	muls	r3, r2
 8001e0c:	4698      	mov	r8, r3
 8001e0e:	0013      	movs	r3, r2
 8001e10:	0028      	movs	r0, r5
 8001e12:	437b      	muls	r3, r7
 8001e14:	4699      	mov	r9, r3
 8001e16:	4348      	muls	r0, r1
 8001e18:	4448      	add	r0, r9
 8001e1a:	4683      	mov	fp, r0
 8001e1c:	4640      	mov	r0, r8
 8001e1e:	000b      	movs	r3, r1
 8001e20:	0c00      	lsrs	r0, r0, #16
 8001e22:	4682      	mov	sl, r0
 8001e24:	4658      	mov	r0, fp
 8001e26:	437b      	muls	r3, r7
 8001e28:	4450      	add	r0, sl
 8001e2a:	9302      	str	r3, [sp, #8]
 8001e2c:	4581      	cmp	r9, r0
 8001e2e:	d906      	bls.n	8001e3e <__aeabi_dmul+0x1d6>
 8001e30:	469a      	mov	sl, r3
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	025b      	lsls	r3, r3, #9
 8001e36:	4699      	mov	r9, r3
 8001e38:	44ca      	add	sl, r9
 8001e3a:	4653      	mov	r3, sl
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	0c03      	lsrs	r3, r0, #16
 8001e40:	469b      	mov	fp, r3
 8001e42:	4643      	mov	r3, r8
 8001e44:	041b      	lsls	r3, r3, #16
 8001e46:	0400      	lsls	r0, r0, #16
 8001e48:	0c1b      	lsrs	r3, r3, #16
 8001e4a:	4698      	mov	r8, r3
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	4443      	add	r3, r8
 8001e50:	9304      	str	r3, [sp, #16]
 8001e52:	0c33      	lsrs	r3, r6, #16
 8001e54:	4699      	mov	r9, r3
 8001e56:	002b      	movs	r3, r5
 8001e58:	0436      	lsls	r6, r6, #16
 8001e5a:	0c36      	lsrs	r6, r6, #16
 8001e5c:	4373      	muls	r3, r6
 8001e5e:	4698      	mov	r8, r3
 8001e60:	0033      	movs	r3, r6
 8001e62:	437b      	muls	r3, r7
 8001e64:	469a      	mov	sl, r3
 8001e66:	464b      	mov	r3, r9
 8001e68:	435d      	muls	r5, r3
 8001e6a:	435f      	muls	r7, r3
 8001e6c:	4643      	mov	r3, r8
 8001e6e:	4455      	add	r5, sl
 8001e70:	0c18      	lsrs	r0, r3, #16
 8001e72:	1940      	adds	r0, r0, r5
 8001e74:	4582      	cmp	sl, r0
 8001e76:	d903      	bls.n	8001e80 <__aeabi_dmul+0x218>
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	025b      	lsls	r3, r3, #9
 8001e7c:	469a      	mov	sl, r3
 8001e7e:	4457      	add	r7, sl
 8001e80:	0c05      	lsrs	r5, r0, #16
 8001e82:	19eb      	adds	r3, r5, r7
 8001e84:	9305      	str	r3, [sp, #20]
 8001e86:	4643      	mov	r3, r8
 8001e88:	041d      	lsls	r5, r3, #16
 8001e8a:	0c2d      	lsrs	r5, r5, #16
 8001e8c:	0400      	lsls	r0, r0, #16
 8001e8e:	1940      	adds	r0, r0, r5
 8001e90:	0c25      	lsrs	r5, r4, #16
 8001e92:	0424      	lsls	r4, r4, #16
 8001e94:	0c24      	lsrs	r4, r4, #16
 8001e96:	0027      	movs	r7, r4
 8001e98:	4357      	muls	r7, r2
 8001e9a:	436a      	muls	r2, r5
 8001e9c:	4690      	mov	r8, r2
 8001e9e:	002a      	movs	r2, r5
 8001ea0:	0c3b      	lsrs	r3, r7, #16
 8001ea2:	469a      	mov	sl, r3
 8001ea4:	434a      	muls	r2, r1
 8001ea6:	4361      	muls	r1, r4
 8001ea8:	4441      	add	r1, r8
 8001eaa:	4451      	add	r1, sl
 8001eac:	4483      	add	fp, r0
 8001eae:	4588      	cmp	r8, r1
 8001eb0:	d903      	bls.n	8001eba <__aeabi_dmul+0x252>
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	025b      	lsls	r3, r3, #9
 8001eb6:	4698      	mov	r8, r3
 8001eb8:	4442      	add	r2, r8
 8001eba:	043f      	lsls	r7, r7, #16
 8001ebc:	0c0b      	lsrs	r3, r1, #16
 8001ebe:	0c3f      	lsrs	r7, r7, #16
 8001ec0:	0409      	lsls	r1, r1, #16
 8001ec2:	19c9      	adds	r1, r1, r7
 8001ec4:	0027      	movs	r7, r4
 8001ec6:	4698      	mov	r8, r3
 8001ec8:	464b      	mov	r3, r9
 8001eca:	4377      	muls	r7, r6
 8001ecc:	435c      	muls	r4, r3
 8001ece:	436e      	muls	r6, r5
 8001ed0:	435d      	muls	r5, r3
 8001ed2:	0c3b      	lsrs	r3, r7, #16
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	19a4      	adds	r4, r4, r6
 8001ed8:	444c      	add	r4, r9
 8001eda:	4442      	add	r2, r8
 8001edc:	9503      	str	r5, [sp, #12]
 8001ede:	42a6      	cmp	r6, r4
 8001ee0:	d904      	bls.n	8001eec <__aeabi_dmul+0x284>
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	025b      	lsls	r3, r3, #9
 8001ee6:	4698      	mov	r8, r3
 8001ee8:	4445      	add	r5, r8
 8001eea:	9503      	str	r5, [sp, #12]
 8001eec:	9b02      	ldr	r3, [sp, #8]
 8001eee:	043f      	lsls	r7, r7, #16
 8001ef0:	445b      	add	r3, fp
 8001ef2:	001e      	movs	r6, r3
 8001ef4:	4283      	cmp	r3, r0
 8001ef6:	4180      	sbcs	r0, r0
 8001ef8:	0423      	lsls	r3, r4, #16
 8001efa:	4698      	mov	r8, r3
 8001efc:	9b05      	ldr	r3, [sp, #20]
 8001efe:	0c3f      	lsrs	r7, r7, #16
 8001f00:	4447      	add	r7, r8
 8001f02:	4698      	mov	r8, r3
 8001f04:	1876      	adds	r6, r6, r1
 8001f06:	428e      	cmp	r6, r1
 8001f08:	4189      	sbcs	r1, r1
 8001f0a:	4447      	add	r7, r8
 8001f0c:	4240      	negs	r0, r0
 8001f0e:	183d      	adds	r5, r7, r0
 8001f10:	46a8      	mov	r8, r5
 8001f12:	4693      	mov	fp, r2
 8001f14:	4249      	negs	r1, r1
 8001f16:	468a      	mov	sl, r1
 8001f18:	44c3      	add	fp, r8
 8001f1a:	429f      	cmp	r7, r3
 8001f1c:	41bf      	sbcs	r7, r7
 8001f1e:	4580      	cmp	r8, r0
 8001f20:	4180      	sbcs	r0, r0
 8001f22:	9b03      	ldr	r3, [sp, #12]
 8001f24:	44da      	add	sl, fp
 8001f26:	4698      	mov	r8, r3
 8001f28:	4653      	mov	r3, sl
 8001f2a:	4240      	negs	r0, r0
 8001f2c:	427f      	negs	r7, r7
 8001f2e:	4307      	orrs	r7, r0
 8001f30:	0c24      	lsrs	r4, r4, #16
 8001f32:	4593      	cmp	fp, r2
 8001f34:	4192      	sbcs	r2, r2
 8001f36:	458a      	cmp	sl, r1
 8001f38:	4189      	sbcs	r1, r1
 8001f3a:	193f      	adds	r7, r7, r4
 8001f3c:	0ddc      	lsrs	r4, r3, #23
 8001f3e:	9b04      	ldr	r3, [sp, #16]
 8001f40:	0275      	lsls	r5, r6, #9
 8001f42:	431d      	orrs	r5, r3
 8001f44:	1e68      	subs	r0, r5, #1
 8001f46:	4185      	sbcs	r5, r0
 8001f48:	4653      	mov	r3, sl
 8001f4a:	4252      	negs	r2, r2
 8001f4c:	4249      	negs	r1, r1
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	18bf      	adds	r7, r7, r2
 8001f52:	4447      	add	r7, r8
 8001f54:	0df6      	lsrs	r6, r6, #23
 8001f56:	027f      	lsls	r7, r7, #9
 8001f58:	4335      	orrs	r5, r6
 8001f5a:	025a      	lsls	r2, r3, #9
 8001f5c:	433c      	orrs	r4, r7
 8001f5e:	4315      	orrs	r5, r2
 8001f60:	01fb      	lsls	r3, r7, #7
 8001f62:	d400      	bmi.n	8001f66 <__aeabi_dmul+0x2fe>
 8001f64:	e0c1      	b.n	80020ea <__aeabi_dmul+0x482>
 8001f66:	2101      	movs	r1, #1
 8001f68:	086a      	lsrs	r2, r5, #1
 8001f6a:	400d      	ands	r5, r1
 8001f6c:	4315      	orrs	r5, r2
 8001f6e:	07e2      	lsls	r2, r4, #31
 8001f70:	4315      	orrs	r5, r2
 8001f72:	0864      	lsrs	r4, r4, #1
 8001f74:	4926      	ldr	r1, [pc, #152]	; (8002010 <__aeabi_dmul+0x3a8>)
 8001f76:	4461      	add	r1, ip
 8001f78:	2900      	cmp	r1, #0
 8001f7a:	dd56      	ble.n	800202a <__aeabi_dmul+0x3c2>
 8001f7c:	076b      	lsls	r3, r5, #29
 8001f7e:	d009      	beq.n	8001f94 <__aeabi_dmul+0x32c>
 8001f80:	220f      	movs	r2, #15
 8001f82:	402a      	ands	r2, r5
 8001f84:	2a04      	cmp	r2, #4
 8001f86:	d005      	beq.n	8001f94 <__aeabi_dmul+0x32c>
 8001f88:	1d2a      	adds	r2, r5, #4
 8001f8a:	42aa      	cmp	r2, r5
 8001f8c:	41ad      	sbcs	r5, r5
 8001f8e:	426d      	negs	r5, r5
 8001f90:	1964      	adds	r4, r4, r5
 8001f92:	0015      	movs	r5, r2
 8001f94:	01e3      	lsls	r3, r4, #7
 8001f96:	d504      	bpl.n	8001fa2 <__aeabi_dmul+0x33a>
 8001f98:	2180      	movs	r1, #128	; 0x80
 8001f9a:	4a1e      	ldr	r2, [pc, #120]	; (8002014 <__aeabi_dmul+0x3ac>)
 8001f9c:	00c9      	lsls	r1, r1, #3
 8001f9e:	4014      	ands	r4, r2
 8001fa0:	4461      	add	r1, ip
 8001fa2:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <__aeabi_dmul+0x3b0>)
 8001fa4:	4291      	cmp	r1, r2
 8001fa6:	dd00      	ble.n	8001faa <__aeabi_dmul+0x342>
 8001fa8:	e724      	b.n	8001df4 <__aeabi_dmul+0x18c>
 8001faa:	0762      	lsls	r2, r4, #29
 8001fac:	08ed      	lsrs	r5, r5, #3
 8001fae:	0264      	lsls	r4, r4, #9
 8001fb0:	0549      	lsls	r1, r1, #21
 8001fb2:	4315      	orrs	r5, r2
 8001fb4:	0b24      	lsrs	r4, r4, #12
 8001fb6:	0d4a      	lsrs	r2, r1, #21
 8001fb8:	e6c6      	b.n	8001d48 <__aeabi_dmul+0xe0>
 8001fba:	9701      	str	r7, [sp, #4]
 8001fbc:	e6b8      	b.n	8001d30 <__aeabi_dmul+0xc8>
 8001fbe:	4a10      	ldr	r2, [pc, #64]	; (8002000 <__aeabi_dmul+0x398>)
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	4694      	mov	ip, r2
 8001fc4:	4463      	add	r3, ip
 8001fc6:	464a      	mov	r2, r9
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2303      	movs	r3, #3
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	4691      	mov	r9, r2
 8001fd0:	4652      	mov	r2, sl
 8001fd2:	e68a      	b.n	8001cea <__aeabi_dmul+0x82>
 8001fd4:	4649      	mov	r1, r9
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	4319      	orrs	r1, r3
 8001fda:	4689      	mov	r9, r1
 8001fdc:	2600      	movs	r6, #0
 8001fde:	2001      	movs	r0, #1
 8001fe0:	e683      	b.n	8001cea <__aeabi_dmul+0x82>
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	0005      	movs	r5, r0
 8001fea:	4691      	mov	r9, r2
 8001fec:	469b      	mov	fp, r3
 8001fee:	e65e      	b.n	8001cae <__aeabi_dmul+0x46>
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	4699      	mov	r9, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	2400      	movs	r4, #0
 8001ffc:	469b      	mov	fp, r3
 8001ffe:	e656      	b.n	8001cae <__aeabi_dmul+0x46>
 8002000:	000007ff 	.word	0x000007ff
 8002004:	fffffc01 	.word	0xfffffc01
 8002008:	08007e1c 	.word	0x08007e1c
 800200c:	fffffc0d 	.word	0xfffffc0d
 8002010:	000003ff 	.word	0x000003ff
 8002014:	feffffff 	.word	0xfeffffff
 8002018:	000007fe 	.word	0x000007fe
 800201c:	2300      	movs	r3, #0
 800201e:	2480      	movs	r4, #128	; 0x80
 8002020:	2500      	movs	r5, #0
 8002022:	4a44      	ldr	r2, [pc, #272]	; (8002134 <__aeabi_dmul+0x4cc>)
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	0324      	lsls	r4, r4, #12
 8002028:	e68e      	b.n	8001d48 <__aeabi_dmul+0xe0>
 800202a:	2001      	movs	r0, #1
 800202c:	1a40      	subs	r0, r0, r1
 800202e:	2838      	cmp	r0, #56	; 0x38
 8002030:	dd00      	ble.n	8002034 <__aeabi_dmul+0x3cc>
 8002032:	e686      	b.n	8001d42 <__aeabi_dmul+0xda>
 8002034:	281f      	cmp	r0, #31
 8002036:	dd5b      	ble.n	80020f0 <__aeabi_dmul+0x488>
 8002038:	221f      	movs	r2, #31
 800203a:	0023      	movs	r3, r4
 800203c:	4252      	negs	r2, r2
 800203e:	1a51      	subs	r1, r2, r1
 8002040:	40cb      	lsrs	r3, r1
 8002042:	0019      	movs	r1, r3
 8002044:	2820      	cmp	r0, #32
 8002046:	d003      	beq.n	8002050 <__aeabi_dmul+0x3e8>
 8002048:	4a3b      	ldr	r2, [pc, #236]	; (8002138 <__aeabi_dmul+0x4d0>)
 800204a:	4462      	add	r2, ip
 800204c:	4094      	lsls	r4, r2
 800204e:	4325      	orrs	r5, r4
 8002050:	1e6a      	subs	r2, r5, #1
 8002052:	4195      	sbcs	r5, r2
 8002054:	002a      	movs	r2, r5
 8002056:	430a      	orrs	r2, r1
 8002058:	2107      	movs	r1, #7
 800205a:	000d      	movs	r5, r1
 800205c:	2400      	movs	r4, #0
 800205e:	4015      	ands	r5, r2
 8002060:	4211      	tst	r1, r2
 8002062:	d05b      	beq.n	800211c <__aeabi_dmul+0x4b4>
 8002064:	210f      	movs	r1, #15
 8002066:	2400      	movs	r4, #0
 8002068:	4011      	ands	r1, r2
 800206a:	2904      	cmp	r1, #4
 800206c:	d053      	beq.n	8002116 <__aeabi_dmul+0x4ae>
 800206e:	1d11      	adds	r1, r2, #4
 8002070:	4291      	cmp	r1, r2
 8002072:	4192      	sbcs	r2, r2
 8002074:	4252      	negs	r2, r2
 8002076:	18a4      	adds	r4, r4, r2
 8002078:	000a      	movs	r2, r1
 800207a:	0223      	lsls	r3, r4, #8
 800207c:	d54b      	bpl.n	8002116 <__aeabi_dmul+0x4ae>
 800207e:	2201      	movs	r2, #1
 8002080:	2400      	movs	r4, #0
 8002082:	2500      	movs	r5, #0
 8002084:	e660      	b.n	8001d48 <__aeabi_dmul+0xe0>
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	031b      	lsls	r3, r3, #12
 800208a:	421c      	tst	r4, r3
 800208c:	d009      	beq.n	80020a2 <__aeabi_dmul+0x43a>
 800208e:	421e      	tst	r6, r3
 8002090:	d107      	bne.n	80020a2 <__aeabi_dmul+0x43a>
 8002092:	4333      	orrs	r3, r6
 8002094:	031c      	lsls	r4, r3, #12
 8002096:	4643      	mov	r3, r8
 8002098:	0015      	movs	r5, r2
 800209a:	0b24      	lsrs	r4, r4, #12
 800209c:	4a25      	ldr	r2, [pc, #148]	; (8002134 <__aeabi_dmul+0x4cc>)
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	e652      	b.n	8001d48 <__aeabi_dmul+0xe0>
 80020a2:	2280      	movs	r2, #128	; 0x80
 80020a4:	0312      	lsls	r2, r2, #12
 80020a6:	4314      	orrs	r4, r2
 80020a8:	0324      	lsls	r4, r4, #12
 80020aa:	4a22      	ldr	r2, [pc, #136]	; (8002134 <__aeabi_dmul+0x4cc>)
 80020ac:	0b24      	lsrs	r4, r4, #12
 80020ae:	9701      	str	r7, [sp, #4]
 80020b0:	e64a      	b.n	8001d48 <__aeabi_dmul+0xe0>
 80020b2:	f000 fd51 	bl	8002b58 <__clzsi2>
 80020b6:	0003      	movs	r3, r0
 80020b8:	001a      	movs	r2, r3
 80020ba:	3215      	adds	r2, #21
 80020bc:	3020      	adds	r0, #32
 80020be:	2a1c      	cmp	r2, #28
 80020c0:	dc00      	bgt.n	80020c4 <__aeabi_dmul+0x45c>
 80020c2:	e684      	b.n	8001dce <__aeabi_dmul+0x166>
 80020c4:	4656      	mov	r6, sl
 80020c6:	3b08      	subs	r3, #8
 80020c8:	2200      	movs	r2, #0
 80020ca:	409e      	lsls	r6, r3
 80020cc:	e689      	b.n	8001de2 <__aeabi_dmul+0x17a>
 80020ce:	f000 fd43 	bl	8002b58 <__clzsi2>
 80020d2:	0001      	movs	r1, r0
 80020d4:	0002      	movs	r2, r0
 80020d6:	3115      	adds	r1, #21
 80020d8:	3220      	adds	r2, #32
 80020da:	291c      	cmp	r1, #28
 80020dc:	dc00      	bgt.n	80020e0 <__aeabi_dmul+0x478>
 80020de:	e64e      	b.n	8001d7e <__aeabi_dmul+0x116>
 80020e0:	0034      	movs	r4, r6
 80020e2:	3808      	subs	r0, #8
 80020e4:	2500      	movs	r5, #0
 80020e6:	4084      	lsls	r4, r0
 80020e8:	e653      	b.n	8001d92 <__aeabi_dmul+0x12a>
 80020ea:	9b00      	ldr	r3, [sp, #0]
 80020ec:	469c      	mov	ip, r3
 80020ee:	e741      	b.n	8001f74 <__aeabi_dmul+0x30c>
 80020f0:	4912      	ldr	r1, [pc, #72]	; (800213c <__aeabi_dmul+0x4d4>)
 80020f2:	0022      	movs	r2, r4
 80020f4:	4461      	add	r1, ip
 80020f6:	002e      	movs	r6, r5
 80020f8:	408d      	lsls	r5, r1
 80020fa:	408a      	lsls	r2, r1
 80020fc:	40c6      	lsrs	r6, r0
 80020fe:	1e69      	subs	r1, r5, #1
 8002100:	418d      	sbcs	r5, r1
 8002102:	4332      	orrs	r2, r6
 8002104:	432a      	orrs	r2, r5
 8002106:	40c4      	lsrs	r4, r0
 8002108:	0753      	lsls	r3, r2, #29
 800210a:	d0b6      	beq.n	800207a <__aeabi_dmul+0x412>
 800210c:	210f      	movs	r1, #15
 800210e:	4011      	ands	r1, r2
 8002110:	2904      	cmp	r1, #4
 8002112:	d1ac      	bne.n	800206e <__aeabi_dmul+0x406>
 8002114:	e7b1      	b.n	800207a <__aeabi_dmul+0x412>
 8002116:	0765      	lsls	r5, r4, #29
 8002118:	0264      	lsls	r4, r4, #9
 800211a:	0b24      	lsrs	r4, r4, #12
 800211c:	08d2      	lsrs	r2, r2, #3
 800211e:	4315      	orrs	r5, r2
 8002120:	2200      	movs	r2, #0
 8002122:	e611      	b.n	8001d48 <__aeabi_dmul+0xe0>
 8002124:	2280      	movs	r2, #128	; 0x80
 8002126:	0312      	lsls	r2, r2, #12
 8002128:	4314      	orrs	r4, r2
 800212a:	0324      	lsls	r4, r4, #12
 800212c:	4a01      	ldr	r2, [pc, #4]	; (8002134 <__aeabi_dmul+0x4cc>)
 800212e:	0b24      	lsrs	r4, r4, #12
 8002130:	e60a      	b.n	8001d48 <__aeabi_dmul+0xe0>
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	000007ff 	.word	0x000007ff
 8002138:	0000043e 	.word	0x0000043e
 800213c:	0000041e 	.word	0x0000041e

08002140 <__aeabi_dsub>:
 8002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002142:	4657      	mov	r7, sl
 8002144:	464e      	mov	r6, r9
 8002146:	4645      	mov	r5, r8
 8002148:	46de      	mov	lr, fp
 800214a:	0004      	movs	r4, r0
 800214c:	b5e0      	push	{r5, r6, r7, lr}
 800214e:	001f      	movs	r7, r3
 8002150:	0010      	movs	r0, r2
 8002152:	030b      	lsls	r3, r1, #12
 8002154:	0f62      	lsrs	r2, r4, #29
 8002156:	004e      	lsls	r6, r1, #1
 8002158:	0fcd      	lsrs	r5, r1, #31
 800215a:	0a5b      	lsrs	r3, r3, #9
 800215c:	0339      	lsls	r1, r7, #12
 800215e:	4313      	orrs	r3, r2
 8002160:	0a49      	lsrs	r1, r1, #9
 8002162:	00e2      	lsls	r2, r4, #3
 8002164:	0f44      	lsrs	r4, r0, #29
 8002166:	4321      	orrs	r1, r4
 8002168:	4cc2      	ldr	r4, [pc, #776]	; (8002474 <__aeabi_dsub+0x334>)
 800216a:	4691      	mov	r9, r2
 800216c:	4692      	mov	sl, r2
 800216e:	00c0      	lsls	r0, r0, #3
 8002170:	007a      	lsls	r2, r7, #1
 8002172:	4680      	mov	r8, r0
 8002174:	0d76      	lsrs	r6, r6, #21
 8002176:	0d52      	lsrs	r2, r2, #21
 8002178:	0fff      	lsrs	r7, r7, #31
 800217a:	42a2      	cmp	r2, r4
 800217c:	d100      	bne.n	8002180 <__aeabi_dsub+0x40>
 800217e:	e0b4      	b.n	80022ea <__aeabi_dsub+0x1aa>
 8002180:	2401      	movs	r4, #1
 8002182:	4067      	eors	r7, r4
 8002184:	46bb      	mov	fp, r7
 8002186:	42bd      	cmp	r5, r7
 8002188:	d100      	bne.n	800218c <__aeabi_dsub+0x4c>
 800218a:	e088      	b.n	800229e <__aeabi_dsub+0x15e>
 800218c:	1ab4      	subs	r4, r6, r2
 800218e:	46a4      	mov	ip, r4
 8002190:	2c00      	cmp	r4, #0
 8002192:	dc00      	bgt.n	8002196 <__aeabi_dsub+0x56>
 8002194:	e0b2      	b.n	80022fc <__aeabi_dsub+0x1bc>
 8002196:	2a00      	cmp	r2, #0
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x5c>
 800219a:	e0c5      	b.n	8002328 <__aeabi_dsub+0x1e8>
 800219c:	4ab5      	ldr	r2, [pc, #724]	; (8002474 <__aeabi_dsub+0x334>)
 800219e:	4296      	cmp	r6, r2
 80021a0:	d100      	bne.n	80021a4 <__aeabi_dsub+0x64>
 80021a2:	e28b      	b.n	80026bc <__aeabi_dsub+0x57c>
 80021a4:	2280      	movs	r2, #128	; 0x80
 80021a6:	0412      	lsls	r2, r2, #16
 80021a8:	4311      	orrs	r1, r2
 80021aa:	4662      	mov	r2, ip
 80021ac:	2a38      	cmp	r2, #56	; 0x38
 80021ae:	dd00      	ble.n	80021b2 <__aeabi_dsub+0x72>
 80021b0:	e1a1      	b.n	80024f6 <__aeabi_dsub+0x3b6>
 80021b2:	2a1f      	cmp	r2, #31
 80021b4:	dd00      	ble.n	80021b8 <__aeabi_dsub+0x78>
 80021b6:	e216      	b.n	80025e6 <__aeabi_dsub+0x4a6>
 80021b8:	2720      	movs	r7, #32
 80021ba:	000c      	movs	r4, r1
 80021bc:	1abf      	subs	r7, r7, r2
 80021be:	40bc      	lsls	r4, r7
 80021c0:	0002      	movs	r2, r0
 80021c2:	46a0      	mov	r8, r4
 80021c4:	4664      	mov	r4, ip
 80021c6:	40b8      	lsls	r0, r7
 80021c8:	40e2      	lsrs	r2, r4
 80021ca:	4644      	mov	r4, r8
 80021cc:	4314      	orrs	r4, r2
 80021ce:	0002      	movs	r2, r0
 80021d0:	1e50      	subs	r0, r2, #1
 80021d2:	4182      	sbcs	r2, r0
 80021d4:	4660      	mov	r0, ip
 80021d6:	40c1      	lsrs	r1, r0
 80021d8:	4322      	orrs	r2, r4
 80021da:	1a5b      	subs	r3, r3, r1
 80021dc:	4649      	mov	r1, r9
 80021de:	1a8c      	subs	r4, r1, r2
 80021e0:	45a1      	cmp	r9, r4
 80021e2:	4192      	sbcs	r2, r2
 80021e4:	4252      	negs	r2, r2
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	4698      	mov	r8, r3
 80021ea:	4643      	mov	r3, r8
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	d400      	bmi.n	80021f2 <__aeabi_dsub+0xb2>
 80021f0:	e117      	b.n	8002422 <__aeabi_dsub+0x2e2>
 80021f2:	4643      	mov	r3, r8
 80021f4:	025b      	lsls	r3, r3, #9
 80021f6:	0a5b      	lsrs	r3, r3, #9
 80021f8:	4698      	mov	r8, r3
 80021fa:	4643      	mov	r3, r8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d100      	bne.n	8002202 <__aeabi_dsub+0xc2>
 8002200:	e16c      	b.n	80024dc <__aeabi_dsub+0x39c>
 8002202:	4640      	mov	r0, r8
 8002204:	f000 fca8 	bl	8002b58 <__clzsi2>
 8002208:	0002      	movs	r2, r0
 800220a:	3a08      	subs	r2, #8
 800220c:	2120      	movs	r1, #32
 800220e:	0020      	movs	r0, r4
 8002210:	4643      	mov	r3, r8
 8002212:	1a89      	subs	r1, r1, r2
 8002214:	4093      	lsls	r3, r2
 8002216:	40c8      	lsrs	r0, r1
 8002218:	4094      	lsls	r4, r2
 800221a:	4303      	orrs	r3, r0
 800221c:	4296      	cmp	r6, r2
 800221e:	dd00      	ble.n	8002222 <__aeabi_dsub+0xe2>
 8002220:	e157      	b.n	80024d2 <__aeabi_dsub+0x392>
 8002222:	1b96      	subs	r6, r2, r6
 8002224:	1c71      	adds	r1, r6, #1
 8002226:	291f      	cmp	r1, #31
 8002228:	dd00      	ble.n	800222c <__aeabi_dsub+0xec>
 800222a:	e1cb      	b.n	80025c4 <__aeabi_dsub+0x484>
 800222c:	2220      	movs	r2, #32
 800222e:	0018      	movs	r0, r3
 8002230:	0026      	movs	r6, r4
 8002232:	1a52      	subs	r2, r2, r1
 8002234:	4094      	lsls	r4, r2
 8002236:	4090      	lsls	r0, r2
 8002238:	40ce      	lsrs	r6, r1
 800223a:	40cb      	lsrs	r3, r1
 800223c:	1e62      	subs	r2, r4, #1
 800223e:	4194      	sbcs	r4, r2
 8002240:	4330      	orrs	r0, r6
 8002242:	4698      	mov	r8, r3
 8002244:	2600      	movs	r6, #0
 8002246:	4304      	orrs	r4, r0
 8002248:	0763      	lsls	r3, r4, #29
 800224a:	d009      	beq.n	8002260 <__aeabi_dsub+0x120>
 800224c:	230f      	movs	r3, #15
 800224e:	4023      	ands	r3, r4
 8002250:	2b04      	cmp	r3, #4
 8002252:	d005      	beq.n	8002260 <__aeabi_dsub+0x120>
 8002254:	1d23      	adds	r3, r4, #4
 8002256:	42a3      	cmp	r3, r4
 8002258:	41a4      	sbcs	r4, r4
 800225a:	4264      	negs	r4, r4
 800225c:	44a0      	add	r8, r4
 800225e:	001c      	movs	r4, r3
 8002260:	4643      	mov	r3, r8
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	d400      	bmi.n	8002268 <__aeabi_dsub+0x128>
 8002266:	e0df      	b.n	8002428 <__aeabi_dsub+0x2e8>
 8002268:	4b82      	ldr	r3, [pc, #520]	; (8002474 <__aeabi_dsub+0x334>)
 800226a:	3601      	adds	r6, #1
 800226c:	429e      	cmp	r6, r3
 800226e:	d100      	bne.n	8002272 <__aeabi_dsub+0x132>
 8002270:	e0fb      	b.n	800246a <__aeabi_dsub+0x32a>
 8002272:	4642      	mov	r2, r8
 8002274:	4b80      	ldr	r3, [pc, #512]	; (8002478 <__aeabi_dsub+0x338>)
 8002276:	08e4      	lsrs	r4, r4, #3
 8002278:	401a      	ands	r2, r3
 800227a:	0013      	movs	r3, r2
 800227c:	0571      	lsls	r1, r6, #21
 800227e:	0752      	lsls	r2, r2, #29
 8002280:	025b      	lsls	r3, r3, #9
 8002282:	4322      	orrs	r2, r4
 8002284:	0b1b      	lsrs	r3, r3, #12
 8002286:	0d49      	lsrs	r1, r1, #21
 8002288:	0509      	lsls	r1, r1, #20
 800228a:	07ed      	lsls	r5, r5, #31
 800228c:	4319      	orrs	r1, r3
 800228e:	4329      	orrs	r1, r5
 8002290:	0010      	movs	r0, r2
 8002292:	bcf0      	pop	{r4, r5, r6, r7}
 8002294:	46bb      	mov	fp, r7
 8002296:	46b2      	mov	sl, r6
 8002298:	46a9      	mov	r9, r5
 800229a:	46a0      	mov	r8, r4
 800229c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800229e:	1ab4      	subs	r4, r6, r2
 80022a0:	46a4      	mov	ip, r4
 80022a2:	2c00      	cmp	r4, #0
 80022a4:	dd58      	ble.n	8002358 <__aeabi_dsub+0x218>
 80022a6:	2a00      	cmp	r2, #0
 80022a8:	d100      	bne.n	80022ac <__aeabi_dsub+0x16c>
 80022aa:	e09e      	b.n	80023ea <__aeabi_dsub+0x2aa>
 80022ac:	4a71      	ldr	r2, [pc, #452]	; (8002474 <__aeabi_dsub+0x334>)
 80022ae:	4296      	cmp	r6, r2
 80022b0:	d100      	bne.n	80022b4 <__aeabi_dsub+0x174>
 80022b2:	e13b      	b.n	800252c <__aeabi_dsub+0x3ec>
 80022b4:	2280      	movs	r2, #128	; 0x80
 80022b6:	0412      	lsls	r2, r2, #16
 80022b8:	4311      	orrs	r1, r2
 80022ba:	4662      	mov	r2, ip
 80022bc:	2a38      	cmp	r2, #56	; 0x38
 80022be:	dd00      	ble.n	80022c2 <__aeabi_dsub+0x182>
 80022c0:	e0c1      	b.n	8002446 <__aeabi_dsub+0x306>
 80022c2:	2a1f      	cmp	r2, #31
 80022c4:	dc00      	bgt.n	80022c8 <__aeabi_dsub+0x188>
 80022c6:	e1bb      	b.n	8002640 <__aeabi_dsub+0x500>
 80022c8:	000c      	movs	r4, r1
 80022ca:	3a20      	subs	r2, #32
 80022cc:	40d4      	lsrs	r4, r2
 80022ce:	0022      	movs	r2, r4
 80022d0:	4664      	mov	r4, ip
 80022d2:	2c20      	cmp	r4, #32
 80022d4:	d004      	beq.n	80022e0 <__aeabi_dsub+0x1a0>
 80022d6:	2740      	movs	r7, #64	; 0x40
 80022d8:	1b3f      	subs	r7, r7, r4
 80022da:	40b9      	lsls	r1, r7
 80022dc:	4308      	orrs	r0, r1
 80022de:	4680      	mov	r8, r0
 80022e0:	4644      	mov	r4, r8
 80022e2:	1e61      	subs	r1, r4, #1
 80022e4:	418c      	sbcs	r4, r1
 80022e6:	4314      	orrs	r4, r2
 80022e8:	e0b1      	b.n	800244e <__aeabi_dsub+0x30e>
 80022ea:	000c      	movs	r4, r1
 80022ec:	4304      	orrs	r4, r0
 80022ee:	d02a      	beq.n	8002346 <__aeabi_dsub+0x206>
 80022f0:	46bb      	mov	fp, r7
 80022f2:	42bd      	cmp	r5, r7
 80022f4:	d02d      	beq.n	8002352 <__aeabi_dsub+0x212>
 80022f6:	4c61      	ldr	r4, [pc, #388]	; (800247c <__aeabi_dsub+0x33c>)
 80022f8:	46a4      	mov	ip, r4
 80022fa:	44b4      	add	ip, r6
 80022fc:	4664      	mov	r4, ip
 80022fe:	2c00      	cmp	r4, #0
 8002300:	d05c      	beq.n	80023bc <__aeabi_dsub+0x27c>
 8002302:	1b94      	subs	r4, r2, r6
 8002304:	46a4      	mov	ip, r4
 8002306:	2e00      	cmp	r6, #0
 8002308:	d000      	beq.n	800230c <__aeabi_dsub+0x1cc>
 800230a:	e115      	b.n	8002538 <__aeabi_dsub+0x3f8>
 800230c:	464d      	mov	r5, r9
 800230e:	431d      	orrs	r5, r3
 8002310:	d100      	bne.n	8002314 <__aeabi_dsub+0x1d4>
 8002312:	e1c3      	b.n	800269c <__aeabi_dsub+0x55c>
 8002314:	1e65      	subs	r5, r4, #1
 8002316:	2c01      	cmp	r4, #1
 8002318:	d100      	bne.n	800231c <__aeabi_dsub+0x1dc>
 800231a:	e20c      	b.n	8002736 <__aeabi_dsub+0x5f6>
 800231c:	4e55      	ldr	r6, [pc, #340]	; (8002474 <__aeabi_dsub+0x334>)
 800231e:	42b4      	cmp	r4, r6
 8002320:	d100      	bne.n	8002324 <__aeabi_dsub+0x1e4>
 8002322:	e1f8      	b.n	8002716 <__aeabi_dsub+0x5d6>
 8002324:	46ac      	mov	ip, r5
 8002326:	e10e      	b.n	8002546 <__aeabi_dsub+0x406>
 8002328:	000a      	movs	r2, r1
 800232a:	4302      	orrs	r2, r0
 800232c:	d100      	bne.n	8002330 <__aeabi_dsub+0x1f0>
 800232e:	e136      	b.n	800259e <__aeabi_dsub+0x45e>
 8002330:	0022      	movs	r2, r4
 8002332:	3a01      	subs	r2, #1
 8002334:	2c01      	cmp	r4, #1
 8002336:	d100      	bne.n	800233a <__aeabi_dsub+0x1fa>
 8002338:	e1c6      	b.n	80026c8 <__aeabi_dsub+0x588>
 800233a:	4c4e      	ldr	r4, [pc, #312]	; (8002474 <__aeabi_dsub+0x334>)
 800233c:	45a4      	cmp	ip, r4
 800233e:	d100      	bne.n	8002342 <__aeabi_dsub+0x202>
 8002340:	e0f4      	b.n	800252c <__aeabi_dsub+0x3ec>
 8002342:	4694      	mov	ip, r2
 8002344:	e731      	b.n	80021aa <__aeabi_dsub+0x6a>
 8002346:	2401      	movs	r4, #1
 8002348:	4067      	eors	r7, r4
 800234a:	46bb      	mov	fp, r7
 800234c:	42bd      	cmp	r5, r7
 800234e:	d000      	beq.n	8002352 <__aeabi_dsub+0x212>
 8002350:	e71c      	b.n	800218c <__aeabi_dsub+0x4c>
 8002352:	4c4a      	ldr	r4, [pc, #296]	; (800247c <__aeabi_dsub+0x33c>)
 8002354:	46a4      	mov	ip, r4
 8002356:	44b4      	add	ip, r6
 8002358:	4664      	mov	r4, ip
 800235a:	2c00      	cmp	r4, #0
 800235c:	d100      	bne.n	8002360 <__aeabi_dsub+0x220>
 800235e:	e0cf      	b.n	8002500 <__aeabi_dsub+0x3c0>
 8002360:	1b94      	subs	r4, r2, r6
 8002362:	46a4      	mov	ip, r4
 8002364:	2e00      	cmp	r6, #0
 8002366:	d100      	bne.n	800236a <__aeabi_dsub+0x22a>
 8002368:	e15c      	b.n	8002624 <__aeabi_dsub+0x4e4>
 800236a:	4e42      	ldr	r6, [pc, #264]	; (8002474 <__aeabi_dsub+0x334>)
 800236c:	42b2      	cmp	r2, r6
 800236e:	d100      	bne.n	8002372 <__aeabi_dsub+0x232>
 8002370:	e1ec      	b.n	800274c <__aeabi_dsub+0x60c>
 8002372:	2680      	movs	r6, #128	; 0x80
 8002374:	0436      	lsls	r6, r6, #16
 8002376:	4333      	orrs	r3, r6
 8002378:	4664      	mov	r4, ip
 800237a:	2c38      	cmp	r4, #56	; 0x38
 800237c:	dd00      	ble.n	8002380 <__aeabi_dsub+0x240>
 800237e:	e1b3      	b.n	80026e8 <__aeabi_dsub+0x5a8>
 8002380:	2c1f      	cmp	r4, #31
 8002382:	dd00      	ble.n	8002386 <__aeabi_dsub+0x246>
 8002384:	e238      	b.n	80027f8 <__aeabi_dsub+0x6b8>
 8002386:	2620      	movs	r6, #32
 8002388:	1b36      	subs	r6, r6, r4
 800238a:	001c      	movs	r4, r3
 800238c:	40b4      	lsls	r4, r6
 800238e:	464f      	mov	r7, r9
 8002390:	46a0      	mov	r8, r4
 8002392:	4664      	mov	r4, ip
 8002394:	40e7      	lsrs	r7, r4
 8002396:	4644      	mov	r4, r8
 8002398:	433c      	orrs	r4, r7
 800239a:	464f      	mov	r7, r9
 800239c:	40b7      	lsls	r7, r6
 800239e:	003e      	movs	r6, r7
 80023a0:	1e77      	subs	r7, r6, #1
 80023a2:	41be      	sbcs	r6, r7
 80023a4:	4334      	orrs	r4, r6
 80023a6:	4666      	mov	r6, ip
 80023a8:	40f3      	lsrs	r3, r6
 80023aa:	18c9      	adds	r1, r1, r3
 80023ac:	1824      	adds	r4, r4, r0
 80023ae:	4284      	cmp	r4, r0
 80023b0:	419b      	sbcs	r3, r3
 80023b2:	425b      	negs	r3, r3
 80023b4:	4698      	mov	r8, r3
 80023b6:	0016      	movs	r6, r2
 80023b8:	4488      	add	r8, r1
 80023ba:	e04e      	b.n	800245a <__aeabi_dsub+0x31a>
 80023bc:	4a30      	ldr	r2, [pc, #192]	; (8002480 <__aeabi_dsub+0x340>)
 80023be:	1c74      	adds	r4, r6, #1
 80023c0:	4214      	tst	r4, r2
 80023c2:	d000      	beq.n	80023c6 <__aeabi_dsub+0x286>
 80023c4:	e0d6      	b.n	8002574 <__aeabi_dsub+0x434>
 80023c6:	464a      	mov	r2, r9
 80023c8:	431a      	orrs	r2, r3
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d000      	beq.n	80023d0 <__aeabi_dsub+0x290>
 80023ce:	e15b      	b.n	8002688 <__aeabi_dsub+0x548>
 80023d0:	2a00      	cmp	r2, #0
 80023d2:	d100      	bne.n	80023d6 <__aeabi_dsub+0x296>
 80023d4:	e1a5      	b.n	8002722 <__aeabi_dsub+0x5e2>
 80023d6:	000a      	movs	r2, r1
 80023d8:	4302      	orrs	r2, r0
 80023da:	d000      	beq.n	80023de <__aeabi_dsub+0x29e>
 80023dc:	e1bb      	b.n	8002756 <__aeabi_dsub+0x616>
 80023de:	464a      	mov	r2, r9
 80023e0:	0759      	lsls	r1, r3, #29
 80023e2:	08d2      	lsrs	r2, r2, #3
 80023e4:	430a      	orrs	r2, r1
 80023e6:	08db      	lsrs	r3, r3, #3
 80023e8:	e027      	b.n	800243a <__aeabi_dsub+0x2fa>
 80023ea:	000a      	movs	r2, r1
 80023ec:	4302      	orrs	r2, r0
 80023ee:	d100      	bne.n	80023f2 <__aeabi_dsub+0x2b2>
 80023f0:	e174      	b.n	80026dc <__aeabi_dsub+0x59c>
 80023f2:	0022      	movs	r2, r4
 80023f4:	3a01      	subs	r2, #1
 80023f6:	2c01      	cmp	r4, #1
 80023f8:	d005      	beq.n	8002406 <__aeabi_dsub+0x2c6>
 80023fa:	4c1e      	ldr	r4, [pc, #120]	; (8002474 <__aeabi_dsub+0x334>)
 80023fc:	45a4      	cmp	ip, r4
 80023fe:	d100      	bne.n	8002402 <__aeabi_dsub+0x2c2>
 8002400:	e094      	b.n	800252c <__aeabi_dsub+0x3ec>
 8002402:	4694      	mov	ip, r2
 8002404:	e759      	b.n	80022ba <__aeabi_dsub+0x17a>
 8002406:	4448      	add	r0, r9
 8002408:	4548      	cmp	r0, r9
 800240a:	4192      	sbcs	r2, r2
 800240c:	185b      	adds	r3, r3, r1
 800240e:	4698      	mov	r8, r3
 8002410:	0004      	movs	r4, r0
 8002412:	4252      	negs	r2, r2
 8002414:	4490      	add	r8, r2
 8002416:	4643      	mov	r3, r8
 8002418:	2602      	movs	r6, #2
 800241a:	021b      	lsls	r3, r3, #8
 800241c:	d500      	bpl.n	8002420 <__aeabi_dsub+0x2e0>
 800241e:	e0c4      	b.n	80025aa <__aeabi_dsub+0x46a>
 8002420:	3e01      	subs	r6, #1
 8002422:	0763      	lsls	r3, r4, #29
 8002424:	d000      	beq.n	8002428 <__aeabi_dsub+0x2e8>
 8002426:	e711      	b.n	800224c <__aeabi_dsub+0x10c>
 8002428:	4643      	mov	r3, r8
 800242a:	46b4      	mov	ip, r6
 800242c:	0759      	lsls	r1, r3, #29
 800242e:	08e2      	lsrs	r2, r4, #3
 8002430:	430a      	orrs	r2, r1
 8002432:	08db      	lsrs	r3, r3, #3
 8002434:	490f      	ldr	r1, [pc, #60]	; (8002474 <__aeabi_dsub+0x334>)
 8002436:	458c      	cmp	ip, r1
 8002438:	d040      	beq.n	80024bc <__aeabi_dsub+0x37c>
 800243a:	4661      	mov	r1, ip
 800243c:	031b      	lsls	r3, r3, #12
 800243e:	0549      	lsls	r1, r1, #21
 8002440:	0b1b      	lsrs	r3, r3, #12
 8002442:	0d49      	lsrs	r1, r1, #21
 8002444:	e720      	b.n	8002288 <__aeabi_dsub+0x148>
 8002446:	4301      	orrs	r1, r0
 8002448:	000c      	movs	r4, r1
 800244a:	1e61      	subs	r1, r4, #1
 800244c:	418c      	sbcs	r4, r1
 800244e:	444c      	add	r4, r9
 8002450:	454c      	cmp	r4, r9
 8002452:	4192      	sbcs	r2, r2
 8002454:	4252      	negs	r2, r2
 8002456:	4690      	mov	r8, r2
 8002458:	4498      	add	r8, r3
 800245a:	4643      	mov	r3, r8
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	d5e0      	bpl.n	8002422 <__aeabi_dsub+0x2e2>
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <__aeabi_dsub+0x334>)
 8002462:	3601      	adds	r6, #1
 8002464:	429e      	cmp	r6, r3
 8002466:	d000      	beq.n	800246a <__aeabi_dsub+0x32a>
 8002468:	e09f      	b.n	80025aa <__aeabi_dsub+0x46a>
 800246a:	0031      	movs	r1, r6
 800246c:	2300      	movs	r3, #0
 800246e:	2200      	movs	r2, #0
 8002470:	e70a      	b.n	8002288 <__aeabi_dsub+0x148>
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	000007ff 	.word	0x000007ff
 8002478:	ff7fffff 	.word	0xff7fffff
 800247c:	fffff801 	.word	0xfffff801
 8002480:	000007fe 	.word	0x000007fe
 8002484:	2a00      	cmp	r2, #0
 8002486:	d100      	bne.n	800248a <__aeabi_dsub+0x34a>
 8002488:	e160      	b.n	800274c <__aeabi_dsub+0x60c>
 800248a:	000a      	movs	r2, r1
 800248c:	4302      	orrs	r2, r0
 800248e:	d04d      	beq.n	800252c <__aeabi_dsub+0x3ec>
 8002490:	464a      	mov	r2, r9
 8002492:	075c      	lsls	r4, r3, #29
 8002494:	08d2      	lsrs	r2, r2, #3
 8002496:	4322      	orrs	r2, r4
 8002498:	2480      	movs	r4, #128	; 0x80
 800249a:	08db      	lsrs	r3, r3, #3
 800249c:	0324      	lsls	r4, r4, #12
 800249e:	4223      	tst	r3, r4
 80024a0:	d007      	beq.n	80024b2 <__aeabi_dsub+0x372>
 80024a2:	08ce      	lsrs	r6, r1, #3
 80024a4:	4226      	tst	r6, r4
 80024a6:	d104      	bne.n	80024b2 <__aeabi_dsub+0x372>
 80024a8:	465d      	mov	r5, fp
 80024aa:	0033      	movs	r3, r6
 80024ac:	08c2      	lsrs	r2, r0, #3
 80024ae:	0749      	lsls	r1, r1, #29
 80024b0:	430a      	orrs	r2, r1
 80024b2:	0f51      	lsrs	r1, r2, #29
 80024b4:	00d2      	lsls	r2, r2, #3
 80024b6:	08d2      	lsrs	r2, r2, #3
 80024b8:	0749      	lsls	r1, r1, #29
 80024ba:	430a      	orrs	r2, r1
 80024bc:	0011      	movs	r1, r2
 80024be:	4319      	orrs	r1, r3
 80024c0:	d100      	bne.n	80024c4 <__aeabi_dsub+0x384>
 80024c2:	e1c8      	b.n	8002856 <__aeabi_dsub+0x716>
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	0309      	lsls	r1, r1, #12
 80024c8:	430b      	orrs	r3, r1
 80024ca:	031b      	lsls	r3, r3, #12
 80024cc:	49d5      	ldr	r1, [pc, #852]	; (8002824 <__aeabi_dsub+0x6e4>)
 80024ce:	0b1b      	lsrs	r3, r3, #12
 80024d0:	e6da      	b.n	8002288 <__aeabi_dsub+0x148>
 80024d2:	49d5      	ldr	r1, [pc, #852]	; (8002828 <__aeabi_dsub+0x6e8>)
 80024d4:	1ab6      	subs	r6, r6, r2
 80024d6:	400b      	ands	r3, r1
 80024d8:	4698      	mov	r8, r3
 80024da:	e6b5      	b.n	8002248 <__aeabi_dsub+0x108>
 80024dc:	0020      	movs	r0, r4
 80024de:	f000 fb3b 	bl	8002b58 <__clzsi2>
 80024e2:	0002      	movs	r2, r0
 80024e4:	3218      	adds	r2, #24
 80024e6:	2a1f      	cmp	r2, #31
 80024e8:	dc00      	bgt.n	80024ec <__aeabi_dsub+0x3ac>
 80024ea:	e68f      	b.n	800220c <__aeabi_dsub+0xcc>
 80024ec:	0023      	movs	r3, r4
 80024ee:	3808      	subs	r0, #8
 80024f0:	4083      	lsls	r3, r0
 80024f2:	2400      	movs	r4, #0
 80024f4:	e692      	b.n	800221c <__aeabi_dsub+0xdc>
 80024f6:	4308      	orrs	r0, r1
 80024f8:	0002      	movs	r2, r0
 80024fa:	1e50      	subs	r0, r2, #1
 80024fc:	4182      	sbcs	r2, r0
 80024fe:	e66d      	b.n	80021dc <__aeabi_dsub+0x9c>
 8002500:	4cca      	ldr	r4, [pc, #808]	; (800282c <__aeabi_dsub+0x6ec>)
 8002502:	1c72      	adds	r2, r6, #1
 8002504:	4222      	tst	r2, r4
 8002506:	d000      	beq.n	800250a <__aeabi_dsub+0x3ca>
 8002508:	e0ad      	b.n	8002666 <__aeabi_dsub+0x526>
 800250a:	464a      	mov	r2, r9
 800250c:	431a      	orrs	r2, r3
 800250e:	2e00      	cmp	r6, #0
 8002510:	d1b8      	bne.n	8002484 <__aeabi_dsub+0x344>
 8002512:	2a00      	cmp	r2, #0
 8002514:	d100      	bne.n	8002518 <__aeabi_dsub+0x3d8>
 8002516:	e158      	b.n	80027ca <__aeabi_dsub+0x68a>
 8002518:	000a      	movs	r2, r1
 800251a:	4302      	orrs	r2, r0
 800251c:	d000      	beq.n	8002520 <__aeabi_dsub+0x3e0>
 800251e:	e159      	b.n	80027d4 <__aeabi_dsub+0x694>
 8002520:	464a      	mov	r2, r9
 8002522:	0759      	lsls	r1, r3, #29
 8002524:	08d2      	lsrs	r2, r2, #3
 8002526:	430a      	orrs	r2, r1
 8002528:	08db      	lsrs	r3, r3, #3
 800252a:	e786      	b.n	800243a <__aeabi_dsub+0x2fa>
 800252c:	464a      	mov	r2, r9
 800252e:	0759      	lsls	r1, r3, #29
 8002530:	08d2      	lsrs	r2, r2, #3
 8002532:	430a      	orrs	r2, r1
 8002534:	08db      	lsrs	r3, r3, #3
 8002536:	e7c1      	b.n	80024bc <__aeabi_dsub+0x37c>
 8002538:	4dba      	ldr	r5, [pc, #744]	; (8002824 <__aeabi_dsub+0x6e4>)
 800253a:	42aa      	cmp	r2, r5
 800253c:	d100      	bne.n	8002540 <__aeabi_dsub+0x400>
 800253e:	e11e      	b.n	800277e <__aeabi_dsub+0x63e>
 8002540:	2580      	movs	r5, #128	; 0x80
 8002542:	042d      	lsls	r5, r5, #16
 8002544:	432b      	orrs	r3, r5
 8002546:	4664      	mov	r4, ip
 8002548:	2c38      	cmp	r4, #56	; 0x38
 800254a:	dc5d      	bgt.n	8002608 <__aeabi_dsub+0x4c8>
 800254c:	2c1f      	cmp	r4, #31
 800254e:	dd00      	ble.n	8002552 <__aeabi_dsub+0x412>
 8002550:	e0d0      	b.n	80026f4 <__aeabi_dsub+0x5b4>
 8002552:	2520      	movs	r5, #32
 8002554:	4667      	mov	r7, ip
 8002556:	1b2d      	subs	r5, r5, r4
 8002558:	464e      	mov	r6, r9
 800255a:	001c      	movs	r4, r3
 800255c:	40fe      	lsrs	r6, r7
 800255e:	40ac      	lsls	r4, r5
 8002560:	4334      	orrs	r4, r6
 8002562:	464e      	mov	r6, r9
 8002564:	40ae      	lsls	r6, r5
 8002566:	0035      	movs	r5, r6
 8002568:	40fb      	lsrs	r3, r7
 800256a:	1e6e      	subs	r6, r5, #1
 800256c:	41b5      	sbcs	r5, r6
 800256e:	1ac9      	subs	r1, r1, r3
 8002570:	432c      	orrs	r4, r5
 8002572:	e04e      	b.n	8002612 <__aeabi_dsub+0x4d2>
 8002574:	464a      	mov	r2, r9
 8002576:	1a14      	subs	r4, r2, r0
 8002578:	45a1      	cmp	r9, r4
 800257a:	4192      	sbcs	r2, r2
 800257c:	4252      	negs	r2, r2
 800257e:	4690      	mov	r8, r2
 8002580:	1a5f      	subs	r7, r3, r1
 8002582:	003a      	movs	r2, r7
 8002584:	4647      	mov	r7, r8
 8002586:	1bd2      	subs	r2, r2, r7
 8002588:	4690      	mov	r8, r2
 800258a:	0212      	lsls	r2, r2, #8
 800258c:	d500      	bpl.n	8002590 <__aeabi_dsub+0x450>
 800258e:	e08b      	b.n	80026a8 <__aeabi_dsub+0x568>
 8002590:	4642      	mov	r2, r8
 8002592:	4322      	orrs	r2, r4
 8002594:	d000      	beq.n	8002598 <__aeabi_dsub+0x458>
 8002596:	e630      	b.n	80021fa <__aeabi_dsub+0xba>
 8002598:	2300      	movs	r3, #0
 800259a:	2500      	movs	r5, #0
 800259c:	e74d      	b.n	800243a <__aeabi_dsub+0x2fa>
 800259e:	464a      	mov	r2, r9
 80025a0:	0759      	lsls	r1, r3, #29
 80025a2:	08d2      	lsrs	r2, r2, #3
 80025a4:	430a      	orrs	r2, r1
 80025a6:	08db      	lsrs	r3, r3, #3
 80025a8:	e744      	b.n	8002434 <__aeabi_dsub+0x2f4>
 80025aa:	4642      	mov	r2, r8
 80025ac:	4b9e      	ldr	r3, [pc, #632]	; (8002828 <__aeabi_dsub+0x6e8>)
 80025ae:	0861      	lsrs	r1, r4, #1
 80025b0:	401a      	ands	r2, r3
 80025b2:	0013      	movs	r3, r2
 80025b4:	2201      	movs	r2, #1
 80025b6:	4014      	ands	r4, r2
 80025b8:	430c      	orrs	r4, r1
 80025ba:	07da      	lsls	r2, r3, #31
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	4698      	mov	r8, r3
 80025c0:	4314      	orrs	r4, r2
 80025c2:	e641      	b.n	8002248 <__aeabi_dsub+0x108>
 80025c4:	001a      	movs	r2, r3
 80025c6:	3e1f      	subs	r6, #31
 80025c8:	40f2      	lsrs	r2, r6
 80025ca:	0016      	movs	r6, r2
 80025cc:	2920      	cmp	r1, #32
 80025ce:	d003      	beq.n	80025d8 <__aeabi_dsub+0x498>
 80025d0:	2240      	movs	r2, #64	; 0x40
 80025d2:	1a51      	subs	r1, r2, r1
 80025d4:	408b      	lsls	r3, r1
 80025d6:	431c      	orrs	r4, r3
 80025d8:	1e62      	subs	r2, r4, #1
 80025da:	4194      	sbcs	r4, r2
 80025dc:	2300      	movs	r3, #0
 80025de:	4334      	orrs	r4, r6
 80025e0:	4698      	mov	r8, r3
 80025e2:	2600      	movs	r6, #0
 80025e4:	e71d      	b.n	8002422 <__aeabi_dsub+0x2e2>
 80025e6:	000c      	movs	r4, r1
 80025e8:	3a20      	subs	r2, #32
 80025ea:	40d4      	lsrs	r4, r2
 80025ec:	0022      	movs	r2, r4
 80025ee:	4664      	mov	r4, ip
 80025f0:	2c20      	cmp	r4, #32
 80025f2:	d004      	beq.n	80025fe <__aeabi_dsub+0x4be>
 80025f4:	2740      	movs	r7, #64	; 0x40
 80025f6:	1b3f      	subs	r7, r7, r4
 80025f8:	40b9      	lsls	r1, r7
 80025fa:	4308      	orrs	r0, r1
 80025fc:	4680      	mov	r8, r0
 80025fe:	4644      	mov	r4, r8
 8002600:	1e61      	subs	r1, r4, #1
 8002602:	418c      	sbcs	r4, r1
 8002604:	4322      	orrs	r2, r4
 8002606:	e5e9      	b.n	80021dc <__aeabi_dsub+0x9c>
 8002608:	464c      	mov	r4, r9
 800260a:	4323      	orrs	r3, r4
 800260c:	001c      	movs	r4, r3
 800260e:	1e63      	subs	r3, r4, #1
 8002610:	419c      	sbcs	r4, r3
 8002612:	1b04      	subs	r4, r0, r4
 8002614:	42a0      	cmp	r0, r4
 8002616:	419b      	sbcs	r3, r3
 8002618:	425b      	negs	r3, r3
 800261a:	1acb      	subs	r3, r1, r3
 800261c:	4698      	mov	r8, r3
 800261e:	465d      	mov	r5, fp
 8002620:	0016      	movs	r6, r2
 8002622:	e5e2      	b.n	80021ea <__aeabi_dsub+0xaa>
 8002624:	464e      	mov	r6, r9
 8002626:	431e      	orrs	r6, r3
 8002628:	d100      	bne.n	800262c <__aeabi_dsub+0x4ec>
 800262a:	e0ae      	b.n	800278a <__aeabi_dsub+0x64a>
 800262c:	1e66      	subs	r6, r4, #1
 800262e:	2c01      	cmp	r4, #1
 8002630:	d100      	bne.n	8002634 <__aeabi_dsub+0x4f4>
 8002632:	e0fd      	b.n	8002830 <__aeabi_dsub+0x6f0>
 8002634:	4f7b      	ldr	r7, [pc, #492]	; (8002824 <__aeabi_dsub+0x6e4>)
 8002636:	42bc      	cmp	r4, r7
 8002638:	d100      	bne.n	800263c <__aeabi_dsub+0x4fc>
 800263a:	e107      	b.n	800284c <__aeabi_dsub+0x70c>
 800263c:	46b4      	mov	ip, r6
 800263e:	e69b      	b.n	8002378 <__aeabi_dsub+0x238>
 8002640:	4664      	mov	r4, ip
 8002642:	2220      	movs	r2, #32
 8002644:	1b12      	subs	r2, r2, r4
 8002646:	000c      	movs	r4, r1
 8002648:	4094      	lsls	r4, r2
 800264a:	0007      	movs	r7, r0
 800264c:	4090      	lsls	r0, r2
 800264e:	46a0      	mov	r8, r4
 8002650:	4664      	mov	r4, ip
 8002652:	1e42      	subs	r2, r0, #1
 8002654:	4190      	sbcs	r0, r2
 8002656:	4662      	mov	r2, ip
 8002658:	40e7      	lsrs	r7, r4
 800265a:	4644      	mov	r4, r8
 800265c:	40d1      	lsrs	r1, r2
 800265e:	433c      	orrs	r4, r7
 8002660:	4304      	orrs	r4, r0
 8002662:	185b      	adds	r3, r3, r1
 8002664:	e6f3      	b.n	800244e <__aeabi_dsub+0x30e>
 8002666:	4c6f      	ldr	r4, [pc, #444]	; (8002824 <__aeabi_dsub+0x6e4>)
 8002668:	42a2      	cmp	r2, r4
 800266a:	d100      	bne.n	800266e <__aeabi_dsub+0x52e>
 800266c:	e0d5      	b.n	800281a <__aeabi_dsub+0x6da>
 800266e:	4448      	add	r0, r9
 8002670:	185b      	adds	r3, r3, r1
 8002672:	4548      	cmp	r0, r9
 8002674:	4189      	sbcs	r1, r1
 8002676:	4249      	negs	r1, r1
 8002678:	185b      	adds	r3, r3, r1
 800267a:	07dc      	lsls	r4, r3, #31
 800267c:	0840      	lsrs	r0, r0, #1
 800267e:	085b      	lsrs	r3, r3, #1
 8002680:	4698      	mov	r8, r3
 8002682:	0016      	movs	r6, r2
 8002684:	4304      	orrs	r4, r0
 8002686:	e6cc      	b.n	8002422 <__aeabi_dsub+0x2e2>
 8002688:	2a00      	cmp	r2, #0
 800268a:	d000      	beq.n	800268e <__aeabi_dsub+0x54e>
 800268c:	e082      	b.n	8002794 <__aeabi_dsub+0x654>
 800268e:	000a      	movs	r2, r1
 8002690:	4302      	orrs	r2, r0
 8002692:	d140      	bne.n	8002716 <__aeabi_dsub+0x5d6>
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	2500      	movs	r5, #0
 8002698:	031b      	lsls	r3, r3, #12
 800269a:	e713      	b.n	80024c4 <__aeabi_dsub+0x384>
 800269c:	074b      	lsls	r3, r1, #29
 800269e:	08c2      	lsrs	r2, r0, #3
 80026a0:	431a      	orrs	r2, r3
 80026a2:	465d      	mov	r5, fp
 80026a4:	08cb      	lsrs	r3, r1, #3
 80026a6:	e6c5      	b.n	8002434 <__aeabi_dsub+0x2f4>
 80026a8:	464a      	mov	r2, r9
 80026aa:	1a84      	subs	r4, r0, r2
 80026ac:	42a0      	cmp	r0, r4
 80026ae:	4192      	sbcs	r2, r2
 80026b0:	1acb      	subs	r3, r1, r3
 80026b2:	4252      	negs	r2, r2
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	4698      	mov	r8, r3
 80026b8:	465d      	mov	r5, fp
 80026ba:	e59e      	b.n	80021fa <__aeabi_dsub+0xba>
 80026bc:	464a      	mov	r2, r9
 80026be:	0759      	lsls	r1, r3, #29
 80026c0:	08d2      	lsrs	r2, r2, #3
 80026c2:	430a      	orrs	r2, r1
 80026c4:	08db      	lsrs	r3, r3, #3
 80026c6:	e6f9      	b.n	80024bc <__aeabi_dsub+0x37c>
 80026c8:	464a      	mov	r2, r9
 80026ca:	1a14      	subs	r4, r2, r0
 80026cc:	45a1      	cmp	r9, r4
 80026ce:	4192      	sbcs	r2, r2
 80026d0:	1a5b      	subs	r3, r3, r1
 80026d2:	4252      	negs	r2, r2
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	4698      	mov	r8, r3
 80026d8:	2601      	movs	r6, #1
 80026da:	e586      	b.n	80021ea <__aeabi_dsub+0xaa>
 80026dc:	464a      	mov	r2, r9
 80026de:	0759      	lsls	r1, r3, #29
 80026e0:	08d2      	lsrs	r2, r2, #3
 80026e2:	430a      	orrs	r2, r1
 80026e4:	08db      	lsrs	r3, r3, #3
 80026e6:	e6a5      	b.n	8002434 <__aeabi_dsub+0x2f4>
 80026e8:	464c      	mov	r4, r9
 80026ea:	4323      	orrs	r3, r4
 80026ec:	001c      	movs	r4, r3
 80026ee:	1e63      	subs	r3, r4, #1
 80026f0:	419c      	sbcs	r4, r3
 80026f2:	e65b      	b.n	80023ac <__aeabi_dsub+0x26c>
 80026f4:	4665      	mov	r5, ip
 80026f6:	001e      	movs	r6, r3
 80026f8:	3d20      	subs	r5, #32
 80026fa:	40ee      	lsrs	r6, r5
 80026fc:	2c20      	cmp	r4, #32
 80026fe:	d005      	beq.n	800270c <__aeabi_dsub+0x5cc>
 8002700:	2540      	movs	r5, #64	; 0x40
 8002702:	1b2d      	subs	r5, r5, r4
 8002704:	40ab      	lsls	r3, r5
 8002706:	464c      	mov	r4, r9
 8002708:	431c      	orrs	r4, r3
 800270a:	46a2      	mov	sl, r4
 800270c:	4654      	mov	r4, sl
 800270e:	1e63      	subs	r3, r4, #1
 8002710:	419c      	sbcs	r4, r3
 8002712:	4334      	orrs	r4, r6
 8002714:	e77d      	b.n	8002612 <__aeabi_dsub+0x4d2>
 8002716:	074b      	lsls	r3, r1, #29
 8002718:	08c2      	lsrs	r2, r0, #3
 800271a:	431a      	orrs	r2, r3
 800271c:	465d      	mov	r5, fp
 800271e:	08cb      	lsrs	r3, r1, #3
 8002720:	e6cc      	b.n	80024bc <__aeabi_dsub+0x37c>
 8002722:	000a      	movs	r2, r1
 8002724:	4302      	orrs	r2, r0
 8002726:	d100      	bne.n	800272a <__aeabi_dsub+0x5ea>
 8002728:	e736      	b.n	8002598 <__aeabi_dsub+0x458>
 800272a:	074b      	lsls	r3, r1, #29
 800272c:	08c2      	lsrs	r2, r0, #3
 800272e:	431a      	orrs	r2, r3
 8002730:	465d      	mov	r5, fp
 8002732:	08cb      	lsrs	r3, r1, #3
 8002734:	e681      	b.n	800243a <__aeabi_dsub+0x2fa>
 8002736:	464a      	mov	r2, r9
 8002738:	1a84      	subs	r4, r0, r2
 800273a:	42a0      	cmp	r0, r4
 800273c:	4192      	sbcs	r2, r2
 800273e:	1acb      	subs	r3, r1, r3
 8002740:	4252      	negs	r2, r2
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	4698      	mov	r8, r3
 8002746:	465d      	mov	r5, fp
 8002748:	2601      	movs	r6, #1
 800274a:	e54e      	b.n	80021ea <__aeabi_dsub+0xaa>
 800274c:	074b      	lsls	r3, r1, #29
 800274e:	08c2      	lsrs	r2, r0, #3
 8002750:	431a      	orrs	r2, r3
 8002752:	08cb      	lsrs	r3, r1, #3
 8002754:	e6b2      	b.n	80024bc <__aeabi_dsub+0x37c>
 8002756:	464a      	mov	r2, r9
 8002758:	1a14      	subs	r4, r2, r0
 800275a:	45a1      	cmp	r9, r4
 800275c:	4192      	sbcs	r2, r2
 800275e:	1a5f      	subs	r7, r3, r1
 8002760:	4252      	negs	r2, r2
 8002762:	1aba      	subs	r2, r7, r2
 8002764:	4690      	mov	r8, r2
 8002766:	0212      	lsls	r2, r2, #8
 8002768:	d56b      	bpl.n	8002842 <__aeabi_dsub+0x702>
 800276a:	464a      	mov	r2, r9
 800276c:	1a84      	subs	r4, r0, r2
 800276e:	42a0      	cmp	r0, r4
 8002770:	4192      	sbcs	r2, r2
 8002772:	1acb      	subs	r3, r1, r3
 8002774:	4252      	negs	r2, r2
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	4698      	mov	r8, r3
 800277a:	465d      	mov	r5, fp
 800277c:	e564      	b.n	8002248 <__aeabi_dsub+0x108>
 800277e:	074b      	lsls	r3, r1, #29
 8002780:	08c2      	lsrs	r2, r0, #3
 8002782:	431a      	orrs	r2, r3
 8002784:	465d      	mov	r5, fp
 8002786:	08cb      	lsrs	r3, r1, #3
 8002788:	e698      	b.n	80024bc <__aeabi_dsub+0x37c>
 800278a:	074b      	lsls	r3, r1, #29
 800278c:	08c2      	lsrs	r2, r0, #3
 800278e:	431a      	orrs	r2, r3
 8002790:	08cb      	lsrs	r3, r1, #3
 8002792:	e64f      	b.n	8002434 <__aeabi_dsub+0x2f4>
 8002794:	000a      	movs	r2, r1
 8002796:	4302      	orrs	r2, r0
 8002798:	d090      	beq.n	80026bc <__aeabi_dsub+0x57c>
 800279a:	464a      	mov	r2, r9
 800279c:	075c      	lsls	r4, r3, #29
 800279e:	08d2      	lsrs	r2, r2, #3
 80027a0:	4314      	orrs	r4, r2
 80027a2:	2280      	movs	r2, #128	; 0x80
 80027a4:	08db      	lsrs	r3, r3, #3
 80027a6:	0312      	lsls	r2, r2, #12
 80027a8:	4213      	tst	r3, r2
 80027aa:	d008      	beq.n	80027be <__aeabi_dsub+0x67e>
 80027ac:	08ce      	lsrs	r6, r1, #3
 80027ae:	4216      	tst	r6, r2
 80027b0:	d105      	bne.n	80027be <__aeabi_dsub+0x67e>
 80027b2:	08c0      	lsrs	r0, r0, #3
 80027b4:	0749      	lsls	r1, r1, #29
 80027b6:	4308      	orrs	r0, r1
 80027b8:	0004      	movs	r4, r0
 80027ba:	465d      	mov	r5, fp
 80027bc:	0033      	movs	r3, r6
 80027be:	0f61      	lsrs	r1, r4, #29
 80027c0:	00e2      	lsls	r2, r4, #3
 80027c2:	0749      	lsls	r1, r1, #29
 80027c4:	08d2      	lsrs	r2, r2, #3
 80027c6:	430a      	orrs	r2, r1
 80027c8:	e678      	b.n	80024bc <__aeabi_dsub+0x37c>
 80027ca:	074b      	lsls	r3, r1, #29
 80027cc:	08c2      	lsrs	r2, r0, #3
 80027ce:	431a      	orrs	r2, r3
 80027d0:	08cb      	lsrs	r3, r1, #3
 80027d2:	e632      	b.n	800243a <__aeabi_dsub+0x2fa>
 80027d4:	4448      	add	r0, r9
 80027d6:	185b      	adds	r3, r3, r1
 80027d8:	4548      	cmp	r0, r9
 80027da:	4192      	sbcs	r2, r2
 80027dc:	4698      	mov	r8, r3
 80027de:	4252      	negs	r2, r2
 80027e0:	4490      	add	r8, r2
 80027e2:	4643      	mov	r3, r8
 80027e4:	0004      	movs	r4, r0
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	d400      	bmi.n	80027ec <__aeabi_dsub+0x6ac>
 80027ea:	e61a      	b.n	8002422 <__aeabi_dsub+0x2e2>
 80027ec:	4642      	mov	r2, r8
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <__aeabi_dsub+0x6e8>)
 80027f0:	2601      	movs	r6, #1
 80027f2:	401a      	ands	r2, r3
 80027f4:	4690      	mov	r8, r2
 80027f6:	e614      	b.n	8002422 <__aeabi_dsub+0x2e2>
 80027f8:	4666      	mov	r6, ip
 80027fa:	001f      	movs	r7, r3
 80027fc:	3e20      	subs	r6, #32
 80027fe:	40f7      	lsrs	r7, r6
 8002800:	2c20      	cmp	r4, #32
 8002802:	d005      	beq.n	8002810 <__aeabi_dsub+0x6d0>
 8002804:	2640      	movs	r6, #64	; 0x40
 8002806:	1b36      	subs	r6, r6, r4
 8002808:	40b3      	lsls	r3, r6
 800280a:	464c      	mov	r4, r9
 800280c:	431c      	orrs	r4, r3
 800280e:	46a2      	mov	sl, r4
 8002810:	4654      	mov	r4, sl
 8002812:	1e63      	subs	r3, r4, #1
 8002814:	419c      	sbcs	r4, r3
 8002816:	433c      	orrs	r4, r7
 8002818:	e5c8      	b.n	80023ac <__aeabi_dsub+0x26c>
 800281a:	0011      	movs	r1, r2
 800281c:	2300      	movs	r3, #0
 800281e:	2200      	movs	r2, #0
 8002820:	e532      	b.n	8002288 <__aeabi_dsub+0x148>
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	000007ff 	.word	0x000007ff
 8002828:	ff7fffff 	.word	0xff7fffff
 800282c:	000007fe 	.word	0x000007fe
 8002830:	464a      	mov	r2, r9
 8002832:	1814      	adds	r4, r2, r0
 8002834:	4284      	cmp	r4, r0
 8002836:	4192      	sbcs	r2, r2
 8002838:	185b      	adds	r3, r3, r1
 800283a:	4698      	mov	r8, r3
 800283c:	4252      	negs	r2, r2
 800283e:	4490      	add	r8, r2
 8002840:	e5e9      	b.n	8002416 <__aeabi_dsub+0x2d6>
 8002842:	4642      	mov	r2, r8
 8002844:	4322      	orrs	r2, r4
 8002846:	d100      	bne.n	800284a <__aeabi_dsub+0x70a>
 8002848:	e6a6      	b.n	8002598 <__aeabi_dsub+0x458>
 800284a:	e5ea      	b.n	8002422 <__aeabi_dsub+0x2e2>
 800284c:	074b      	lsls	r3, r1, #29
 800284e:	08c2      	lsrs	r2, r0, #3
 8002850:	431a      	orrs	r2, r3
 8002852:	08cb      	lsrs	r3, r1, #3
 8002854:	e632      	b.n	80024bc <__aeabi_dsub+0x37c>
 8002856:	2200      	movs	r2, #0
 8002858:	4901      	ldr	r1, [pc, #4]	; (8002860 <__aeabi_dsub+0x720>)
 800285a:	0013      	movs	r3, r2
 800285c:	e514      	b.n	8002288 <__aeabi_dsub+0x148>
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	000007ff 	.word	0x000007ff

08002864 <__aeabi_dcmpun>:
 8002864:	b570      	push	{r4, r5, r6, lr}
 8002866:	0005      	movs	r5, r0
 8002868:	480c      	ldr	r0, [pc, #48]	; (800289c <__aeabi_dcmpun+0x38>)
 800286a:	030c      	lsls	r4, r1, #12
 800286c:	0016      	movs	r6, r2
 800286e:	0049      	lsls	r1, r1, #1
 8002870:	031a      	lsls	r2, r3, #12
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	0b24      	lsrs	r4, r4, #12
 8002876:	0d49      	lsrs	r1, r1, #21
 8002878:	0b12      	lsrs	r2, r2, #12
 800287a:	0d5b      	lsrs	r3, r3, #21
 800287c:	4281      	cmp	r1, r0
 800287e:	d008      	beq.n	8002892 <__aeabi_dcmpun+0x2e>
 8002880:	4906      	ldr	r1, [pc, #24]	; (800289c <__aeabi_dcmpun+0x38>)
 8002882:	2000      	movs	r0, #0
 8002884:	428b      	cmp	r3, r1
 8002886:	d103      	bne.n	8002890 <__aeabi_dcmpun+0x2c>
 8002888:	4332      	orrs	r2, r6
 800288a:	0010      	movs	r0, r2
 800288c:	1e42      	subs	r2, r0, #1
 800288e:	4190      	sbcs	r0, r2
 8002890:	bd70      	pop	{r4, r5, r6, pc}
 8002892:	2001      	movs	r0, #1
 8002894:	432c      	orrs	r4, r5
 8002896:	d1fb      	bne.n	8002890 <__aeabi_dcmpun+0x2c>
 8002898:	e7f2      	b.n	8002880 <__aeabi_dcmpun+0x1c>
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	000007ff 	.word	0x000007ff

080028a0 <__aeabi_d2iz>:
 80028a0:	000a      	movs	r2, r1
 80028a2:	b530      	push	{r4, r5, lr}
 80028a4:	4c13      	ldr	r4, [pc, #76]	; (80028f4 <__aeabi_d2iz+0x54>)
 80028a6:	0053      	lsls	r3, r2, #1
 80028a8:	0309      	lsls	r1, r1, #12
 80028aa:	0005      	movs	r5, r0
 80028ac:	0b09      	lsrs	r1, r1, #12
 80028ae:	2000      	movs	r0, #0
 80028b0:	0d5b      	lsrs	r3, r3, #21
 80028b2:	0fd2      	lsrs	r2, r2, #31
 80028b4:	42a3      	cmp	r3, r4
 80028b6:	dd04      	ble.n	80028c2 <__aeabi_d2iz+0x22>
 80028b8:	480f      	ldr	r0, [pc, #60]	; (80028f8 <__aeabi_d2iz+0x58>)
 80028ba:	4283      	cmp	r3, r0
 80028bc:	dd02      	ble.n	80028c4 <__aeabi_d2iz+0x24>
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <__aeabi_d2iz+0x5c>)
 80028c0:	18d0      	adds	r0, r2, r3
 80028c2:	bd30      	pop	{r4, r5, pc}
 80028c4:	2080      	movs	r0, #128	; 0x80
 80028c6:	0340      	lsls	r0, r0, #13
 80028c8:	4301      	orrs	r1, r0
 80028ca:	480d      	ldr	r0, [pc, #52]	; (8002900 <__aeabi_d2iz+0x60>)
 80028cc:	1ac0      	subs	r0, r0, r3
 80028ce:	281f      	cmp	r0, #31
 80028d0:	dd08      	ble.n	80028e4 <__aeabi_d2iz+0x44>
 80028d2:	480c      	ldr	r0, [pc, #48]	; (8002904 <__aeabi_d2iz+0x64>)
 80028d4:	1ac3      	subs	r3, r0, r3
 80028d6:	40d9      	lsrs	r1, r3
 80028d8:	000b      	movs	r3, r1
 80028da:	4258      	negs	r0, r3
 80028dc:	2a00      	cmp	r2, #0
 80028de:	d1f0      	bne.n	80028c2 <__aeabi_d2iz+0x22>
 80028e0:	0018      	movs	r0, r3
 80028e2:	e7ee      	b.n	80028c2 <__aeabi_d2iz+0x22>
 80028e4:	4c08      	ldr	r4, [pc, #32]	; (8002908 <__aeabi_d2iz+0x68>)
 80028e6:	40c5      	lsrs	r5, r0
 80028e8:	46a4      	mov	ip, r4
 80028ea:	4463      	add	r3, ip
 80028ec:	4099      	lsls	r1, r3
 80028ee:	000b      	movs	r3, r1
 80028f0:	432b      	orrs	r3, r5
 80028f2:	e7f2      	b.n	80028da <__aeabi_d2iz+0x3a>
 80028f4:	000003fe 	.word	0x000003fe
 80028f8:	0000041d 	.word	0x0000041d
 80028fc:	7fffffff 	.word	0x7fffffff
 8002900:	00000433 	.word	0x00000433
 8002904:	00000413 	.word	0x00000413
 8002908:	fffffbed 	.word	0xfffffbed

0800290c <__aeabi_i2d>:
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	2800      	cmp	r0, #0
 8002910:	d016      	beq.n	8002940 <__aeabi_i2d+0x34>
 8002912:	17c3      	asrs	r3, r0, #31
 8002914:	18c5      	adds	r5, r0, r3
 8002916:	405d      	eors	r5, r3
 8002918:	0fc4      	lsrs	r4, r0, #31
 800291a:	0028      	movs	r0, r5
 800291c:	f000 f91c 	bl	8002b58 <__clzsi2>
 8002920:	4a11      	ldr	r2, [pc, #68]	; (8002968 <__aeabi_i2d+0x5c>)
 8002922:	1a12      	subs	r2, r2, r0
 8002924:	280a      	cmp	r0, #10
 8002926:	dc16      	bgt.n	8002956 <__aeabi_i2d+0x4a>
 8002928:	0003      	movs	r3, r0
 800292a:	002e      	movs	r6, r5
 800292c:	3315      	adds	r3, #21
 800292e:	409e      	lsls	r6, r3
 8002930:	230b      	movs	r3, #11
 8002932:	1a18      	subs	r0, r3, r0
 8002934:	40c5      	lsrs	r5, r0
 8002936:	0553      	lsls	r3, r2, #21
 8002938:	032d      	lsls	r5, r5, #12
 800293a:	0b2d      	lsrs	r5, r5, #12
 800293c:	0d5b      	lsrs	r3, r3, #21
 800293e:	e003      	b.n	8002948 <__aeabi_i2d+0x3c>
 8002940:	2400      	movs	r4, #0
 8002942:	2300      	movs	r3, #0
 8002944:	2500      	movs	r5, #0
 8002946:	2600      	movs	r6, #0
 8002948:	051b      	lsls	r3, r3, #20
 800294a:	432b      	orrs	r3, r5
 800294c:	07e4      	lsls	r4, r4, #31
 800294e:	4323      	orrs	r3, r4
 8002950:	0030      	movs	r0, r6
 8002952:	0019      	movs	r1, r3
 8002954:	bd70      	pop	{r4, r5, r6, pc}
 8002956:	380b      	subs	r0, #11
 8002958:	4085      	lsls	r5, r0
 800295a:	0553      	lsls	r3, r2, #21
 800295c:	032d      	lsls	r5, r5, #12
 800295e:	2600      	movs	r6, #0
 8002960:	0b2d      	lsrs	r5, r5, #12
 8002962:	0d5b      	lsrs	r3, r3, #21
 8002964:	e7f0      	b.n	8002948 <__aeabi_i2d+0x3c>
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	0000041e 	.word	0x0000041e

0800296c <__aeabi_ui2d>:
 800296c:	b510      	push	{r4, lr}
 800296e:	1e04      	subs	r4, r0, #0
 8002970:	d010      	beq.n	8002994 <__aeabi_ui2d+0x28>
 8002972:	f000 f8f1 	bl	8002b58 <__clzsi2>
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <__aeabi_ui2d+0x48>)
 8002978:	1a1b      	subs	r3, r3, r0
 800297a:	280a      	cmp	r0, #10
 800297c:	dc11      	bgt.n	80029a2 <__aeabi_ui2d+0x36>
 800297e:	220b      	movs	r2, #11
 8002980:	0021      	movs	r1, r4
 8002982:	1a12      	subs	r2, r2, r0
 8002984:	40d1      	lsrs	r1, r2
 8002986:	3015      	adds	r0, #21
 8002988:	030a      	lsls	r2, r1, #12
 800298a:	055b      	lsls	r3, r3, #21
 800298c:	4084      	lsls	r4, r0
 800298e:	0b12      	lsrs	r2, r2, #12
 8002990:	0d5b      	lsrs	r3, r3, #21
 8002992:	e001      	b.n	8002998 <__aeabi_ui2d+0x2c>
 8002994:	2300      	movs	r3, #0
 8002996:	2200      	movs	r2, #0
 8002998:	051b      	lsls	r3, r3, #20
 800299a:	4313      	orrs	r3, r2
 800299c:	0020      	movs	r0, r4
 800299e:	0019      	movs	r1, r3
 80029a0:	bd10      	pop	{r4, pc}
 80029a2:	0022      	movs	r2, r4
 80029a4:	380b      	subs	r0, #11
 80029a6:	4082      	lsls	r2, r0
 80029a8:	055b      	lsls	r3, r3, #21
 80029aa:	0312      	lsls	r2, r2, #12
 80029ac:	2400      	movs	r4, #0
 80029ae:	0b12      	lsrs	r2, r2, #12
 80029b0:	0d5b      	lsrs	r3, r3, #21
 80029b2:	e7f1      	b.n	8002998 <__aeabi_ui2d+0x2c>
 80029b4:	0000041e 	.word	0x0000041e

080029b8 <__aeabi_f2d>:
 80029b8:	b570      	push	{r4, r5, r6, lr}
 80029ba:	0043      	lsls	r3, r0, #1
 80029bc:	0246      	lsls	r6, r0, #9
 80029be:	0fc4      	lsrs	r4, r0, #31
 80029c0:	20fe      	movs	r0, #254	; 0xfe
 80029c2:	0e1b      	lsrs	r3, r3, #24
 80029c4:	1c59      	adds	r1, r3, #1
 80029c6:	0a75      	lsrs	r5, r6, #9
 80029c8:	4208      	tst	r0, r1
 80029ca:	d00c      	beq.n	80029e6 <__aeabi_f2d+0x2e>
 80029cc:	22e0      	movs	r2, #224	; 0xe0
 80029ce:	0092      	lsls	r2, r2, #2
 80029d0:	4694      	mov	ip, r2
 80029d2:	076d      	lsls	r5, r5, #29
 80029d4:	0b36      	lsrs	r6, r6, #12
 80029d6:	4463      	add	r3, ip
 80029d8:	051b      	lsls	r3, r3, #20
 80029da:	4333      	orrs	r3, r6
 80029dc:	07e4      	lsls	r4, r4, #31
 80029de:	4323      	orrs	r3, r4
 80029e0:	0028      	movs	r0, r5
 80029e2:	0019      	movs	r1, r3
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d114      	bne.n	8002a14 <__aeabi_f2d+0x5c>
 80029ea:	2d00      	cmp	r5, #0
 80029ec:	d01b      	beq.n	8002a26 <__aeabi_f2d+0x6e>
 80029ee:	0028      	movs	r0, r5
 80029f0:	f000 f8b2 	bl	8002b58 <__clzsi2>
 80029f4:	280a      	cmp	r0, #10
 80029f6:	dc1c      	bgt.n	8002a32 <__aeabi_f2d+0x7a>
 80029f8:	230b      	movs	r3, #11
 80029fa:	002a      	movs	r2, r5
 80029fc:	1a1b      	subs	r3, r3, r0
 80029fe:	40da      	lsrs	r2, r3
 8002a00:	0003      	movs	r3, r0
 8002a02:	3315      	adds	r3, #21
 8002a04:	409d      	lsls	r5, r3
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <__aeabi_f2d+0x88>)
 8002a08:	0312      	lsls	r2, r2, #12
 8002a0a:	1a1b      	subs	r3, r3, r0
 8002a0c:	055b      	lsls	r3, r3, #21
 8002a0e:	0b16      	lsrs	r6, r2, #12
 8002a10:	0d5b      	lsrs	r3, r3, #21
 8002a12:	e7e1      	b.n	80029d8 <__aeabi_f2d+0x20>
 8002a14:	2d00      	cmp	r5, #0
 8002a16:	d009      	beq.n	8002a2c <__aeabi_f2d+0x74>
 8002a18:	0b32      	lsrs	r2, r6, #12
 8002a1a:	2680      	movs	r6, #128	; 0x80
 8002a1c:	0336      	lsls	r6, r6, #12
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_f2d+0x8c>)
 8002a20:	076d      	lsls	r5, r5, #29
 8002a22:	4316      	orrs	r6, r2
 8002a24:	e7d8      	b.n	80029d8 <__aeabi_f2d+0x20>
 8002a26:	2300      	movs	r3, #0
 8002a28:	2600      	movs	r6, #0
 8002a2a:	e7d5      	b.n	80029d8 <__aeabi_f2d+0x20>
 8002a2c:	2600      	movs	r6, #0
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <__aeabi_f2d+0x8c>)
 8002a30:	e7d2      	b.n	80029d8 <__aeabi_f2d+0x20>
 8002a32:	0003      	movs	r3, r0
 8002a34:	002a      	movs	r2, r5
 8002a36:	3b0b      	subs	r3, #11
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	2500      	movs	r5, #0
 8002a3c:	e7e3      	b.n	8002a06 <__aeabi_f2d+0x4e>
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	00000389 	.word	0x00000389
 8002a44:	000007ff 	.word	0x000007ff

08002a48 <__aeabi_d2f>:
 8002a48:	0002      	movs	r2, r0
 8002a4a:	004b      	lsls	r3, r1, #1
 8002a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a4e:	0308      	lsls	r0, r1, #12
 8002a50:	0d5b      	lsrs	r3, r3, #21
 8002a52:	4e3d      	ldr	r6, [pc, #244]	; (8002b48 <__aeabi_d2f+0x100>)
 8002a54:	0fcc      	lsrs	r4, r1, #31
 8002a56:	0a40      	lsrs	r0, r0, #9
 8002a58:	0f51      	lsrs	r1, r2, #29
 8002a5a:	1c5f      	adds	r7, r3, #1
 8002a5c:	4308      	orrs	r0, r1
 8002a5e:	00d5      	lsls	r5, r2, #3
 8002a60:	4237      	tst	r7, r6
 8002a62:	d00a      	beq.n	8002a7a <__aeabi_d2f+0x32>
 8002a64:	4939      	ldr	r1, [pc, #228]	; (8002b4c <__aeabi_d2f+0x104>)
 8002a66:	185e      	adds	r6, r3, r1
 8002a68:	2efe      	cmp	r6, #254	; 0xfe
 8002a6a:	dd16      	ble.n	8002a9a <__aeabi_d2f+0x52>
 8002a6c:	23ff      	movs	r3, #255	; 0xff
 8002a6e:	2100      	movs	r1, #0
 8002a70:	05db      	lsls	r3, r3, #23
 8002a72:	430b      	orrs	r3, r1
 8002a74:	07e0      	lsls	r0, r4, #31
 8002a76:	4318      	orrs	r0, r3
 8002a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <__aeabi_d2f+0x44>
 8002a7e:	4328      	orrs	r0, r5
 8002a80:	d027      	beq.n	8002ad2 <__aeabi_d2f+0x8a>
 8002a82:	2105      	movs	r1, #5
 8002a84:	0189      	lsls	r1, r1, #6
 8002a86:	0a49      	lsrs	r1, r1, #9
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	e7f1      	b.n	8002a70 <__aeabi_d2f+0x28>
 8002a8c:	4305      	orrs	r5, r0
 8002a8e:	d0ed      	beq.n	8002a6c <__aeabi_d2f+0x24>
 8002a90:	2180      	movs	r1, #128	; 0x80
 8002a92:	03c9      	lsls	r1, r1, #15
 8002a94:	23ff      	movs	r3, #255	; 0xff
 8002a96:	4301      	orrs	r1, r0
 8002a98:	e7ea      	b.n	8002a70 <__aeabi_d2f+0x28>
 8002a9a:	2e00      	cmp	r6, #0
 8002a9c:	dd1c      	ble.n	8002ad8 <__aeabi_d2f+0x90>
 8002a9e:	0192      	lsls	r2, r2, #6
 8002aa0:	0011      	movs	r1, r2
 8002aa2:	1e4a      	subs	r2, r1, #1
 8002aa4:	4191      	sbcs	r1, r2
 8002aa6:	00c0      	lsls	r0, r0, #3
 8002aa8:	0f6d      	lsrs	r5, r5, #29
 8002aaa:	4301      	orrs	r1, r0
 8002aac:	4329      	orrs	r1, r5
 8002aae:	074b      	lsls	r3, r1, #29
 8002ab0:	d048      	beq.n	8002b44 <__aeabi_d2f+0xfc>
 8002ab2:	230f      	movs	r3, #15
 8002ab4:	400b      	ands	r3, r1
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d000      	beq.n	8002abc <__aeabi_d2f+0x74>
 8002aba:	3104      	adds	r1, #4
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	04db      	lsls	r3, r3, #19
 8002ac0:	400b      	ands	r3, r1
 8002ac2:	d03f      	beq.n	8002b44 <__aeabi_d2f+0xfc>
 8002ac4:	1c72      	adds	r2, r6, #1
 8002ac6:	2efe      	cmp	r6, #254	; 0xfe
 8002ac8:	d0d0      	beq.n	8002a6c <__aeabi_d2f+0x24>
 8002aca:	0189      	lsls	r1, r1, #6
 8002acc:	0a49      	lsrs	r1, r1, #9
 8002ace:	b2d3      	uxtb	r3, r2
 8002ad0:	e7ce      	b.n	8002a70 <__aeabi_d2f+0x28>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	e7cb      	b.n	8002a70 <__aeabi_d2f+0x28>
 8002ad8:	0032      	movs	r2, r6
 8002ada:	3217      	adds	r2, #23
 8002adc:	db22      	blt.n	8002b24 <__aeabi_d2f+0xdc>
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	221e      	movs	r2, #30
 8002ae2:	0409      	lsls	r1, r1, #16
 8002ae4:	4308      	orrs	r0, r1
 8002ae6:	1b92      	subs	r2, r2, r6
 8002ae8:	2a1f      	cmp	r2, #31
 8002aea:	dd1d      	ble.n	8002b28 <__aeabi_d2f+0xe0>
 8002aec:	2102      	movs	r1, #2
 8002aee:	4249      	negs	r1, r1
 8002af0:	1b8e      	subs	r6, r1, r6
 8002af2:	0001      	movs	r1, r0
 8002af4:	40f1      	lsrs	r1, r6
 8002af6:	000e      	movs	r6, r1
 8002af8:	2a20      	cmp	r2, #32
 8002afa:	d004      	beq.n	8002b06 <__aeabi_d2f+0xbe>
 8002afc:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <__aeabi_d2f+0x108>)
 8002afe:	4694      	mov	ip, r2
 8002b00:	4463      	add	r3, ip
 8002b02:	4098      	lsls	r0, r3
 8002b04:	4305      	orrs	r5, r0
 8002b06:	0029      	movs	r1, r5
 8002b08:	1e4d      	subs	r5, r1, #1
 8002b0a:	41a9      	sbcs	r1, r5
 8002b0c:	4331      	orrs	r1, r6
 8002b0e:	2600      	movs	r6, #0
 8002b10:	074b      	lsls	r3, r1, #29
 8002b12:	d1ce      	bne.n	8002ab2 <__aeabi_d2f+0x6a>
 8002b14:	2080      	movs	r0, #128	; 0x80
 8002b16:	000b      	movs	r3, r1
 8002b18:	04c0      	lsls	r0, r0, #19
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4003      	ands	r3, r0
 8002b1e:	4201      	tst	r1, r0
 8002b20:	d1d3      	bne.n	8002aca <__aeabi_d2f+0x82>
 8002b22:	e7af      	b.n	8002a84 <__aeabi_d2f+0x3c>
 8002b24:	2300      	movs	r3, #0
 8002b26:	e7ac      	b.n	8002a82 <__aeabi_d2f+0x3a>
 8002b28:	490a      	ldr	r1, [pc, #40]	; (8002b54 <__aeabi_d2f+0x10c>)
 8002b2a:	468c      	mov	ip, r1
 8002b2c:	0029      	movs	r1, r5
 8002b2e:	4463      	add	r3, ip
 8002b30:	40d1      	lsrs	r1, r2
 8002b32:	409d      	lsls	r5, r3
 8002b34:	000a      	movs	r2, r1
 8002b36:	0029      	movs	r1, r5
 8002b38:	4098      	lsls	r0, r3
 8002b3a:	1e4d      	subs	r5, r1, #1
 8002b3c:	41a9      	sbcs	r1, r5
 8002b3e:	4301      	orrs	r1, r0
 8002b40:	4311      	orrs	r1, r2
 8002b42:	e7e4      	b.n	8002b0e <__aeabi_d2f+0xc6>
 8002b44:	0033      	movs	r3, r6
 8002b46:	e79d      	b.n	8002a84 <__aeabi_d2f+0x3c>
 8002b48:	000007fe 	.word	0x000007fe
 8002b4c:	fffffc80 	.word	0xfffffc80
 8002b50:	fffffca2 	.word	0xfffffca2
 8002b54:	fffffc82 	.word	0xfffffc82

08002b58 <__clzsi2>:
 8002b58:	211c      	movs	r1, #28
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	041b      	lsls	r3, r3, #16
 8002b5e:	4298      	cmp	r0, r3
 8002b60:	d301      	bcc.n	8002b66 <__clzsi2+0xe>
 8002b62:	0c00      	lsrs	r0, r0, #16
 8002b64:	3910      	subs	r1, #16
 8002b66:	0a1b      	lsrs	r3, r3, #8
 8002b68:	4298      	cmp	r0, r3
 8002b6a:	d301      	bcc.n	8002b70 <__clzsi2+0x18>
 8002b6c:	0a00      	lsrs	r0, r0, #8
 8002b6e:	3908      	subs	r1, #8
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	4298      	cmp	r0, r3
 8002b74:	d301      	bcc.n	8002b7a <__clzsi2+0x22>
 8002b76:	0900      	lsrs	r0, r0, #4
 8002b78:	3904      	subs	r1, #4
 8002b7a:	a202      	add	r2, pc, #8	; (adr r2, 8002b84 <__clzsi2+0x2c>)
 8002b7c:	5c10      	ldrb	r0, [r2, r0]
 8002b7e:	1840      	adds	r0, r0, r1
 8002b80:	4770      	bx	lr
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	02020304 	.word	0x02020304
 8002b88:	01010101 	.word	0x01010101
	...

08002b94 <__clzdi2>:
 8002b94:	b510      	push	{r4, lr}
 8002b96:	2900      	cmp	r1, #0
 8002b98:	d103      	bne.n	8002ba2 <__clzdi2+0xe>
 8002b9a:	f7ff ffdd 	bl	8002b58 <__clzsi2>
 8002b9e:	3020      	adds	r0, #32
 8002ba0:	e002      	b.n	8002ba8 <__clzdi2+0x14>
 8002ba2:	1c08      	adds	r0, r1, #0
 8002ba4:	f7ff ffd8 	bl	8002b58 <__clzsi2>
 8002ba8:	bd10      	pop	{r4, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)

08002bac <dataCalibration>:
long B6 = 0;
unsigned long B7 = 0;
long Pressure = 0;
long TE = 0;

void dataCalibration() {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af04      	add	r7, sp, #16
	uint8_t dataCalibration[22] = {0};
 8002bb2:	003b      	movs	r3, r7
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	2212      	movs	r2, #18
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f004 f91c 	bl	8006dfc <memset>
	uint16_t startCalibration = 0xAA;
 8002bc4:	2116      	movs	r1, #22
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	22aa      	movs	r2, #170	; 0xaa
 8002bca:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, 0xEE, startCalibration, 1, dataCalibration, 22, HAL_MAX_DELAY);
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	881a      	ldrh	r2, [r3, #0]
 8002bd0:	4845      	ldr	r0, [pc, #276]	; (8002ce8 <dataCalibration+0x13c>)
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	425b      	negs	r3, r3
 8002bd6:	9302      	str	r3, [sp, #8]
 8002bd8:	2316      	movs	r3, #22
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	003b      	movs	r3, r7
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	2301      	movs	r3, #1
 8002be2:	21ee      	movs	r1, #238	; 0xee
 8002be4:	f002 faf6 	bl	80051d4 <HAL_I2C_Mem_Read>
	AC1 = ((dataCalibration[0] << 8) | dataCalibration[1]);
 8002be8:	003b      	movs	r3, r7
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	b21a      	sxth	r2, r3
 8002bf0:	003b      	movs	r3, r7
 8002bf2:	785b      	ldrb	r3, [r3, #1]
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	b21a      	sxth	r2, r3
 8002bfa:	4b3c      	ldr	r3, [pc, #240]	; (8002cec <dataCalibration+0x140>)
 8002bfc:	801a      	strh	r2, [r3, #0]
	AC2 = ((dataCalibration[2] << 8) | dataCalibration[3]);
 8002bfe:	003b      	movs	r3, r7
 8002c00:	789b      	ldrb	r3, [r3, #2]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	b21a      	sxth	r2, r3
 8002c06:	003b      	movs	r3, r7
 8002c08:	78db      	ldrb	r3, [r3, #3]
 8002c0a:	b21b      	sxth	r3, r3
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	b21a      	sxth	r2, r3
 8002c10:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <dataCalibration+0x144>)
 8002c12:	801a      	strh	r2, [r3, #0]
	AC3 = ((dataCalibration[4] << 8) | dataCalibration[5]);
 8002c14:	003b      	movs	r3, r7
 8002c16:	791b      	ldrb	r3, [r3, #4]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	b21a      	sxth	r2, r3
 8002c1c:	003b      	movs	r3, r7
 8002c1e:	795b      	ldrb	r3, [r3, #5]
 8002c20:	b21b      	sxth	r3, r3
 8002c22:	4313      	orrs	r3, r2
 8002c24:	b21a      	sxth	r2, r3
 8002c26:	4b33      	ldr	r3, [pc, #204]	; (8002cf4 <dataCalibration+0x148>)
 8002c28:	801a      	strh	r2, [r3, #0]
	AC4 = ((dataCalibration[6] << 8) | dataCalibration[7]);
 8002c2a:	003b      	movs	r3, r7
 8002c2c:	799b      	ldrb	r3, [r3, #6]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	b21a      	sxth	r2, r3
 8002c32:	003b      	movs	r3, r7
 8002c34:	79db      	ldrb	r3, [r3, #7]
 8002c36:	b21b      	sxth	r3, r3
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b21b      	sxth	r3, r3
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	4b2e      	ldr	r3, [pc, #184]	; (8002cf8 <dataCalibration+0x14c>)
 8002c40:	801a      	strh	r2, [r3, #0]
	AC5 = ((dataCalibration[8] << 8) | dataCalibration[9]);
 8002c42:	003b      	movs	r3, r7
 8002c44:	7a1b      	ldrb	r3, [r3, #8]
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	b21a      	sxth	r2, r3
 8002c4a:	003b      	movs	r3, r7
 8002c4c:	7a5b      	ldrb	r3, [r3, #9]
 8002c4e:	b21b      	sxth	r3, r3
 8002c50:	4313      	orrs	r3, r2
 8002c52:	b21b      	sxth	r3, r3
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <dataCalibration+0x150>)
 8002c58:	801a      	strh	r2, [r3, #0]
	AC6 = ((dataCalibration[10] << 8) | dataCalibration[11]);
 8002c5a:	003b      	movs	r3, r7
 8002c5c:	7a9b      	ldrb	r3, [r3, #10]
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	b21a      	sxth	r2, r3
 8002c62:	003b      	movs	r3, r7
 8002c64:	7adb      	ldrb	r3, [r3, #11]
 8002c66:	b21b      	sxth	r3, r3
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	b21b      	sxth	r3, r3
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <dataCalibration+0x154>)
 8002c70:	801a      	strh	r2, [r3, #0]
	B1 = ((dataCalibration[12] << 8) | dataCalibration[13]);
 8002c72:	003b      	movs	r3, r7
 8002c74:	7b1b      	ldrb	r3, [r3, #12]
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	b21a      	sxth	r2, r3
 8002c7a:	003b      	movs	r3, r7
 8002c7c:	7b5b      	ldrb	r3, [r3, #13]
 8002c7e:	b21b      	sxth	r3, r3
 8002c80:	4313      	orrs	r3, r2
 8002c82:	b21a      	sxth	r2, r3
 8002c84:	4b1f      	ldr	r3, [pc, #124]	; (8002d04 <dataCalibration+0x158>)
 8002c86:	801a      	strh	r2, [r3, #0]
	B2 = ((dataCalibration[14] << 8) | dataCalibration[15]);
 8002c88:	003b      	movs	r3, r7
 8002c8a:	7b9b      	ldrb	r3, [r3, #14]
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	b21a      	sxth	r2, r3
 8002c90:	003b      	movs	r3, r7
 8002c92:	7bdb      	ldrb	r3, [r3, #15]
 8002c94:	b21b      	sxth	r3, r3
 8002c96:	4313      	orrs	r3, r2
 8002c98:	b21a      	sxth	r2, r3
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <dataCalibration+0x15c>)
 8002c9c:	801a      	strh	r2, [r3, #0]
	MB = ((dataCalibration[16] << 8) | dataCalibration[17]);
 8002c9e:	003b      	movs	r3, r7
 8002ca0:	7c1b      	ldrb	r3, [r3, #16]
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	b21a      	sxth	r2, r3
 8002ca6:	003b      	movs	r3, r7
 8002ca8:	7c5b      	ldrb	r3, [r3, #17]
 8002caa:	b21b      	sxth	r3, r3
 8002cac:	4313      	orrs	r3, r2
 8002cae:	b21a      	sxth	r2, r3
 8002cb0:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <dataCalibration+0x160>)
 8002cb2:	801a      	strh	r2, [r3, #0]
	MC = ((dataCalibration[18] << 8) | dataCalibration[19]);
 8002cb4:	003b      	movs	r3, r7
 8002cb6:	7c9b      	ldrb	r3, [r3, #18]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	b21a      	sxth	r2, r3
 8002cbc:	003b      	movs	r3, r7
 8002cbe:	7cdb      	ldrb	r3, [r3, #19]
 8002cc0:	b21b      	sxth	r3, r3
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	b21a      	sxth	r2, r3
 8002cc6:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <dataCalibration+0x164>)
 8002cc8:	801a      	strh	r2, [r3, #0]
	MD = ((dataCalibration[20] << 8) | dataCalibration[21]);
 8002cca:	003b      	movs	r3, r7
 8002ccc:	7d1b      	ldrb	r3, [r3, #20]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	b21a      	sxth	r2, r3
 8002cd2:	003b      	movs	r3, r7
 8002cd4:	7d5b      	ldrb	r3, [r3, #21]
 8002cd6:	b21b      	sxth	r3, r3
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	b21a      	sxth	r2, r3
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <dataCalibration+0x168>)
 8002cde:	801a      	strh	r2, [r3, #0]
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b006      	add	sp, #24
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	200000e4 	.word	0x200000e4
 8002cec:	200000b2 	.word	0x200000b2
 8002cf0:	200000c8 	.word	0x200000c8
 8002cf4:	200000ca 	.word	0x200000ca
 8002cf8:	200000be 	.word	0x200000be
 8002cfc:	200000bc 	.word	0x200000bc
 8002d00:	200000b4 	.word	0x200000b4
 8002d04:	200000d4 	.word	0x200000d4
 8002d08:	200000cc 	.word	0x200000cc
 8002d0c:	200000c0 	.word	0x200000c0
 8002d10:	200000dc 	.word	0x200000dc
 8002d14:	200000b0 	.word	0x200000b0

08002d18 <utemp>:

uint16_t utemp() {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 8002d1e:	1dfb      	adds	r3, r7, #7
 8002d20:	222e      	movs	r2, #46	; 0x2e
 8002d22:	701a      	strb	r2, [r3, #0]
	uint8_t rawtemp[2] = {0};
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	2200      	movs	r2, #0
 8002d28:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, 0xEE, 0xF4, 1, &data, 1, 1000);
 8002d2a:	4815      	ldr	r0, [pc, #84]	; (8002d80 <utemp+0x68>)
 8002d2c:	23fa      	movs	r3, #250	; 0xfa
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	9302      	str	r3, [sp, #8]
 8002d32:	2301      	movs	r3, #1
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	1dfb      	adds	r3, r7, #7
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	22f4      	movs	r2, #244	; 0xf4
 8002d3e:	21ee      	movs	r1, #238	; 0xee
 8002d40:	f002 f91a 	bl	8004f78 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8002d44:	2005      	movs	r0, #5
 8002d46:	f001 fa73 	bl	8004230 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, 0xEE, 0xF6, 1, rawtemp, 2, 1000);
 8002d4a:	480d      	ldr	r0, [pc, #52]	; (8002d80 <utemp+0x68>)
 8002d4c:	23fa      	movs	r3, #250	; 0xfa
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	9302      	str	r3, [sp, #8]
 8002d52:	2302      	movs	r3, #2
 8002d54:	9301      	str	r3, [sp, #4]
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	22f6      	movs	r2, #246	; 0xf6
 8002d5e:	21ee      	movs	r1, #238	; 0xee
 8002d60:	f002 fa38 	bl	80051d4 <HAL_I2C_Mem_Read>
	return (rawtemp[0] << 8) + rawtemp[1];
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	785b      	ldrb	r3, [r3, #1]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	18d3      	adds	r3, r2, r3
 8002d76:	b29b      	uxth	r3, r3
}
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	200000e4 	.word	0x200000e4

08002d84 <getTemp>:

uint16_t getTemp() {
 8002d84:	b5b0      	push	{r4, r5, r7, lr}
 8002d86:	af00      	add	r7, sp, #0
	UT = utemp();
 8002d88:	f7ff ffc6 	bl	8002d18 <utemp>
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	001a      	movs	r2, r3
 8002d90:	4b3c      	ldr	r3, [pc, #240]	; (8002e84 <getTemp+0x100>)
 8002d92:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8002d94:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <getTemp+0x100>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a3b      	ldr	r2, [pc, #236]	; (8002e88 <getTemp+0x104>)
 8002d9a:	8812      	ldrh	r2, [r2, #0]
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f7ff fdb4 	bl	800290c <__aeabi_i2d>
 8002da4:	0004      	movs	r4, r0
 8002da6:	000d      	movs	r5, r1
 8002da8:	4b38      	ldr	r3, [pc, #224]	; (8002e8c <getTemp+0x108>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7ff fdad 	bl	800290c <__aeabi_i2d>
 8002db2:	2200      	movs	r2, #0
 8002db4:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <getTemp+0x10c>)
 8002db6:	f7fe fb51 	bl	800145c <__aeabi_ddiv>
 8002dba:	0002      	movs	r2, r0
 8002dbc:	000b      	movs	r3, r1
 8002dbe:	0020      	movs	r0, r4
 8002dc0:	0029      	movs	r1, r5
 8002dc2:	f7fe ff51 	bl	8001c68 <__aeabi_dmul>
 8002dc6:	0002      	movs	r2, r0
 8002dc8:	000b      	movs	r3, r1
 8002dca:	0010      	movs	r0, r2
 8002dcc:	0019      	movs	r1, r3
 8002dce:	f7ff fd67 	bl	80028a0 <__aeabi_d2iz>
 8002dd2:	0002      	movs	r2, r0
 8002dd4:	4b2f      	ldr	r3, [pc, #188]	; (8002e94 <getTemp+0x110>)
 8002dd6:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8002dd8:	4b2f      	ldr	r3, [pc, #188]	; (8002e98 <getTemp+0x114>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	5e9b      	ldrsh	r3, [r3, r2]
 8002dde:	0018      	movs	r0, r3
 8002de0:	f7ff fd94 	bl	800290c <__aeabi_i2d>
 8002de4:	2200      	movs	r2, #0
 8002de6:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <getTemp+0x118>)
 8002de8:	f7fe ff3e 	bl	8001c68 <__aeabi_dmul>
 8002dec:	0002      	movs	r2, r0
 8002dee:	000b      	movs	r3, r1
 8002df0:	0014      	movs	r4, r2
 8002df2:	001d      	movs	r5, r3
 8002df4:	4b2a      	ldr	r3, [pc, #168]	; (8002ea0 <getTemp+0x11c>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	5e9b      	ldrsh	r3, [r3, r2]
 8002dfa:	001a      	movs	r2, r3
 8002dfc:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <getTemp+0x110>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	18d3      	adds	r3, r2, r3
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7ff fd82 	bl	800290c <__aeabi_i2d>
 8002e08:	0002      	movs	r2, r0
 8002e0a:	000b      	movs	r3, r1
 8002e0c:	0020      	movs	r0, r4
 8002e0e:	0029      	movs	r1, r5
 8002e10:	f7fe fb24 	bl	800145c <__aeabi_ddiv>
 8002e14:	0002      	movs	r2, r0
 8002e16:	000b      	movs	r3, r1
 8002e18:	0010      	movs	r0, r2
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	f7ff fd40 	bl	80028a0 <__aeabi_d2iz>
 8002e20:	0002      	movs	r2, r0
 8002e22:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <getTemp+0x120>)
 8002e24:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 8002e26:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <getTemp+0x110>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <getTemp+0x120>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	18d2      	adds	r2, r2, r3
 8002e30:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <getTemp+0x124>)
 8002e32:	601a      	str	r2, [r3, #0]
	TE = (B5+8)/(pow(2,4));
 8002e34:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <getTemp+0x124>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3308      	adds	r3, #8
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f7ff fd66 	bl	800290c <__aeabi_i2d>
 8002e40:	2200      	movs	r2, #0
 8002e42:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <getTemp+0x128>)
 8002e44:	f7fe fb0a 	bl	800145c <__aeabi_ddiv>
 8002e48:	0002      	movs	r2, r0
 8002e4a:	000b      	movs	r3, r1
 8002e4c:	0010      	movs	r0, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	f7ff fd26 	bl	80028a0 <__aeabi_d2iz>
 8002e54:	0002      	movs	r2, r0
 8002e56:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <getTemp+0x12c>)
 8002e58:	601a      	str	r2, [r3, #0]
	return TE/10.0;
 8002e5a:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <getTemp+0x12c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f7ff fd54 	bl	800290c <__aeabi_i2d>
 8002e64:	2200      	movs	r2, #0
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <getTemp+0x130>)
 8002e68:	f7fe faf8 	bl	800145c <__aeabi_ddiv>
 8002e6c:	0002      	movs	r2, r0
 8002e6e:	000b      	movs	r3, r1
 8002e70:	0010      	movs	r0, r2
 8002e72:	0019      	movs	r1, r3
 8002e74:	f7fd fa5a 	bl	800032c <__aeabi_d2uiz>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	b29b      	uxth	r3, r3
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bdb0      	pop	{r4, r5, r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	20000090 	.word	0x20000090
 8002e88:	200000b4 	.word	0x200000b4
 8002e8c:	200000bc 	.word	0x200000bc
 8002e90:	40e00000 	.word	0x40e00000
 8002e94:	200000c4 	.word	0x200000c4
 8002e98:	200000dc 	.word	0x200000dc
 8002e9c:	40a00000 	.word	0x40a00000
 8002ea0:	200000b0 	.word	0x200000b0
 8002ea4:	200000b8 	.word	0x200000b8
 8002ea8:	20000098 	.word	0x20000098
 8002eac:	40300000 	.word	0x40300000
 8002eb0:	200000ac 	.word	0x200000ac
 8002eb4:	40240000 	.word	0x40240000

08002eb8 <upress>:

uint32_t upress(int s) {
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af04      	add	r7, sp, #16
 8002ebe:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x34 + (s << 6);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	019b      	lsls	r3, r3, #6
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	3334      	adds	r3, #52	; 0x34
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	240f      	movs	r4, #15
 8002ece:	193b      	adds	r3, r7, r4
 8002ed0:	701a      	strb	r2, [r3, #0]
	uint8_t rawpress[3] = {0};
 8002ed2:	230c      	movs	r3, #12
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	4a2c      	ldr	r2, [pc, #176]	; (8002f88 <upress+0xd0>)
 8002ed8:	8812      	ldrh	r2, [r2, #0]
 8002eda:	801a      	strh	r2, [r3, #0]
 8002edc:	2202      	movs	r2, #2
 8002ede:	2100      	movs	r1, #0
 8002ee0:	5499      	strb	r1, [r3, r2]
	HAL_I2C_Mem_Write(&hi2c1, 0xEE, 0xF4, 1, &data, 1, 1000);
 8002ee2:	482a      	ldr	r0, [pc, #168]	; (8002f8c <upress+0xd4>)
 8002ee4:	23fa      	movs	r3, #250	; 0xfa
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	9302      	str	r3, [sp, #8]
 8002eea:	2301      	movs	r3, #1
 8002eec:	9301      	str	r3, [sp, #4]
 8002eee:	193b      	adds	r3, r7, r4
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	22f4      	movs	r2, #244	; 0xf4
 8002ef6:	21ee      	movs	r1, #238	; 0xee
 8002ef8:	f002 f83e 	bl	8004f78 <HAL_I2C_Mem_Write>
	switch(s) {
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d01b      	beq.n	8002f3a <upress+0x82>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	dc1c      	bgt.n	8002f42 <upress+0x8a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d011      	beq.n	8002f32 <upress+0x7a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	dc16      	bgt.n	8002f42 <upress+0x8a>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <upress+0x6a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d004      	beq.n	8002f2a <upress+0x72>
 8002f20:	e00f      	b.n	8002f42 <upress+0x8a>
	case(0):
			HAL_Delay(5);
 8002f22:	2005      	movs	r0, #5
 8002f24:	f001 f984 	bl	8004230 <HAL_Delay>
	break;
 8002f28:	e00b      	b.n	8002f42 <upress+0x8a>
	case(1):
			HAL_Delay(8);
 8002f2a:	2008      	movs	r0, #8
 8002f2c:	f001 f980 	bl	8004230 <HAL_Delay>
	break;
 8002f30:	e007      	b.n	8002f42 <upress+0x8a>
	case(2):
			HAL_Delay(14);
 8002f32:	200e      	movs	r0, #14
 8002f34:	f001 f97c 	bl	8004230 <HAL_Delay>
	break;
 8002f38:	e003      	b.n	8002f42 <upress+0x8a>
	case(3):
			HAL_Delay(26);
 8002f3a:	201a      	movs	r0, #26
 8002f3c:	f001 f978 	bl	8004230 <HAL_Delay>
	break;
 8002f40:	46c0      	nop			; (mov r8, r8)
	}
	HAL_I2C_Mem_Read(&hi2c1, 0xEE, 0xF6, 1, rawpress, 3, 1000);
 8002f42:	4812      	ldr	r0, [pc, #72]	; (8002f8c <upress+0xd4>)
 8002f44:	23fa      	movs	r3, #250	; 0xfa
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	9302      	str	r3, [sp, #8]
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	240c      	movs	r4, #12
 8002f50:	193b      	adds	r3, r7, r4
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2301      	movs	r3, #1
 8002f56:	22f6      	movs	r2, #246	; 0xf6
 8002f58:	21ee      	movs	r1, #238	; 0xee
 8002f5a:	f002 f93b 	bl	80051d4 <HAL_I2C_Mem_Read>
	return (((rawpress[0] << 16) + (rawpress[1] << 8) + rawpress[2]) >> (8-s));
 8002f5e:	0021      	movs	r1, r4
 8002f60:	187b      	adds	r3, r7, r1
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	041a      	lsls	r2, r3, #16
 8002f66:	187b      	adds	r3, r7, r1
 8002f68:	785b      	ldrb	r3, [r3, #1]
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	18d3      	adds	r3, r2, r3
 8002f6e:	187a      	adds	r2, r7, r1
 8002f70:	7892      	ldrb	r2, [r2, #2]
 8002f72:	189a      	adds	r2, r3, r2
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2108      	movs	r1, #8
 8002f78:	1acb      	subs	r3, r1, r3
 8002f7a:	411a      	asrs	r2, r3
 8002f7c:	0013      	movs	r3, r2
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b005      	add	sp, #20
 8002f84:	bd90      	pop	{r4, r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	08007d18 	.word	0x08007d18
 8002f8c:	200000e4 	.word	0x200000e4

08002f90 <getPressure>:

float getPressure(int s) {
 8002f90:	b5b0      	push	{r4, r5, r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
	UP = upress(s);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7ff ff8c 	bl	8002eb8 <upress>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	001a      	movs	r2, r3
 8002fa4:	4bea      	ldr	r3, [pc, #936]	; (8003350 <getPressure+0x3c0>)
 8002fa6:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8002fa8:	4bea      	ldr	r3, [pc, #936]	; (8003354 <getPressure+0x3c4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4aea      	ldr	r2, [pc, #936]	; (8003358 <getPressure+0x3c8>)
 8002fae:	8812      	ldrh	r2, [r2, #0]
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f7ff fcaa 	bl	800290c <__aeabi_i2d>
 8002fb8:	0004      	movs	r4, r0
 8002fba:	000d      	movs	r5, r1
 8002fbc:	4be7      	ldr	r3, [pc, #924]	; (800335c <getPressure+0x3cc>)
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f7ff fca3 	bl	800290c <__aeabi_i2d>
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	4be5      	ldr	r3, [pc, #916]	; (8003360 <getPressure+0x3d0>)
 8002fca:	f7fe fa47 	bl	800145c <__aeabi_ddiv>
 8002fce:	0002      	movs	r2, r0
 8002fd0:	000b      	movs	r3, r1
 8002fd2:	0020      	movs	r0, r4
 8002fd4:	0029      	movs	r1, r5
 8002fd6:	f7fe fe47 	bl	8001c68 <__aeabi_dmul>
 8002fda:	0002      	movs	r2, r0
 8002fdc:	000b      	movs	r3, r1
 8002fde:	0010      	movs	r0, r2
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	f7ff fc5d 	bl	80028a0 <__aeabi_d2iz>
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	4bde      	ldr	r3, [pc, #888]	; (8003364 <getPressure+0x3d4>)
 8002fea:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8002fec:	4bde      	ldr	r3, [pc, #888]	; (8003368 <getPressure+0x3d8>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	5e9b      	ldrsh	r3, [r3, r2]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f7ff fc8a 	bl	800290c <__aeabi_i2d>
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	4bdc      	ldr	r3, [pc, #880]	; (800336c <getPressure+0x3dc>)
 8002ffc:	f7fe fe34 	bl	8001c68 <__aeabi_dmul>
 8003000:	0002      	movs	r2, r0
 8003002:	000b      	movs	r3, r1
 8003004:	0014      	movs	r4, r2
 8003006:	001d      	movs	r5, r3
 8003008:	4bd9      	ldr	r3, [pc, #868]	; (8003370 <getPressure+0x3e0>)
 800300a:	2200      	movs	r2, #0
 800300c:	5e9b      	ldrsh	r3, [r3, r2]
 800300e:	001a      	movs	r2, r3
 8003010:	4bd4      	ldr	r3, [pc, #848]	; (8003364 <getPressure+0x3d4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	18d3      	adds	r3, r2, r3
 8003016:	0018      	movs	r0, r3
 8003018:	f7ff fc78 	bl	800290c <__aeabi_i2d>
 800301c:	0002      	movs	r2, r0
 800301e:	000b      	movs	r3, r1
 8003020:	0020      	movs	r0, r4
 8003022:	0029      	movs	r1, r5
 8003024:	f7fe fa1a 	bl	800145c <__aeabi_ddiv>
 8003028:	0002      	movs	r2, r0
 800302a:	000b      	movs	r3, r1
 800302c:	0010      	movs	r0, r2
 800302e:	0019      	movs	r1, r3
 8003030:	f7ff fc36 	bl	80028a0 <__aeabi_d2iz>
 8003034:	0002      	movs	r2, r0
 8003036:	4bcf      	ldr	r3, [pc, #828]	; (8003374 <getPressure+0x3e4>)
 8003038:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 800303a:	4bca      	ldr	r3, [pc, #808]	; (8003364 <getPressure+0x3d4>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4bcd      	ldr	r3, [pc, #820]	; (8003374 <getPressure+0x3e4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	18d2      	adds	r2, r2, r3
 8003044:	4bcc      	ldr	r3, [pc, #816]	; (8003378 <getPressure+0x3e8>)
 8003046:	601a      	str	r2, [r3, #0]
	B6 = B5-4000;
 8003048:	4bcb      	ldr	r3, [pc, #812]	; (8003378 <getPressure+0x3e8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4acb      	ldr	r2, [pc, #812]	; (800337c <getPressure+0x3ec>)
 800304e:	189a      	adds	r2, r3, r2
 8003050:	4bcb      	ldr	r3, [pc, #812]	; (8003380 <getPressure+0x3f0>)
 8003052:	601a      	str	r2, [r3, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8003054:	4bcb      	ldr	r3, [pc, #812]	; (8003384 <getPressure+0x3f4>)
 8003056:	2200      	movs	r2, #0
 8003058:	5e9b      	ldrsh	r3, [r3, r2]
 800305a:	0018      	movs	r0, r3
 800305c:	f7ff fc56 	bl	800290c <__aeabi_i2d>
 8003060:	0004      	movs	r4, r0
 8003062:	000d      	movs	r5, r1
 8003064:	4bc6      	ldr	r3, [pc, #792]	; (8003380 <getPressure+0x3f0>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4bc5      	ldr	r3, [pc, #788]	; (8003380 <getPressure+0x3f0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4353      	muls	r3, r2
 800306e:	0018      	movs	r0, r3
 8003070:	f7ff fc4c 	bl	800290c <__aeabi_i2d>
 8003074:	2200      	movs	r2, #0
 8003076:	4bc4      	ldr	r3, [pc, #784]	; (8003388 <getPressure+0x3f8>)
 8003078:	f7fe f9f0 	bl	800145c <__aeabi_ddiv>
 800307c:	0002      	movs	r2, r0
 800307e:	000b      	movs	r3, r1
 8003080:	0020      	movs	r0, r4
 8003082:	0029      	movs	r1, r5
 8003084:	f7fe fdf0 	bl	8001c68 <__aeabi_dmul>
 8003088:	0002      	movs	r2, r0
 800308a:	000b      	movs	r3, r1
 800308c:	0010      	movs	r0, r2
 800308e:	0019      	movs	r1, r3
 8003090:	2200      	movs	r2, #0
 8003092:	4bb6      	ldr	r3, [pc, #728]	; (800336c <getPressure+0x3dc>)
 8003094:	f7fe f9e2 	bl	800145c <__aeabi_ddiv>
 8003098:	0002      	movs	r2, r0
 800309a:	000b      	movs	r3, r1
 800309c:	0010      	movs	r0, r2
 800309e:	0019      	movs	r1, r3
 80030a0:	f7ff fbfe 	bl	80028a0 <__aeabi_d2iz>
 80030a4:	0002      	movs	r2, r0
 80030a6:	4baf      	ldr	r3, [pc, #700]	; (8003364 <getPressure+0x3d4>)
 80030a8:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(pow(2,11));
 80030aa:	4bb8      	ldr	r3, [pc, #736]	; (800338c <getPressure+0x3fc>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	5e9b      	ldrsh	r3, [r3, r2]
 80030b0:	001a      	movs	r2, r3
 80030b2:	4bb3      	ldr	r3, [pc, #716]	; (8003380 <getPressure+0x3f0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4353      	muls	r3, r2
 80030b8:	0018      	movs	r0, r3
 80030ba:	f7ff fc27 	bl	800290c <__aeabi_i2d>
 80030be:	2200      	movs	r2, #0
 80030c0:	4baa      	ldr	r3, [pc, #680]	; (800336c <getPressure+0x3dc>)
 80030c2:	f7fe f9cb 	bl	800145c <__aeabi_ddiv>
 80030c6:	0002      	movs	r2, r0
 80030c8:	000b      	movs	r3, r1
 80030ca:	0010      	movs	r0, r2
 80030cc:	0019      	movs	r1, r3
 80030ce:	f7ff fbe7 	bl	80028a0 <__aeabi_d2iz>
 80030d2:	0002      	movs	r2, r0
 80030d4:	4ba7      	ldr	r3, [pc, #668]	; (8003374 <getPressure+0x3e4>)
 80030d6:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 80030d8:	4ba2      	ldr	r3, [pc, #648]	; (8003364 <getPressure+0x3d4>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4ba5      	ldr	r3, [pc, #660]	; (8003374 <getPressure+0x3e4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	18d2      	adds	r2, r2, r3
 80030e2:	4bab      	ldr	r3, [pc, #684]	; (8003390 <getPressure+0x400>)
 80030e4:	601a      	str	r2, [r3, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80030e6:	4bab      	ldr	r3, [pc, #684]	; (8003394 <getPressure+0x404>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	5e9b      	ldrsh	r3, [r3, r2]
 80030ec:	009a      	lsls	r2, r3, #2
 80030ee:	4ba8      	ldr	r3, [pc, #672]	; (8003390 <getPressure+0x400>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	18d3      	adds	r3, r2, r3
 80030f4:	4aa8      	ldr	r2, [pc, #672]	; (8003398 <getPressure+0x408>)
 80030f6:	2100      	movs	r1, #0
 80030f8:	5e52      	ldrsh	r2, [r2, r1]
 80030fa:	4093      	lsls	r3, r2
 80030fc:	3302      	adds	r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	da00      	bge.n	8003104 <getPressure+0x174>
 8003102:	3303      	adds	r3, #3
 8003104:	109b      	asrs	r3, r3, #2
 8003106:	001a      	movs	r2, r3
 8003108:	4ba4      	ldr	r3, [pc, #656]	; (800339c <getPressure+0x40c>)
 800310a:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 800310c:	4ba4      	ldr	r3, [pc, #656]	; (80033a0 <getPressure+0x410>)
 800310e:	2200      	movs	r2, #0
 8003110:	5e9b      	ldrsh	r3, [r3, r2]
 8003112:	001a      	movs	r2, r3
 8003114:	4b9a      	ldr	r3, [pc, #616]	; (8003380 <getPressure+0x3f0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4353      	muls	r3, r2
 800311a:	0018      	movs	r0, r3
 800311c:	f7ff fbf6 	bl	800290c <__aeabi_i2d>
 8003120:	2200      	movs	r2, #0
 8003122:	4ba0      	ldr	r3, [pc, #640]	; (80033a4 <getPressure+0x414>)
 8003124:	f7fe f99a 	bl	800145c <__aeabi_ddiv>
 8003128:	0002      	movs	r2, r0
 800312a:	000b      	movs	r3, r1
 800312c:	0010      	movs	r0, r2
 800312e:	0019      	movs	r1, r3
 8003130:	f7ff fbb6 	bl	80028a0 <__aeabi_d2iz>
 8003134:	0002      	movs	r2, r0
 8003136:	4b8b      	ldr	r3, [pc, #556]	; (8003364 <getPressure+0x3d4>)
 8003138:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 800313a:	4b9b      	ldr	r3, [pc, #620]	; (80033a8 <getPressure+0x418>)
 800313c:	2200      	movs	r2, #0
 800313e:	5e9b      	ldrsh	r3, [r3, r2]
 8003140:	0018      	movs	r0, r3
 8003142:	f7ff fbe3 	bl	800290c <__aeabi_i2d>
 8003146:	0004      	movs	r4, r0
 8003148:	000d      	movs	r5, r1
 800314a:	4b8d      	ldr	r3, [pc, #564]	; (8003380 <getPressure+0x3f0>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b8c      	ldr	r3, [pc, #560]	; (8003380 <getPressure+0x3f0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4353      	muls	r3, r2
 8003154:	0018      	movs	r0, r3
 8003156:	f7ff fbd9 	bl	800290c <__aeabi_i2d>
 800315a:	2200      	movs	r2, #0
 800315c:	4b8a      	ldr	r3, [pc, #552]	; (8003388 <getPressure+0x3f8>)
 800315e:	f7fe f97d 	bl	800145c <__aeabi_ddiv>
 8003162:	0002      	movs	r2, r0
 8003164:	000b      	movs	r3, r1
 8003166:	0020      	movs	r0, r4
 8003168:	0029      	movs	r1, r5
 800316a:	f7fe fd7d 	bl	8001c68 <__aeabi_dmul>
 800316e:	0002      	movs	r2, r0
 8003170:	000b      	movs	r3, r1
 8003172:	0010      	movs	r0, r2
 8003174:	0019      	movs	r1, r3
 8003176:	2200      	movs	r2, #0
 8003178:	4b8c      	ldr	r3, [pc, #560]	; (80033ac <getPressure+0x41c>)
 800317a:	f7fe f96f 	bl	800145c <__aeabi_ddiv>
 800317e:	0002      	movs	r2, r0
 8003180:	000b      	movs	r3, r1
 8003182:	0010      	movs	r0, r2
 8003184:	0019      	movs	r1, r3
 8003186:	f7ff fb8b 	bl	80028a0 <__aeabi_d2iz>
 800318a:	0002      	movs	r2, r0
 800318c:	4b79      	ldr	r3, [pc, #484]	; (8003374 <getPressure+0x3e4>)
 800318e:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8003190:	4b74      	ldr	r3, [pc, #464]	; (8003364 <getPressure+0x3d4>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4b77      	ldr	r3, [pc, #476]	; (8003374 <getPressure+0x3e4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	18d3      	adds	r3, r2, r3
 800319a:	3302      	adds	r3, #2
 800319c:	0018      	movs	r0, r3
 800319e:	f7ff fbb5 	bl	800290c <__aeabi_i2d>
 80031a2:	2200      	movs	r2, #0
 80031a4:	4b82      	ldr	r3, [pc, #520]	; (80033b0 <getPressure+0x420>)
 80031a6:	f7fe f959 	bl	800145c <__aeabi_ddiv>
 80031aa:	0002      	movs	r2, r0
 80031ac:	000b      	movs	r3, r1
 80031ae:	0010      	movs	r0, r2
 80031b0:	0019      	movs	r1, r3
 80031b2:	f7ff fb75 	bl	80028a0 <__aeabi_d2iz>
 80031b6:	0002      	movs	r2, r0
 80031b8:	4b75      	ldr	r3, [pc, #468]	; (8003390 <getPressure+0x400>)
 80031ba:	601a      	str	r2, [r3, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80031bc:	4b7d      	ldr	r3, [pc, #500]	; (80033b4 <getPressure+0x424>)
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	001a      	movs	r2, r3
 80031c2:	4b73      	ldr	r3, [pc, #460]	; (8003390 <getPressure+0x400>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2180      	movs	r1, #128	; 0x80
 80031c8:	0209      	lsls	r1, r1, #8
 80031ca:	468c      	mov	ip, r1
 80031cc:	4463      	add	r3, ip
 80031ce:	4353      	muls	r3, r2
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7ff fbcb 	bl	800296c <__aeabi_ui2d>
 80031d6:	2200      	movs	r2, #0
 80031d8:	4b61      	ldr	r3, [pc, #388]	; (8003360 <getPressure+0x3d0>)
 80031da:	f7fe f93f 	bl	800145c <__aeabi_ddiv>
 80031de:	0002      	movs	r2, r0
 80031e0:	000b      	movs	r3, r1
 80031e2:	0010      	movs	r0, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	f7fd f8a1 	bl	800032c <__aeabi_d2uiz>
 80031ea:	0002      	movs	r2, r0
 80031ec:	4b72      	ldr	r3, [pc, #456]	; (80033b8 <getPressure+0x428>)
 80031ee:	601a      	str	r2, [r3, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>s);
 80031f0:	4b57      	ldr	r3, [pc, #348]	; (8003350 <getPressure+0x3c0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	001a      	movs	r2, r3
 80031f6:	4b69      	ldr	r3, [pc, #420]	; (800339c <getPressure+0x40c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	496f      	ldr	r1, [pc, #444]	; (80033bc <getPressure+0x42c>)
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4111      	asrs	r1, r2
 8003202:	000a      	movs	r2, r1
 8003204:	435a      	muls	r2, r3
 8003206:	4b6e      	ldr	r3, [pc, #440]	; (80033c0 <getPressure+0x430>)
 8003208:	601a      	str	r2, [r3, #0]
	if(B7 < 0x80000000) {
 800320a:	4b6d      	ldr	r3, [pc, #436]	; (80033c0 <getPressure+0x430>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	db0d      	blt.n	800322e <getPressure+0x29e>
		Pressure = (B7*2) / B4;
 8003212:	4b6b      	ldr	r3, [pc, #428]	; (80033c0 <getPressure+0x430>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	005a      	lsls	r2, r3, #1
 8003218:	4b67      	ldr	r3, [pc, #412]	; (80033b8 <getPressure+0x428>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0019      	movs	r1, r3
 800321e:	0010      	movs	r0, r2
 8003220:	f7fc ff72 	bl	8000108 <__udivsi3>
 8003224:	0003      	movs	r3, r0
 8003226:	001a      	movs	r2, r3
 8003228:	4b66      	ldr	r3, [pc, #408]	; (80033c4 <getPressure+0x434>)
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	e00c      	b.n	8003248 <getPressure+0x2b8>
	} else {
		Pressure = (B7/B4)*2;
 800322e:	4b64      	ldr	r3, [pc, #400]	; (80033c0 <getPressure+0x430>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4b61      	ldr	r3, [pc, #388]	; (80033b8 <getPressure+0x428>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	0019      	movs	r1, r3
 8003238:	0010      	movs	r0, r2
 800323a:	f7fc ff65 	bl	8000108 <__udivsi3>
 800323e:	0003      	movs	r3, r0
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	001a      	movs	r2, r3
 8003244:	4b5f      	ldr	r3, [pc, #380]	; (80033c4 <getPressure+0x434>)
 8003246:	601a      	str	r2, [r3, #0]
	}
	X1 = (Pressure/(pow(2,8)))*(Pressure/(pow(2,8)));
 8003248:	4b5e      	ldr	r3, [pc, #376]	; (80033c4 <getPressure+0x434>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	0018      	movs	r0, r3
 800324e:	f7ff fb5d 	bl	800290c <__aeabi_i2d>
 8003252:	2200      	movs	r2, #0
 8003254:	4b5c      	ldr	r3, [pc, #368]	; (80033c8 <getPressure+0x438>)
 8003256:	f7fe f901 	bl	800145c <__aeabi_ddiv>
 800325a:	0002      	movs	r2, r0
 800325c:	000b      	movs	r3, r1
 800325e:	0014      	movs	r4, r2
 8003260:	001d      	movs	r5, r3
 8003262:	4b58      	ldr	r3, [pc, #352]	; (80033c4 <getPressure+0x434>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	0018      	movs	r0, r3
 8003268:	f7ff fb50 	bl	800290c <__aeabi_i2d>
 800326c:	2200      	movs	r2, #0
 800326e:	4b56      	ldr	r3, [pc, #344]	; (80033c8 <getPressure+0x438>)
 8003270:	f7fe f8f4 	bl	800145c <__aeabi_ddiv>
 8003274:	0002      	movs	r2, r0
 8003276:	000b      	movs	r3, r1
 8003278:	0020      	movs	r0, r4
 800327a:	0029      	movs	r1, r5
 800327c:	f7fe fcf4 	bl	8001c68 <__aeabi_dmul>
 8003280:	0002      	movs	r2, r0
 8003282:	000b      	movs	r3, r1
 8003284:	0010      	movs	r0, r2
 8003286:	0019      	movs	r1, r3
 8003288:	f7ff fb0a 	bl	80028a0 <__aeabi_d2iz>
 800328c:	0002      	movs	r2, r0
 800328e:	4b35      	ldr	r3, [pc, #212]	; (8003364 <getPressure+0x3d4>)
 8003290:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(pow(2,16));
 8003292:	4b34      	ldr	r3, [pc, #208]	; (8003364 <getPressure+0x3d4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a4d      	ldr	r2, [pc, #308]	; (80033cc <getPressure+0x43c>)
 8003298:	4353      	muls	r3, r2
 800329a:	0018      	movs	r0, r3
 800329c:	f7ff fb36 	bl	800290c <__aeabi_i2d>
 80032a0:	2200      	movs	r2, #0
 80032a2:	4b42      	ldr	r3, [pc, #264]	; (80033ac <getPressure+0x41c>)
 80032a4:	f7fe f8da 	bl	800145c <__aeabi_ddiv>
 80032a8:	0002      	movs	r2, r0
 80032aa:	000b      	movs	r3, r1
 80032ac:	0010      	movs	r0, r2
 80032ae:	0019      	movs	r1, r3
 80032b0:	f7ff faf6 	bl	80028a0 <__aeabi_d2iz>
 80032b4:	0002      	movs	r2, r0
 80032b6:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <getPressure+0x3d4>)
 80032b8:	601a      	str	r2, [r3, #0]
	X2 = (-7357*Pressure)/(pow(2,16));
 80032ba:	4b42      	ldr	r3, [pc, #264]	; (80033c4 <getPressure+0x434>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	0013      	movs	r3, r2
 80032c0:	015b      	lsls	r3, r3, #5
 80032c2:	189b      	adds	r3, r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	00da      	lsls	r2, r3, #3
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	425b      	negs	r3, r3
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7ff fb1a 	bl	800290c <__aeabi_i2d>
 80032d8:	2200      	movs	r2, #0
 80032da:	4b34      	ldr	r3, [pc, #208]	; (80033ac <getPressure+0x41c>)
 80032dc:	f7fe f8be 	bl	800145c <__aeabi_ddiv>
 80032e0:	0002      	movs	r2, r0
 80032e2:	000b      	movs	r3, r1
 80032e4:	0010      	movs	r0, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	f7ff fada 	bl	80028a0 <__aeabi_d2iz>
 80032ec:	0002      	movs	r2, r0
 80032ee:	4b21      	ldr	r3, [pc, #132]	; (8003374 <getPressure+0x3e4>)
 80032f0:	601a      	str	r2, [r3, #0]
	Pressure = Pressure + (X1+X2+3791)/(pow(2,4));
 80032f2:	4b34      	ldr	r3, [pc, #208]	; (80033c4 <getPressure+0x434>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7ff fb08 	bl	800290c <__aeabi_i2d>
 80032fc:	0004      	movs	r4, r0
 80032fe:	000d      	movs	r5, r1
 8003300:	4b18      	ldr	r3, [pc, #96]	; (8003364 <getPressure+0x3d4>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <getPressure+0x3e4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	18d3      	adds	r3, r2, r3
 800330a:	4a31      	ldr	r2, [pc, #196]	; (80033d0 <getPressure+0x440>)
 800330c:	4694      	mov	ip, r2
 800330e:	4463      	add	r3, ip
 8003310:	0018      	movs	r0, r3
 8003312:	f7ff fafb 	bl	800290c <__aeabi_i2d>
 8003316:	2200      	movs	r2, #0
 8003318:	4b2e      	ldr	r3, [pc, #184]	; (80033d4 <getPressure+0x444>)
 800331a:	f7fe f89f 	bl	800145c <__aeabi_ddiv>
 800331e:	0002      	movs	r2, r0
 8003320:	000b      	movs	r3, r1
 8003322:	0020      	movs	r0, r4
 8003324:	0029      	movs	r1, r5
 8003326:	f7fd fd2f 	bl	8000d88 <__aeabi_dadd>
 800332a:	0002      	movs	r2, r0
 800332c:	000b      	movs	r3, r1
 800332e:	0010      	movs	r0, r2
 8003330:	0019      	movs	r1, r3
 8003332:	f7ff fab5 	bl	80028a0 <__aeabi_d2iz>
 8003336:	0002      	movs	r2, r0
 8003338:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <getPressure+0x434>)
 800333a:	601a      	str	r2, [r3, #0]
	return Pressure;
 800333c:	4b21      	ldr	r3, [pc, #132]	; (80033c4 <getPressure+0x434>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0018      	movs	r0, r3
 8003342:	f7fd fc9f 	bl	8000c84 <__aeabi_i2f>
 8003346:	1c03      	adds	r3, r0, #0
}
 8003348:	1c18      	adds	r0, r3, #0
 800334a:	46bd      	mov	sp, r7
 800334c:	b002      	add	sp, #8
 800334e:	bdb0      	pop	{r4, r5, r7, pc}
 8003350:	200000d8 	.word	0x200000d8
 8003354:	20000090 	.word	0x20000090
 8003358:	200000b4 	.word	0x200000b4
 800335c:	200000bc 	.word	0x200000bc
 8003360:	40e00000 	.word	0x40e00000
 8003364:	200000c4 	.word	0x200000c4
 8003368:	200000dc 	.word	0x200000dc
 800336c:	40a00000 	.word	0x40a00000
 8003370:	200000b0 	.word	0x200000b0
 8003374:	200000b8 	.word	0x200000b8
 8003378:	20000098 	.word	0x20000098
 800337c:	fffff060 	.word	0xfffff060
 8003380:	200000a0 	.word	0x200000a0
 8003384:	200000cc 	.word	0x200000cc
 8003388:	40b00000 	.word	0x40b00000
 800338c:	200000c8 	.word	0x200000c8
 8003390:	200000d0 	.word	0x200000d0
 8003394:	200000b2 	.word	0x200000b2
 8003398:	20000094 	.word	0x20000094
 800339c:	200000e0 	.word	0x200000e0
 80033a0:	200000ca 	.word	0x200000ca
 80033a4:	40c00000 	.word	0x40c00000
 80033a8:	200000d4 	.word	0x200000d4
 80033ac:	40f00000 	.word	0x40f00000
 80033b0:	40100000 	.word	0x40100000
 80033b4:	200000be 	.word	0x200000be
 80033b8:	2000009c 	.word	0x2000009c
 80033bc:	0000c350 	.word	0x0000c350
 80033c0:	200000a4 	.word	0x200000a4
 80033c4:	200000a8 	.word	0x200000a8
 80033c8:	40700000 	.word	0x40700000
 80033cc:	00000bde 	.word	0x00000bde
 80033d0:	00000ecf 	.word	0x00000ecf
 80033d4:	40300000 	.word	0x40300000

080033d8 <getAlt>:

float getAlt(int s) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
	getPressure(s);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7ff fdd4 	bl	8002f90 <getPressure>
	return 44330*(1-(pow((Pressure/(float)101325), 0.19029495718)));
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <getAlt+0x68>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7fd fc49 	bl	8000c84 <__aeabi_i2f>
 80033f2:	1c03      	adds	r3, r0, #0
 80033f4:	4913      	ldr	r1, [pc, #76]	; (8003444 <getAlt+0x6c>)
 80033f6:	1c18      	adds	r0, r3, #0
 80033f8:	f7fd fa1e 	bl	8000838 <__aeabi_fdiv>
 80033fc:	1c03      	adds	r3, r0, #0
 80033fe:	1c18      	adds	r0, r3, #0
 8003400:	f7ff fada 	bl	80029b8 <__aeabi_f2d>
 8003404:	4a10      	ldr	r2, [pc, #64]	; (8003448 <getAlt+0x70>)
 8003406:	4b11      	ldr	r3, [pc, #68]	; (800344c <getAlt+0x74>)
 8003408:	f003 fd00 	bl	8006e0c <pow>
 800340c:	0002      	movs	r2, r0
 800340e:	000b      	movs	r3, r1
 8003410:	2000      	movs	r0, #0
 8003412:	490f      	ldr	r1, [pc, #60]	; (8003450 <getAlt+0x78>)
 8003414:	f7fe fe94 	bl	8002140 <__aeabi_dsub>
 8003418:	0002      	movs	r2, r0
 800341a:	000b      	movs	r3, r1
 800341c:	0010      	movs	r0, r2
 800341e:	0019      	movs	r1, r3
 8003420:	2200      	movs	r2, #0
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <getAlt+0x7c>)
 8003424:	f7fe fc20 	bl	8001c68 <__aeabi_dmul>
 8003428:	0002      	movs	r2, r0
 800342a:	000b      	movs	r3, r1
 800342c:	0010      	movs	r0, r2
 800342e:	0019      	movs	r1, r3
 8003430:	f7ff fb0a 	bl	8002a48 <__aeabi_d2f>
 8003434:	1c03      	adds	r3, r0, #0
}
 8003436:	1c18      	adds	r0, r3, #0
 8003438:	46bd      	mov	sp, r7
 800343a:	b002      	add	sp, #8
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	200000a8 	.word	0x200000a8
 8003444:	47c5e680 	.word	0x47c5e680
 8003448:	ccd745e4 	.word	0xccd745e4
 800344c:	3fc85b95 	.word	0x3fc85b95
 8003450:	3ff00000 	.word	0x3ff00000
 8003454:	40e5a540 	.word	0x40e5a540

08003458 <setOut>:
 *      Author: Michael
 */

#include "delay.h"

void setOut(GPIO_TypeDef* GPIOx) { //set gpio output mode
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b089      	sub	sp, #36	; 0x24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	240c      	movs	r4, #12
 8003462:	193b      	adds	r3, r7, r4
 8003464:	0018      	movs	r0, r3
 8003466:	2314      	movs	r3, #20
 8003468:	001a      	movs	r2, r3
 800346a:	2100      	movs	r1, #0
 800346c:	f003 fcc6 	bl	8006dfc <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003470:	193b      	adds	r3, r7, r4
 8003472:	2202      	movs	r2, #2
 8003474:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003476:	193b      	adds	r3, r7, r4
 8003478:	2201      	movs	r2, #1
 800347a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347c:	193b      	adds	r3, r7, r4
 800347e:	2200      	movs	r2, #0
 8003480:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003482:	193a      	adds	r2, r7, r4
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	0011      	movs	r1, r2
 8003488:	0018      	movs	r0, r3
 800348a:	f001 fb27 	bl	8004adc <HAL_GPIO_Init>
}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	b009      	add	sp, #36	; 0x24
 8003494:	bd90      	pop	{r4, r7, pc}

08003496 <setIn>:

void setIn(GPIO_TypeDef* GPIOx) { //set gpio input mode
 8003496:	b590      	push	{r4, r7, lr}
 8003498:	b089      	sub	sp, #36	; 0x24
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349e:	240c      	movs	r4, #12
 80034a0:	193b      	adds	r3, r7, r4
 80034a2:	0018      	movs	r0, r3
 80034a4:	2314      	movs	r3, #20
 80034a6:	001a      	movs	r2, r3
 80034a8:	2100      	movs	r1, #0
 80034aa:	f003 fca7 	bl	8006dfc <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80034ae:	193b      	adds	r3, r7, r4
 80034b0:	2202      	movs	r2, #2
 80034b2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034b4:	193b      	adds	r3, r7, r4
 80034b6:	2200      	movs	r2, #0
 80034b8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ba:	193b      	adds	r3, r7, r4
 80034bc:	2201      	movs	r2, #1
 80034be:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80034c0:	193a      	adds	r2, r7, r4
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	0011      	movs	r1, r2
 80034c6:	0018      	movs	r0, r3
 80034c8:	f001 fb08 	bl	8004adc <HAL_GPIO_Init>
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b009      	add	sp, #36	; 0x24
 80034d2:	bd90      	pop	{r4, r7, pc}

080034d4 <sensorInit>:

#define PC GPIOC

void sensorInit() {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
	setOut(PC); //set output mode
 80034d8:	4b14      	ldr	r3, [pc, #80]	; (800352c <sensorInit+0x58>)
 80034da:	0018      	movs	r0, r3
 80034dc:	f7ff ffbc 	bl	8003458 <setOut>
	HAL_GPIO_WritePin(PC, GPIO_PIN_1, 1);
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <sensorInit+0x58>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	2102      	movs	r1, #2
 80034e6:	0018      	movs	r0, r3
 80034e8:	f001 fc93 	bl	8004e12 <HAL_GPIO_WritePin>
	HAL_Delay(2000); //wait two seconds before doing anything. just keep the pin high
 80034ec:	23fa      	movs	r3, #250	; 0xfa
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 fe9d 	bl	8004230 <HAL_Delay>
	HAL_GPIO_WritePin(PC, GPIO_PIN_1, 0);
 80034f6:	4b0d      	ldr	r3, [pc, #52]	; (800352c <sensorInit+0x58>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	2102      	movs	r1, #2
 80034fc:	0018      	movs	r0, r3
 80034fe:	f001 fc88 	bl	8004e12 <HAL_GPIO_WritePin>
	delay(5000); //5ms. wait 5 miliseconds
 8003502:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <sensorInit+0x5c>)
 8003504:	0018      	movs	r0, r3
 8003506:	f000 f99b 	bl	8003840 <delay>
	HAL_GPIO_WritePin(PC, GPIO_PIN_1, 1);
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <sensorInit+0x58>)
 800350c:	2201      	movs	r2, #1
 800350e:	2102      	movs	r1, #2
 8003510:	0018      	movs	r0, r3
 8003512:	f001 fc7e 	bl	8004e12 <HAL_GPIO_WritePin>
	delay(20); //wait 20 microseconds
 8003516:	2014      	movs	r0, #20
 8003518:	f000 f992 	bl	8003840 <delay>
	setIn(PC); //set input to read the sensor response in next function
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <sensorInit+0x58>)
 800351e:	0018      	movs	r0, r3
 8003520:	f7ff ffb9 	bl	8003496 <setIn>
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	50000800 	.word	0x50000800
 8003530:	00001388 	.word	0x00001388

08003534 <sensorVerify>:

uint8_t sensorVerify() {
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
	//setIn(PA);
	uint8_t r = 0;
 800353a:	1dfb      	adds	r3, r7, #7
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]
	delay(40);
 8003540:	2028      	movs	r0, #40	; 0x28
 8003542:	f000 f97d 	bl	8003840 <delay>
	if(HAL_GPIO_ReadPin(PC, GPIO_PIN_1) == GPIO_PIN_RESET) {  //if the pin is low
 8003546:	4b13      	ldr	r3, [pc, #76]	; (8003594 <sensorVerify+0x60>)
 8003548:	2102      	movs	r1, #2
 800354a:	0018      	movs	r0, r3
 800354c:	f001 fc44 	bl	8004dd8 <HAL_GPIO_ReadPin>
 8003550:	1e03      	subs	r3, r0, #0
 8003552:	d110      	bne.n	8003576 <sensorVerify+0x42>
		delay(80);
 8003554:	2050      	movs	r0, #80	; 0x50
 8003556:	f000 f973 	bl	8003840 <delay>
		if((HAL_GPIO_ReadPin(PC, GPIO_PIN_1))) { //if the pin is high
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <sensorVerify+0x60>)
 800355c:	2102      	movs	r1, #2
 800355e:	0018      	movs	r0, r3
 8003560:	f001 fc3a 	bl	8004dd8 <HAL_GPIO_ReadPin>
 8003564:	1e03      	subs	r3, r0, #0
 8003566:	d003      	beq.n	8003570 <sensorVerify+0x3c>
			r = 1;
 8003568:	1dfb      	adds	r3, r7, #7
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	e002      	b.n	8003576 <sensorVerify+0x42>
		} else {
			r = -1;
 8003570:	1dfb      	adds	r3, r7, #7
 8003572:	22ff      	movs	r2, #255	; 0xff
 8003574:	701a      	strb	r2, [r3, #0]
		}
	}
	while((HAL_GPIO_ReadPin(PC, GPIO_PIN_1)));
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <sensorVerify+0x60>)
 800357a:	2102      	movs	r1, #2
 800357c:	0018      	movs	r0, r3
 800357e:	f001 fc2b 	bl	8004dd8 <HAL_GPIO_ReadPin>
 8003582:	1e03      	subs	r3, r0, #0
 8003584:	d1f8      	bne.n	8003578 <sensorVerify+0x44>
	//sensor does not send back response?
	//r = 0 indicates that the pin is always high and never pulls down.
	return r;
 8003586:	1dfb      	adds	r3, r7, #7
 8003588:	781b      	ldrb	r3, [r3, #0]
}
 800358a:	0018      	movs	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	b002      	add	sp, #8
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	50000800 	.word	0x50000800

08003598 <sensorRead>:

uint8_t sensorRead() {
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for(j = 0; j < 8; j++) {
 800359e:	1dbb      	adds	r3, r7, #6
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
 80035a4:	e03f      	b.n	8003626 <sensorRead+0x8e>
		while(!(HAL_GPIO_ReadPin(PC, GPIO_PIN_1)));
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <sensorRead+0xa4>)
 80035aa:	2102      	movs	r1, #2
 80035ac:	0018      	movs	r0, r3
 80035ae:	f001 fc13 	bl	8004dd8 <HAL_GPIO_ReadPin>
 80035b2:	1e03      	subs	r3, r0, #0
 80035b4:	d0f8      	beq.n	80035a8 <sensorRead+0x10>
		delay(40);
 80035b6:	2028      	movs	r0, #40	; 0x28
 80035b8:	f000 f942 	bl	8003840 <delay>
		if(!(HAL_GPIO_ReadPin(PC, GPIO_PIN_1))) {
 80035bc:	4b1f      	ldr	r3, [pc, #124]	; (800363c <sensorRead+0xa4>)
 80035be:	2102      	movs	r1, #2
 80035c0:	0018      	movs	r0, r3
 80035c2:	f001 fc09 	bl	8004dd8 <HAL_GPIO_ReadPin>
 80035c6:	1e03      	subs	r3, r0, #0
 80035c8:	d111      	bne.n	80035ee <sensorRead+0x56>
			i &= ~(1<<(7-j));
 80035ca:	1dbb      	adds	r3, r7, #6
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2207      	movs	r2, #7
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2201      	movs	r2, #1
 80035d4:	409a      	lsls	r2, r3
 80035d6:	0013      	movs	r3, r2
 80035d8:	b25b      	sxtb	r3, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	b25b      	sxtb	r3, r3
 80035de:	1dfa      	adds	r2, r7, #7
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	b252      	sxtb	r2, r2
 80035e4:	4013      	ands	r3, r2
 80035e6:	b25a      	sxtb	r2, r3
 80035e8:	1dfb      	adds	r3, r7, #7
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	e00e      	b.n	800360c <sensorRead+0x74>
		} else {
			i |= (1<<(7-j));
 80035ee:	1dbb      	adds	r3, r7, #6
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2207      	movs	r2, #7
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2201      	movs	r2, #1
 80035f8:	409a      	lsls	r2, r3
 80035fa:	0013      	movs	r3, r2
 80035fc:	b25a      	sxtb	r2, r3
 80035fe:	1dfb      	adds	r3, r7, #7
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b25b      	sxtb	r3, r3
 8003604:	4313      	orrs	r3, r2
 8003606:	b25a      	sxtb	r2, r3
 8003608:	1dfb      	adds	r3, r7, #7
 800360a:	701a      	strb	r2, [r3, #0]
		}
		while((HAL_GPIO_ReadPin(PC, GPIO_PIN_1)));
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <sensorRead+0xa4>)
 8003610:	2102      	movs	r1, #2
 8003612:	0018      	movs	r0, r3
 8003614:	f001 fbe0 	bl	8004dd8 <HAL_GPIO_ReadPin>
 8003618:	1e03      	subs	r3, r0, #0
 800361a:	d1f8      	bne.n	800360e <sensorRead+0x76>
	for(j = 0; j < 8; j++) {
 800361c:	1dbb      	adds	r3, r7, #6
 800361e:	781a      	ldrb	r2, [r3, #0]
 8003620:	1dbb      	adds	r3, r7, #6
 8003622:	3201      	adds	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	1dbb      	adds	r3, r7, #6
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b07      	cmp	r3, #7
 800362c:	d9bb      	bls.n	80035a6 <sensorRead+0xe>
	}
	return i;
 800362e:	1dfb      	adds	r3, r7, #7
 8003630:	781b      	ldrb	r3, [r3, #0]
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b002      	add	sp, #8
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	50000800 	.word	0x50000800

08003640 <setOutDS>:
 */

#include "delay.h"
#define PC GPIOC

void setOutDS(GPIO_TypeDef* GPIOx) { //set gpio output mode
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b089      	sub	sp, #36	; 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003648:	240c      	movs	r4, #12
 800364a:	193b      	adds	r3, r7, r4
 800364c:	0018      	movs	r0, r3
 800364e:	2314      	movs	r3, #20
 8003650:	001a      	movs	r2, r3
 8003652:	2100      	movs	r1, #0
 8003654:	f003 fbd2 	bl	8006dfc <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003658:	193b      	adds	r3, r7, r4
 800365a:	2204      	movs	r2, #4
 800365c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800365e:	193b      	adds	r3, r7, r4
 8003660:	2201      	movs	r2, #1
 8003662:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003664:	193b      	adds	r3, r7, r4
 8003666:	2200      	movs	r2, #0
 8003668:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800366a:	193a      	adds	r2, r7, r4
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0011      	movs	r1, r2
 8003670:	0018      	movs	r0, r3
 8003672:	f001 fa33 	bl	8004adc <HAL_GPIO_Init>
}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	46bd      	mov	sp, r7
 800367a:	b009      	add	sp, #36	; 0x24
 800367c:	bd90      	pop	{r4, r7, pc}

0800367e <setInDS>:

void setInDS(GPIO_TypeDef* GPIOx) { //set gpio input mode
 800367e:	b590      	push	{r4, r7, lr}
 8003680:	b089      	sub	sp, #36	; 0x24
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003686:	240c      	movs	r4, #12
 8003688:	193b      	adds	r3, r7, r4
 800368a:	0018      	movs	r0, r3
 800368c:	2314      	movs	r3, #20
 800368e:	001a      	movs	r2, r3
 8003690:	2100      	movs	r1, #0
 8003692:	f003 fbb3 	bl	8006dfc <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003696:	193b      	adds	r3, r7, r4
 8003698:	2204      	movs	r2, #4
 800369a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800369c:	193b      	adds	r3, r7, r4
 800369e:	2200      	movs	r2, #0
 80036a0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036a2:	193b      	adds	r3, r7, r4
 80036a4:	2201      	movs	r2, #1
 80036a6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80036a8:	193a      	adds	r2, r7, r4
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	0011      	movs	r1, r2
 80036ae:	0018      	movs	r0, r3
 80036b0:	f001 fa14 	bl	8004adc <HAL_GPIO_Init>
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b009      	add	sp, #36	; 0x24
 80036ba:	bd90      	pop	{r4, r7, pc}

080036bc <dsInit>:

uint8_t dsInit() {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
	uint8_t r = 0;
 80036c2:	1dfb      	adds	r3, r7, #7
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]
	setOutDS(PC);
 80036c8:	4b17      	ldr	r3, [pc, #92]	; (8003728 <dsInit+0x6c>)
 80036ca:	0018      	movs	r0, r3
 80036cc:	f7ff ffb8 	bl	8003640 <setOutDS>
	HAL_GPIO_WritePin(PC, GPIO_PIN_2, 0);
 80036d0:	4b15      	ldr	r3, [pc, #84]	; (8003728 <dsInit+0x6c>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	2104      	movs	r1, #4
 80036d6:	0018      	movs	r0, r3
 80036d8:	f001 fb9b 	bl	8004e12 <HAL_GPIO_WritePin>
	delay(480);
 80036dc:	23f0      	movs	r3, #240	; 0xf0
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	0018      	movs	r0, r3
 80036e2:	f000 f8ad 	bl	8003840 <delay>
	setInDS(PC);
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <dsInit+0x6c>)
 80036e8:	0018      	movs	r0, r3
 80036ea:	f7ff ffc8 	bl	800367e <setInDS>
	delay(80);
 80036ee:	2050      	movs	r0, #80	; 0x50
 80036f0:	f000 f8a6 	bl	8003840 <delay>
	if(!(HAL_GPIO_ReadPin(PC, GPIO_PIN_2))) {
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <dsInit+0x6c>)
 80036f6:	2104      	movs	r1, #4
 80036f8:	0018      	movs	r0, r3
 80036fa:	f001 fb6d 	bl	8004dd8 <HAL_GPIO_ReadPin>
 80036fe:	1e03      	subs	r3, r0, #0
 8003700:	d103      	bne.n	800370a <dsInit+0x4e>
		r = 1;
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	2201      	movs	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	e002      	b.n	8003710 <dsInit+0x54>
	} else {
		r = -1;
 800370a:	1dfb      	adds	r3, r7, #7
 800370c:	22ff      	movs	r2, #255	; 0xff
 800370e:	701a      	strb	r2, [r3, #0]
	}
	delay(400);
 8003710:	23c8      	movs	r3, #200	; 0xc8
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	0018      	movs	r0, r3
 8003716:	f000 f893 	bl	8003840 <delay>
	return r;
 800371a:	1dfb      	adds	r3, r7, #7
 800371c:	781b      	ldrb	r3, [r3, #0]
}
 800371e:	0018      	movs	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	b002      	add	sp, #8
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	50000800 	.word	0x50000800

0800372c <dsWrite>:

void dsWrite(uint8_t data) {
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	0002      	movs	r2, r0
 8003734:	1dfb      	adds	r3, r7, #7
 8003736:	701a      	strb	r2, [r3, #0]
	setOutDS(PC);
 8003738:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <dsWrite+0x8c>)
 800373a:	0018      	movs	r0, r3
 800373c:	f7ff ff80 	bl	8003640 <setOutDS>
	for(int i = 0; i < 8; i++) {
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	e030      	b.n	80037a8 <dsWrite+0x7c>
		if((data & (1 << i)) != 0) {
 8003746:	1dfb      	adds	r3, r7, #7
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	411a      	asrs	r2, r3
 800374e:	0013      	movs	r3, r2
 8003750:	2201      	movs	r2, #1
 8003752:	4013      	ands	r3, r2
 8003754:	d014      	beq.n	8003780 <dsWrite+0x54>
			setOutDS(PC);
 8003756:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <dsWrite+0x8c>)
 8003758:	0018      	movs	r0, r3
 800375a:	f7ff ff71 	bl	8003640 <setOutDS>
			HAL_GPIO_WritePin(PC, GPIO_PIN_2, 0);
 800375e:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <dsWrite+0x8c>)
 8003760:	2200      	movs	r2, #0
 8003762:	2104      	movs	r1, #4
 8003764:	0018      	movs	r0, r3
 8003766:	f001 fb54 	bl	8004e12 <HAL_GPIO_WritePin>
			delay(1);
 800376a:	2001      	movs	r0, #1
 800376c:	f000 f868 	bl	8003840 <delay>
			setInDS(PC);
 8003770:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <dsWrite+0x8c>)
 8003772:	0018      	movs	r0, r3
 8003774:	f7ff ff83 	bl	800367e <setInDS>
			delay(50);
 8003778:	2032      	movs	r0, #50	; 0x32
 800377a:	f000 f861 	bl	8003840 <delay>
 800377e:	e010      	b.n	80037a2 <dsWrite+0x76>
		} else {
			setOutDS(PC);
 8003780:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <dsWrite+0x8c>)
 8003782:	0018      	movs	r0, r3
 8003784:	f7ff ff5c 	bl	8003640 <setOutDS>
			HAL_GPIO_WritePin(PC, GPIO_PIN_2, 0);
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <dsWrite+0x8c>)
 800378a:	2200      	movs	r2, #0
 800378c:	2104      	movs	r1, #4
 800378e:	0018      	movs	r0, r3
 8003790:	f001 fb3f 	bl	8004e12 <HAL_GPIO_WritePin>
			delay(50);
 8003794:	2032      	movs	r0, #50	; 0x32
 8003796:	f000 f853 	bl	8003840 <delay>
			setInDS(PC);
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <dsWrite+0x8c>)
 800379c:	0018      	movs	r0, r3
 800379e:	f7ff ff6e 	bl	800367e <setInDS>
	for(int i = 0; i < 8; i++) {
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	3301      	adds	r3, #1
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b07      	cmp	r3, #7
 80037ac:	ddcb      	ble.n	8003746 <dsWrite+0x1a>
		}
	}
}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	46c0      	nop			; (mov r8, r8)
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b004      	add	sp, #16
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	50000800 	.word	0x50000800

080037bc <dsRead>:

uint8_t dsRead() {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
	uint8_t v = 0;
 80037c2:	1dfb      	adds	r3, r7, #7
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
	setInDS(PC);
 80037c8:	4b1c      	ldr	r3, [pc, #112]	; (800383c <dsRead+0x80>)
 80037ca:	0018      	movs	r0, r3
 80037cc:	f7ff ff57 	bl	800367e <setInDS>
	for(int i = 0; i < 8; i++) {
 80037d0:	2300      	movs	r3, #0
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	e029      	b.n	800382a <dsRead+0x6e>
		setOutDS(PC);
 80037d6:	4b19      	ldr	r3, [pc, #100]	; (800383c <dsRead+0x80>)
 80037d8:	0018      	movs	r0, r3
 80037da:	f7ff ff31 	bl	8003640 <setOutDS>
		HAL_GPIO_WritePin(PC, GPIO_PIN_2, 0);
 80037de:	4b17      	ldr	r3, [pc, #92]	; (800383c <dsRead+0x80>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	2104      	movs	r1, #4
 80037e4:	0018      	movs	r0, r3
 80037e6:	f001 fb14 	bl	8004e12 <HAL_GPIO_WritePin>
		delay(2);
 80037ea:	2002      	movs	r0, #2
 80037ec:	f000 f828 	bl	8003840 <delay>
		setInDS(PC);
 80037f0:	4b12      	ldr	r3, [pc, #72]	; (800383c <dsRead+0x80>)
 80037f2:	0018      	movs	r0, r3
 80037f4:	f7ff ff43 	bl	800367e <setInDS>
		if(HAL_GPIO_ReadPin(PC, GPIO_PIN_2)) {
 80037f8:	4b10      	ldr	r3, [pc, #64]	; (800383c <dsRead+0x80>)
 80037fa:	2104      	movs	r1, #4
 80037fc:	0018      	movs	r0, r3
 80037fe:	f001 faeb 	bl	8004dd8 <HAL_GPIO_ReadPin>
 8003802:	1e03      	subs	r3, r0, #0
 8003804:	d00b      	beq.n	800381e <dsRead+0x62>
			v |= 1 << i;
 8003806:	2201      	movs	r2, #1
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	409a      	lsls	r2, r3
 800380c:	0013      	movs	r3, r2
 800380e:	b25a      	sxtb	r2, r3
 8003810:	1dfb      	adds	r3, r7, #7
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b25b      	sxtb	r3, r3
 8003816:	4313      	orrs	r3, r2
 8003818:	b25a      	sxtb	r2, r3
 800381a:	1dfb      	adds	r3, r7, #7
 800381c:	701a      	strb	r2, [r3, #0]
		}
		delay(60);
 800381e:	203c      	movs	r0, #60	; 0x3c
 8003820:	f000 f80e 	bl	8003840 <delay>
	for(int i = 0; i < 8; i++) {
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	3301      	adds	r3, #1
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b07      	cmp	r3, #7
 800382e:	ddd2      	ble.n	80037d6 <dsRead+0x1a>
	}
	return v;
 8003830:	1dfb      	adds	r3, r7, #7
 8003832:	781b      	ldrb	r3, [r3, #0]
}
 8003834:	0018      	movs	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	b002      	add	sp, #8
 800383a:	bd80      	pop	{r7, pc}
 800383c:	50000800 	.word	0x50000800

08003840 <delay>:
 */

#include "stm32l0xx_hal.h"
extern TIM_HandleTypeDef htim2;

void delay(uint16_t time) {
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	0002      	movs	r2, r0
 8003848:	1dbb      	adds	r3, r7, #6
 800384a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <delay+0x30>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2200      	movs	r2, #0
 8003852:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim2)) < time);
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <delay+0x30>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800385c:	1dbb      	adds	r3, r7, #6
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d3f8      	bcc.n	8003856 <delay+0x16>
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	46bd      	mov	sp, r7
 800386a:	b002      	add	sp, #8
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	20000130 	.word	0x20000130

08003874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003876:	b08f      	sub	sp, #60	; 0x3c
 8003878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float DHT_Temp = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
	float DHT_Hum = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t t1, t2, h1, h2, p;
	uint16_t temp, hum, sum;

	uint8_t DS18B20_Temp1, DS18B20_Temp2;
	uint16_t DS18B20_T;
	float internalTemp = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint16_t light = 0;
 8003886:	232a      	movs	r3, #42	; 0x2a
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	2200      	movs	r2, #0
 800388c:	801a      	strh	r2, [r3, #0]
	float voltage;

	uint16_t  moisture = 0;
 800388e:	2328      	movs	r3, #40	; 0x28
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	2200      	movs	r2, #0
 8003894:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003896:	f000 fc5b 	bl	8004150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800389a:	f000 f97d 	bl	8003b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 800389e:	f000 fa9f 	bl	8003de0 <MX_TIM2_Init>
  MX_GPIO_Init();
 80038a2:	f000 faf1 	bl	8003e88 <MX_GPIO_Init>
  MX_I2C1_Init();
 80038a6:	f000 fa5b 	bl	8003d60 <MX_I2C1_Init>
  MX_ADC_Init();
 80038aa:	f000 f9e7 	bl	8003c7c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80038ae:	4bb1      	ldr	r3, [pc, #708]	; (8003b74 <main+0x300>)
 80038b0:	0018      	movs	r0, r3
 80038b2:	f003 f805 	bl	80068c0 <HAL_TIM_Base_Start>
 // int __io_putchar(int ch) {
	//  ITM_SendChar(ch);
	  //return ch;
  //}
  dataCalibration();
 80038b6:	f7ff f979 	bl	8002bac <dataCalibration>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP_Temp = getTemp(); //Get Temperature
 80038ba:	f7ff fa63 	bl	8002d84 <getTemp>
 80038be:	0003      	movs	r3, r0
 80038c0:	0018      	movs	r0, r3
 80038c2:	f7fd fa25 	bl	8000d10 <__aeabi_ui2f>
 80038c6:	1c03      	adds	r3, r0, #0
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
	  BMP_Temp = ((BMP_Temp * 9) / 5) + 32; //Convert to F
 80038ca:	49ab      	ldr	r1, [pc, #684]	; (8003b78 <main+0x304>)
 80038cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038ce:	f7fd f8bf 	bl	8000a50 <__aeabi_fmul>
 80038d2:	1c03      	adds	r3, r0, #0
 80038d4:	49a9      	ldr	r1, [pc, #676]	; (8003b7c <main+0x308>)
 80038d6:	1c18      	adds	r0, r3, #0
 80038d8:	f7fc ffae 	bl	8000838 <__aeabi_fdiv>
 80038dc:	1c03      	adds	r3, r0, #0
 80038de:	2184      	movs	r1, #132	; 0x84
 80038e0:	05c9      	lsls	r1, r1, #23
 80038e2:	1c18      	adds	r0, r3, #0
 80038e4:	f7fc fe0c 	bl	8000500 <__aeabi_fadd>
 80038e8:	1c03      	adds	r3, r0, #0
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
	  BMP_Pressure = getPressure(0); //Get Pressure
 80038ec:	2000      	movs	r0, #0
 80038ee:	f7ff fb4f 	bl	8002f90 <getPressure>
 80038f2:	1c03      	adds	r3, r0, #0
 80038f4:	623b      	str	r3, [r7, #32]
	  BMP_Alt = getAlt(0); //Get Altitude
 80038f6:	2000      	movs	r0, #0
 80038f8:	f7ff fd6e 	bl	80033d8 <getAlt>
 80038fc:	1c03      	adds	r3, r0, #0
 80038fe:	61fb      	str	r3, [r7, #28]

	  sensorInit(); //Initialize the DHT22
 8003900:	f7ff fde8 	bl	80034d4 <sensorInit>
	  p = sensorVerify();
 8003904:	251b      	movs	r5, #27
 8003906:	197c      	adds	r4, r7, r5
 8003908:	f7ff fe14 	bl	8003534 <sensorVerify>
 800390c:	0003      	movs	r3, r0
 800390e:	7023      	strb	r3, [r4, #0]
	  if(p) {
 8003910:	197b      	adds	r3, r7, r5
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d06b      	beq.n	80039f0 <main+0x17c>
		  h1 = sensorRead(); //Read Lower 8 Humidity
 8003918:	251a      	movs	r5, #26
 800391a:	197c      	adds	r4, r7, r5
 800391c:	f7ff fe3c 	bl	8003598 <sensorRead>
 8003920:	0003      	movs	r3, r0
 8003922:	7023      	strb	r3, [r4, #0]
		  h2 = sensorRead(); //Read Upper 8 Humidity
 8003924:	2619      	movs	r6, #25
 8003926:	19bc      	adds	r4, r7, r6
 8003928:	f7ff fe36 	bl	8003598 <sensorRead>
 800392c:	0003      	movs	r3, r0
 800392e:	7023      	strb	r3, [r4, #0]
		  t1 = sensorRead(); //Read Lower 8 Temperature
 8003930:	2318      	movs	r3, #24
 8003932:	18fc      	adds	r4, r7, r3
 8003934:	f7ff fe30 	bl	8003598 <sensorRead>
 8003938:	0003      	movs	r3, r0
 800393a:	7023      	strb	r3, [r4, #0]
		  t2 = sensorRead(); //Read Upper 8 Temperature
 800393c:	2217      	movs	r2, #23
 800393e:	18bc      	adds	r4, r7, r2
 8003940:	f7ff fe2a 	bl	8003598 <sensorRead>
 8003944:	0003      	movs	r3, r0
 8003946:	7023      	strb	r3, [r4, #0]
		  sum = sensorRead(); //Read Checksum
 8003948:	f7ff fe26 	bl	8003598 <sensorRead>
 800394c:	0003      	movs	r3, r0
 800394e:	001a      	movs	r2, r3
 8003950:	2114      	movs	r1, #20
 8003952:	187b      	adds	r3, r7, r1
 8003954:	801a      	strh	r2, [r3, #0]

		  temp = ((t1 << 8) | t2); //Assemble Temperature
 8003956:	2318      	movs	r3, #24
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	b21a      	sxth	r2, r3
 8003960:	2317      	movs	r3, #23
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b21b      	sxth	r3, r3
 8003968:	4313      	orrs	r3, r2
 800396a:	b21a      	sxth	r2, r3
 800396c:	2112      	movs	r1, #18
 800396e:	187b      	adds	r3, r7, r1
 8003970:	801a      	strh	r2, [r3, #0]
	  	  hum = ((h1 << 8 | h2)); //Assemble Humidity
 8003972:	197b      	adds	r3, r7, r5
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	b21a      	sxth	r2, r3
 800397a:	19bb      	adds	r3, r7, r6
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	b21b      	sxth	r3, r3
 8003980:	4313      	orrs	r3, r2
 8003982:	b21a      	sxth	r2, r3
 8003984:	2410      	movs	r4, #16
 8003986:	193b      	adds	r3, r7, r4
 8003988:	801a      	strh	r2, [r3, #0]
	  	  DHT_Temp = (float) (temp/10.0); //Get Temperature
 800398a:	187b      	adds	r3, r7, r1
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	0018      	movs	r0, r3
 8003990:	f7fe ffbc 	bl	800290c <__aeabi_i2d>
 8003994:	2200      	movs	r2, #0
 8003996:	4b7a      	ldr	r3, [pc, #488]	; (8003b80 <main+0x30c>)
 8003998:	f7fd fd60 	bl	800145c <__aeabi_ddiv>
 800399c:	0002      	movs	r2, r0
 800399e:	000b      	movs	r3, r1
 80039a0:	0010      	movs	r0, r2
 80039a2:	0019      	movs	r1, r3
 80039a4:	f7ff f850 	bl	8002a48 <__aeabi_d2f>
 80039a8:	1c03      	adds	r3, r0, #0
 80039aa:	637b      	str	r3, [r7, #52]	; 0x34
	  	  DHT_Temp = ((DHT_Temp * 9) / 5) + 32; //Convert from Celsius
 80039ac:	4972      	ldr	r1, [pc, #456]	; (8003b78 <main+0x304>)
 80039ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039b0:	f7fd f84e 	bl	8000a50 <__aeabi_fmul>
 80039b4:	1c03      	adds	r3, r0, #0
 80039b6:	4971      	ldr	r1, [pc, #452]	; (8003b7c <main+0x308>)
 80039b8:	1c18      	adds	r0, r3, #0
 80039ba:	f7fc ff3d 	bl	8000838 <__aeabi_fdiv>
 80039be:	1c03      	adds	r3, r0, #0
 80039c0:	2184      	movs	r1, #132	; 0x84
 80039c2:	05c9      	lsls	r1, r1, #23
 80039c4:	1c18      	adds	r0, r3, #0
 80039c6:	f7fc fd9b 	bl	8000500 <__aeabi_fadd>
 80039ca:	1c03      	adds	r3, r0, #0
 80039cc:	637b      	str	r3, [r7, #52]	; 0x34
	  	  DHT_Hum = (float) (hum/10.0); //Get Humidity
 80039ce:	193b      	adds	r3, r7, r4
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7fe ff9a 	bl	800290c <__aeabi_i2d>
 80039d8:	2200      	movs	r2, #0
 80039da:	4b69      	ldr	r3, [pc, #420]	; (8003b80 <main+0x30c>)
 80039dc:	f7fd fd3e 	bl	800145c <__aeabi_ddiv>
 80039e0:	0002      	movs	r2, r0
 80039e2:	000b      	movs	r3, r1
 80039e4:	0010      	movs	r0, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	f7ff f82e 	bl	8002a48 <__aeabi_d2f>
 80039ec:	1c03      	adds	r3, r0, #0
 80039ee:	633b      	str	r3, [r7, #48]	; 0x30
	  	  }

	  ///////////////////////////////////////////////////////////////////////////////////////////////////////////

	  p = dsInit(); //Initialize the DS18B20
 80039f0:	251b      	movs	r5, #27
 80039f2:	197c      	adds	r4, r7, r5
 80039f4:	f7ff fe62 	bl	80036bc <dsInit>
 80039f8:	0003      	movs	r3, r0
 80039fa:	7023      	strb	r3, [r4, #0]
	  if(p) {
 80039fc:	197b      	adds	r3, r7, r5
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <main+0x1a2>
		  HAL_Delay(1);
 8003a04:	2001      	movs	r0, #1
 8003a06:	f000 fc13 	bl	8004230 <HAL_Delay>
		  dsWrite(0xCC); //Skip ROM Command
 8003a0a:	20cc      	movs	r0, #204	; 0xcc
 8003a0c:	f7ff fe8e 	bl	800372c <dsWrite>
		  dsWrite(0x44); //Convert Temperature
 8003a10:	2044      	movs	r0, #68	; 0x44
 8003a12:	f7ff fe8b 	bl	800372c <dsWrite>
	  }
	  p = dsInit(); //Initialize DS18B20 Again
 8003a16:	251b      	movs	r5, #27
 8003a18:	197c      	adds	r4, r7, r5
 8003a1a:	f7ff fe4f 	bl	80036bc <dsInit>
 8003a1e:	0003      	movs	r3, r0
 8003a20:	7023      	strb	r3, [r4, #0]
	  if(p) {
 8003a22:	197b      	adds	r3, r7, r5
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d03e      	beq.n	8003aa8 <main+0x234>
		  HAL_Delay(1);
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f000 fc00 	bl	8004230 <HAL_Delay>
		  dsWrite(0xCC); //Skip ROM Command
 8003a30:	20cc      	movs	r0, #204	; 0xcc
 8003a32:	f7ff fe7b 	bl	800372c <dsWrite>
		  dsWrite(0xBE); //Read Scratchpad
 8003a36:	20be      	movs	r0, #190	; 0xbe
 8003a38:	f7ff fe78 	bl	800372c <dsWrite>
		  DS18B20_Temp1 = dsRead(); //Read Lower 8
 8003a3c:	250f      	movs	r5, #15
 8003a3e:	197c      	adds	r4, r7, r5
 8003a40:	f7ff febc 	bl	80037bc <dsRead>
 8003a44:	0003      	movs	r3, r0
 8003a46:	7023      	strb	r3, [r4, #0]
		  DS18B20_Temp2 = dsRead(); //Read Upper 8
 8003a48:	260e      	movs	r6, #14
 8003a4a:	19bc      	adds	r4, r7, r6
 8003a4c:	f7ff feb6 	bl	80037bc <dsRead>
 8003a50:	0003      	movs	r3, r0
 8003a52:	7023      	strb	r3, [r4, #0]
		  DS18B20_T = (DS18B20_Temp2 << 8) | DS18B20_Temp1; //Combine
 8003a54:	19bb      	adds	r3, r7, r6
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	b21a      	sxth	r2, r3
 8003a5c:	197b      	adds	r3, r7, r5
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	b21b      	sxth	r3, r3
 8003a62:	4313      	orrs	r3, r2
 8003a64:	b21a      	sxth	r2, r3
 8003a66:	210c      	movs	r1, #12
 8003a68:	187b      	adds	r3, r7, r1
 8003a6a:	801a      	strh	r2, [r3, #0]
		  internalTemp = (float) DS18B20_T/16; //Get Temperature
 8003a6c:	187b      	adds	r3, r7, r1
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	0018      	movs	r0, r3
 8003a72:	f7fd f94d 	bl	8000d10 <__aeabi_ui2f>
 8003a76:	1c03      	adds	r3, r0, #0
 8003a78:	2183      	movs	r1, #131	; 0x83
 8003a7a:	05c9      	lsls	r1, r1, #23
 8003a7c:	1c18      	adds	r0, r3, #0
 8003a7e:	f7fc fedb 	bl	8000838 <__aeabi_fdiv>
 8003a82:	1c03      	adds	r3, r0, #0
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
		  internalTemp = ((internalTemp * 9) / 5) + 32; //Convert to F
 8003a86:	493c      	ldr	r1, [pc, #240]	; (8003b78 <main+0x304>)
 8003a88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a8a:	f7fc ffe1 	bl	8000a50 <__aeabi_fmul>
 8003a8e:	1c03      	adds	r3, r0, #0
 8003a90:	493a      	ldr	r1, [pc, #232]	; (8003b7c <main+0x308>)
 8003a92:	1c18      	adds	r0, r3, #0
 8003a94:	f7fc fed0 	bl	8000838 <__aeabi_fdiv>
 8003a98:	1c03      	adds	r3, r0, #0
 8003a9a:	2184      	movs	r1, #132	; 0x84
 8003a9c:	05c9      	lsls	r1, r1, #23
 8003a9e:	1c18      	adds	r0, r3, #0
 8003aa0:	f7fc fd2e 	bl	8000500 <__aeabi_fadd>
 8003aa4:	1c03      	adds	r3, r0, #0
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  }

	  ADC_ChannelConfTypeDef sConfig = {0};
 8003aa8:	003b      	movs	r3, r7
 8003aaa:	0018      	movs	r0, r3
 8003aac:	2308      	movs	r3, #8
 8003aae:	001a      	movs	r2, r3
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	f003 f9a3 	bl	8006dfc <memset>
	  sConfig.Channel = ADC_CHANNEL_0;
 8003ab6:	003b      	movs	r3, r7
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 8003abc:	003b      	movs	r3, r7
 8003abe:	2201      	movs	r2, #1
 8003ac0:	605a      	str	r2, [r3, #4]
	 // sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES; //l0 hal has no .samplingtime attribute?
	  if(HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8003ac2:	003a      	movs	r2, r7
 8003ac4:	4b2f      	ldr	r3, [pc, #188]	; (8003b84 <main+0x310>)
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f000 fe45 	bl	8004758 <HAL_ADC_ConfigChannel>
 8003ace:	1e03      	subs	r3, r0, #0
 8003ad0:	d001      	beq.n	8003ad6 <main+0x262>
		  Error_Handler();
 8003ad2:	f000 fa29 	bl	8003f28 <Error_Handler>
	  }
	  HAL_ADC_Start(&hadc); //Start Light ADC
 8003ad6:	4b2b      	ldr	r3, [pc, #172]	; (8003b84 <main+0x310>)
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f000 fd41 	bl	8004560 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8003ade:	2301      	movs	r3, #1
 8003ae0:	425a      	negs	r2, r3
 8003ae2:	4b28      	ldr	r3, [pc, #160]	; (8003b84 <main+0x310>)
 8003ae4:	0011      	movs	r1, r2
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f000 fd8e 	bl	8004608 <HAL_ADC_PollForConversion>
	  light = HAL_ADC_GetValue(&hadc);
 8003aec:	4b25      	ldr	r3, [pc, #148]	; (8003b84 <main+0x310>)
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 fe26 	bl	8004740 <HAL_ADC_GetValue>
 8003af4:	0002      	movs	r2, r0
 8003af6:	212a      	movs	r1, #42	; 0x2a
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	801a      	strh	r2, [r3, #0]
	  voltage = 3.3 * light;
 8003afc:	187b      	adds	r3, r7, r1
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	0018      	movs	r0, r3
 8003b02:	f7fe ff03 	bl	800290c <__aeabi_i2d>
 8003b06:	4a20      	ldr	r2, [pc, #128]	; (8003b88 <main+0x314>)
 8003b08:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <main+0x318>)
 8003b0a:	f7fe f8ad 	bl	8001c68 <__aeabi_dmul>
 8003b0e:	0002      	movs	r2, r0
 8003b10:	000b      	movs	r3, r1
 8003b12:	0010      	movs	r0, r2
 8003b14:	0019      	movs	r1, r3
 8003b16:	f7fe ff97 	bl	8002a48 <__aeabi_d2f>
 8003b1a:	1c03      	adds	r3, r0, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
	  voltage = voltage / 4095;
 8003b1e:	491c      	ldr	r1, [pc, #112]	; (8003b90 <main+0x31c>)
 8003b20:	68b8      	ldr	r0, [r7, #8]
 8003b22:	f7fc fe89 	bl	8000838 <__aeabi_fdiv>
 8003b26:	1c03      	adds	r3, r0, #0
 8003b28:	60bb      	str	r3, [r7, #8]


	 // ADC_ChannelConfTypeDef sConfig = {0};
	  sConfig.Channel = ADC_CHANNEL_13;
 8003b2a:	003b      	movs	r3, r7
 8003b2c:	4a19      	ldr	r2, [pc, #100]	; (8003b94 <main+0x320>)
 8003b2e:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 8003b30:	003b      	movs	r3, r7
 8003b32:	2201      	movs	r2, #1
 8003b34:	605a      	str	r2, [r3, #4]
	 // sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
	  if(HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8003b36:	003a      	movs	r2, r7
 8003b38:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <main+0x310>)
 8003b3a:	0011      	movs	r1, r2
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f000 fe0b 	bl	8004758 <HAL_ADC_ConfigChannel>
 8003b42:	1e03      	subs	r3, r0, #0
 8003b44:	d001      	beq.n	8003b4a <main+0x2d6>
		  Error_Handler();
 8003b46:	f000 f9ef 	bl	8003f28 <Error_Handler>
	  }
	  HAL_ADC_Start(&hadc); //Start Soil ADC
 8003b4a:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <main+0x310>)
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f000 fd07 	bl	8004560 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8003b52:	2301      	movs	r3, #1
 8003b54:	425a      	negs	r2, r3
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <main+0x310>)
 8003b58:	0011      	movs	r1, r2
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f000 fd54 	bl	8004608 <HAL_ADC_PollForConversion>
	  moisture = HAL_ADC_GetValue(&hadc);
 8003b60:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <main+0x310>)
 8003b62:	0018      	movs	r0, r3
 8003b64:	f000 fdec 	bl	8004740 <HAL_ADC_GetValue>
 8003b68:	0002      	movs	r2, r0
 8003b6a:	2328      	movs	r3, #40	; 0x28
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	801a      	strh	r2, [r3, #0]
  {
 8003b70:	e6a3      	b.n	80038ba <main+0x46>
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	20000130 	.word	0x20000130
 8003b78:	41100000 	.word	0x41100000
 8003b7c:	40a00000 	.word	0x40a00000
 8003b80:	40240000 	.word	0x40240000
 8003b84:	20000170 	.word	0x20000170
 8003b88:	66666666 	.word	0x66666666
 8003b8c:	400a6666 	.word	0x400a6666
 8003b90:	457ff000 	.word	0x457ff000
 8003b94:	34002000 	.word	0x34002000

08003b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b09d      	sub	sp, #116	; 0x74
 8003b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b9e:	2438      	movs	r4, #56	; 0x38
 8003ba0:	193b      	adds	r3, r7, r4
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	2338      	movs	r3, #56	; 0x38
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	2100      	movs	r1, #0
 8003baa:	f003 f927 	bl	8006dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bae:	2324      	movs	r3, #36	; 0x24
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	2314      	movs	r3, #20
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	2100      	movs	r1, #0
 8003bba:	f003 f91f 	bl	8006dfc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bbe:	003b      	movs	r3, r7
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	2324      	movs	r3, #36	; 0x24
 8003bc4:	001a      	movs	r2, r3
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	f003 f918 	bl	8006dfc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bcc:	4b29      	ldr	r3, [pc, #164]	; (8003c74 <SystemClock_Config+0xdc>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <SystemClock_Config+0xe0>)
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <SystemClock_Config+0xdc>)
 8003bd6:	2180      	movs	r1, #128	; 0x80
 8003bd8:	0109      	lsls	r1, r1, #4
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003bde:	0021      	movs	r1, r4
 8003be0:	187b      	adds	r3, r7, r1
 8003be2:	2202      	movs	r2, #2
 8003be4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003be6:	187b      	adds	r3, r7, r1
 8003be8:	2201      	movs	r2, #1
 8003bea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003bec:	187b      	adds	r3, r7, r1
 8003bee:	2210      	movs	r2, #16
 8003bf0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bf2:	187b      	adds	r3, r7, r1
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003bf8:	187b      	adds	r3, r7, r1
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	2280      	movs	r2, #128	; 0x80
 8003c02:	02d2      	lsls	r2, r2, #11
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	2280      	movs	r2, #128	; 0x80
 8003c0a:	03d2      	lsls	r2, r2, #15
 8003c0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c0e:	187b      	adds	r3, r7, r1
 8003c10:	0018      	movs	r0, r3
 8003c12:	f001 fefd 	bl	8005a10 <HAL_RCC_OscConfig>
 8003c16:	1e03      	subs	r3, r0, #0
 8003c18:	d001      	beq.n	8003c1e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003c1a:	f000 f985 	bl	8003f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c1e:	2124      	movs	r1, #36	; 0x24
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	220f      	movs	r2, #15
 8003c24:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c26:	187b      	adds	r3, r7, r1
 8003c28:	2203      	movs	r2, #3
 8003c2a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c2c:	187b      	adds	r3, r7, r1
 8003c2e:	2200      	movs	r2, #0
 8003c30:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c32:	187b      	adds	r3, r7, r1
 8003c34:	2200      	movs	r2, #0
 8003c36:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c38:	187b      	adds	r3, r7, r1
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003c3e:	187b      	adds	r3, r7, r1
 8003c40:	2101      	movs	r1, #1
 8003c42:	0018      	movs	r0, r3
 8003c44:	f002 fab8 	bl	80061b8 <HAL_RCC_ClockConfig>
 8003c48:	1e03      	subs	r3, r0, #0
 8003c4a:	d001      	beq.n	8003c50 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003c4c:	f000 f96c 	bl	8003f28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003c50:	003b      	movs	r3, r7
 8003c52:	2208      	movs	r2, #8
 8003c54:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c56:	003b      	movs	r3, r7
 8003c58:	2200      	movs	r2, #0
 8003c5a:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c5c:	003b      	movs	r3, r7
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f002 fc98 	bl	8006594 <HAL_RCCEx_PeriphCLKConfig>
 8003c64:	1e03      	subs	r3, r0, #0
 8003c66:	d001      	beq.n	8003c6c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003c68:	f000 f95e 	bl	8003f28 <Error_Handler>
  }
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b01d      	add	sp, #116	; 0x74
 8003c72:	bd90      	pop	{r4, r7, pc}
 8003c74:	40007000 	.word	0x40007000
 8003c78:	ffffe7ff 	.word	0xffffe7ff

08003c7c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c82:	003b      	movs	r3, r7
 8003c84:	0018      	movs	r0, r3
 8003c86:	2308      	movs	r3, #8
 8003c88:	001a      	movs	r2, r3
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	f003 f8b6 	bl	8006dfc <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003c90:	4b30      	ldr	r3, [pc, #192]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003c92:	4a31      	ldr	r2, [pc, #196]	; (8003d58 <MX_ADC_Init+0xdc>)
 8003c94:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003c96:	4b2f      	ldr	r3, [pc, #188]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003c9c:	4b2d      	ldr	r3, [pc, #180]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003c9e:	2280      	movs	r2, #128	; 0x80
 8003ca0:	05d2      	lsls	r2, r2, #23
 8003ca2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003ca4:	4b2b      	ldr	r3, [pc, #172]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003caa:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003cb0:	4b28      	ldr	r3, [pc, #160]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003cb6:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003cbc:	4b25      	ldr	r3, [pc, #148]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003cc6:	2221      	movs	r2, #33	; 0x21
 8003cc8:	2100      	movs	r1, #0
 8003cca:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ccc:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003cd4:	22c2      	movs	r2, #194	; 0xc2
 8003cd6:	32ff      	adds	r2, #255	; 0xff
 8003cd8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003cda:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003cdc:	222c      	movs	r2, #44	; 0x2c
 8003cde:	2100      	movs	r1, #0
 8003ce0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003ce2:	4b1c      	ldr	r3, [pc, #112]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003cee:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003cfa:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003d00:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003d02:	0018      	movs	r0, r3
 8003d04:	f000 fab8 	bl	8004278 <HAL_ADC_Init>
 8003d08:	1e03      	subs	r3, r0, #0
 8003d0a:	d001      	beq.n	8003d10 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003d0c:	f000 f90c 	bl	8003f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003d10:	003b      	movs	r3, r7
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003d16:	003b      	movs	r3, r7
 8003d18:	2280      	movs	r2, #128	; 0x80
 8003d1a:	0152      	lsls	r2, r2, #5
 8003d1c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003d1e:	003a      	movs	r2, r7
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003d22:	0011      	movs	r1, r2
 8003d24:	0018      	movs	r0, r3
 8003d26:	f000 fd17 	bl	8004758 <HAL_ADC_ConfigChannel>
 8003d2a:	1e03      	subs	r3, r0, #0
 8003d2c:	d001      	beq.n	8003d32 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003d2e:	f000 f8fb 	bl	8003f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003d32:	003b      	movs	r3, r7
 8003d34:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <MX_ADC_Init+0xe0>)
 8003d36:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003d38:	003a      	movs	r2, r7
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <MX_ADC_Init+0xd8>)
 8003d3c:	0011      	movs	r1, r2
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f000 fd0a 	bl	8004758 <HAL_ADC_ConfigChannel>
 8003d44:	1e03      	subs	r3, r0, #0
 8003d46:	d001      	beq.n	8003d4c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8003d48:	f000 f8ee 	bl	8003f28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003d4c:	46c0      	nop			; (mov r8, r8)
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b002      	add	sp, #8
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20000170 	.word	0x20000170
 8003d58:	40012400 	.word	0x40012400
 8003d5c:	34002000 	.word	0x34002000

08003d60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <MX_I2C1_Init+0x74>)
 8003d66:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <MX_I2C1_Init+0x78>)
 8003d68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8003d6a:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <MX_I2C1_Init+0x74>)
 8003d6c:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <MX_I2C1_Init+0x7c>)
 8003d6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003d70:	4b18      	ldr	r3, [pc, #96]	; (8003dd4 <MX_I2C1_Init+0x74>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d76:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <MX_I2C1_Init+0x74>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d7c:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <MX_I2C1_Init+0x74>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003d82:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <MX_I2C1_Init+0x74>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003d88:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <MX_I2C1_Init+0x74>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d8e:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <MX_I2C1_Init+0x74>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <MX_I2C1_Init+0x74>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <MX_I2C1_Init+0x74>)
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f001 f855 	bl	8004e4c <HAL_I2C_Init>
 8003da2:	1e03      	subs	r3, r0, #0
 8003da4:	d001      	beq.n	8003daa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003da6:	f000 f8bf 	bl	8003f28 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <MX_I2C1_Init+0x74>)
 8003dac:	2100      	movs	r1, #0
 8003dae:	0018      	movs	r0, r3
 8003db0:	f001 fd96 	bl	80058e0 <HAL_I2CEx_ConfigAnalogFilter>
 8003db4:	1e03      	subs	r3, r0, #0
 8003db6:	d001      	beq.n	8003dbc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003db8:	f000 f8b6 	bl	8003f28 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <MX_I2C1_Init+0x74>)
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f001 fdd9 	bl	8005978 <HAL_I2CEx_ConfigDigitalFilter>
 8003dc6:	1e03      	subs	r3, r0, #0
 8003dc8:	d001      	beq.n	8003dce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003dca:	f000 f8ad 	bl	8003f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	200000e4 	.word	0x200000e4
 8003dd8:	40005400 	.word	0x40005400
 8003ddc:	00707cbb 	.word	0x00707cbb

08003de0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003de6:	2308      	movs	r3, #8
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	0018      	movs	r0, r3
 8003dec:	2310      	movs	r3, #16
 8003dee:	001a      	movs	r2, r3
 8003df0:	2100      	movs	r1, #0
 8003df2:	f003 f803 	bl	8006dfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003df6:	003b      	movs	r3, r7
 8003df8:	0018      	movs	r0, r3
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	001a      	movs	r2, r3
 8003dfe:	2100      	movs	r1, #0
 8003e00:	f002 fffc 	bl	8006dfc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e04:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <MX_TIM2_Init+0xa0>)
 8003e06:	2280      	movs	r2, #128	; 0x80
 8003e08:	05d2      	lsls	r2, r2, #23
 8003e0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24;
 8003e0c:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <MX_TIM2_Init+0xa0>)
 8003e0e:	2218      	movs	r2, #24
 8003e10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e12:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <MX_TIM2_Init+0xa0>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003e18:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <MX_TIM2_Init+0xa0>)
 8003e1a:	4a1a      	ldr	r2, [pc, #104]	; (8003e84 <MX_TIM2_Init+0xa4>)
 8003e1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e1e:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <MX_TIM2_Init+0xa0>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e24:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <MX_TIM2_Init+0xa0>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e2a:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <MX_TIM2_Init+0xa0>)
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f002 fd07 	bl	8006840 <HAL_TIM_Base_Init>
 8003e32:	1e03      	subs	r3, r0, #0
 8003e34:	d001      	beq.n	8003e3a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003e36:	f000 f877 	bl	8003f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e3a:	2108      	movs	r1, #8
 8003e3c:	187b      	adds	r3, r7, r1
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	0152      	lsls	r2, r2, #5
 8003e42:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e44:	187a      	adds	r2, r7, r1
 8003e46:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <MX_TIM2_Init+0xa0>)
 8003e48:	0011      	movs	r1, r2
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f002 fd82 	bl	8006954 <HAL_TIM_ConfigClockSource>
 8003e50:	1e03      	subs	r3, r0, #0
 8003e52:	d001      	beq.n	8003e58 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003e54:	f000 f868 	bl	8003f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e58:	003b      	movs	r3, r7
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e5e:	003b      	movs	r3, r7
 8003e60:	2200      	movs	r2, #0
 8003e62:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e64:	003a      	movs	r2, r7
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <MX_TIM2_Init+0xa0>)
 8003e68:	0011      	movs	r1, r2
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f002 ff3e 	bl	8006cec <HAL_TIMEx_MasterConfigSynchronization>
 8003e70:	1e03      	subs	r3, r0, #0
 8003e72:	d001      	beq.n	8003e78 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003e74:	f000 f858 	bl	8003f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b006      	add	sp, #24
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	20000130 	.word	0x20000130
 8003e84:	0000ffff 	.word	0x0000ffff

08003e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e88:	b590      	push	{r4, r7, lr}
 8003e8a:	b089      	sub	sp, #36	; 0x24
 8003e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e8e:	240c      	movs	r4, #12
 8003e90:	193b      	adds	r3, r7, r4
 8003e92:	0018      	movs	r0, r3
 8003e94:	2314      	movs	r3, #20
 8003e96:	001a      	movs	r2, r3
 8003e98:	2100      	movs	r1, #0
 8003e9a:	f002 ffaf 	bl	8006dfc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e9e:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <MX_GPIO_Init+0x98>)
 8003ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea2:	4b1f      	ldr	r3, [pc, #124]	; (8003f20 <MX_GPIO_Init+0x98>)
 8003ea4:	2104      	movs	r1, #4
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eaa:	4b1d      	ldr	r3, [pc, #116]	; (8003f20 <MX_GPIO_Init+0x98>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	2204      	movs	r2, #4
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb6:	4b1a      	ldr	r3, [pc, #104]	; (8003f20 <MX_GPIO_Init+0x98>)
 8003eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eba:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <MX_GPIO_Init+0x98>)
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ec2:	4b17      	ldr	r3, [pc, #92]	; (8003f20 <MX_GPIO_Init+0x98>)
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	4013      	ands	r3, r2
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ece:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <MX_GPIO_Init+0x98>)
 8003ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed2:	4b13      	ldr	r3, [pc, #76]	; (8003f20 <MX_GPIO_Init+0x98>)
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eda:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <MX_GPIO_Init+0x98>)
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	2202      	movs	r2, #2
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8003ee6:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <MX_GPIO_Init+0x9c>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2106      	movs	r1, #6
 8003eec:	0018      	movs	r0, r3
 8003eee:	f000 ff90 	bl	8004e12 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003ef2:	0021      	movs	r1, r4
 8003ef4:	187b      	adds	r3, r7, r1
 8003ef6:	2206      	movs	r2, #6
 8003ef8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003efa:	187b      	adds	r3, r7, r1
 8003efc:	2201      	movs	r2, #1
 8003efe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f00:	187b      	adds	r3, r7, r1
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f06:	187b      	adds	r3, r7, r1
 8003f08:	2200      	movs	r2, #0
 8003f0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	4a05      	ldr	r2, [pc, #20]	; (8003f24 <MX_GPIO_Init+0x9c>)
 8003f10:	0019      	movs	r1, r3
 8003f12:	0010      	movs	r0, r2
 8003f14:	f000 fde2 	bl	8004adc <HAL_GPIO_Init>

}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b009      	add	sp, #36	; 0x24
 8003f1e:	bd90      	pop	{r4, r7, pc}
 8003f20:	40021000 	.word	0x40021000
 8003f24:	50000800 	.word	0x50000800

08003f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f2c:	b672      	cpsid	i
}
 8003f2e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f30:	e7fe      	b.n	8003f30 <Error_Handler+0x8>
	...

08003f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f38:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <HAL_MspInit+0x24>)
 8003f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_MspInit+0x24>)
 8003f3e:	2101      	movs	r1, #1
 8003f40:	430a      	orrs	r2, r1
 8003f42:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f44:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <HAL_MspInit+0x24>)
 8003f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_MspInit+0x24>)
 8003f4a:	2180      	movs	r1, #128	; 0x80
 8003f4c:	0549      	lsls	r1, r1, #21
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000

08003f5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f5c:	b590      	push	{r4, r7, lr}
 8003f5e:	b08b      	sub	sp, #44	; 0x2c
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	2414      	movs	r4, #20
 8003f66:	193b      	adds	r3, r7, r4
 8003f68:	0018      	movs	r0, r3
 8003f6a:	2314      	movs	r3, #20
 8003f6c:	001a      	movs	r2, r3
 8003f6e:	2100      	movs	r1, #0
 8003f70:	f002 ff44 	bl	8006dfc <memset>
  if(hadc->Instance==ADC1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a22      	ldr	r2, [pc, #136]	; (8004004 <HAL_ADC_MspInit+0xa8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d13e      	bne.n	8003ffc <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f7e:	4b22      	ldr	r3, [pc, #136]	; (8004008 <HAL_ADC_MspInit+0xac>)
 8003f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f82:	4b21      	ldr	r3, [pc, #132]	; (8004008 <HAL_ADC_MspInit+0xac>)
 8003f84:	2180      	movs	r1, #128	; 0x80
 8003f86:	0089      	lsls	r1, r1, #2
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f8c:	4b1e      	ldr	r3, [pc, #120]	; (8004008 <HAL_ADC_MspInit+0xac>)
 8003f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f90:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <HAL_ADC_MspInit+0xac>)
 8003f92:	2104      	movs	r1, #4
 8003f94:	430a      	orrs	r2, r1
 8003f96:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f98:	4b1b      	ldr	r3, [pc, #108]	; (8004008 <HAL_ADC_MspInit+0xac>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa4:	4b18      	ldr	r3, [pc, #96]	; (8004008 <HAL_ADC_MspInit+0xac>)
 8003fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa8:	4b17      	ldr	r3, [pc, #92]	; (8004008 <HAL_ADC_MspInit+0xac>)
 8003faa:	2101      	movs	r1, #1
 8003fac:	430a      	orrs	r2, r1
 8003fae:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fb0:	4b15      	ldr	r3, [pc, #84]	; (8004008 <HAL_ADC_MspInit+0xac>)
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC3     ------> ADC_IN13
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003fbc:	193b      	adds	r3, r7, r4
 8003fbe:	2208      	movs	r2, #8
 8003fc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fc2:	193b      	adds	r3, r7, r4
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc8:	193b      	adds	r3, r7, r4
 8003fca:	2200      	movs	r2, #0
 8003fcc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fce:	193b      	adds	r3, r7, r4
 8003fd0:	4a0e      	ldr	r2, [pc, #56]	; (800400c <HAL_ADC_MspInit+0xb0>)
 8003fd2:	0019      	movs	r1, r3
 8003fd4:	0010      	movs	r0, r2
 8003fd6:	f000 fd81 	bl	8004adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003fda:	0021      	movs	r1, r4
 8003fdc:	187b      	adds	r3, r7, r1
 8003fde:	2201      	movs	r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fe2:	187b      	adds	r3, r7, r1
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe8:	187b      	adds	r3, r7, r1
 8003fea:	2200      	movs	r2, #0
 8003fec:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fee:	187a      	adds	r2, r7, r1
 8003ff0:	23a0      	movs	r3, #160	; 0xa0
 8003ff2:	05db      	lsls	r3, r3, #23
 8003ff4:	0011      	movs	r1, r2
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f000 fd70 	bl	8004adc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b00b      	add	sp, #44	; 0x2c
 8004002:	bd90      	pop	{r4, r7, pc}
 8004004:	40012400 	.word	0x40012400
 8004008:	40021000 	.word	0x40021000
 800400c:	50000800 	.word	0x50000800

08004010 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004010:	b590      	push	{r4, r7, lr}
 8004012:	b089      	sub	sp, #36	; 0x24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004018:	240c      	movs	r4, #12
 800401a:	193b      	adds	r3, r7, r4
 800401c:	0018      	movs	r0, r3
 800401e:	2314      	movs	r3, #20
 8004020:	001a      	movs	r2, r3
 8004022:	2100      	movs	r1, #0
 8004024:	f002 feea 	bl	8006dfc <memset>
  if(hi2c->Instance==I2C1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a17      	ldr	r2, [pc, #92]	; (800408c <HAL_I2C_MspInit+0x7c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d128      	bne.n	8004084 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004032:	4b17      	ldr	r3, [pc, #92]	; (8004090 <HAL_I2C_MspInit+0x80>)
 8004034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004036:	4b16      	ldr	r3, [pc, #88]	; (8004090 <HAL_I2C_MspInit+0x80>)
 8004038:	2102      	movs	r1, #2
 800403a:	430a      	orrs	r2, r1
 800403c:	62da      	str	r2, [r3, #44]	; 0x2c
 800403e:	4b14      	ldr	r3, [pc, #80]	; (8004090 <HAL_I2C_MspInit+0x80>)
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	2202      	movs	r2, #2
 8004044:	4013      	ands	r3, r2
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800404a:	0021      	movs	r1, r4
 800404c:	187b      	adds	r3, r7, r1
 800404e:	22c0      	movs	r2, #192	; 0xc0
 8004050:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004052:	187b      	adds	r3, r7, r1
 8004054:	2212      	movs	r2, #18
 8004056:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	187b      	adds	r3, r7, r1
 800405a:	2200      	movs	r2, #0
 800405c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800405e:	187b      	adds	r3, r7, r1
 8004060:	2203      	movs	r2, #3
 8004062:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004064:	187b      	adds	r3, r7, r1
 8004066:	2201      	movs	r2, #1
 8004068:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800406a:	187b      	adds	r3, r7, r1
 800406c:	4a09      	ldr	r2, [pc, #36]	; (8004094 <HAL_I2C_MspInit+0x84>)
 800406e:	0019      	movs	r1, r3
 8004070:	0010      	movs	r0, r2
 8004072:	f000 fd33 	bl	8004adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004076:	4b06      	ldr	r3, [pc, #24]	; (8004090 <HAL_I2C_MspInit+0x80>)
 8004078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800407a:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_I2C_MspInit+0x80>)
 800407c:	2180      	movs	r1, #128	; 0x80
 800407e:	0389      	lsls	r1, r1, #14
 8004080:	430a      	orrs	r2, r1
 8004082:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004084:	46c0      	nop			; (mov r8, r8)
 8004086:	46bd      	mov	sp, r7
 8004088:	b009      	add	sp, #36	; 0x24
 800408a:	bd90      	pop	{r4, r7, pc}
 800408c:	40005400 	.word	0x40005400
 8004090:	40021000 	.word	0x40021000
 8004094:	50000400 	.word	0x50000400

08004098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	05db      	lsls	r3, r3, #23
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d105      	bne.n	80040b8 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <HAL_TIM_Base_MspInit+0x28>)
 80040ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040b0:	4b03      	ldr	r3, [pc, #12]	; (80040c0 <HAL_TIM_Base_MspInit+0x28>)
 80040b2:	2101      	movs	r1, #1
 80040b4:	430a      	orrs	r2, r1
 80040b6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80040b8:	46c0      	nop			; (mov r8, r8)
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b002      	add	sp, #8
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021000 	.word	0x40021000

080040c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040c8:	e7fe      	b.n	80040c8 <NMI_Handler+0x4>

080040ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ce:	e7fe      	b.n	80040ce <HardFault_Handler+0x4>

080040d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80040d4:	46c0      	nop			; (mov r8, r8)
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040e8:	f000 f886 	bl	80041f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80040fc:	480d      	ldr	r0, [pc, #52]	; (8004134 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80040fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004100:	480d      	ldr	r0, [pc, #52]	; (8004138 <LoopForever+0x6>)
  ldr r1, =_edata
 8004102:	490e      	ldr	r1, [pc, #56]	; (800413c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004104:	4a0e      	ldr	r2, [pc, #56]	; (8004140 <LoopForever+0xe>)
  movs r3, #0
 8004106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004108:	e002      	b.n	8004110 <LoopCopyDataInit>

0800410a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800410a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800410c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800410e:	3304      	adds	r3, #4

08004110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004114:	d3f9      	bcc.n	800410a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004116:	4a0b      	ldr	r2, [pc, #44]	; (8004144 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004118:	4c0b      	ldr	r4, [pc, #44]	; (8004148 <LoopForever+0x16>)
  movs r3, #0
 800411a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800411c:	e001      	b.n	8004122 <LoopFillZerobss>

0800411e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800411e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004120:	3204      	adds	r2, #4

08004122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004124:	d3fb      	bcc.n	800411e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004126:	f7ff ffe4 	bl	80040f2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800412a:	f002 fe43 	bl	8006db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800412e:	f7ff fba1 	bl	8003874 <main>

08004132 <LoopForever>:

LoopForever:
    b LoopForever
 8004132:	e7fe      	b.n	8004132 <LoopForever>
   ldr   r0, =_estack
 8004134:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800413c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004140:	08007ec8 	.word	0x08007ec8
  ldr r2, =_sbss
 8004144:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8004148:	200001d0 	.word	0x200001d0

0800414c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800414c:	e7fe      	b.n	800414c <ADC1_COMP_IRQHandler>
	...

08004150 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004156:	1dfb      	adds	r3, r7, #7
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_Init+0x3c>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	4b0a      	ldr	r3, [pc, #40]	; (800418c <HAL_Init+0x3c>)
 8004162:	2140      	movs	r1, #64	; 0x40
 8004164:	430a      	orrs	r2, r1
 8004166:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004168:	2003      	movs	r0, #3
 800416a:	f000 f811 	bl	8004190 <HAL_InitTick>
 800416e:	1e03      	subs	r3, r0, #0
 8004170:	d003      	beq.n	800417a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004172:	1dfb      	adds	r3, r7, #7
 8004174:	2201      	movs	r2, #1
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e001      	b.n	800417e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800417a:	f7ff fedb 	bl	8003f34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800417e:	1dfb      	adds	r3, r7, #7
 8004180:	781b      	ldrb	r3, [r3, #0]
}
 8004182:	0018      	movs	r0, r3
 8004184:	46bd      	mov	sp, r7
 8004186:	b002      	add	sp, #8
 8004188:	bd80      	pop	{r7, pc}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	40022000 	.word	0x40022000

08004190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004198:	4b14      	ldr	r3, [pc, #80]	; (80041ec <HAL_InitTick+0x5c>)
 800419a:	681c      	ldr	r4, [r3, #0]
 800419c:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <HAL_InitTick+0x60>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	0019      	movs	r1, r3
 80041a2:	23fa      	movs	r3, #250	; 0xfa
 80041a4:	0098      	lsls	r0, r3, #2
 80041a6:	f7fb ffaf 	bl	8000108 <__udivsi3>
 80041aa:	0003      	movs	r3, r0
 80041ac:	0019      	movs	r1, r3
 80041ae:	0020      	movs	r0, r4
 80041b0:	f7fb ffaa 	bl	8000108 <__udivsi3>
 80041b4:	0003      	movs	r3, r0
 80041b6:	0018      	movs	r0, r3
 80041b8:	f000 fc83 	bl	8004ac2 <HAL_SYSTICK_Config>
 80041bc:	1e03      	subs	r3, r0, #0
 80041be:	d001      	beq.n	80041c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e00f      	b.n	80041e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d80b      	bhi.n	80041e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	2301      	movs	r3, #1
 80041ce:	425b      	negs	r3, r3
 80041d0:	2200      	movs	r2, #0
 80041d2:	0018      	movs	r0, r3
 80041d4:	f000 fc60 	bl	8004a98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_InitTick+0x64>)
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	e000      	b.n	80041e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b003      	add	sp, #12
 80041ea:	bd90      	pop	{r4, r7, pc}
 80041ec:	20000000 	.word	0x20000000
 80041f0:	20000008 	.word	0x20000008
 80041f4:	20000004 	.word	0x20000004

080041f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <HAL_IncTick+0x1c>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	001a      	movs	r2, r3
 8004202:	4b05      	ldr	r3, [pc, #20]	; (8004218 <HAL_IncTick+0x20>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	18d2      	adds	r2, r2, r3
 8004208:	4b03      	ldr	r3, [pc, #12]	; (8004218 <HAL_IncTick+0x20>)
 800420a:	601a      	str	r2, [r3, #0]
}
 800420c:	46c0      	nop			; (mov r8, r8)
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	20000008 	.word	0x20000008
 8004218:	200001cc 	.word	0x200001cc

0800421c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  return uwTick;
 8004220:	4b02      	ldr	r3, [pc, #8]	; (800422c <HAL_GetTick+0x10>)
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	0018      	movs	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	200001cc 	.word	0x200001cc

08004230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004238:	f7ff fff0 	bl	800421c <HAL_GetTick>
 800423c:	0003      	movs	r3, r0
 800423e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3301      	adds	r3, #1
 8004248:	d005      	beq.n	8004256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <HAL_Delay+0x44>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	001a      	movs	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	189b      	adds	r3, r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	f7ff ffe0 	bl	800421c <HAL_GetTick>
 800425c:	0002      	movs	r2, r0
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	429a      	cmp	r2, r3
 8004266:	d8f7      	bhi.n	8004258 <HAL_Delay+0x28>
  {
  }
}
 8004268:	46c0      	nop			; (mov r8, r8)
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	46bd      	mov	sp, r7
 800426e:	b004      	add	sp, #16
 8004270:	bd80      	pop	{r7, pc}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	20000008 	.word	0x20000008

08004278 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e159      	b.n	800453e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2250      	movs	r2, #80	; 0x50
 800429c:	2100      	movs	r1, #0
 800429e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	0018      	movs	r0, r3
 80042a4:	f7ff fe5a 	bl	8003f5c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ac:	2210      	movs	r2, #16
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d005      	beq.n	80042c0 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2204      	movs	r2, #4
 80042bc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80042be:	d00b      	beq.n	80042d8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c4:	2210      	movs	r2, #16
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2250      	movs	r2, #80	; 0x50
 80042d0:	2100      	movs	r1, #0
 80042d2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e132      	b.n	800453e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	4a9a      	ldr	r2, [pc, #616]	; (8004548 <HAL_ADC_Init+0x2d0>)
 80042de:	4013      	ands	r3, r2
 80042e0:	2202      	movs	r2, #2
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2203      	movs	r2, #3
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d108      	bne.n	8004308 <HAL_ADC_Init+0x90>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2201      	movs	r2, #1
 80042fe:	4013      	ands	r3, r2
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_ADC_Init+0x90>
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <HAL_ADC_Init+0x92>
 8004308:	2300      	movs	r3, #0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d149      	bne.n	80043a2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	23c0      	movs	r3, #192	; 0xc0
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	429a      	cmp	r2, r3
 8004318:	d00b      	beq.n	8004332 <HAL_ADC_Init+0xba>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	2380      	movs	r3, #128	; 0x80
 8004320:	05db      	lsls	r3, r3, #23
 8004322:	429a      	cmp	r2, r3
 8004324:	d005      	beq.n	8004332 <HAL_ADC_Init+0xba>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	061b      	lsls	r3, r3, #24
 800432e:	429a      	cmp	r2, r3
 8004330:	d111      	bne.n	8004356 <HAL_ADC_Init+0xde>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0092      	lsls	r2, r2, #2
 800433e:	0892      	lsrs	r2, r2, #2
 8004340:	611a      	str	r2, [r3, #16]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6919      	ldr	r1, [r3, #16]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	611a      	str	r2, [r3, #16]
 8004354:	e014      	b.n	8004380 <HAL_ADC_Init+0x108>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	0092      	lsls	r2, r2, #2
 8004362:	0892      	lsrs	r2, r2, #2
 8004364:	611a      	str	r2, [r3, #16]
 8004366:	4b79      	ldr	r3, [pc, #484]	; (800454c <HAL_ADC_Init+0x2d4>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b78      	ldr	r3, [pc, #480]	; (800454c <HAL_ADC_Init+0x2d4>)
 800436c:	4978      	ldr	r1, [pc, #480]	; (8004550 <HAL_ADC_Init+0x2d8>)
 800436e:	400a      	ands	r2, r1
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	4b76      	ldr	r3, [pc, #472]	; (800454c <HAL_ADC_Init+0x2d4>)
 8004374:	6819      	ldr	r1, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	4b74      	ldr	r3, [pc, #464]	; (800454c <HAL_ADC_Init+0x2d4>)
 800437c:	430a      	orrs	r2, r1
 800437e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2118      	movs	r1, #24
 800438c:	438a      	bics	r2, r1
 800438e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68d9      	ldr	r1, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80043a2:	4b6a      	ldr	r3, [pc, #424]	; (800454c <HAL_ADC_Init+0x2d4>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4b69      	ldr	r3, [pc, #420]	; (800454c <HAL_ADC_Init+0x2d4>)
 80043a8:	496a      	ldr	r1, [pc, #424]	; (8004554 <HAL_ADC_Init+0x2dc>)
 80043aa:	400a      	ands	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80043ae:	4b67      	ldr	r3, [pc, #412]	; (800454c <HAL_ADC_Init+0x2d4>)
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b6:	065a      	lsls	r2, r3, #25
 80043b8:	4b64      	ldr	r3, [pc, #400]	; (800454c <HAL_ADC_Init+0x2d4>)
 80043ba:	430a      	orrs	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	055b      	lsls	r3, r3, #21
 80043c8:	4013      	ands	r3, r2
 80043ca:	d108      	bne.n	80043de <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2180      	movs	r1, #128	; 0x80
 80043d8:	0549      	lsls	r1, r1, #21
 80043da:	430a      	orrs	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	495b      	ldr	r1, [pc, #364]	; (8004558 <HAL_ADC_Init+0x2e0>)
 80043ea:	400a      	ands	r2, r1
 80043ec:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68d9      	ldr	r1, [r3, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d101      	bne.n	8004404 <HAL_ADC_Init+0x18c>
 8004400:	2304      	movs	r3, #4
 8004402:	e000      	b.n	8004406 <HAL_ADC_Init+0x18e>
 8004404:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004406:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2020      	movs	r0, #32
 800440c:	5c1b      	ldrb	r3, [r3, r0]
 800440e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004410:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	202c      	movs	r0, #44	; 0x2c
 8004416:	5c1b      	ldrb	r3, [r3, r0]
 8004418:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800441a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004420:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004428:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004430:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800443e:	23c2      	movs	r3, #194	; 0xc2
 8004440:	33ff      	adds	r3, #255	; 0xff
 8004442:	429a      	cmp	r2, r3
 8004444:	d00b      	beq.n	800445e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68d9      	ldr	r1, [r3, #12]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2221      	movs	r2, #33	; 0x21
 8004462:	5c9b      	ldrb	r3, [r3, r2]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d11a      	bne.n	800449e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	5c9b      	ldrb	r3, [r3, r2]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2180      	movs	r1, #128	; 0x80
 800447e:	0249      	lsls	r1, r1, #9
 8004480:	430a      	orrs	r2, r1
 8004482:	60da      	str	r2, [r3, #12]
 8004484:	e00b      	b.n	800449e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	2220      	movs	r2, #32
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004496:	2201      	movs	r2, #1
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d11f      	bne.n	80044e6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	492a      	ldr	r1, [pc, #168]	; (800455c <HAL_ADC_Init+0x2e4>)
 80044b2:	400a      	ands	r2, r1
 80044b4:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6919      	ldr	r1, [r3, #16]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80044c4:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80044ca:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2101      	movs	r1, #1
 80044e0:	430a      	orrs	r2, r1
 80044e2:	611a      	str	r2, [r3, #16]
 80044e4:	e00e      	b.n	8004504 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	2201      	movs	r2, #1
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d107      	bne.n	8004504 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2101      	movs	r1, #1
 8004500:	438a      	bics	r2, r1
 8004502:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2107      	movs	r1, #7
 8004510:	438a      	bics	r2, r1
 8004512:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6959      	ldr	r1, [r3, #20]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	2203      	movs	r2, #3
 8004532:	4393      	bics	r3, r2
 8004534:	2201      	movs	r2, #1
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	0018      	movs	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	b002      	add	sp, #8
 8004544:	bd80      	pop	{r7, pc}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	fffffefd 	.word	0xfffffefd
 800454c:	40012708 	.word	0x40012708
 8004550:	ffc3ffff 	.word	0xffc3ffff
 8004554:	fdffffff 	.word	0xfdffffff
 8004558:	fffe0219 	.word	0xfffe0219
 800455c:	fffffc03 	.word	0xfffffc03

08004560 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004560:	b590      	push	{r4, r7, lr}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004568:	230f      	movs	r3, #15
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	2200      	movs	r2, #0
 800456e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2204      	movs	r2, #4
 8004578:	4013      	ands	r3, r2
 800457a:	d138      	bne.n	80045ee <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2250      	movs	r2, #80	; 0x50
 8004580:	5c9b      	ldrb	r3, [r3, r2]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_ADC_Start+0x2a>
 8004586:	2302      	movs	r3, #2
 8004588:	e038      	b.n	80045fc <HAL_ADC_Start+0x9c>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2250      	movs	r2, #80	; 0x50
 800458e:	2101      	movs	r1, #1
 8004590:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d007      	beq.n	80045aa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800459a:	230f      	movs	r3, #15
 800459c:	18fc      	adds	r4, r7, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	0018      	movs	r0, r3
 80045a2:	f000 f95f 	bl	8004864 <ADC_Enable>
 80045a6:	0003      	movs	r3, r0
 80045a8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80045aa:	230f      	movs	r3, #15
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d120      	bne.n	80045f6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b8:	4a12      	ldr	r2, [pc, #72]	; (8004604 <HAL_ADC_Start+0xa4>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	2280      	movs	r2, #128	; 0x80
 80045be:	0052      	lsls	r2, r2, #1
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2250      	movs	r2, #80	; 0x50
 80045d0:	2100      	movs	r1, #0
 80045d2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	221c      	movs	r2, #28
 80045da:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2104      	movs	r1, #4
 80045e8:	430a      	orrs	r2, r1
 80045ea:	609a      	str	r2, [r3, #8]
 80045ec:	e003      	b.n	80045f6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80045ee:	230f      	movs	r3, #15
 80045f0:	18fb      	adds	r3, r7, r3
 80045f2:	2202      	movs	r2, #2
 80045f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80045f6:	230f      	movs	r3, #15
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	781b      	ldrb	r3, [r3, #0]
}
 80045fc:	0018      	movs	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	b005      	add	sp, #20
 8004602:	bd90      	pop	{r4, r7, pc}
 8004604:	fffff0fe 	.word	0xfffff0fe

08004608 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	2b08      	cmp	r3, #8
 8004620:	d102      	bne.n	8004628 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8004622:	2308      	movs	r3, #8
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e014      	b.n	8004652 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	4013      	ands	r3, r2
 8004632:	2b01      	cmp	r3, #1
 8004634:	d10b      	bne.n	800464e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463a:	2220      	movs	r2, #32
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2250      	movs	r2, #80	; 0x50
 8004646:	2100      	movs	r1, #0
 8004648:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e072      	b.n	8004734 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800464e:	230c      	movs	r3, #12
 8004650:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004652:	f7ff fde3 	bl	800421c <HAL_GetTick>
 8004656:	0003      	movs	r3, r0
 8004658:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800465a:	e01f      	b.n	800469c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	3301      	adds	r3, #1
 8004660:	d01c      	beq.n	800469c <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <HAL_ADC_PollForConversion+0x70>
 8004668:	f7ff fdd8 	bl	800421c <HAL_GetTick>
 800466c:	0002      	movs	r2, r0
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d211      	bcs.n	800469c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4013      	ands	r3, r2
 8004682:	d10b      	bne.n	800469c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	2204      	movs	r2, #4
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2250      	movs	r2, #80	; 0x50
 8004694:	2100      	movs	r1, #0
 8004696:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e04b      	b.n	8004734 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4013      	ands	r3, r2
 80046a6:	d0d9      	beq.n	800465c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ac:	2280      	movs	r2, #128	; 0x80
 80046ae:	0092      	lsls	r2, r2, #2
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	23c0      	movs	r3, #192	; 0xc0
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	4013      	ands	r3, r2
 80046c2:	d12e      	bne.n	8004722 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d129      	bne.n	8004722 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2208      	movs	r2, #8
 80046d6:	4013      	ands	r3, r2
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d122      	bne.n	8004722 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2204      	movs	r2, #4
 80046e4:	4013      	ands	r3, r2
 80046e6:	d110      	bne.n	800470a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	210c      	movs	r1, #12
 80046f4:	438a      	bics	r2, r1
 80046f6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fc:	4a0f      	ldr	r2, [pc, #60]	; (800473c <HAL_ADC_PollForConversion+0x134>)
 80046fe:	4013      	ands	r3, r2
 8004700:	2201      	movs	r2, #1
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	655a      	str	r2, [r3, #84]	; 0x54
 8004708:	e00b      	b.n	8004722 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470e:	2220      	movs	r2, #32
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471a:	2201      	movs	r2, #1
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	220c      	movs	r2, #12
 8004730:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	0018      	movs	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	b004      	add	sp, #16
 800473a:	bd80      	pop	{r7, pc}
 800473c:	fffffefe 	.word	0xfffffefe

08004740 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800474e:	0018      	movs	r0, r3
 8004750:	46bd      	mov	sp, r7
 8004752:	b002      	add	sp, #8
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2250      	movs	r2, #80	; 0x50
 8004766:	5c9b      	ldrb	r3, [r3, r2]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x18>
 800476c:	2302      	movs	r3, #2
 800476e:	e06c      	b.n	800484a <HAL_ADC_ConfigChannel+0xf2>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2250      	movs	r2, #80	; 0x50
 8004774:	2101      	movs	r1, #1
 8004776:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2204      	movs	r2, #4
 8004780:	4013      	ands	r3, r2
 8004782:	d00b      	beq.n	800479c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004788:	2220      	movs	r2, #32
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2250      	movs	r2, #80	; 0x50
 8004794:	2100      	movs	r1, #0
 8004796:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e056      	b.n	800484a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4a2c      	ldr	r2, [pc, #176]	; (8004854 <HAL_ADC_ConfigChannel+0xfc>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d028      	beq.n	80047f8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	035b      	lsls	r3, r3, #13
 80047b2:	0b5a      	lsrs	r2, r3, #13
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	2380      	movs	r3, #128	; 0x80
 80047c2:	02db      	lsls	r3, r3, #11
 80047c4:	4013      	ands	r3, r2
 80047c6:	d009      	beq.n	80047dc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80047c8:	4b23      	ldr	r3, [pc, #140]	; (8004858 <HAL_ADC_ConfigChannel+0x100>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	4b22      	ldr	r3, [pc, #136]	; (8004858 <HAL_ADC_ConfigChannel+0x100>)
 80047ce:	2180      	movs	r1, #128	; 0x80
 80047d0:	0409      	lsls	r1, r1, #16
 80047d2:	430a      	orrs	r2, r1
 80047d4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80047d6:	200a      	movs	r0, #10
 80047d8:	f000 f8ac 	bl	8004934 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	2380      	movs	r3, #128	; 0x80
 80047e2:	029b      	lsls	r3, r3, #10
 80047e4:	4013      	ands	r3, r2
 80047e6:	d02b      	beq.n	8004840 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80047e8:	4b1b      	ldr	r3, [pc, #108]	; (8004858 <HAL_ADC_ConfigChannel+0x100>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <HAL_ADC_ConfigChannel+0x100>)
 80047ee:	2180      	movs	r1, #128	; 0x80
 80047f0:	03c9      	lsls	r1, r1, #15
 80047f2:	430a      	orrs	r2, r1
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	e023      	b.n	8004840 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	035b      	lsls	r3, r3, #13
 8004804:	0b5b      	lsrs	r3, r3, #13
 8004806:	43d9      	mvns	r1, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	400a      	ands	r2, r1
 800480e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	2380      	movs	r3, #128	; 0x80
 8004816:	02db      	lsls	r3, r3, #11
 8004818:	4013      	ands	r3, r2
 800481a:	d005      	beq.n	8004828 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800481c:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <HAL_ADC_ConfigChannel+0x100>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <HAL_ADC_ConfigChannel+0x100>)
 8004822:	490e      	ldr	r1, [pc, #56]	; (800485c <HAL_ADC_ConfigChannel+0x104>)
 8004824:	400a      	ands	r2, r1
 8004826:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	029b      	lsls	r3, r3, #10
 8004830:	4013      	ands	r3, r2
 8004832:	d005      	beq.n	8004840 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004834:	4b08      	ldr	r3, [pc, #32]	; (8004858 <HAL_ADC_ConfigChannel+0x100>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4b07      	ldr	r3, [pc, #28]	; (8004858 <HAL_ADC_ConfigChannel+0x100>)
 800483a:	4909      	ldr	r1, [pc, #36]	; (8004860 <HAL_ADC_ConfigChannel+0x108>)
 800483c:	400a      	ands	r2, r1
 800483e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2250      	movs	r2, #80	; 0x50
 8004844:	2100      	movs	r1, #0
 8004846:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b002      	add	sp, #8
 8004850:	bd80      	pop	{r7, pc}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	00001001 	.word	0x00001001
 8004858:	40012708 	.word	0x40012708
 800485c:	ff7fffff 	.word	0xff7fffff
 8004860:	ffbfffff 	.word	0xffbfffff

08004864 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	2203      	movs	r2, #3
 8004878:	4013      	ands	r3, r2
 800487a:	2b01      	cmp	r3, #1
 800487c:	d108      	bne.n	8004890 <ADC_Enable+0x2c>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2201      	movs	r2, #1
 8004886:	4013      	ands	r3, r2
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <ADC_Enable+0x2c>
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <ADC_Enable+0x2e>
 8004890:	2300      	movs	r3, #0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d146      	bne.n	8004924 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a24      	ldr	r2, [pc, #144]	; (8004930 <ADC_Enable+0xcc>)
 800489e:	4013      	ands	r3, r2
 80048a0:	d00d      	beq.n	80048be <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	2210      	movs	r2, #16
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b2:	2201      	movs	r2, #1
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e033      	b.n	8004926 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2101      	movs	r1, #1
 80048ca:	430a      	orrs	r2, r1
 80048cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80048ce:	2001      	movs	r0, #1
 80048d0:	f000 f830 	bl	8004934 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80048d4:	f7ff fca2 	bl	800421c <HAL_GetTick>
 80048d8:	0003      	movs	r3, r0
 80048da:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80048dc:	e01b      	b.n	8004916 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048de:	f7ff fc9d 	bl	800421c <HAL_GetTick>
 80048e2:	0002      	movs	r2, r0
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b0a      	cmp	r3, #10
 80048ea:	d914      	bls.n	8004916 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2201      	movs	r2, #1
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d00d      	beq.n	8004916 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fe:	2210      	movs	r2, #16
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490a:	2201      	movs	r2, #1
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e007      	b.n	8004926 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2201      	movs	r2, #1
 800491e:	4013      	ands	r3, r2
 8004920:	2b01      	cmp	r3, #1
 8004922:	d1dc      	bne.n	80048de <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	0018      	movs	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	b004      	add	sp, #16
 800492c:	bd80      	pop	{r7, pc}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	80000017 	.word	0x80000017

08004934 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <ADC_DelayMicroSecond+0x38>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	490b      	ldr	r1, [pc, #44]	; (8004970 <ADC_DelayMicroSecond+0x3c>)
 8004942:	0018      	movs	r0, r3
 8004944:	f7fb fbe0 	bl	8000108 <__udivsi3>
 8004948:	0003      	movs	r3, r0
 800494a:	001a      	movs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4353      	muls	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8004952:	e002      	b.n	800495a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3b01      	subs	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f9      	bne.n	8004954 <ADC_DelayMicroSecond+0x20>
  } 
}
 8004960:	46c0      	nop			; (mov r8, r8)
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	46bd      	mov	sp, r7
 8004966:	b004      	add	sp, #16
 8004968:	bd80      	pop	{r7, pc}
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	20000000 	.word	0x20000000
 8004970:	000f4240 	.word	0x000f4240

08004974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004974:	b590      	push	{r4, r7, lr}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	0002      	movs	r2, r0
 800497c:	6039      	str	r1, [r7, #0]
 800497e:	1dfb      	adds	r3, r7, #7
 8004980:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004982:	1dfb      	adds	r3, r7, #7
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b7f      	cmp	r3, #127	; 0x7f
 8004988:	d828      	bhi.n	80049dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800498a:	4a2f      	ldr	r2, [pc, #188]	; (8004a48 <__NVIC_SetPriority+0xd4>)
 800498c:	1dfb      	adds	r3, r7, #7
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	b25b      	sxtb	r3, r3
 8004992:	089b      	lsrs	r3, r3, #2
 8004994:	33c0      	adds	r3, #192	; 0xc0
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	589b      	ldr	r3, [r3, r2]
 800499a:	1dfa      	adds	r2, r7, #7
 800499c:	7812      	ldrb	r2, [r2, #0]
 800499e:	0011      	movs	r1, r2
 80049a0:	2203      	movs	r2, #3
 80049a2:	400a      	ands	r2, r1
 80049a4:	00d2      	lsls	r2, r2, #3
 80049a6:	21ff      	movs	r1, #255	; 0xff
 80049a8:	4091      	lsls	r1, r2
 80049aa:	000a      	movs	r2, r1
 80049ac:	43d2      	mvns	r2, r2
 80049ae:	401a      	ands	r2, r3
 80049b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	019b      	lsls	r3, r3, #6
 80049b6:	22ff      	movs	r2, #255	; 0xff
 80049b8:	401a      	ands	r2, r3
 80049ba:	1dfb      	adds	r3, r7, #7
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	0018      	movs	r0, r3
 80049c0:	2303      	movs	r3, #3
 80049c2:	4003      	ands	r3, r0
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049c8:	481f      	ldr	r0, [pc, #124]	; (8004a48 <__NVIC_SetPriority+0xd4>)
 80049ca:	1dfb      	adds	r3, r7, #7
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	b25b      	sxtb	r3, r3
 80049d0:	089b      	lsrs	r3, r3, #2
 80049d2:	430a      	orrs	r2, r1
 80049d4:	33c0      	adds	r3, #192	; 0xc0
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80049da:	e031      	b.n	8004a40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049dc:	4a1b      	ldr	r2, [pc, #108]	; (8004a4c <__NVIC_SetPriority+0xd8>)
 80049de:	1dfb      	adds	r3, r7, #7
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	0019      	movs	r1, r3
 80049e4:	230f      	movs	r3, #15
 80049e6:	400b      	ands	r3, r1
 80049e8:	3b08      	subs	r3, #8
 80049ea:	089b      	lsrs	r3, r3, #2
 80049ec:	3306      	adds	r3, #6
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	18d3      	adds	r3, r2, r3
 80049f2:	3304      	adds	r3, #4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	1dfa      	adds	r2, r7, #7
 80049f8:	7812      	ldrb	r2, [r2, #0]
 80049fa:	0011      	movs	r1, r2
 80049fc:	2203      	movs	r2, #3
 80049fe:	400a      	ands	r2, r1
 8004a00:	00d2      	lsls	r2, r2, #3
 8004a02:	21ff      	movs	r1, #255	; 0xff
 8004a04:	4091      	lsls	r1, r2
 8004a06:	000a      	movs	r2, r1
 8004a08:	43d2      	mvns	r2, r2
 8004a0a:	401a      	ands	r2, r3
 8004a0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	019b      	lsls	r3, r3, #6
 8004a12:	22ff      	movs	r2, #255	; 0xff
 8004a14:	401a      	ands	r2, r3
 8004a16:	1dfb      	adds	r3, r7, #7
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	4003      	ands	r3, r0
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a24:	4809      	ldr	r0, [pc, #36]	; (8004a4c <__NVIC_SetPriority+0xd8>)
 8004a26:	1dfb      	adds	r3, r7, #7
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	001c      	movs	r4, r3
 8004a2c:	230f      	movs	r3, #15
 8004a2e:	4023      	ands	r3, r4
 8004a30:	3b08      	subs	r3, #8
 8004a32:	089b      	lsrs	r3, r3, #2
 8004a34:	430a      	orrs	r2, r1
 8004a36:	3306      	adds	r3, #6
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	18c3      	adds	r3, r0, r3
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	601a      	str	r2, [r3, #0]
}
 8004a40:	46c0      	nop			; (mov r8, r8)
 8004a42:	46bd      	mov	sp, r7
 8004a44:	b003      	add	sp, #12
 8004a46:	bd90      	pop	{r4, r7, pc}
 8004a48:	e000e100 	.word	0xe000e100
 8004a4c:	e000ed00 	.word	0xe000ed00

08004a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	1e5a      	subs	r2, r3, #1
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	045b      	lsls	r3, r3, #17
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d301      	bcc.n	8004a68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a64:	2301      	movs	r3, #1
 8004a66:	e010      	b.n	8004a8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <SysTick_Config+0x44>)
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	3a01      	subs	r2, #1
 8004a6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a70:	2301      	movs	r3, #1
 8004a72:	425b      	negs	r3, r3
 8004a74:	2103      	movs	r1, #3
 8004a76:	0018      	movs	r0, r3
 8004a78:	f7ff ff7c 	bl	8004974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <SysTick_Config+0x44>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a82:	4b04      	ldr	r3, [pc, #16]	; (8004a94 <SysTick_Config+0x44>)
 8004a84:	2207      	movs	r2, #7
 8004a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b002      	add	sp, #8
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	e000e010 	.word	0xe000e010

08004a98 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	607a      	str	r2, [r7, #4]
 8004aa2:	210f      	movs	r1, #15
 8004aa4:	187b      	adds	r3, r7, r1
 8004aa6:	1c02      	adds	r2, r0, #0
 8004aa8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	187b      	adds	r3, r7, r1
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	b25b      	sxtb	r3, r3
 8004ab2:	0011      	movs	r1, r2
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7ff ff5d 	bl	8004974 <__NVIC_SetPriority>
}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b004      	add	sp, #16
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	0018      	movs	r0, r3
 8004ace:	f7ff ffbf 	bl	8004a50 <SysTick_Config>
 8004ad2:	0003      	movs	r3, r0
}
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b002      	add	sp, #8
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004af2:	e155      	b.n	8004da0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2101      	movs	r1, #1
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4091      	lsls	r1, r2
 8004afe:	000a      	movs	r2, r1
 8004b00:	4013      	ands	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d100      	bne.n	8004b0c <HAL_GPIO_Init+0x30>
 8004b0a:	e146      	b.n	8004d9a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2203      	movs	r2, #3
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d005      	beq.n	8004b24 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d130      	bne.n	8004b86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	2203      	movs	r2, #3
 8004b30:	409a      	lsls	r2, r3
 8004b32:	0013      	movs	r3, r2
 8004b34:	43da      	mvns	r2, r3
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	409a      	lsls	r2, r3
 8004b46:	0013      	movs	r3, r2
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	0013      	movs	r3, r2
 8004b62:	43da      	mvns	r2, r3
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4013      	ands	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	091b      	lsrs	r3, r3, #4
 8004b70:	2201      	movs	r2, #1
 8004b72:	401a      	ands	r2, r3
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	409a      	lsls	r2, r3
 8004b78:	0013      	movs	r3, r2
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d017      	beq.n	8004bc2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	2203      	movs	r2, #3
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	0013      	movs	r3, r2
 8004ba2:	43da      	mvns	r2, r3
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	409a      	lsls	r2, r3
 8004bb4:	0013      	movs	r3, r2
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	4013      	ands	r3, r2
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d123      	bne.n	8004c16 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	08da      	lsrs	r2, r3, #3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3208      	adds	r2, #8
 8004bd6:	0092      	lsls	r2, r2, #2
 8004bd8:	58d3      	ldr	r3, [r2, r3]
 8004bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2207      	movs	r2, #7
 8004be0:	4013      	ands	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	220f      	movs	r2, #15
 8004be6:	409a      	lsls	r2, r3
 8004be8:	0013      	movs	r3, r2
 8004bea:	43da      	mvns	r2, r3
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2107      	movs	r1, #7
 8004bfa:	400b      	ands	r3, r1
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	409a      	lsls	r2, r3
 8004c00:	0013      	movs	r3, r2
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	08da      	lsrs	r2, r3, #3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3208      	adds	r2, #8
 8004c10:	0092      	lsls	r2, r2, #2
 8004c12:	6939      	ldr	r1, [r7, #16]
 8004c14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	2203      	movs	r2, #3
 8004c22:	409a      	lsls	r2, r3
 8004c24:	0013      	movs	r3, r2
 8004c26:	43da      	mvns	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2203      	movs	r2, #3
 8004c34:	401a      	ands	r2, r3
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	0013      	movs	r3, r2
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	23c0      	movs	r3, #192	; 0xc0
 8004c50:	029b      	lsls	r3, r3, #10
 8004c52:	4013      	ands	r3, r2
 8004c54:	d100      	bne.n	8004c58 <HAL_GPIO_Init+0x17c>
 8004c56:	e0a0      	b.n	8004d9a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c58:	4b57      	ldr	r3, [pc, #348]	; (8004db8 <HAL_GPIO_Init+0x2dc>)
 8004c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c5c:	4b56      	ldr	r3, [pc, #344]	; (8004db8 <HAL_GPIO_Init+0x2dc>)
 8004c5e:	2101      	movs	r1, #1
 8004c60:	430a      	orrs	r2, r1
 8004c62:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c64:	4a55      	ldr	r2, [pc, #340]	; (8004dbc <HAL_GPIO_Init+0x2e0>)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	089b      	lsrs	r3, r3, #2
 8004c6a:	3302      	adds	r3, #2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	589b      	ldr	r3, [r3, r2]
 8004c70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2203      	movs	r2, #3
 8004c76:	4013      	ands	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	220f      	movs	r2, #15
 8004c7c:	409a      	lsls	r2, r3
 8004c7e:	0013      	movs	r3, r2
 8004c80:	43da      	mvns	r2, r3
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	4013      	ands	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	23a0      	movs	r3, #160	; 0xa0
 8004c8c:	05db      	lsls	r3, r3, #23
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d01f      	beq.n	8004cd2 <HAL_GPIO_Init+0x1f6>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a4a      	ldr	r2, [pc, #296]	; (8004dc0 <HAL_GPIO_Init+0x2e4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d019      	beq.n	8004cce <HAL_GPIO_Init+0x1f2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a49      	ldr	r2, [pc, #292]	; (8004dc4 <HAL_GPIO_Init+0x2e8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d013      	beq.n	8004cca <HAL_GPIO_Init+0x1ee>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a48      	ldr	r2, [pc, #288]	; (8004dc8 <HAL_GPIO_Init+0x2ec>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00d      	beq.n	8004cc6 <HAL_GPIO_Init+0x1ea>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a47      	ldr	r2, [pc, #284]	; (8004dcc <HAL_GPIO_Init+0x2f0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d007      	beq.n	8004cc2 <HAL_GPIO_Init+0x1e6>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a46      	ldr	r2, [pc, #280]	; (8004dd0 <HAL_GPIO_Init+0x2f4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d101      	bne.n	8004cbe <HAL_GPIO_Init+0x1e2>
 8004cba:	2305      	movs	r3, #5
 8004cbc:	e00a      	b.n	8004cd4 <HAL_GPIO_Init+0x1f8>
 8004cbe:	2306      	movs	r3, #6
 8004cc0:	e008      	b.n	8004cd4 <HAL_GPIO_Init+0x1f8>
 8004cc2:	2304      	movs	r3, #4
 8004cc4:	e006      	b.n	8004cd4 <HAL_GPIO_Init+0x1f8>
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e004      	b.n	8004cd4 <HAL_GPIO_Init+0x1f8>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e002      	b.n	8004cd4 <HAL_GPIO_Init+0x1f8>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <HAL_GPIO_Init+0x1f8>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	2103      	movs	r1, #3
 8004cd8:	400a      	ands	r2, r1
 8004cda:	0092      	lsls	r2, r2, #2
 8004cdc:	4093      	lsls	r3, r2
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ce4:	4935      	ldr	r1, [pc, #212]	; (8004dbc <HAL_GPIO_Init+0x2e0>)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	089b      	lsrs	r3, r3, #2
 8004cea:	3302      	adds	r3, #2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cf2:	4b38      	ldr	r3, [pc, #224]	; (8004dd4 <HAL_GPIO_Init+0x2f8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	43da      	mvns	r2, r3
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	2380      	movs	r3, #128	; 0x80
 8004d08:	025b      	lsls	r3, r3, #9
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d003      	beq.n	8004d16 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004d16:	4b2f      	ldr	r3, [pc, #188]	; (8004dd4 <HAL_GPIO_Init+0x2f8>)
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004d1c:	4b2d      	ldr	r3, [pc, #180]	; (8004dd4 <HAL_GPIO_Init+0x2f8>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	43da      	mvns	r2, r3
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	2380      	movs	r3, #128	; 0x80
 8004d32:	029b      	lsls	r3, r3, #10
 8004d34:	4013      	ands	r3, r2
 8004d36:	d003      	beq.n	8004d40 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004d40:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <HAL_GPIO_Init+0x2f8>)
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d46:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <HAL_GPIO_Init+0x2f8>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	43da      	mvns	r2, r3
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4013      	ands	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	2380      	movs	r3, #128	; 0x80
 8004d5c:	035b      	lsls	r3, r3, #13
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d003      	beq.n	8004d6a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004d6a:	4b1a      	ldr	r3, [pc, #104]	; (8004dd4 <HAL_GPIO_Init+0x2f8>)
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004d70:	4b18      	ldr	r3, [pc, #96]	; (8004dd4 <HAL_GPIO_Init+0x2f8>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	43da      	mvns	r2, r3
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	039b      	lsls	r3, r3, #14
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004d94:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <HAL_GPIO_Init+0x2f8>)
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	40da      	lsrs	r2, r3
 8004da8:	1e13      	subs	r3, r2, #0
 8004daa:	d000      	beq.n	8004dae <HAL_GPIO_Init+0x2d2>
 8004dac:	e6a2      	b.n	8004af4 <HAL_GPIO_Init+0x18>
  }
}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	46c0      	nop			; (mov r8, r8)
 8004db2:	46bd      	mov	sp, r7
 8004db4:	b006      	add	sp, #24
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40010000 	.word	0x40010000
 8004dc0:	50000400 	.word	0x50000400
 8004dc4:	50000800 	.word	0x50000800
 8004dc8:	50000c00 	.word	0x50000c00
 8004dcc:	50001000 	.word	0x50001000
 8004dd0:	50001c00 	.word	0x50001c00
 8004dd4:	40010400 	.word	0x40010400

08004dd8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	000a      	movs	r2, r1
 8004de2:	1cbb      	adds	r3, r7, #2
 8004de4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	1cba      	adds	r2, r7, #2
 8004dec:	8812      	ldrh	r2, [r2, #0]
 8004dee:	4013      	ands	r3, r2
 8004df0:	d004      	beq.n	8004dfc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004df2:	230f      	movs	r3, #15
 8004df4:	18fb      	adds	r3, r7, r3
 8004df6:	2201      	movs	r2, #1
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	e003      	b.n	8004e04 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dfc:	230f      	movs	r3, #15
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004e04:	230f      	movs	r3, #15
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	781b      	ldrb	r3, [r3, #0]
}
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b004      	add	sp, #16
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	0008      	movs	r0, r1
 8004e1c:	0011      	movs	r1, r2
 8004e1e:	1cbb      	adds	r3, r7, #2
 8004e20:	1c02      	adds	r2, r0, #0
 8004e22:	801a      	strh	r2, [r3, #0]
 8004e24:	1c7b      	adds	r3, r7, #1
 8004e26:	1c0a      	adds	r2, r1, #0
 8004e28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e2a:	1c7b      	adds	r3, r7, #1
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d004      	beq.n	8004e3c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e32:	1cbb      	adds	r3, r7, #2
 8004e34:	881a      	ldrh	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004e3a:	e003      	b.n	8004e44 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004e3c:	1cbb      	adds	r3, r7, #2
 8004e3e:	881a      	ldrh	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e44:	46c0      	nop			; (mov r8, r8)
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e082      	b.n	8004f64 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2241      	movs	r2, #65	; 0x41
 8004e62:	5c9b      	ldrb	r3, [r3, r2]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d107      	bne.n	8004e7a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2240      	movs	r2, #64	; 0x40
 8004e6e:	2100      	movs	r1, #0
 8004e70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	0018      	movs	r0, r3
 8004e76:	f7ff f8cb 	bl	8004010 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2241      	movs	r2, #65	; 0x41
 8004e7e:	2124      	movs	r1, #36	; 0x24
 8004e80:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	438a      	bics	r2, r1
 8004e90:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4934      	ldr	r1, [pc, #208]	; (8004f6c <HAL_I2C_Init+0x120>)
 8004e9c:	400a      	ands	r2, r1
 8004e9e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4931      	ldr	r1, [pc, #196]	; (8004f70 <HAL_I2C_Init+0x124>)
 8004eac:	400a      	ands	r2, r1
 8004eae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d108      	bne.n	8004eca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2180      	movs	r1, #128	; 0x80
 8004ec2:	0209      	lsls	r1, r1, #8
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	609a      	str	r2, [r3, #8]
 8004ec8:	e007      	b.n	8004eda <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2184      	movs	r1, #132	; 0x84
 8004ed4:	0209      	lsls	r1, r1, #8
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d104      	bne.n	8004eec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2280      	movs	r2, #128	; 0x80
 8004ee8:	0112      	lsls	r2, r2, #4
 8004eea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	491f      	ldr	r1, [pc, #124]	; (8004f74 <HAL_I2C_Init+0x128>)
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	491a      	ldr	r1, [pc, #104]	; (8004f70 <HAL_I2C_Init+0x124>)
 8004f08:	400a      	ands	r2, r1
 8004f0a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	431a      	orrs	r2, r3
 8004f16:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69d9      	ldr	r1, [r3, #28]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1a      	ldr	r2, [r3, #32]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2101      	movs	r1, #1
 8004f42:	430a      	orrs	r2, r1
 8004f44:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2241      	movs	r2, #65	; 0x41
 8004f50:	2120      	movs	r1, #32
 8004f52:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2242      	movs	r2, #66	; 0x42
 8004f5e:	2100      	movs	r1, #0
 8004f60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	0018      	movs	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b002      	add	sp, #8
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	f0ffffff 	.word	0xf0ffffff
 8004f70:	ffff7fff 	.word	0xffff7fff
 8004f74:	02008000 	.word	0x02008000

08004f78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f78:	b590      	push	{r4, r7, lr}
 8004f7a:	b089      	sub	sp, #36	; 0x24
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	000c      	movs	r4, r1
 8004f82:	0010      	movs	r0, r2
 8004f84:	0019      	movs	r1, r3
 8004f86:	230a      	movs	r3, #10
 8004f88:	18fb      	adds	r3, r7, r3
 8004f8a:	1c22      	adds	r2, r4, #0
 8004f8c:	801a      	strh	r2, [r3, #0]
 8004f8e:	2308      	movs	r3, #8
 8004f90:	18fb      	adds	r3, r7, r3
 8004f92:	1c02      	adds	r2, r0, #0
 8004f94:	801a      	strh	r2, [r3, #0]
 8004f96:	1dbb      	adds	r3, r7, #6
 8004f98:	1c0a      	adds	r2, r1, #0
 8004f9a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2241      	movs	r2, #65	; 0x41
 8004fa0:	5c9b      	ldrb	r3, [r3, r2]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d000      	beq.n	8004faa <HAL_I2C_Mem_Write+0x32>
 8004fa8:	e10c      	b.n	80051c4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <HAL_I2C_Mem_Write+0x42>
 8004fb0:	232c      	movs	r3, #44	; 0x2c
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d105      	bne.n	8004fc6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2280      	movs	r2, #128	; 0x80
 8004fbe:	0092      	lsls	r2, r2, #2
 8004fc0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e0ff      	b.n	80051c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2240      	movs	r2, #64	; 0x40
 8004fca:	5c9b      	ldrb	r3, [r3, r2]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_I2C_Mem_Write+0x5c>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e0f8      	b.n	80051c6 <HAL_I2C_Mem_Write+0x24e>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2240      	movs	r2, #64	; 0x40
 8004fd8:	2101      	movs	r1, #1
 8004fda:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fdc:	f7ff f91e 	bl	800421c <HAL_GetTick>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fe4:	2380      	movs	r3, #128	; 0x80
 8004fe6:	0219      	lsls	r1, r3, #8
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	2319      	movs	r3, #25
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f000 fb0b 	bl	800560c <I2C_WaitOnFlagUntilTimeout>
 8004ff6:	1e03      	subs	r3, r0, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e0e3      	b.n	80051c6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2241      	movs	r2, #65	; 0x41
 8005002:	2121      	movs	r1, #33	; 0x21
 8005004:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2242      	movs	r2, #66	; 0x42
 800500a:	2140      	movs	r1, #64	; 0x40
 800500c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	222c      	movs	r2, #44	; 0x2c
 800501e:	18ba      	adds	r2, r7, r2
 8005020:	8812      	ldrh	r2, [r2, #0]
 8005022:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800502a:	1dbb      	adds	r3, r7, #6
 800502c:	881c      	ldrh	r4, [r3, #0]
 800502e:	2308      	movs	r3, #8
 8005030:	18fb      	adds	r3, r7, r3
 8005032:	881a      	ldrh	r2, [r3, #0]
 8005034:	230a      	movs	r3, #10
 8005036:	18fb      	adds	r3, r7, r3
 8005038:	8819      	ldrh	r1, [r3, #0]
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	9301      	str	r3, [sp, #4]
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	0023      	movs	r3, r4
 8005046:	f000 f9f9 	bl	800543c <I2C_RequestMemoryWrite>
 800504a:	1e03      	subs	r3, r0, #0
 800504c:	d005      	beq.n	800505a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2240      	movs	r2, #64	; 0x40
 8005052:	2100      	movs	r1, #0
 8005054:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e0b5      	b.n	80051c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505e:	b29b      	uxth	r3, r3
 8005060:	2bff      	cmp	r3, #255	; 0xff
 8005062:	d911      	bls.n	8005088 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	22ff      	movs	r2, #255	; 0xff
 8005068:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506e:	b2da      	uxtb	r2, r3
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	045c      	lsls	r4, r3, #17
 8005074:	230a      	movs	r3, #10
 8005076:	18fb      	adds	r3, r7, r3
 8005078:	8819      	ldrh	r1, [r3, #0]
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	2300      	movs	r3, #0
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	0023      	movs	r3, r4
 8005082:	f000 fbf7 	bl	8005874 <I2C_TransferConfig>
 8005086:	e012      	b.n	80050ae <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005096:	b2da      	uxtb	r2, r3
 8005098:	2380      	movs	r3, #128	; 0x80
 800509a:	049c      	lsls	r4, r3, #18
 800509c:	230a      	movs	r3, #10
 800509e:	18fb      	adds	r3, r7, r3
 80050a0:	8819      	ldrh	r1, [r3, #0]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	2300      	movs	r3, #0
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	0023      	movs	r3, r4
 80050aa:	f000 fbe3 	bl	8005874 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	0018      	movs	r0, r3
 80050b6:	f000 fae8 	bl	800568a <I2C_WaitOnTXISFlagUntilTimeout>
 80050ba:	1e03      	subs	r3, r0, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e081      	b.n	80051c6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	781a      	ldrb	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d03a      	beq.n	8005172 <HAL_I2C_Mem_Write+0x1fa>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005100:	2b00      	cmp	r3, #0
 8005102:	d136      	bne.n	8005172 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	0013      	movs	r3, r2
 800510e:	2200      	movs	r2, #0
 8005110:	2180      	movs	r1, #128	; 0x80
 8005112:	f000 fa7b 	bl	800560c <I2C_WaitOnFlagUntilTimeout>
 8005116:	1e03      	subs	r3, r0, #0
 8005118:	d001      	beq.n	800511e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e053      	b.n	80051c6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005122:	b29b      	uxth	r3, r3
 8005124:	2bff      	cmp	r3, #255	; 0xff
 8005126:	d911      	bls.n	800514c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	22ff      	movs	r2, #255	; 0xff
 800512c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005132:	b2da      	uxtb	r2, r3
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	045c      	lsls	r4, r3, #17
 8005138:	230a      	movs	r3, #10
 800513a:	18fb      	adds	r3, r7, r3
 800513c:	8819      	ldrh	r1, [r3, #0]
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	2300      	movs	r3, #0
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	0023      	movs	r3, r4
 8005146:	f000 fb95 	bl	8005874 <I2C_TransferConfig>
 800514a:	e012      	b.n	8005172 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515a:	b2da      	uxtb	r2, r3
 800515c:	2380      	movs	r3, #128	; 0x80
 800515e:	049c      	lsls	r4, r3, #18
 8005160:	230a      	movs	r3, #10
 8005162:	18fb      	adds	r3, r7, r3
 8005164:	8819      	ldrh	r1, [r3, #0]
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	2300      	movs	r3, #0
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	0023      	movs	r3, r4
 800516e:	f000 fb81 	bl	8005874 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d198      	bne.n	80050ae <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	0018      	movs	r0, r3
 8005184:	f000 fac0 	bl	8005708 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005188:	1e03      	subs	r3, r0, #0
 800518a:	d001      	beq.n	8005190 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e01a      	b.n	80051c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2220      	movs	r2, #32
 8005196:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	490b      	ldr	r1, [pc, #44]	; (80051d0 <HAL_I2C_Mem_Write+0x258>)
 80051a4:	400a      	ands	r2, r1
 80051a6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2241      	movs	r2, #65	; 0x41
 80051ac:	2120      	movs	r1, #32
 80051ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2242      	movs	r2, #66	; 0x42
 80051b4:	2100      	movs	r1, #0
 80051b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2240      	movs	r2, #64	; 0x40
 80051bc:	2100      	movs	r1, #0
 80051be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e000      	b.n	80051c6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80051c4:	2302      	movs	r3, #2
  }
}
 80051c6:	0018      	movs	r0, r3
 80051c8:	46bd      	mov	sp, r7
 80051ca:	b007      	add	sp, #28
 80051cc:	bd90      	pop	{r4, r7, pc}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	fe00e800 	.word	0xfe00e800

080051d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b089      	sub	sp, #36	; 0x24
 80051d8:	af02      	add	r7, sp, #8
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	000c      	movs	r4, r1
 80051de:	0010      	movs	r0, r2
 80051e0:	0019      	movs	r1, r3
 80051e2:	230a      	movs	r3, #10
 80051e4:	18fb      	adds	r3, r7, r3
 80051e6:	1c22      	adds	r2, r4, #0
 80051e8:	801a      	strh	r2, [r3, #0]
 80051ea:	2308      	movs	r3, #8
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	1c02      	adds	r2, r0, #0
 80051f0:	801a      	strh	r2, [r3, #0]
 80051f2:	1dbb      	adds	r3, r7, #6
 80051f4:	1c0a      	adds	r2, r1, #0
 80051f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2241      	movs	r2, #65	; 0x41
 80051fc:	5c9b      	ldrb	r3, [r3, r2]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b20      	cmp	r3, #32
 8005202:	d000      	beq.n	8005206 <HAL_I2C_Mem_Read+0x32>
 8005204:	e110      	b.n	8005428 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <HAL_I2C_Mem_Read+0x42>
 800520c:	232c      	movs	r3, #44	; 0x2c
 800520e:	18fb      	adds	r3, r7, r3
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d105      	bne.n	8005222 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2280      	movs	r2, #128	; 0x80
 800521a:	0092      	lsls	r2, r2, #2
 800521c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e103      	b.n	800542a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2240      	movs	r2, #64	; 0x40
 8005226:	5c9b      	ldrb	r3, [r3, r2]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_I2C_Mem_Read+0x5c>
 800522c:	2302      	movs	r3, #2
 800522e:	e0fc      	b.n	800542a <HAL_I2C_Mem_Read+0x256>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2240      	movs	r2, #64	; 0x40
 8005234:	2101      	movs	r1, #1
 8005236:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005238:	f7fe fff0 	bl	800421c <HAL_GetTick>
 800523c:	0003      	movs	r3, r0
 800523e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	0219      	lsls	r1, r3, #8
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	2319      	movs	r3, #25
 800524c:	2201      	movs	r2, #1
 800524e:	f000 f9dd 	bl	800560c <I2C_WaitOnFlagUntilTimeout>
 8005252:	1e03      	subs	r3, r0, #0
 8005254:	d001      	beq.n	800525a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e0e7      	b.n	800542a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2241      	movs	r2, #65	; 0x41
 800525e:	2122      	movs	r1, #34	; 0x22
 8005260:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2242      	movs	r2, #66	; 0x42
 8005266:	2140      	movs	r1, #64	; 0x40
 8005268:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005274:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	222c      	movs	r2, #44	; 0x2c
 800527a:	18ba      	adds	r2, r7, r2
 800527c:	8812      	ldrh	r2, [r2, #0]
 800527e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005286:	1dbb      	adds	r3, r7, #6
 8005288:	881c      	ldrh	r4, [r3, #0]
 800528a:	2308      	movs	r3, #8
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	881a      	ldrh	r2, [r3, #0]
 8005290:	230a      	movs	r3, #10
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	8819      	ldrh	r1, [r3, #0]
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	0023      	movs	r3, r4
 80052a2:	f000 f92f 	bl	8005504 <I2C_RequestMemoryRead>
 80052a6:	1e03      	subs	r3, r0, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2240      	movs	r2, #64	; 0x40
 80052ae:	2100      	movs	r1, #0
 80052b0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e0b9      	b.n	800542a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2bff      	cmp	r3, #255	; 0xff
 80052be:	d911      	bls.n	80052e4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	22ff      	movs	r2, #255	; 0xff
 80052c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	045c      	lsls	r4, r3, #17
 80052d0:	230a      	movs	r3, #10
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	8819      	ldrh	r1, [r3, #0]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	4b56      	ldr	r3, [pc, #344]	; (8005434 <HAL_I2C_Mem_Read+0x260>)
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	0023      	movs	r3, r4
 80052de:	f000 fac9 	bl	8005874 <I2C_TransferConfig>
 80052e2:	e012      	b.n	800530a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	049c      	lsls	r4, r3, #18
 80052f8:	230a      	movs	r3, #10
 80052fa:	18fb      	adds	r3, r7, r3
 80052fc:	8819      	ldrh	r1, [r3, #0]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	4b4c      	ldr	r3, [pc, #304]	; (8005434 <HAL_I2C_Mem_Read+0x260>)
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	0023      	movs	r3, r4
 8005306:	f000 fab5 	bl	8005874 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800530a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	0013      	movs	r3, r2
 8005314:	2200      	movs	r2, #0
 8005316:	2104      	movs	r1, #4
 8005318:	f000 f978 	bl	800560c <I2C_WaitOnFlagUntilTimeout>
 800531c:	1e03      	subs	r3, r0, #0
 800531e:	d001      	beq.n	8005324 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e082      	b.n	800542a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535a:	b29b      	uxth	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d03a      	beq.n	80053d6 <HAL_I2C_Mem_Read+0x202>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005364:	2b00      	cmp	r3, #0
 8005366:	d136      	bne.n	80053d6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	0013      	movs	r3, r2
 8005372:	2200      	movs	r2, #0
 8005374:	2180      	movs	r1, #128	; 0x80
 8005376:	f000 f949 	bl	800560c <I2C_WaitOnFlagUntilTimeout>
 800537a:	1e03      	subs	r3, r0, #0
 800537c:	d001      	beq.n	8005382 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e053      	b.n	800542a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005386:	b29b      	uxth	r3, r3
 8005388:	2bff      	cmp	r3, #255	; 0xff
 800538a:	d911      	bls.n	80053b0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	22ff      	movs	r2, #255	; 0xff
 8005390:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005396:	b2da      	uxtb	r2, r3
 8005398:	2380      	movs	r3, #128	; 0x80
 800539a:	045c      	lsls	r4, r3, #17
 800539c:	230a      	movs	r3, #10
 800539e:	18fb      	adds	r3, r7, r3
 80053a0:	8819      	ldrh	r1, [r3, #0]
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	2300      	movs	r3, #0
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	0023      	movs	r3, r4
 80053aa:	f000 fa63 	bl	8005874 <I2C_TransferConfig>
 80053ae:	e012      	b.n	80053d6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	2380      	movs	r3, #128	; 0x80
 80053c2:	049c      	lsls	r4, r3, #18
 80053c4:	230a      	movs	r3, #10
 80053c6:	18fb      	adds	r3, r7, r3
 80053c8:	8819      	ldrh	r1, [r3, #0]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	2300      	movs	r3, #0
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	0023      	movs	r3, r4
 80053d2:	f000 fa4f 	bl	8005874 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d194      	bne.n	800530a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	0018      	movs	r0, r3
 80053e8:	f000 f98e 	bl	8005708 <I2C_WaitOnSTOPFlagUntilTimeout>
 80053ec:	1e03      	subs	r3, r0, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e01a      	b.n	800542a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2220      	movs	r2, #32
 80053fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	490c      	ldr	r1, [pc, #48]	; (8005438 <HAL_I2C_Mem_Read+0x264>)
 8005408:	400a      	ands	r2, r1
 800540a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2241      	movs	r2, #65	; 0x41
 8005410:	2120      	movs	r1, #32
 8005412:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2242      	movs	r2, #66	; 0x42
 8005418:	2100      	movs	r1, #0
 800541a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2240      	movs	r2, #64	; 0x40
 8005420:	2100      	movs	r1, #0
 8005422:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	e000      	b.n	800542a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005428:	2302      	movs	r3, #2
  }
}
 800542a:	0018      	movs	r0, r3
 800542c:	46bd      	mov	sp, r7
 800542e:	b007      	add	sp, #28
 8005430:	bd90      	pop	{r4, r7, pc}
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	80002400 	.word	0x80002400
 8005438:	fe00e800 	.word	0xfe00e800

0800543c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800543c:	b5b0      	push	{r4, r5, r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	000c      	movs	r4, r1
 8005446:	0010      	movs	r0, r2
 8005448:	0019      	movs	r1, r3
 800544a:	250a      	movs	r5, #10
 800544c:	197b      	adds	r3, r7, r5
 800544e:	1c22      	adds	r2, r4, #0
 8005450:	801a      	strh	r2, [r3, #0]
 8005452:	2308      	movs	r3, #8
 8005454:	18fb      	adds	r3, r7, r3
 8005456:	1c02      	adds	r2, r0, #0
 8005458:	801a      	strh	r2, [r3, #0]
 800545a:	1dbb      	adds	r3, r7, #6
 800545c:	1c0a      	adds	r2, r1, #0
 800545e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005460:	1dbb      	adds	r3, r7, #6
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b2da      	uxtb	r2, r3
 8005466:	2380      	movs	r3, #128	; 0x80
 8005468:	045c      	lsls	r4, r3, #17
 800546a:	197b      	adds	r3, r7, r5
 800546c:	8819      	ldrh	r1, [r3, #0]
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	4b23      	ldr	r3, [pc, #140]	; (8005500 <I2C_RequestMemoryWrite+0xc4>)
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	0023      	movs	r3, r4
 8005476:	f000 f9fd 	bl	8005874 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800547a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547c:	6a39      	ldr	r1, [r7, #32]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	0018      	movs	r0, r3
 8005482:	f000 f902 	bl	800568a <I2C_WaitOnTXISFlagUntilTimeout>
 8005486:	1e03      	subs	r3, r0, #0
 8005488:	d001      	beq.n	800548e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e033      	b.n	80054f6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800548e:	1dbb      	adds	r3, r7, #6
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d107      	bne.n	80054a6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005496:	2308      	movs	r3, #8
 8005498:	18fb      	adds	r3, r7, r3
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b2da      	uxtb	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28
 80054a4:	e019      	b.n	80054da <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054a6:	2308      	movs	r3, #8
 80054a8:	18fb      	adds	r3, r7, r3
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	0a1b      	lsrs	r3, r3, #8
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ba:	6a39      	ldr	r1, [r7, #32]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	0018      	movs	r0, r3
 80054c0:	f000 f8e3 	bl	800568a <I2C_WaitOnTXISFlagUntilTimeout>
 80054c4:	1e03      	subs	r3, r0, #0
 80054c6:	d001      	beq.n	80054cc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e014      	b.n	80054f6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054cc:	2308      	movs	r3, #8
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80054da:	6a3a      	ldr	r2, [r7, #32]
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	0013      	movs	r3, r2
 80054e4:	2200      	movs	r2, #0
 80054e6:	2180      	movs	r1, #128	; 0x80
 80054e8:	f000 f890 	bl	800560c <I2C_WaitOnFlagUntilTimeout>
 80054ec:	1e03      	subs	r3, r0, #0
 80054ee:	d001      	beq.n	80054f4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	0018      	movs	r0, r3
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b004      	add	sp, #16
 80054fc:	bdb0      	pop	{r4, r5, r7, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	80002000 	.word	0x80002000

08005504 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005504:	b5b0      	push	{r4, r5, r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	000c      	movs	r4, r1
 800550e:	0010      	movs	r0, r2
 8005510:	0019      	movs	r1, r3
 8005512:	250a      	movs	r5, #10
 8005514:	197b      	adds	r3, r7, r5
 8005516:	1c22      	adds	r2, r4, #0
 8005518:	801a      	strh	r2, [r3, #0]
 800551a:	2308      	movs	r3, #8
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	1c02      	adds	r2, r0, #0
 8005520:	801a      	strh	r2, [r3, #0]
 8005522:	1dbb      	adds	r3, r7, #6
 8005524:	1c0a      	adds	r2, r1, #0
 8005526:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005528:	1dbb      	adds	r3, r7, #6
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b2da      	uxtb	r2, r3
 800552e:	197b      	adds	r3, r7, r5
 8005530:	8819      	ldrh	r1, [r3, #0]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	4b23      	ldr	r3, [pc, #140]	; (80055c4 <I2C_RequestMemoryRead+0xc0>)
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	2300      	movs	r3, #0
 800553a:	f000 f99b 	bl	8005874 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800553e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005540:	6a39      	ldr	r1, [r7, #32]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	0018      	movs	r0, r3
 8005546:	f000 f8a0 	bl	800568a <I2C_WaitOnTXISFlagUntilTimeout>
 800554a:	1e03      	subs	r3, r0, #0
 800554c:	d001      	beq.n	8005552 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e033      	b.n	80055ba <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005552:	1dbb      	adds	r3, r7, #6
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d107      	bne.n	800556a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800555a:	2308      	movs	r3, #8
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b2da      	uxtb	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	629a      	str	r2, [r3, #40]	; 0x28
 8005568:	e019      	b.n	800559e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800556a:	2308      	movs	r3, #8
 800556c:	18fb      	adds	r3, r7, r3
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	0a1b      	lsrs	r3, r3, #8
 8005572:	b29b      	uxth	r3, r3
 8005574:	b2da      	uxtb	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800557c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557e:	6a39      	ldr	r1, [r7, #32]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	0018      	movs	r0, r3
 8005584:	f000 f881 	bl	800568a <I2C_WaitOnTXISFlagUntilTimeout>
 8005588:	1e03      	subs	r3, r0, #0
 800558a:	d001      	beq.n	8005590 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e014      	b.n	80055ba <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005590:	2308      	movs	r3, #8
 8005592:	18fb      	adds	r3, r7, r3
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	b2da      	uxtb	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800559e:	6a3a      	ldr	r2, [r7, #32]
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	0013      	movs	r3, r2
 80055a8:	2200      	movs	r2, #0
 80055aa:	2140      	movs	r1, #64	; 0x40
 80055ac:	f000 f82e 	bl	800560c <I2C_WaitOnFlagUntilTimeout>
 80055b0:	1e03      	subs	r3, r0, #0
 80055b2:	d001      	beq.n	80055b8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	0018      	movs	r0, r3
 80055bc:	46bd      	mov	sp, r7
 80055be:	b004      	add	sp, #16
 80055c0:	bdb0      	pop	{r4, r5, r7, pc}
 80055c2:	46c0      	nop			; (mov r8, r8)
 80055c4:	80002000 	.word	0x80002000

080055c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	2202      	movs	r2, #2
 80055d8:	4013      	ands	r3, r2
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d103      	bne.n	80055e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2200      	movs	r2, #0
 80055e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	2201      	movs	r2, #1
 80055ee:	4013      	ands	r3, r2
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d007      	beq.n	8005604 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2101      	movs	r1, #1
 8005600:	430a      	orrs	r2, r1
 8005602:	619a      	str	r2, [r3, #24]
  }
}
 8005604:	46c0      	nop			; (mov r8, r8)
 8005606:	46bd      	mov	sp, r7
 8005608:	b002      	add	sp, #8
 800560a:	bd80      	pop	{r7, pc}

0800560c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	1dfb      	adds	r3, r7, #7
 800561a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800561c:	e021      	b.n	8005662 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	3301      	adds	r3, #1
 8005622:	d01e      	beq.n	8005662 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005624:	f7fe fdfa 	bl	800421c <HAL_GetTick>
 8005628:	0002      	movs	r2, r0
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	429a      	cmp	r2, r3
 8005632:	d302      	bcc.n	800563a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d113      	bne.n	8005662 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563e:	2220      	movs	r2, #32
 8005640:	431a      	orrs	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2241      	movs	r2, #65	; 0x41
 800564a:	2120      	movs	r1, #32
 800564c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2242      	movs	r2, #66	; 0x42
 8005652:	2100      	movs	r1, #0
 8005654:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2240      	movs	r2, #64	; 0x40
 800565a:	2100      	movs	r1, #0
 800565c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e00f      	b.n	8005682 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	4013      	ands	r3, r2
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	425a      	negs	r2, r3
 8005672:	4153      	adcs	r3, r2
 8005674:	b2db      	uxtb	r3, r3
 8005676:	001a      	movs	r2, r3
 8005678:	1dfb      	adds	r3, r7, #7
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d0ce      	beq.n	800561e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	0018      	movs	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	b004      	add	sp, #16
 8005688:	bd80      	pop	{r7, pc}

0800568a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005696:	e02b      	b.n	80056f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	68b9      	ldr	r1, [r7, #8]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	0018      	movs	r0, r3
 80056a0:	f000 f86e 	bl	8005780 <I2C_IsAcknowledgeFailed>
 80056a4:	1e03      	subs	r3, r0, #0
 80056a6:	d001      	beq.n	80056ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e029      	b.n	8005700 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	3301      	adds	r3, #1
 80056b0:	d01e      	beq.n	80056f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b2:	f7fe fdb3 	bl	800421c <HAL_GetTick>
 80056b6:	0002      	movs	r2, r0
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d302      	bcc.n	80056c8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d113      	bne.n	80056f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056cc:	2220      	movs	r2, #32
 80056ce:	431a      	orrs	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2241      	movs	r2, #65	; 0x41
 80056d8:	2120      	movs	r1, #32
 80056da:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2242      	movs	r2, #66	; 0x42
 80056e0:	2100      	movs	r1, #0
 80056e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2240      	movs	r2, #64	; 0x40
 80056e8:	2100      	movs	r1, #0
 80056ea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e007      	b.n	8005700 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	2202      	movs	r2, #2
 80056f8:	4013      	ands	r3, r2
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d1cc      	bne.n	8005698 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	0018      	movs	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	b004      	add	sp, #16
 8005706:	bd80      	pop	{r7, pc}

08005708 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005714:	e028      	b.n	8005768 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	68b9      	ldr	r1, [r7, #8]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	0018      	movs	r0, r3
 800571e:	f000 f82f 	bl	8005780 <I2C_IsAcknowledgeFailed>
 8005722:	1e03      	subs	r3, r0, #0
 8005724:	d001      	beq.n	800572a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e026      	b.n	8005778 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572a:	f7fe fd77 	bl	800421c <HAL_GetTick>
 800572e:	0002      	movs	r2, r0
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	429a      	cmp	r2, r3
 8005738:	d302      	bcc.n	8005740 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d113      	bne.n	8005768 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005744:	2220      	movs	r2, #32
 8005746:	431a      	orrs	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2241      	movs	r2, #65	; 0x41
 8005750:	2120      	movs	r1, #32
 8005752:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2242      	movs	r2, #66	; 0x42
 8005758:	2100      	movs	r1, #0
 800575a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2240      	movs	r2, #64	; 0x40
 8005760:	2100      	movs	r1, #0
 8005762:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e007      	b.n	8005778 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	2220      	movs	r2, #32
 8005770:	4013      	ands	r3, r2
 8005772:	2b20      	cmp	r3, #32
 8005774:	d1cf      	bne.n	8005716 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	0018      	movs	r0, r3
 800577a:	46bd      	mov	sp, r7
 800577c:	b004      	add	sp, #16
 800577e:	bd80      	pop	{r7, pc}

08005780 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	2210      	movs	r2, #16
 8005794:	4013      	ands	r3, r2
 8005796:	2b10      	cmp	r3, #16
 8005798:	d164      	bne.n	8005864 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	2380      	movs	r3, #128	; 0x80
 80057a2:	049b      	lsls	r3, r3, #18
 80057a4:	401a      	ands	r2, r3
 80057a6:	2380      	movs	r3, #128	; 0x80
 80057a8:	049b      	lsls	r3, r3, #18
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d02b      	beq.n	8005806 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2180      	movs	r1, #128	; 0x80
 80057ba:	01c9      	lsls	r1, r1, #7
 80057bc:	430a      	orrs	r2, r1
 80057be:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057c0:	e021      	b.n	8005806 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	3301      	adds	r3, #1
 80057c6:	d01e      	beq.n	8005806 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c8:	f7fe fd28 	bl	800421c <HAL_GetTick>
 80057cc:	0002      	movs	r2, r0
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d302      	bcc.n	80057de <I2C_IsAcknowledgeFailed+0x5e>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d113      	bne.n	8005806 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e2:	2220      	movs	r2, #32
 80057e4:	431a      	orrs	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2241      	movs	r2, #65	; 0x41
 80057ee:	2120      	movs	r1, #32
 80057f0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2242      	movs	r2, #66	; 0x42
 80057f6:	2100      	movs	r1, #0
 80057f8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2240      	movs	r2, #64	; 0x40
 80057fe:	2100      	movs	r1, #0
 8005800:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e02f      	b.n	8005866 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2220      	movs	r2, #32
 800580e:	4013      	ands	r3, r2
 8005810:	2b20      	cmp	r3, #32
 8005812:	d1d6      	bne.n	80057c2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2210      	movs	r2, #16
 800581a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2220      	movs	r2, #32
 8005822:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	0018      	movs	r0, r3
 8005828:	f7ff fece 	bl	80055c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	490e      	ldr	r1, [pc, #56]	; (8005870 <I2C_IsAcknowledgeFailed+0xf0>)
 8005838:	400a      	ands	r2, r1
 800583a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005840:	2204      	movs	r2, #4
 8005842:	431a      	orrs	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2241      	movs	r2, #65	; 0x41
 800584c:	2120      	movs	r1, #32
 800584e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2242      	movs	r2, #66	; 0x42
 8005854:	2100      	movs	r1, #0
 8005856:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2240      	movs	r2, #64	; 0x40
 800585c:	2100      	movs	r1, #0
 800585e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	0018      	movs	r0, r3
 8005868:	46bd      	mov	sp, r7
 800586a:	b004      	add	sp, #16
 800586c:	bd80      	pop	{r7, pc}
 800586e:	46c0      	nop			; (mov r8, r8)
 8005870:	fe00e800 	.word	0xfe00e800

08005874 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005874:	b590      	push	{r4, r7, lr}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	0008      	movs	r0, r1
 800587e:	0011      	movs	r1, r2
 8005880:	607b      	str	r3, [r7, #4]
 8005882:	240a      	movs	r4, #10
 8005884:	193b      	adds	r3, r7, r4
 8005886:	1c02      	adds	r2, r0, #0
 8005888:	801a      	strh	r2, [r3, #0]
 800588a:	2009      	movs	r0, #9
 800588c:	183b      	adds	r3, r7, r0
 800588e:	1c0a      	adds	r2, r1, #0
 8005890:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	6a3a      	ldr	r2, [r7, #32]
 800589a:	0d51      	lsrs	r1, r2, #21
 800589c:	2280      	movs	r2, #128	; 0x80
 800589e:	00d2      	lsls	r2, r2, #3
 80058a0:	400a      	ands	r2, r1
 80058a2:	490e      	ldr	r1, [pc, #56]	; (80058dc <I2C_TransferConfig+0x68>)
 80058a4:	430a      	orrs	r2, r1
 80058a6:	43d2      	mvns	r2, r2
 80058a8:	401a      	ands	r2, r3
 80058aa:	0011      	movs	r1, r2
 80058ac:	193b      	adds	r3, r7, r4
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	059b      	lsls	r3, r3, #22
 80058b2:	0d9a      	lsrs	r2, r3, #22
 80058b4:	183b      	adds	r3, r7, r0
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	0418      	lsls	r0, r3, #16
 80058ba:	23ff      	movs	r3, #255	; 0xff
 80058bc:	041b      	lsls	r3, r3, #16
 80058be:	4003      	ands	r3, r0
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	431a      	orrs	r2, r3
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	431a      	orrs	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	46bd      	mov	sp, r7
 80058d6:	b005      	add	sp, #20
 80058d8:	bd90      	pop	{r4, r7, pc}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	03ff63ff 	.word	0x03ff63ff

080058e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2241      	movs	r2, #65	; 0x41
 80058ee:	5c9b      	ldrb	r3, [r3, r2]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d138      	bne.n	8005968 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2240      	movs	r2, #64	; 0x40
 80058fa:	5c9b      	ldrb	r3, [r3, r2]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005900:	2302      	movs	r3, #2
 8005902:	e032      	b.n	800596a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2240      	movs	r2, #64	; 0x40
 8005908:	2101      	movs	r1, #1
 800590a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2241      	movs	r2, #65	; 0x41
 8005910:	2124      	movs	r1, #36	; 0x24
 8005912:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2101      	movs	r1, #1
 8005920:	438a      	bics	r2, r1
 8005922:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4911      	ldr	r1, [pc, #68]	; (8005974 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005930:	400a      	ands	r2, r1
 8005932:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6819      	ldr	r1, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2101      	movs	r1, #1
 8005950:	430a      	orrs	r2, r1
 8005952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2241      	movs	r2, #65	; 0x41
 8005958:	2120      	movs	r1, #32
 800595a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2240      	movs	r2, #64	; 0x40
 8005960:	2100      	movs	r1, #0
 8005962:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	e000      	b.n	800596a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005968:	2302      	movs	r3, #2
  }
}
 800596a:	0018      	movs	r0, r3
 800596c:	46bd      	mov	sp, r7
 800596e:	b002      	add	sp, #8
 8005970:	bd80      	pop	{r7, pc}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	ffffefff 	.word	0xffffefff

08005978 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2241      	movs	r2, #65	; 0x41
 8005986:	5c9b      	ldrb	r3, [r3, r2]
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b20      	cmp	r3, #32
 800598c:	d139      	bne.n	8005a02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2240      	movs	r2, #64	; 0x40
 8005992:	5c9b      	ldrb	r3, [r3, r2]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005998:	2302      	movs	r3, #2
 800599a:	e033      	b.n	8005a04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2240      	movs	r2, #64	; 0x40
 80059a0:	2101      	movs	r1, #1
 80059a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2241      	movs	r2, #65	; 0x41
 80059a8:	2124      	movs	r1, #36	; 0x24
 80059aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2101      	movs	r1, #1
 80059b8:	438a      	bics	r2, r1
 80059ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4a11      	ldr	r2, [pc, #68]	; (8005a0c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2101      	movs	r1, #1
 80059ea:	430a      	orrs	r2, r1
 80059ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2241      	movs	r2, #65	; 0x41
 80059f2:	2120      	movs	r1, #32
 80059f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2240      	movs	r2, #64	; 0x40
 80059fa:	2100      	movs	r1, #0
 80059fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	e000      	b.n	8005a04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a02:	2302      	movs	r3, #2
  }
}
 8005a04:	0018      	movs	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b004      	add	sp, #16
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	fffff0ff 	.word	0xfffff0ff

08005a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a10:	b5b0      	push	{r4, r5, r7, lr}
 8005a12:	b08a      	sub	sp, #40	; 0x28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d102      	bne.n	8005a24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	f000 fbbf 	bl	80061a2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a24:	4bc9      	ldr	r3, [pc, #804]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	220c      	movs	r2, #12
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a2e:	4bc7      	ldr	r3, [pc, #796]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	2380      	movs	r3, #128	; 0x80
 8005a34:	025b      	lsls	r3, r3, #9
 8005a36:	4013      	ands	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	4013      	ands	r3, r2
 8005a42:	d100      	bne.n	8005a46 <HAL_RCC_OscConfig+0x36>
 8005a44:	e07e      	b.n	8005b44 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d007      	beq.n	8005a5c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	2b0c      	cmp	r3, #12
 8005a50:	d112      	bne.n	8005a78 <HAL_RCC_OscConfig+0x68>
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	2380      	movs	r3, #128	; 0x80
 8005a56:	025b      	lsls	r3, r3, #9
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d10d      	bne.n	8005a78 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a5c:	4bbb      	ldr	r3, [pc, #748]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	2380      	movs	r3, #128	; 0x80
 8005a62:	029b      	lsls	r3, r3, #10
 8005a64:	4013      	ands	r3, r2
 8005a66:	d100      	bne.n	8005a6a <HAL_RCC_OscConfig+0x5a>
 8005a68:	e06b      	b.n	8005b42 <HAL_RCC_OscConfig+0x132>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d167      	bne.n	8005b42 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f000 fb95 	bl	80061a2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	025b      	lsls	r3, r3, #9
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d107      	bne.n	8005a94 <HAL_RCC_OscConfig+0x84>
 8005a84:	4bb1      	ldr	r3, [pc, #708]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	4bb0      	ldr	r3, [pc, #704]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005a8a:	2180      	movs	r1, #128	; 0x80
 8005a8c:	0249      	lsls	r1, r1, #9
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	e027      	b.n	8005ae4 <HAL_RCC_OscConfig+0xd4>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	23a0      	movs	r3, #160	; 0xa0
 8005a9a:	02db      	lsls	r3, r3, #11
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d10e      	bne.n	8005abe <HAL_RCC_OscConfig+0xae>
 8005aa0:	4baa      	ldr	r3, [pc, #680]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	4ba9      	ldr	r3, [pc, #676]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005aa6:	2180      	movs	r1, #128	; 0x80
 8005aa8:	02c9      	lsls	r1, r1, #11
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	4ba7      	ldr	r3, [pc, #668]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4ba6      	ldr	r3, [pc, #664]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005ab4:	2180      	movs	r1, #128	; 0x80
 8005ab6:	0249      	lsls	r1, r1, #9
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	e012      	b.n	8005ae4 <HAL_RCC_OscConfig+0xd4>
 8005abe:	4ba3      	ldr	r3, [pc, #652]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	4ba2      	ldr	r3, [pc, #648]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005ac4:	49a2      	ldr	r1, [pc, #648]	; (8005d50 <HAL_RCC_OscConfig+0x340>)
 8005ac6:	400a      	ands	r2, r1
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	4ba0      	ldr	r3, [pc, #640]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	2380      	movs	r3, #128	; 0x80
 8005ad0:	025b      	lsls	r3, r3, #9
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4b9c      	ldr	r3, [pc, #624]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	4b9b      	ldr	r3, [pc, #620]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005ade:	499d      	ldr	r1, [pc, #628]	; (8005d54 <HAL_RCC_OscConfig+0x344>)
 8005ae0:	400a      	ands	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d015      	beq.n	8005b18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aec:	f7fe fb96 	bl	800421c <HAL_GetTick>
 8005af0:	0003      	movs	r3, r0
 8005af2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005af4:	e009      	b.n	8005b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005af6:	f7fe fb91 	bl	800421c <HAL_GetTick>
 8005afa:	0002      	movs	r2, r0
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b64      	cmp	r3, #100	; 0x64
 8005b02:	d902      	bls.n	8005b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	f000 fb4c 	bl	80061a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b0a:	4b90      	ldr	r3, [pc, #576]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	2380      	movs	r3, #128	; 0x80
 8005b10:	029b      	lsls	r3, r3, #10
 8005b12:	4013      	ands	r3, r2
 8005b14:	d0ef      	beq.n	8005af6 <HAL_RCC_OscConfig+0xe6>
 8005b16:	e015      	b.n	8005b44 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b18:	f7fe fb80 	bl	800421c <HAL_GetTick>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b22:	f7fe fb7b 	bl	800421c <HAL_GetTick>
 8005b26:	0002      	movs	r2, r0
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b64      	cmp	r3, #100	; 0x64
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e336      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b34:	4b85      	ldr	r3, [pc, #532]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	029b      	lsls	r3, r3, #10
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	d1f0      	bne.n	8005b22 <HAL_RCC_OscConfig+0x112>
 8005b40:	e000      	b.n	8005b44 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b42:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	d100      	bne.n	8005b50 <HAL_RCC_OscConfig+0x140>
 8005b4e:	e099      	b.n	8005c84 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	2220      	movs	r2, #32
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d009      	beq.n	8005b72 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005b5e:	4b7b      	ldr	r3, [pc, #492]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b7a      	ldr	r3, [pc, #488]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005b64:	2120      	movs	r1, #32
 8005b66:	430a      	orrs	r2, r1
 8005b68:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	4393      	bics	r3, r2
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d005      	beq.n	8005b84 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	2b0c      	cmp	r3, #12
 8005b7c:	d13e      	bne.n	8005bfc <HAL_RCC_OscConfig+0x1ec>
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d13b      	bne.n	8005bfc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005b84:	4b71      	ldr	r3, [pc, #452]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2204      	movs	r2, #4
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <HAL_RCC_OscConfig+0x188>
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e304      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b98:	4b6c      	ldr	r3, [pc, #432]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	4a6e      	ldr	r2, [pc, #440]	; (8005d58 <HAL_RCC_OscConfig+0x348>)
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	0019      	movs	r1, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	021a      	lsls	r2, r3, #8
 8005ba8:	4b68      	ldr	r3, [pc, #416]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005baa:	430a      	orrs	r2, r1
 8005bac:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005bae:	4b67      	ldr	r3, [pc, #412]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2209      	movs	r2, #9
 8005bb4:	4393      	bics	r3, r2
 8005bb6:	0019      	movs	r1, r3
 8005bb8:	4b64      	ldr	r3, [pc, #400]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bc0:	f000 fc42 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 8005bc4:	0001      	movs	r1, r0
 8005bc6:	4b61      	ldr	r3, [pc, #388]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	091b      	lsrs	r3, r3, #4
 8005bcc:	220f      	movs	r2, #15
 8005bce:	4013      	ands	r3, r2
 8005bd0:	4a62      	ldr	r2, [pc, #392]	; (8005d5c <HAL_RCC_OscConfig+0x34c>)
 8005bd2:	5cd3      	ldrb	r3, [r2, r3]
 8005bd4:	000a      	movs	r2, r1
 8005bd6:	40da      	lsrs	r2, r3
 8005bd8:	4b61      	ldr	r3, [pc, #388]	; (8005d60 <HAL_RCC_OscConfig+0x350>)
 8005bda:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005bdc:	4b61      	ldr	r3, [pc, #388]	; (8005d64 <HAL_RCC_OscConfig+0x354>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2513      	movs	r5, #19
 8005be2:	197c      	adds	r4, r7, r5
 8005be4:	0018      	movs	r0, r3
 8005be6:	f7fe fad3 	bl	8004190 <HAL_InitTick>
 8005bea:	0003      	movs	r3, r0
 8005bec:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005bee:	197b      	adds	r3, r7, r5
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d046      	beq.n	8005c84 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005bf6:	197b      	adds	r3, r7, r5
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	e2d2      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d027      	beq.n	8005c52 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005c02:	4b52      	ldr	r3, [pc, #328]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2209      	movs	r2, #9
 8005c08:	4393      	bics	r3, r2
 8005c0a:	0019      	movs	r1, r3
 8005c0c:	4b4f      	ldr	r3, [pc, #316]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c10:	430a      	orrs	r2, r1
 8005c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c14:	f7fe fb02 	bl	800421c <HAL_GetTick>
 8005c18:	0003      	movs	r3, r0
 8005c1a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c1c:	e008      	b.n	8005c30 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c1e:	f7fe fafd 	bl	800421c <HAL_GetTick>
 8005c22:	0002      	movs	r2, r0
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e2b8      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c30:	4b46      	ldr	r3, [pc, #280]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2204      	movs	r2, #4
 8005c36:	4013      	ands	r3, r2
 8005c38:	d0f1      	beq.n	8005c1e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c3a:	4b44      	ldr	r3, [pc, #272]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	4a46      	ldr	r2, [pc, #280]	; (8005d58 <HAL_RCC_OscConfig+0x348>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	0019      	movs	r1, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	021a      	lsls	r2, r3, #8
 8005c4a:	4b40      	ldr	r3, [pc, #256]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	605a      	str	r2, [r3, #4]
 8005c50:	e018      	b.n	8005c84 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c52:	4b3e      	ldr	r3, [pc, #248]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	4b3d      	ldr	r3, [pc, #244]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005c58:	2101      	movs	r1, #1
 8005c5a:	438a      	bics	r2, r1
 8005c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c5e:	f7fe fadd 	bl	800421c <HAL_GetTick>
 8005c62:	0003      	movs	r3, r0
 8005c64:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c68:	f7fe fad8 	bl	800421c <HAL_GetTick>
 8005c6c:	0002      	movs	r2, r0
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e293      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c7a:	4b34      	ldr	r3, [pc, #208]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2204      	movs	r2, #4
 8005c80:	4013      	ands	r3, r2
 8005c82:	d1f1      	bne.n	8005c68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2210      	movs	r2, #16
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d100      	bne.n	8005c90 <HAL_RCC_OscConfig+0x280>
 8005c8e:	e0a2      	b.n	8005dd6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d140      	bne.n	8005d18 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c96:	4b2d      	ldr	r3, [pc, #180]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	2380      	movs	r3, #128	; 0x80
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d005      	beq.n	8005cae <HAL_RCC_OscConfig+0x29e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e279      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cae:	4b27      	ldr	r3, [pc, #156]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4a2d      	ldr	r2, [pc, #180]	; (8005d68 <HAL_RCC_OscConfig+0x358>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	0019      	movs	r1, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cbc:	4b23      	ldr	r3, [pc, #140]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cc2:	4b22      	ldr	r3, [pc, #136]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	0a19      	lsrs	r1, r3, #8
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	061a      	lsls	r2, r3, #24
 8005cd0:	4b1e      	ldr	r3, [pc, #120]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	0b5b      	lsrs	r3, r3, #13
 8005cdc:	3301      	adds	r3, #1
 8005cde:	2280      	movs	r2, #128	; 0x80
 8005ce0:	0212      	lsls	r2, r2, #8
 8005ce2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005ce4:	4b19      	ldr	r3, [pc, #100]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	091b      	lsrs	r3, r3, #4
 8005cea:	210f      	movs	r1, #15
 8005cec:	400b      	ands	r3, r1
 8005cee:	491b      	ldr	r1, [pc, #108]	; (8005d5c <HAL_RCC_OscConfig+0x34c>)
 8005cf0:	5ccb      	ldrb	r3, [r1, r3]
 8005cf2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005cf4:	4b1a      	ldr	r3, [pc, #104]	; (8005d60 <HAL_RCC_OscConfig+0x350>)
 8005cf6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005cf8:	4b1a      	ldr	r3, [pc, #104]	; (8005d64 <HAL_RCC_OscConfig+0x354>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2513      	movs	r5, #19
 8005cfe:	197c      	adds	r4, r7, r5
 8005d00:	0018      	movs	r0, r3
 8005d02:	f7fe fa45 	bl	8004190 <HAL_InitTick>
 8005d06:	0003      	movs	r3, r0
 8005d08:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005d0a:	197b      	adds	r3, r7, r5
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d061      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005d12:	197b      	adds	r3, r7, r5
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	e244      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d040      	beq.n	8005da2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d20:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	4b09      	ldr	r3, [pc, #36]	; (8005d4c <HAL_RCC_OscConfig+0x33c>)
 8005d26:	2180      	movs	r1, #128	; 0x80
 8005d28:	0049      	lsls	r1, r1, #1
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2e:	f7fe fa75 	bl	800421c <HAL_GetTick>
 8005d32:	0003      	movs	r3, r0
 8005d34:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005d36:	e019      	b.n	8005d6c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d38:	f7fe fa70 	bl	800421c <HAL_GetTick>
 8005d3c:	0002      	movs	r2, r0
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d912      	bls.n	8005d6c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e22b      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	fffeffff 	.word	0xfffeffff
 8005d54:	fffbffff 	.word	0xfffbffff
 8005d58:	ffffe0ff 	.word	0xffffe0ff
 8005d5c:	08007e5c 	.word	0x08007e5c
 8005d60:	20000000 	.word	0x20000000
 8005d64:	20000004 	.word	0x20000004
 8005d68:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005d6c:	4bca      	ldr	r3, [pc, #808]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	2380      	movs	r3, #128	; 0x80
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4013      	ands	r3, r2
 8005d76:	d0df      	beq.n	8005d38 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d78:	4bc7      	ldr	r3, [pc, #796]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	4ac7      	ldr	r2, [pc, #796]	; (800609c <HAL_RCC_OscConfig+0x68c>)
 8005d7e:	4013      	ands	r3, r2
 8005d80:	0019      	movs	r1, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d86:	4bc4      	ldr	r3, [pc, #784]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d8c:	4bc2      	ldr	r3, [pc, #776]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	021b      	lsls	r3, r3, #8
 8005d92:	0a19      	lsrs	r1, r3, #8
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	061a      	lsls	r2, r3, #24
 8005d9a:	4bbf      	ldr	r3, [pc, #764]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	605a      	str	r2, [r3, #4]
 8005da0:	e019      	b.n	8005dd6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005da2:	4bbd      	ldr	r3, [pc, #756]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	4bbc      	ldr	r3, [pc, #752]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005da8:	49bd      	ldr	r1, [pc, #756]	; (80060a0 <HAL_RCC_OscConfig+0x690>)
 8005daa:	400a      	ands	r2, r1
 8005dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dae:	f7fe fa35 	bl	800421c <HAL_GetTick>
 8005db2:	0003      	movs	r3, r0
 8005db4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005db8:	f7fe fa30 	bl	800421c <HAL_GetTick>
 8005dbc:	0002      	movs	r2, r0
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e1eb      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005dca:	4bb3      	ldr	r3, [pc, #716]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	2380      	movs	r3, #128	; 0x80
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	d1f0      	bne.n	8005db8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2208      	movs	r2, #8
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d036      	beq.n	8005e4e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d019      	beq.n	8005e1c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005de8:	4bab      	ldr	r3, [pc, #684]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005dea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dec:	4baa      	ldr	r3, [pc, #680]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005dee:	2101      	movs	r1, #1
 8005df0:	430a      	orrs	r2, r1
 8005df2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005df4:	f7fe fa12 	bl	800421c <HAL_GetTick>
 8005df8:	0003      	movs	r3, r0
 8005dfa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005dfc:	e008      	b.n	8005e10 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dfe:	f7fe fa0d 	bl	800421c <HAL_GetTick>
 8005e02:	0002      	movs	r2, r0
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e1c8      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e10:	4ba1      	ldr	r3, [pc, #644]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e14:	2202      	movs	r2, #2
 8005e16:	4013      	ands	r3, r2
 8005e18:	d0f1      	beq.n	8005dfe <HAL_RCC_OscConfig+0x3ee>
 8005e1a:	e018      	b.n	8005e4e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e1c:	4b9e      	ldr	r3, [pc, #632]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005e1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e20:	4b9d      	ldr	r3, [pc, #628]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005e22:	2101      	movs	r1, #1
 8005e24:	438a      	bics	r2, r1
 8005e26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e28:	f7fe f9f8 	bl	800421c <HAL_GetTick>
 8005e2c:	0003      	movs	r3, r0
 8005e2e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e30:	e008      	b.n	8005e44 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e32:	f7fe f9f3 	bl	800421c <HAL_GetTick>
 8005e36:	0002      	movs	r2, r0
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e1ae      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e44:	4b94      	ldr	r3, [pc, #592]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e48:	2202      	movs	r2, #2
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	d1f1      	bne.n	8005e32 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2204      	movs	r2, #4
 8005e54:	4013      	ands	r3, r2
 8005e56:	d100      	bne.n	8005e5a <HAL_RCC_OscConfig+0x44a>
 8005e58:	e0ae      	b.n	8005fb8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e5a:	2023      	movs	r0, #35	; 0x23
 8005e5c:	183b      	adds	r3, r7, r0
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e62:	4b8d      	ldr	r3, [pc, #564]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e66:	2380      	movs	r3, #128	; 0x80
 8005e68:	055b      	lsls	r3, r3, #21
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	d109      	bne.n	8005e82 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e6e:	4b8a      	ldr	r3, [pc, #552]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e72:	4b89      	ldr	r3, [pc, #548]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005e74:	2180      	movs	r1, #128	; 0x80
 8005e76:	0549      	lsls	r1, r1, #21
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005e7c:	183b      	adds	r3, r7, r0
 8005e7e:	2201      	movs	r2, #1
 8005e80:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e82:	4b88      	ldr	r3, [pc, #544]	; (80060a4 <HAL_RCC_OscConfig+0x694>)
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	2380      	movs	r3, #128	; 0x80
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d11a      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e8e:	4b85      	ldr	r3, [pc, #532]	; (80060a4 <HAL_RCC_OscConfig+0x694>)
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b84      	ldr	r3, [pc, #528]	; (80060a4 <HAL_RCC_OscConfig+0x694>)
 8005e94:	2180      	movs	r1, #128	; 0x80
 8005e96:	0049      	lsls	r1, r1, #1
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e9c:	f7fe f9be 	bl	800421c <HAL_GetTick>
 8005ea0:	0003      	movs	r3, r0
 8005ea2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ea6:	f7fe f9b9 	bl	800421c <HAL_GetTick>
 8005eaa:	0002      	movs	r2, r0
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b64      	cmp	r3, #100	; 0x64
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e174      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb8:	4b7a      	ldr	r3, [pc, #488]	; (80060a4 <HAL_RCC_OscConfig+0x694>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	2380      	movs	r3, #128	; 0x80
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	d0f0      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	2380      	movs	r3, #128	; 0x80
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d107      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x4d0>
 8005ed0:	4b71      	ldr	r3, [pc, #452]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005ed2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ed4:	4b70      	ldr	r3, [pc, #448]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005ed6:	2180      	movs	r1, #128	; 0x80
 8005ed8:	0049      	lsls	r1, r1, #1
 8005eda:	430a      	orrs	r2, r1
 8005edc:	651a      	str	r2, [r3, #80]	; 0x50
 8005ede:	e031      	b.n	8005f44 <HAL_RCC_OscConfig+0x534>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10c      	bne.n	8005f02 <HAL_RCC_OscConfig+0x4f2>
 8005ee8:	4b6b      	ldr	r3, [pc, #428]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005eea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eec:	4b6a      	ldr	r3, [pc, #424]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005eee:	496c      	ldr	r1, [pc, #432]	; (80060a0 <HAL_RCC_OscConfig+0x690>)
 8005ef0:	400a      	ands	r2, r1
 8005ef2:	651a      	str	r2, [r3, #80]	; 0x50
 8005ef4:	4b68      	ldr	r3, [pc, #416]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005ef6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ef8:	4b67      	ldr	r3, [pc, #412]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005efa:	496b      	ldr	r1, [pc, #428]	; (80060a8 <HAL_RCC_OscConfig+0x698>)
 8005efc:	400a      	ands	r2, r1
 8005efe:	651a      	str	r2, [r3, #80]	; 0x50
 8005f00:	e020      	b.n	8005f44 <HAL_RCC_OscConfig+0x534>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	23a0      	movs	r3, #160	; 0xa0
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d10e      	bne.n	8005f2c <HAL_RCC_OscConfig+0x51c>
 8005f0e:	4b62      	ldr	r3, [pc, #392]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005f10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f12:	4b61      	ldr	r3, [pc, #388]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005f14:	2180      	movs	r1, #128	; 0x80
 8005f16:	00c9      	lsls	r1, r1, #3
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	651a      	str	r2, [r3, #80]	; 0x50
 8005f1c:	4b5e      	ldr	r3, [pc, #376]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005f1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f20:	4b5d      	ldr	r3, [pc, #372]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005f22:	2180      	movs	r1, #128	; 0x80
 8005f24:	0049      	lsls	r1, r1, #1
 8005f26:	430a      	orrs	r2, r1
 8005f28:	651a      	str	r2, [r3, #80]	; 0x50
 8005f2a:	e00b      	b.n	8005f44 <HAL_RCC_OscConfig+0x534>
 8005f2c:	4b5a      	ldr	r3, [pc, #360]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f30:	4b59      	ldr	r3, [pc, #356]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005f32:	495b      	ldr	r1, [pc, #364]	; (80060a0 <HAL_RCC_OscConfig+0x690>)
 8005f34:	400a      	ands	r2, r1
 8005f36:	651a      	str	r2, [r3, #80]	; 0x50
 8005f38:	4b57      	ldr	r3, [pc, #348]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005f3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f3c:	4b56      	ldr	r3, [pc, #344]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005f3e:	495a      	ldr	r1, [pc, #360]	; (80060a8 <HAL_RCC_OscConfig+0x698>)
 8005f40:	400a      	ands	r2, r1
 8005f42:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d015      	beq.n	8005f78 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f4c:	f7fe f966 	bl	800421c <HAL_GetTick>
 8005f50:	0003      	movs	r3, r0
 8005f52:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f54:	e009      	b.n	8005f6a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f56:	f7fe f961 	bl	800421c <HAL_GetTick>
 8005f5a:	0002      	movs	r2, r0
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	4a52      	ldr	r2, [pc, #328]	; (80060ac <HAL_RCC_OscConfig+0x69c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e11b      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f6a:	4b4b      	ldr	r3, [pc, #300]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005f6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f6e:	2380      	movs	r3, #128	; 0x80
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4013      	ands	r3, r2
 8005f74:	d0ef      	beq.n	8005f56 <HAL_RCC_OscConfig+0x546>
 8005f76:	e014      	b.n	8005fa2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f78:	f7fe f950 	bl	800421c <HAL_GetTick>
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f80:	e009      	b.n	8005f96 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f82:	f7fe f94b 	bl	800421c <HAL_GetTick>
 8005f86:	0002      	movs	r2, r0
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	4a47      	ldr	r2, [pc, #284]	; (80060ac <HAL_RCC_OscConfig+0x69c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e105      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f96:	4b40      	ldr	r3, [pc, #256]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005f98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f9a:	2380      	movs	r3, #128	; 0x80
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	d1ef      	bne.n	8005f82 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005fa2:	2323      	movs	r3, #35	; 0x23
 8005fa4:	18fb      	adds	r3, r7, r3
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d105      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fac:	4b3a      	ldr	r3, [pc, #232]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb0:	4b39      	ldr	r3, [pc, #228]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005fb2:	493f      	ldr	r1, [pc, #252]	; (80060b0 <HAL_RCC_OscConfig+0x6a0>)
 8005fb4:	400a      	ands	r2, r1
 8005fb6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d049      	beq.n	8006056 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d026      	beq.n	8006018 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005fca:	4b33      	ldr	r3, [pc, #204]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	4b32      	ldr	r3, [pc, #200]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	609a      	str	r2, [r3, #8]
 8005fd6:	4b30      	ldr	r3, [pc, #192]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fda:	4b2f      	ldr	r3, [pc, #188]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8005fdc:	2101      	movs	r1, #1
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	635a      	str	r2, [r3, #52]	; 0x34
 8005fe2:	4b34      	ldr	r3, [pc, #208]	; (80060b4 <HAL_RCC_OscConfig+0x6a4>)
 8005fe4:	6a1a      	ldr	r2, [r3, #32]
 8005fe6:	4b33      	ldr	r3, [pc, #204]	; (80060b4 <HAL_RCC_OscConfig+0x6a4>)
 8005fe8:	2180      	movs	r1, #128	; 0x80
 8005fea:	0189      	lsls	r1, r1, #6
 8005fec:	430a      	orrs	r2, r1
 8005fee:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff0:	f7fe f914 	bl	800421c <HAL_GetTick>
 8005ff4:	0003      	movs	r3, r0
 8005ff6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ff8:	e008      	b.n	800600c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ffa:	f7fe f90f 	bl	800421c <HAL_GetTick>
 8005ffe:	0002      	movs	r2, r0
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d901      	bls.n	800600c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e0ca      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800600c:	4b22      	ldr	r3, [pc, #136]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	2202      	movs	r2, #2
 8006012:	4013      	ands	r3, r2
 8006014:	d0f1      	beq.n	8005ffa <HAL_RCC_OscConfig+0x5ea>
 8006016:	e01e      	b.n	8006056 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006018:	4b1f      	ldr	r3, [pc, #124]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	4b1e      	ldr	r3, [pc, #120]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 800601e:	2101      	movs	r1, #1
 8006020:	438a      	bics	r2, r1
 8006022:	609a      	str	r2, [r3, #8]
 8006024:	4b23      	ldr	r3, [pc, #140]	; (80060b4 <HAL_RCC_OscConfig+0x6a4>)
 8006026:	6a1a      	ldr	r2, [r3, #32]
 8006028:	4b22      	ldr	r3, [pc, #136]	; (80060b4 <HAL_RCC_OscConfig+0x6a4>)
 800602a:	4923      	ldr	r1, [pc, #140]	; (80060b8 <HAL_RCC_OscConfig+0x6a8>)
 800602c:	400a      	ands	r2, r1
 800602e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006030:	f7fe f8f4 	bl	800421c <HAL_GetTick>
 8006034:	0003      	movs	r3, r0
 8006036:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006038:	e008      	b.n	800604c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800603a:	f7fe f8ef 	bl	800421c <HAL_GetTick>
 800603e:	0002      	movs	r2, r0
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d901      	bls.n	800604c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e0aa      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800604c:	4b12      	ldr	r3, [pc, #72]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	2202      	movs	r2, #2
 8006052:	4013      	ands	r3, r2
 8006054:	d1f1      	bne.n	800603a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	d100      	bne.n	8006060 <HAL_RCC_OscConfig+0x650>
 800605e:	e09f      	b.n	80061a0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	2b0c      	cmp	r3, #12
 8006064:	d100      	bne.n	8006068 <HAL_RCC_OscConfig+0x658>
 8006066:	e078      	b.n	800615a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606c:	2b02      	cmp	r3, #2
 800606e:	d159      	bne.n	8006124 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006070:	4b09      	ldr	r3, [pc, #36]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	4b08      	ldr	r3, [pc, #32]	; (8006098 <HAL_RCC_OscConfig+0x688>)
 8006076:	4911      	ldr	r1, [pc, #68]	; (80060bc <HAL_RCC_OscConfig+0x6ac>)
 8006078:	400a      	ands	r2, r1
 800607a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800607c:	f7fe f8ce 	bl	800421c <HAL_GetTick>
 8006080:	0003      	movs	r3, r0
 8006082:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006084:	e01c      	b.n	80060c0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006086:	f7fe f8c9 	bl	800421c <HAL_GetTick>
 800608a:	0002      	movs	r2, r0
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d915      	bls.n	80060c0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e084      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
 8006098:	40021000 	.word	0x40021000
 800609c:	ffff1fff 	.word	0xffff1fff
 80060a0:	fffffeff 	.word	0xfffffeff
 80060a4:	40007000 	.word	0x40007000
 80060a8:	fffffbff 	.word	0xfffffbff
 80060ac:	00001388 	.word	0x00001388
 80060b0:	efffffff 	.word	0xefffffff
 80060b4:	40010000 	.word	0x40010000
 80060b8:	ffffdfff 	.word	0xffffdfff
 80060bc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80060c0:	4b3a      	ldr	r3, [pc, #232]	; (80061ac <HAL_RCC_OscConfig+0x79c>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	2380      	movs	r3, #128	; 0x80
 80060c6:	049b      	lsls	r3, r3, #18
 80060c8:	4013      	ands	r3, r2
 80060ca:	d1dc      	bne.n	8006086 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060cc:	4b37      	ldr	r3, [pc, #220]	; (80061ac <HAL_RCC_OscConfig+0x79c>)
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	4a37      	ldr	r2, [pc, #220]	; (80061b0 <HAL_RCC_OscConfig+0x7a0>)
 80060d2:	4013      	ands	r3, r2
 80060d4:	0019      	movs	r1, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e4:	431a      	orrs	r2, r3
 80060e6:	4b31      	ldr	r3, [pc, #196]	; (80061ac <HAL_RCC_OscConfig+0x79c>)
 80060e8:	430a      	orrs	r2, r1
 80060ea:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060ec:	4b2f      	ldr	r3, [pc, #188]	; (80061ac <HAL_RCC_OscConfig+0x79c>)
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	4b2e      	ldr	r3, [pc, #184]	; (80061ac <HAL_RCC_OscConfig+0x79c>)
 80060f2:	2180      	movs	r1, #128	; 0x80
 80060f4:	0449      	lsls	r1, r1, #17
 80060f6:	430a      	orrs	r2, r1
 80060f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fa:	f7fe f88f 	bl	800421c <HAL_GetTick>
 80060fe:	0003      	movs	r3, r0
 8006100:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006104:	f7fe f88a 	bl	800421c <HAL_GetTick>
 8006108:	0002      	movs	r2, r0
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e045      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006116:	4b25      	ldr	r3, [pc, #148]	; (80061ac <HAL_RCC_OscConfig+0x79c>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	2380      	movs	r3, #128	; 0x80
 800611c:	049b      	lsls	r3, r3, #18
 800611e:	4013      	ands	r3, r2
 8006120:	d0f0      	beq.n	8006104 <HAL_RCC_OscConfig+0x6f4>
 8006122:	e03d      	b.n	80061a0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006124:	4b21      	ldr	r3, [pc, #132]	; (80061ac <HAL_RCC_OscConfig+0x79c>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	4b20      	ldr	r3, [pc, #128]	; (80061ac <HAL_RCC_OscConfig+0x79c>)
 800612a:	4922      	ldr	r1, [pc, #136]	; (80061b4 <HAL_RCC_OscConfig+0x7a4>)
 800612c:	400a      	ands	r2, r1
 800612e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006130:	f7fe f874 	bl	800421c <HAL_GetTick>
 8006134:	0003      	movs	r3, r0
 8006136:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006138:	e008      	b.n	800614c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800613a:	f7fe f86f 	bl	800421c <HAL_GetTick>
 800613e:	0002      	movs	r2, r0
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e02a      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800614c:	4b17      	ldr	r3, [pc, #92]	; (80061ac <HAL_RCC_OscConfig+0x79c>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	2380      	movs	r3, #128	; 0x80
 8006152:	049b      	lsls	r3, r3, #18
 8006154:	4013      	ands	r3, r2
 8006156:	d1f0      	bne.n	800613a <HAL_RCC_OscConfig+0x72a>
 8006158:	e022      	b.n	80061a0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e01d      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006166:	4b11      	ldr	r3, [pc, #68]	; (80061ac <HAL_RCC_OscConfig+0x79c>)
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	2380      	movs	r3, #128	; 0x80
 8006170:	025b      	lsls	r3, r3, #9
 8006172:	401a      	ands	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	429a      	cmp	r2, r3
 800617a:	d10f      	bne.n	800619c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	23f0      	movs	r3, #240	; 0xf0
 8006180:	039b      	lsls	r3, r3, #14
 8006182:	401a      	ands	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006188:	429a      	cmp	r2, r3
 800618a:	d107      	bne.n	800619c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	23c0      	movs	r3, #192	; 0xc0
 8006190:	041b      	lsls	r3, r3, #16
 8006192:	401a      	ands	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006198:	429a      	cmp	r2, r3
 800619a:	d001      	beq.n	80061a0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e000      	b.n	80061a2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	0018      	movs	r0, r3
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b00a      	add	sp, #40	; 0x28
 80061a8:	bdb0      	pop	{r4, r5, r7, pc}
 80061aa:	46c0      	nop			; (mov r8, r8)
 80061ac:	40021000 	.word	0x40021000
 80061b0:	ff02ffff 	.word	0xff02ffff
 80061b4:	feffffff 	.word	0xfeffffff

080061b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061b8:	b5b0      	push	{r4, r5, r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e128      	b.n	800641e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061cc:	4b96      	ldr	r3, [pc, #600]	; (8006428 <HAL_RCC_ClockConfig+0x270>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2201      	movs	r2, #1
 80061d2:	4013      	ands	r3, r2
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d91e      	bls.n	8006218 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061da:	4b93      	ldr	r3, [pc, #588]	; (8006428 <HAL_RCC_ClockConfig+0x270>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2201      	movs	r2, #1
 80061e0:	4393      	bics	r3, r2
 80061e2:	0019      	movs	r1, r3
 80061e4:	4b90      	ldr	r3, [pc, #576]	; (8006428 <HAL_RCC_ClockConfig+0x270>)
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80061ec:	f7fe f816 	bl	800421c <HAL_GetTick>
 80061f0:	0003      	movs	r3, r0
 80061f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061f4:	e009      	b.n	800620a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061f6:	f7fe f811 	bl	800421c <HAL_GetTick>
 80061fa:	0002      	movs	r2, r0
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	4a8a      	ldr	r2, [pc, #552]	; (800642c <HAL_RCC_ClockConfig+0x274>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d901      	bls.n	800620a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e109      	b.n	800641e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800620a:	4b87      	ldr	r3, [pc, #540]	; (8006428 <HAL_RCC_ClockConfig+0x270>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2201      	movs	r2, #1
 8006210:	4013      	ands	r3, r2
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d1ee      	bne.n	80061f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2202      	movs	r2, #2
 800621e:	4013      	ands	r3, r2
 8006220:	d009      	beq.n	8006236 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006222:	4b83      	ldr	r3, [pc, #524]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	22f0      	movs	r2, #240	; 0xf0
 8006228:	4393      	bics	r3, r2
 800622a:	0019      	movs	r1, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	4b7f      	ldr	r3, [pc, #508]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 8006232:	430a      	orrs	r2, r1
 8006234:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2201      	movs	r2, #1
 800623c:	4013      	ands	r3, r2
 800623e:	d100      	bne.n	8006242 <HAL_RCC_ClockConfig+0x8a>
 8006240:	e089      	b.n	8006356 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d107      	bne.n	800625a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800624a:	4b79      	ldr	r3, [pc, #484]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	2380      	movs	r3, #128	; 0x80
 8006250:	029b      	lsls	r3, r3, #10
 8006252:	4013      	ands	r3, r2
 8006254:	d120      	bne.n	8006298 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e0e1      	b.n	800641e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2b03      	cmp	r3, #3
 8006260:	d107      	bne.n	8006272 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006262:	4b73      	ldr	r3, [pc, #460]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	2380      	movs	r3, #128	; 0x80
 8006268:	049b      	lsls	r3, r3, #18
 800626a:	4013      	ands	r3, r2
 800626c:	d114      	bne.n	8006298 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e0d5      	b.n	800641e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d106      	bne.n	8006288 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800627a:	4b6d      	ldr	r3, [pc, #436]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2204      	movs	r2, #4
 8006280:	4013      	ands	r3, r2
 8006282:	d109      	bne.n	8006298 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e0ca      	b.n	800641e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006288:	4b69      	ldr	r3, [pc, #420]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	2380      	movs	r3, #128	; 0x80
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4013      	ands	r3, r2
 8006292:	d101      	bne.n	8006298 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e0c2      	b.n	800641e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006298:	4b65      	ldr	r3, [pc, #404]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	2203      	movs	r2, #3
 800629e:	4393      	bics	r3, r2
 80062a0:	0019      	movs	r1, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	4b62      	ldr	r3, [pc, #392]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 80062a8:	430a      	orrs	r2, r1
 80062aa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062ac:	f7fd ffb6 	bl	800421c <HAL_GetTick>
 80062b0:	0003      	movs	r3, r0
 80062b2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d111      	bne.n	80062e0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80062bc:	e009      	b.n	80062d2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062be:	f7fd ffad 	bl	800421c <HAL_GetTick>
 80062c2:	0002      	movs	r2, r0
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	4a58      	ldr	r2, [pc, #352]	; (800642c <HAL_RCC_ClockConfig+0x274>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e0a5      	b.n	800641e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80062d2:	4b57      	ldr	r3, [pc, #348]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	220c      	movs	r2, #12
 80062d8:	4013      	ands	r3, r2
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d1ef      	bne.n	80062be <HAL_RCC_ClockConfig+0x106>
 80062de:	e03a      	b.n	8006356 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d111      	bne.n	800630c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062e8:	e009      	b.n	80062fe <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062ea:	f7fd ff97 	bl	800421c <HAL_GetTick>
 80062ee:	0002      	movs	r2, r0
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	4a4d      	ldr	r2, [pc, #308]	; (800642c <HAL_RCC_ClockConfig+0x274>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e08f      	b.n	800641e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062fe:	4b4c      	ldr	r3, [pc, #304]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	220c      	movs	r2, #12
 8006304:	4013      	ands	r3, r2
 8006306:	2b0c      	cmp	r3, #12
 8006308:	d1ef      	bne.n	80062ea <HAL_RCC_ClockConfig+0x132>
 800630a:	e024      	b.n	8006356 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d11b      	bne.n	800634c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006314:	e009      	b.n	800632a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006316:	f7fd ff81 	bl	800421c <HAL_GetTick>
 800631a:	0002      	movs	r2, r0
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	4a42      	ldr	r2, [pc, #264]	; (800642c <HAL_RCC_ClockConfig+0x274>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d901      	bls.n	800632a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e079      	b.n	800641e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800632a:	4b41      	ldr	r3, [pc, #260]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	220c      	movs	r2, #12
 8006330:	4013      	ands	r3, r2
 8006332:	2b04      	cmp	r3, #4
 8006334:	d1ef      	bne.n	8006316 <HAL_RCC_ClockConfig+0x15e>
 8006336:	e00e      	b.n	8006356 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006338:	f7fd ff70 	bl	800421c <HAL_GetTick>
 800633c:	0002      	movs	r2, r0
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	4a3a      	ldr	r2, [pc, #232]	; (800642c <HAL_RCC_ClockConfig+0x274>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d901      	bls.n	800634c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e068      	b.n	800641e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800634c:	4b38      	ldr	r3, [pc, #224]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	220c      	movs	r2, #12
 8006352:	4013      	ands	r3, r2
 8006354:	d1f0      	bne.n	8006338 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006356:	4b34      	ldr	r3, [pc, #208]	; (8006428 <HAL_RCC_ClockConfig+0x270>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2201      	movs	r2, #1
 800635c:	4013      	ands	r3, r2
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d21e      	bcs.n	80063a2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006364:	4b30      	ldr	r3, [pc, #192]	; (8006428 <HAL_RCC_ClockConfig+0x270>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2201      	movs	r2, #1
 800636a:	4393      	bics	r3, r2
 800636c:	0019      	movs	r1, r3
 800636e:	4b2e      	ldr	r3, [pc, #184]	; (8006428 <HAL_RCC_ClockConfig+0x270>)
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006376:	f7fd ff51 	bl	800421c <HAL_GetTick>
 800637a:	0003      	movs	r3, r0
 800637c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800637e:	e009      	b.n	8006394 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006380:	f7fd ff4c 	bl	800421c <HAL_GetTick>
 8006384:	0002      	movs	r2, r0
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	4a28      	ldr	r2, [pc, #160]	; (800642c <HAL_RCC_ClockConfig+0x274>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d901      	bls.n	8006394 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e044      	b.n	800641e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006394:	4b24      	ldr	r3, [pc, #144]	; (8006428 <HAL_RCC_ClockConfig+0x270>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2201      	movs	r2, #1
 800639a:	4013      	ands	r3, r2
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d1ee      	bne.n	8006380 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2204      	movs	r2, #4
 80063a8:	4013      	ands	r3, r2
 80063aa:	d009      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063ac:	4b20      	ldr	r3, [pc, #128]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	4a20      	ldr	r2, [pc, #128]	; (8006434 <HAL_RCC_ClockConfig+0x27c>)
 80063b2:	4013      	ands	r3, r2
 80063b4:	0019      	movs	r1, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	4b1d      	ldr	r3, [pc, #116]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 80063bc:	430a      	orrs	r2, r1
 80063be:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2208      	movs	r2, #8
 80063c6:	4013      	ands	r3, r2
 80063c8:	d00a      	beq.n	80063e0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80063ca:	4b19      	ldr	r3, [pc, #100]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	4a1a      	ldr	r2, [pc, #104]	; (8006438 <HAL_RCC_ClockConfig+0x280>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	0019      	movs	r1, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	00da      	lsls	r2, r3, #3
 80063da:	4b15      	ldr	r3, [pc, #84]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 80063dc:	430a      	orrs	r2, r1
 80063de:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063e0:	f000 f832 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 80063e4:	0001      	movs	r1, r0
 80063e6:	4b12      	ldr	r3, [pc, #72]	; (8006430 <HAL_RCC_ClockConfig+0x278>)
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	091b      	lsrs	r3, r3, #4
 80063ec:	220f      	movs	r2, #15
 80063ee:	4013      	ands	r3, r2
 80063f0:	4a12      	ldr	r2, [pc, #72]	; (800643c <HAL_RCC_ClockConfig+0x284>)
 80063f2:	5cd3      	ldrb	r3, [r2, r3]
 80063f4:	000a      	movs	r2, r1
 80063f6:	40da      	lsrs	r2, r3
 80063f8:	4b11      	ldr	r3, [pc, #68]	; (8006440 <HAL_RCC_ClockConfig+0x288>)
 80063fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80063fc:	4b11      	ldr	r3, [pc, #68]	; (8006444 <HAL_RCC_ClockConfig+0x28c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	250b      	movs	r5, #11
 8006402:	197c      	adds	r4, r7, r5
 8006404:	0018      	movs	r0, r3
 8006406:	f7fd fec3 	bl	8004190 <HAL_InitTick>
 800640a:	0003      	movs	r3, r0
 800640c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800640e:	197b      	adds	r3, r7, r5
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006416:	197b      	adds	r3, r7, r5
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	e000      	b.n	800641e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	0018      	movs	r0, r3
 8006420:	46bd      	mov	sp, r7
 8006422:	b004      	add	sp, #16
 8006424:	bdb0      	pop	{r4, r5, r7, pc}
 8006426:	46c0      	nop			; (mov r8, r8)
 8006428:	40022000 	.word	0x40022000
 800642c:	00001388 	.word	0x00001388
 8006430:	40021000 	.word	0x40021000
 8006434:	fffff8ff 	.word	0xfffff8ff
 8006438:	ffffc7ff 	.word	0xffffc7ff
 800643c:	08007e5c 	.word	0x08007e5c
 8006440:	20000000 	.word	0x20000000
 8006444:	20000004 	.word	0x20000004

08006448 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006448:	b5b0      	push	{r4, r5, r7, lr}
 800644a:	b08e      	sub	sp, #56	; 0x38
 800644c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800644e:	4b4c      	ldr	r3, [pc, #304]	; (8006580 <HAL_RCC_GetSysClockFreq+0x138>)
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006456:	230c      	movs	r3, #12
 8006458:	4013      	ands	r3, r2
 800645a:	2b0c      	cmp	r3, #12
 800645c:	d014      	beq.n	8006488 <HAL_RCC_GetSysClockFreq+0x40>
 800645e:	d900      	bls.n	8006462 <HAL_RCC_GetSysClockFreq+0x1a>
 8006460:	e07b      	b.n	800655a <HAL_RCC_GetSysClockFreq+0x112>
 8006462:	2b04      	cmp	r3, #4
 8006464:	d002      	beq.n	800646c <HAL_RCC_GetSysClockFreq+0x24>
 8006466:	2b08      	cmp	r3, #8
 8006468:	d00b      	beq.n	8006482 <HAL_RCC_GetSysClockFreq+0x3a>
 800646a:	e076      	b.n	800655a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800646c:	4b44      	ldr	r3, [pc, #272]	; (8006580 <HAL_RCC_GetSysClockFreq+0x138>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2210      	movs	r2, #16
 8006472:	4013      	ands	r3, r2
 8006474:	d002      	beq.n	800647c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006476:	4b43      	ldr	r3, [pc, #268]	; (8006584 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006478:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800647a:	e07c      	b.n	8006576 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800647c:	4b42      	ldr	r3, [pc, #264]	; (8006588 <HAL_RCC_GetSysClockFreq+0x140>)
 800647e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006480:	e079      	b.n	8006576 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006482:	4b42      	ldr	r3, [pc, #264]	; (800658c <HAL_RCC_GetSysClockFreq+0x144>)
 8006484:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006486:	e076      	b.n	8006576 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	0c9a      	lsrs	r2, r3, #18
 800648c:	230f      	movs	r3, #15
 800648e:	401a      	ands	r2, r3
 8006490:	4b3f      	ldr	r3, [pc, #252]	; (8006590 <HAL_RCC_GetSysClockFreq+0x148>)
 8006492:	5c9b      	ldrb	r3, [r3, r2]
 8006494:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	0d9a      	lsrs	r2, r3, #22
 800649a:	2303      	movs	r3, #3
 800649c:	4013      	ands	r3, r2
 800649e:	3301      	adds	r3, #1
 80064a0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064a2:	4b37      	ldr	r3, [pc, #220]	; (8006580 <HAL_RCC_GetSysClockFreq+0x138>)
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	2380      	movs	r3, #128	; 0x80
 80064a8:	025b      	lsls	r3, r3, #9
 80064aa:	4013      	ands	r3, r2
 80064ac:	d01a      	beq.n	80064e4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	2300      	movs	r3, #0
 80064b4:	61fb      	str	r3, [r7, #28]
 80064b6:	4a35      	ldr	r2, [pc, #212]	; (800658c <HAL_RCC_GetSysClockFreq+0x144>)
 80064b8:	2300      	movs	r3, #0
 80064ba:	69b8      	ldr	r0, [r7, #24]
 80064bc:	69f9      	ldr	r1, [r7, #28]
 80064be:	f7f9 ff0d 	bl	80002dc <__aeabi_lmul>
 80064c2:	0002      	movs	r2, r0
 80064c4:	000b      	movs	r3, r1
 80064c6:	0010      	movs	r0, r2
 80064c8:	0019      	movs	r1, r3
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	2300      	movs	r3, #0
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f7f9 fee1 	bl	800029c <__aeabi_uldivmod>
 80064da:	0002      	movs	r2, r0
 80064dc:	000b      	movs	r3, r1
 80064de:	0013      	movs	r3, r2
 80064e0:	637b      	str	r3, [r7, #52]	; 0x34
 80064e2:	e037      	b.n	8006554 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80064e4:	4b26      	ldr	r3, [pc, #152]	; (8006580 <HAL_RCC_GetSysClockFreq+0x138>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2210      	movs	r2, #16
 80064ea:	4013      	ands	r3, r2
 80064ec:	d01a      	beq.n	8006524 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80064ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f0:	60bb      	str	r3, [r7, #8]
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	4a23      	ldr	r2, [pc, #140]	; (8006584 <HAL_RCC_GetSysClockFreq+0x13c>)
 80064f8:	2300      	movs	r3, #0
 80064fa:	68b8      	ldr	r0, [r7, #8]
 80064fc:	68f9      	ldr	r1, [r7, #12]
 80064fe:	f7f9 feed 	bl	80002dc <__aeabi_lmul>
 8006502:	0002      	movs	r2, r0
 8006504:	000b      	movs	r3, r1
 8006506:	0010      	movs	r0, r2
 8006508:	0019      	movs	r1, r3
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	603b      	str	r3, [r7, #0]
 800650e:	2300      	movs	r3, #0
 8006510:	607b      	str	r3, [r7, #4]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f7f9 fec1 	bl	800029c <__aeabi_uldivmod>
 800651a:	0002      	movs	r2, r0
 800651c:	000b      	movs	r3, r1
 800651e:	0013      	movs	r3, r2
 8006520:	637b      	str	r3, [r7, #52]	; 0x34
 8006522:	e017      	b.n	8006554 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	0018      	movs	r0, r3
 8006528:	2300      	movs	r3, #0
 800652a:	0019      	movs	r1, r3
 800652c:	4a16      	ldr	r2, [pc, #88]	; (8006588 <HAL_RCC_GetSysClockFreq+0x140>)
 800652e:	2300      	movs	r3, #0
 8006530:	f7f9 fed4 	bl	80002dc <__aeabi_lmul>
 8006534:	0002      	movs	r2, r0
 8006536:	000b      	movs	r3, r1
 8006538:	0010      	movs	r0, r2
 800653a:	0019      	movs	r1, r3
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	001c      	movs	r4, r3
 8006540:	2300      	movs	r3, #0
 8006542:	001d      	movs	r5, r3
 8006544:	0022      	movs	r2, r4
 8006546:	002b      	movs	r3, r5
 8006548:	f7f9 fea8 	bl	800029c <__aeabi_uldivmod>
 800654c:	0002      	movs	r2, r0
 800654e:	000b      	movs	r3, r1
 8006550:	0013      	movs	r3, r2
 8006552:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006556:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006558:	e00d      	b.n	8006576 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800655a:	4b09      	ldr	r3, [pc, #36]	; (8006580 <HAL_RCC_GetSysClockFreq+0x138>)
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	0b5b      	lsrs	r3, r3, #13
 8006560:	2207      	movs	r2, #7
 8006562:	4013      	ands	r3, r2
 8006564:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	3301      	adds	r3, #1
 800656a:	2280      	movs	r2, #128	; 0x80
 800656c:	0212      	lsls	r2, r2, #8
 800656e:	409a      	lsls	r2, r3
 8006570:	0013      	movs	r3, r2
 8006572:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006574:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006578:	0018      	movs	r0, r3
 800657a:	46bd      	mov	sp, r7
 800657c:	b00e      	add	sp, #56	; 0x38
 800657e:	bdb0      	pop	{r4, r5, r7, pc}
 8006580:	40021000 	.word	0x40021000
 8006584:	003d0900 	.word	0x003d0900
 8006588:	00f42400 	.word	0x00f42400
 800658c:	007a1200 	.word	0x007a1200
 8006590:	08007e6c 	.word	0x08007e6c

08006594 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800659c:	2017      	movs	r0, #23
 800659e:	183b      	adds	r3, r7, r0
 80065a0:	2200      	movs	r2, #0
 80065a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2220      	movs	r2, #32
 80065aa:	4013      	ands	r3, r2
 80065ac:	d100      	bne.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80065ae:	e0c2      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065b0:	4b98      	ldr	r3, [pc, #608]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b4:	2380      	movs	r3, #128	; 0x80
 80065b6:	055b      	lsls	r3, r3, #21
 80065b8:	4013      	ands	r3, r2
 80065ba:	d109      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065bc:	4b95      	ldr	r3, [pc, #596]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065c0:	4b94      	ldr	r3, [pc, #592]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065c2:	2180      	movs	r1, #128	; 0x80
 80065c4:	0549      	lsls	r1, r1, #21
 80065c6:	430a      	orrs	r2, r1
 80065c8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80065ca:	183b      	adds	r3, r7, r0
 80065cc:	2201      	movs	r2, #1
 80065ce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d0:	4b91      	ldr	r3, [pc, #580]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	2380      	movs	r3, #128	; 0x80
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	4013      	ands	r3, r2
 80065da:	d11a      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065dc:	4b8e      	ldr	r3, [pc, #568]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	4b8d      	ldr	r3, [pc, #564]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80065e2:	2180      	movs	r1, #128	; 0x80
 80065e4:	0049      	lsls	r1, r1, #1
 80065e6:	430a      	orrs	r2, r1
 80065e8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065ea:	f7fd fe17 	bl	800421c <HAL_GetTick>
 80065ee:	0003      	movs	r3, r0
 80065f0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f2:	e008      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f4:	f7fd fe12 	bl	800421c <HAL_GetTick>
 80065f8:	0002      	movs	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b64      	cmp	r3, #100	; 0x64
 8006600:	d901      	bls.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e102      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006606:	4b84      	ldr	r3, [pc, #528]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	2380      	movs	r3, #128	; 0x80
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	4013      	ands	r3, r2
 8006610:	d0f0      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006612:	4b80      	ldr	r3, [pc, #512]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	23c0      	movs	r3, #192	; 0xc0
 8006618:	039b      	lsls	r3, r3, #14
 800661a:	4013      	ands	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	23c0      	movs	r3, #192	; 0xc0
 8006624:	039b      	lsls	r3, r3, #14
 8006626:	4013      	ands	r3, r2
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	429a      	cmp	r2, r3
 800662c:	d013      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	23c0      	movs	r3, #192	; 0xc0
 8006634:	029b      	lsls	r3, r3, #10
 8006636:	401a      	ands	r2, r3
 8006638:	23c0      	movs	r3, #192	; 0xc0
 800663a:	029b      	lsls	r3, r3, #10
 800663c:	429a      	cmp	r2, r3
 800663e:	d10a      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006640:	4b74      	ldr	r3, [pc, #464]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	2380      	movs	r3, #128	; 0x80
 8006646:	029b      	lsls	r3, r3, #10
 8006648:	401a      	ands	r2, r3
 800664a:	2380      	movs	r3, #128	; 0x80
 800664c:	029b      	lsls	r3, r3, #10
 800664e:	429a      	cmp	r2, r3
 8006650:	d101      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e0da      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006656:	4b6f      	ldr	r3, [pc, #444]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006658:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800665a:	23c0      	movs	r3, #192	; 0xc0
 800665c:	029b      	lsls	r3, r3, #10
 800665e:	4013      	ands	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d03b      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	23c0      	movs	r3, #192	; 0xc0
 800666e:	029b      	lsls	r3, r3, #10
 8006670:	4013      	ands	r3, r2
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	429a      	cmp	r2, r3
 8006676:	d033      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2220      	movs	r2, #32
 800667e:	4013      	ands	r3, r2
 8006680:	d02e      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006682:	4b64      	ldr	r3, [pc, #400]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006686:	4a65      	ldr	r2, [pc, #404]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006688:	4013      	ands	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800668c:	4b61      	ldr	r3, [pc, #388]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800668e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006690:	4b60      	ldr	r3, [pc, #384]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006692:	2180      	movs	r1, #128	; 0x80
 8006694:	0309      	lsls	r1, r1, #12
 8006696:	430a      	orrs	r2, r1
 8006698:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800669a:	4b5e      	ldr	r3, [pc, #376]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800669c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800669e:	4b5d      	ldr	r3, [pc, #372]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066a0:	495f      	ldr	r1, [pc, #380]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80066a2:	400a      	ands	r2, r1
 80066a4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80066a6:	4b5b      	ldr	r3, [pc, #364]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	2380      	movs	r3, #128	; 0x80
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	4013      	ands	r3, r2
 80066b4:	d014      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b6:	f7fd fdb1 	bl	800421c <HAL_GetTick>
 80066ba:	0003      	movs	r3, r0
 80066bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066be:	e009      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066c0:	f7fd fdac 	bl	800421c <HAL_GetTick>
 80066c4:	0002      	movs	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	4a56      	ldr	r2, [pc, #344]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e09b      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066d4:	4b4f      	ldr	r3, [pc, #316]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4013      	ands	r3, r2
 80066de:	d0ef      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	23c0      	movs	r3, #192	; 0xc0
 80066e6:	029b      	lsls	r3, r3, #10
 80066e8:	401a      	ands	r2, r3
 80066ea:	23c0      	movs	r3, #192	; 0xc0
 80066ec:	029b      	lsls	r3, r3, #10
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d10c      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x178>
 80066f2:	4b48      	ldr	r3, [pc, #288]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a4c      	ldr	r2, [pc, #304]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	0019      	movs	r1, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	23c0      	movs	r3, #192	; 0xc0
 8006702:	039b      	lsls	r3, r3, #14
 8006704:	401a      	ands	r2, r3
 8006706:	4b43      	ldr	r3, [pc, #268]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006708:	430a      	orrs	r2, r1
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	4b41      	ldr	r3, [pc, #260]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800670e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	23c0      	movs	r3, #192	; 0xc0
 8006716:	029b      	lsls	r3, r3, #10
 8006718:	401a      	ands	r2, r3
 800671a:	4b3e      	ldr	r3, [pc, #248]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800671c:	430a      	orrs	r2, r1
 800671e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006720:	2317      	movs	r3, #23
 8006722:	18fb      	adds	r3, r7, r3
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d105      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800672a:	4b3a      	ldr	r3, [pc, #232]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800672c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800672e:	4b39      	ldr	r3, [pc, #228]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006730:	493e      	ldr	r1, [pc, #248]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006732:	400a      	ands	r2, r1
 8006734:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2201      	movs	r2, #1
 800673c:	4013      	ands	r3, r2
 800673e:	d009      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006740:	4b34      	ldr	r3, [pc, #208]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006744:	2203      	movs	r2, #3
 8006746:	4393      	bics	r3, r2
 8006748:	0019      	movs	r1, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	4b31      	ldr	r3, [pc, #196]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006750:	430a      	orrs	r2, r1
 8006752:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2202      	movs	r2, #2
 800675a:	4013      	ands	r3, r2
 800675c:	d009      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800675e:	4b2d      	ldr	r3, [pc, #180]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006762:	220c      	movs	r2, #12
 8006764:	4393      	bics	r3, r2
 8006766:	0019      	movs	r1, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	4b29      	ldr	r3, [pc, #164]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800676e:	430a      	orrs	r2, r1
 8006770:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2204      	movs	r2, #4
 8006778:	4013      	ands	r3, r2
 800677a:	d009      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800677c:	4b25      	ldr	r3, [pc, #148]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800677e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006780:	4a2b      	ldr	r2, [pc, #172]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006782:	4013      	ands	r3, r2
 8006784:	0019      	movs	r1, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	4b22      	ldr	r3, [pc, #136]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800678c:	430a      	orrs	r2, r1
 800678e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2208      	movs	r2, #8
 8006796:	4013      	ands	r3, r2
 8006798:	d009      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800679a:	4b1e      	ldr	r3, [pc, #120]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800679c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679e:	4a25      	ldr	r2, [pc, #148]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	0019      	movs	r1, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	695a      	ldr	r2, [r3, #20]
 80067a8:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067aa:	430a      	orrs	r2, r1
 80067ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	2380      	movs	r3, #128	; 0x80
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	4013      	ands	r3, r2
 80067b8:	d009      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067ba:	4b16      	ldr	r3, [pc, #88]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067be:	4a17      	ldr	r2, [pc, #92]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80067c0:	4013      	ands	r3, r2
 80067c2:	0019      	movs	r1, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699a      	ldr	r2, [r3, #24]
 80067c8:	4b12      	ldr	r3, [pc, #72]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067ca:	430a      	orrs	r2, r1
 80067cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2240      	movs	r2, #64	; 0x40
 80067d4:	4013      	ands	r3, r2
 80067d6:	d009      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067d8:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067dc:	4a16      	ldr	r2, [pc, #88]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80067de:	4013      	ands	r3, r2
 80067e0:	0019      	movs	r1, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1a      	ldr	r2, [r3, #32]
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067e8:	430a      	orrs	r2, r1
 80067ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2280      	movs	r2, #128	; 0x80
 80067f2:	4013      	ands	r3, r2
 80067f4:	d009      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80067f6:	4b07      	ldr	r3, [pc, #28]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fa:	4a10      	ldr	r2, [pc, #64]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	0019      	movs	r1, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	69da      	ldr	r2, [r3, #28]
 8006804:	4b03      	ldr	r3, [pc, #12]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006806:	430a      	orrs	r2, r1
 8006808:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	0018      	movs	r0, r3
 800680e:	46bd      	mov	sp, r7
 8006810:	b006      	add	sp, #24
 8006812:	bd80      	pop	{r7, pc}
 8006814:	40021000 	.word	0x40021000
 8006818:	40007000 	.word	0x40007000
 800681c:	fffcffff 	.word	0xfffcffff
 8006820:	fff7ffff 	.word	0xfff7ffff
 8006824:	00001388 	.word	0x00001388
 8006828:	ffcfffff 	.word	0xffcfffff
 800682c:	efffffff 	.word	0xefffffff
 8006830:	fffff3ff 	.word	0xfffff3ff
 8006834:	ffffcfff 	.word	0xffffcfff
 8006838:	fbffffff 	.word	0xfbffffff
 800683c:	fff3ffff 	.word	0xfff3ffff

08006840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e032      	b.n	80068b8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2239      	movs	r2, #57	; 0x39
 8006856:	5c9b      	ldrb	r3, [r3, r2]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d107      	bne.n	800686e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2238      	movs	r2, #56	; 0x38
 8006862:	2100      	movs	r1, #0
 8006864:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	0018      	movs	r0, r3
 800686a:	f7fd fc15 	bl	8004098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2239      	movs	r2, #57	; 0x39
 8006872:	2102      	movs	r1, #2
 8006874:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3304      	adds	r3, #4
 800687e:	0019      	movs	r1, r3
 8006880:	0010      	movs	r0, r2
 8006882:	f000 f93b 	bl	8006afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	223e      	movs	r2, #62	; 0x3e
 800688a:	2101      	movs	r1, #1
 800688c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	223a      	movs	r2, #58	; 0x3a
 8006892:	2101      	movs	r1, #1
 8006894:	5499      	strb	r1, [r3, r2]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	223b      	movs	r2, #59	; 0x3b
 800689a:	2101      	movs	r1, #1
 800689c:	5499      	strb	r1, [r3, r2]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	223c      	movs	r2, #60	; 0x3c
 80068a2:	2101      	movs	r1, #1
 80068a4:	5499      	strb	r1, [r3, r2]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	223d      	movs	r2, #61	; 0x3d
 80068aa:	2101      	movs	r1, #1
 80068ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2239      	movs	r2, #57	; 0x39
 80068b2:	2101      	movs	r1, #1
 80068b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	0018      	movs	r0, r3
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b002      	add	sp, #8
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2239      	movs	r2, #57	; 0x39
 80068cc:	5c9b      	ldrb	r3, [r3, r2]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d001      	beq.n	80068d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e033      	b.n	8006940 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2239      	movs	r2, #57	; 0x39
 80068dc:	2102      	movs	r1, #2
 80068de:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	2380      	movs	r3, #128	; 0x80
 80068e6:	05db      	lsls	r3, r3, #23
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d00e      	beq.n	800690a <HAL_TIM_Base_Start+0x4a>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a15      	ldr	r2, [pc, #84]	; (8006948 <HAL_TIM_Base_Start+0x88>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d009      	beq.n	800690a <HAL_TIM_Base_Start+0x4a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a14      	ldr	r2, [pc, #80]	; (800694c <HAL_TIM_Base_Start+0x8c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d004      	beq.n	800690a <HAL_TIM_Base_Start+0x4a>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a12      	ldr	r2, [pc, #72]	; (8006950 <HAL_TIM_Base_Start+0x90>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d111      	bne.n	800692e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	2207      	movs	r2, #7
 8006912:	4013      	ands	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2b06      	cmp	r3, #6
 800691a:	d010      	beq.n	800693e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2101      	movs	r1, #1
 8006928:	430a      	orrs	r2, r1
 800692a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800692c:	e007      	b.n	800693e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2101      	movs	r1, #1
 800693a:	430a      	orrs	r2, r1
 800693c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	0018      	movs	r0, r3
 8006942:	46bd      	mov	sp, r7
 8006944:	b004      	add	sp, #16
 8006946:	bd80      	pop	{r7, pc}
 8006948:	40000400 	.word	0x40000400
 800694c:	40010800 	.word	0x40010800
 8006950:	40011400 	.word	0x40011400

08006954 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800695e:	230f      	movs	r3, #15
 8006960:	18fb      	adds	r3, r7, r3
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2238      	movs	r2, #56	; 0x38
 800696a:	5c9b      	ldrb	r3, [r3, r2]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_TIM_ConfigClockSource+0x20>
 8006970:	2302      	movs	r3, #2
 8006972:	e0bc      	b.n	8006aee <HAL_TIM_ConfigClockSource+0x19a>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2238      	movs	r2, #56	; 0x38
 8006978:	2101      	movs	r1, #1
 800697a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2239      	movs	r2, #57	; 0x39
 8006980:	2102      	movs	r1, #2
 8006982:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2277      	movs	r2, #119	; 0x77
 8006990:	4393      	bics	r3, r2
 8006992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	4a58      	ldr	r2, [pc, #352]	; (8006af8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006998:	4013      	ands	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2280      	movs	r2, #128	; 0x80
 80069aa:	0192      	lsls	r2, r2, #6
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d040      	beq.n	8006a32 <HAL_TIM_ConfigClockSource+0xde>
 80069b0:	2280      	movs	r2, #128	; 0x80
 80069b2:	0192      	lsls	r2, r2, #6
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d900      	bls.n	80069ba <HAL_TIM_ConfigClockSource+0x66>
 80069b8:	e088      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x178>
 80069ba:	2280      	movs	r2, #128	; 0x80
 80069bc:	0152      	lsls	r2, r2, #5
 80069be:	4293      	cmp	r3, r2
 80069c0:	d100      	bne.n	80069c4 <HAL_TIM_ConfigClockSource+0x70>
 80069c2:	e088      	b.n	8006ad6 <HAL_TIM_ConfigClockSource+0x182>
 80069c4:	2280      	movs	r2, #128	; 0x80
 80069c6:	0152      	lsls	r2, r2, #5
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d900      	bls.n	80069ce <HAL_TIM_ConfigClockSource+0x7a>
 80069cc:	e07e      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x178>
 80069ce:	2b70      	cmp	r3, #112	; 0x70
 80069d0:	d018      	beq.n	8006a04 <HAL_TIM_ConfigClockSource+0xb0>
 80069d2:	d900      	bls.n	80069d6 <HAL_TIM_ConfigClockSource+0x82>
 80069d4:	e07a      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x178>
 80069d6:	2b60      	cmp	r3, #96	; 0x60
 80069d8:	d04f      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x126>
 80069da:	d900      	bls.n	80069de <HAL_TIM_ConfigClockSource+0x8a>
 80069dc:	e076      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x178>
 80069de:	2b50      	cmp	r3, #80	; 0x50
 80069e0:	d03b      	beq.n	8006a5a <HAL_TIM_ConfigClockSource+0x106>
 80069e2:	d900      	bls.n	80069e6 <HAL_TIM_ConfigClockSource+0x92>
 80069e4:	e072      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x178>
 80069e6:	2b40      	cmp	r3, #64	; 0x40
 80069e8:	d057      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x146>
 80069ea:	d900      	bls.n	80069ee <HAL_TIM_ConfigClockSource+0x9a>
 80069ec:	e06e      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x178>
 80069ee:	2b30      	cmp	r3, #48	; 0x30
 80069f0:	d063      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x166>
 80069f2:	d86b      	bhi.n	8006acc <HAL_TIM_ConfigClockSource+0x178>
 80069f4:	2b20      	cmp	r3, #32
 80069f6:	d060      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x166>
 80069f8:	d868      	bhi.n	8006acc <HAL_TIM_ConfigClockSource+0x178>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d05d      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x166>
 80069fe:	2b10      	cmp	r3, #16
 8006a00:	d05b      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x166>
 8006a02:	e063      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6818      	ldr	r0, [r3, #0]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	6899      	ldr	r1, [r3, #8]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f000 f94a 	bl	8006cac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2277      	movs	r2, #119	; 0x77
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	609a      	str	r2, [r3, #8]
      break;
 8006a30:	e052      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6818      	ldr	r0, [r3, #0]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	6899      	ldr	r1, [r3, #8]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f000 f933 	bl	8006cac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2180      	movs	r1, #128	; 0x80
 8006a52:	01c9      	lsls	r1, r1, #7
 8006a54:	430a      	orrs	r2, r1
 8006a56:	609a      	str	r2, [r3, #8]
      break;
 8006a58:	e03e      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	6859      	ldr	r1, [r3, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	001a      	movs	r2, r3
 8006a68:	f000 f8a6 	bl	8006bb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2150      	movs	r1, #80	; 0x50
 8006a72:	0018      	movs	r0, r3
 8006a74:	f000 f900 	bl	8006c78 <TIM_ITRx_SetConfig>
      break;
 8006a78:	e02e      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	6859      	ldr	r1, [r3, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	001a      	movs	r2, r3
 8006a88:	f000 f8c4 	bl	8006c14 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2160      	movs	r1, #96	; 0x60
 8006a92:	0018      	movs	r0, r3
 8006a94:	f000 f8f0 	bl	8006c78 <TIM_ITRx_SetConfig>
      break;
 8006a98:	e01e      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	6859      	ldr	r1, [r3, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	001a      	movs	r2, r3
 8006aa8:	f000 f886 	bl	8006bb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2140      	movs	r1, #64	; 0x40
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	f000 f8e0 	bl	8006c78 <TIM_ITRx_SetConfig>
      break;
 8006ab8:	e00e      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	0019      	movs	r1, r3
 8006ac4:	0010      	movs	r0, r2
 8006ac6:	f000 f8d7 	bl	8006c78 <TIM_ITRx_SetConfig>
      break;
 8006aca:	e005      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006acc:	230f      	movs	r3, #15
 8006ace:	18fb      	adds	r3, r7, r3
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	701a      	strb	r2, [r3, #0]
      break;
 8006ad4:	e000      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006ad6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2239      	movs	r2, #57	; 0x39
 8006adc:	2101      	movs	r1, #1
 8006ade:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2238      	movs	r2, #56	; 0x38
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	5499      	strb	r1, [r3, r2]

  return status;
 8006ae8:	230f      	movs	r3, #15
 8006aea:	18fb      	adds	r3, r7, r3
 8006aec:	781b      	ldrb	r3, [r3, #0]
}
 8006aee:	0018      	movs	r0, r3
 8006af0:	46bd      	mov	sp, r7
 8006af2:	b004      	add	sp, #16
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	46c0      	nop			; (mov r8, r8)
 8006af8:	ffff00ff 	.word	0xffff00ff

08006afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	2380      	movs	r3, #128	; 0x80
 8006b10:	05db      	lsls	r3, r3, #23
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d00b      	beq.n	8006b2e <TIM_Base_SetConfig+0x32>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a23      	ldr	r2, [pc, #140]	; (8006ba8 <TIM_Base_SetConfig+0xac>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d007      	beq.n	8006b2e <TIM_Base_SetConfig+0x32>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a22      	ldr	r2, [pc, #136]	; (8006bac <TIM_Base_SetConfig+0xb0>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d003      	beq.n	8006b2e <TIM_Base_SetConfig+0x32>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a21      	ldr	r2, [pc, #132]	; (8006bb0 <TIM_Base_SetConfig+0xb4>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d108      	bne.n	8006b40 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2270      	movs	r2, #112	; 0x70
 8006b32:	4393      	bics	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	2380      	movs	r3, #128	; 0x80
 8006b44:	05db      	lsls	r3, r3, #23
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d00b      	beq.n	8006b62 <TIM_Base_SetConfig+0x66>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a16      	ldr	r2, [pc, #88]	; (8006ba8 <TIM_Base_SetConfig+0xac>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d007      	beq.n	8006b62 <TIM_Base_SetConfig+0x66>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a15      	ldr	r2, [pc, #84]	; (8006bac <TIM_Base_SetConfig+0xb0>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d003      	beq.n	8006b62 <TIM_Base_SetConfig+0x66>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a14      	ldr	r2, [pc, #80]	; (8006bb0 <TIM_Base_SetConfig+0xb4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d108      	bne.n	8006b74 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4a13      	ldr	r2, [pc, #76]	; (8006bb4 <TIM_Base_SetConfig+0xb8>)
 8006b66:	4013      	ands	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2280      	movs	r2, #128	; 0x80
 8006b78:	4393      	bics	r3, r2
 8006b7a:	001a      	movs	r2, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	615a      	str	r2, [r3, #20]
}
 8006ba0:	46c0      	nop			; (mov r8, r8)
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	b004      	add	sp, #16
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40000400 	.word	0x40000400
 8006bac:	40010800 	.word	0x40010800
 8006bb0:	40011400 	.word	0x40011400
 8006bb4:	fffffcff 	.word	0xfffffcff

08006bb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	4393      	bics	r3, r2
 8006bd2:	001a      	movs	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	22f0      	movs	r2, #240	; 0xf0
 8006be2:	4393      	bics	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	220a      	movs	r2, #10
 8006bf4:	4393      	bics	r3, r2
 8006bf6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	621a      	str	r2, [r3, #32]
}
 8006c0c:	46c0      	nop			; (mov r8, r8)
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	b006      	add	sp, #24
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	2210      	movs	r2, #16
 8006c26:	4393      	bics	r3, r2
 8006c28:	001a      	movs	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	4a0d      	ldr	r2, [pc, #52]	; (8006c74 <TIM_TI2_ConfigInputStage+0x60>)
 8006c3e:	4013      	ands	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	031b      	lsls	r3, r3, #12
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	22a0      	movs	r2, #160	; 0xa0
 8006c50:	4393      	bics	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	011b      	lsls	r3, r3, #4
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	b006      	add	sp, #24
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	46c0      	nop			; (mov r8, r8)
 8006c74:	ffff0fff 	.word	0xffff0fff

08006c78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2270      	movs	r2, #112	; 0x70
 8006c8c:	4393      	bics	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	2207      	movs	r2, #7
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	609a      	str	r2, [r3, #8]
}
 8006ca2:	46c0      	nop			; (mov r8, r8)
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	b004      	add	sp, #16
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	4a09      	ldr	r2, [pc, #36]	; (8006ce8 <TIM_ETR_SetConfig+0x3c>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	021a      	lsls	r2, r3, #8
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	609a      	str	r2, [r3, #8]
}
 8006ce0:	46c0      	nop			; (mov r8, r8)
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	b006      	add	sp, #24
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	ffff00ff 	.word	0xffff00ff

08006cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2238      	movs	r2, #56	; 0x38
 8006cfa:	5c9b      	ldrb	r3, [r3, r2]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d101      	bne.n	8006d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d00:	2302      	movs	r3, #2
 8006d02:	e047      	b.n	8006d94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2238      	movs	r2, #56	; 0x38
 8006d08:	2101      	movs	r1, #1
 8006d0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2239      	movs	r2, #57	; 0x39
 8006d10:	2102      	movs	r1, #2
 8006d12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2270      	movs	r2, #112	; 0x70
 8006d28:	4393      	bics	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	2380      	movs	r3, #128	; 0x80
 8006d44:	05db      	lsls	r3, r3, #23
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d00e      	beq.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a13      	ldr	r2, [pc, #76]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d009      	beq.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a11      	ldr	r2, [pc, #68]	; (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d004      	beq.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a10      	ldr	r2, [pc, #64]	; (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d10c      	bne.n	8006d82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2280      	movs	r2, #128	; 0x80
 8006d6c:	4393      	bics	r3, r2
 8006d6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2239      	movs	r2, #57	; 0x39
 8006d86:	2101      	movs	r1, #1
 8006d88:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2238      	movs	r2, #56	; 0x38
 8006d8e:	2100      	movs	r1, #0
 8006d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	0018      	movs	r0, r3
 8006d96:	46bd      	mov	sp, r7
 8006d98:	b004      	add	sp, #16
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	40000400 	.word	0x40000400
 8006da0:	40010800 	.word	0x40010800
 8006da4:	40011400 	.word	0x40011400

08006da8 <__errno>:
 8006da8:	4b01      	ldr	r3, [pc, #4]	; (8006db0 <__errno+0x8>)
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	4770      	bx	lr
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	2000000c 	.word	0x2000000c

08006db4 <__libc_init_array>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	2600      	movs	r6, #0
 8006db8:	4d0c      	ldr	r5, [pc, #48]	; (8006dec <__libc_init_array+0x38>)
 8006dba:	4c0d      	ldr	r4, [pc, #52]	; (8006df0 <__libc_init_array+0x3c>)
 8006dbc:	1b64      	subs	r4, r4, r5
 8006dbe:	10a4      	asrs	r4, r4, #2
 8006dc0:	42a6      	cmp	r6, r4
 8006dc2:	d109      	bne.n	8006dd8 <__libc_init_array+0x24>
 8006dc4:	2600      	movs	r6, #0
 8006dc6:	f000 ff9b 	bl	8007d00 <_init>
 8006dca:	4d0a      	ldr	r5, [pc, #40]	; (8006df4 <__libc_init_array+0x40>)
 8006dcc:	4c0a      	ldr	r4, [pc, #40]	; (8006df8 <__libc_init_array+0x44>)
 8006dce:	1b64      	subs	r4, r4, r5
 8006dd0:	10a4      	asrs	r4, r4, #2
 8006dd2:	42a6      	cmp	r6, r4
 8006dd4:	d105      	bne.n	8006de2 <__libc_init_array+0x2e>
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
 8006dd8:	00b3      	lsls	r3, r6, #2
 8006dda:	58eb      	ldr	r3, [r5, r3]
 8006ddc:	4798      	blx	r3
 8006dde:	3601      	adds	r6, #1
 8006de0:	e7ee      	b.n	8006dc0 <__libc_init_array+0xc>
 8006de2:	00b3      	lsls	r3, r6, #2
 8006de4:	58eb      	ldr	r3, [r5, r3]
 8006de6:	4798      	blx	r3
 8006de8:	3601      	adds	r6, #1
 8006dea:	e7f2      	b.n	8006dd2 <__libc_init_array+0x1e>
 8006dec:	08007ec0 	.word	0x08007ec0
 8006df0:	08007ec0 	.word	0x08007ec0
 8006df4:	08007ec0 	.word	0x08007ec0
 8006df8:	08007ec4 	.word	0x08007ec4

08006dfc <memset>:
 8006dfc:	0003      	movs	r3, r0
 8006dfe:	1882      	adds	r2, r0, r2
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d100      	bne.n	8006e06 <memset+0xa>
 8006e04:	4770      	bx	lr
 8006e06:	7019      	strb	r1, [r3, #0]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	e7f9      	b.n	8006e00 <memset+0x4>

08006e0c <pow>:
 8006e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e0e:	001d      	movs	r5, r3
 8006e10:	0014      	movs	r4, r2
 8006e12:	9000      	str	r0, [sp, #0]
 8006e14:	9101      	str	r1, [sp, #4]
 8006e16:	f000 f8b1 	bl	8006f7c <__ieee754_pow>
 8006e1a:	4b54      	ldr	r3, [pc, #336]	; (8006f6c <pow+0x160>)
 8006e1c:	0006      	movs	r6, r0
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	000f      	movs	r7, r1
 8006e22:	b25b      	sxtb	r3, r3
 8006e24:	3301      	adds	r3, #1
 8006e26:	d018      	beq.n	8006e5a <pow+0x4e>
 8006e28:	0022      	movs	r2, r4
 8006e2a:	002b      	movs	r3, r5
 8006e2c:	0020      	movs	r0, r4
 8006e2e:	0029      	movs	r1, r5
 8006e30:	f7fb fd18 	bl	8002864 <__aeabi_dcmpun>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d110      	bne.n	8006e5a <pow+0x4e>
 8006e38:	9a00      	ldr	r2, [sp, #0]
 8006e3a:	9b01      	ldr	r3, [sp, #4]
 8006e3c:	0010      	movs	r0, r2
 8006e3e:	0019      	movs	r1, r3
 8006e40:	f7fb fd10 	bl	8002864 <__aeabi_dcmpun>
 8006e44:	2200      	movs	r2, #0
 8006e46:	2300      	movs	r3, #0
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d00a      	beq.n	8006e62 <pow+0x56>
 8006e4c:	0020      	movs	r0, r4
 8006e4e:	0029      	movs	r1, r5
 8006e50:	f7f9 f9f6 	bl	8000240 <__aeabi_dcmpeq>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d000      	beq.n	8006e5a <pow+0x4e>
 8006e58:	e084      	b.n	8006f64 <pow+0x158>
 8006e5a:	0030      	movs	r0, r6
 8006e5c:	0039      	movs	r1, r7
 8006e5e:	b003      	add	sp, #12
 8006e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e62:	9800      	ldr	r0, [sp, #0]
 8006e64:	9901      	ldr	r1, [sp, #4]
 8006e66:	f7f9 f9eb 	bl	8000240 <__aeabi_dcmpeq>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d01c      	beq.n	8006ea8 <pow+0x9c>
 8006e6e:	2200      	movs	r2, #0
 8006e70:	2300      	movs	r3, #0
 8006e72:	0020      	movs	r0, r4
 8006e74:	0029      	movs	r1, r5
 8006e76:	f7f9 f9e3 	bl	8000240 <__aeabi_dcmpeq>
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d172      	bne.n	8006f64 <pow+0x158>
 8006e7e:	0020      	movs	r0, r4
 8006e80:	0029      	movs	r1, r5
 8006e82:	f000 fe33 	bl	8007aec <finite>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d0e7      	beq.n	8006e5a <pow+0x4e>
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	0020      	movs	r0, r4
 8006e90:	0029      	movs	r1, r5
 8006e92:	f7f9 f9db 	bl	800024c <__aeabi_dcmplt>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d0df      	beq.n	8006e5a <pow+0x4e>
 8006e9a:	f7ff ff85 	bl	8006da8 <__errno>
 8006e9e:	2321      	movs	r3, #33	; 0x21
 8006ea0:	2600      	movs	r6, #0
 8006ea2:	6003      	str	r3, [r0, #0]
 8006ea4:	4f32      	ldr	r7, [pc, #200]	; (8006f70 <pow+0x164>)
 8006ea6:	e7d8      	b.n	8006e5a <pow+0x4e>
 8006ea8:	0030      	movs	r0, r6
 8006eaa:	0039      	movs	r1, r7
 8006eac:	f000 fe1e 	bl	8007aec <finite>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d139      	bne.n	8006f28 <pow+0x11c>
 8006eb4:	9800      	ldr	r0, [sp, #0]
 8006eb6:	9901      	ldr	r1, [sp, #4]
 8006eb8:	f000 fe18 	bl	8007aec <finite>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d033      	beq.n	8006f28 <pow+0x11c>
 8006ec0:	0020      	movs	r0, r4
 8006ec2:	0029      	movs	r1, r5
 8006ec4:	f000 fe12 	bl	8007aec <finite>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d02d      	beq.n	8006f28 <pow+0x11c>
 8006ecc:	0032      	movs	r2, r6
 8006ece:	003b      	movs	r3, r7
 8006ed0:	0030      	movs	r0, r6
 8006ed2:	0039      	movs	r1, r7
 8006ed4:	f7fb fcc6 	bl	8002864 <__aeabi_dcmpun>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d00c      	beq.n	8006ef6 <pow+0xea>
 8006edc:	f7ff ff64 	bl	8006da8 <__errno>
 8006ee0:	2321      	movs	r3, #33	; 0x21
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	6003      	str	r3, [r0, #0]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	0010      	movs	r0, r2
 8006eea:	0019      	movs	r1, r3
 8006eec:	f7fa fab6 	bl	800145c <__aeabi_ddiv>
 8006ef0:	0006      	movs	r6, r0
 8006ef2:	000f      	movs	r7, r1
 8006ef4:	e7b1      	b.n	8006e5a <pow+0x4e>
 8006ef6:	f7ff ff57 	bl	8006da8 <__errno>
 8006efa:	2322      	movs	r3, #34	; 0x22
 8006efc:	2200      	movs	r2, #0
 8006efe:	6003      	str	r3, [r0, #0]
 8006f00:	2300      	movs	r3, #0
 8006f02:	9800      	ldr	r0, [sp, #0]
 8006f04:	9901      	ldr	r1, [sp, #4]
 8006f06:	f7f9 f9a1 	bl	800024c <__aeabi_dcmplt>
 8006f0a:	2600      	movs	r6, #0
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d009      	beq.n	8006f24 <pow+0x118>
 8006f10:	0020      	movs	r0, r4
 8006f12:	0029      	movs	r1, r5
 8006f14:	f000 fdf8 	bl	8007b08 <rint>
 8006f18:	0022      	movs	r2, r4
 8006f1a:	002b      	movs	r3, r5
 8006f1c:	f7f9 f990 	bl	8000240 <__aeabi_dcmpeq>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d0bf      	beq.n	8006ea4 <pow+0x98>
 8006f24:	4f13      	ldr	r7, [pc, #76]	; (8006f74 <pow+0x168>)
 8006f26:	e798      	b.n	8006e5a <pow+0x4e>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	0030      	movs	r0, r6
 8006f2e:	0039      	movs	r1, r7
 8006f30:	f7f9 f986 	bl	8000240 <__aeabi_dcmpeq>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d100      	bne.n	8006f3a <pow+0x12e>
 8006f38:	e78f      	b.n	8006e5a <pow+0x4e>
 8006f3a:	9800      	ldr	r0, [sp, #0]
 8006f3c:	9901      	ldr	r1, [sp, #4]
 8006f3e:	f000 fdd5 	bl	8007aec <finite>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d100      	bne.n	8006f48 <pow+0x13c>
 8006f46:	e788      	b.n	8006e5a <pow+0x4e>
 8006f48:	0020      	movs	r0, r4
 8006f4a:	0029      	movs	r1, r5
 8006f4c:	f000 fdce 	bl	8007aec <finite>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d100      	bne.n	8006f56 <pow+0x14a>
 8006f54:	e781      	b.n	8006e5a <pow+0x4e>
 8006f56:	f7ff ff27 	bl	8006da8 <__errno>
 8006f5a:	2322      	movs	r3, #34	; 0x22
 8006f5c:	2600      	movs	r6, #0
 8006f5e:	2700      	movs	r7, #0
 8006f60:	6003      	str	r3, [r0, #0]
 8006f62:	e77a      	b.n	8006e5a <pow+0x4e>
 8006f64:	2600      	movs	r6, #0
 8006f66:	4f04      	ldr	r7, [pc, #16]	; (8006f78 <pow+0x16c>)
 8006f68:	e777      	b.n	8006e5a <pow+0x4e>
 8006f6a:	46c0      	nop			; (mov r8, r8)
 8006f6c:	20000070 	.word	0x20000070
 8006f70:	fff00000 	.word	0xfff00000
 8006f74:	7ff00000 	.word	0x7ff00000
 8006f78:	3ff00000 	.word	0x3ff00000

08006f7c <__ieee754_pow>:
 8006f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f7e:	b095      	sub	sp, #84	; 0x54
 8006f80:	9202      	str	r2, [sp, #8]
 8006f82:	9303      	str	r3, [sp, #12]
 8006f84:	9b03      	ldr	r3, [sp, #12]
 8006f86:	9a03      	ldr	r2, [sp, #12]
 8006f88:	9304      	str	r3, [sp, #16]
 8006f8a:	9b02      	ldr	r3, [sp, #8]
 8006f8c:	0055      	lsls	r5, r2, #1
 8006f8e:	001a      	movs	r2, r3
 8006f90:	086d      	lsrs	r5, r5, #1
 8006f92:	0007      	movs	r7, r0
 8006f94:	000e      	movs	r6, r1
 8006f96:	432a      	orrs	r2, r5
 8006f98:	d101      	bne.n	8006f9e <__ieee754_pow+0x22>
 8006f9a:	f000 fcb6 	bl	800790a <__ieee754_pow+0x98e>
 8006f9e:	4a82      	ldr	r2, [pc, #520]	; (80071a8 <__ieee754_pow+0x22c>)
 8006fa0:	004c      	lsls	r4, r1, #1
 8006fa2:	9108      	str	r1, [sp, #32]
 8006fa4:	9000      	str	r0, [sp, #0]
 8006fa6:	0864      	lsrs	r4, r4, #1
 8006fa8:	4294      	cmp	r4, r2
 8006faa:	dc0d      	bgt.n	8006fc8 <__ieee754_pow+0x4c>
 8006fac:	d104      	bne.n	8006fb8 <__ieee754_pow+0x3c>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d110      	bne.n	8006fd4 <__ieee754_pow+0x58>
 8006fb2:	42a5      	cmp	r5, r4
 8006fb4:	dd03      	ble.n	8006fbe <__ieee754_pow+0x42>
 8006fb6:	e00d      	b.n	8006fd4 <__ieee754_pow+0x58>
 8006fb8:	4a7b      	ldr	r2, [pc, #492]	; (80071a8 <__ieee754_pow+0x22c>)
 8006fba:	4295      	cmp	r5, r2
 8006fbc:	dc04      	bgt.n	8006fc8 <__ieee754_pow+0x4c>
 8006fbe:	4a7a      	ldr	r2, [pc, #488]	; (80071a8 <__ieee754_pow+0x22c>)
 8006fc0:	4295      	cmp	r5, r2
 8006fc2:	d10d      	bne.n	8006fe0 <__ieee754_pow+0x64>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <__ieee754_pow+0x64>
 8006fc8:	4b78      	ldr	r3, [pc, #480]	; (80071ac <__ieee754_pow+0x230>)
 8006fca:	18e4      	adds	r4, r4, r3
 8006fcc:	4327      	orrs	r7, r4
 8006fce:	d101      	bne.n	8006fd4 <__ieee754_pow+0x58>
 8006fd0:	f000 fc9b 	bl	800790a <__ieee754_pow+0x98e>
 8006fd4:	4876      	ldr	r0, [pc, #472]	; (80071b0 <__ieee754_pow+0x234>)
 8006fd6:	f000 fd91 	bl	8007afc <nan>
 8006fda:	9000      	str	r0, [sp, #0]
 8006fdc:	9101      	str	r1, [sp, #4]
 8006fde:	e092      	b.n	8007106 <__ieee754_pow+0x18a>
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	9206      	str	r2, [sp, #24]
 8006fe4:	2e00      	cmp	r6, #0
 8006fe6:	da69      	bge.n	80070bc <__ieee754_pow+0x140>
 8006fe8:	4a72      	ldr	r2, [pc, #456]	; (80071b4 <__ieee754_pow+0x238>)
 8006fea:	4295      	cmp	r5, r2
 8006fec:	dc64      	bgt.n	80070b8 <__ieee754_pow+0x13c>
 8006fee:	4a72      	ldr	r2, [pc, #456]	; (80071b8 <__ieee754_pow+0x23c>)
 8006ff0:	4295      	cmp	r5, r2
 8006ff2:	dd11      	ble.n	8007018 <__ieee754_pow+0x9c>
 8006ff4:	4971      	ldr	r1, [pc, #452]	; (80071bc <__ieee754_pow+0x240>)
 8006ff6:	152a      	asrs	r2, r5, #20
 8006ff8:	1852      	adds	r2, r2, r1
 8006ffa:	2a14      	cmp	r2, #20
 8006ffc:	dd3c      	ble.n	8007078 <__ieee754_pow+0xfc>
 8006ffe:	2134      	movs	r1, #52	; 0x34
 8007000:	1a8a      	subs	r2, r1, r2
 8007002:	9902      	ldr	r1, [sp, #8]
 8007004:	40d1      	lsrs	r1, r2
 8007006:	0008      	movs	r0, r1
 8007008:	4090      	lsls	r0, r2
 800700a:	4298      	cmp	r0, r3
 800700c:	d104      	bne.n	8007018 <__ieee754_pow+0x9c>
 800700e:	2201      	movs	r2, #1
 8007010:	4011      	ands	r1, r2
 8007012:	1892      	adds	r2, r2, r2
 8007014:	1a52      	subs	r2, r2, r1
 8007016:	9206      	str	r2, [sp, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d03c      	beq.n	8007096 <__ieee754_pow+0x11a>
 800701c:	0038      	movs	r0, r7
 800701e:	0031      	movs	r1, r6
 8007020:	f000 fd60 	bl	8007ae4 <fabs>
 8007024:	9000      	str	r0, [sp, #0]
 8007026:	9101      	str	r1, [sp, #4]
 8007028:	2f00      	cmp	r7, #0
 800702a:	d000      	beq.n	800702e <__ieee754_pow+0xb2>
 800702c:	e094      	b.n	8007158 <__ieee754_pow+0x1dc>
 800702e:	2c00      	cmp	r4, #0
 8007030:	d005      	beq.n	800703e <__ieee754_pow+0xc2>
 8007032:	4a63      	ldr	r2, [pc, #396]	; (80071c0 <__ieee754_pow+0x244>)
 8007034:	00b3      	lsls	r3, r6, #2
 8007036:	089b      	lsrs	r3, r3, #2
 8007038:	4293      	cmp	r3, r2
 800703a:	d000      	beq.n	800703e <__ieee754_pow+0xc2>
 800703c:	e08c      	b.n	8007158 <__ieee754_pow+0x1dc>
 800703e:	9b04      	ldr	r3, [sp, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	da07      	bge.n	8007054 <__ieee754_pow+0xd8>
 8007044:	9a00      	ldr	r2, [sp, #0]
 8007046:	9b01      	ldr	r3, [sp, #4]
 8007048:	2000      	movs	r0, #0
 800704a:	495d      	ldr	r1, [pc, #372]	; (80071c0 <__ieee754_pow+0x244>)
 800704c:	f7fa fa06 	bl	800145c <__aeabi_ddiv>
 8007050:	9000      	str	r0, [sp, #0]
 8007052:	9101      	str	r1, [sp, #4]
 8007054:	9b08      	ldr	r3, [sp, #32]
 8007056:	2b00      	cmp	r3, #0
 8007058:	da55      	bge.n	8007106 <__ieee754_pow+0x18a>
 800705a:	4b54      	ldr	r3, [pc, #336]	; (80071ac <__ieee754_pow+0x230>)
 800705c:	18e4      	adds	r4, r4, r3
 800705e:	9b06      	ldr	r3, [sp, #24]
 8007060:	431c      	orrs	r4, r3
 8007062:	d000      	beq.n	8007066 <__ieee754_pow+0xea>
 8007064:	e06c      	b.n	8007140 <__ieee754_pow+0x1c4>
 8007066:	9a00      	ldr	r2, [sp, #0]
 8007068:	9b01      	ldr	r3, [sp, #4]
 800706a:	0010      	movs	r0, r2
 800706c:	0019      	movs	r1, r3
 800706e:	f7fb f867 	bl	8002140 <__aeabi_dsub>
 8007072:	0002      	movs	r2, r0
 8007074:	000b      	movs	r3, r1
 8007076:	e01c      	b.n	80070b2 <__ieee754_pow+0x136>
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1cf      	bne.n	800701c <__ieee754_pow+0xa0>
 800707c:	3314      	adds	r3, #20
 800707e:	1a9a      	subs	r2, r3, r2
 8007080:	002b      	movs	r3, r5
 8007082:	4113      	asrs	r3, r2
 8007084:	0019      	movs	r1, r3
 8007086:	4091      	lsls	r1, r2
 8007088:	42a9      	cmp	r1, r5
 800708a:	d104      	bne.n	8007096 <__ieee754_pow+0x11a>
 800708c:	2201      	movs	r2, #1
 800708e:	4013      	ands	r3, r2
 8007090:	1892      	adds	r2, r2, r2
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	9306      	str	r3, [sp, #24]
 8007096:	4b4a      	ldr	r3, [pc, #296]	; (80071c0 <__ieee754_pow+0x244>)
 8007098:	429d      	cmp	r5, r3
 800709a:	d138      	bne.n	800710e <__ieee754_pow+0x192>
 800709c:	0038      	movs	r0, r7
 800709e:	0031      	movs	r1, r6
 80070a0:	9b04      	ldr	r3, [sp, #16]
 80070a2:	9000      	str	r0, [sp, #0]
 80070a4:	9101      	str	r1, [sp, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	da2d      	bge.n	8007106 <__ieee754_pow+0x18a>
 80070aa:	003a      	movs	r2, r7
 80070ac:	0033      	movs	r3, r6
 80070ae:	2000      	movs	r0, #0
 80070b0:	4943      	ldr	r1, [pc, #268]	; (80071c0 <__ieee754_pow+0x244>)
 80070b2:	f7fa f9d3 	bl	800145c <__aeabi_ddiv>
 80070b6:	e790      	b.n	8006fda <__ieee754_pow+0x5e>
 80070b8:	2202      	movs	r2, #2
 80070ba:	9206      	str	r2, [sp, #24]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1ad      	bne.n	800701c <__ieee754_pow+0xa0>
 80070c0:	4b39      	ldr	r3, [pc, #228]	; (80071a8 <__ieee754_pow+0x22c>)
 80070c2:	429d      	cmp	r5, r3
 80070c4:	d1e7      	bne.n	8007096 <__ieee754_pow+0x11a>
 80070c6:	4b39      	ldr	r3, [pc, #228]	; (80071ac <__ieee754_pow+0x230>)
 80070c8:	18e3      	adds	r3, r4, r3
 80070ca:	431f      	orrs	r7, r3
 80070cc:	d101      	bne.n	80070d2 <__ieee754_pow+0x156>
 80070ce:	f000 fc1c 	bl	800790a <__ieee754_pow+0x98e>
 80070d2:	4b39      	ldr	r3, [pc, #228]	; (80071b8 <__ieee754_pow+0x23c>)
 80070d4:	429c      	cmp	r4, r3
 80070d6:	dd0b      	ble.n	80070f0 <__ieee754_pow+0x174>
 80070d8:	9b02      	ldr	r3, [sp, #8]
 80070da:	9c03      	ldr	r4, [sp, #12]
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	9401      	str	r4, [sp, #4]
 80070e0:	9b04      	ldr	r3, [sp, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	da0f      	bge.n	8007106 <__ieee754_pow+0x18a>
 80070e6:	2300      	movs	r3, #0
 80070e8:	2400      	movs	r4, #0
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	9401      	str	r4, [sp, #4]
 80070ee:	e00a      	b.n	8007106 <__ieee754_pow+0x18a>
 80070f0:	9b04      	ldr	r3, [sp, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	daf7      	bge.n	80070e6 <__ieee754_pow+0x16a>
 80070f6:	2280      	movs	r2, #128	; 0x80
 80070f8:	0612      	lsls	r2, r2, #24
 80070fa:	4694      	mov	ip, r2
 80070fc:	9b02      	ldr	r3, [sp, #8]
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	9b03      	ldr	r3, [sp, #12]
 8007102:	4463      	add	r3, ip
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	9800      	ldr	r0, [sp, #0]
 8007108:	9901      	ldr	r1, [sp, #4]
 800710a:	b015      	add	sp, #84	; 0x54
 800710c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800710e:	2380      	movs	r3, #128	; 0x80
 8007110:	9a04      	ldr	r2, [sp, #16]
 8007112:	05db      	lsls	r3, r3, #23
 8007114:	429a      	cmp	r2, r3
 8007116:	d106      	bne.n	8007126 <__ieee754_pow+0x1aa>
 8007118:	003a      	movs	r2, r7
 800711a:	0033      	movs	r3, r6
 800711c:	0038      	movs	r0, r7
 800711e:	0031      	movs	r1, r6
 8007120:	f7fa fda2 	bl	8001c68 <__aeabi_dmul>
 8007124:	e759      	b.n	8006fda <__ieee754_pow+0x5e>
 8007126:	4b27      	ldr	r3, [pc, #156]	; (80071c4 <__ieee754_pow+0x248>)
 8007128:	9a04      	ldr	r2, [sp, #16]
 800712a:	429a      	cmp	r2, r3
 800712c:	d000      	beq.n	8007130 <__ieee754_pow+0x1b4>
 800712e:	e775      	b.n	800701c <__ieee754_pow+0xa0>
 8007130:	2e00      	cmp	r6, #0
 8007132:	da00      	bge.n	8007136 <__ieee754_pow+0x1ba>
 8007134:	e772      	b.n	800701c <__ieee754_pow+0xa0>
 8007136:	0038      	movs	r0, r7
 8007138:	0031      	movs	r1, r6
 800713a:	f000 fc1f 	bl	800797c <__ieee754_sqrt>
 800713e:	e74c      	b.n	8006fda <__ieee754_pow+0x5e>
 8007140:	9b06      	ldr	r3, [sp, #24]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d1df      	bne.n	8007106 <__ieee754_pow+0x18a>
 8007146:	9800      	ldr	r0, [sp, #0]
 8007148:	2180      	movs	r1, #128	; 0x80
 800714a:	0002      	movs	r2, r0
 800714c:	9801      	ldr	r0, [sp, #4]
 800714e:	0609      	lsls	r1, r1, #24
 8007150:	1843      	adds	r3, r0, r1
 8007152:	9200      	str	r2, [sp, #0]
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	e7d6      	b.n	8007106 <__ieee754_pow+0x18a>
 8007158:	0ff3      	lsrs	r3, r6, #31
 800715a:	3b01      	subs	r3, #1
 800715c:	9310      	str	r3, [sp, #64]	; 0x40
 800715e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007160:	9b06      	ldr	r3, [sp, #24]
 8007162:	4313      	orrs	r3, r2
 8007164:	d104      	bne.n	8007170 <__ieee754_pow+0x1f4>
 8007166:	003a      	movs	r2, r7
 8007168:	0033      	movs	r3, r6
 800716a:	0038      	movs	r0, r7
 800716c:	0031      	movs	r1, r6
 800716e:	e77e      	b.n	800706e <__ieee754_pow+0xf2>
 8007170:	4b15      	ldr	r3, [pc, #84]	; (80071c8 <__ieee754_pow+0x24c>)
 8007172:	429d      	cmp	r5, r3
 8007174:	dc00      	bgt.n	8007178 <__ieee754_pow+0x1fc>
 8007176:	e0f5      	b.n	8007364 <__ieee754_pow+0x3e8>
 8007178:	4b14      	ldr	r3, [pc, #80]	; (80071cc <__ieee754_pow+0x250>)
 800717a:	429d      	cmp	r5, r3
 800717c:	dd0a      	ble.n	8007194 <__ieee754_pow+0x218>
 800717e:	4b0e      	ldr	r3, [pc, #56]	; (80071b8 <__ieee754_pow+0x23c>)
 8007180:	429c      	cmp	r4, r3
 8007182:	dc0d      	bgt.n	80071a0 <__ieee754_pow+0x224>
 8007184:	9b04      	ldr	r3, [sp, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	daad      	bge.n	80070e6 <__ieee754_pow+0x16a>
 800718a:	4a11      	ldr	r2, [pc, #68]	; (80071d0 <__ieee754_pow+0x254>)
 800718c:	4b11      	ldr	r3, [pc, #68]	; (80071d4 <__ieee754_pow+0x258>)
 800718e:	0010      	movs	r0, r2
 8007190:	0019      	movs	r1, r3
 8007192:	e7c5      	b.n	8007120 <__ieee754_pow+0x1a4>
 8007194:	4b10      	ldr	r3, [pc, #64]	; (80071d8 <__ieee754_pow+0x25c>)
 8007196:	429c      	cmp	r4, r3
 8007198:	ddf4      	ble.n	8007184 <__ieee754_pow+0x208>
 800719a:	4b09      	ldr	r3, [pc, #36]	; (80071c0 <__ieee754_pow+0x244>)
 800719c:	429c      	cmp	r4, r3
 800719e:	dd1d      	ble.n	80071dc <__ieee754_pow+0x260>
 80071a0:	9b04      	ldr	r3, [sp, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	dcf1      	bgt.n	800718a <__ieee754_pow+0x20e>
 80071a6:	e79e      	b.n	80070e6 <__ieee754_pow+0x16a>
 80071a8:	7ff00000 	.word	0x7ff00000
 80071ac:	c0100000 	.word	0xc0100000
 80071b0:	08007e75 	.word	0x08007e75
 80071b4:	433fffff 	.word	0x433fffff
 80071b8:	3fefffff 	.word	0x3fefffff
 80071bc:	fffffc01 	.word	0xfffffc01
 80071c0:	3ff00000 	.word	0x3ff00000
 80071c4:	3fe00000 	.word	0x3fe00000
 80071c8:	41e00000 	.word	0x41e00000
 80071cc:	43f00000 	.word	0x43f00000
 80071d0:	8800759c 	.word	0x8800759c
 80071d4:	7e37e43c 	.word	0x7e37e43c
 80071d8:	3feffffe 	.word	0x3feffffe
 80071dc:	2200      	movs	r2, #0
 80071de:	9800      	ldr	r0, [sp, #0]
 80071e0:	9901      	ldr	r1, [sp, #4]
 80071e2:	4b52      	ldr	r3, [pc, #328]	; (800732c <__ieee754_pow+0x3b0>)
 80071e4:	f7fa ffac 	bl	8002140 <__aeabi_dsub>
 80071e8:	22c0      	movs	r2, #192	; 0xc0
 80071ea:	4b51      	ldr	r3, [pc, #324]	; (8007330 <__ieee754_pow+0x3b4>)
 80071ec:	05d2      	lsls	r2, r2, #23
 80071ee:	0004      	movs	r4, r0
 80071f0:	000d      	movs	r5, r1
 80071f2:	f7fa fd39 	bl	8001c68 <__aeabi_dmul>
 80071f6:	4a4f      	ldr	r2, [pc, #316]	; (8007334 <__ieee754_pow+0x3b8>)
 80071f8:	9000      	str	r0, [sp, #0]
 80071fa:	9101      	str	r1, [sp, #4]
 80071fc:	4b4e      	ldr	r3, [pc, #312]	; (8007338 <__ieee754_pow+0x3bc>)
 80071fe:	0020      	movs	r0, r4
 8007200:	0029      	movs	r1, r5
 8007202:	f7fa fd31 	bl	8001c68 <__aeabi_dmul>
 8007206:	2200      	movs	r2, #0
 8007208:	9004      	str	r0, [sp, #16]
 800720a:	9105      	str	r1, [sp, #20]
 800720c:	4b4b      	ldr	r3, [pc, #300]	; (800733c <__ieee754_pow+0x3c0>)
 800720e:	0020      	movs	r0, r4
 8007210:	0029      	movs	r1, r5
 8007212:	f7fa fd29 	bl	8001c68 <__aeabi_dmul>
 8007216:	0002      	movs	r2, r0
 8007218:	000b      	movs	r3, r1
 800721a:	4849      	ldr	r0, [pc, #292]	; (8007340 <__ieee754_pow+0x3c4>)
 800721c:	4949      	ldr	r1, [pc, #292]	; (8007344 <__ieee754_pow+0x3c8>)
 800721e:	f7fa ff8f 	bl	8002140 <__aeabi_dsub>
 8007222:	0022      	movs	r2, r4
 8007224:	002b      	movs	r3, r5
 8007226:	f7fa fd1f 	bl	8001c68 <__aeabi_dmul>
 800722a:	0002      	movs	r2, r0
 800722c:	000b      	movs	r3, r1
 800722e:	2000      	movs	r0, #0
 8007230:	4945      	ldr	r1, [pc, #276]	; (8007348 <__ieee754_pow+0x3cc>)
 8007232:	f7fa ff85 	bl	8002140 <__aeabi_dsub>
 8007236:	0022      	movs	r2, r4
 8007238:	0006      	movs	r6, r0
 800723a:	000f      	movs	r7, r1
 800723c:	002b      	movs	r3, r5
 800723e:	0020      	movs	r0, r4
 8007240:	0029      	movs	r1, r5
 8007242:	f7fa fd11 	bl	8001c68 <__aeabi_dmul>
 8007246:	0002      	movs	r2, r0
 8007248:	000b      	movs	r3, r1
 800724a:	0030      	movs	r0, r6
 800724c:	0039      	movs	r1, r7
 800724e:	f7fa fd0b 	bl	8001c68 <__aeabi_dmul>
 8007252:	4a3e      	ldr	r2, [pc, #248]	; (800734c <__ieee754_pow+0x3d0>)
 8007254:	4b36      	ldr	r3, [pc, #216]	; (8007330 <__ieee754_pow+0x3b4>)
 8007256:	f7fa fd07 	bl	8001c68 <__aeabi_dmul>
 800725a:	0002      	movs	r2, r0
 800725c:	000b      	movs	r3, r1
 800725e:	9804      	ldr	r0, [sp, #16]
 8007260:	9905      	ldr	r1, [sp, #20]
 8007262:	f7fa ff6d 	bl	8002140 <__aeabi_dsub>
 8007266:	0002      	movs	r2, r0
 8007268:	000b      	movs	r3, r1
 800726a:	0004      	movs	r4, r0
 800726c:	000d      	movs	r5, r1
 800726e:	9800      	ldr	r0, [sp, #0]
 8007270:	9901      	ldr	r1, [sp, #4]
 8007272:	f7f9 fd89 	bl	8000d88 <__aeabi_dadd>
 8007276:	9a00      	ldr	r2, [sp, #0]
 8007278:	9b01      	ldr	r3, [sp, #4]
 800727a:	2000      	movs	r0, #0
 800727c:	000f      	movs	r7, r1
 800727e:	0006      	movs	r6, r0
 8007280:	f7fa ff5e 	bl	8002140 <__aeabi_dsub>
 8007284:	0002      	movs	r2, r0
 8007286:	000b      	movs	r3, r1
 8007288:	0020      	movs	r0, r4
 800728a:	0029      	movs	r1, r5
 800728c:	f7fa ff58 	bl	8002140 <__aeabi_dsub>
 8007290:	9b06      	ldr	r3, [sp, #24]
 8007292:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007294:	3b01      	subs	r3, #1
 8007296:	9004      	str	r0, [sp, #16]
 8007298:	9105      	str	r1, [sp, #20]
 800729a:	4313      	orrs	r3, r2
 800729c:	d000      	beq.n	80072a0 <__ieee754_pow+0x324>
 800729e:	e1e0      	b.n	8007662 <__ieee754_pow+0x6e6>
 80072a0:	2300      	movs	r3, #0
 80072a2:	4c2b      	ldr	r4, [pc, #172]	; (8007350 <__ieee754_pow+0x3d4>)
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	9401      	str	r4, [sp, #4]
 80072a8:	9c02      	ldr	r4, [sp, #8]
 80072aa:	9d03      	ldr	r5, [sp, #12]
 80072ac:	9802      	ldr	r0, [sp, #8]
 80072ae:	9903      	ldr	r1, [sp, #12]
 80072b0:	2400      	movs	r4, #0
 80072b2:	002b      	movs	r3, r5
 80072b4:	0022      	movs	r2, r4
 80072b6:	f7fa ff43 	bl	8002140 <__aeabi_dsub>
 80072ba:	0032      	movs	r2, r6
 80072bc:	003b      	movs	r3, r7
 80072be:	f7fa fcd3 	bl	8001c68 <__aeabi_dmul>
 80072c2:	9a02      	ldr	r2, [sp, #8]
 80072c4:	9b03      	ldr	r3, [sp, #12]
 80072c6:	9006      	str	r0, [sp, #24]
 80072c8:	9107      	str	r1, [sp, #28]
 80072ca:	9804      	ldr	r0, [sp, #16]
 80072cc:	9905      	ldr	r1, [sp, #20]
 80072ce:	f7fa fccb 	bl	8001c68 <__aeabi_dmul>
 80072d2:	0002      	movs	r2, r0
 80072d4:	000b      	movs	r3, r1
 80072d6:	9806      	ldr	r0, [sp, #24]
 80072d8:	9907      	ldr	r1, [sp, #28]
 80072da:	f7f9 fd55 	bl	8000d88 <__aeabi_dadd>
 80072de:	0022      	movs	r2, r4
 80072e0:	002b      	movs	r3, r5
 80072e2:	9004      	str	r0, [sp, #16]
 80072e4:	9105      	str	r1, [sp, #20]
 80072e6:	0030      	movs	r0, r6
 80072e8:	0039      	movs	r1, r7
 80072ea:	f7fa fcbd 	bl	8001c68 <__aeabi_dmul>
 80072ee:	0006      	movs	r6, r0
 80072f0:	000f      	movs	r7, r1
 80072f2:	000b      	movs	r3, r1
 80072f4:	0002      	movs	r2, r0
 80072f6:	9804      	ldr	r0, [sp, #16]
 80072f8:	9905      	ldr	r1, [sp, #20]
 80072fa:	9606      	str	r6, [sp, #24]
 80072fc:	9707      	str	r7, [sp, #28]
 80072fe:	f7f9 fd43 	bl	8000d88 <__aeabi_dadd>
 8007302:	4b14      	ldr	r3, [pc, #80]	; (8007354 <__ieee754_pow+0x3d8>)
 8007304:	0005      	movs	r5, r0
 8007306:	000c      	movs	r4, r1
 8007308:	9108      	str	r1, [sp, #32]
 800730a:	4299      	cmp	r1, r3
 800730c:	dc00      	bgt.n	8007310 <__ieee754_pow+0x394>
 800730e:	e2da      	b.n	80078c6 <__ieee754_pow+0x94a>
 8007310:	4b11      	ldr	r3, [pc, #68]	; (8007358 <__ieee754_pow+0x3dc>)
 8007312:	18cb      	adds	r3, r1, r3
 8007314:	4303      	orrs	r3, r0
 8007316:	d100      	bne.n	800731a <__ieee754_pow+0x39e>
 8007318:	e1dc      	b.n	80076d4 <__ieee754_pow+0x758>
 800731a:	9800      	ldr	r0, [sp, #0]
 800731c:	9901      	ldr	r1, [sp, #4]
 800731e:	4a0f      	ldr	r2, [pc, #60]	; (800735c <__ieee754_pow+0x3e0>)
 8007320:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <__ieee754_pow+0x3e4>)
 8007322:	f7fa fca1 	bl	8001c68 <__aeabi_dmul>
 8007326:	4a0d      	ldr	r2, [pc, #52]	; (800735c <__ieee754_pow+0x3e0>)
 8007328:	4b0d      	ldr	r3, [pc, #52]	; (8007360 <__ieee754_pow+0x3e4>)
 800732a:	e6f9      	b.n	8007120 <__ieee754_pow+0x1a4>
 800732c:	3ff00000 	.word	0x3ff00000
 8007330:	3ff71547 	.word	0x3ff71547
 8007334:	f85ddf44 	.word	0xf85ddf44
 8007338:	3e54ae0b 	.word	0x3e54ae0b
 800733c:	3fd00000 	.word	0x3fd00000
 8007340:	55555555 	.word	0x55555555
 8007344:	3fd55555 	.word	0x3fd55555
 8007348:	3fe00000 	.word	0x3fe00000
 800734c:	652b82fe 	.word	0x652b82fe
 8007350:	bff00000 	.word	0xbff00000
 8007354:	408fffff 	.word	0x408fffff
 8007358:	bf700000 	.word	0xbf700000
 800735c:	8800759c 	.word	0x8800759c
 8007360:	7e37e43c 	.word	0x7e37e43c
 8007364:	4bc0      	ldr	r3, [pc, #768]	; (8007668 <__ieee754_pow+0x6ec>)
 8007366:	2200      	movs	r2, #0
 8007368:	4233      	tst	r3, r6
 800736a:	d10a      	bne.n	8007382 <__ieee754_pow+0x406>
 800736c:	9800      	ldr	r0, [sp, #0]
 800736e:	9901      	ldr	r1, [sp, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	4bbe      	ldr	r3, [pc, #760]	; (800766c <__ieee754_pow+0x6f0>)
 8007374:	f7fa fc78 	bl	8001c68 <__aeabi_dmul>
 8007378:	2235      	movs	r2, #53	; 0x35
 800737a:	9000      	str	r0, [sp, #0]
 800737c:	9101      	str	r1, [sp, #4]
 800737e:	9c01      	ldr	r4, [sp, #4]
 8007380:	4252      	negs	r2, r2
 8007382:	49bb      	ldr	r1, [pc, #748]	; (8007670 <__ieee754_pow+0x6f4>)
 8007384:	1523      	asrs	r3, r4, #20
 8007386:	185b      	adds	r3, r3, r1
 8007388:	189b      	adds	r3, r3, r2
 800738a:	0324      	lsls	r4, r4, #12
 800738c:	4db9      	ldr	r5, [pc, #740]	; (8007674 <__ieee754_pow+0x6f8>)
 800738e:	930d      	str	r3, [sp, #52]	; 0x34
 8007390:	4bb9      	ldr	r3, [pc, #740]	; (8007678 <__ieee754_pow+0x6fc>)
 8007392:	0b22      	lsrs	r2, r4, #12
 8007394:	4315      	orrs	r5, r2
 8007396:	2400      	movs	r4, #0
 8007398:	429a      	cmp	r2, r3
 800739a:	dd09      	ble.n	80073b0 <__ieee754_pow+0x434>
 800739c:	4bb7      	ldr	r3, [pc, #732]	; (800767c <__ieee754_pow+0x700>)
 800739e:	3401      	adds	r4, #1
 80073a0:	429a      	cmp	r2, r3
 80073a2:	dd05      	ble.n	80073b0 <__ieee754_pow+0x434>
 80073a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073a6:	191b      	adds	r3, r3, r4
 80073a8:	2400      	movs	r4, #0
 80073aa:	930d      	str	r3, [sp, #52]	; 0x34
 80073ac:	4bb4      	ldr	r3, [pc, #720]	; (8007680 <__ieee754_pow+0x704>)
 80073ae:	18ed      	adds	r5, r5, r3
 80073b0:	9800      	ldr	r0, [sp, #0]
 80073b2:	9901      	ldr	r1, [sp, #4]
 80073b4:	0029      	movs	r1, r5
 80073b6:	00e3      	lsls	r3, r4, #3
 80073b8:	9311      	str	r3, [sp, #68]	; 0x44
 80073ba:	4bb2      	ldr	r3, [pc, #712]	; (8007684 <__ieee754_pow+0x708>)
 80073bc:	00e2      	lsls	r2, r4, #3
 80073be:	189b      	adds	r3, r3, r2
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	900e      	str	r0, [sp, #56]	; 0x38
 80073c6:	910f      	str	r1, [sp, #60]	; 0x3c
 80073c8:	920a      	str	r2, [sp, #40]	; 0x28
 80073ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80073cc:	f7fa feb8 	bl	8002140 <__aeabi_dsub>
 80073d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073d4:	0006      	movs	r6, r0
 80073d6:	000f      	movs	r7, r1
 80073d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80073da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073dc:	f7f9 fcd4 	bl	8000d88 <__aeabi_dadd>
 80073e0:	0002      	movs	r2, r0
 80073e2:	000b      	movs	r3, r1
 80073e4:	2000      	movs	r0, #0
 80073e6:	49a3      	ldr	r1, [pc, #652]	; (8007674 <__ieee754_pow+0x6f8>)
 80073e8:	f7fa f838 	bl	800145c <__aeabi_ddiv>
 80073ec:	0002      	movs	r2, r0
 80073ee:	000b      	movs	r3, r1
 80073f0:	9012      	str	r0, [sp, #72]	; 0x48
 80073f2:	9113      	str	r1, [sp, #76]	; 0x4c
 80073f4:	0030      	movs	r0, r6
 80073f6:	0039      	movs	r1, r7
 80073f8:	f7fa fc36 	bl	8001c68 <__aeabi_dmul>
 80073fc:	9008      	str	r0, [sp, #32]
 80073fe:	9109      	str	r1, [sp, #36]	; 0x24
 8007400:	9a08      	ldr	r2, [sp, #32]
 8007402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007404:	2180      	movs	r1, #128	; 0x80
 8007406:	9204      	str	r2, [sp, #16]
 8007408:	9305      	str	r3, [sp, #20]
 800740a:	2300      	movs	r3, #0
 800740c:	0589      	lsls	r1, r1, #22
 800740e:	106d      	asrs	r5, r5, #1
 8007410:	430d      	orrs	r5, r1
 8007412:	2180      	movs	r1, #128	; 0x80
 8007414:	9304      	str	r3, [sp, #16]
 8007416:	9a04      	ldr	r2, [sp, #16]
 8007418:	9b05      	ldr	r3, [sp, #20]
 800741a:	9200      	str	r2, [sp, #0]
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	0309      	lsls	r1, r1, #12
 8007422:	186d      	adds	r5, r5, r1
 8007424:	04a1      	lsls	r1, r4, #18
 8007426:	186b      	adds	r3, r5, r1
 8007428:	9800      	ldr	r0, [sp, #0]
 800742a:	9901      	ldr	r1, [sp, #4]
 800742c:	0014      	movs	r4, r2
 800742e:	001d      	movs	r5, r3
 8007430:	f7fa fc1a 	bl	8001c68 <__aeabi_dmul>
 8007434:	0002      	movs	r2, r0
 8007436:	000b      	movs	r3, r1
 8007438:	0030      	movs	r0, r6
 800743a:	0039      	movs	r1, r7
 800743c:	f7fa fe80 	bl	8002140 <__aeabi_dsub>
 8007440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007444:	0006      	movs	r6, r0
 8007446:	000f      	movs	r7, r1
 8007448:	0020      	movs	r0, r4
 800744a:	0029      	movs	r1, r5
 800744c:	f7fa fe78 	bl	8002140 <__aeabi_dsub>
 8007450:	0002      	movs	r2, r0
 8007452:	000b      	movs	r3, r1
 8007454:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007456:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007458:	f7fa fe72 	bl	8002140 <__aeabi_dsub>
 800745c:	9a00      	ldr	r2, [sp, #0]
 800745e:	9b01      	ldr	r3, [sp, #4]
 8007460:	f7fa fc02 	bl	8001c68 <__aeabi_dmul>
 8007464:	0002      	movs	r2, r0
 8007466:	000b      	movs	r3, r1
 8007468:	0030      	movs	r0, r6
 800746a:	0039      	movs	r1, r7
 800746c:	f7fa fe68 	bl	8002140 <__aeabi_dsub>
 8007470:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007472:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007474:	f7fa fbf8 	bl	8001c68 <__aeabi_dmul>
 8007478:	9a08      	ldr	r2, [sp, #32]
 800747a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747c:	900a      	str	r0, [sp, #40]	; 0x28
 800747e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007480:	0010      	movs	r0, r2
 8007482:	0019      	movs	r1, r3
 8007484:	f7fa fbf0 	bl	8001c68 <__aeabi_dmul>
 8007488:	0006      	movs	r6, r0
 800748a:	000f      	movs	r7, r1
 800748c:	4a7e      	ldr	r2, [pc, #504]	; (8007688 <__ieee754_pow+0x70c>)
 800748e:	4b7f      	ldr	r3, [pc, #508]	; (800768c <__ieee754_pow+0x710>)
 8007490:	f7fa fbea 	bl	8001c68 <__aeabi_dmul>
 8007494:	4a7e      	ldr	r2, [pc, #504]	; (8007690 <__ieee754_pow+0x714>)
 8007496:	4b7f      	ldr	r3, [pc, #508]	; (8007694 <__ieee754_pow+0x718>)
 8007498:	f7f9 fc76 	bl	8000d88 <__aeabi_dadd>
 800749c:	0032      	movs	r2, r6
 800749e:	003b      	movs	r3, r7
 80074a0:	f7fa fbe2 	bl	8001c68 <__aeabi_dmul>
 80074a4:	4a7c      	ldr	r2, [pc, #496]	; (8007698 <__ieee754_pow+0x71c>)
 80074a6:	4b7d      	ldr	r3, [pc, #500]	; (800769c <__ieee754_pow+0x720>)
 80074a8:	f7f9 fc6e 	bl	8000d88 <__aeabi_dadd>
 80074ac:	0032      	movs	r2, r6
 80074ae:	003b      	movs	r3, r7
 80074b0:	f7fa fbda 	bl	8001c68 <__aeabi_dmul>
 80074b4:	4a7a      	ldr	r2, [pc, #488]	; (80076a0 <__ieee754_pow+0x724>)
 80074b6:	4b7b      	ldr	r3, [pc, #492]	; (80076a4 <__ieee754_pow+0x728>)
 80074b8:	f7f9 fc66 	bl	8000d88 <__aeabi_dadd>
 80074bc:	0032      	movs	r2, r6
 80074be:	003b      	movs	r3, r7
 80074c0:	f7fa fbd2 	bl	8001c68 <__aeabi_dmul>
 80074c4:	4a78      	ldr	r2, [pc, #480]	; (80076a8 <__ieee754_pow+0x72c>)
 80074c6:	4b79      	ldr	r3, [pc, #484]	; (80076ac <__ieee754_pow+0x730>)
 80074c8:	f7f9 fc5e 	bl	8000d88 <__aeabi_dadd>
 80074cc:	0032      	movs	r2, r6
 80074ce:	003b      	movs	r3, r7
 80074d0:	f7fa fbca 	bl	8001c68 <__aeabi_dmul>
 80074d4:	4a76      	ldr	r2, [pc, #472]	; (80076b0 <__ieee754_pow+0x734>)
 80074d6:	4b77      	ldr	r3, [pc, #476]	; (80076b4 <__ieee754_pow+0x738>)
 80074d8:	f7f9 fc56 	bl	8000d88 <__aeabi_dadd>
 80074dc:	0032      	movs	r2, r6
 80074de:	0004      	movs	r4, r0
 80074e0:	000d      	movs	r5, r1
 80074e2:	003b      	movs	r3, r7
 80074e4:	0030      	movs	r0, r6
 80074e6:	0039      	movs	r1, r7
 80074e8:	f7fa fbbe 	bl	8001c68 <__aeabi_dmul>
 80074ec:	0002      	movs	r2, r0
 80074ee:	000b      	movs	r3, r1
 80074f0:	0020      	movs	r0, r4
 80074f2:	0029      	movs	r1, r5
 80074f4:	f7fa fbb8 	bl	8001c68 <__aeabi_dmul>
 80074f8:	9a00      	ldr	r2, [sp, #0]
 80074fa:	9b01      	ldr	r3, [sp, #4]
 80074fc:	0004      	movs	r4, r0
 80074fe:	000d      	movs	r5, r1
 8007500:	9808      	ldr	r0, [sp, #32]
 8007502:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007504:	f7f9 fc40 	bl	8000d88 <__aeabi_dadd>
 8007508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800750a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800750c:	f7fa fbac 	bl	8001c68 <__aeabi_dmul>
 8007510:	0022      	movs	r2, r4
 8007512:	002b      	movs	r3, r5
 8007514:	f7f9 fc38 	bl	8000d88 <__aeabi_dadd>
 8007518:	9a00      	ldr	r2, [sp, #0]
 800751a:	9b01      	ldr	r3, [sp, #4]
 800751c:	900e      	str	r0, [sp, #56]	; 0x38
 800751e:	910f      	str	r1, [sp, #60]	; 0x3c
 8007520:	0010      	movs	r0, r2
 8007522:	0019      	movs	r1, r3
 8007524:	f7fa fba0 	bl	8001c68 <__aeabi_dmul>
 8007528:	2200      	movs	r2, #0
 800752a:	4b63      	ldr	r3, [pc, #396]	; (80076b8 <__ieee754_pow+0x73c>)
 800752c:	0004      	movs	r4, r0
 800752e:	000d      	movs	r5, r1
 8007530:	f7f9 fc2a 	bl	8000d88 <__aeabi_dadd>
 8007534:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007538:	f7f9 fc26 	bl	8000d88 <__aeabi_dadd>
 800753c:	9e04      	ldr	r6, [sp, #16]
 800753e:	000f      	movs	r7, r1
 8007540:	0032      	movs	r2, r6
 8007542:	000b      	movs	r3, r1
 8007544:	9800      	ldr	r0, [sp, #0]
 8007546:	9901      	ldr	r1, [sp, #4]
 8007548:	f7fa fb8e 	bl	8001c68 <__aeabi_dmul>
 800754c:	2200      	movs	r2, #0
 800754e:	9000      	str	r0, [sp, #0]
 8007550:	9101      	str	r1, [sp, #4]
 8007552:	4b59      	ldr	r3, [pc, #356]	; (80076b8 <__ieee754_pow+0x73c>)
 8007554:	0030      	movs	r0, r6
 8007556:	0039      	movs	r1, r7
 8007558:	f7fa fdf2 	bl	8002140 <__aeabi_dsub>
 800755c:	0022      	movs	r2, r4
 800755e:	002b      	movs	r3, r5
 8007560:	f7fa fdee 	bl	8002140 <__aeabi_dsub>
 8007564:	0002      	movs	r2, r0
 8007566:	000b      	movs	r3, r1
 8007568:	980e      	ldr	r0, [sp, #56]	; 0x38
 800756a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800756c:	f7fa fde8 	bl	8002140 <__aeabi_dsub>
 8007570:	9a08      	ldr	r2, [sp, #32]
 8007572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007574:	f7fa fb78 	bl	8001c68 <__aeabi_dmul>
 8007578:	0032      	movs	r2, r6
 800757a:	0004      	movs	r4, r0
 800757c:	000d      	movs	r5, r1
 800757e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007582:	003b      	movs	r3, r7
 8007584:	f7fa fb70 	bl	8001c68 <__aeabi_dmul>
 8007588:	0002      	movs	r2, r0
 800758a:	000b      	movs	r3, r1
 800758c:	0020      	movs	r0, r4
 800758e:	0029      	movs	r1, r5
 8007590:	f7f9 fbfa 	bl	8000d88 <__aeabi_dadd>
 8007594:	0004      	movs	r4, r0
 8007596:	000d      	movs	r5, r1
 8007598:	0002      	movs	r2, r0
 800759a:	000b      	movs	r3, r1
 800759c:	9800      	ldr	r0, [sp, #0]
 800759e:	9901      	ldr	r1, [sp, #4]
 80075a0:	f7f9 fbf2 	bl	8000d88 <__aeabi_dadd>
 80075a4:	22e0      	movs	r2, #224	; 0xe0
 80075a6:	9e04      	ldr	r6, [sp, #16]
 80075a8:	4b44      	ldr	r3, [pc, #272]	; (80076bc <__ieee754_pow+0x740>)
 80075aa:	0030      	movs	r0, r6
 80075ac:	0612      	lsls	r2, r2, #24
 80075ae:	000f      	movs	r7, r1
 80075b0:	f7fa fb5a 	bl	8001c68 <__aeabi_dmul>
 80075b4:	9008      	str	r0, [sp, #32]
 80075b6:	9109      	str	r1, [sp, #36]	; 0x24
 80075b8:	9a00      	ldr	r2, [sp, #0]
 80075ba:	9b01      	ldr	r3, [sp, #4]
 80075bc:	0030      	movs	r0, r6
 80075be:	0039      	movs	r1, r7
 80075c0:	f7fa fdbe 	bl	8002140 <__aeabi_dsub>
 80075c4:	0002      	movs	r2, r0
 80075c6:	000b      	movs	r3, r1
 80075c8:	0020      	movs	r0, r4
 80075ca:	0029      	movs	r1, r5
 80075cc:	f7fa fdb8 	bl	8002140 <__aeabi_dsub>
 80075d0:	4a3b      	ldr	r2, [pc, #236]	; (80076c0 <__ieee754_pow+0x744>)
 80075d2:	4b3a      	ldr	r3, [pc, #232]	; (80076bc <__ieee754_pow+0x740>)
 80075d4:	f7fa fb48 	bl	8001c68 <__aeabi_dmul>
 80075d8:	4a3a      	ldr	r2, [pc, #232]	; (80076c4 <__ieee754_pow+0x748>)
 80075da:	0004      	movs	r4, r0
 80075dc:	000d      	movs	r5, r1
 80075de:	0030      	movs	r0, r6
 80075e0:	0039      	movs	r1, r7
 80075e2:	4b39      	ldr	r3, [pc, #228]	; (80076c8 <__ieee754_pow+0x74c>)
 80075e4:	f7fa fb40 	bl	8001c68 <__aeabi_dmul>
 80075e8:	0002      	movs	r2, r0
 80075ea:	000b      	movs	r3, r1
 80075ec:	0020      	movs	r0, r4
 80075ee:	0029      	movs	r1, r5
 80075f0:	f7f9 fbca 	bl	8000d88 <__aeabi_dadd>
 80075f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80075f6:	4b35      	ldr	r3, [pc, #212]	; (80076cc <__ieee754_pow+0x750>)
 80075f8:	189b      	adds	r3, r3, r2
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f7f9 fbc3 	bl	8000d88 <__aeabi_dadd>
 8007602:	900a      	str	r0, [sp, #40]	; 0x28
 8007604:	910b      	str	r1, [sp, #44]	; 0x2c
 8007606:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007608:	f7fb f980 	bl	800290c <__aeabi_i2d>
 800760c:	0004      	movs	r4, r0
 800760e:	000d      	movs	r5, r1
 8007610:	9808      	ldr	r0, [sp, #32]
 8007612:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007614:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007616:	4b2e      	ldr	r3, [pc, #184]	; (80076d0 <__ieee754_pow+0x754>)
 8007618:	189b      	adds	r3, r3, r2
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	9200      	str	r2, [sp, #0]
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007626:	f7f9 fbaf 	bl	8000d88 <__aeabi_dadd>
 800762a:	9a00      	ldr	r2, [sp, #0]
 800762c:	9b01      	ldr	r3, [sp, #4]
 800762e:	f7f9 fbab 	bl	8000d88 <__aeabi_dadd>
 8007632:	0022      	movs	r2, r4
 8007634:	002b      	movs	r3, r5
 8007636:	f7f9 fba7 	bl	8000d88 <__aeabi_dadd>
 800763a:	9804      	ldr	r0, [sp, #16]
 800763c:	0022      	movs	r2, r4
 800763e:	002b      	movs	r3, r5
 8007640:	0006      	movs	r6, r0
 8007642:	000f      	movs	r7, r1
 8007644:	f7fa fd7c 	bl	8002140 <__aeabi_dsub>
 8007648:	9a00      	ldr	r2, [sp, #0]
 800764a:	9b01      	ldr	r3, [sp, #4]
 800764c:	f7fa fd78 	bl	8002140 <__aeabi_dsub>
 8007650:	9a08      	ldr	r2, [sp, #32]
 8007652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007654:	f7fa fd74 	bl	8002140 <__aeabi_dsub>
 8007658:	0002      	movs	r2, r0
 800765a:	000b      	movs	r3, r1
 800765c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800765e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007660:	e614      	b.n	800728c <__ieee754_pow+0x310>
 8007662:	2300      	movs	r3, #0
 8007664:	4c03      	ldr	r4, [pc, #12]	; (8007674 <__ieee754_pow+0x6f8>)
 8007666:	e61d      	b.n	80072a4 <__ieee754_pow+0x328>
 8007668:	7ff00000 	.word	0x7ff00000
 800766c:	43400000 	.word	0x43400000
 8007670:	fffffc01 	.word	0xfffffc01
 8007674:	3ff00000 	.word	0x3ff00000
 8007678:	0003988e 	.word	0x0003988e
 800767c:	000bb679 	.word	0x000bb679
 8007680:	fff00000 	.word	0xfff00000
 8007684:	08007e78 	.word	0x08007e78
 8007688:	4a454eef 	.word	0x4a454eef
 800768c:	3fca7e28 	.word	0x3fca7e28
 8007690:	93c9db65 	.word	0x93c9db65
 8007694:	3fcd864a 	.word	0x3fcd864a
 8007698:	a91d4101 	.word	0xa91d4101
 800769c:	3fd17460 	.word	0x3fd17460
 80076a0:	518f264d 	.word	0x518f264d
 80076a4:	3fd55555 	.word	0x3fd55555
 80076a8:	db6fabff 	.word	0xdb6fabff
 80076ac:	3fdb6db6 	.word	0x3fdb6db6
 80076b0:	33333303 	.word	0x33333303
 80076b4:	3fe33333 	.word	0x3fe33333
 80076b8:	40080000 	.word	0x40080000
 80076bc:	3feec709 	.word	0x3feec709
 80076c0:	dc3a03fd 	.word	0xdc3a03fd
 80076c4:	145b01f5 	.word	0x145b01f5
 80076c8:	be3e2fe0 	.word	0xbe3e2fe0
 80076cc:	08007e98 	.word	0x08007e98
 80076d0:	08007e88 	.word	0x08007e88
 80076d4:	4a8f      	ldr	r2, [pc, #572]	; (8007914 <__ieee754_pow+0x998>)
 80076d6:	4b90      	ldr	r3, [pc, #576]	; (8007918 <__ieee754_pow+0x99c>)
 80076d8:	9804      	ldr	r0, [sp, #16]
 80076da:	9905      	ldr	r1, [sp, #20]
 80076dc:	f7f9 fb54 	bl	8000d88 <__aeabi_dadd>
 80076e0:	0032      	movs	r2, r6
 80076e2:	9002      	str	r0, [sp, #8]
 80076e4:	9103      	str	r1, [sp, #12]
 80076e6:	003b      	movs	r3, r7
 80076e8:	0028      	movs	r0, r5
 80076ea:	0021      	movs	r1, r4
 80076ec:	f7fa fd28 	bl	8002140 <__aeabi_dsub>
 80076f0:	0002      	movs	r2, r0
 80076f2:	000b      	movs	r3, r1
 80076f4:	9802      	ldr	r0, [sp, #8]
 80076f6:	9903      	ldr	r1, [sp, #12]
 80076f8:	f7f8 fdbc 	bl	8000274 <__aeabi_dcmpgt>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d000      	beq.n	8007702 <__ieee754_pow+0x786>
 8007700:	e60b      	b.n	800731a <__ieee754_pow+0x39e>
 8007702:	2100      	movs	r1, #0
 8007704:	4a85      	ldr	r2, [pc, #532]	; (800791c <__ieee754_pow+0x9a0>)
 8007706:	0063      	lsls	r3, r4, #1
 8007708:	085b      	lsrs	r3, r3, #1
 800770a:	9102      	str	r1, [sp, #8]
 800770c:	4293      	cmp	r3, r2
 800770e:	dd25      	ble.n	800775c <__ieee754_pow+0x7e0>
 8007710:	4a83      	ldr	r2, [pc, #524]	; (8007920 <__ieee754_pow+0x9a4>)
 8007712:	151b      	asrs	r3, r3, #20
 8007714:	189b      	adds	r3, r3, r2
 8007716:	2280      	movs	r2, #128	; 0x80
 8007718:	0352      	lsls	r2, r2, #13
 800771a:	4694      	mov	ip, r2
 800771c:	411a      	asrs	r2, r3
 800771e:	1914      	adds	r4, r2, r4
 8007720:	4b80      	ldr	r3, [pc, #512]	; (8007924 <__ieee754_pow+0x9a8>)
 8007722:	0060      	lsls	r0, r4, #1
 8007724:	4d80      	ldr	r5, [pc, #512]	; (8007928 <__ieee754_pow+0x9ac>)
 8007726:	0d40      	lsrs	r0, r0, #21
 8007728:	18c0      	adds	r0, r0, r3
 800772a:	4105      	asrs	r5, r0
 800772c:	0021      	movs	r1, r4
 800772e:	43a9      	bics	r1, r5
 8007730:	000b      	movs	r3, r1
 8007732:	4661      	mov	r1, ip
 8007734:	0324      	lsls	r4, r4, #12
 8007736:	0b24      	lsrs	r4, r4, #12
 8007738:	4321      	orrs	r1, r4
 800773a:	2414      	movs	r4, #20
 800773c:	1a20      	subs	r0, r4, r0
 800773e:	4101      	asrs	r1, r0
 8007740:	9102      	str	r1, [sp, #8]
 8007742:	9908      	ldr	r1, [sp, #32]
 8007744:	2200      	movs	r2, #0
 8007746:	2900      	cmp	r1, #0
 8007748:	da02      	bge.n	8007750 <__ieee754_pow+0x7d4>
 800774a:	9902      	ldr	r1, [sp, #8]
 800774c:	4249      	negs	r1, r1
 800774e:	9102      	str	r1, [sp, #8]
 8007750:	0030      	movs	r0, r6
 8007752:	0039      	movs	r1, r7
 8007754:	f7fa fcf4 	bl	8002140 <__aeabi_dsub>
 8007758:	9006      	str	r0, [sp, #24]
 800775a:	9107      	str	r1, [sp, #28]
 800775c:	9a04      	ldr	r2, [sp, #16]
 800775e:	9b05      	ldr	r3, [sp, #20]
 8007760:	9806      	ldr	r0, [sp, #24]
 8007762:	9907      	ldr	r1, [sp, #28]
 8007764:	2600      	movs	r6, #0
 8007766:	f7f9 fb0f 	bl	8000d88 <__aeabi_dadd>
 800776a:	2200      	movs	r2, #0
 800776c:	0030      	movs	r0, r6
 800776e:	4b6f      	ldr	r3, [pc, #444]	; (800792c <__ieee754_pow+0x9b0>)
 8007770:	000f      	movs	r7, r1
 8007772:	f7fa fa79 	bl	8001c68 <__aeabi_dmul>
 8007776:	9a06      	ldr	r2, [sp, #24]
 8007778:	9b07      	ldr	r3, [sp, #28]
 800777a:	9008      	str	r0, [sp, #32]
 800777c:	9109      	str	r1, [sp, #36]	; 0x24
 800777e:	0030      	movs	r0, r6
 8007780:	0039      	movs	r1, r7
 8007782:	f7fa fcdd 	bl	8002140 <__aeabi_dsub>
 8007786:	0002      	movs	r2, r0
 8007788:	000b      	movs	r3, r1
 800778a:	9804      	ldr	r0, [sp, #16]
 800778c:	9905      	ldr	r1, [sp, #20]
 800778e:	f7fa fcd7 	bl	8002140 <__aeabi_dsub>
 8007792:	4a67      	ldr	r2, [pc, #412]	; (8007930 <__ieee754_pow+0x9b4>)
 8007794:	4b67      	ldr	r3, [pc, #412]	; (8007934 <__ieee754_pow+0x9b8>)
 8007796:	f7fa fa67 	bl	8001c68 <__aeabi_dmul>
 800779a:	4a67      	ldr	r2, [pc, #412]	; (8007938 <__ieee754_pow+0x9bc>)
 800779c:	0004      	movs	r4, r0
 800779e:	000d      	movs	r5, r1
 80077a0:	0030      	movs	r0, r6
 80077a2:	0039      	movs	r1, r7
 80077a4:	4b65      	ldr	r3, [pc, #404]	; (800793c <__ieee754_pow+0x9c0>)
 80077a6:	f7fa fa5f 	bl	8001c68 <__aeabi_dmul>
 80077aa:	0002      	movs	r2, r0
 80077ac:	000b      	movs	r3, r1
 80077ae:	0020      	movs	r0, r4
 80077b0:	0029      	movs	r1, r5
 80077b2:	f7f9 fae9 	bl	8000d88 <__aeabi_dadd>
 80077b6:	0004      	movs	r4, r0
 80077b8:	000d      	movs	r5, r1
 80077ba:	0002      	movs	r2, r0
 80077bc:	000b      	movs	r3, r1
 80077be:	9808      	ldr	r0, [sp, #32]
 80077c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077c2:	f7f9 fae1 	bl	8000d88 <__aeabi_dadd>
 80077c6:	9a08      	ldr	r2, [sp, #32]
 80077c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ca:	0006      	movs	r6, r0
 80077cc:	000f      	movs	r7, r1
 80077ce:	f7fa fcb7 	bl	8002140 <__aeabi_dsub>
 80077d2:	0002      	movs	r2, r0
 80077d4:	000b      	movs	r3, r1
 80077d6:	0020      	movs	r0, r4
 80077d8:	0029      	movs	r1, r5
 80077da:	f7fa fcb1 	bl	8002140 <__aeabi_dsub>
 80077de:	0032      	movs	r2, r6
 80077e0:	9004      	str	r0, [sp, #16]
 80077e2:	9105      	str	r1, [sp, #20]
 80077e4:	003b      	movs	r3, r7
 80077e6:	0030      	movs	r0, r6
 80077e8:	0039      	movs	r1, r7
 80077ea:	f7fa fa3d 	bl	8001c68 <__aeabi_dmul>
 80077ee:	0004      	movs	r4, r0
 80077f0:	000d      	movs	r5, r1
 80077f2:	4a53      	ldr	r2, [pc, #332]	; (8007940 <__ieee754_pow+0x9c4>)
 80077f4:	4b53      	ldr	r3, [pc, #332]	; (8007944 <__ieee754_pow+0x9c8>)
 80077f6:	f7fa fa37 	bl	8001c68 <__aeabi_dmul>
 80077fa:	4a53      	ldr	r2, [pc, #332]	; (8007948 <__ieee754_pow+0x9cc>)
 80077fc:	4b53      	ldr	r3, [pc, #332]	; (800794c <__ieee754_pow+0x9d0>)
 80077fe:	f7fa fc9f 	bl	8002140 <__aeabi_dsub>
 8007802:	0022      	movs	r2, r4
 8007804:	002b      	movs	r3, r5
 8007806:	f7fa fa2f 	bl	8001c68 <__aeabi_dmul>
 800780a:	4a51      	ldr	r2, [pc, #324]	; (8007950 <__ieee754_pow+0x9d4>)
 800780c:	4b51      	ldr	r3, [pc, #324]	; (8007954 <__ieee754_pow+0x9d8>)
 800780e:	f7f9 fabb 	bl	8000d88 <__aeabi_dadd>
 8007812:	0022      	movs	r2, r4
 8007814:	002b      	movs	r3, r5
 8007816:	f7fa fa27 	bl	8001c68 <__aeabi_dmul>
 800781a:	4a4f      	ldr	r2, [pc, #316]	; (8007958 <__ieee754_pow+0x9dc>)
 800781c:	4b4f      	ldr	r3, [pc, #316]	; (800795c <__ieee754_pow+0x9e0>)
 800781e:	f7fa fc8f 	bl	8002140 <__aeabi_dsub>
 8007822:	0022      	movs	r2, r4
 8007824:	002b      	movs	r3, r5
 8007826:	f7fa fa1f 	bl	8001c68 <__aeabi_dmul>
 800782a:	4a4d      	ldr	r2, [pc, #308]	; (8007960 <__ieee754_pow+0x9e4>)
 800782c:	4b4d      	ldr	r3, [pc, #308]	; (8007964 <__ieee754_pow+0x9e8>)
 800782e:	f7f9 faab 	bl	8000d88 <__aeabi_dadd>
 8007832:	0022      	movs	r2, r4
 8007834:	002b      	movs	r3, r5
 8007836:	f7fa fa17 	bl	8001c68 <__aeabi_dmul>
 800783a:	0002      	movs	r2, r0
 800783c:	000b      	movs	r3, r1
 800783e:	0030      	movs	r0, r6
 8007840:	0039      	movs	r1, r7
 8007842:	f7fa fc7d 	bl	8002140 <__aeabi_dsub>
 8007846:	0004      	movs	r4, r0
 8007848:	000d      	movs	r5, r1
 800784a:	0002      	movs	r2, r0
 800784c:	000b      	movs	r3, r1
 800784e:	0030      	movs	r0, r6
 8007850:	0039      	movs	r1, r7
 8007852:	f7fa fa09 	bl	8001c68 <__aeabi_dmul>
 8007856:	2380      	movs	r3, #128	; 0x80
 8007858:	9006      	str	r0, [sp, #24]
 800785a:	9107      	str	r1, [sp, #28]
 800785c:	2200      	movs	r2, #0
 800785e:	0020      	movs	r0, r4
 8007860:	0029      	movs	r1, r5
 8007862:	05db      	lsls	r3, r3, #23
 8007864:	f7fa fc6c 	bl	8002140 <__aeabi_dsub>
 8007868:	0002      	movs	r2, r0
 800786a:	000b      	movs	r3, r1
 800786c:	9806      	ldr	r0, [sp, #24]
 800786e:	9907      	ldr	r1, [sp, #28]
 8007870:	f7f9 fdf4 	bl	800145c <__aeabi_ddiv>
 8007874:	9a04      	ldr	r2, [sp, #16]
 8007876:	9b05      	ldr	r3, [sp, #20]
 8007878:	0004      	movs	r4, r0
 800787a:	000d      	movs	r5, r1
 800787c:	0030      	movs	r0, r6
 800787e:	0039      	movs	r1, r7
 8007880:	f7fa f9f2 	bl	8001c68 <__aeabi_dmul>
 8007884:	9a04      	ldr	r2, [sp, #16]
 8007886:	9b05      	ldr	r3, [sp, #20]
 8007888:	f7f9 fa7e 	bl	8000d88 <__aeabi_dadd>
 800788c:	0002      	movs	r2, r0
 800788e:	000b      	movs	r3, r1
 8007890:	0020      	movs	r0, r4
 8007892:	0029      	movs	r1, r5
 8007894:	f7fa fc54 	bl	8002140 <__aeabi_dsub>
 8007898:	0032      	movs	r2, r6
 800789a:	003b      	movs	r3, r7
 800789c:	f7fa fc50 	bl	8002140 <__aeabi_dsub>
 80078a0:	0002      	movs	r2, r0
 80078a2:	000b      	movs	r3, r1
 80078a4:	2000      	movs	r0, #0
 80078a6:	4930      	ldr	r1, [pc, #192]	; (8007968 <__ieee754_pow+0x9ec>)
 80078a8:	f7fa fc4a 	bl	8002140 <__aeabi_dsub>
 80078ac:	9b02      	ldr	r3, [sp, #8]
 80078ae:	051b      	lsls	r3, r3, #20
 80078b0:	185b      	adds	r3, r3, r1
 80078b2:	151a      	asrs	r2, r3, #20
 80078b4:	2a00      	cmp	r2, #0
 80078b6:	dc26      	bgt.n	8007906 <__ieee754_pow+0x98a>
 80078b8:	9a02      	ldr	r2, [sp, #8]
 80078ba:	f000 f9ad 	bl	8007c18 <scalbn>
 80078be:	9a00      	ldr	r2, [sp, #0]
 80078c0:	9b01      	ldr	r3, [sp, #4]
 80078c2:	f7ff fc2d 	bl	8007120 <__ieee754_pow+0x1a4>
 80078c6:	4a29      	ldr	r2, [pc, #164]	; (800796c <__ieee754_pow+0x9f0>)
 80078c8:	004b      	lsls	r3, r1, #1
 80078ca:	085b      	lsrs	r3, r3, #1
 80078cc:	4293      	cmp	r3, r2
 80078ce:	dc00      	bgt.n	80078d2 <__ieee754_pow+0x956>
 80078d0:	e717      	b.n	8007702 <__ieee754_pow+0x786>
 80078d2:	4b27      	ldr	r3, [pc, #156]	; (8007970 <__ieee754_pow+0x9f4>)
 80078d4:	18cb      	adds	r3, r1, r3
 80078d6:	4303      	orrs	r3, r0
 80078d8:	d009      	beq.n	80078ee <__ieee754_pow+0x972>
 80078da:	9800      	ldr	r0, [sp, #0]
 80078dc:	9901      	ldr	r1, [sp, #4]
 80078de:	4a25      	ldr	r2, [pc, #148]	; (8007974 <__ieee754_pow+0x9f8>)
 80078e0:	4b25      	ldr	r3, [pc, #148]	; (8007978 <__ieee754_pow+0x9fc>)
 80078e2:	f7fa f9c1 	bl	8001c68 <__aeabi_dmul>
 80078e6:	4a23      	ldr	r2, [pc, #140]	; (8007974 <__ieee754_pow+0x9f8>)
 80078e8:	4b23      	ldr	r3, [pc, #140]	; (8007978 <__ieee754_pow+0x9fc>)
 80078ea:	f7ff fc19 	bl	8007120 <__ieee754_pow+0x1a4>
 80078ee:	0032      	movs	r2, r6
 80078f0:	003b      	movs	r3, r7
 80078f2:	f7fa fc25 	bl	8002140 <__aeabi_dsub>
 80078f6:	9a04      	ldr	r2, [sp, #16]
 80078f8:	9b05      	ldr	r3, [sp, #20]
 80078fa:	f7f8 fcc5 	bl	8000288 <__aeabi_dcmpge>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d100      	bne.n	8007904 <__ieee754_pow+0x988>
 8007902:	e6fe      	b.n	8007702 <__ieee754_pow+0x786>
 8007904:	e7e9      	b.n	80078da <__ieee754_pow+0x95e>
 8007906:	0019      	movs	r1, r3
 8007908:	e7d9      	b.n	80078be <__ieee754_pow+0x942>
 800790a:	2300      	movs	r3, #0
 800790c:	4c16      	ldr	r4, [pc, #88]	; (8007968 <__ieee754_pow+0x9ec>)
 800790e:	f7ff fbec 	bl	80070ea <__ieee754_pow+0x16e>
 8007912:	46c0      	nop			; (mov r8, r8)
 8007914:	652b82fe 	.word	0x652b82fe
 8007918:	3c971547 	.word	0x3c971547
 800791c:	3fe00000 	.word	0x3fe00000
 8007920:	fffffc02 	.word	0xfffffc02
 8007924:	fffffc01 	.word	0xfffffc01
 8007928:	000fffff 	.word	0x000fffff
 800792c:	3fe62e43 	.word	0x3fe62e43
 8007930:	fefa39ef 	.word	0xfefa39ef
 8007934:	3fe62e42 	.word	0x3fe62e42
 8007938:	0ca86c39 	.word	0x0ca86c39
 800793c:	be205c61 	.word	0xbe205c61
 8007940:	72bea4d0 	.word	0x72bea4d0
 8007944:	3e663769 	.word	0x3e663769
 8007948:	c5d26bf1 	.word	0xc5d26bf1
 800794c:	3ebbbd41 	.word	0x3ebbbd41
 8007950:	af25de2c 	.word	0xaf25de2c
 8007954:	3f11566a 	.word	0x3f11566a
 8007958:	16bebd93 	.word	0x16bebd93
 800795c:	3f66c16c 	.word	0x3f66c16c
 8007960:	5555553e 	.word	0x5555553e
 8007964:	3fc55555 	.word	0x3fc55555
 8007968:	3ff00000 	.word	0x3ff00000
 800796c:	4090cbff 	.word	0x4090cbff
 8007970:	3f6f3400 	.word	0x3f6f3400
 8007974:	c2f8f359 	.word	0xc2f8f359
 8007978:	01a56e1f 	.word	0x01a56e1f

0800797c <__ieee754_sqrt>:
 800797c:	4b56      	ldr	r3, [pc, #344]	; (8007ad8 <__ieee754_sqrt+0x15c>)
 800797e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007980:	0002      	movs	r2, r0
 8007982:	0005      	movs	r5, r0
 8007984:	0018      	movs	r0, r3
 8007986:	000c      	movs	r4, r1
 8007988:	b085      	sub	sp, #20
 800798a:	4008      	ands	r0, r1
 800798c:	4298      	cmp	r0, r3
 800798e:	d10f      	bne.n	80079b0 <__ieee754_sqrt+0x34>
 8007990:	000b      	movs	r3, r1
 8007992:	0028      	movs	r0, r5
 8007994:	f7fa f968 	bl	8001c68 <__aeabi_dmul>
 8007998:	0002      	movs	r2, r0
 800799a:	000b      	movs	r3, r1
 800799c:	0028      	movs	r0, r5
 800799e:	0021      	movs	r1, r4
 80079a0:	f7f9 f9f2 	bl	8000d88 <__aeabi_dadd>
 80079a4:	0005      	movs	r5, r0
 80079a6:	000c      	movs	r4, r1
 80079a8:	0028      	movs	r0, r5
 80079aa:	0021      	movs	r1, r4
 80079ac:	b005      	add	sp, #20
 80079ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079b0:	2900      	cmp	r1, #0
 80079b2:	dc10      	bgt.n	80079d6 <__ieee754_sqrt+0x5a>
 80079b4:	004b      	lsls	r3, r1, #1
 80079b6:	085b      	lsrs	r3, r3, #1
 80079b8:	432b      	orrs	r3, r5
 80079ba:	d0f5      	beq.n	80079a8 <__ieee754_sqrt+0x2c>
 80079bc:	2000      	movs	r0, #0
 80079be:	4281      	cmp	r1, r0
 80079c0:	d100      	bne.n	80079c4 <__ieee754_sqrt+0x48>
 80079c2:	e080      	b.n	8007ac6 <__ieee754_sqrt+0x14a>
 80079c4:	000b      	movs	r3, r1
 80079c6:	0028      	movs	r0, r5
 80079c8:	f7fa fbba 	bl	8002140 <__aeabi_dsub>
 80079cc:	0002      	movs	r2, r0
 80079ce:	000b      	movs	r3, r1
 80079d0:	f7f9 fd44 	bl	800145c <__aeabi_ddiv>
 80079d4:	e7e6      	b.n	80079a4 <__ieee754_sqrt+0x28>
 80079d6:	1508      	asrs	r0, r1, #20
 80079d8:	d075      	beq.n	8007ac6 <__ieee754_sqrt+0x14a>
 80079da:	4b40      	ldr	r3, [pc, #256]	; (8007adc <__ieee754_sqrt+0x160>)
 80079dc:	0309      	lsls	r1, r1, #12
 80079de:	18c4      	adds	r4, r0, r3
 80079e0:	2380      	movs	r3, #128	; 0x80
 80079e2:	0b09      	lsrs	r1, r1, #12
 80079e4:	035b      	lsls	r3, r3, #13
 80079e6:	4319      	orrs	r1, r3
 80079e8:	07c3      	lsls	r3, r0, #31
 80079ea:	d403      	bmi.n	80079f4 <__ieee754_sqrt+0x78>
 80079ec:	0fd3      	lsrs	r3, r2, #31
 80079ee:	0049      	lsls	r1, r1, #1
 80079f0:	18c9      	adds	r1, r1, r3
 80079f2:	0052      	lsls	r2, r2, #1
 80079f4:	1063      	asrs	r3, r4, #1
 80079f6:	2400      	movs	r4, #0
 80079f8:	0049      	lsls	r1, r1, #1
 80079fa:	9303      	str	r3, [sp, #12]
 80079fc:	0fd3      	lsrs	r3, r2, #31
 80079fe:	18cb      	adds	r3, r1, r3
 8007a00:	2180      	movs	r1, #128	; 0x80
 8007a02:	2516      	movs	r5, #22
 8007a04:	0020      	movs	r0, r4
 8007a06:	0052      	lsls	r2, r2, #1
 8007a08:	0389      	lsls	r1, r1, #14
 8007a0a:	1846      	adds	r6, r0, r1
 8007a0c:	429e      	cmp	r6, r3
 8007a0e:	dc02      	bgt.n	8007a16 <__ieee754_sqrt+0x9a>
 8007a10:	1870      	adds	r0, r6, r1
 8007a12:	1b9b      	subs	r3, r3, r6
 8007a14:	1864      	adds	r4, r4, r1
 8007a16:	0fd6      	lsrs	r6, r2, #31
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	3d01      	subs	r5, #1
 8007a1c:	18f3      	adds	r3, r6, r3
 8007a1e:	0052      	lsls	r2, r2, #1
 8007a20:	0849      	lsrs	r1, r1, #1
 8007a22:	2d00      	cmp	r5, #0
 8007a24:	d1f1      	bne.n	8007a0a <__ieee754_sqrt+0x8e>
 8007a26:	2620      	movs	r6, #32
 8007a28:	2780      	movs	r7, #128	; 0x80
 8007a2a:	0029      	movs	r1, r5
 8007a2c:	9601      	str	r6, [sp, #4]
 8007a2e:	063f      	lsls	r7, r7, #24
 8007a30:	197e      	adds	r6, r7, r5
 8007a32:	46b4      	mov	ip, r6
 8007a34:	4283      	cmp	r3, r0
 8007a36:	dc02      	bgt.n	8007a3e <__ieee754_sqrt+0xc2>
 8007a38:	d114      	bne.n	8007a64 <__ieee754_sqrt+0xe8>
 8007a3a:	4296      	cmp	r6, r2
 8007a3c:	d812      	bhi.n	8007a64 <__ieee754_sqrt+0xe8>
 8007a3e:	4665      	mov	r5, ip
 8007a40:	4666      	mov	r6, ip
 8007a42:	19ed      	adds	r5, r5, r7
 8007a44:	9002      	str	r0, [sp, #8]
 8007a46:	2e00      	cmp	r6, #0
 8007a48:	da03      	bge.n	8007a52 <__ieee754_sqrt+0xd6>
 8007a4a:	43ee      	mvns	r6, r5
 8007a4c:	0ff6      	lsrs	r6, r6, #31
 8007a4e:	1986      	adds	r6, r0, r6
 8007a50:	9602      	str	r6, [sp, #8]
 8007a52:	1a1b      	subs	r3, r3, r0
 8007a54:	4562      	cmp	r2, ip
 8007a56:	4180      	sbcs	r0, r0
 8007a58:	4240      	negs	r0, r0
 8007a5a:	1a1b      	subs	r3, r3, r0
 8007a5c:	4660      	mov	r0, ip
 8007a5e:	1a12      	subs	r2, r2, r0
 8007a60:	9802      	ldr	r0, [sp, #8]
 8007a62:	19c9      	adds	r1, r1, r7
 8007a64:	0fd6      	lsrs	r6, r2, #31
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	18f3      	adds	r3, r6, r3
 8007a6a:	9e01      	ldr	r6, [sp, #4]
 8007a6c:	0052      	lsls	r2, r2, #1
 8007a6e:	3e01      	subs	r6, #1
 8007a70:	087f      	lsrs	r7, r7, #1
 8007a72:	9601      	str	r6, [sp, #4]
 8007a74:	2e00      	cmp	r6, #0
 8007a76:	d1db      	bne.n	8007a30 <__ieee754_sqrt+0xb4>
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	d003      	beq.n	8007a84 <__ieee754_sqrt+0x108>
 8007a7c:	1c4b      	adds	r3, r1, #1
 8007a7e:	d127      	bne.n	8007ad0 <__ieee754_sqrt+0x154>
 8007a80:	0031      	movs	r1, r6
 8007a82:	3401      	adds	r4, #1
 8007a84:	4b16      	ldr	r3, [pc, #88]	; (8007ae0 <__ieee754_sqrt+0x164>)
 8007a86:	1060      	asrs	r0, r4, #1
 8007a88:	18c0      	adds	r0, r0, r3
 8007a8a:	0849      	lsrs	r1, r1, #1
 8007a8c:	07e3      	lsls	r3, r4, #31
 8007a8e:	d502      	bpl.n	8007a96 <__ieee754_sqrt+0x11a>
 8007a90:	2380      	movs	r3, #128	; 0x80
 8007a92:	061b      	lsls	r3, r3, #24
 8007a94:	4319      	orrs	r1, r3
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	000d      	movs	r5, r1
 8007a9a:	051c      	lsls	r4, r3, #20
 8007a9c:	1823      	adds	r3, r4, r0
 8007a9e:	001c      	movs	r4, r3
 8007aa0:	e782      	b.n	80079a8 <__ieee754_sqrt+0x2c>
 8007aa2:	0ad1      	lsrs	r1, r2, #11
 8007aa4:	3b15      	subs	r3, #21
 8007aa6:	0552      	lsls	r2, r2, #21
 8007aa8:	2900      	cmp	r1, #0
 8007aaa:	d0fa      	beq.n	8007aa2 <__ieee754_sqrt+0x126>
 8007aac:	2480      	movs	r4, #128	; 0x80
 8007aae:	0364      	lsls	r4, r4, #13
 8007ab0:	4221      	tst	r1, r4
 8007ab2:	d00a      	beq.n	8007aca <__ieee754_sqrt+0x14e>
 8007ab4:	2420      	movs	r4, #32
 8007ab6:	0016      	movs	r6, r2
 8007ab8:	1a24      	subs	r4, r4, r0
 8007aba:	40e6      	lsrs	r6, r4
 8007abc:	1e45      	subs	r5, r0, #1
 8007abe:	4082      	lsls	r2, r0
 8007ac0:	4331      	orrs	r1, r6
 8007ac2:	1b58      	subs	r0, r3, r5
 8007ac4:	e789      	b.n	80079da <__ieee754_sqrt+0x5e>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e7ee      	b.n	8007aa8 <__ieee754_sqrt+0x12c>
 8007aca:	0049      	lsls	r1, r1, #1
 8007acc:	3001      	adds	r0, #1
 8007ace:	e7ef      	b.n	8007ab0 <__ieee754_sqrt+0x134>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	3101      	adds	r1, #1
 8007ad4:	4399      	bics	r1, r3
 8007ad6:	e7d5      	b.n	8007a84 <__ieee754_sqrt+0x108>
 8007ad8:	7ff00000 	.word	0x7ff00000
 8007adc:	fffffc01 	.word	0xfffffc01
 8007ae0:	3fe00000 	.word	0x3fe00000

08007ae4 <fabs>:
 8007ae4:	004b      	lsls	r3, r1, #1
 8007ae6:	0859      	lsrs	r1, r3, #1
 8007ae8:	4770      	bx	lr
	...

08007aec <finite>:
 8007aec:	4b02      	ldr	r3, [pc, #8]	; (8007af8 <finite+0xc>)
 8007aee:	0048      	lsls	r0, r1, #1
 8007af0:	0840      	lsrs	r0, r0, #1
 8007af2:	18c0      	adds	r0, r0, r3
 8007af4:	0fc0      	lsrs	r0, r0, #31
 8007af6:	4770      	bx	lr
 8007af8:	80100000 	.word	0x80100000

08007afc <nan>:
 8007afc:	2000      	movs	r0, #0
 8007afe:	4901      	ldr	r1, [pc, #4]	; (8007b04 <nan+0x8>)
 8007b00:	4770      	bx	lr
 8007b02:	46c0      	nop			; (mov r8, r8)
 8007b04:	7ff80000 	.word	0x7ff80000

08007b08 <rint>:
 8007b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b0a:	004a      	lsls	r2, r1, #1
 8007b0c:	4e3e      	ldr	r6, [pc, #248]	; (8007c08 <rint+0x100>)
 8007b0e:	0d52      	lsrs	r2, r2, #21
 8007b10:	b085      	sub	sp, #20
 8007b12:	1996      	adds	r6, r2, r6
 8007b14:	000d      	movs	r5, r1
 8007b16:	0003      	movs	r3, r0
 8007b18:	9101      	str	r1, [sp, #4]
 8007b1a:	0fcc      	lsrs	r4, r1, #31
 8007b1c:	2e13      	cmp	r6, #19
 8007b1e:	dc57      	bgt.n	8007bd0 <rint+0xc8>
 8007b20:	2e00      	cmp	r6, #0
 8007b22:	da2a      	bge.n	8007b7a <rint+0x72>
 8007b24:	004a      	lsls	r2, r1, #1
 8007b26:	0852      	lsrs	r2, r2, #1
 8007b28:	4302      	orrs	r2, r0
 8007b2a:	d024      	beq.n	8007b76 <rint+0x6e>
 8007b2c:	030a      	lsls	r2, r1, #12
 8007b2e:	0b12      	lsrs	r2, r2, #12
 8007b30:	4302      	orrs	r2, r0
 8007b32:	4253      	negs	r3, r2
 8007b34:	4313      	orrs	r3, r2
 8007b36:	2280      	movs	r2, #128	; 0x80
 8007b38:	0c4d      	lsrs	r5, r1, #17
 8007b3a:	0312      	lsls	r2, r2, #12
 8007b3c:	0b1b      	lsrs	r3, r3, #12
 8007b3e:	4013      	ands	r3, r2
 8007b40:	046d      	lsls	r5, r5, #17
 8007b42:	432b      	orrs	r3, r5
 8007b44:	0019      	movs	r1, r3
 8007b46:	4b31      	ldr	r3, [pc, #196]	; (8007c0c <rint+0x104>)
 8007b48:	00e2      	lsls	r2, r4, #3
 8007b4a:	189b      	adds	r3, r3, r2
 8007b4c:	681e      	ldr	r6, [r3, #0]
 8007b4e:	685f      	ldr	r7, [r3, #4]
 8007b50:	0002      	movs	r2, r0
 8007b52:	000b      	movs	r3, r1
 8007b54:	0030      	movs	r0, r6
 8007b56:	0039      	movs	r1, r7
 8007b58:	f7f9 f916 	bl	8000d88 <__aeabi_dadd>
 8007b5c:	9002      	str	r0, [sp, #8]
 8007b5e:	9103      	str	r1, [sp, #12]
 8007b60:	9802      	ldr	r0, [sp, #8]
 8007b62:	9903      	ldr	r1, [sp, #12]
 8007b64:	003b      	movs	r3, r7
 8007b66:	0032      	movs	r2, r6
 8007b68:	f7fa faea 	bl	8002140 <__aeabi_dsub>
 8007b6c:	004b      	lsls	r3, r1, #1
 8007b6e:	085b      	lsrs	r3, r3, #1
 8007b70:	07e4      	lsls	r4, r4, #31
 8007b72:	4323      	orrs	r3, r4
 8007b74:	0019      	movs	r1, r3
 8007b76:	b005      	add	sp, #20
 8007b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b7a:	4a25      	ldr	r2, [pc, #148]	; (8007c10 <rint+0x108>)
 8007b7c:	4132      	asrs	r2, r6
 8007b7e:	0017      	movs	r7, r2
 8007b80:	400f      	ands	r7, r1
 8007b82:	4307      	orrs	r7, r0
 8007b84:	d0f7      	beq.n	8007b76 <rint+0x6e>
 8007b86:	0852      	lsrs	r2, r2, #1
 8007b88:	0011      	movs	r1, r2
 8007b8a:	4029      	ands	r1, r5
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	d00a      	beq.n	8007ba6 <rint+0x9e>
 8007b90:	2300      	movs	r3, #0
 8007b92:	2e13      	cmp	r6, #19
 8007b94:	d101      	bne.n	8007b9a <rint+0x92>
 8007b96:	2380      	movs	r3, #128	; 0x80
 8007b98:	061b      	lsls	r3, r3, #24
 8007b9a:	2780      	movs	r7, #128	; 0x80
 8007b9c:	02ff      	lsls	r7, r7, #11
 8007b9e:	4137      	asrs	r7, r6
 8007ba0:	4395      	bics	r5, r2
 8007ba2:	432f      	orrs	r7, r5
 8007ba4:	9701      	str	r7, [sp, #4]
 8007ba6:	9901      	ldr	r1, [sp, #4]
 8007ba8:	001a      	movs	r2, r3
 8007baa:	000b      	movs	r3, r1
 8007bac:	4917      	ldr	r1, [pc, #92]	; (8007c0c <rint+0x104>)
 8007bae:	00e4      	lsls	r4, r4, #3
 8007bb0:	190c      	adds	r4, r1, r4
 8007bb2:	6865      	ldr	r5, [r4, #4]
 8007bb4:	6824      	ldr	r4, [r4, #0]
 8007bb6:	0020      	movs	r0, r4
 8007bb8:	0029      	movs	r1, r5
 8007bba:	f7f9 f8e5 	bl	8000d88 <__aeabi_dadd>
 8007bbe:	9002      	str	r0, [sp, #8]
 8007bc0:	9103      	str	r1, [sp, #12]
 8007bc2:	9802      	ldr	r0, [sp, #8]
 8007bc4:	9903      	ldr	r1, [sp, #12]
 8007bc6:	0022      	movs	r2, r4
 8007bc8:	002b      	movs	r3, r5
 8007bca:	f7fa fab9 	bl	8002140 <__aeabi_dsub>
 8007bce:	e7d2      	b.n	8007b76 <rint+0x6e>
 8007bd0:	2e33      	cmp	r6, #51	; 0x33
 8007bd2:	dd08      	ble.n	8007be6 <rint+0xde>
 8007bd4:	2380      	movs	r3, #128	; 0x80
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	429e      	cmp	r6, r3
 8007bda:	d1cc      	bne.n	8007b76 <rint+0x6e>
 8007bdc:	0002      	movs	r2, r0
 8007bde:	000b      	movs	r3, r1
 8007be0:	f7f9 f8d2 	bl	8000d88 <__aeabi_dadd>
 8007be4:	e7c7      	b.n	8007b76 <rint+0x6e>
 8007be6:	2601      	movs	r6, #1
 8007be8:	4d0a      	ldr	r5, [pc, #40]	; (8007c14 <rint+0x10c>)
 8007bea:	4276      	negs	r6, r6
 8007bec:	1952      	adds	r2, r2, r5
 8007bee:	40d6      	lsrs	r6, r2
 8007bf0:	4206      	tst	r6, r0
 8007bf2:	d0c0      	beq.n	8007b76 <rint+0x6e>
 8007bf4:	0876      	lsrs	r6, r6, #1
 8007bf6:	4206      	tst	r6, r0
 8007bf8:	d0d5      	beq.n	8007ba6 <rint+0x9e>
 8007bfa:	2180      	movs	r1, #128	; 0x80
 8007bfc:	05c9      	lsls	r1, r1, #23
 8007bfe:	4111      	asrs	r1, r2
 8007c00:	43b3      	bics	r3, r6
 8007c02:	430b      	orrs	r3, r1
 8007c04:	e7cf      	b.n	8007ba6 <rint+0x9e>
 8007c06:	46c0      	nop			; (mov r8, r8)
 8007c08:	fffffc01 	.word	0xfffffc01
 8007c0c:	08007ea8 	.word	0x08007ea8
 8007c10:	000fffff 	.word	0x000fffff
 8007c14:	fffffbed 	.word	0xfffffbed

08007c18 <scalbn>:
 8007c18:	004b      	lsls	r3, r1, #1
 8007c1a:	b570      	push	{r4, r5, r6, lr}
 8007c1c:	0d5b      	lsrs	r3, r3, #21
 8007c1e:	0014      	movs	r4, r2
 8007c20:	000a      	movs	r2, r1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10d      	bne.n	8007c42 <scalbn+0x2a>
 8007c26:	004b      	lsls	r3, r1, #1
 8007c28:	085b      	lsrs	r3, r3, #1
 8007c2a:	4303      	orrs	r3, r0
 8007c2c:	d010      	beq.n	8007c50 <scalbn+0x38>
 8007c2e:	4b27      	ldr	r3, [pc, #156]	; (8007ccc <scalbn+0xb4>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	f7fa f819 	bl	8001c68 <__aeabi_dmul>
 8007c36:	4b26      	ldr	r3, [pc, #152]	; (8007cd0 <scalbn+0xb8>)
 8007c38:	429c      	cmp	r4, r3
 8007c3a:	da0a      	bge.n	8007c52 <scalbn+0x3a>
 8007c3c:	4a25      	ldr	r2, [pc, #148]	; (8007cd4 <scalbn+0xbc>)
 8007c3e:	4b26      	ldr	r3, [pc, #152]	; (8007cd8 <scalbn+0xc0>)
 8007c40:	e019      	b.n	8007c76 <scalbn+0x5e>
 8007c42:	4d26      	ldr	r5, [pc, #152]	; (8007cdc <scalbn+0xc4>)
 8007c44:	42ab      	cmp	r3, r5
 8007c46:	d108      	bne.n	8007c5a <scalbn+0x42>
 8007c48:	0002      	movs	r2, r0
 8007c4a:	000b      	movs	r3, r1
 8007c4c:	f7f9 f89c 	bl	8000d88 <__aeabi_dadd>
 8007c50:	bd70      	pop	{r4, r5, r6, pc}
 8007c52:	000a      	movs	r2, r1
 8007c54:	004b      	lsls	r3, r1, #1
 8007c56:	0d5b      	lsrs	r3, r3, #21
 8007c58:	3b36      	subs	r3, #54	; 0x36
 8007c5a:	4d21      	ldr	r5, [pc, #132]	; (8007ce0 <scalbn+0xc8>)
 8007c5c:	18e3      	adds	r3, r4, r3
 8007c5e:	42ab      	cmp	r3, r5
 8007c60:	dd0c      	ble.n	8007c7c <scalbn+0x64>
 8007c62:	4c20      	ldr	r4, [pc, #128]	; (8007ce4 <scalbn+0xcc>)
 8007c64:	4d20      	ldr	r5, [pc, #128]	; (8007ce8 <scalbn+0xd0>)
 8007c66:	2900      	cmp	r1, #0
 8007c68:	da01      	bge.n	8007c6e <scalbn+0x56>
 8007c6a:	4c1e      	ldr	r4, [pc, #120]	; (8007ce4 <scalbn+0xcc>)
 8007c6c:	4d1f      	ldr	r5, [pc, #124]	; (8007cec <scalbn+0xd4>)
 8007c6e:	0020      	movs	r0, r4
 8007c70:	0029      	movs	r1, r5
 8007c72:	4a1c      	ldr	r2, [pc, #112]	; (8007ce4 <scalbn+0xcc>)
 8007c74:	4b1c      	ldr	r3, [pc, #112]	; (8007ce8 <scalbn+0xd0>)
 8007c76:	f7f9 fff7 	bl	8001c68 <__aeabi_dmul>
 8007c7a:	e7e9      	b.n	8007c50 <scalbn+0x38>
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	dd05      	ble.n	8007c8c <scalbn+0x74>
 8007c80:	4c1b      	ldr	r4, [pc, #108]	; (8007cf0 <scalbn+0xd8>)
 8007c82:	051b      	lsls	r3, r3, #20
 8007c84:	4022      	ands	r2, r4
 8007c86:	431a      	orrs	r2, r3
 8007c88:	0011      	movs	r1, r2
 8007c8a:	e7e1      	b.n	8007c50 <scalbn+0x38>
 8007c8c:	001d      	movs	r5, r3
 8007c8e:	3535      	adds	r5, #53	; 0x35
 8007c90:	da13      	bge.n	8007cba <scalbn+0xa2>
 8007c92:	4a18      	ldr	r2, [pc, #96]	; (8007cf4 <scalbn+0xdc>)
 8007c94:	0fcb      	lsrs	r3, r1, #31
 8007c96:	4294      	cmp	r4, r2
 8007c98:	dd08      	ble.n	8007cac <scalbn+0x94>
 8007c9a:	4812      	ldr	r0, [pc, #72]	; (8007ce4 <scalbn+0xcc>)
 8007c9c:	4912      	ldr	r1, [pc, #72]	; (8007ce8 <scalbn+0xd0>)
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <scalbn+0x8e>
 8007ca2:	4810      	ldr	r0, [pc, #64]	; (8007ce4 <scalbn+0xcc>)
 8007ca4:	4911      	ldr	r1, [pc, #68]	; (8007cec <scalbn+0xd4>)
 8007ca6:	4a0f      	ldr	r2, [pc, #60]	; (8007ce4 <scalbn+0xcc>)
 8007ca8:	4b0f      	ldr	r3, [pc, #60]	; (8007ce8 <scalbn+0xd0>)
 8007caa:	e7e4      	b.n	8007c76 <scalbn+0x5e>
 8007cac:	4809      	ldr	r0, [pc, #36]	; (8007cd4 <scalbn+0xbc>)
 8007cae:	490a      	ldr	r1, [pc, #40]	; (8007cd8 <scalbn+0xc0>)
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d0c3      	beq.n	8007c3c <scalbn+0x24>
 8007cb4:	4807      	ldr	r0, [pc, #28]	; (8007cd4 <scalbn+0xbc>)
 8007cb6:	4910      	ldr	r1, [pc, #64]	; (8007cf8 <scalbn+0xe0>)
 8007cb8:	e7c0      	b.n	8007c3c <scalbn+0x24>
 8007cba:	4c0d      	ldr	r4, [pc, #52]	; (8007cf0 <scalbn+0xd8>)
 8007cbc:	3336      	adds	r3, #54	; 0x36
 8007cbe:	4022      	ands	r2, r4
 8007cc0:	051b      	lsls	r3, r3, #20
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	0019      	movs	r1, r3
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	4b0c      	ldr	r3, [pc, #48]	; (8007cfc <scalbn+0xe4>)
 8007cca:	e7d4      	b.n	8007c76 <scalbn+0x5e>
 8007ccc:	43500000 	.word	0x43500000
 8007cd0:	ffff3cb0 	.word	0xffff3cb0
 8007cd4:	c2f8f359 	.word	0xc2f8f359
 8007cd8:	01a56e1f 	.word	0x01a56e1f
 8007cdc:	000007ff 	.word	0x000007ff
 8007ce0:	000007fe 	.word	0x000007fe
 8007ce4:	8800759c 	.word	0x8800759c
 8007ce8:	7e37e43c 	.word	0x7e37e43c
 8007cec:	fe37e43c 	.word	0xfe37e43c
 8007cf0:	800fffff 	.word	0x800fffff
 8007cf4:	0000c350 	.word	0x0000c350
 8007cf8:	81a56e1f 	.word	0x81a56e1f
 8007cfc:	3c900000 	.word	0x3c900000

08007d00 <_init>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	46c0      	nop			; (mov r8, r8)
 8007d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d06:	bc08      	pop	{r3}
 8007d08:	469e      	mov	lr, r3
 8007d0a:	4770      	bx	lr

08007d0c <_fini>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d12:	bc08      	pop	{r3}
 8007d14:	469e      	mov	lr, r3
 8007d16:	4770      	bx	lr
