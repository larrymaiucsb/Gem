
PCBv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c268  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  0800c328  0800c328  0001c328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9c8  0800c9c8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9c8  0800c9c8  0001c9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9d0  0800c9d0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9d0  0800c9d0  0001c9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9d4  0800c9d4  0001c9d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c9d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200001e0  0800cbb8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  0800cbb8  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014def  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b7b  00000000  00000000  00034ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00037b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00038c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017275  00000000  00000000  00039b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001468f  00000000  00000000  00050dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a4e2  00000000  00000000  00065464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef946  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fa4  00000000  00000000  000ef99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c310 	.word	0x0800c310

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800c310 	.word	0x0800c310

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fca9 	bl	8001d94 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fbf3 	bl	8001c38 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fc9b 	bl	8001d94 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc91 	bl	8001d94 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc15 	bl	8001cb0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc0b 	bl	8001cb0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	1c08      	adds	r0, r1, #0
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f84c 	bl	8000574 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	0415      	lsls	r5, r2, #16
 80004ec:	0c2d      	lsrs	r5, r5, #16
 80004ee:	000f      	movs	r7, r1
 80004f0:	0001      	movs	r1, r0
 80004f2:	002e      	movs	r6, r5
 80004f4:	46c6      	mov	lr, r8
 80004f6:	4684      	mov	ip, r0
 80004f8:	0400      	lsls	r0, r0, #16
 80004fa:	0c14      	lsrs	r4, r2, #16
 80004fc:	0c00      	lsrs	r0, r0, #16
 80004fe:	0c09      	lsrs	r1, r1, #16
 8000500:	4346      	muls	r6, r0
 8000502:	434d      	muls	r5, r1
 8000504:	4360      	muls	r0, r4
 8000506:	4361      	muls	r1, r4
 8000508:	1940      	adds	r0, r0, r5
 800050a:	0c34      	lsrs	r4, r6, #16
 800050c:	1824      	adds	r4, r4, r0
 800050e:	b500      	push	{lr}
 8000510:	42a5      	cmp	r5, r4
 8000512:	d903      	bls.n	800051c <__aeabi_lmul+0x34>
 8000514:	2080      	movs	r0, #128	; 0x80
 8000516:	0240      	lsls	r0, r0, #9
 8000518:	4680      	mov	r8, r0
 800051a:	4441      	add	r1, r8
 800051c:	0c25      	lsrs	r5, r4, #16
 800051e:	186d      	adds	r5, r5, r1
 8000520:	4661      	mov	r1, ip
 8000522:	4359      	muls	r1, r3
 8000524:	437a      	muls	r2, r7
 8000526:	0430      	lsls	r0, r6, #16
 8000528:	1949      	adds	r1, r1, r5
 800052a:	0424      	lsls	r4, r4, #16
 800052c:	0c00      	lsrs	r0, r0, #16
 800052e:	1820      	adds	r0, r4, r0
 8000530:	1889      	adds	r1, r1, r2
 8000532:	bc80      	pop	{r7}
 8000534:	46b8      	mov	r8, r7
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000538 <__aeabi_d2uiz>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	2200      	movs	r2, #0
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <__aeabi_d2uiz+0x38>)
 800053e:	0004      	movs	r4, r0
 8000540:	000d      	movs	r5, r1
 8000542:	f7ff ffa7 	bl	8000494 <__aeabi_dcmpge>
 8000546:	2800      	cmp	r0, #0
 8000548:	d104      	bne.n	8000554 <__aeabi_d2uiz+0x1c>
 800054a:	0020      	movs	r0, r4
 800054c:	0029      	movs	r1, r5
 800054e:	f002 faad 	bl	8002aac <__aeabi_d2iz>
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <__aeabi_d2uiz+0x38>)
 8000556:	2200      	movs	r2, #0
 8000558:	0020      	movs	r0, r4
 800055a:	0029      	movs	r1, r5
 800055c:	f001 fef6 	bl	800234c <__aeabi_dsub>
 8000560:	f002 faa4 	bl	8002aac <__aeabi_d2iz>
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	061b      	lsls	r3, r3, #24
 8000568:	469c      	mov	ip, r3
 800056a:	4460      	add	r0, ip
 800056c:	e7f1      	b.n	8000552 <__aeabi_d2uiz+0x1a>
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	41e00000 	.word	0x41e00000

08000574 <__udivmoddi4>:
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	4657      	mov	r7, sl
 8000578:	464e      	mov	r6, r9
 800057a:	4645      	mov	r5, r8
 800057c:	46de      	mov	lr, fp
 800057e:	b5e0      	push	{r5, r6, r7, lr}
 8000580:	0004      	movs	r4, r0
 8000582:	000d      	movs	r5, r1
 8000584:	4692      	mov	sl, r2
 8000586:	4699      	mov	r9, r3
 8000588:	b083      	sub	sp, #12
 800058a:	428b      	cmp	r3, r1
 800058c:	d830      	bhi.n	80005f0 <__udivmoddi4+0x7c>
 800058e:	d02d      	beq.n	80005ec <__udivmoddi4+0x78>
 8000590:	4649      	mov	r1, r9
 8000592:	4650      	mov	r0, sl
 8000594:	f002 fc04 	bl	8002da0 <__clzdi2>
 8000598:	0029      	movs	r1, r5
 800059a:	0006      	movs	r6, r0
 800059c:	0020      	movs	r0, r4
 800059e:	f002 fbff 	bl	8002da0 <__clzdi2>
 80005a2:	1a33      	subs	r3, r6, r0
 80005a4:	4698      	mov	r8, r3
 80005a6:	3b20      	subs	r3, #32
 80005a8:	469b      	mov	fp, r3
 80005aa:	d433      	bmi.n	8000614 <__udivmoddi4+0xa0>
 80005ac:	465a      	mov	r2, fp
 80005ae:	4653      	mov	r3, sl
 80005b0:	4093      	lsls	r3, r2
 80005b2:	4642      	mov	r2, r8
 80005b4:	001f      	movs	r7, r3
 80005b6:	4653      	mov	r3, sl
 80005b8:	4093      	lsls	r3, r2
 80005ba:	001e      	movs	r6, r3
 80005bc:	42af      	cmp	r7, r5
 80005be:	d83a      	bhi.n	8000636 <__udivmoddi4+0xc2>
 80005c0:	42af      	cmp	r7, r5
 80005c2:	d100      	bne.n	80005c6 <__udivmoddi4+0x52>
 80005c4:	e078      	b.n	80006b8 <__udivmoddi4+0x144>
 80005c6:	465b      	mov	r3, fp
 80005c8:	1ba4      	subs	r4, r4, r6
 80005ca:	41bd      	sbcs	r5, r7
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	da00      	bge.n	80005d2 <__udivmoddi4+0x5e>
 80005d0:	e075      	b.n	80006be <__udivmoddi4+0x14a>
 80005d2:	2200      	movs	r2, #0
 80005d4:	2300      	movs	r3, #0
 80005d6:	9200      	str	r2, [sp, #0]
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	465a      	mov	r2, fp
 80005de:	4093      	lsls	r3, r2
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	4642      	mov	r2, r8
 80005e6:	4093      	lsls	r3, r2
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	e028      	b.n	800063e <__udivmoddi4+0xca>
 80005ec:	4282      	cmp	r2, r0
 80005ee:	d9cf      	bls.n	8000590 <__udivmoddi4+0x1c>
 80005f0:	2200      	movs	r2, #0
 80005f2:	2300      	movs	r3, #0
 80005f4:	9200      	str	r2, [sp, #0]
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <__udivmoddi4+0x8e>
 80005fe:	601c      	str	r4, [r3, #0]
 8000600:	605d      	str	r5, [r3, #4]
 8000602:	9800      	ldr	r0, [sp, #0]
 8000604:	9901      	ldr	r1, [sp, #4]
 8000606:	b003      	add	sp, #12
 8000608:	bcf0      	pop	{r4, r5, r6, r7}
 800060a:	46bb      	mov	fp, r7
 800060c:	46b2      	mov	sl, r6
 800060e:	46a9      	mov	r9, r5
 8000610:	46a0      	mov	r8, r4
 8000612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000614:	4642      	mov	r2, r8
 8000616:	2320      	movs	r3, #32
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	4652      	mov	r2, sl
 800061c:	40da      	lsrs	r2, r3
 800061e:	4641      	mov	r1, r8
 8000620:	0013      	movs	r3, r2
 8000622:	464a      	mov	r2, r9
 8000624:	408a      	lsls	r2, r1
 8000626:	0017      	movs	r7, r2
 8000628:	4642      	mov	r2, r8
 800062a:	431f      	orrs	r7, r3
 800062c:	4653      	mov	r3, sl
 800062e:	4093      	lsls	r3, r2
 8000630:	001e      	movs	r6, r3
 8000632:	42af      	cmp	r7, r5
 8000634:	d9c4      	bls.n	80005c0 <__udivmoddi4+0x4c>
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	9200      	str	r2, [sp, #0]
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	4643      	mov	r3, r8
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0d9      	beq.n	80005f8 <__udivmoddi4+0x84>
 8000644:	07fb      	lsls	r3, r7, #31
 8000646:	0872      	lsrs	r2, r6, #1
 8000648:	431a      	orrs	r2, r3
 800064a:	4646      	mov	r6, r8
 800064c:	087b      	lsrs	r3, r7, #1
 800064e:	e00e      	b.n	800066e <__udivmoddi4+0xfa>
 8000650:	42ab      	cmp	r3, r5
 8000652:	d101      	bne.n	8000658 <__udivmoddi4+0xe4>
 8000654:	42a2      	cmp	r2, r4
 8000656:	d80c      	bhi.n	8000672 <__udivmoddi4+0xfe>
 8000658:	1aa4      	subs	r4, r4, r2
 800065a:	419d      	sbcs	r5, r3
 800065c:	2001      	movs	r0, #1
 800065e:	1924      	adds	r4, r4, r4
 8000660:	416d      	adcs	r5, r5
 8000662:	2100      	movs	r1, #0
 8000664:	3e01      	subs	r6, #1
 8000666:	1824      	adds	r4, r4, r0
 8000668:	414d      	adcs	r5, r1
 800066a:	2e00      	cmp	r6, #0
 800066c:	d006      	beq.n	800067c <__udivmoddi4+0x108>
 800066e:	42ab      	cmp	r3, r5
 8000670:	d9ee      	bls.n	8000650 <__udivmoddi4+0xdc>
 8000672:	3e01      	subs	r6, #1
 8000674:	1924      	adds	r4, r4, r4
 8000676:	416d      	adcs	r5, r5
 8000678:	2e00      	cmp	r6, #0
 800067a:	d1f8      	bne.n	800066e <__udivmoddi4+0xfa>
 800067c:	9800      	ldr	r0, [sp, #0]
 800067e:	9901      	ldr	r1, [sp, #4]
 8000680:	465b      	mov	r3, fp
 8000682:	1900      	adds	r0, r0, r4
 8000684:	4169      	adcs	r1, r5
 8000686:	2b00      	cmp	r3, #0
 8000688:	db24      	blt.n	80006d4 <__udivmoddi4+0x160>
 800068a:	002b      	movs	r3, r5
 800068c:	465a      	mov	r2, fp
 800068e:	4644      	mov	r4, r8
 8000690:	40d3      	lsrs	r3, r2
 8000692:	002a      	movs	r2, r5
 8000694:	40e2      	lsrs	r2, r4
 8000696:	001c      	movs	r4, r3
 8000698:	465b      	mov	r3, fp
 800069a:	0015      	movs	r5, r2
 800069c:	2b00      	cmp	r3, #0
 800069e:	db2a      	blt.n	80006f6 <__udivmoddi4+0x182>
 80006a0:	0026      	movs	r6, r4
 80006a2:	409e      	lsls	r6, r3
 80006a4:	0033      	movs	r3, r6
 80006a6:	0026      	movs	r6, r4
 80006a8:	4647      	mov	r7, r8
 80006aa:	40be      	lsls	r6, r7
 80006ac:	0032      	movs	r2, r6
 80006ae:	1a80      	subs	r0, r0, r2
 80006b0:	4199      	sbcs	r1, r3
 80006b2:	9000      	str	r0, [sp, #0]
 80006b4:	9101      	str	r1, [sp, #4]
 80006b6:	e79f      	b.n	80005f8 <__udivmoddi4+0x84>
 80006b8:	42a3      	cmp	r3, r4
 80006ba:	d8bc      	bhi.n	8000636 <__udivmoddi4+0xc2>
 80006bc:	e783      	b.n	80005c6 <__udivmoddi4+0x52>
 80006be:	4642      	mov	r2, r8
 80006c0:	2320      	movs	r3, #32
 80006c2:	2100      	movs	r1, #0
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	2200      	movs	r2, #0
 80006c8:	9100      	str	r1, [sp, #0]
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	2201      	movs	r2, #1
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	9201      	str	r2, [sp, #4]
 80006d2:	e786      	b.n	80005e2 <__udivmoddi4+0x6e>
 80006d4:	4642      	mov	r2, r8
 80006d6:	2320      	movs	r3, #32
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	002a      	movs	r2, r5
 80006dc:	4646      	mov	r6, r8
 80006de:	409a      	lsls	r2, r3
 80006e0:	0023      	movs	r3, r4
 80006e2:	40f3      	lsrs	r3, r6
 80006e4:	4644      	mov	r4, r8
 80006e6:	4313      	orrs	r3, r2
 80006e8:	002a      	movs	r2, r5
 80006ea:	40e2      	lsrs	r2, r4
 80006ec:	001c      	movs	r4, r3
 80006ee:	465b      	mov	r3, fp
 80006f0:	0015      	movs	r5, r2
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	dad4      	bge.n	80006a0 <__udivmoddi4+0x12c>
 80006f6:	4642      	mov	r2, r8
 80006f8:	002f      	movs	r7, r5
 80006fa:	2320      	movs	r3, #32
 80006fc:	0026      	movs	r6, r4
 80006fe:	4097      	lsls	r7, r2
 8000700:	1a9b      	subs	r3, r3, r2
 8000702:	40de      	lsrs	r6, r3
 8000704:	003b      	movs	r3, r7
 8000706:	4333      	orrs	r3, r6
 8000708:	e7cd      	b.n	80006a6 <__udivmoddi4+0x132>
 800070a:	46c0      	nop			; (mov r8, r8)

0800070c <__aeabi_fadd>:
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070e:	4646      	mov	r6, r8
 8000710:	46d6      	mov	lr, sl
 8000712:	464f      	mov	r7, r9
 8000714:	024d      	lsls	r5, r1, #9
 8000716:	0242      	lsls	r2, r0, #9
 8000718:	b5c0      	push	{r6, r7, lr}
 800071a:	0a52      	lsrs	r2, r2, #9
 800071c:	0a6e      	lsrs	r6, r5, #9
 800071e:	0047      	lsls	r7, r0, #1
 8000720:	46b0      	mov	r8, r6
 8000722:	0e3f      	lsrs	r7, r7, #24
 8000724:	004e      	lsls	r6, r1, #1
 8000726:	0fc4      	lsrs	r4, r0, #31
 8000728:	00d0      	lsls	r0, r2, #3
 800072a:	4694      	mov	ip, r2
 800072c:	003b      	movs	r3, r7
 800072e:	4682      	mov	sl, r0
 8000730:	0e36      	lsrs	r6, r6, #24
 8000732:	0fc9      	lsrs	r1, r1, #31
 8000734:	09ad      	lsrs	r5, r5, #6
 8000736:	428c      	cmp	r4, r1
 8000738:	d06d      	beq.n	8000816 <__aeabi_fadd+0x10a>
 800073a:	1bb8      	subs	r0, r7, r6
 800073c:	4681      	mov	r9, r0
 800073e:	2800      	cmp	r0, #0
 8000740:	dd4d      	ble.n	80007de <__aeabi_fadd+0xd2>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d100      	bne.n	8000748 <__aeabi_fadd+0x3c>
 8000746:	e088      	b.n	800085a <__aeabi_fadd+0x14e>
 8000748:	2fff      	cmp	r7, #255	; 0xff
 800074a:	d05a      	beq.n	8000802 <__aeabi_fadd+0xf6>
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	04db      	lsls	r3, r3, #19
 8000750:	431d      	orrs	r5, r3
 8000752:	464b      	mov	r3, r9
 8000754:	2201      	movs	r2, #1
 8000756:	2b1b      	cmp	r3, #27
 8000758:	dc0a      	bgt.n	8000770 <__aeabi_fadd+0x64>
 800075a:	002b      	movs	r3, r5
 800075c:	464a      	mov	r2, r9
 800075e:	4649      	mov	r1, r9
 8000760:	40d3      	lsrs	r3, r2
 8000762:	2220      	movs	r2, #32
 8000764:	1a52      	subs	r2, r2, r1
 8000766:	4095      	lsls	r5, r2
 8000768:	002a      	movs	r2, r5
 800076a:	1e55      	subs	r5, r2, #1
 800076c:	41aa      	sbcs	r2, r5
 800076e:	431a      	orrs	r2, r3
 8000770:	4653      	mov	r3, sl
 8000772:	1a9a      	subs	r2, r3, r2
 8000774:	0153      	lsls	r3, r2, #5
 8000776:	d400      	bmi.n	800077a <__aeabi_fadd+0x6e>
 8000778:	e0b9      	b.n	80008ee <__aeabi_fadd+0x1e2>
 800077a:	0192      	lsls	r2, r2, #6
 800077c:	0996      	lsrs	r6, r2, #6
 800077e:	0030      	movs	r0, r6
 8000780:	f002 faf0 	bl	8002d64 <__clzsi2>
 8000784:	3805      	subs	r0, #5
 8000786:	4086      	lsls	r6, r0
 8000788:	4287      	cmp	r7, r0
 800078a:	dd00      	ble.n	800078e <__aeabi_fadd+0x82>
 800078c:	e0d4      	b.n	8000938 <__aeabi_fadd+0x22c>
 800078e:	0033      	movs	r3, r6
 8000790:	1bc7      	subs	r7, r0, r7
 8000792:	2020      	movs	r0, #32
 8000794:	3701      	adds	r7, #1
 8000796:	40fb      	lsrs	r3, r7
 8000798:	1bc7      	subs	r7, r0, r7
 800079a:	40be      	lsls	r6, r7
 800079c:	0032      	movs	r2, r6
 800079e:	1e56      	subs	r6, r2, #1
 80007a0:	41b2      	sbcs	r2, r6
 80007a2:	2700      	movs	r7, #0
 80007a4:	431a      	orrs	r2, r3
 80007a6:	0753      	lsls	r3, r2, #29
 80007a8:	d004      	beq.n	80007b4 <__aeabi_fadd+0xa8>
 80007aa:	230f      	movs	r3, #15
 80007ac:	4013      	ands	r3, r2
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fadd+0xa8>
 80007b2:	3204      	adds	r2, #4
 80007b4:	0153      	lsls	r3, r2, #5
 80007b6:	d400      	bmi.n	80007ba <__aeabi_fadd+0xae>
 80007b8:	e09c      	b.n	80008f4 <__aeabi_fadd+0x1e8>
 80007ba:	1c7b      	adds	r3, r7, #1
 80007bc:	2ffe      	cmp	r7, #254	; 0xfe
 80007be:	d100      	bne.n	80007c2 <__aeabi_fadd+0xb6>
 80007c0:	e09a      	b.n	80008f8 <__aeabi_fadd+0x1ec>
 80007c2:	0192      	lsls	r2, r2, #6
 80007c4:	0a52      	lsrs	r2, r2, #9
 80007c6:	4694      	mov	ip, r2
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	05d8      	lsls	r0, r3, #23
 80007cc:	4663      	mov	r3, ip
 80007ce:	07e4      	lsls	r4, r4, #31
 80007d0:	4318      	orrs	r0, r3
 80007d2:	4320      	orrs	r0, r4
 80007d4:	bce0      	pop	{r5, r6, r7}
 80007d6:	46ba      	mov	sl, r7
 80007d8:	46b1      	mov	r9, r6
 80007da:	46a8      	mov	r8, r5
 80007dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007de:	2800      	cmp	r0, #0
 80007e0:	d049      	beq.n	8000876 <__aeabi_fadd+0x16a>
 80007e2:	1bf3      	subs	r3, r6, r7
 80007e4:	2f00      	cmp	r7, #0
 80007e6:	d000      	beq.n	80007ea <__aeabi_fadd+0xde>
 80007e8:	e0b6      	b.n	8000958 <__aeabi_fadd+0x24c>
 80007ea:	4652      	mov	r2, sl
 80007ec:	2a00      	cmp	r2, #0
 80007ee:	d060      	beq.n	80008b2 <__aeabi_fadd+0x1a6>
 80007f0:	3b01      	subs	r3, #1
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fadd+0xec>
 80007f6:	e0fc      	b.n	80009f2 <__aeabi_fadd+0x2e6>
 80007f8:	2eff      	cmp	r6, #255	; 0xff
 80007fa:	d000      	beq.n	80007fe <__aeabi_fadd+0xf2>
 80007fc:	e0b4      	b.n	8000968 <__aeabi_fadd+0x25c>
 80007fe:	000c      	movs	r4, r1
 8000800:	4642      	mov	r2, r8
 8000802:	2a00      	cmp	r2, #0
 8000804:	d078      	beq.n	80008f8 <__aeabi_fadd+0x1ec>
 8000806:	2080      	movs	r0, #128	; 0x80
 8000808:	03c0      	lsls	r0, r0, #15
 800080a:	4310      	orrs	r0, r2
 800080c:	0242      	lsls	r2, r0, #9
 800080e:	0a53      	lsrs	r3, r2, #9
 8000810:	469c      	mov	ip, r3
 8000812:	23ff      	movs	r3, #255	; 0xff
 8000814:	e7d9      	b.n	80007ca <__aeabi_fadd+0xbe>
 8000816:	1bb9      	subs	r1, r7, r6
 8000818:	2900      	cmp	r1, #0
 800081a:	dd71      	ble.n	8000900 <__aeabi_fadd+0x1f4>
 800081c:	2e00      	cmp	r6, #0
 800081e:	d03f      	beq.n	80008a0 <__aeabi_fadd+0x194>
 8000820:	2fff      	cmp	r7, #255	; 0xff
 8000822:	d0ee      	beq.n	8000802 <__aeabi_fadd+0xf6>
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	04db      	lsls	r3, r3, #19
 8000828:	431d      	orrs	r5, r3
 800082a:	2201      	movs	r2, #1
 800082c:	291b      	cmp	r1, #27
 800082e:	dc07      	bgt.n	8000840 <__aeabi_fadd+0x134>
 8000830:	002a      	movs	r2, r5
 8000832:	2320      	movs	r3, #32
 8000834:	40ca      	lsrs	r2, r1
 8000836:	1a59      	subs	r1, r3, r1
 8000838:	408d      	lsls	r5, r1
 800083a:	1e6b      	subs	r3, r5, #1
 800083c:	419d      	sbcs	r5, r3
 800083e:	432a      	orrs	r2, r5
 8000840:	4452      	add	r2, sl
 8000842:	0153      	lsls	r3, r2, #5
 8000844:	d553      	bpl.n	80008ee <__aeabi_fadd+0x1e2>
 8000846:	3701      	adds	r7, #1
 8000848:	2fff      	cmp	r7, #255	; 0xff
 800084a:	d055      	beq.n	80008f8 <__aeabi_fadd+0x1ec>
 800084c:	2301      	movs	r3, #1
 800084e:	497b      	ldr	r1, [pc, #492]	; (8000a3c <__aeabi_fadd+0x330>)
 8000850:	4013      	ands	r3, r2
 8000852:	0852      	lsrs	r2, r2, #1
 8000854:	400a      	ands	r2, r1
 8000856:	431a      	orrs	r2, r3
 8000858:	e7a5      	b.n	80007a6 <__aeabi_fadd+0x9a>
 800085a:	2d00      	cmp	r5, #0
 800085c:	d02c      	beq.n	80008b8 <__aeabi_fadd+0x1ac>
 800085e:	2301      	movs	r3, #1
 8000860:	425b      	negs	r3, r3
 8000862:	469c      	mov	ip, r3
 8000864:	44e1      	add	r9, ip
 8000866:	464b      	mov	r3, r9
 8000868:	2b00      	cmp	r3, #0
 800086a:	d100      	bne.n	800086e <__aeabi_fadd+0x162>
 800086c:	e0ad      	b.n	80009ca <__aeabi_fadd+0x2be>
 800086e:	2fff      	cmp	r7, #255	; 0xff
 8000870:	d000      	beq.n	8000874 <__aeabi_fadd+0x168>
 8000872:	e76e      	b.n	8000752 <__aeabi_fadd+0x46>
 8000874:	e7c5      	b.n	8000802 <__aeabi_fadd+0xf6>
 8000876:	20fe      	movs	r0, #254	; 0xfe
 8000878:	1c7e      	adds	r6, r7, #1
 800087a:	4230      	tst	r0, r6
 800087c:	d160      	bne.n	8000940 <__aeabi_fadd+0x234>
 800087e:	2f00      	cmp	r7, #0
 8000880:	d000      	beq.n	8000884 <__aeabi_fadd+0x178>
 8000882:	e093      	b.n	80009ac <__aeabi_fadd+0x2a0>
 8000884:	4652      	mov	r2, sl
 8000886:	2a00      	cmp	r2, #0
 8000888:	d100      	bne.n	800088c <__aeabi_fadd+0x180>
 800088a:	e0b6      	b.n	80009fa <__aeabi_fadd+0x2ee>
 800088c:	2d00      	cmp	r5, #0
 800088e:	d09c      	beq.n	80007ca <__aeabi_fadd+0xbe>
 8000890:	1b52      	subs	r2, r2, r5
 8000892:	0150      	lsls	r0, r2, #5
 8000894:	d400      	bmi.n	8000898 <__aeabi_fadd+0x18c>
 8000896:	e0c3      	b.n	8000a20 <__aeabi_fadd+0x314>
 8000898:	4653      	mov	r3, sl
 800089a:	000c      	movs	r4, r1
 800089c:	1aea      	subs	r2, r5, r3
 800089e:	e782      	b.n	80007a6 <__aeabi_fadd+0x9a>
 80008a0:	2d00      	cmp	r5, #0
 80008a2:	d009      	beq.n	80008b8 <__aeabi_fadd+0x1ac>
 80008a4:	3901      	subs	r1, #1
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d100      	bne.n	80008ac <__aeabi_fadd+0x1a0>
 80008aa:	e08b      	b.n	80009c4 <__aeabi_fadd+0x2b8>
 80008ac:	2fff      	cmp	r7, #255	; 0xff
 80008ae:	d1bc      	bne.n	800082a <__aeabi_fadd+0x11e>
 80008b0:	e7a7      	b.n	8000802 <__aeabi_fadd+0xf6>
 80008b2:	000c      	movs	r4, r1
 80008b4:	4642      	mov	r2, r8
 80008b6:	0037      	movs	r7, r6
 80008b8:	2fff      	cmp	r7, #255	; 0xff
 80008ba:	d0a2      	beq.n	8000802 <__aeabi_fadd+0xf6>
 80008bc:	0252      	lsls	r2, r2, #9
 80008be:	0a53      	lsrs	r3, r2, #9
 80008c0:	469c      	mov	ip, r3
 80008c2:	b2fb      	uxtb	r3, r7
 80008c4:	e781      	b.n	80007ca <__aeabi_fadd+0xbe>
 80008c6:	21fe      	movs	r1, #254	; 0xfe
 80008c8:	3701      	adds	r7, #1
 80008ca:	4239      	tst	r1, r7
 80008cc:	d165      	bne.n	800099a <__aeabi_fadd+0x28e>
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d17e      	bne.n	80009d0 <__aeabi_fadd+0x2c4>
 80008d2:	2800      	cmp	r0, #0
 80008d4:	d100      	bne.n	80008d8 <__aeabi_fadd+0x1cc>
 80008d6:	e0aa      	b.n	8000a2e <__aeabi_fadd+0x322>
 80008d8:	2d00      	cmp	r5, #0
 80008da:	d100      	bne.n	80008de <__aeabi_fadd+0x1d2>
 80008dc:	e775      	b.n	80007ca <__aeabi_fadd+0xbe>
 80008de:	002a      	movs	r2, r5
 80008e0:	4452      	add	r2, sl
 80008e2:	2700      	movs	r7, #0
 80008e4:	0153      	lsls	r3, r2, #5
 80008e6:	d502      	bpl.n	80008ee <__aeabi_fadd+0x1e2>
 80008e8:	4b55      	ldr	r3, [pc, #340]	; (8000a40 <__aeabi_fadd+0x334>)
 80008ea:	3701      	adds	r7, #1
 80008ec:	401a      	ands	r2, r3
 80008ee:	0753      	lsls	r3, r2, #29
 80008f0:	d000      	beq.n	80008f4 <__aeabi_fadd+0x1e8>
 80008f2:	e75a      	b.n	80007aa <__aeabi_fadd+0x9e>
 80008f4:	08d2      	lsrs	r2, r2, #3
 80008f6:	e7df      	b.n	80008b8 <__aeabi_fadd+0x1ac>
 80008f8:	2200      	movs	r2, #0
 80008fa:	23ff      	movs	r3, #255	; 0xff
 80008fc:	4694      	mov	ip, r2
 80008fe:	e764      	b.n	80007ca <__aeabi_fadd+0xbe>
 8000900:	2900      	cmp	r1, #0
 8000902:	d0e0      	beq.n	80008c6 <__aeabi_fadd+0x1ba>
 8000904:	1bf3      	subs	r3, r6, r7
 8000906:	2f00      	cmp	r7, #0
 8000908:	d03e      	beq.n	8000988 <__aeabi_fadd+0x27c>
 800090a:	2eff      	cmp	r6, #255	; 0xff
 800090c:	d100      	bne.n	8000910 <__aeabi_fadd+0x204>
 800090e:	e777      	b.n	8000800 <__aeabi_fadd+0xf4>
 8000910:	2280      	movs	r2, #128	; 0x80
 8000912:	0001      	movs	r1, r0
 8000914:	04d2      	lsls	r2, r2, #19
 8000916:	4311      	orrs	r1, r2
 8000918:	468a      	mov	sl, r1
 800091a:	2201      	movs	r2, #1
 800091c:	2b1b      	cmp	r3, #27
 800091e:	dc08      	bgt.n	8000932 <__aeabi_fadd+0x226>
 8000920:	4652      	mov	r2, sl
 8000922:	2120      	movs	r1, #32
 8000924:	4650      	mov	r0, sl
 8000926:	40da      	lsrs	r2, r3
 8000928:	1acb      	subs	r3, r1, r3
 800092a:	4098      	lsls	r0, r3
 800092c:	1e43      	subs	r3, r0, #1
 800092e:	4198      	sbcs	r0, r3
 8000930:	4302      	orrs	r2, r0
 8000932:	0037      	movs	r7, r6
 8000934:	1952      	adds	r2, r2, r5
 8000936:	e784      	b.n	8000842 <__aeabi_fadd+0x136>
 8000938:	4a41      	ldr	r2, [pc, #260]	; (8000a40 <__aeabi_fadd+0x334>)
 800093a:	1a3f      	subs	r7, r7, r0
 800093c:	4032      	ands	r2, r6
 800093e:	e732      	b.n	80007a6 <__aeabi_fadd+0x9a>
 8000940:	4653      	mov	r3, sl
 8000942:	1b5e      	subs	r6, r3, r5
 8000944:	0173      	lsls	r3, r6, #5
 8000946:	d42d      	bmi.n	80009a4 <__aeabi_fadd+0x298>
 8000948:	2e00      	cmp	r6, #0
 800094a:	d000      	beq.n	800094e <__aeabi_fadd+0x242>
 800094c:	e717      	b.n	800077e <__aeabi_fadd+0x72>
 800094e:	2200      	movs	r2, #0
 8000950:	2400      	movs	r4, #0
 8000952:	2300      	movs	r3, #0
 8000954:	4694      	mov	ip, r2
 8000956:	e738      	b.n	80007ca <__aeabi_fadd+0xbe>
 8000958:	2eff      	cmp	r6, #255	; 0xff
 800095a:	d100      	bne.n	800095e <__aeabi_fadd+0x252>
 800095c:	e74f      	b.n	80007fe <__aeabi_fadd+0xf2>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	4650      	mov	r0, sl
 8000962:	04d2      	lsls	r2, r2, #19
 8000964:	4310      	orrs	r0, r2
 8000966:	4682      	mov	sl, r0
 8000968:	2201      	movs	r2, #1
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dc08      	bgt.n	8000980 <__aeabi_fadd+0x274>
 800096e:	4652      	mov	r2, sl
 8000970:	2420      	movs	r4, #32
 8000972:	4650      	mov	r0, sl
 8000974:	40da      	lsrs	r2, r3
 8000976:	1ae3      	subs	r3, r4, r3
 8000978:	4098      	lsls	r0, r3
 800097a:	1e43      	subs	r3, r0, #1
 800097c:	4198      	sbcs	r0, r3
 800097e:	4302      	orrs	r2, r0
 8000980:	000c      	movs	r4, r1
 8000982:	0037      	movs	r7, r6
 8000984:	1aaa      	subs	r2, r5, r2
 8000986:	e6f5      	b.n	8000774 <__aeabi_fadd+0x68>
 8000988:	2800      	cmp	r0, #0
 800098a:	d093      	beq.n	80008b4 <__aeabi_fadd+0x1a8>
 800098c:	3b01      	subs	r3, #1
 800098e:	2b00      	cmp	r3, #0
 8000990:	d04f      	beq.n	8000a32 <__aeabi_fadd+0x326>
 8000992:	2eff      	cmp	r6, #255	; 0xff
 8000994:	d1c1      	bne.n	800091a <__aeabi_fadd+0x20e>
 8000996:	4642      	mov	r2, r8
 8000998:	e733      	b.n	8000802 <__aeabi_fadd+0xf6>
 800099a:	2fff      	cmp	r7, #255	; 0xff
 800099c:	d0ac      	beq.n	80008f8 <__aeabi_fadd+0x1ec>
 800099e:	4455      	add	r5, sl
 80009a0:	086a      	lsrs	r2, r5, #1
 80009a2:	e7a4      	b.n	80008ee <__aeabi_fadd+0x1e2>
 80009a4:	4653      	mov	r3, sl
 80009a6:	000c      	movs	r4, r1
 80009a8:	1aee      	subs	r6, r5, r3
 80009aa:	e6e8      	b.n	800077e <__aeabi_fadd+0x72>
 80009ac:	4653      	mov	r3, sl
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d128      	bne.n	8000a04 <__aeabi_fadd+0x2f8>
 80009b2:	2d00      	cmp	r5, #0
 80009b4:	d000      	beq.n	80009b8 <__aeabi_fadd+0x2ac>
 80009b6:	e722      	b.n	80007fe <__aeabi_fadd+0xf2>
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	03db      	lsls	r3, r3, #15
 80009bc:	469c      	mov	ip, r3
 80009be:	2400      	movs	r4, #0
 80009c0:	23ff      	movs	r3, #255	; 0xff
 80009c2:	e702      	b.n	80007ca <__aeabi_fadd+0xbe>
 80009c4:	002a      	movs	r2, r5
 80009c6:	4452      	add	r2, sl
 80009c8:	e73b      	b.n	8000842 <__aeabi_fadd+0x136>
 80009ca:	4653      	mov	r3, sl
 80009cc:	1b5a      	subs	r2, r3, r5
 80009ce:	e6d1      	b.n	8000774 <__aeabi_fadd+0x68>
 80009d0:	2800      	cmp	r0, #0
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fadd+0x2ca>
 80009d4:	e714      	b.n	8000800 <__aeabi_fadd+0xf4>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	d100      	bne.n	80009dc <__aeabi_fadd+0x2d0>
 80009da:	e712      	b.n	8000802 <__aeabi_fadd+0xf6>
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	03db      	lsls	r3, r3, #15
 80009e0:	421a      	tst	r2, r3
 80009e2:	d100      	bne.n	80009e6 <__aeabi_fadd+0x2da>
 80009e4:	e70d      	b.n	8000802 <__aeabi_fadd+0xf6>
 80009e6:	4641      	mov	r1, r8
 80009e8:	4219      	tst	r1, r3
 80009ea:	d000      	beq.n	80009ee <__aeabi_fadd+0x2e2>
 80009ec:	e709      	b.n	8000802 <__aeabi_fadd+0xf6>
 80009ee:	4642      	mov	r2, r8
 80009f0:	e707      	b.n	8000802 <__aeabi_fadd+0xf6>
 80009f2:	000c      	movs	r4, r1
 80009f4:	0037      	movs	r7, r6
 80009f6:	1aaa      	subs	r2, r5, r2
 80009f8:	e6bc      	b.n	8000774 <__aeabi_fadd+0x68>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d013      	beq.n	8000a26 <__aeabi_fadd+0x31a>
 80009fe:	000c      	movs	r4, r1
 8000a00:	46c4      	mov	ip, r8
 8000a02:	e6e2      	b.n	80007ca <__aeabi_fadd+0xbe>
 8000a04:	2d00      	cmp	r5, #0
 8000a06:	d100      	bne.n	8000a0a <__aeabi_fadd+0x2fe>
 8000a08:	e6fb      	b.n	8000802 <__aeabi_fadd+0xf6>
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	03db      	lsls	r3, r3, #15
 8000a0e:	421a      	tst	r2, r3
 8000a10:	d100      	bne.n	8000a14 <__aeabi_fadd+0x308>
 8000a12:	e6f6      	b.n	8000802 <__aeabi_fadd+0xf6>
 8000a14:	4640      	mov	r0, r8
 8000a16:	4218      	tst	r0, r3
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x310>
 8000a1a:	e6f2      	b.n	8000802 <__aeabi_fadd+0xf6>
 8000a1c:	000c      	movs	r4, r1
 8000a1e:	e6ef      	b.n	8000800 <__aeabi_fadd+0xf4>
 8000a20:	2a00      	cmp	r2, #0
 8000a22:	d000      	beq.n	8000a26 <__aeabi_fadd+0x31a>
 8000a24:	e763      	b.n	80008ee <__aeabi_fadd+0x1e2>
 8000a26:	2200      	movs	r2, #0
 8000a28:	2400      	movs	r4, #0
 8000a2a:	4694      	mov	ip, r2
 8000a2c:	e6cd      	b.n	80007ca <__aeabi_fadd+0xbe>
 8000a2e:	46c4      	mov	ip, r8
 8000a30:	e6cb      	b.n	80007ca <__aeabi_fadd+0xbe>
 8000a32:	002a      	movs	r2, r5
 8000a34:	0037      	movs	r7, r6
 8000a36:	4452      	add	r2, sl
 8000a38:	e703      	b.n	8000842 <__aeabi_fadd+0x136>
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	7dffffff 	.word	0x7dffffff
 8000a40:	fbffffff 	.word	0xfbffffff

08000a44 <__aeabi_fdiv>:
 8000a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a46:	464f      	mov	r7, r9
 8000a48:	4646      	mov	r6, r8
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	0245      	lsls	r5, r0, #9
 8000a4e:	b5c0      	push	{r6, r7, lr}
 8000a50:	0047      	lsls	r7, r0, #1
 8000a52:	1c0c      	adds	r4, r1, #0
 8000a54:	0a6d      	lsrs	r5, r5, #9
 8000a56:	0e3f      	lsrs	r7, r7, #24
 8000a58:	0fc6      	lsrs	r6, r0, #31
 8000a5a:	2f00      	cmp	r7, #0
 8000a5c:	d066      	beq.n	8000b2c <__aeabi_fdiv+0xe8>
 8000a5e:	2fff      	cmp	r7, #255	; 0xff
 8000a60:	d06c      	beq.n	8000b3c <__aeabi_fdiv+0xf8>
 8000a62:	2300      	movs	r3, #0
 8000a64:	00ea      	lsls	r2, r5, #3
 8000a66:	2580      	movs	r5, #128	; 0x80
 8000a68:	4699      	mov	r9, r3
 8000a6a:	469a      	mov	sl, r3
 8000a6c:	04ed      	lsls	r5, r5, #19
 8000a6e:	4315      	orrs	r5, r2
 8000a70:	3f7f      	subs	r7, #127	; 0x7f
 8000a72:	0260      	lsls	r0, r4, #9
 8000a74:	0061      	lsls	r1, r4, #1
 8000a76:	0a43      	lsrs	r3, r0, #9
 8000a78:	4698      	mov	r8, r3
 8000a7a:	0e09      	lsrs	r1, r1, #24
 8000a7c:	0fe4      	lsrs	r4, r4, #31
 8000a7e:	2900      	cmp	r1, #0
 8000a80:	d048      	beq.n	8000b14 <__aeabi_fdiv+0xd0>
 8000a82:	29ff      	cmp	r1, #255	; 0xff
 8000a84:	d010      	beq.n	8000aa8 <__aeabi_fdiv+0x64>
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	00d8      	lsls	r0, r3, #3
 8000a8a:	04d2      	lsls	r2, r2, #19
 8000a8c:	4302      	orrs	r2, r0
 8000a8e:	4690      	mov	r8, r2
 8000a90:	2000      	movs	r0, #0
 8000a92:	397f      	subs	r1, #127	; 0x7f
 8000a94:	464a      	mov	r2, r9
 8000a96:	0033      	movs	r3, r6
 8000a98:	1a7f      	subs	r7, r7, r1
 8000a9a:	4302      	orrs	r2, r0
 8000a9c:	496c      	ldr	r1, [pc, #432]	; (8000c50 <__aeabi_fdiv+0x20c>)
 8000a9e:	0092      	lsls	r2, r2, #2
 8000aa0:	588a      	ldr	r2, [r1, r2]
 8000aa2:	4063      	eors	r3, r4
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4697      	mov	pc, r2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d16d      	bne.n	8000b88 <__aeabi_fdiv+0x144>
 8000aac:	2002      	movs	r0, #2
 8000aae:	3fff      	subs	r7, #255	; 0xff
 8000ab0:	e033      	b.n	8000b1a <__aeabi_fdiv+0xd6>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	4698      	mov	r8, r3
 8000ab6:	0026      	movs	r6, r4
 8000ab8:	4645      	mov	r5, r8
 8000aba:	4682      	mov	sl, r0
 8000abc:	4653      	mov	r3, sl
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_fdiv+0x80>
 8000ac2:	e07f      	b.n	8000bc4 <__aeabi_fdiv+0x180>
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fdiv+0x86>
 8000ac8:	e094      	b.n	8000bf4 <__aeabi_fdiv+0x1b0>
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d017      	beq.n	8000afe <__aeabi_fdiv+0xba>
 8000ace:	0038      	movs	r0, r7
 8000ad0:	307f      	adds	r0, #127	; 0x7f
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	dd5f      	ble.n	8000b96 <__aeabi_fdiv+0x152>
 8000ad6:	076b      	lsls	r3, r5, #29
 8000ad8:	d004      	beq.n	8000ae4 <__aeabi_fdiv+0xa0>
 8000ada:	230f      	movs	r3, #15
 8000adc:	402b      	ands	r3, r5
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	d000      	beq.n	8000ae4 <__aeabi_fdiv+0xa0>
 8000ae2:	3504      	adds	r5, #4
 8000ae4:	012b      	lsls	r3, r5, #4
 8000ae6:	d503      	bpl.n	8000af0 <__aeabi_fdiv+0xac>
 8000ae8:	0038      	movs	r0, r7
 8000aea:	4b5a      	ldr	r3, [pc, #360]	; (8000c54 <__aeabi_fdiv+0x210>)
 8000aec:	3080      	adds	r0, #128	; 0x80
 8000aee:	401d      	ands	r5, r3
 8000af0:	28fe      	cmp	r0, #254	; 0xfe
 8000af2:	dc67      	bgt.n	8000bc4 <__aeabi_fdiv+0x180>
 8000af4:	01ad      	lsls	r5, r5, #6
 8000af6:	0a6d      	lsrs	r5, r5, #9
 8000af8:	b2c0      	uxtb	r0, r0
 8000afa:	e002      	b.n	8000b02 <__aeabi_fdiv+0xbe>
 8000afc:	001e      	movs	r6, r3
 8000afe:	2000      	movs	r0, #0
 8000b00:	2500      	movs	r5, #0
 8000b02:	05c0      	lsls	r0, r0, #23
 8000b04:	4328      	orrs	r0, r5
 8000b06:	07f6      	lsls	r6, r6, #31
 8000b08:	4330      	orrs	r0, r6
 8000b0a:	bce0      	pop	{r5, r6, r7}
 8000b0c:	46ba      	mov	sl, r7
 8000b0e:	46b1      	mov	r9, r6
 8000b10:	46a8      	mov	r8, r5
 8000b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d12b      	bne.n	8000b70 <__aeabi_fdiv+0x12c>
 8000b18:	2001      	movs	r0, #1
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	0033      	movs	r3, r6
 8000b1e:	494e      	ldr	r1, [pc, #312]	; (8000c58 <__aeabi_fdiv+0x214>)
 8000b20:	4302      	orrs	r2, r0
 8000b22:	0092      	lsls	r2, r2, #2
 8000b24:	588a      	ldr	r2, [r1, r2]
 8000b26:	4063      	eors	r3, r4
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	4697      	mov	pc, r2
 8000b2c:	2d00      	cmp	r5, #0
 8000b2e:	d113      	bne.n	8000b58 <__aeabi_fdiv+0x114>
 8000b30:	2304      	movs	r3, #4
 8000b32:	4699      	mov	r9, r3
 8000b34:	3b03      	subs	r3, #3
 8000b36:	2700      	movs	r7, #0
 8000b38:	469a      	mov	sl, r3
 8000b3a:	e79a      	b.n	8000a72 <__aeabi_fdiv+0x2e>
 8000b3c:	2d00      	cmp	r5, #0
 8000b3e:	d105      	bne.n	8000b4c <__aeabi_fdiv+0x108>
 8000b40:	2308      	movs	r3, #8
 8000b42:	4699      	mov	r9, r3
 8000b44:	3b06      	subs	r3, #6
 8000b46:	27ff      	movs	r7, #255	; 0xff
 8000b48:	469a      	mov	sl, r3
 8000b4a:	e792      	b.n	8000a72 <__aeabi_fdiv+0x2e>
 8000b4c:	230c      	movs	r3, #12
 8000b4e:	4699      	mov	r9, r3
 8000b50:	3b09      	subs	r3, #9
 8000b52:	27ff      	movs	r7, #255	; 0xff
 8000b54:	469a      	mov	sl, r3
 8000b56:	e78c      	b.n	8000a72 <__aeabi_fdiv+0x2e>
 8000b58:	0028      	movs	r0, r5
 8000b5a:	f002 f903 	bl	8002d64 <__clzsi2>
 8000b5e:	2776      	movs	r7, #118	; 0x76
 8000b60:	1f43      	subs	r3, r0, #5
 8000b62:	409d      	lsls	r5, r3
 8000b64:	2300      	movs	r3, #0
 8000b66:	427f      	negs	r7, r7
 8000b68:	4699      	mov	r9, r3
 8000b6a:	469a      	mov	sl, r3
 8000b6c:	1a3f      	subs	r7, r7, r0
 8000b6e:	e780      	b.n	8000a72 <__aeabi_fdiv+0x2e>
 8000b70:	0018      	movs	r0, r3
 8000b72:	f002 f8f7 	bl	8002d64 <__clzsi2>
 8000b76:	4642      	mov	r2, r8
 8000b78:	1f43      	subs	r3, r0, #5
 8000b7a:	2176      	movs	r1, #118	; 0x76
 8000b7c:	409a      	lsls	r2, r3
 8000b7e:	4249      	negs	r1, r1
 8000b80:	1a09      	subs	r1, r1, r0
 8000b82:	4690      	mov	r8, r2
 8000b84:	2000      	movs	r0, #0
 8000b86:	e785      	b.n	8000a94 <__aeabi_fdiv+0x50>
 8000b88:	21ff      	movs	r1, #255	; 0xff
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	e782      	b.n	8000a94 <__aeabi_fdiv+0x50>
 8000b8e:	001e      	movs	r6, r3
 8000b90:	20ff      	movs	r0, #255	; 0xff
 8000b92:	2500      	movs	r5, #0
 8000b94:	e7b5      	b.n	8000b02 <__aeabi_fdiv+0xbe>
 8000b96:	2301      	movs	r3, #1
 8000b98:	1a1b      	subs	r3, r3, r0
 8000b9a:	2b1b      	cmp	r3, #27
 8000b9c:	dcaf      	bgt.n	8000afe <__aeabi_fdiv+0xba>
 8000b9e:	379e      	adds	r7, #158	; 0x9e
 8000ba0:	0029      	movs	r1, r5
 8000ba2:	40bd      	lsls	r5, r7
 8000ba4:	40d9      	lsrs	r1, r3
 8000ba6:	1e6a      	subs	r2, r5, #1
 8000ba8:	4195      	sbcs	r5, r2
 8000baa:	430d      	orrs	r5, r1
 8000bac:	076b      	lsls	r3, r5, #29
 8000bae:	d004      	beq.n	8000bba <__aeabi_fdiv+0x176>
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	402b      	ands	r3, r5
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d000      	beq.n	8000bba <__aeabi_fdiv+0x176>
 8000bb8:	3504      	adds	r5, #4
 8000bba:	016b      	lsls	r3, r5, #5
 8000bbc:	d544      	bpl.n	8000c48 <__aeabi_fdiv+0x204>
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2500      	movs	r5, #0
 8000bc2:	e79e      	b.n	8000b02 <__aeabi_fdiv+0xbe>
 8000bc4:	20ff      	movs	r0, #255	; 0xff
 8000bc6:	2500      	movs	r5, #0
 8000bc8:	e79b      	b.n	8000b02 <__aeabi_fdiv+0xbe>
 8000bca:	2580      	movs	r5, #128	; 0x80
 8000bcc:	2600      	movs	r6, #0
 8000bce:	20ff      	movs	r0, #255	; 0xff
 8000bd0:	03ed      	lsls	r5, r5, #15
 8000bd2:	e796      	b.n	8000b02 <__aeabi_fdiv+0xbe>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	4698      	mov	r8, r3
 8000bd8:	2080      	movs	r0, #128	; 0x80
 8000bda:	03c0      	lsls	r0, r0, #15
 8000bdc:	4205      	tst	r5, r0
 8000bde:	d009      	beq.n	8000bf4 <__aeabi_fdiv+0x1b0>
 8000be0:	4643      	mov	r3, r8
 8000be2:	4203      	tst	r3, r0
 8000be4:	d106      	bne.n	8000bf4 <__aeabi_fdiv+0x1b0>
 8000be6:	4645      	mov	r5, r8
 8000be8:	4305      	orrs	r5, r0
 8000bea:	026d      	lsls	r5, r5, #9
 8000bec:	0026      	movs	r6, r4
 8000bee:	20ff      	movs	r0, #255	; 0xff
 8000bf0:	0a6d      	lsrs	r5, r5, #9
 8000bf2:	e786      	b.n	8000b02 <__aeabi_fdiv+0xbe>
 8000bf4:	2080      	movs	r0, #128	; 0x80
 8000bf6:	03c0      	lsls	r0, r0, #15
 8000bf8:	4305      	orrs	r5, r0
 8000bfa:	026d      	lsls	r5, r5, #9
 8000bfc:	20ff      	movs	r0, #255	; 0xff
 8000bfe:	0a6d      	lsrs	r5, r5, #9
 8000c00:	e77f      	b.n	8000b02 <__aeabi_fdiv+0xbe>
 8000c02:	4641      	mov	r1, r8
 8000c04:	016a      	lsls	r2, r5, #5
 8000c06:	0148      	lsls	r0, r1, #5
 8000c08:	4282      	cmp	r2, r0
 8000c0a:	d219      	bcs.n	8000c40 <__aeabi_fdiv+0x1fc>
 8000c0c:	211b      	movs	r1, #27
 8000c0e:	2500      	movs	r5, #0
 8000c10:	3f01      	subs	r7, #1
 8000c12:	2601      	movs	r6, #1
 8000c14:	0014      	movs	r4, r2
 8000c16:	006d      	lsls	r5, r5, #1
 8000c18:	0052      	lsls	r2, r2, #1
 8000c1a:	2c00      	cmp	r4, #0
 8000c1c:	db01      	blt.n	8000c22 <__aeabi_fdiv+0x1de>
 8000c1e:	4290      	cmp	r0, r2
 8000c20:	d801      	bhi.n	8000c26 <__aeabi_fdiv+0x1e2>
 8000c22:	1a12      	subs	r2, r2, r0
 8000c24:	4335      	orrs	r5, r6
 8000c26:	3901      	subs	r1, #1
 8000c28:	2900      	cmp	r1, #0
 8000c2a:	d1f3      	bne.n	8000c14 <__aeabi_fdiv+0x1d0>
 8000c2c:	1e50      	subs	r0, r2, #1
 8000c2e:	4182      	sbcs	r2, r0
 8000c30:	0038      	movs	r0, r7
 8000c32:	307f      	adds	r0, #127	; 0x7f
 8000c34:	001e      	movs	r6, r3
 8000c36:	4315      	orrs	r5, r2
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	dd00      	ble.n	8000c3e <__aeabi_fdiv+0x1fa>
 8000c3c:	e74b      	b.n	8000ad6 <__aeabi_fdiv+0x92>
 8000c3e:	e7aa      	b.n	8000b96 <__aeabi_fdiv+0x152>
 8000c40:	211a      	movs	r1, #26
 8000c42:	2501      	movs	r5, #1
 8000c44:	1a12      	subs	r2, r2, r0
 8000c46:	e7e4      	b.n	8000c12 <__aeabi_fdiv+0x1ce>
 8000c48:	01ad      	lsls	r5, r5, #6
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	0a6d      	lsrs	r5, r5, #9
 8000c4e:	e758      	b.n	8000b02 <__aeabi_fdiv+0xbe>
 8000c50:	0800c3f4 	.word	0x0800c3f4
 8000c54:	f7ffffff 	.word	0xf7ffffff
 8000c58:	0800c434 	.word	0x0800c434

08000c5c <__aeabi_fmul>:
 8000c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5e:	4657      	mov	r7, sl
 8000c60:	464e      	mov	r6, r9
 8000c62:	4645      	mov	r5, r8
 8000c64:	46de      	mov	lr, fp
 8000c66:	0244      	lsls	r4, r0, #9
 8000c68:	b5e0      	push	{r5, r6, r7, lr}
 8000c6a:	0045      	lsls	r5, r0, #1
 8000c6c:	1c0f      	adds	r7, r1, #0
 8000c6e:	0a64      	lsrs	r4, r4, #9
 8000c70:	0e2d      	lsrs	r5, r5, #24
 8000c72:	0fc6      	lsrs	r6, r0, #31
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d047      	beq.n	8000d08 <__aeabi_fmul+0xac>
 8000c78:	2dff      	cmp	r5, #255	; 0xff
 8000c7a:	d04d      	beq.n	8000d18 <__aeabi_fmul+0xbc>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	2080      	movs	r0, #128	; 0x80
 8000c80:	469a      	mov	sl, r3
 8000c82:	469b      	mov	fp, r3
 8000c84:	00e4      	lsls	r4, r4, #3
 8000c86:	04c0      	lsls	r0, r0, #19
 8000c88:	4304      	orrs	r4, r0
 8000c8a:	3d7f      	subs	r5, #127	; 0x7f
 8000c8c:	0278      	lsls	r0, r7, #9
 8000c8e:	0a43      	lsrs	r3, r0, #9
 8000c90:	4699      	mov	r9, r3
 8000c92:	007a      	lsls	r2, r7, #1
 8000c94:	0ffb      	lsrs	r3, r7, #31
 8000c96:	4698      	mov	r8, r3
 8000c98:	0e12      	lsrs	r2, r2, #24
 8000c9a:	464b      	mov	r3, r9
 8000c9c:	d044      	beq.n	8000d28 <__aeabi_fmul+0xcc>
 8000c9e:	2aff      	cmp	r2, #255	; 0xff
 8000ca0:	d011      	beq.n	8000cc6 <__aeabi_fmul+0x6a>
 8000ca2:	00d8      	lsls	r0, r3, #3
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	04db      	lsls	r3, r3, #19
 8000ca8:	4303      	orrs	r3, r0
 8000caa:	4699      	mov	r9, r3
 8000cac:	2000      	movs	r0, #0
 8000cae:	3a7f      	subs	r2, #127	; 0x7f
 8000cb0:	18ad      	adds	r5, r5, r2
 8000cb2:	4647      	mov	r7, r8
 8000cb4:	4653      	mov	r3, sl
 8000cb6:	4077      	eors	r7, r6
 8000cb8:	1c69      	adds	r1, r5, #1
 8000cba:	2b0f      	cmp	r3, #15
 8000cbc:	d83f      	bhi.n	8000d3e <__aeabi_fmul+0xe2>
 8000cbe:	4a72      	ldr	r2, [pc, #456]	; (8000e88 <__aeabi_fmul+0x22c>)
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	58d3      	ldr	r3, [r2, r3]
 8000cc4:	469f      	mov	pc, r3
 8000cc6:	35ff      	adds	r5, #255	; 0xff
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d000      	beq.n	8000cce <__aeabi_fmul+0x72>
 8000ccc:	e079      	b.n	8000dc2 <__aeabi_fmul+0x166>
 8000cce:	4652      	mov	r2, sl
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	4692      	mov	sl, r2
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	e7eb      	b.n	8000cb2 <__aeabi_fmul+0x56>
 8000cda:	4647      	mov	r7, r8
 8000cdc:	464c      	mov	r4, r9
 8000cde:	4683      	mov	fp, r0
 8000ce0:	465b      	mov	r3, fp
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d028      	beq.n	8000d38 <__aeabi_fmul+0xdc>
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d100      	bne.n	8000cec <__aeabi_fmul+0x90>
 8000cea:	e0c6      	b.n	8000e7a <__aeabi_fmul+0x21e>
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d14f      	bne.n	8000d90 <__aeabi_fmul+0x134>
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	2400      	movs	r4, #0
 8000cf4:	05c0      	lsls	r0, r0, #23
 8000cf6:	07ff      	lsls	r7, r7, #31
 8000cf8:	4320      	orrs	r0, r4
 8000cfa:	4338      	orrs	r0, r7
 8000cfc:	bcf0      	pop	{r4, r5, r6, r7}
 8000cfe:	46bb      	mov	fp, r7
 8000d00:	46b2      	mov	sl, r6
 8000d02:	46a9      	mov	r9, r5
 8000d04:	46a0      	mov	r8, r4
 8000d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d08:	2c00      	cmp	r4, #0
 8000d0a:	d171      	bne.n	8000df0 <__aeabi_fmul+0x194>
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	469a      	mov	sl, r3
 8000d10:	3b03      	subs	r3, #3
 8000d12:	2500      	movs	r5, #0
 8000d14:	469b      	mov	fp, r3
 8000d16:	e7b9      	b.n	8000c8c <__aeabi_fmul+0x30>
 8000d18:	2c00      	cmp	r4, #0
 8000d1a:	d163      	bne.n	8000de4 <__aeabi_fmul+0x188>
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	469a      	mov	sl, r3
 8000d20:	3b06      	subs	r3, #6
 8000d22:	25ff      	movs	r5, #255	; 0xff
 8000d24:	469b      	mov	fp, r3
 8000d26:	e7b1      	b.n	8000c8c <__aeabi_fmul+0x30>
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d150      	bne.n	8000dce <__aeabi_fmul+0x172>
 8000d2c:	4652      	mov	r2, sl
 8000d2e:	3301      	adds	r3, #1
 8000d30:	431a      	orrs	r2, r3
 8000d32:	4692      	mov	sl, r2
 8000d34:	2001      	movs	r0, #1
 8000d36:	e7bc      	b.n	8000cb2 <__aeabi_fmul+0x56>
 8000d38:	20ff      	movs	r0, #255	; 0xff
 8000d3a:	2400      	movs	r4, #0
 8000d3c:	e7da      	b.n	8000cf4 <__aeabi_fmul+0x98>
 8000d3e:	4648      	mov	r0, r9
 8000d40:	0c26      	lsrs	r6, r4, #16
 8000d42:	0424      	lsls	r4, r4, #16
 8000d44:	0c22      	lsrs	r2, r4, #16
 8000d46:	0404      	lsls	r4, r0, #16
 8000d48:	0c24      	lsrs	r4, r4, #16
 8000d4a:	464b      	mov	r3, r9
 8000d4c:	0020      	movs	r0, r4
 8000d4e:	0c1b      	lsrs	r3, r3, #16
 8000d50:	4350      	muls	r0, r2
 8000d52:	4374      	muls	r4, r6
 8000d54:	435a      	muls	r2, r3
 8000d56:	435e      	muls	r6, r3
 8000d58:	1912      	adds	r2, r2, r4
 8000d5a:	0c03      	lsrs	r3, r0, #16
 8000d5c:	189b      	adds	r3, r3, r2
 8000d5e:	429c      	cmp	r4, r3
 8000d60:	d903      	bls.n	8000d6a <__aeabi_fmul+0x10e>
 8000d62:	2280      	movs	r2, #128	; 0x80
 8000d64:	0252      	lsls	r2, r2, #9
 8000d66:	4694      	mov	ip, r2
 8000d68:	4466      	add	r6, ip
 8000d6a:	0400      	lsls	r0, r0, #16
 8000d6c:	041a      	lsls	r2, r3, #16
 8000d6e:	0c00      	lsrs	r0, r0, #16
 8000d70:	1812      	adds	r2, r2, r0
 8000d72:	0194      	lsls	r4, r2, #6
 8000d74:	1e60      	subs	r0, r4, #1
 8000d76:	4184      	sbcs	r4, r0
 8000d78:	0c1b      	lsrs	r3, r3, #16
 8000d7a:	0e92      	lsrs	r2, r2, #26
 8000d7c:	199b      	adds	r3, r3, r6
 8000d7e:	4314      	orrs	r4, r2
 8000d80:	019b      	lsls	r3, r3, #6
 8000d82:	431c      	orrs	r4, r3
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	d572      	bpl.n	8000e6e <__aeabi_fmul+0x212>
 8000d88:	2001      	movs	r0, #1
 8000d8a:	0863      	lsrs	r3, r4, #1
 8000d8c:	4004      	ands	r4, r0
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	0008      	movs	r0, r1
 8000d92:	307f      	adds	r0, #127	; 0x7f
 8000d94:	2800      	cmp	r0, #0
 8000d96:	dd3c      	ble.n	8000e12 <__aeabi_fmul+0x1b6>
 8000d98:	0763      	lsls	r3, r4, #29
 8000d9a:	d004      	beq.n	8000da6 <__aeabi_fmul+0x14a>
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	4023      	ands	r3, r4
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	d000      	beq.n	8000da6 <__aeabi_fmul+0x14a>
 8000da4:	3404      	adds	r4, #4
 8000da6:	0123      	lsls	r3, r4, #4
 8000da8:	d503      	bpl.n	8000db2 <__aeabi_fmul+0x156>
 8000daa:	3180      	adds	r1, #128	; 0x80
 8000dac:	0008      	movs	r0, r1
 8000dae:	4b37      	ldr	r3, [pc, #220]	; (8000e8c <__aeabi_fmul+0x230>)
 8000db0:	401c      	ands	r4, r3
 8000db2:	28fe      	cmp	r0, #254	; 0xfe
 8000db4:	dcc0      	bgt.n	8000d38 <__aeabi_fmul+0xdc>
 8000db6:	01a4      	lsls	r4, r4, #6
 8000db8:	0a64      	lsrs	r4, r4, #9
 8000dba:	b2c0      	uxtb	r0, r0
 8000dbc:	e79a      	b.n	8000cf4 <__aeabi_fmul+0x98>
 8000dbe:	0037      	movs	r7, r6
 8000dc0:	e78e      	b.n	8000ce0 <__aeabi_fmul+0x84>
 8000dc2:	4652      	mov	r2, sl
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	4692      	mov	sl, r2
 8000dca:	2003      	movs	r0, #3
 8000dcc:	e771      	b.n	8000cb2 <__aeabi_fmul+0x56>
 8000dce:	4648      	mov	r0, r9
 8000dd0:	f001 ffc8 	bl	8002d64 <__clzsi2>
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	1f43      	subs	r3, r0, #5
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	1a2d      	subs	r5, r5, r0
 8000ddc:	4691      	mov	r9, r2
 8000dde:	2000      	movs	r0, #0
 8000de0:	3d76      	subs	r5, #118	; 0x76
 8000de2:	e766      	b.n	8000cb2 <__aeabi_fmul+0x56>
 8000de4:	230c      	movs	r3, #12
 8000de6:	469a      	mov	sl, r3
 8000de8:	3b09      	subs	r3, #9
 8000dea:	25ff      	movs	r5, #255	; 0xff
 8000dec:	469b      	mov	fp, r3
 8000dee:	e74d      	b.n	8000c8c <__aeabi_fmul+0x30>
 8000df0:	0020      	movs	r0, r4
 8000df2:	f001 ffb7 	bl	8002d64 <__clzsi2>
 8000df6:	2576      	movs	r5, #118	; 0x76
 8000df8:	1f43      	subs	r3, r0, #5
 8000dfa:	409c      	lsls	r4, r3
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	426d      	negs	r5, r5
 8000e00:	469a      	mov	sl, r3
 8000e02:	469b      	mov	fp, r3
 8000e04:	1a2d      	subs	r5, r5, r0
 8000e06:	e741      	b.n	8000c8c <__aeabi_fmul+0x30>
 8000e08:	2480      	movs	r4, #128	; 0x80
 8000e0a:	2700      	movs	r7, #0
 8000e0c:	20ff      	movs	r0, #255	; 0xff
 8000e0e:	03e4      	lsls	r4, r4, #15
 8000e10:	e770      	b.n	8000cf4 <__aeabi_fmul+0x98>
 8000e12:	2301      	movs	r3, #1
 8000e14:	1a1b      	subs	r3, r3, r0
 8000e16:	2b1b      	cmp	r3, #27
 8000e18:	dd00      	ble.n	8000e1c <__aeabi_fmul+0x1c0>
 8000e1a:	e769      	b.n	8000cf0 <__aeabi_fmul+0x94>
 8000e1c:	319e      	adds	r1, #158	; 0x9e
 8000e1e:	0020      	movs	r0, r4
 8000e20:	408c      	lsls	r4, r1
 8000e22:	40d8      	lsrs	r0, r3
 8000e24:	1e63      	subs	r3, r4, #1
 8000e26:	419c      	sbcs	r4, r3
 8000e28:	4304      	orrs	r4, r0
 8000e2a:	0763      	lsls	r3, r4, #29
 8000e2c:	d004      	beq.n	8000e38 <__aeabi_fmul+0x1dc>
 8000e2e:	230f      	movs	r3, #15
 8000e30:	4023      	ands	r3, r4
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	d000      	beq.n	8000e38 <__aeabi_fmul+0x1dc>
 8000e36:	3404      	adds	r4, #4
 8000e38:	0163      	lsls	r3, r4, #5
 8000e3a:	d51a      	bpl.n	8000e72 <__aeabi_fmul+0x216>
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	2400      	movs	r4, #0
 8000e40:	e758      	b.n	8000cf4 <__aeabi_fmul+0x98>
 8000e42:	2080      	movs	r0, #128	; 0x80
 8000e44:	03c0      	lsls	r0, r0, #15
 8000e46:	4204      	tst	r4, r0
 8000e48:	d009      	beq.n	8000e5e <__aeabi_fmul+0x202>
 8000e4a:	464b      	mov	r3, r9
 8000e4c:	4203      	tst	r3, r0
 8000e4e:	d106      	bne.n	8000e5e <__aeabi_fmul+0x202>
 8000e50:	464c      	mov	r4, r9
 8000e52:	4304      	orrs	r4, r0
 8000e54:	0264      	lsls	r4, r4, #9
 8000e56:	4647      	mov	r7, r8
 8000e58:	20ff      	movs	r0, #255	; 0xff
 8000e5a:	0a64      	lsrs	r4, r4, #9
 8000e5c:	e74a      	b.n	8000cf4 <__aeabi_fmul+0x98>
 8000e5e:	2080      	movs	r0, #128	; 0x80
 8000e60:	03c0      	lsls	r0, r0, #15
 8000e62:	4304      	orrs	r4, r0
 8000e64:	0264      	lsls	r4, r4, #9
 8000e66:	0037      	movs	r7, r6
 8000e68:	20ff      	movs	r0, #255	; 0xff
 8000e6a:	0a64      	lsrs	r4, r4, #9
 8000e6c:	e742      	b.n	8000cf4 <__aeabi_fmul+0x98>
 8000e6e:	0029      	movs	r1, r5
 8000e70:	e78e      	b.n	8000d90 <__aeabi_fmul+0x134>
 8000e72:	01a4      	lsls	r4, r4, #6
 8000e74:	2000      	movs	r0, #0
 8000e76:	0a64      	lsrs	r4, r4, #9
 8000e78:	e73c      	b.n	8000cf4 <__aeabi_fmul+0x98>
 8000e7a:	2080      	movs	r0, #128	; 0x80
 8000e7c:	03c0      	lsls	r0, r0, #15
 8000e7e:	4304      	orrs	r4, r0
 8000e80:	0264      	lsls	r4, r4, #9
 8000e82:	20ff      	movs	r0, #255	; 0xff
 8000e84:	0a64      	lsrs	r4, r4, #9
 8000e86:	e735      	b.n	8000cf4 <__aeabi_fmul+0x98>
 8000e88:	0800c474 	.word	0x0800c474
 8000e8c:	f7ffffff 	.word	0xf7ffffff

08000e90 <__aeabi_i2f>:
 8000e90:	b570      	push	{r4, r5, r6, lr}
 8000e92:	2800      	cmp	r0, #0
 8000e94:	d013      	beq.n	8000ebe <__aeabi_i2f+0x2e>
 8000e96:	17c3      	asrs	r3, r0, #31
 8000e98:	18c5      	adds	r5, r0, r3
 8000e9a:	405d      	eors	r5, r3
 8000e9c:	0fc4      	lsrs	r4, r0, #31
 8000e9e:	0028      	movs	r0, r5
 8000ea0:	f001 ff60 	bl	8002d64 <__clzsi2>
 8000ea4:	239e      	movs	r3, #158	; 0x9e
 8000ea6:	0001      	movs	r1, r0
 8000ea8:	1a1b      	subs	r3, r3, r0
 8000eaa:	2b96      	cmp	r3, #150	; 0x96
 8000eac:	dc0f      	bgt.n	8000ece <__aeabi_i2f+0x3e>
 8000eae:	2808      	cmp	r0, #8
 8000eb0:	dd01      	ble.n	8000eb6 <__aeabi_i2f+0x26>
 8000eb2:	3908      	subs	r1, #8
 8000eb4:	408d      	lsls	r5, r1
 8000eb6:	026d      	lsls	r5, r5, #9
 8000eb8:	0a6d      	lsrs	r5, r5, #9
 8000eba:	b2d8      	uxtb	r0, r3
 8000ebc:	e002      	b.n	8000ec4 <__aeabi_i2f+0x34>
 8000ebe:	2400      	movs	r4, #0
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	2500      	movs	r5, #0
 8000ec4:	05c0      	lsls	r0, r0, #23
 8000ec6:	4328      	orrs	r0, r5
 8000ec8:	07e4      	lsls	r4, r4, #31
 8000eca:	4320      	orrs	r0, r4
 8000ecc:	bd70      	pop	{r4, r5, r6, pc}
 8000ece:	2b99      	cmp	r3, #153	; 0x99
 8000ed0:	dd0b      	ble.n	8000eea <__aeabi_i2f+0x5a>
 8000ed2:	2205      	movs	r2, #5
 8000ed4:	002e      	movs	r6, r5
 8000ed6:	1a12      	subs	r2, r2, r0
 8000ed8:	40d6      	lsrs	r6, r2
 8000eda:	0002      	movs	r2, r0
 8000edc:	321b      	adds	r2, #27
 8000ede:	4095      	lsls	r5, r2
 8000ee0:	0028      	movs	r0, r5
 8000ee2:	1e45      	subs	r5, r0, #1
 8000ee4:	41a8      	sbcs	r0, r5
 8000ee6:	0035      	movs	r5, r6
 8000ee8:	4305      	orrs	r5, r0
 8000eea:	2905      	cmp	r1, #5
 8000eec:	dd01      	ble.n	8000ef2 <__aeabi_i2f+0x62>
 8000eee:	1f4a      	subs	r2, r1, #5
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	002a      	movs	r2, r5
 8000ef4:	4e08      	ldr	r6, [pc, #32]	; (8000f18 <__aeabi_i2f+0x88>)
 8000ef6:	4032      	ands	r2, r6
 8000ef8:	0768      	lsls	r0, r5, #29
 8000efa:	d009      	beq.n	8000f10 <__aeabi_i2f+0x80>
 8000efc:	200f      	movs	r0, #15
 8000efe:	4028      	ands	r0, r5
 8000f00:	2804      	cmp	r0, #4
 8000f02:	d005      	beq.n	8000f10 <__aeabi_i2f+0x80>
 8000f04:	3204      	adds	r2, #4
 8000f06:	0150      	lsls	r0, r2, #5
 8000f08:	d502      	bpl.n	8000f10 <__aeabi_i2f+0x80>
 8000f0a:	239f      	movs	r3, #159	; 0x9f
 8000f0c:	4032      	ands	r2, r6
 8000f0e:	1a5b      	subs	r3, r3, r1
 8000f10:	0192      	lsls	r2, r2, #6
 8000f12:	0a55      	lsrs	r5, r2, #9
 8000f14:	b2d8      	uxtb	r0, r3
 8000f16:	e7d5      	b.n	8000ec4 <__aeabi_i2f+0x34>
 8000f18:	fbffffff 	.word	0xfbffffff

08000f1c <__aeabi_ui2f>:
 8000f1c:	b570      	push	{r4, r5, r6, lr}
 8000f1e:	1e05      	subs	r5, r0, #0
 8000f20:	d00e      	beq.n	8000f40 <__aeabi_ui2f+0x24>
 8000f22:	f001 ff1f 	bl	8002d64 <__clzsi2>
 8000f26:	239e      	movs	r3, #158	; 0x9e
 8000f28:	0004      	movs	r4, r0
 8000f2a:	1a1b      	subs	r3, r3, r0
 8000f2c:	2b96      	cmp	r3, #150	; 0x96
 8000f2e:	dc0c      	bgt.n	8000f4a <__aeabi_ui2f+0x2e>
 8000f30:	2808      	cmp	r0, #8
 8000f32:	dd01      	ble.n	8000f38 <__aeabi_ui2f+0x1c>
 8000f34:	3c08      	subs	r4, #8
 8000f36:	40a5      	lsls	r5, r4
 8000f38:	026d      	lsls	r5, r5, #9
 8000f3a:	0a6d      	lsrs	r5, r5, #9
 8000f3c:	b2d8      	uxtb	r0, r3
 8000f3e:	e001      	b.n	8000f44 <__aeabi_ui2f+0x28>
 8000f40:	2000      	movs	r0, #0
 8000f42:	2500      	movs	r5, #0
 8000f44:	05c0      	lsls	r0, r0, #23
 8000f46:	4328      	orrs	r0, r5
 8000f48:	bd70      	pop	{r4, r5, r6, pc}
 8000f4a:	2b99      	cmp	r3, #153	; 0x99
 8000f4c:	dd09      	ble.n	8000f62 <__aeabi_ui2f+0x46>
 8000f4e:	0002      	movs	r2, r0
 8000f50:	0029      	movs	r1, r5
 8000f52:	321b      	adds	r2, #27
 8000f54:	4091      	lsls	r1, r2
 8000f56:	1e4a      	subs	r2, r1, #1
 8000f58:	4191      	sbcs	r1, r2
 8000f5a:	2205      	movs	r2, #5
 8000f5c:	1a12      	subs	r2, r2, r0
 8000f5e:	40d5      	lsrs	r5, r2
 8000f60:	430d      	orrs	r5, r1
 8000f62:	2c05      	cmp	r4, #5
 8000f64:	dd01      	ble.n	8000f6a <__aeabi_ui2f+0x4e>
 8000f66:	1f62      	subs	r2, r4, #5
 8000f68:	4095      	lsls	r5, r2
 8000f6a:	0029      	movs	r1, r5
 8000f6c:	4e08      	ldr	r6, [pc, #32]	; (8000f90 <__aeabi_ui2f+0x74>)
 8000f6e:	4031      	ands	r1, r6
 8000f70:	076a      	lsls	r2, r5, #29
 8000f72:	d009      	beq.n	8000f88 <__aeabi_ui2f+0x6c>
 8000f74:	200f      	movs	r0, #15
 8000f76:	4028      	ands	r0, r5
 8000f78:	2804      	cmp	r0, #4
 8000f7a:	d005      	beq.n	8000f88 <__aeabi_ui2f+0x6c>
 8000f7c:	3104      	adds	r1, #4
 8000f7e:	014a      	lsls	r2, r1, #5
 8000f80:	d502      	bpl.n	8000f88 <__aeabi_ui2f+0x6c>
 8000f82:	239f      	movs	r3, #159	; 0x9f
 8000f84:	4031      	ands	r1, r6
 8000f86:	1b1b      	subs	r3, r3, r4
 8000f88:	0189      	lsls	r1, r1, #6
 8000f8a:	0a4d      	lsrs	r5, r1, #9
 8000f8c:	b2d8      	uxtb	r0, r3
 8000f8e:	e7d9      	b.n	8000f44 <__aeabi_ui2f+0x28>
 8000f90:	fbffffff 	.word	0xfbffffff

08000f94 <__aeabi_dadd>:
 8000f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f96:	464f      	mov	r7, r9
 8000f98:	46d6      	mov	lr, sl
 8000f9a:	4646      	mov	r6, r8
 8000f9c:	000d      	movs	r5, r1
 8000f9e:	0001      	movs	r1, r0
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	b5c0      	push	{r6, r7, lr}
 8000fa4:	0017      	movs	r7, r2
 8000fa6:	032b      	lsls	r3, r5, #12
 8000fa8:	0a5a      	lsrs	r2, r3, #9
 8000faa:	0f4b      	lsrs	r3, r1, #29
 8000fac:	4313      	orrs	r3, r2
 8000fae:	00ca      	lsls	r2, r1, #3
 8000fb0:	4691      	mov	r9, r2
 8000fb2:	0302      	lsls	r2, r0, #12
 8000fb4:	006e      	lsls	r6, r5, #1
 8000fb6:	0041      	lsls	r1, r0, #1
 8000fb8:	0a52      	lsrs	r2, r2, #9
 8000fba:	0fec      	lsrs	r4, r5, #31
 8000fbc:	0f7d      	lsrs	r5, r7, #29
 8000fbe:	4315      	orrs	r5, r2
 8000fc0:	0d76      	lsrs	r6, r6, #21
 8000fc2:	0d49      	lsrs	r1, r1, #21
 8000fc4:	0fc0      	lsrs	r0, r0, #31
 8000fc6:	4682      	mov	sl, r0
 8000fc8:	46ac      	mov	ip, r5
 8000fca:	00ff      	lsls	r7, r7, #3
 8000fcc:	1a72      	subs	r2, r6, r1
 8000fce:	4284      	cmp	r4, r0
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_dadd+0x40>
 8000fd2:	e098      	b.n	8001106 <__aeabi_dadd+0x172>
 8000fd4:	2a00      	cmp	r2, #0
 8000fd6:	dc00      	bgt.n	8000fda <__aeabi_dadd+0x46>
 8000fd8:	e081      	b.n	80010de <__aeabi_dadd+0x14a>
 8000fda:	2900      	cmp	r1, #0
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_dadd+0x4c>
 8000fde:	e0b6      	b.n	800114e <__aeabi_dadd+0x1ba>
 8000fe0:	49c9      	ldr	r1, [pc, #804]	; (8001308 <__aeabi_dadd+0x374>)
 8000fe2:	428e      	cmp	r6, r1
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dadd+0x54>
 8000fe6:	e172      	b.n	80012ce <__aeabi_dadd+0x33a>
 8000fe8:	2180      	movs	r1, #128	; 0x80
 8000fea:	0028      	movs	r0, r5
 8000fec:	0409      	lsls	r1, r1, #16
 8000fee:	4308      	orrs	r0, r1
 8000ff0:	4684      	mov	ip, r0
 8000ff2:	2a38      	cmp	r2, #56	; 0x38
 8000ff4:	dd00      	ble.n	8000ff8 <__aeabi_dadd+0x64>
 8000ff6:	e15e      	b.n	80012b6 <__aeabi_dadd+0x322>
 8000ff8:	2a1f      	cmp	r2, #31
 8000ffa:	dd00      	ble.n	8000ffe <__aeabi_dadd+0x6a>
 8000ffc:	e1ee      	b.n	80013dc <__aeabi_dadd+0x448>
 8000ffe:	2020      	movs	r0, #32
 8001000:	0039      	movs	r1, r7
 8001002:	4665      	mov	r5, ip
 8001004:	1a80      	subs	r0, r0, r2
 8001006:	4087      	lsls	r7, r0
 8001008:	40d1      	lsrs	r1, r2
 800100a:	4085      	lsls	r5, r0
 800100c:	430d      	orrs	r5, r1
 800100e:	0039      	movs	r1, r7
 8001010:	1e4f      	subs	r7, r1, #1
 8001012:	41b9      	sbcs	r1, r7
 8001014:	4667      	mov	r7, ip
 8001016:	40d7      	lsrs	r7, r2
 8001018:	4329      	orrs	r1, r5
 800101a:	1bdb      	subs	r3, r3, r7
 800101c:	464a      	mov	r2, r9
 800101e:	1a55      	subs	r5, r2, r1
 8001020:	45a9      	cmp	r9, r5
 8001022:	4189      	sbcs	r1, r1
 8001024:	4249      	negs	r1, r1
 8001026:	1a5b      	subs	r3, r3, r1
 8001028:	4698      	mov	r8, r3
 800102a:	4643      	mov	r3, r8
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	d400      	bmi.n	8001032 <__aeabi_dadd+0x9e>
 8001030:	e0cc      	b.n	80011cc <__aeabi_dadd+0x238>
 8001032:	4643      	mov	r3, r8
 8001034:	025b      	lsls	r3, r3, #9
 8001036:	0a5b      	lsrs	r3, r3, #9
 8001038:	4698      	mov	r8, r3
 800103a:	4643      	mov	r3, r8
 800103c:	2b00      	cmp	r3, #0
 800103e:	d100      	bne.n	8001042 <__aeabi_dadd+0xae>
 8001040:	e12c      	b.n	800129c <__aeabi_dadd+0x308>
 8001042:	4640      	mov	r0, r8
 8001044:	f001 fe8e 	bl	8002d64 <__clzsi2>
 8001048:	0001      	movs	r1, r0
 800104a:	3908      	subs	r1, #8
 800104c:	2220      	movs	r2, #32
 800104e:	0028      	movs	r0, r5
 8001050:	4643      	mov	r3, r8
 8001052:	1a52      	subs	r2, r2, r1
 8001054:	408b      	lsls	r3, r1
 8001056:	40d0      	lsrs	r0, r2
 8001058:	408d      	lsls	r5, r1
 800105a:	4303      	orrs	r3, r0
 800105c:	428e      	cmp	r6, r1
 800105e:	dd00      	ble.n	8001062 <__aeabi_dadd+0xce>
 8001060:	e117      	b.n	8001292 <__aeabi_dadd+0x2fe>
 8001062:	1b8e      	subs	r6, r1, r6
 8001064:	1c72      	adds	r2, r6, #1
 8001066:	2a1f      	cmp	r2, #31
 8001068:	dd00      	ble.n	800106c <__aeabi_dadd+0xd8>
 800106a:	e1a7      	b.n	80013bc <__aeabi_dadd+0x428>
 800106c:	2120      	movs	r1, #32
 800106e:	0018      	movs	r0, r3
 8001070:	002e      	movs	r6, r5
 8001072:	1a89      	subs	r1, r1, r2
 8001074:	408d      	lsls	r5, r1
 8001076:	4088      	lsls	r0, r1
 8001078:	40d6      	lsrs	r6, r2
 800107a:	40d3      	lsrs	r3, r2
 800107c:	1e69      	subs	r1, r5, #1
 800107e:	418d      	sbcs	r5, r1
 8001080:	4330      	orrs	r0, r6
 8001082:	4698      	mov	r8, r3
 8001084:	2600      	movs	r6, #0
 8001086:	4305      	orrs	r5, r0
 8001088:	076b      	lsls	r3, r5, #29
 800108a:	d009      	beq.n	80010a0 <__aeabi_dadd+0x10c>
 800108c:	230f      	movs	r3, #15
 800108e:	402b      	ands	r3, r5
 8001090:	2b04      	cmp	r3, #4
 8001092:	d005      	beq.n	80010a0 <__aeabi_dadd+0x10c>
 8001094:	1d2b      	adds	r3, r5, #4
 8001096:	42ab      	cmp	r3, r5
 8001098:	41ad      	sbcs	r5, r5
 800109a:	426d      	negs	r5, r5
 800109c:	44a8      	add	r8, r5
 800109e:	001d      	movs	r5, r3
 80010a0:	4643      	mov	r3, r8
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	d400      	bmi.n	80010a8 <__aeabi_dadd+0x114>
 80010a6:	e094      	b.n	80011d2 <__aeabi_dadd+0x23e>
 80010a8:	4b97      	ldr	r3, [pc, #604]	; (8001308 <__aeabi_dadd+0x374>)
 80010aa:	1c72      	adds	r2, r6, #1
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d100      	bne.n	80010b2 <__aeabi_dadd+0x11e>
 80010b0:	e09d      	b.n	80011ee <__aeabi_dadd+0x25a>
 80010b2:	4641      	mov	r1, r8
 80010b4:	4b95      	ldr	r3, [pc, #596]	; (800130c <__aeabi_dadd+0x378>)
 80010b6:	08ed      	lsrs	r5, r5, #3
 80010b8:	4019      	ands	r1, r3
 80010ba:	000b      	movs	r3, r1
 80010bc:	0552      	lsls	r2, r2, #21
 80010be:	0749      	lsls	r1, r1, #29
 80010c0:	025b      	lsls	r3, r3, #9
 80010c2:	4329      	orrs	r1, r5
 80010c4:	0b1b      	lsrs	r3, r3, #12
 80010c6:	0d52      	lsrs	r2, r2, #21
 80010c8:	0512      	lsls	r2, r2, #20
 80010ca:	4313      	orrs	r3, r2
 80010cc:	07e4      	lsls	r4, r4, #31
 80010ce:	4323      	orrs	r3, r4
 80010d0:	0008      	movs	r0, r1
 80010d2:	0019      	movs	r1, r3
 80010d4:	bce0      	pop	{r5, r6, r7}
 80010d6:	46ba      	mov	sl, r7
 80010d8:	46b1      	mov	r9, r6
 80010da:	46a8      	mov	r8, r5
 80010dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010de:	2a00      	cmp	r2, #0
 80010e0:	d043      	beq.n	800116a <__aeabi_dadd+0x1d6>
 80010e2:	1b8a      	subs	r2, r1, r6
 80010e4:	2e00      	cmp	r6, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x156>
 80010e8:	e12a      	b.n	8001340 <__aeabi_dadd+0x3ac>
 80010ea:	464c      	mov	r4, r9
 80010ec:	431c      	orrs	r4, r3
 80010ee:	d100      	bne.n	80010f2 <__aeabi_dadd+0x15e>
 80010f0:	e1d1      	b.n	8001496 <__aeabi_dadd+0x502>
 80010f2:	1e54      	subs	r4, r2, #1
 80010f4:	2a01      	cmp	r2, #1
 80010f6:	d100      	bne.n	80010fa <__aeabi_dadd+0x166>
 80010f8:	e21f      	b.n	800153a <__aeabi_dadd+0x5a6>
 80010fa:	4d83      	ldr	r5, [pc, #524]	; (8001308 <__aeabi_dadd+0x374>)
 80010fc:	42aa      	cmp	r2, r5
 80010fe:	d100      	bne.n	8001102 <__aeabi_dadd+0x16e>
 8001100:	e272      	b.n	80015e8 <__aeabi_dadd+0x654>
 8001102:	0022      	movs	r2, r4
 8001104:	e123      	b.n	800134e <__aeabi_dadd+0x3ba>
 8001106:	2a00      	cmp	r2, #0
 8001108:	dc00      	bgt.n	800110c <__aeabi_dadd+0x178>
 800110a:	e098      	b.n	800123e <__aeabi_dadd+0x2aa>
 800110c:	2900      	cmp	r1, #0
 800110e:	d042      	beq.n	8001196 <__aeabi_dadd+0x202>
 8001110:	497d      	ldr	r1, [pc, #500]	; (8001308 <__aeabi_dadd+0x374>)
 8001112:	428e      	cmp	r6, r1
 8001114:	d100      	bne.n	8001118 <__aeabi_dadd+0x184>
 8001116:	e0da      	b.n	80012ce <__aeabi_dadd+0x33a>
 8001118:	2180      	movs	r1, #128	; 0x80
 800111a:	0028      	movs	r0, r5
 800111c:	0409      	lsls	r1, r1, #16
 800111e:	4308      	orrs	r0, r1
 8001120:	4684      	mov	ip, r0
 8001122:	2a38      	cmp	r2, #56	; 0x38
 8001124:	dd00      	ble.n	8001128 <__aeabi_dadd+0x194>
 8001126:	e129      	b.n	800137c <__aeabi_dadd+0x3e8>
 8001128:	2a1f      	cmp	r2, #31
 800112a:	dc00      	bgt.n	800112e <__aeabi_dadd+0x19a>
 800112c:	e187      	b.n	800143e <__aeabi_dadd+0x4aa>
 800112e:	0011      	movs	r1, r2
 8001130:	4665      	mov	r5, ip
 8001132:	3920      	subs	r1, #32
 8001134:	40cd      	lsrs	r5, r1
 8001136:	2a20      	cmp	r2, #32
 8001138:	d004      	beq.n	8001144 <__aeabi_dadd+0x1b0>
 800113a:	2040      	movs	r0, #64	; 0x40
 800113c:	4661      	mov	r1, ip
 800113e:	1a82      	subs	r2, r0, r2
 8001140:	4091      	lsls	r1, r2
 8001142:	430f      	orrs	r7, r1
 8001144:	0039      	movs	r1, r7
 8001146:	1e4f      	subs	r7, r1, #1
 8001148:	41b9      	sbcs	r1, r7
 800114a:	430d      	orrs	r5, r1
 800114c:	e11b      	b.n	8001386 <__aeabi_dadd+0x3f2>
 800114e:	0029      	movs	r1, r5
 8001150:	4339      	orrs	r1, r7
 8001152:	d100      	bne.n	8001156 <__aeabi_dadd+0x1c2>
 8001154:	e0b5      	b.n	80012c2 <__aeabi_dadd+0x32e>
 8001156:	1e51      	subs	r1, r2, #1
 8001158:	2a01      	cmp	r2, #1
 800115a:	d100      	bne.n	800115e <__aeabi_dadd+0x1ca>
 800115c:	e1ab      	b.n	80014b6 <__aeabi_dadd+0x522>
 800115e:	486a      	ldr	r0, [pc, #424]	; (8001308 <__aeabi_dadd+0x374>)
 8001160:	4282      	cmp	r2, r0
 8001162:	d100      	bne.n	8001166 <__aeabi_dadd+0x1d2>
 8001164:	e1b2      	b.n	80014cc <__aeabi_dadd+0x538>
 8001166:	000a      	movs	r2, r1
 8001168:	e743      	b.n	8000ff2 <__aeabi_dadd+0x5e>
 800116a:	4969      	ldr	r1, [pc, #420]	; (8001310 <__aeabi_dadd+0x37c>)
 800116c:	1c75      	adds	r5, r6, #1
 800116e:	420d      	tst	r5, r1
 8001170:	d000      	beq.n	8001174 <__aeabi_dadd+0x1e0>
 8001172:	e0cf      	b.n	8001314 <__aeabi_dadd+0x380>
 8001174:	2e00      	cmp	r6, #0
 8001176:	d000      	beq.n	800117a <__aeabi_dadd+0x1e6>
 8001178:	e193      	b.n	80014a2 <__aeabi_dadd+0x50e>
 800117a:	4649      	mov	r1, r9
 800117c:	4319      	orrs	r1, r3
 800117e:	d100      	bne.n	8001182 <__aeabi_dadd+0x1ee>
 8001180:	e1d1      	b.n	8001526 <__aeabi_dadd+0x592>
 8001182:	4661      	mov	r1, ip
 8001184:	4339      	orrs	r1, r7
 8001186:	d000      	beq.n	800118a <__aeabi_dadd+0x1f6>
 8001188:	e1e3      	b.n	8001552 <__aeabi_dadd+0x5be>
 800118a:	4649      	mov	r1, r9
 800118c:	0758      	lsls	r0, r3, #29
 800118e:	08c9      	lsrs	r1, r1, #3
 8001190:	4301      	orrs	r1, r0
 8001192:	08db      	lsrs	r3, r3, #3
 8001194:	e026      	b.n	80011e4 <__aeabi_dadd+0x250>
 8001196:	0029      	movs	r1, r5
 8001198:	4339      	orrs	r1, r7
 800119a:	d100      	bne.n	800119e <__aeabi_dadd+0x20a>
 800119c:	e091      	b.n	80012c2 <__aeabi_dadd+0x32e>
 800119e:	1e51      	subs	r1, r2, #1
 80011a0:	2a01      	cmp	r2, #1
 80011a2:	d005      	beq.n	80011b0 <__aeabi_dadd+0x21c>
 80011a4:	4858      	ldr	r0, [pc, #352]	; (8001308 <__aeabi_dadd+0x374>)
 80011a6:	4282      	cmp	r2, r0
 80011a8:	d100      	bne.n	80011ac <__aeabi_dadd+0x218>
 80011aa:	e18f      	b.n	80014cc <__aeabi_dadd+0x538>
 80011ac:	000a      	movs	r2, r1
 80011ae:	e7b8      	b.n	8001122 <__aeabi_dadd+0x18e>
 80011b0:	003d      	movs	r5, r7
 80011b2:	444d      	add	r5, r9
 80011b4:	454d      	cmp	r5, r9
 80011b6:	4189      	sbcs	r1, r1
 80011b8:	4463      	add	r3, ip
 80011ba:	4698      	mov	r8, r3
 80011bc:	4249      	negs	r1, r1
 80011be:	4488      	add	r8, r1
 80011c0:	4643      	mov	r3, r8
 80011c2:	2602      	movs	r6, #2
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	d500      	bpl.n	80011ca <__aeabi_dadd+0x236>
 80011c8:	e0eb      	b.n	80013a2 <__aeabi_dadd+0x40e>
 80011ca:	3e01      	subs	r6, #1
 80011cc:	076b      	lsls	r3, r5, #29
 80011ce:	d000      	beq.n	80011d2 <__aeabi_dadd+0x23e>
 80011d0:	e75c      	b.n	800108c <__aeabi_dadd+0xf8>
 80011d2:	4643      	mov	r3, r8
 80011d4:	08e9      	lsrs	r1, r5, #3
 80011d6:	075a      	lsls	r2, r3, #29
 80011d8:	4311      	orrs	r1, r2
 80011da:	0032      	movs	r2, r6
 80011dc:	08db      	lsrs	r3, r3, #3
 80011de:	484a      	ldr	r0, [pc, #296]	; (8001308 <__aeabi_dadd+0x374>)
 80011e0:	4282      	cmp	r2, r0
 80011e2:	d021      	beq.n	8001228 <__aeabi_dadd+0x294>
 80011e4:	031b      	lsls	r3, r3, #12
 80011e6:	0552      	lsls	r2, r2, #21
 80011e8:	0b1b      	lsrs	r3, r3, #12
 80011ea:	0d52      	lsrs	r2, r2, #21
 80011ec:	e76c      	b.n	80010c8 <__aeabi_dadd+0x134>
 80011ee:	2300      	movs	r3, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	e769      	b.n	80010c8 <__aeabi_dadd+0x134>
 80011f4:	002a      	movs	r2, r5
 80011f6:	433a      	orrs	r2, r7
 80011f8:	d069      	beq.n	80012ce <__aeabi_dadd+0x33a>
 80011fa:	464a      	mov	r2, r9
 80011fc:	0758      	lsls	r0, r3, #29
 80011fe:	08d1      	lsrs	r1, r2, #3
 8001200:	08da      	lsrs	r2, r3, #3
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	031b      	lsls	r3, r3, #12
 8001206:	4308      	orrs	r0, r1
 8001208:	421a      	tst	r2, r3
 800120a:	d007      	beq.n	800121c <__aeabi_dadd+0x288>
 800120c:	0029      	movs	r1, r5
 800120e:	08ed      	lsrs	r5, r5, #3
 8001210:	421d      	tst	r5, r3
 8001212:	d103      	bne.n	800121c <__aeabi_dadd+0x288>
 8001214:	002a      	movs	r2, r5
 8001216:	08ff      	lsrs	r7, r7, #3
 8001218:	0748      	lsls	r0, r1, #29
 800121a:	4338      	orrs	r0, r7
 800121c:	0f43      	lsrs	r3, r0, #29
 800121e:	00c1      	lsls	r1, r0, #3
 8001220:	075b      	lsls	r3, r3, #29
 8001222:	08c9      	lsrs	r1, r1, #3
 8001224:	4319      	orrs	r1, r3
 8001226:	0013      	movs	r3, r2
 8001228:	000a      	movs	r2, r1
 800122a:	431a      	orrs	r2, r3
 800122c:	d100      	bne.n	8001230 <__aeabi_dadd+0x29c>
 800122e:	e213      	b.n	8001658 <__aeabi_dadd+0x6c4>
 8001230:	2280      	movs	r2, #128	; 0x80
 8001232:	0312      	lsls	r2, r2, #12
 8001234:	4313      	orrs	r3, r2
 8001236:	031b      	lsls	r3, r3, #12
 8001238:	4a33      	ldr	r2, [pc, #204]	; (8001308 <__aeabi_dadd+0x374>)
 800123a:	0b1b      	lsrs	r3, r3, #12
 800123c:	e744      	b.n	80010c8 <__aeabi_dadd+0x134>
 800123e:	2a00      	cmp	r2, #0
 8001240:	d04b      	beq.n	80012da <__aeabi_dadd+0x346>
 8001242:	1b8a      	subs	r2, r1, r6
 8001244:	2e00      	cmp	r6, #0
 8001246:	d100      	bne.n	800124a <__aeabi_dadd+0x2b6>
 8001248:	e0e7      	b.n	800141a <__aeabi_dadd+0x486>
 800124a:	482f      	ldr	r0, [pc, #188]	; (8001308 <__aeabi_dadd+0x374>)
 800124c:	4281      	cmp	r1, r0
 800124e:	d100      	bne.n	8001252 <__aeabi_dadd+0x2be>
 8001250:	e195      	b.n	800157e <__aeabi_dadd+0x5ea>
 8001252:	2080      	movs	r0, #128	; 0x80
 8001254:	0400      	lsls	r0, r0, #16
 8001256:	4303      	orrs	r3, r0
 8001258:	2a38      	cmp	r2, #56	; 0x38
 800125a:	dd00      	ble.n	800125e <__aeabi_dadd+0x2ca>
 800125c:	e143      	b.n	80014e6 <__aeabi_dadd+0x552>
 800125e:	2a1f      	cmp	r2, #31
 8001260:	dd00      	ble.n	8001264 <__aeabi_dadd+0x2d0>
 8001262:	e1db      	b.n	800161c <__aeabi_dadd+0x688>
 8001264:	2020      	movs	r0, #32
 8001266:	001d      	movs	r5, r3
 8001268:	464e      	mov	r6, r9
 800126a:	1a80      	subs	r0, r0, r2
 800126c:	4085      	lsls	r5, r0
 800126e:	40d6      	lsrs	r6, r2
 8001270:	4335      	orrs	r5, r6
 8001272:	464e      	mov	r6, r9
 8001274:	4086      	lsls	r6, r0
 8001276:	0030      	movs	r0, r6
 8001278:	40d3      	lsrs	r3, r2
 800127a:	1e46      	subs	r6, r0, #1
 800127c:	41b0      	sbcs	r0, r6
 800127e:	449c      	add	ip, r3
 8001280:	4305      	orrs	r5, r0
 8001282:	19ed      	adds	r5, r5, r7
 8001284:	42bd      	cmp	r5, r7
 8001286:	419b      	sbcs	r3, r3
 8001288:	425b      	negs	r3, r3
 800128a:	4463      	add	r3, ip
 800128c:	4698      	mov	r8, r3
 800128e:	000e      	movs	r6, r1
 8001290:	e07f      	b.n	8001392 <__aeabi_dadd+0x3fe>
 8001292:	4a1e      	ldr	r2, [pc, #120]	; (800130c <__aeabi_dadd+0x378>)
 8001294:	1a76      	subs	r6, r6, r1
 8001296:	4013      	ands	r3, r2
 8001298:	4698      	mov	r8, r3
 800129a:	e6f5      	b.n	8001088 <__aeabi_dadd+0xf4>
 800129c:	0028      	movs	r0, r5
 800129e:	f001 fd61 	bl	8002d64 <__clzsi2>
 80012a2:	0001      	movs	r1, r0
 80012a4:	3118      	adds	r1, #24
 80012a6:	291f      	cmp	r1, #31
 80012a8:	dc00      	bgt.n	80012ac <__aeabi_dadd+0x318>
 80012aa:	e6cf      	b.n	800104c <__aeabi_dadd+0xb8>
 80012ac:	002b      	movs	r3, r5
 80012ae:	3808      	subs	r0, #8
 80012b0:	4083      	lsls	r3, r0
 80012b2:	2500      	movs	r5, #0
 80012b4:	e6d2      	b.n	800105c <__aeabi_dadd+0xc8>
 80012b6:	4662      	mov	r2, ip
 80012b8:	433a      	orrs	r2, r7
 80012ba:	0011      	movs	r1, r2
 80012bc:	1e4f      	subs	r7, r1, #1
 80012be:	41b9      	sbcs	r1, r7
 80012c0:	e6ac      	b.n	800101c <__aeabi_dadd+0x88>
 80012c2:	4649      	mov	r1, r9
 80012c4:	0758      	lsls	r0, r3, #29
 80012c6:	08c9      	lsrs	r1, r1, #3
 80012c8:	4301      	orrs	r1, r0
 80012ca:	08db      	lsrs	r3, r3, #3
 80012cc:	e787      	b.n	80011de <__aeabi_dadd+0x24a>
 80012ce:	4649      	mov	r1, r9
 80012d0:	075a      	lsls	r2, r3, #29
 80012d2:	08c9      	lsrs	r1, r1, #3
 80012d4:	4311      	orrs	r1, r2
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	e7a6      	b.n	8001228 <__aeabi_dadd+0x294>
 80012da:	490d      	ldr	r1, [pc, #52]	; (8001310 <__aeabi_dadd+0x37c>)
 80012dc:	1c70      	adds	r0, r6, #1
 80012de:	4208      	tst	r0, r1
 80012e0:	d000      	beq.n	80012e4 <__aeabi_dadd+0x350>
 80012e2:	e0bb      	b.n	800145c <__aeabi_dadd+0x4c8>
 80012e4:	2e00      	cmp	r6, #0
 80012e6:	d000      	beq.n	80012ea <__aeabi_dadd+0x356>
 80012e8:	e114      	b.n	8001514 <__aeabi_dadd+0x580>
 80012ea:	4649      	mov	r1, r9
 80012ec:	4319      	orrs	r1, r3
 80012ee:	d100      	bne.n	80012f2 <__aeabi_dadd+0x35e>
 80012f0:	e175      	b.n	80015de <__aeabi_dadd+0x64a>
 80012f2:	0029      	movs	r1, r5
 80012f4:	4339      	orrs	r1, r7
 80012f6:	d000      	beq.n	80012fa <__aeabi_dadd+0x366>
 80012f8:	e17e      	b.n	80015f8 <__aeabi_dadd+0x664>
 80012fa:	4649      	mov	r1, r9
 80012fc:	0758      	lsls	r0, r3, #29
 80012fe:	08c9      	lsrs	r1, r1, #3
 8001300:	4301      	orrs	r1, r0
 8001302:	08db      	lsrs	r3, r3, #3
 8001304:	e76e      	b.n	80011e4 <__aeabi_dadd+0x250>
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	000007ff 	.word	0x000007ff
 800130c:	ff7fffff 	.word	0xff7fffff
 8001310:	000007fe 	.word	0x000007fe
 8001314:	4649      	mov	r1, r9
 8001316:	1bcd      	subs	r5, r1, r7
 8001318:	4661      	mov	r1, ip
 800131a:	1a58      	subs	r0, r3, r1
 800131c:	45a9      	cmp	r9, r5
 800131e:	4189      	sbcs	r1, r1
 8001320:	4249      	negs	r1, r1
 8001322:	4688      	mov	r8, r1
 8001324:	0001      	movs	r1, r0
 8001326:	4640      	mov	r0, r8
 8001328:	1a09      	subs	r1, r1, r0
 800132a:	4688      	mov	r8, r1
 800132c:	0209      	lsls	r1, r1, #8
 800132e:	d500      	bpl.n	8001332 <__aeabi_dadd+0x39e>
 8001330:	e0a6      	b.n	8001480 <__aeabi_dadd+0x4ec>
 8001332:	4641      	mov	r1, r8
 8001334:	4329      	orrs	r1, r5
 8001336:	d000      	beq.n	800133a <__aeabi_dadd+0x3a6>
 8001338:	e67f      	b.n	800103a <__aeabi_dadd+0xa6>
 800133a:	2300      	movs	r3, #0
 800133c:	2400      	movs	r4, #0
 800133e:	e751      	b.n	80011e4 <__aeabi_dadd+0x250>
 8001340:	4cc7      	ldr	r4, [pc, #796]	; (8001660 <__aeabi_dadd+0x6cc>)
 8001342:	42a1      	cmp	r1, r4
 8001344:	d100      	bne.n	8001348 <__aeabi_dadd+0x3b4>
 8001346:	e0c7      	b.n	80014d8 <__aeabi_dadd+0x544>
 8001348:	2480      	movs	r4, #128	; 0x80
 800134a:	0424      	lsls	r4, r4, #16
 800134c:	4323      	orrs	r3, r4
 800134e:	2a38      	cmp	r2, #56	; 0x38
 8001350:	dc54      	bgt.n	80013fc <__aeabi_dadd+0x468>
 8001352:	2a1f      	cmp	r2, #31
 8001354:	dd00      	ble.n	8001358 <__aeabi_dadd+0x3c4>
 8001356:	e0cc      	b.n	80014f2 <__aeabi_dadd+0x55e>
 8001358:	2420      	movs	r4, #32
 800135a:	4648      	mov	r0, r9
 800135c:	1aa4      	subs	r4, r4, r2
 800135e:	001d      	movs	r5, r3
 8001360:	464e      	mov	r6, r9
 8001362:	40a0      	lsls	r0, r4
 8001364:	40d6      	lsrs	r6, r2
 8001366:	40a5      	lsls	r5, r4
 8001368:	0004      	movs	r4, r0
 800136a:	40d3      	lsrs	r3, r2
 800136c:	4662      	mov	r2, ip
 800136e:	4335      	orrs	r5, r6
 8001370:	1e66      	subs	r6, r4, #1
 8001372:	41b4      	sbcs	r4, r6
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	469c      	mov	ip, r3
 8001378:	4325      	orrs	r5, r4
 800137a:	e044      	b.n	8001406 <__aeabi_dadd+0x472>
 800137c:	4662      	mov	r2, ip
 800137e:	433a      	orrs	r2, r7
 8001380:	0015      	movs	r5, r2
 8001382:	1e6f      	subs	r7, r5, #1
 8001384:	41bd      	sbcs	r5, r7
 8001386:	444d      	add	r5, r9
 8001388:	454d      	cmp	r5, r9
 800138a:	4189      	sbcs	r1, r1
 800138c:	4249      	negs	r1, r1
 800138e:	4688      	mov	r8, r1
 8001390:	4498      	add	r8, r3
 8001392:	4643      	mov	r3, r8
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	d400      	bmi.n	800139a <__aeabi_dadd+0x406>
 8001398:	e718      	b.n	80011cc <__aeabi_dadd+0x238>
 800139a:	4bb1      	ldr	r3, [pc, #708]	; (8001660 <__aeabi_dadd+0x6cc>)
 800139c:	3601      	adds	r6, #1
 800139e:	429e      	cmp	r6, r3
 80013a0:	d049      	beq.n	8001436 <__aeabi_dadd+0x4a2>
 80013a2:	4642      	mov	r2, r8
 80013a4:	4baf      	ldr	r3, [pc, #700]	; (8001664 <__aeabi_dadd+0x6d0>)
 80013a6:	2101      	movs	r1, #1
 80013a8:	401a      	ands	r2, r3
 80013aa:	0013      	movs	r3, r2
 80013ac:	086a      	lsrs	r2, r5, #1
 80013ae:	400d      	ands	r5, r1
 80013b0:	4315      	orrs	r5, r2
 80013b2:	07d9      	lsls	r1, r3, #31
 80013b4:	085b      	lsrs	r3, r3, #1
 80013b6:	4698      	mov	r8, r3
 80013b8:	430d      	orrs	r5, r1
 80013ba:	e665      	b.n	8001088 <__aeabi_dadd+0xf4>
 80013bc:	0018      	movs	r0, r3
 80013be:	3e1f      	subs	r6, #31
 80013c0:	40f0      	lsrs	r0, r6
 80013c2:	2a20      	cmp	r2, #32
 80013c4:	d003      	beq.n	80013ce <__aeabi_dadd+0x43a>
 80013c6:	2140      	movs	r1, #64	; 0x40
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4093      	lsls	r3, r2
 80013cc:	431d      	orrs	r5, r3
 80013ce:	1e69      	subs	r1, r5, #1
 80013d0:	418d      	sbcs	r5, r1
 80013d2:	2300      	movs	r3, #0
 80013d4:	2600      	movs	r6, #0
 80013d6:	4698      	mov	r8, r3
 80013d8:	4305      	orrs	r5, r0
 80013da:	e6f7      	b.n	80011cc <__aeabi_dadd+0x238>
 80013dc:	0011      	movs	r1, r2
 80013de:	4665      	mov	r5, ip
 80013e0:	3920      	subs	r1, #32
 80013e2:	40cd      	lsrs	r5, r1
 80013e4:	2a20      	cmp	r2, #32
 80013e6:	d004      	beq.n	80013f2 <__aeabi_dadd+0x45e>
 80013e8:	2040      	movs	r0, #64	; 0x40
 80013ea:	4661      	mov	r1, ip
 80013ec:	1a82      	subs	r2, r0, r2
 80013ee:	4091      	lsls	r1, r2
 80013f0:	430f      	orrs	r7, r1
 80013f2:	0039      	movs	r1, r7
 80013f4:	1e4f      	subs	r7, r1, #1
 80013f6:	41b9      	sbcs	r1, r7
 80013f8:	4329      	orrs	r1, r5
 80013fa:	e60f      	b.n	800101c <__aeabi_dadd+0x88>
 80013fc:	464a      	mov	r2, r9
 80013fe:	4313      	orrs	r3, r2
 8001400:	001d      	movs	r5, r3
 8001402:	1e6b      	subs	r3, r5, #1
 8001404:	419d      	sbcs	r5, r3
 8001406:	1b7d      	subs	r5, r7, r5
 8001408:	42af      	cmp	r7, r5
 800140a:	419b      	sbcs	r3, r3
 800140c:	4662      	mov	r2, ip
 800140e:	425b      	negs	r3, r3
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	4698      	mov	r8, r3
 8001414:	4654      	mov	r4, sl
 8001416:	000e      	movs	r6, r1
 8001418:	e607      	b.n	800102a <__aeabi_dadd+0x96>
 800141a:	4648      	mov	r0, r9
 800141c:	4318      	orrs	r0, r3
 800141e:	d100      	bne.n	8001422 <__aeabi_dadd+0x48e>
 8001420:	e0b3      	b.n	800158a <__aeabi_dadd+0x5f6>
 8001422:	1e50      	subs	r0, r2, #1
 8001424:	2a01      	cmp	r2, #1
 8001426:	d100      	bne.n	800142a <__aeabi_dadd+0x496>
 8001428:	e10d      	b.n	8001646 <__aeabi_dadd+0x6b2>
 800142a:	4d8d      	ldr	r5, [pc, #564]	; (8001660 <__aeabi_dadd+0x6cc>)
 800142c:	42aa      	cmp	r2, r5
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x49e>
 8001430:	e0a5      	b.n	800157e <__aeabi_dadd+0x5ea>
 8001432:	0002      	movs	r2, r0
 8001434:	e710      	b.n	8001258 <__aeabi_dadd+0x2c4>
 8001436:	0032      	movs	r2, r6
 8001438:	2300      	movs	r3, #0
 800143a:	2100      	movs	r1, #0
 800143c:	e644      	b.n	80010c8 <__aeabi_dadd+0x134>
 800143e:	2120      	movs	r1, #32
 8001440:	0038      	movs	r0, r7
 8001442:	1a89      	subs	r1, r1, r2
 8001444:	4665      	mov	r5, ip
 8001446:	408f      	lsls	r7, r1
 8001448:	408d      	lsls	r5, r1
 800144a:	40d0      	lsrs	r0, r2
 800144c:	1e79      	subs	r1, r7, #1
 800144e:	418f      	sbcs	r7, r1
 8001450:	4305      	orrs	r5, r0
 8001452:	433d      	orrs	r5, r7
 8001454:	4667      	mov	r7, ip
 8001456:	40d7      	lsrs	r7, r2
 8001458:	19db      	adds	r3, r3, r7
 800145a:	e794      	b.n	8001386 <__aeabi_dadd+0x3f2>
 800145c:	4a80      	ldr	r2, [pc, #512]	; (8001660 <__aeabi_dadd+0x6cc>)
 800145e:	4290      	cmp	r0, r2
 8001460:	d100      	bne.n	8001464 <__aeabi_dadd+0x4d0>
 8001462:	e0ec      	b.n	800163e <__aeabi_dadd+0x6aa>
 8001464:	0039      	movs	r1, r7
 8001466:	4449      	add	r1, r9
 8001468:	4549      	cmp	r1, r9
 800146a:	4192      	sbcs	r2, r2
 800146c:	4463      	add	r3, ip
 800146e:	4252      	negs	r2, r2
 8001470:	189b      	adds	r3, r3, r2
 8001472:	07dd      	lsls	r5, r3, #31
 8001474:	0849      	lsrs	r1, r1, #1
 8001476:	085b      	lsrs	r3, r3, #1
 8001478:	4698      	mov	r8, r3
 800147a:	0006      	movs	r6, r0
 800147c:	430d      	orrs	r5, r1
 800147e:	e6a5      	b.n	80011cc <__aeabi_dadd+0x238>
 8001480:	464a      	mov	r2, r9
 8001482:	1abd      	subs	r5, r7, r2
 8001484:	42af      	cmp	r7, r5
 8001486:	4189      	sbcs	r1, r1
 8001488:	4662      	mov	r2, ip
 800148a:	4249      	negs	r1, r1
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	1a5b      	subs	r3, r3, r1
 8001490:	4698      	mov	r8, r3
 8001492:	4654      	mov	r4, sl
 8001494:	e5d1      	b.n	800103a <__aeabi_dadd+0xa6>
 8001496:	076c      	lsls	r4, r5, #29
 8001498:	08f9      	lsrs	r1, r7, #3
 800149a:	4321      	orrs	r1, r4
 800149c:	08eb      	lsrs	r3, r5, #3
 800149e:	0004      	movs	r4, r0
 80014a0:	e69d      	b.n	80011de <__aeabi_dadd+0x24a>
 80014a2:	464a      	mov	r2, r9
 80014a4:	431a      	orrs	r2, r3
 80014a6:	d175      	bne.n	8001594 <__aeabi_dadd+0x600>
 80014a8:	4661      	mov	r1, ip
 80014aa:	4339      	orrs	r1, r7
 80014ac:	d114      	bne.n	80014d8 <__aeabi_dadd+0x544>
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	2400      	movs	r4, #0
 80014b2:	031b      	lsls	r3, r3, #12
 80014b4:	e6bc      	b.n	8001230 <__aeabi_dadd+0x29c>
 80014b6:	464a      	mov	r2, r9
 80014b8:	1bd5      	subs	r5, r2, r7
 80014ba:	45a9      	cmp	r9, r5
 80014bc:	4189      	sbcs	r1, r1
 80014be:	4662      	mov	r2, ip
 80014c0:	4249      	negs	r1, r1
 80014c2:	1a9b      	subs	r3, r3, r2
 80014c4:	1a5b      	subs	r3, r3, r1
 80014c6:	4698      	mov	r8, r3
 80014c8:	2601      	movs	r6, #1
 80014ca:	e5ae      	b.n	800102a <__aeabi_dadd+0x96>
 80014cc:	464a      	mov	r2, r9
 80014ce:	08d1      	lsrs	r1, r2, #3
 80014d0:	075a      	lsls	r2, r3, #29
 80014d2:	4311      	orrs	r1, r2
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	e6a7      	b.n	8001228 <__aeabi_dadd+0x294>
 80014d8:	4663      	mov	r3, ip
 80014da:	08f9      	lsrs	r1, r7, #3
 80014dc:	075a      	lsls	r2, r3, #29
 80014de:	4654      	mov	r4, sl
 80014e0:	4311      	orrs	r1, r2
 80014e2:	08db      	lsrs	r3, r3, #3
 80014e4:	e6a0      	b.n	8001228 <__aeabi_dadd+0x294>
 80014e6:	464a      	mov	r2, r9
 80014e8:	4313      	orrs	r3, r2
 80014ea:	001d      	movs	r5, r3
 80014ec:	1e6b      	subs	r3, r5, #1
 80014ee:	419d      	sbcs	r5, r3
 80014f0:	e6c7      	b.n	8001282 <__aeabi_dadd+0x2ee>
 80014f2:	0014      	movs	r4, r2
 80014f4:	001e      	movs	r6, r3
 80014f6:	3c20      	subs	r4, #32
 80014f8:	40e6      	lsrs	r6, r4
 80014fa:	2a20      	cmp	r2, #32
 80014fc:	d005      	beq.n	800150a <__aeabi_dadd+0x576>
 80014fe:	2440      	movs	r4, #64	; 0x40
 8001500:	1aa2      	subs	r2, r4, r2
 8001502:	4093      	lsls	r3, r2
 8001504:	464a      	mov	r2, r9
 8001506:	431a      	orrs	r2, r3
 8001508:	4691      	mov	r9, r2
 800150a:	464d      	mov	r5, r9
 800150c:	1e6b      	subs	r3, r5, #1
 800150e:	419d      	sbcs	r5, r3
 8001510:	4335      	orrs	r5, r6
 8001512:	e778      	b.n	8001406 <__aeabi_dadd+0x472>
 8001514:	464a      	mov	r2, r9
 8001516:	431a      	orrs	r2, r3
 8001518:	d000      	beq.n	800151c <__aeabi_dadd+0x588>
 800151a:	e66b      	b.n	80011f4 <__aeabi_dadd+0x260>
 800151c:	076b      	lsls	r3, r5, #29
 800151e:	08f9      	lsrs	r1, r7, #3
 8001520:	4319      	orrs	r1, r3
 8001522:	08eb      	lsrs	r3, r5, #3
 8001524:	e680      	b.n	8001228 <__aeabi_dadd+0x294>
 8001526:	4661      	mov	r1, ip
 8001528:	4339      	orrs	r1, r7
 800152a:	d054      	beq.n	80015d6 <__aeabi_dadd+0x642>
 800152c:	4663      	mov	r3, ip
 800152e:	08f9      	lsrs	r1, r7, #3
 8001530:	075c      	lsls	r4, r3, #29
 8001532:	4321      	orrs	r1, r4
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	0004      	movs	r4, r0
 8001538:	e654      	b.n	80011e4 <__aeabi_dadd+0x250>
 800153a:	464a      	mov	r2, r9
 800153c:	1abd      	subs	r5, r7, r2
 800153e:	42af      	cmp	r7, r5
 8001540:	4189      	sbcs	r1, r1
 8001542:	4662      	mov	r2, ip
 8001544:	4249      	negs	r1, r1
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	1a5b      	subs	r3, r3, r1
 800154a:	4698      	mov	r8, r3
 800154c:	0004      	movs	r4, r0
 800154e:	2601      	movs	r6, #1
 8001550:	e56b      	b.n	800102a <__aeabi_dadd+0x96>
 8001552:	464a      	mov	r2, r9
 8001554:	1bd5      	subs	r5, r2, r7
 8001556:	45a9      	cmp	r9, r5
 8001558:	4189      	sbcs	r1, r1
 800155a:	4662      	mov	r2, ip
 800155c:	4249      	negs	r1, r1
 800155e:	1a9a      	subs	r2, r3, r2
 8001560:	1a52      	subs	r2, r2, r1
 8001562:	4690      	mov	r8, r2
 8001564:	0212      	lsls	r2, r2, #8
 8001566:	d532      	bpl.n	80015ce <__aeabi_dadd+0x63a>
 8001568:	464a      	mov	r2, r9
 800156a:	1abd      	subs	r5, r7, r2
 800156c:	42af      	cmp	r7, r5
 800156e:	4189      	sbcs	r1, r1
 8001570:	4662      	mov	r2, ip
 8001572:	4249      	negs	r1, r1
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	1a5b      	subs	r3, r3, r1
 8001578:	4698      	mov	r8, r3
 800157a:	0004      	movs	r4, r0
 800157c:	e584      	b.n	8001088 <__aeabi_dadd+0xf4>
 800157e:	4663      	mov	r3, ip
 8001580:	08f9      	lsrs	r1, r7, #3
 8001582:	075a      	lsls	r2, r3, #29
 8001584:	4311      	orrs	r1, r2
 8001586:	08db      	lsrs	r3, r3, #3
 8001588:	e64e      	b.n	8001228 <__aeabi_dadd+0x294>
 800158a:	08f9      	lsrs	r1, r7, #3
 800158c:	0768      	lsls	r0, r5, #29
 800158e:	4301      	orrs	r1, r0
 8001590:	08eb      	lsrs	r3, r5, #3
 8001592:	e624      	b.n	80011de <__aeabi_dadd+0x24a>
 8001594:	4662      	mov	r2, ip
 8001596:	433a      	orrs	r2, r7
 8001598:	d100      	bne.n	800159c <__aeabi_dadd+0x608>
 800159a:	e698      	b.n	80012ce <__aeabi_dadd+0x33a>
 800159c:	464a      	mov	r2, r9
 800159e:	08d1      	lsrs	r1, r2, #3
 80015a0:	075a      	lsls	r2, r3, #29
 80015a2:	4311      	orrs	r1, r2
 80015a4:	08da      	lsrs	r2, r3, #3
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	031b      	lsls	r3, r3, #12
 80015aa:	421a      	tst	r2, r3
 80015ac:	d008      	beq.n	80015c0 <__aeabi_dadd+0x62c>
 80015ae:	4660      	mov	r0, ip
 80015b0:	08c5      	lsrs	r5, r0, #3
 80015b2:	421d      	tst	r5, r3
 80015b4:	d104      	bne.n	80015c0 <__aeabi_dadd+0x62c>
 80015b6:	4654      	mov	r4, sl
 80015b8:	002a      	movs	r2, r5
 80015ba:	08f9      	lsrs	r1, r7, #3
 80015bc:	0743      	lsls	r3, r0, #29
 80015be:	4319      	orrs	r1, r3
 80015c0:	0f4b      	lsrs	r3, r1, #29
 80015c2:	00c9      	lsls	r1, r1, #3
 80015c4:	075b      	lsls	r3, r3, #29
 80015c6:	08c9      	lsrs	r1, r1, #3
 80015c8:	4319      	orrs	r1, r3
 80015ca:	0013      	movs	r3, r2
 80015cc:	e62c      	b.n	8001228 <__aeabi_dadd+0x294>
 80015ce:	4641      	mov	r1, r8
 80015d0:	4329      	orrs	r1, r5
 80015d2:	d000      	beq.n	80015d6 <__aeabi_dadd+0x642>
 80015d4:	e5fa      	b.n	80011cc <__aeabi_dadd+0x238>
 80015d6:	2300      	movs	r3, #0
 80015d8:	000a      	movs	r2, r1
 80015da:	2400      	movs	r4, #0
 80015dc:	e602      	b.n	80011e4 <__aeabi_dadd+0x250>
 80015de:	076b      	lsls	r3, r5, #29
 80015e0:	08f9      	lsrs	r1, r7, #3
 80015e2:	4319      	orrs	r1, r3
 80015e4:	08eb      	lsrs	r3, r5, #3
 80015e6:	e5fd      	b.n	80011e4 <__aeabi_dadd+0x250>
 80015e8:	4663      	mov	r3, ip
 80015ea:	08f9      	lsrs	r1, r7, #3
 80015ec:	075b      	lsls	r3, r3, #29
 80015ee:	4319      	orrs	r1, r3
 80015f0:	4663      	mov	r3, ip
 80015f2:	0004      	movs	r4, r0
 80015f4:	08db      	lsrs	r3, r3, #3
 80015f6:	e617      	b.n	8001228 <__aeabi_dadd+0x294>
 80015f8:	003d      	movs	r5, r7
 80015fa:	444d      	add	r5, r9
 80015fc:	4463      	add	r3, ip
 80015fe:	454d      	cmp	r5, r9
 8001600:	4189      	sbcs	r1, r1
 8001602:	4698      	mov	r8, r3
 8001604:	4249      	negs	r1, r1
 8001606:	4488      	add	r8, r1
 8001608:	4643      	mov	r3, r8
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	d400      	bmi.n	8001610 <__aeabi_dadd+0x67c>
 800160e:	e5dd      	b.n	80011cc <__aeabi_dadd+0x238>
 8001610:	4642      	mov	r2, r8
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <__aeabi_dadd+0x6d0>)
 8001614:	2601      	movs	r6, #1
 8001616:	401a      	ands	r2, r3
 8001618:	4690      	mov	r8, r2
 800161a:	e5d7      	b.n	80011cc <__aeabi_dadd+0x238>
 800161c:	0010      	movs	r0, r2
 800161e:	001e      	movs	r6, r3
 8001620:	3820      	subs	r0, #32
 8001622:	40c6      	lsrs	r6, r0
 8001624:	2a20      	cmp	r2, #32
 8001626:	d005      	beq.n	8001634 <__aeabi_dadd+0x6a0>
 8001628:	2040      	movs	r0, #64	; 0x40
 800162a:	1a82      	subs	r2, r0, r2
 800162c:	4093      	lsls	r3, r2
 800162e:	464a      	mov	r2, r9
 8001630:	431a      	orrs	r2, r3
 8001632:	4691      	mov	r9, r2
 8001634:	464d      	mov	r5, r9
 8001636:	1e6b      	subs	r3, r5, #1
 8001638:	419d      	sbcs	r5, r3
 800163a:	4335      	orrs	r5, r6
 800163c:	e621      	b.n	8001282 <__aeabi_dadd+0x2ee>
 800163e:	0002      	movs	r2, r0
 8001640:	2300      	movs	r3, #0
 8001642:	2100      	movs	r1, #0
 8001644:	e540      	b.n	80010c8 <__aeabi_dadd+0x134>
 8001646:	464a      	mov	r2, r9
 8001648:	19d5      	adds	r5, r2, r7
 800164a:	42bd      	cmp	r5, r7
 800164c:	4189      	sbcs	r1, r1
 800164e:	4463      	add	r3, ip
 8001650:	4698      	mov	r8, r3
 8001652:	4249      	negs	r1, r1
 8001654:	4488      	add	r8, r1
 8001656:	e5b3      	b.n	80011c0 <__aeabi_dadd+0x22c>
 8001658:	2100      	movs	r1, #0
 800165a:	4a01      	ldr	r2, [pc, #4]	; (8001660 <__aeabi_dadd+0x6cc>)
 800165c:	000b      	movs	r3, r1
 800165e:	e533      	b.n	80010c8 <__aeabi_dadd+0x134>
 8001660:	000007ff 	.word	0x000007ff
 8001664:	ff7fffff 	.word	0xff7fffff

08001668 <__aeabi_ddiv>:
 8001668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166a:	4657      	mov	r7, sl
 800166c:	464e      	mov	r6, r9
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	b5e0      	push	{r5, r6, r7, lr}
 8001674:	4681      	mov	r9, r0
 8001676:	0005      	movs	r5, r0
 8001678:	030c      	lsls	r4, r1, #12
 800167a:	0048      	lsls	r0, r1, #1
 800167c:	4692      	mov	sl, r2
 800167e:	001f      	movs	r7, r3
 8001680:	b085      	sub	sp, #20
 8001682:	0b24      	lsrs	r4, r4, #12
 8001684:	0d40      	lsrs	r0, r0, #21
 8001686:	0fce      	lsrs	r6, r1, #31
 8001688:	2800      	cmp	r0, #0
 800168a:	d059      	beq.n	8001740 <__aeabi_ddiv+0xd8>
 800168c:	4b87      	ldr	r3, [pc, #540]	; (80018ac <__aeabi_ddiv+0x244>)
 800168e:	4298      	cmp	r0, r3
 8001690:	d100      	bne.n	8001694 <__aeabi_ddiv+0x2c>
 8001692:	e098      	b.n	80017c6 <__aeabi_ddiv+0x15e>
 8001694:	0f6b      	lsrs	r3, r5, #29
 8001696:	00e4      	lsls	r4, r4, #3
 8001698:	431c      	orrs	r4, r3
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	4323      	orrs	r3, r4
 80016a0:	4698      	mov	r8, r3
 80016a2:	4b83      	ldr	r3, [pc, #524]	; (80018b0 <__aeabi_ddiv+0x248>)
 80016a4:	00ed      	lsls	r5, r5, #3
 80016a6:	469b      	mov	fp, r3
 80016a8:	2300      	movs	r3, #0
 80016aa:	4699      	mov	r9, r3
 80016ac:	4483      	add	fp, r0
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	033c      	lsls	r4, r7, #12
 80016b2:	007b      	lsls	r3, r7, #1
 80016b4:	4650      	mov	r0, sl
 80016b6:	0b24      	lsrs	r4, r4, #12
 80016b8:	0d5b      	lsrs	r3, r3, #21
 80016ba:	0fff      	lsrs	r7, r7, #31
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d067      	beq.n	8001790 <__aeabi_ddiv+0x128>
 80016c0:	4a7a      	ldr	r2, [pc, #488]	; (80018ac <__aeabi_ddiv+0x244>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d018      	beq.n	80016f8 <__aeabi_ddiv+0x90>
 80016c6:	497a      	ldr	r1, [pc, #488]	; (80018b0 <__aeabi_ddiv+0x248>)
 80016c8:	0f42      	lsrs	r2, r0, #29
 80016ca:	468c      	mov	ip, r1
 80016cc:	00e4      	lsls	r4, r4, #3
 80016ce:	4659      	mov	r1, fp
 80016d0:	4314      	orrs	r4, r2
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	4463      	add	r3, ip
 80016d6:	0412      	lsls	r2, r2, #16
 80016d8:	1acb      	subs	r3, r1, r3
 80016da:	4314      	orrs	r4, r2
 80016dc:	469b      	mov	fp, r3
 80016de:	00c2      	lsls	r2, r0, #3
 80016e0:	2000      	movs	r0, #0
 80016e2:	0033      	movs	r3, r6
 80016e4:	407b      	eors	r3, r7
 80016e6:	469a      	mov	sl, r3
 80016e8:	464b      	mov	r3, r9
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	d900      	bls.n	80016f0 <__aeabi_ddiv+0x88>
 80016ee:	e0ef      	b.n	80018d0 <__aeabi_ddiv+0x268>
 80016f0:	4970      	ldr	r1, [pc, #448]	; (80018b4 <__aeabi_ddiv+0x24c>)
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	58cb      	ldr	r3, [r1, r3]
 80016f6:	469f      	mov	pc, r3
 80016f8:	4b6f      	ldr	r3, [pc, #444]	; (80018b8 <__aeabi_ddiv+0x250>)
 80016fa:	4652      	mov	r2, sl
 80016fc:	469c      	mov	ip, r3
 80016fe:	4322      	orrs	r2, r4
 8001700:	44e3      	add	fp, ip
 8001702:	2a00      	cmp	r2, #0
 8001704:	d000      	beq.n	8001708 <__aeabi_ddiv+0xa0>
 8001706:	e095      	b.n	8001834 <__aeabi_ddiv+0x1cc>
 8001708:	4649      	mov	r1, r9
 800170a:	2302      	movs	r3, #2
 800170c:	4319      	orrs	r1, r3
 800170e:	4689      	mov	r9, r1
 8001710:	2400      	movs	r4, #0
 8001712:	2002      	movs	r0, #2
 8001714:	e7e5      	b.n	80016e2 <__aeabi_ddiv+0x7a>
 8001716:	2300      	movs	r3, #0
 8001718:	2400      	movs	r4, #0
 800171a:	2500      	movs	r5, #0
 800171c:	4652      	mov	r2, sl
 800171e:	051b      	lsls	r3, r3, #20
 8001720:	4323      	orrs	r3, r4
 8001722:	07d2      	lsls	r2, r2, #31
 8001724:	4313      	orrs	r3, r2
 8001726:	0028      	movs	r0, r5
 8001728:	0019      	movs	r1, r3
 800172a:	b005      	add	sp, #20
 800172c:	bcf0      	pop	{r4, r5, r6, r7}
 800172e:	46bb      	mov	fp, r7
 8001730:	46b2      	mov	sl, r6
 8001732:	46a9      	mov	r9, r5
 8001734:	46a0      	mov	r8, r4
 8001736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001738:	2400      	movs	r4, #0
 800173a:	2500      	movs	r5, #0
 800173c:	4b5b      	ldr	r3, [pc, #364]	; (80018ac <__aeabi_ddiv+0x244>)
 800173e:	e7ed      	b.n	800171c <__aeabi_ddiv+0xb4>
 8001740:	464b      	mov	r3, r9
 8001742:	4323      	orrs	r3, r4
 8001744:	4698      	mov	r8, r3
 8001746:	d100      	bne.n	800174a <__aeabi_ddiv+0xe2>
 8001748:	e089      	b.n	800185e <__aeabi_ddiv+0x1f6>
 800174a:	2c00      	cmp	r4, #0
 800174c:	d100      	bne.n	8001750 <__aeabi_ddiv+0xe8>
 800174e:	e1e0      	b.n	8001b12 <__aeabi_ddiv+0x4aa>
 8001750:	0020      	movs	r0, r4
 8001752:	f001 fb07 	bl	8002d64 <__clzsi2>
 8001756:	0001      	movs	r1, r0
 8001758:	0002      	movs	r2, r0
 800175a:	390b      	subs	r1, #11
 800175c:	231d      	movs	r3, #29
 800175e:	1a5b      	subs	r3, r3, r1
 8001760:	4649      	mov	r1, r9
 8001762:	0010      	movs	r0, r2
 8001764:	40d9      	lsrs	r1, r3
 8001766:	3808      	subs	r0, #8
 8001768:	4084      	lsls	r4, r0
 800176a:	000b      	movs	r3, r1
 800176c:	464d      	mov	r5, r9
 800176e:	4323      	orrs	r3, r4
 8001770:	4698      	mov	r8, r3
 8001772:	4085      	lsls	r5, r0
 8001774:	4851      	ldr	r0, [pc, #324]	; (80018bc <__aeabi_ddiv+0x254>)
 8001776:	033c      	lsls	r4, r7, #12
 8001778:	1a83      	subs	r3, r0, r2
 800177a:	469b      	mov	fp, r3
 800177c:	2300      	movs	r3, #0
 800177e:	4699      	mov	r9, r3
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	007b      	lsls	r3, r7, #1
 8001784:	4650      	mov	r0, sl
 8001786:	0b24      	lsrs	r4, r4, #12
 8001788:	0d5b      	lsrs	r3, r3, #21
 800178a:	0fff      	lsrs	r7, r7, #31
 800178c:	2b00      	cmp	r3, #0
 800178e:	d197      	bne.n	80016c0 <__aeabi_ddiv+0x58>
 8001790:	4652      	mov	r2, sl
 8001792:	4322      	orrs	r2, r4
 8001794:	d055      	beq.n	8001842 <__aeabi_ddiv+0x1da>
 8001796:	2c00      	cmp	r4, #0
 8001798:	d100      	bne.n	800179c <__aeabi_ddiv+0x134>
 800179a:	e1ca      	b.n	8001b32 <__aeabi_ddiv+0x4ca>
 800179c:	0020      	movs	r0, r4
 800179e:	f001 fae1 	bl	8002d64 <__clzsi2>
 80017a2:	0002      	movs	r2, r0
 80017a4:	3a0b      	subs	r2, #11
 80017a6:	231d      	movs	r3, #29
 80017a8:	0001      	movs	r1, r0
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	4652      	mov	r2, sl
 80017ae:	3908      	subs	r1, #8
 80017b0:	40da      	lsrs	r2, r3
 80017b2:	408c      	lsls	r4, r1
 80017b4:	4314      	orrs	r4, r2
 80017b6:	4652      	mov	r2, sl
 80017b8:	408a      	lsls	r2, r1
 80017ba:	4b41      	ldr	r3, [pc, #260]	; (80018c0 <__aeabi_ddiv+0x258>)
 80017bc:	4458      	add	r0, fp
 80017be:	469b      	mov	fp, r3
 80017c0:	4483      	add	fp, r0
 80017c2:	2000      	movs	r0, #0
 80017c4:	e78d      	b.n	80016e2 <__aeabi_ddiv+0x7a>
 80017c6:	464b      	mov	r3, r9
 80017c8:	4323      	orrs	r3, r4
 80017ca:	4698      	mov	r8, r3
 80017cc:	d140      	bne.n	8001850 <__aeabi_ddiv+0x1e8>
 80017ce:	2308      	movs	r3, #8
 80017d0:	4699      	mov	r9, r3
 80017d2:	3b06      	subs	r3, #6
 80017d4:	2500      	movs	r5, #0
 80017d6:	4683      	mov	fp, r0
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	e769      	b.n	80016b0 <__aeabi_ddiv+0x48>
 80017dc:	46b2      	mov	sl, r6
 80017de:	9b00      	ldr	r3, [sp, #0]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d0a9      	beq.n	8001738 <__aeabi_ddiv+0xd0>
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d100      	bne.n	80017ea <__aeabi_ddiv+0x182>
 80017e8:	e211      	b.n	8001c0e <__aeabi_ddiv+0x5a6>
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d093      	beq.n	8001716 <__aeabi_ddiv+0xae>
 80017ee:	4a35      	ldr	r2, [pc, #212]	; (80018c4 <__aeabi_ddiv+0x25c>)
 80017f0:	445a      	add	r2, fp
 80017f2:	2a00      	cmp	r2, #0
 80017f4:	dc00      	bgt.n	80017f8 <__aeabi_ddiv+0x190>
 80017f6:	e13c      	b.n	8001a72 <__aeabi_ddiv+0x40a>
 80017f8:	076b      	lsls	r3, r5, #29
 80017fa:	d000      	beq.n	80017fe <__aeabi_ddiv+0x196>
 80017fc:	e1a7      	b.n	8001b4e <__aeabi_ddiv+0x4e6>
 80017fe:	08ed      	lsrs	r5, r5, #3
 8001800:	4643      	mov	r3, r8
 8001802:	01db      	lsls	r3, r3, #7
 8001804:	d506      	bpl.n	8001814 <__aeabi_ddiv+0x1ac>
 8001806:	4642      	mov	r2, r8
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <__aeabi_ddiv+0x260>)
 800180a:	401a      	ands	r2, r3
 800180c:	4690      	mov	r8, r2
 800180e:	2280      	movs	r2, #128	; 0x80
 8001810:	00d2      	lsls	r2, r2, #3
 8001812:	445a      	add	r2, fp
 8001814:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <__aeabi_ddiv+0x264>)
 8001816:	429a      	cmp	r2, r3
 8001818:	dc8e      	bgt.n	8001738 <__aeabi_ddiv+0xd0>
 800181a:	4643      	mov	r3, r8
 800181c:	0552      	lsls	r2, r2, #21
 800181e:	0758      	lsls	r0, r3, #29
 8001820:	025c      	lsls	r4, r3, #9
 8001822:	4305      	orrs	r5, r0
 8001824:	0b24      	lsrs	r4, r4, #12
 8001826:	0d53      	lsrs	r3, r2, #21
 8001828:	e778      	b.n	800171c <__aeabi_ddiv+0xb4>
 800182a:	46ba      	mov	sl, r7
 800182c:	46a0      	mov	r8, r4
 800182e:	0015      	movs	r5, r2
 8001830:	9000      	str	r0, [sp, #0]
 8001832:	e7d4      	b.n	80017de <__aeabi_ddiv+0x176>
 8001834:	464a      	mov	r2, r9
 8001836:	2303      	movs	r3, #3
 8001838:	431a      	orrs	r2, r3
 800183a:	4691      	mov	r9, r2
 800183c:	2003      	movs	r0, #3
 800183e:	4652      	mov	r2, sl
 8001840:	e74f      	b.n	80016e2 <__aeabi_ddiv+0x7a>
 8001842:	4649      	mov	r1, r9
 8001844:	2301      	movs	r3, #1
 8001846:	4319      	orrs	r1, r3
 8001848:	4689      	mov	r9, r1
 800184a:	2400      	movs	r4, #0
 800184c:	2001      	movs	r0, #1
 800184e:	e748      	b.n	80016e2 <__aeabi_ddiv+0x7a>
 8001850:	230c      	movs	r3, #12
 8001852:	4699      	mov	r9, r3
 8001854:	3b09      	subs	r3, #9
 8001856:	46a0      	mov	r8, r4
 8001858:	4683      	mov	fp, r0
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	e728      	b.n	80016b0 <__aeabi_ddiv+0x48>
 800185e:	2304      	movs	r3, #4
 8001860:	4699      	mov	r9, r3
 8001862:	2300      	movs	r3, #0
 8001864:	469b      	mov	fp, r3
 8001866:	3301      	adds	r3, #1
 8001868:	2500      	movs	r5, #0
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	e720      	b.n	80016b0 <__aeabi_ddiv+0x48>
 800186e:	2300      	movs	r3, #0
 8001870:	2480      	movs	r4, #128	; 0x80
 8001872:	469a      	mov	sl, r3
 8001874:	2500      	movs	r5, #0
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <__aeabi_ddiv+0x244>)
 8001878:	0324      	lsls	r4, r4, #12
 800187a:	e74f      	b.n	800171c <__aeabi_ddiv+0xb4>
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	4641      	mov	r1, r8
 8001880:	031b      	lsls	r3, r3, #12
 8001882:	4219      	tst	r1, r3
 8001884:	d008      	beq.n	8001898 <__aeabi_ddiv+0x230>
 8001886:	421c      	tst	r4, r3
 8001888:	d106      	bne.n	8001898 <__aeabi_ddiv+0x230>
 800188a:	431c      	orrs	r4, r3
 800188c:	0324      	lsls	r4, r4, #12
 800188e:	46ba      	mov	sl, r7
 8001890:	0015      	movs	r5, r2
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <__aeabi_ddiv+0x244>)
 8001894:	0b24      	lsrs	r4, r4, #12
 8001896:	e741      	b.n	800171c <__aeabi_ddiv+0xb4>
 8001898:	2480      	movs	r4, #128	; 0x80
 800189a:	4643      	mov	r3, r8
 800189c:	0324      	lsls	r4, r4, #12
 800189e:	431c      	orrs	r4, r3
 80018a0:	0324      	lsls	r4, r4, #12
 80018a2:	46b2      	mov	sl, r6
 80018a4:	4b01      	ldr	r3, [pc, #4]	; (80018ac <__aeabi_ddiv+0x244>)
 80018a6:	0b24      	lsrs	r4, r4, #12
 80018a8:	e738      	b.n	800171c <__aeabi_ddiv+0xb4>
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	000007ff 	.word	0x000007ff
 80018b0:	fffffc01 	.word	0xfffffc01
 80018b4:	0800c4b4 	.word	0x0800c4b4
 80018b8:	fffff801 	.word	0xfffff801
 80018bc:	fffffc0d 	.word	0xfffffc0d
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	000003ff 	.word	0x000003ff
 80018c8:	feffffff 	.word	0xfeffffff
 80018cc:	000007fe 	.word	0x000007fe
 80018d0:	4544      	cmp	r4, r8
 80018d2:	d200      	bcs.n	80018d6 <__aeabi_ddiv+0x26e>
 80018d4:	e116      	b.n	8001b04 <__aeabi_ddiv+0x49c>
 80018d6:	d100      	bne.n	80018da <__aeabi_ddiv+0x272>
 80018d8:	e111      	b.n	8001afe <__aeabi_ddiv+0x496>
 80018da:	2301      	movs	r3, #1
 80018dc:	425b      	negs	r3, r3
 80018de:	469c      	mov	ip, r3
 80018e0:	002e      	movs	r6, r5
 80018e2:	4640      	mov	r0, r8
 80018e4:	2500      	movs	r5, #0
 80018e6:	44e3      	add	fp, ip
 80018e8:	0223      	lsls	r3, r4, #8
 80018ea:	0e14      	lsrs	r4, r2, #24
 80018ec:	431c      	orrs	r4, r3
 80018ee:	0c1b      	lsrs	r3, r3, #16
 80018f0:	4699      	mov	r9, r3
 80018f2:	0423      	lsls	r3, r4, #16
 80018f4:	0c1f      	lsrs	r7, r3, #16
 80018f6:	0212      	lsls	r2, r2, #8
 80018f8:	4649      	mov	r1, r9
 80018fa:	9200      	str	r2, [sp, #0]
 80018fc:	9701      	str	r7, [sp, #4]
 80018fe:	f7fe fca5 	bl	800024c <__aeabi_uidivmod>
 8001902:	0002      	movs	r2, r0
 8001904:	437a      	muls	r2, r7
 8001906:	040b      	lsls	r3, r1, #16
 8001908:	0c31      	lsrs	r1, r6, #16
 800190a:	4680      	mov	r8, r0
 800190c:	4319      	orrs	r1, r3
 800190e:	428a      	cmp	r2, r1
 8001910:	d90b      	bls.n	800192a <__aeabi_ddiv+0x2c2>
 8001912:	2301      	movs	r3, #1
 8001914:	425b      	negs	r3, r3
 8001916:	469c      	mov	ip, r3
 8001918:	1909      	adds	r1, r1, r4
 800191a:	44e0      	add	r8, ip
 800191c:	428c      	cmp	r4, r1
 800191e:	d804      	bhi.n	800192a <__aeabi_ddiv+0x2c2>
 8001920:	428a      	cmp	r2, r1
 8001922:	d902      	bls.n	800192a <__aeabi_ddiv+0x2c2>
 8001924:	1e83      	subs	r3, r0, #2
 8001926:	4698      	mov	r8, r3
 8001928:	1909      	adds	r1, r1, r4
 800192a:	1a88      	subs	r0, r1, r2
 800192c:	4649      	mov	r1, r9
 800192e:	f7fe fc8d 	bl	800024c <__aeabi_uidivmod>
 8001932:	0409      	lsls	r1, r1, #16
 8001934:	468c      	mov	ip, r1
 8001936:	0431      	lsls	r1, r6, #16
 8001938:	4666      	mov	r6, ip
 800193a:	9a01      	ldr	r2, [sp, #4]
 800193c:	0c09      	lsrs	r1, r1, #16
 800193e:	4342      	muls	r2, r0
 8001940:	0003      	movs	r3, r0
 8001942:	4331      	orrs	r1, r6
 8001944:	428a      	cmp	r2, r1
 8001946:	d904      	bls.n	8001952 <__aeabi_ddiv+0x2ea>
 8001948:	1909      	adds	r1, r1, r4
 800194a:	3b01      	subs	r3, #1
 800194c:	428c      	cmp	r4, r1
 800194e:	d800      	bhi.n	8001952 <__aeabi_ddiv+0x2ea>
 8001950:	e111      	b.n	8001b76 <__aeabi_ddiv+0x50e>
 8001952:	1a89      	subs	r1, r1, r2
 8001954:	4642      	mov	r2, r8
 8001956:	9e00      	ldr	r6, [sp, #0]
 8001958:	0412      	lsls	r2, r2, #16
 800195a:	431a      	orrs	r2, r3
 800195c:	0c33      	lsrs	r3, r6, #16
 800195e:	001f      	movs	r7, r3
 8001960:	0c10      	lsrs	r0, r2, #16
 8001962:	4690      	mov	r8, r2
 8001964:	9302      	str	r3, [sp, #8]
 8001966:	0413      	lsls	r3, r2, #16
 8001968:	0432      	lsls	r2, r6, #16
 800196a:	0c16      	lsrs	r6, r2, #16
 800196c:	0032      	movs	r2, r6
 800196e:	0c1b      	lsrs	r3, r3, #16
 8001970:	435a      	muls	r2, r3
 8001972:	9603      	str	r6, [sp, #12]
 8001974:	437b      	muls	r3, r7
 8001976:	4346      	muls	r6, r0
 8001978:	4378      	muls	r0, r7
 800197a:	0c17      	lsrs	r7, r2, #16
 800197c:	46bc      	mov	ip, r7
 800197e:	199b      	adds	r3, r3, r6
 8001980:	4463      	add	r3, ip
 8001982:	429e      	cmp	r6, r3
 8001984:	d903      	bls.n	800198e <__aeabi_ddiv+0x326>
 8001986:	2680      	movs	r6, #128	; 0x80
 8001988:	0276      	lsls	r6, r6, #9
 800198a:	46b4      	mov	ip, r6
 800198c:	4460      	add	r0, ip
 800198e:	0c1e      	lsrs	r6, r3, #16
 8001990:	1830      	adds	r0, r6, r0
 8001992:	0416      	lsls	r6, r2, #16
 8001994:	041b      	lsls	r3, r3, #16
 8001996:	0c36      	lsrs	r6, r6, #16
 8001998:	199e      	adds	r6, r3, r6
 800199a:	4281      	cmp	r1, r0
 800199c:	d200      	bcs.n	80019a0 <__aeabi_ddiv+0x338>
 800199e:	e09c      	b.n	8001ada <__aeabi_ddiv+0x472>
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x33c>
 80019a2:	e097      	b.n	8001ad4 <__aeabi_ddiv+0x46c>
 80019a4:	1bae      	subs	r6, r5, r6
 80019a6:	1a09      	subs	r1, r1, r0
 80019a8:	42b5      	cmp	r5, r6
 80019aa:	4180      	sbcs	r0, r0
 80019ac:	4240      	negs	r0, r0
 80019ae:	1a08      	subs	r0, r1, r0
 80019b0:	4284      	cmp	r4, r0
 80019b2:	d100      	bne.n	80019b6 <__aeabi_ddiv+0x34e>
 80019b4:	e111      	b.n	8001bda <__aeabi_ddiv+0x572>
 80019b6:	4649      	mov	r1, r9
 80019b8:	f7fe fc48 	bl	800024c <__aeabi_uidivmod>
 80019bc:	9a01      	ldr	r2, [sp, #4]
 80019be:	040b      	lsls	r3, r1, #16
 80019c0:	4342      	muls	r2, r0
 80019c2:	0c31      	lsrs	r1, r6, #16
 80019c4:	0005      	movs	r5, r0
 80019c6:	4319      	orrs	r1, r3
 80019c8:	428a      	cmp	r2, r1
 80019ca:	d907      	bls.n	80019dc <__aeabi_ddiv+0x374>
 80019cc:	1909      	adds	r1, r1, r4
 80019ce:	3d01      	subs	r5, #1
 80019d0:	428c      	cmp	r4, r1
 80019d2:	d803      	bhi.n	80019dc <__aeabi_ddiv+0x374>
 80019d4:	428a      	cmp	r2, r1
 80019d6:	d901      	bls.n	80019dc <__aeabi_ddiv+0x374>
 80019d8:	1e85      	subs	r5, r0, #2
 80019da:	1909      	adds	r1, r1, r4
 80019dc:	1a88      	subs	r0, r1, r2
 80019de:	4649      	mov	r1, r9
 80019e0:	f7fe fc34 	bl	800024c <__aeabi_uidivmod>
 80019e4:	0409      	lsls	r1, r1, #16
 80019e6:	468c      	mov	ip, r1
 80019e8:	0431      	lsls	r1, r6, #16
 80019ea:	4666      	mov	r6, ip
 80019ec:	9a01      	ldr	r2, [sp, #4]
 80019ee:	0c09      	lsrs	r1, r1, #16
 80019f0:	4342      	muls	r2, r0
 80019f2:	0003      	movs	r3, r0
 80019f4:	4331      	orrs	r1, r6
 80019f6:	428a      	cmp	r2, r1
 80019f8:	d907      	bls.n	8001a0a <__aeabi_ddiv+0x3a2>
 80019fa:	1909      	adds	r1, r1, r4
 80019fc:	3b01      	subs	r3, #1
 80019fe:	428c      	cmp	r4, r1
 8001a00:	d803      	bhi.n	8001a0a <__aeabi_ddiv+0x3a2>
 8001a02:	428a      	cmp	r2, r1
 8001a04:	d901      	bls.n	8001a0a <__aeabi_ddiv+0x3a2>
 8001a06:	1e83      	subs	r3, r0, #2
 8001a08:	1909      	adds	r1, r1, r4
 8001a0a:	9e03      	ldr	r6, [sp, #12]
 8001a0c:	1a89      	subs	r1, r1, r2
 8001a0e:	0032      	movs	r2, r6
 8001a10:	042d      	lsls	r5, r5, #16
 8001a12:	431d      	orrs	r5, r3
 8001a14:	9f02      	ldr	r7, [sp, #8]
 8001a16:	042b      	lsls	r3, r5, #16
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	435a      	muls	r2, r3
 8001a1c:	437b      	muls	r3, r7
 8001a1e:	469c      	mov	ip, r3
 8001a20:	0c28      	lsrs	r0, r5, #16
 8001a22:	4346      	muls	r6, r0
 8001a24:	0c13      	lsrs	r3, r2, #16
 8001a26:	44b4      	add	ip, r6
 8001a28:	4463      	add	r3, ip
 8001a2a:	4378      	muls	r0, r7
 8001a2c:	429e      	cmp	r6, r3
 8001a2e:	d903      	bls.n	8001a38 <__aeabi_ddiv+0x3d0>
 8001a30:	2680      	movs	r6, #128	; 0x80
 8001a32:	0276      	lsls	r6, r6, #9
 8001a34:	46b4      	mov	ip, r6
 8001a36:	4460      	add	r0, ip
 8001a38:	0c1e      	lsrs	r6, r3, #16
 8001a3a:	0412      	lsls	r2, r2, #16
 8001a3c:	041b      	lsls	r3, r3, #16
 8001a3e:	0c12      	lsrs	r2, r2, #16
 8001a40:	1830      	adds	r0, r6, r0
 8001a42:	189b      	adds	r3, r3, r2
 8001a44:	4281      	cmp	r1, r0
 8001a46:	d306      	bcc.n	8001a56 <__aeabi_ddiv+0x3ee>
 8001a48:	d002      	beq.n	8001a50 <__aeabi_ddiv+0x3e8>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	431d      	orrs	r5, r3
 8001a4e:	e6ce      	b.n	80017ee <__aeabi_ddiv+0x186>
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d100      	bne.n	8001a56 <__aeabi_ddiv+0x3ee>
 8001a54:	e6cb      	b.n	80017ee <__aeabi_ddiv+0x186>
 8001a56:	1861      	adds	r1, r4, r1
 8001a58:	1e6e      	subs	r6, r5, #1
 8001a5a:	42a1      	cmp	r1, r4
 8001a5c:	d200      	bcs.n	8001a60 <__aeabi_ddiv+0x3f8>
 8001a5e:	e0a4      	b.n	8001baa <__aeabi_ddiv+0x542>
 8001a60:	4281      	cmp	r1, r0
 8001a62:	d200      	bcs.n	8001a66 <__aeabi_ddiv+0x3fe>
 8001a64:	e0c9      	b.n	8001bfa <__aeabi_ddiv+0x592>
 8001a66:	d100      	bne.n	8001a6a <__aeabi_ddiv+0x402>
 8001a68:	e0d9      	b.n	8001c1e <__aeabi_ddiv+0x5b6>
 8001a6a:	0035      	movs	r5, r6
 8001a6c:	e7ed      	b.n	8001a4a <__aeabi_ddiv+0x3e2>
 8001a6e:	2501      	movs	r5, #1
 8001a70:	426d      	negs	r5, r5
 8001a72:	2101      	movs	r1, #1
 8001a74:	1a89      	subs	r1, r1, r2
 8001a76:	2938      	cmp	r1, #56	; 0x38
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_ddiv+0x414>
 8001a7a:	e64c      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001a7c:	291f      	cmp	r1, #31
 8001a7e:	dc00      	bgt.n	8001a82 <__aeabi_ddiv+0x41a>
 8001a80:	e07f      	b.n	8001b82 <__aeabi_ddiv+0x51a>
 8001a82:	231f      	movs	r3, #31
 8001a84:	425b      	negs	r3, r3
 8001a86:	1a9a      	subs	r2, r3, r2
 8001a88:	4643      	mov	r3, r8
 8001a8a:	40d3      	lsrs	r3, r2
 8001a8c:	2920      	cmp	r1, #32
 8001a8e:	d004      	beq.n	8001a9a <__aeabi_ddiv+0x432>
 8001a90:	4644      	mov	r4, r8
 8001a92:	4a65      	ldr	r2, [pc, #404]	; (8001c28 <__aeabi_ddiv+0x5c0>)
 8001a94:	445a      	add	r2, fp
 8001a96:	4094      	lsls	r4, r2
 8001a98:	4325      	orrs	r5, r4
 8001a9a:	1e6a      	subs	r2, r5, #1
 8001a9c:	4195      	sbcs	r5, r2
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	432b      	orrs	r3, r5
 8001aa2:	0015      	movs	r5, r2
 8001aa4:	2400      	movs	r4, #0
 8001aa6:	401d      	ands	r5, r3
 8001aa8:	421a      	tst	r2, r3
 8001aaa:	d100      	bne.n	8001aae <__aeabi_ddiv+0x446>
 8001aac:	e0a1      	b.n	8001bf2 <__aeabi_ddiv+0x58a>
 8001aae:	220f      	movs	r2, #15
 8001ab0:	2400      	movs	r4, #0
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	2a04      	cmp	r2, #4
 8001ab6:	d100      	bne.n	8001aba <__aeabi_ddiv+0x452>
 8001ab8:	e098      	b.n	8001bec <__aeabi_ddiv+0x584>
 8001aba:	1d1a      	adds	r2, r3, #4
 8001abc:	429a      	cmp	r2, r3
 8001abe:	419b      	sbcs	r3, r3
 8001ac0:	425b      	negs	r3, r3
 8001ac2:	18e4      	adds	r4, r4, r3
 8001ac4:	0013      	movs	r3, r2
 8001ac6:	0222      	lsls	r2, r4, #8
 8001ac8:	d400      	bmi.n	8001acc <__aeabi_ddiv+0x464>
 8001aca:	e08f      	b.n	8001bec <__aeabi_ddiv+0x584>
 8001acc:	2301      	movs	r3, #1
 8001ace:	2400      	movs	r4, #0
 8001ad0:	2500      	movs	r5, #0
 8001ad2:	e623      	b.n	800171c <__aeabi_ddiv+0xb4>
 8001ad4:	42b5      	cmp	r5, r6
 8001ad6:	d300      	bcc.n	8001ada <__aeabi_ddiv+0x472>
 8001ad8:	e764      	b.n	80019a4 <__aeabi_ddiv+0x33c>
 8001ada:	4643      	mov	r3, r8
 8001adc:	1e5a      	subs	r2, r3, #1
 8001ade:	9b00      	ldr	r3, [sp, #0]
 8001ae0:	469c      	mov	ip, r3
 8001ae2:	4465      	add	r5, ip
 8001ae4:	001f      	movs	r7, r3
 8001ae6:	429d      	cmp	r5, r3
 8001ae8:	419b      	sbcs	r3, r3
 8001aea:	425b      	negs	r3, r3
 8001aec:	191b      	adds	r3, r3, r4
 8001aee:	18c9      	adds	r1, r1, r3
 8001af0:	428c      	cmp	r4, r1
 8001af2:	d23a      	bcs.n	8001b6a <__aeabi_ddiv+0x502>
 8001af4:	4288      	cmp	r0, r1
 8001af6:	d863      	bhi.n	8001bc0 <__aeabi_ddiv+0x558>
 8001af8:	d060      	beq.n	8001bbc <__aeabi_ddiv+0x554>
 8001afa:	4690      	mov	r8, r2
 8001afc:	e752      	b.n	80019a4 <__aeabi_ddiv+0x33c>
 8001afe:	42aa      	cmp	r2, r5
 8001b00:	d900      	bls.n	8001b04 <__aeabi_ddiv+0x49c>
 8001b02:	e6ea      	b.n	80018da <__aeabi_ddiv+0x272>
 8001b04:	4643      	mov	r3, r8
 8001b06:	07de      	lsls	r6, r3, #31
 8001b08:	0858      	lsrs	r0, r3, #1
 8001b0a:	086b      	lsrs	r3, r5, #1
 8001b0c:	431e      	orrs	r6, r3
 8001b0e:	07ed      	lsls	r5, r5, #31
 8001b10:	e6ea      	b.n	80018e8 <__aeabi_ddiv+0x280>
 8001b12:	4648      	mov	r0, r9
 8001b14:	f001 f926 	bl	8002d64 <__clzsi2>
 8001b18:	0001      	movs	r1, r0
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	3115      	adds	r1, #21
 8001b1e:	3220      	adds	r2, #32
 8001b20:	291c      	cmp	r1, #28
 8001b22:	dc00      	bgt.n	8001b26 <__aeabi_ddiv+0x4be>
 8001b24:	e61a      	b.n	800175c <__aeabi_ddiv+0xf4>
 8001b26:	464b      	mov	r3, r9
 8001b28:	3808      	subs	r0, #8
 8001b2a:	4083      	lsls	r3, r0
 8001b2c:	2500      	movs	r5, #0
 8001b2e:	4698      	mov	r8, r3
 8001b30:	e620      	b.n	8001774 <__aeabi_ddiv+0x10c>
 8001b32:	f001 f917 	bl	8002d64 <__clzsi2>
 8001b36:	0003      	movs	r3, r0
 8001b38:	001a      	movs	r2, r3
 8001b3a:	3215      	adds	r2, #21
 8001b3c:	3020      	adds	r0, #32
 8001b3e:	2a1c      	cmp	r2, #28
 8001b40:	dc00      	bgt.n	8001b44 <__aeabi_ddiv+0x4dc>
 8001b42:	e630      	b.n	80017a6 <__aeabi_ddiv+0x13e>
 8001b44:	4654      	mov	r4, sl
 8001b46:	3b08      	subs	r3, #8
 8001b48:	2200      	movs	r2, #0
 8001b4a:	409c      	lsls	r4, r3
 8001b4c:	e635      	b.n	80017ba <__aeabi_ddiv+0x152>
 8001b4e:	230f      	movs	r3, #15
 8001b50:	402b      	ands	r3, r5
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d100      	bne.n	8001b58 <__aeabi_ddiv+0x4f0>
 8001b56:	e652      	b.n	80017fe <__aeabi_ddiv+0x196>
 8001b58:	2305      	movs	r3, #5
 8001b5a:	425b      	negs	r3, r3
 8001b5c:	42ab      	cmp	r3, r5
 8001b5e:	419b      	sbcs	r3, r3
 8001b60:	3504      	adds	r5, #4
 8001b62:	425b      	negs	r3, r3
 8001b64:	08ed      	lsrs	r5, r5, #3
 8001b66:	4498      	add	r8, r3
 8001b68:	e64a      	b.n	8001800 <__aeabi_ddiv+0x198>
 8001b6a:	428c      	cmp	r4, r1
 8001b6c:	d1c5      	bne.n	8001afa <__aeabi_ddiv+0x492>
 8001b6e:	42af      	cmp	r7, r5
 8001b70:	d9c0      	bls.n	8001af4 <__aeabi_ddiv+0x48c>
 8001b72:	4690      	mov	r8, r2
 8001b74:	e716      	b.n	80019a4 <__aeabi_ddiv+0x33c>
 8001b76:	428a      	cmp	r2, r1
 8001b78:	d800      	bhi.n	8001b7c <__aeabi_ddiv+0x514>
 8001b7a:	e6ea      	b.n	8001952 <__aeabi_ddiv+0x2ea>
 8001b7c:	1e83      	subs	r3, r0, #2
 8001b7e:	1909      	adds	r1, r1, r4
 8001b80:	e6e7      	b.n	8001952 <__aeabi_ddiv+0x2ea>
 8001b82:	4a2a      	ldr	r2, [pc, #168]	; (8001c2c <__aeabi_ddiv+0x5c4>)
 8001b84:	0028      	movs	r0, r5
 8001b86:	445a      	add	r2, fp
 8001b88:	4643      	mov	r3, r8
 8001b8a:	4095      	lsls	r5, r2
 8001b8c:	4093      	lsls	r3, r2
 8001b8e:	40c8      	lsrs	r0, r1
 8001b90:	1e6a      	subs	r2, r5, #1
 8001b92:	4195      	sbcs	r5, r2
 8001b94:	4644      	mov	r4, r8
 8001b96:	4303      	orrs	r3, r0
 8001b98:	432b      	orrs	r3, r5
 8001b9a:	40cc      	lsrs	r4, r1
 8001b9c:	075a      	lsls	r2, r3, #29
 8001b9e:	d092      	beq.n	8001ac6 <__aeabi_ddiv+0x45e>
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	2a04      	cmp	r2, #4
 8001ba6:	d188      	bne.n	8001aba <__aeabi_ddiv+0x452>
 8001ba8:	e78d      	b.n	8001ac6 <__aeabi_ddiv+0x45e>
 8001baa:	0035      	movs	r5, r6
 8001bac:	4281      	cmp	r1, r0
 8001bae:	d000      	beq.n	8001bb2 <__aeabi_ddiv+0x54a>
 8001bb0:	e74b      	b.n	8001a4a <__aeabi_ddiv+0x3e2>
 8001bb2:	9a00      	ldr	r2, [sp, #0]
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d000      	beq.n	8001bba <__aeabi_ddiv+0x552>
 8001bb8:	e747      	b.n	8001a4a <__aeabi_ddiv+0x3e2>
 8001bba:	e618      	b.n	80017ee <__aeabi_ddiv+0x186>
 8001bbc:	42ae      	cmp	r6, r5
 8001bbe:	d99c      	bls.n	8001afa <__aeabi_ddiv+0x492>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	425b      	negs	r3, r3
 8001bc4:	469c      	mov	ip, r3
 8001bc6:	9b00      	ldr	r3, [sp, #0]
 8001bc8:	44e0      	add	r8, ip
 8001bca:	469c      	mov	ip, r3
 8001bcc:	4465      	add	r5, ip
 8001bce:	429d      	cmp	r5, r3
 8001bd0:	419b      	sbcs	r3, r3
 8001bd2:	425b      	negs	r3, r3
 8001bd4:	191b      	adds	r3, r3, r4
 8001bd6:	18c9      	adds	r1, r1, r3
 8001bd8:	e6e4      	b.n	80019a4 <__aeabi_ddiv+0x33c>
 8001bda:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <__aeabi_ddiv+0x5c8>)
 8001bdc:	445a      	add	r2, fp
 8001bde:	2a00      	cmp	r2, #0
 8001be0:	dc00      	bgt.n	8001be4 <__aeabi_ddiv+0x57c>
 8001be2:	e744      	b.n	8001a6e <__aeabi_ddiv+0x406>
 8001be4:	2301      	movs	r3, #1
 8001be6:	2500      	movs	r5, #0
 8001be8:	4498      	add	r8, r3
 8001bea:	e609      	b.n	8001800 <__aeabi_ddiv+0x198>
 8001bec:	0765      	lsls	r5, r4, #29
 8001bee:	0264      	lsls	r4, r4, #9
 8001bf0:	0b24      	lsrs	r4, r4, #12
 8001bf2:	08db      	lsrs	r3, r3, #3
 8001bf4:	431d      	orrs	r5, r3
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e590      	b.n	800171c <__aeabi_ddiv+0xb4>
 8001bfa:	9e00      	ldr	r6, [sp, #0]
 8001bfc:	3d02      	subs	r5, #2
 8001bfe:	0072      	lsls	r2, r6, #1
 8001c00:	42b2      	cmp	r2, r6
 8001c02:	41bf      	sbcs	r7, r7
 8001c04:	427f      	negs	r7, r7
 8001c06:	193c      	adds	r4, r7, r4
 8001c08:	1909      	adds	r1, r1, r4
 8001c0a:	9200      	str	r2, [sp, #0]
 8001c0c:	e7ce      	b.n	8001bac <__aeabi_ddiv+0x544>
 8001c0e:	2480      	movs	r4, #128	; 0x80
 8001c10:	4643      	mov	r3, r8
 8001c12:	0324      	lsls	r4, r4, #12
 8001c14:	431c      	orrs	r4, r3
 8001c16:	0324      	lsls	r4, r4, #12
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <__aeabi_ddiv+0x5cc>)
 8001c1a:	0b24      	lsrs	r4, r4, #12
 8001c1c:	e57e      	b.n	800171c <__aeabi_ddiv+0xb4>
 8001c1e:	9a00      	ldr	r2, [sp, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d3ea      	bcc.n	8001bfa <__aeabi_ddiv+0x592>
 8001c24:	0035      	movs	r5, r6
 8001c26:	e7c4      	b.n	8001bb2 <__aeabi_ddiv+0x54a>
 8001c28:	0000043e 	.word	0x0000043e
 8001c2c:	0000041e 	.word	0x0000041e
 8001c30:	000003ff 	.word	0x000003ff
 8001c34:	000007ff 	.word	0x000007ff

08001c38 <__eqdf2>:
 8001c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3a:	464f      	mov	r7, r9
 8001c3c:	4646      	mov	r6, r8
 8001c3e:	46d6      	mov	lr, sl
 8001c40:	4694      	mov	ip, r2
 8001c42:	4691      	mov	r9, r2
 8001c44:	031a      	lsls	r2, r3, #12
 8001c46:	0b12      	lsrs	r2, r2, #12
 8001c48:	4d18      	ldr	r5, [pc, #96]	; (8001cac <__eqdf2+0x74>)
 8001c4a:	b5c0      	push	{r6, r7, lr}
 8001c4c:	004c      	lsls	r4, r1, #1
 8001c4e:	030f      	lsls	r7, r1, #12
 8001c50:	4692      	mov	sl, r2
 8001c52:	005a      	lsls	r2, r3, #1
 8001c54:	0006      	movs	r6, r0
 8001c56:	4680      	mov	r8, r0
 8001c58:	0b3f      	lsrs	r7, r7, #12
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	0d64      	lsrs	r4, r4, #21
 8001c5e:	0fc9      	lsrs	r1, r1, #31
 8001c60:	0d52      	lsrs	r2, r2, #21
 8001c62:	0fdb      	lsrs	r3, r3, #31
 8001c64:	42ac      	cmp	r4, r5
 8001c66:	d00a      	beq.n	8001c7e <__eqdf2+0x46>
 8001c68:	42aa      	cmp	r2, r5
 8001c6a:	d003      	beq.n	8001c74 <__eqdf2+0x3c>
 8001c6c:	4294      	cmp	r4, r2
 8001c6e:	d101      	bne.n	8001c74 <__eqdf2+0x3c>
 8001c70:	4557      	cmp	r7, sl
 8001c72:	d00d      	beq.n	8001c90 <__eqdf2+0x58>
 8001c74:	bce0      	pop	{r5, r6, r7}
 8001c76:	46ba      	mov	sl, r7
 8001c78:	46b1      	mov	r9, r6
 8001c7a:	46a8      	mov	r8, r5
 8001c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c7e:	003d      	movs	r5, r7
 8001c80:	4335      	orrs	r5, r6
 8001c82:	d1f7      	bne.n	8001c74 <__eqdf2+0x3c>
 8001c84:	42a2      	cmp	r2, r4
 8001c86:	d1f5      	bne.n	8001c74 <__eqdf2+0x3c>
 8001c88:	4652      	mov	r2, sl
 8001c8a:	4665      	mov	r5, ip
 8001c8c:	432a      	orrs	r2, r5
 8001c8e:	d1f1      	bne.n	8001c74 <__eqdf2+0x3c>
 8001c90:	2001      	movs	r0, #1
 8001c92:	45c8      	cmp	r8, r9
 8001c94:	d1ee      	bne.n	8001c74 <__eqdf2+0x3c>
 8001c96:	4299      	cmp	r1, r3
 8001c98:	d006      	beq.n	8001ca8 <__eqdf2+0x70>
 8001c9a:	2c00      	cmp	r4, #0
 8001c9c:	d1ea      	bne.n	8001c74 <__eqdf2+0x3c>
 8001c9e:	433e      	orrs	r6, r7
 8001ca0:	0030      	movs	r0, r6
 8001ca2:	1e46      	subs	r6, r0, #1
 8001ca4:	41b0      	sbcs	r0, r6
 8001ca6:	e7e5      	b.n	8001c74 <__eqdf2+0x3c>
 8001ca8:	2000      	movs	r0, #0
 8001caa:	e7e3      	b.n	8001c74 <__eqdf2+0x3c>
 8001cac:	000007ff 	.word	0x000007ff

08001cb0 <__gedf2>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	464e      	mov	r6, r9
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	46de      	mov	lr, fp
 8001cba:	0004      	movs	r4, r0
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	b5e0      	push	{r5, r6, r7, lr}
 8001cc0:	0016      	movs	r6, r2
 8001cc2:	031b      	lsls	r3, r3, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	4d32      	ldr	r5, [pc, #200]	; (8001d90 <__gedf2+0xe0>)
 8001cc8:	030f      	lsls	r7, r1, #12
 8001cca:	004a      	lsls	r2, r1, #1
 8001ccc:	4699      	mov	r9, r3
 8001cce:	0043      	lsls	r3, r0, #1
 8001cd0:	46a4      	mov	ip, r4
 8001cd2:	46b0      	mov	r8, r6
 8001cd4:	0b3f      	lsrs	r7, r7, #12
 8001cd6:	0d52      	lsrs	r2, r2, #21
 8001cd8:	0fc9      	lsrs	r1, r1, #31
 8001cda:	0d5b      	lsrs	r3, r3, #21
 8001cdc:	0fc0      	lsrs	r0, r0, #31
 8001cde:	42aa      	cmp	r2, r5
 8001ce0:	d029      	beq.n	8001d36 <__gedf2+0x86>
 8001ce2:	42ab      	cmp	r3, r5
 8001ce4:	d018      	beq.n	8001d18 <__gedf2+0x68>
 8001ce6:	2a00      	cmp	r2, #0
 8001ce8:	d12a      	bne.n	8001d40 <__gedf2+0x90>
 8001cea:	433c      	orrs	r4, r7
 8001cec:	46a3      	mov	fp, r4
 8001cee:	4265      	negs	r5, r4
 8001cf0:	4165      	adcs	r5, r4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <__gedf2+0x4c>
 8001cf6:	464c      	mov	r4, r9
 8001cf8:	4326      	orrs	r6, r4
 8001cfa:	d027      	beq.n	8001d4c <__gedf2+0x9c>
 8001cfc:	2d00      	cmp	r5, #0
 8001cfe:	d115      	bne.n	8001d2c <__gedf2+0x7c>
 8001d00:	4281      	cmp	r1, r0
 8001d02:	d028      	beq.n	8001d56 <__gedf2+0xa6>
 8001d04:	2002      	movs	r0, #2
 8001d06:	3901      	subs	r1, #1
 8001d08:	4008      	ands	r0, r1
 8001d0a:	3801      	subs	r0, #1
 8001d0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001d0e:	46bb      	mov	fp, r7
 8001d10:	46b2      	mov	sl, r6
 8001d12:	46a9      	mov	r9, r5
 8001d14:	46a0      	mov	r8, r4
 8001d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d18:	464d      	mov	r5, r9
 8001d1a:	432e      	orrs	r6, r5
 8001d1c:	d12f      	bne.n	8001d7e <__gedf2+0xce>
 8001d1e:	2a00      	cmp	r2, #0
 8001d20:	d1ee      	bne.n	8001d00 <__gedf2+0x50>
 8001d22:	433c      	orrs	r4, r7
 8001d24:	4265      	negs	r5, r4
 8001d26:	4165      	adcs	r5, r4
 8001d28:	2d00      	cmp	r5, #0
 8001d2a:	d0e9      	beq.n	8001d00 <__gedf2+0x50>
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	d1ed      	bne.n	8001d0c <__gedf2+0x5c>
 8001d30:	2001      	movs	r0, #1
 8001d32:	4240      	negs	r0, r0
 8001d34:	e7ea      	b.n	8001d0c <__gedf2+0x5c>
 8001d36:	003d      	movs	r5, r7
 8001d38:	4325      	orrs	r5, r4
 8001d3a:	d120      	bne.n	8001d7e <__gedf2+0xce>
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d0eb      	beq.n	8001d18 <__gedf2+0x68>
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1dd      	bne.n	8001d00 <__gedf2+0x50>
 8001d44:	464c      	mov	r4, r9
 8001d46:	4326      	orrs	r6, r4
 8001d48:	d1da      	bne.n	8001d00 <__gedf2+0x50>
 8001d4a:	e7db      	b.n	8001d04 <__gedf2+0x54>
 8001d4c:	465b      	mov	r3, fp
 8001d4e:	2000      	movs	r0, #0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0db      	beq.n	8001d0c <__gedf2+0x5c>
 8001d54:	e7d6      	b.n	8001d04 <__gedf2+0x54>
 8001d56:	429a      	cmp	r2, r3
 8001d58:	dc0a      	bgt.n	8001d70 <__gedf2+0xc0>
 8001d5a:	dbe7      	blt.n	8001d2c <__gedf2+0x7c>
 8001d5c:	454f      	cmp	r7, r9
 8001d5e:	d8d1      	bhi.n	8001d04 <__gedf2+0x54>
 8001d60:	d010      	beq.n	8001d84 <__gedf2+0xd4>
 8001d62:	2000      	movs	r0, #0
 8001d64:	454f      	cmp	r7, r9
 8001d66:	d2d1      	bcs.n	8001d0c <__gedf2+0x5c>
 8001d68:	2900      	cmp	r1, #0
 8001d6a:	d0e1      	beq.n	8001d30 <__gedf2+0x80>
 8001d6c:	0008      	movs	r0, r1
 8001d6e:	e7cd      	b.n	8001d0c <__gedf2+0x5c>
 8001d70:	4243      	negs	r3, r0
 8001d72:	4158      	adcs	r0, r3
 8001d74:	2302      	movs	r3, #2
 8001d76:	4240      	negs	r0, r0
 8001d78:	4018      	ands	r0, r3
 8001d7a:	3801      	subs	r0, #1
 8001d7c:	e7c6      	b.n	8001d0c <__gedf2+0x5c>
 8001d7e:	2002      	movs	r0, #2
 8001d80:	4240      	negs	r0, r0
 8001d82:	e7c3      	b.n	8001d0c <__gedf2+0x5c>
 8001d84:	45c4      	cmp	ip, r8
 8001d86:	d8bd      	bhi.n	8001d04 <__gedf2+0x54>
 8001d88:	2000      	movs	r0, #0
 8001d8a:	45c4      	cmp	ip, r8
 8001d8c:	d2be      	bcs.n	8001d0c <__gedf2+0x5c>
 8001d8e:	e7eb      	b.n	8001d68 <__gedf2+0xb8>
 8001d90:	000007ff 	.word	0x000007ff

08001d94 <__ledf2>:
 8001d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d96:	464e      	mov	r6, r9
 8001d98:	4645      	mov	r5, r8
 8001d9a:	4657      	mov	r7, sl
 8001d9c:	46de      	mov	lr, fp
 8001d9e:	0004      	movs	r4, r0
 8001da0:	0018      	movs	r0, r3
 8001da2:	b5e0      	push	{r5, r6, r7, lr}
 8001da4:	0016      	movs	r6, r2
 8001da6:	031b      	lsls	r3, r3, #12
 8001da8:	0b1b      	lsrs	r3, r3, #12
 8001daa:	4d31      	ldr	r5, [pc, #196]	; (8001e70 <__ledf2+0xdc>)
 8001dac:	030f      	lsls	r7, r1, #12
 8001dae:	004a      	lsls	r2, r1, #1
 8001db0:	4699      	mov	r9, r3
 8001db2:	0043      	lsls	r3, r0, #1
 8001db4:	46a4      	mov	ip, r4
 8001db6:	46b0      	mov	r8, r6
 8001db8:	0b3f      	lsrs	r7, r7, #12
 8001dba:	0d52      	lsrs	r2, r2, #21
 8001dbc:	0fc9      	lsrs	r1, r1, #31
 8001dbe:	0d5b      	lsrs	r3, r3, #21
 8001dc0:	0fc0      	lsrs	r0, r0, #31
 8001dc2:	42aa      	cmp	r2, r5
 8001dc4:	d011      	beq.n	8001dea <__ledf2+0x56>
 8001dc6:	42ab      	cmp	r3, r5
 8001dc8:	d014      	beq.n	8001df4 <__ledf2+0x60>
 8001dca:	2a00      	cmp	r2, #0
 8001dcc:	d12f      	bne.n	8001e2e <__ledf2+0x9a>
 8001dce:	433c      	orrs	r4, r7
 8001dd0:	46a3      	mov	fp, r4
 8001dd2:	4265      	negs	r5, r4
 8001dd4:	4165      	adcs	r5, r4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d114      	bne.n	8001e04 <__ledf2+0x70>
 8001dda:	464c      	mov	r4, r9
 8001ddc:	4326      	orrs	r6, r4
 8001dde:	d111      	bne.n	8001e04 <__ledf2+0x70>
 8001de0:	465b      	mov	r3, fp
 8001de2:	2000      	movs	r0, #0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d017      	beq.n	8001e18 <__ledf2+0x84>
 8001de8:	e010      	b.n	8001e0c <__ledf2+0x78>
 8001dea:	003d      	movs	r5, r7
 8001dec:	4325      	orrs	r5, r4
 8001dee:	d112      	bne.n	8001e16 <__ledf2+0x82>
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d11c      	bne.n	8001e2e <__ledf2+0x9a>
 8001df4:	464d      	mov	r5, r9
 8001df6:	432e      	orrs	r6, r5
 8001df8:	d10d      	bne.n	8001e16 <__ledf2+0x82>
 8001dfa:	2a00      	cmp	r2, #0
 8001dfc:	d104      	bne.n	8001e08 <__ledf2+0x74>
 8001dfe:	433c      	orrs	r4, r7
 8001e00:	4265      	negs	r5, r4
 8001e02:	4165      	adcs	r5, r4
 8001e04:	2d00      	cmp	r5, #0
 8001e06:	d10d      	bne.n	8001e24 <__ledf2+0x90>
 8001e08:	4281      	cmp	r1, r0
 8001e0a:	d016      	beq.n	8001e3a <__ledf2+0xa6>
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	3901      	subs	r1, #1
 8001e10:	4008      	ands	r0, r1
 8001e12:	3801      	subs	r0, #1
 8001e14:	e000      	b.n	8001e18 <__ledf2+0x84>
 8001e16:	2002      	movs	r0, #2
 8001e18:	bcf0      	pop	{r4, r5, r6, r7}
 8001e1a:	46bb      	mov	fp, r7
 8001e1c:	46b2      	mov	sl, r6
 8001e1e:	46a9      	mov	r9, r5
 8001e20:	46a0      	mov	r8, r4
 8001e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d1f7      	bne.n	8001e18 <__ledf2+0x84>
 8001e28:	2001      	movs	r0, #1
 8001e2a:	4240      	negs	r0, r0
 8001e2c:	e7f4      	b.n	8001e18 <__ledf2+0x84>
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1ea      	bne.n	8001e08 <__ledf2+0x74>
 8001e32:	464c      	mov	r4, r9
 8001e34:	4326      	orrs	r6, r4
 8001e36:	d1e7      	bne.n	8001e08 <__ledf2+0x74>
 8001e38:	e7e8      	b.n	8001e0c <__ledf2+0x78>
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	dd06      	ble.n	8001e4c <__ledf2+0xb8>
 8001e3e:	4243      	negs	r3, r0
 8001e40:	4158      	adcs	r0, r3
 8001e42:	2302      	movs	r3, #2
 8001e44:	4240      	negs	r0, r0
 8001e46:	4018      	ands	r0, r3
 8001e48:	3801      	subs	r0, #1
 8001e4a:	e7e5      	b.n	8001e18 <__ledf2+0x84>
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dbe9      	blt.n	8001e24 <__ledf2+0x90>
 8001e50:	454f      	cmp	r7, r9
 8001e52:	d8db      	bhi.n	8001e0c <__ledf2+0x78>
 8001e54:	d006      	beq.n	8001e64 <__ledf2+0xd0>
 8001e56:	2000      	movs	r0, #0
 8001e58:	454f      	cmp	r7, r9
 8001e5a:	d2dd      	bcs.n	8001e18 <__ledf2+0x84>
 8001e5c:	2900      	cmp	r1, #0
 8001e5e:	d0e3      	beq.n	8001e28 <__ledf2+0x94>
 8001e60:	0008      	movs	r0, r1
 8001e62:	e7d9      	b.n	8001e18 <__ledf2+0x84>
 8001e64:	45c4      	cmp	ip, r8
 8001e66:	d8d1      	bhi.n	8001e0c <__ledf2+0x78>
 8001e68:	2000      	movs	r0, #0
 8001e6a:	45c4      	cmp	ip, r8
 8001e6c:	d2d4      	bcs.n	8001e18 <__ledf2+0x84>
 8001e6e:	e7f5      	b.n	8001e5c <__ledf2+0xc8>
 8001e70:	000007ff 	.word	0x000007ff

08001e74 <__aeabi_dmul>:
 8001e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e76:	4657      	mov	r7, sl
 8001e78:	464e      	mov	r6, r9
 8001e7a:	4645      	mov	r5, r8
 8001e7c:	46de      	mov	lr, fp
 8001e7e:	b5e0      	push	{r5, r6, r7, lr}
 8001e80:	4698      	mov	r8, r3
 8001e82:	030c      	lsls	r4, r1, #12
 8001e84:	004b      	lsls	r3, r1, #1
 8001e86:	0006      	movs	r6, r0
 8001e88:	4692      	mov	sl, r2
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	0b24      	lsrs	r4, r4, #12
 8001e8e:	0d5b      	lsrs	r3, r3, #21
 8001e90:	0fcf      	lsrs	r7, r1, #31
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d06c      	beq.n	8001f70 <__aeabi_dmul+0xfc>
 8001e96:	4add      	ldr	r2, [pc, #884]	; (800220c <__aeabi_dmul+0x398>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d100      	bne.n	8001e9e <__aeabi_dmul+0x2a>
 8001e9c:	e086      	b.n	8001fac <__aeabi_dmul+0x138>
 8001e9e:	0f42      	lsrs	r2, r0, #29
 8001ea0:	00e4      	lsls	r4, r4, #3
 8001ea2:	4314      	orrs	r4, r2
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	0412      	lsls	r2, r2, #16
 8001ea8:	4314      	orrs	r4, r2
 8001eaa:	4ad9      	ldr	r2, [pc, #868]	; (8002210 <__aeabi_dmul+0x39c>)
 8001eac:	00c5      	lsls	r5, r0, #3
 8001eae:	4694      	mov	ip, r2
 8001eb0:	4463      	add	r3, ip
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	469b      	mov	fp, r3
 8001eba:	4643      	mov	r3, r8
 8001ebc:	4642      	mov	r2, r8
 8001ebe:	031e      	lsls	r6, r3, #12
 8001ec0:	0fd2      	lsrs	r2, r2, #31
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4650      	mov	r0, sl
 8001ec6:	4690      	mov	r8, r2
 8001ec8:	0b36      	lsrs	r6, r6, #12
 8001eca:	0d5b      	lsrs	r3, r3, #21
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dmul+0x5c>
 8001ece:	e078      	b.n	8001fc2 <__aeabi_dmul+0x14e>
 8001ed0:	4ace      	ldr	r2, [pc, #824]	; (800220c <__aeabi_dmul+0x398>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01d      	beq.n	8001f12 <__aeabi_dmul+0x9e>
 8001ed6:	49ce      	ldr	r1, [pc, #824]	; (8002210 <__aeabi_dmul+0x39c>)
 8001ed8:	0f42      	lsrs	r2, r0, #29
 8001eda:	468c      	mov	ip, r1
 8001edc:	9900      	ldr	r1, [sp, #0]
 8001ede:	4463      	add	r3, ip
 8001ee0:	00f6      	lsls	r6, r6, #3
 8001ee2:	468c      	mov	ip, r1
 8001ee4:	4316      	orrs	r6, r2
 8001ee6:	2280      	movs	r2, #128	; 0x80
 8001ee8:	449c      	add	ip, r3
 8001eea:	0412      	lsls	r2, r2, #16
 8001eec:	4663      	mov	r3, ip
 8001eee:	4316      	orrs	r6, r2
 8001ef0:	00c2      	lsls	r2, r0, #3
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	9900      	ldr	r1, [sp, #0]
 8001ef8:	4643      	mov	r3, r8
 8001efa:	3101      	adds	r1, #1
 8001efc:	468c      	mov	ip, r1
 8001efe:	4649      	mov	r1, r9
 8001f00:	407b      	eors	r3, r7
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	290f      	cmp	r1, #15
 8001f06:	d900      	bls.n	8001f0a <__aeabi_dmul+0x96>
 8001f08:	e07e      	b.n	8002008 <__aeabi_dmul+0x194>
 8001f0a:	4bc2      	ldr	r3, [pc, #776]	; (8002214 <__aeabi_dmul+0x3a0>)
 8001f0c:	0089      	lsls	r1, r1, #2
 8001f0e:	5859      	ldr	r1, [r3, r1]
 8001f10:	468f      	mov	pc, r1
 8001f12:	4652      	mov	r2, sl
 8001f14:	9b00      	ldr	r3, [sp, #0]
 8001f16:	4332      	orrs	r2, r6
 8001f18:	d000      	beq.n	8001f1c <__aeabi_dmul+0xa8>
 8001f1a:	e156      	b.n	80021ca <__aeabi_dmul+0x356>
 8001f1c:	49bb      	ldr	r1, [pc, #748]	; (800220c <__aeabi_dmul+0x398>)
 8001f1e:	2600      	movs	r6, #0
 8001f20:	468c      	mov	ip, r1
 8001f22:	4463      	add	r3, ip
 8001f24:	4649      	mov	r1, r9
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2302      	movs	r3, #2
 8001f2a:	4319      	orrs	r1, r3
 8001f2c:	4689      	mov	r9, r1
 8001f2e:	2002      	movs	r0, #2
 8001f30:	e7e1      	b.n	8001ef6 <__aeabi_dmul+0x82>
 8001f32:	4643      	mov	r3, r8
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	0034      	movs	r4, r6
 8001f38:	0015      	movs	r5, r2
 8001f3a:	4683      	mov	fp, r0
 8001f3c:	465b      	mov	r3, fp
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d05e      	beq.n	8002000 <__aeabi_dmul+0x18c>
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dmul+0xd4>
 8001f46:	e1f3      	b.n	8002330 <__aeabi_dmul+0x4bc>
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dmul+0xda>
 8001f4c:	e118      	b.n	8002180 <__aeabi_dmul+0x30c>
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2400      	movs	r4, #0
 8001f52:	2500      	movs	r5, #0
 8001f54:	9b01      	ldr	r3, [sp, #4]
 8001f56:	0512      	lsls	r2, r2, #20
 8001f58:	4322      	orrs	r2, r4
 8001f5a:	07db      	lsls	r3, r3, #31
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	0028      	movs	r0, r5
 8001f60:	0011      	movs	r1, r2
 8001f62:	b007      	add	sp, #28
 8001f64:	bcf0      	pop	{r4, r5, r6, r7}
 8001f66:	46bb      	mov	fp, r7
 8001f68:	46b2      	mov	sl, r6
 8001f6a:	46a9      	mov	r9, r5
 8001f6c:	46a0      	mov	r8, r4
 8001f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f70:	0025      	movs	r5, r4
 8001f72:	4305      	orrs	r5, r0
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dmul+0x104>
 8001f76:	e141      	b.n	80021fc <__aeabi_dmul+0x388>
 8001f78:	2c00      	cmp	r4, #0
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dmul+0x10a>
 8001f7c:	e1ad      	b.n	80022da <__aeabi_dmul+0x466>
 8001f7e:	0020      	movs	r0, r4
 8001f80:	f000 fef0 	bl	8002d64 <__clzsi2>
 8001f84:	0001      	movs	r1, r0
 8001f86:	0002      	movs	r2, r0
 8001f88:	390b      	subs	r1, #11
 8001f8a:	231d      	movs	r3, #29
 8001f8c:	0010      	movs	r0, r2
 8001f8e:	1a5b      	subs	r3, r3, r1
 8001f90:	0031      	movs	r1, r6
 8001f92:	0035      	movs	r5, r6
 8001f94:	3808      	subs	r0, #8
 8001f96:	4084      	lsls	r4, r0
 8001f98:	40d9      	lsrs	r1, r3
 8001f9a:	4085      	lsls	r5, r0
 8001f9c:	430c      	orrs	r4, r1
 8001f9e:	489e      	ldr	r0, [pc, #632]	; (8002218 <__aeabi_dmul+0x3a4>)
 8001fa0:	1a83      	subs	r3, r0, r2
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	4699      	mov	r9, r3
 8001fa8:	469b      	mov	fp, r3
 8001faa:	e786      	b.n	8001eba <__aeabi_dmul+0x46>
 8001fac:	0005      	movs	r5, r0
 8001fae:	4325      	orrs	r5, r4
 8001fb0:	d000      	beq.n	8001fb4 <__aeabi_dmul+0x140>
 8001fb2:	e11c      	b.n	80021ee <__aeabi_dmul+0x37a>
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2302      	movs	r3, #2
 8001fba:	2400      	movs	r4, #0
 8001fbc:	4691      	mov	r9, r2
 8001fbe:	469b      	mov	fp, r3
 8001fc0:	e77b      	b.n	8001eba <__aeabi_dmul+0x46>
 8001fc2:	4652      	mov	r2, sl
 8001fc4:	4332      	orrs	r2, r6
 8001fc6:	d100      	bne.n	8001fca <__aeabi_dmul+0x156>
 8001fc8:	e10a      	b.n	80021e0 <__aeabi_dmul+0x36c>
 8001fca:	2e00      	cmp	r6, #0
 8001fcc:	d100      	bne.n	8001fd0 <__aeabi_dmul+0x15c>
 8001fce:	e176      	b.n	80022be <__aeabi_dmul+0x44a>
 8001fd0:	0030      	movs	r0, r6
 8001fd2:	f000 fec7 	bl	8002d64 <__clzsi2>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	3a0b      	subs	r2, #11
 8001fda:	231d      	movs	r3, #29
 8001fdc:	0001      	movs	r1, r0
 8001fde:	1a9b      	subs	r3, r3, r2
 8001fe0:	4652      	mov	r2, sl
 8001fe2:	3908      	subs	r1, #8
 8001fe4:	40da      	lsrs	r2, r3
 8001fe6:	408e      	lsls	r6, r1
 8001fe8:	4316      	orrs	r6, r2
 8001fea:	4652      	mov	r2, sl
 8001fec:	408a      	lsls	r2, r1
 8001fee:	9b00      	ldr	r3, [sp, #0]
 8001ff0:	4989      	ldr	r1, [pc, #548]	; (8002218 <__aeabi_dmul+0x3a4>)
 8001ff2:	1a18      	subs	r0, r3, r0
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	468c      	mov	ip, r1
 8001ff8:	4463      	add	r3, ip
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	e77a      	b.n	8001ef6 <__aeabi_dmul+0x82>
 8002000:	2400      	movs	r4, #0
 8002002:	2500      	movs	r5, #0
 8002004:	4a81      	ldr	r2, [pc, #516]	; (800220c <__aeabi_dmul+0x398>)
 8002006:	e7a5      	b.n	8001f54 <__aeabi_dmul+0xe0>
 8002008:	0c2f      	lsrs	r7, r5, #16
 800200a:	042d      	lsls	r5, r5, #16
 800200c:	0c2d      	lsrs	r5, r5, #16
 800200e:	002b      	movs	r3, r5
 8002010:	0c11      	lsrs	r1, r2, #16
 8002012:	0412      	lsls	r2, r2, #16
 8002014:	0c12      	lsrs	r2, r2, #16
 8002016:	4353      	muls	r3, r2
 8002018:	4698      	mov	r8, r3
 800201a:	0013      	movs	r3, r2
 800201c:	0028      	movs	r0, r5
 800201e:	437b      	muls	r3, r7
 8002020:	4699      	mov	r9, r3
 8002022:	4348      	muls	r0, r1
 8002024:	4448      	add	r0, r9
 8002026:	4683      	mov	fp, r0
 8002028:	4640      	mov	r0, r8
 800202a:	000b      	movs	r3, r1
 800202c:	0c00      	lsrs	r0, r0, #16
 800202e:	4682      	mov	sl, r0
 8002030:	4658      	mov	r0, fp
 8002032:	437b      	muls	r3, r7
 8002034:	4450      	add	r0, sl
 8002036:	9302      	str	r3, [sp, #8]
 8002038:	4581      	cmp	r9, r0
 800203a:	d906      	bls.n	800204a <__aeabi_dmul+0x1d6>
 800203c:	469a      	mov	sl, r3
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	025b      	lsls	r3, r3, #9
 8002042:	4699      	mov	r9, r3
 8002044:	44ca      	add	sl, r9
 8002046:	4653      	mov	r3, sl
 8002048:	9302      	str	r3, [sp, #8]
 800204a:	0c03      	lsrs	r3, r0, #16
 800204c:	469b      	mov	fp, r3
 800204e:	4643      	mov	r3, r8
 8002050:	041b      	lsls	r3, r3, #16
 8002052:	0400      	lsls	r0, r0, #16
 8002054:	0c1b      	lsrs	r3, r3, #16
 8002056:	4698      	mov	r8, r3
 8002058:	0003      	movs	r3, r0
 800205a:	4443      	add	r3, r8
 800205c:	9304      	str	r3, [sp, #16]
 800205e:	0c33      	lsrs	r3, r6, #16
 8002060:	4699      	mov	r9, r3
 8002062:	002b      	movs	r3, r5
 8002064:	0436      	lsls	r6, r6, #16
 8002066:	0c36      	lsrs	r6, r6, #16
 8002068:	4373      	muls	r3, r6
 800206a:	4698      	mov	r8, r3
 800206c:	0033      	movs	r3, r6
 800206e:	437b      	muls	r3, r7
 8002070:	469a      	mov	sl, r3
 8002072:	464b      	mov	r3, r9
 8002074:	435d      	muls	r5, r3
 8002076:	435f      	muls	r7, r3
 8002078:	4643      	mov	r3, r8
 800207a:	4455      	add	r5, sl
 800207c:	0c18      	lsrs	r0, r3, #16
 800207e:	1940      	adds	r0, r0, r5
 8002080:	4582      	cmp	sl, r0
 8002082:	d903      	bls.n	800208c <__aeabi_dmul+0x218>
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	025b      	lsls	r3, r3, #9
 8002088:	469a      	mov	sl, r3
 800208a:	4457      	add	r7, sl
 800208c:	0c05      	lsrs	r5, r0, #16
 800208e:	19eb      	adds	r3, r5, r7
 8002090:	9305      	str	r3, [sp, #20]
 8002092:	4643      	mov	r3, r8
 8002094:	041d      	lsls	r5, r3, #16
 8002096:	0c2d      	lsrs	r5, r5, #16
 8002098:	0400      	lsls	r0, r0, #16
 800209a:	1940      	adds	r0, r0, r5
 800209c:	0c25      	lsrs	r5, r4, #16
 800209e:	0424      	lsls	r4, r4, #16
 80020a0:	0c24      	lsrs	r4, r4, #16
 80020a2:	0027      	movs	r7, r4
 80020a4:	4357      	muls	r7, r2
 80020a6:	436a      	muls	r2, r5
 80020a8:	4690      	mov	r8, r2
 80020aa:	002a      	movs	r2, r5
 80020ac:	0c3b      	lsrs	r3, r7, #16
 80020ae:	469a      	mov	sl, r3
 80020b0:	434a      	muls	r2, r1
 80020b2:	4361      	muls	r1, r4
 80020b4:	4441      	add	r1, r8
 80020b6:	4451      	add	r1, sl
 80020b8:	4483      	add	fp, r0
 80020ba:	4588      	cmp	r8, r1
 80020bc:	d903      	bls.n	80020c6 <__aeabi_dmul+0x252>
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	025b      	lsls	r3, r3, #9
 80020c2:	4698      	mov	r8, r3
 80020c4:	4442      	add	r2, r8
 80020c6:	043f      	lsls	r7, r7, #16
 80020c8:	0c0b      	lsrs	r3, r1, #16
 80020ca:	0c3f      	lsrs	r7, r7, #16
 80020cc:	0409      	lsls	r1, r1, #16
 80020ce:	19c9      	adds	r1, r1, r7
 80020d0:	0027      	movs	r7, r4
 80020d2:	4698      	mov	r8, r3
 80020d4:	464b      	mov	r3, r9
 80020d6:	4377      	muls	r7, r6
 80020d8:	435c      	muls	r4, r3
 80020da:	436e      	muls	r6, r5
 80020dc:	435d      	muls	r5, r3
 80020de:	0c3b      	lsrs	r3, r7, #16
 80020e0:	4699      	mov	r9, r3
 80020e2:	19a4      	adds	r4, r4, r6
 80020e4:	444c      	add	r4, r9
 80020e6:	4442      	add	r2, r8
 80020e8:	9503      	str	r5, [sp, #12]
 80020ea:	42a6      	cmp	r6, r4
 80020ec:	d904      	bls.n	80020f8 <__aeabi_dmul+0x284>
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	025b      	lsls	r3, r3, #9
 80020f2:	4698      	mov	r8, r3
 80020f4:	4445      	add	r5, r8
 80020f6:	9503      	str	r5, [sp, #12]
 80020f8:	9b02      	ldr	r3, [sp, #8]
 80020fa:	043f      	lsls	r7, r7, #16
 80020fc:	445b      	add	r3, fp
 80020fe:	001e      	movs	r6, r3
 8002100:	4283      	cmp	r3, r0
 8002102:	4180      	sbcs	r0, r0
 8002104:	0423      	lsls	r3, r4, #16
 8002106:	4698      	mov	r8, r3
 8002108:	9b05      	ldr	r3, [sp, #20]
 800210a:	0c3f      	lsrs	r7, r7, #16
 800210c:	4447      	add	r7, r8
 800210e:	4698      	mov	r8, r3
 8002110:	1876      	adds	r6, r6, r1
 8002112:	428e      	cmp	r6, r1
 8002114:	4189      	sbcs	r1, r1
 8002116:	4447      	add	r7, r8
 8002118:	4240      	negs	r0, r0
 800211a:	183d      	adds	r5, r7, r0
 800211c:	46a8      	mov	r8, r5
 800211e:	4693      	mov	fp, r2
 8002120:	4249      	negs	r1, r1
 8002122:	468a      	mov	sl, r1
 8002124:	44c3      	add	fp, r8
 8002126:	429f      	cmp	r7, r3
 8002128:	41bf      	sbcs	r7, r7
 800212a:	4580      	cmp	r8, r0
 800212c:	4180      	sbcs	r0, r0
 800212e:	9b03      	ldr	r3, [sp, #12]
 8002130:	44da      	add	sl, fp
 8002132:	4698      	mov	r8, r3
 8002134:	4653      	mov	r3, sl
 8002136:	4240      	negs	r0, r0
 8002138:	427f      	negs	r7, r7
 800213a:	4307      	orrs	r7, r0
 800213c:	0c24      	lsrs	r4, r4, #16
 800213e:	4593      	cmp	fp, r2
 8002140:	4192      	sbcs	r2, r2
 8002142:	458a      	cmp	sl, r1
 8002144:	4189      	sbcs	r1, r1
 8002146:	193f      	adds	r7, r7, r4
 8002148:	0ddc      	lsrs	r4, r3, #23
 800214a:	9b04      	ldr	r3, [sp, #16]
 800214c:	0275      	lsls	r5, r6, #9
 800214e:	431d      	orrs	r5, r3
 8002150:	1e68      	subs	r0, r5, #1
 8002152:	4185      	sbcs	r5, r0
 8002154:	4653      	mov	r3, sl
 8002156:	4252      	negs	r2, r2
 8002158:	4249      	negs	r1, r1
 800215a:	430a      	orrs	r2, r1
 800215c:	18bf      	adds	r7, r7, r2
 800215e:	4447      	add	r7, r8
 8002160:	0df6      	lsrs	r6, r6, #23
 8002162:	027f      	lsls	r7, r7, #9
 8002164:	4335      	orrs	r5, r6
 8002166:	025a      	lsls	r2, r3, #9
 8002168:	433c      	orrs	r4, r7
 800216a:	4315      	orrs	r5, r2
 800216c:	01fb      	lsls	r3, r7, #7
 800216e:	d400      	bmi.n	8002172 <__aeabi_dmul+0x2fe>
 8002170:	e0c1      	b.n	80022f6 <__aeabi_dmul+0x482>
 8002172:	2101      	movs	r1, #1
 8002174:	086a      	lsrs	r2, r5, #1
 8002176:	400d      	ands	r5, r1
 8002178:	4315      	orrs	r5, r2
 800217a:	07e2      	lsls	r2, r4, #31
 800217c:	4315      	orrs	r5, r2
 800217e:	0864      	lsrs	r4, r4, #1
 8002180:	4926      	ldr	r1, [pc, #152]	; (800221c <__aeabi_dmul+0x3a8>)
 8002182:	4461      	add	r1, ip
 8002184:	2900      	cmp	r1, #0
 8002186:	dd56      	ble.n	8002236 <__aeabi_dmul+0x3c2>
 8002188:	076b      	lsls	r3, r5, #29
 800218a:	d009      	beq.n	80021a0 <__aeabi_dmul+0x32c>
 800218c:	220f      	movs	r2, #15
 800218e:	402a      	ands	r2, r5
 8002190:	2a04      	cmp	r2, #4
 8002192:	d005      	beq.n	80021a0 <__aeabi_dmul+0x32c>
 8002194:	1d2a      	adds	r2, r5, #4
 8002196:	42aa      	cmp	r2, r5
 8002198:	41ad      	sbcs	r5, r5
 800219a:	426d      	negs	r5, r5
 800219c:	1964      	adds	r4, r4, r5
 800219e:	0015      	movs	r5, r2
 80021a0:	01e3      	lsls	r3, r4, #7
 80021a2:	d504      	bpl.n	80021ae <__aeabi_dmul+0x33a>
 80021a4:	2180      	movs	r1, #128	; 0x80
 80021a6:	4a1e      	ldr	r2, [pc, #120]	; (8002220 <__aeabi_dmul+0x3ac>)
 80021a8:	00c9      	lsls	r1, r1, #3
 80021aa:	4014      	ands	r4, r2
 80021ac:	4461      	add	r1, ip
 80021ae:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <__aeabi_dmul+0x3b0>)
 80021b0:	4291      	cmp	r1, r2
 80021b2:	dd00      	ble.n	80021b6 <__aeabi_dmul+0x342>
 80021b4:	e724      	b.n	8002000 <__aeabi_dmul+0x18c>
 80021b6:	0762      	lsls	r2, r4, #29
 80021b8:	08ed      	lsrs	r5, r5, #3
 80021ba:	0264      	lsls	r4, r4, #9
 80021bc:	0549      	lsls	r1, r1, #21
 80021be:	4315      	orrs	r5, r2
 80021c0:	0b24      	lsrs	r4, r4, #12
 80021c2:	0d4a      	lsrs	r2, r1, #21
 80021c4:	e6c6      	b.n	8001f54 <__aeabi_dmul+0xe0>
 80021c6:	9701      	str	r7, [sp, #4]
 80021c8:	e6b8      	b.n	8001f3c <__aeabi_dmul+0xc8>
 80021ca:	4a10      	ldr	r2, [pc, #64]	; (800220c <__aeabi_dmul+0x398>)
 80021cc:	2003      	movs	r0, #3
 80021ce:	4694      	mov	ip, r2
 80021d0:	4463      	add	r3, ip
 80021d2:	464a      	mov	r2, r9
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2303      	movs	r3, #3
 80021d8:	431a      	orrs	r2, r3
 80021da:	4691      	mov	r9, r2
 80021dc:	4652      	mov	r2, sl
 80021de:	e68a      	b.n	8001ef6 <__aeabi_dmul+0x82>
 80021e0:	4649      	mov	r1, r9
 80021e2:	2301      	movs	r3, #1
 80021e4:	4319      	orrs	r1, r3
 80021e6:	4689      	mov	r9, r1
 80021e8:	2600      	movs	r6, #0
 80021ea:	2001      	movs	r0, #1
 80021ec:	e683      	b.n	8001ef6 <__aeabi_dmul+0x82>
 80021ee:	220c      	movs	r2, #12
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2303      	movs	r3, #3
 80021f4:	0005      	movs	r5, r0
 80021f6:	4691      	mov	r9, r2
 80021f8:	469b      	mov	fp, r3
 80021fa:	e65e      	b.n	8001eba <__aeabi_dmul+0x46>
 80021fc:	2304      	movs	r3, #4
 80021fe:	4699      	mov	r9, r3
 8002200:	2300      	movs	r3, #0
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	2400      	movs	r4, #0
 8002208:	469b      	mov	fp, r3
 800220a:	e656      	b.n	8001eba <__aeabi_dmul+0x46>
 800220c:	000007ff 	.word	0x000007ff
 8002210:	fffffc01 	.word	0xfffffc01
 8002214:	0800c4f4 	.word	0x0800c4f4
 8002218:	fffffc0d 	.word	0xfffffc0d
 800221c:	000003ff 	.word	0x000003ff
 8002220:	feffffff 	.word	0xfeffffff
 8002224:	000007fe 	.word	0x000007fe
 8002228:	2300      	movs	r3, #0
 800222a:	2480      	movs	r4, #128	; 0x80
 800222c:	2500      	movs	r5, #0
 800222e:	4a44      	ldr	r2, [pc, #272]	; (8002340 <__aeabi_dmul+0x4cc>)
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	0324      	lsls	r4, r4, #12
 8002234:	e68e      	b.n	8001f54 <__aeabi_dmul+0xe0>
 8002236:	2001      	movs	r0, #1
 8002238:	1a40      	subs	r0, r0, r1
 800223a:	2838      	cmp	r0, #56	; 0x38
 800223c:	dd00      	ble.n	8002240 <__aeabi_dmul+0x3cc>
 800223e:	e686      	b.n	8001f4e <__aeabi_dmul+0xda>
 8002240:	281f      	cmp	r0, #31
 8002242:	dd5b      	ble.n	80022fc <__aeabi_dmul+0x488>
 8002244:	221f      	movs	r2, #31
 8002246:	0023      	movs	r3, r4
 8002248:	4252      	negs	r2, r2
 800224a:	1a51      	subs	r1, r2, r1
 800224c:	40cb      	lsrs	r3, r1
 800224e:	0019      	movs	r1, r3
 8002250:	2820      	cmp	r0, #32
 8002252:	d003      	beq.n	800225c <__aeabi_dmul+0x3e8>
 8002254:	4a3b      	ldr	r2, [pc, #236]	; (8002344 <__aeabi_dmul+0x4d0>)
 8002256:	4462      	add	r2, ip
 8002258:	4094      	lsls	r4, r2
 800225a:	4325      	orrs	r5, r4
 800225c:	1e6a      	subs	r2, r5, #1
 800225e:	4195      	sbcs	r5, r2
 8002260:	002a      	movs	r2, r5
 8002262:	430a      	orrs	r2, r1
 8002264:	2107      	movs	r1, #7
 8002266:	000d      	movs	r5, r1
 8002268:	2400      	movs	r4, #0
 800226a:	4015      	ands	r5, r2
 800226c:	4211      	tst	r1, r2
 800226e:	d05b      	beq.n	8002328 <__aeabi_dmul+0x4b4>
 8002270:	210f      	movs	r1, #15
 8002272:	2400      	movs	r4, #0
 8002274:	4011      	ands	r1, r2
 8002276:	2904      	cmp	r1, #4
 8002278:	d053      	beq.n	8002322 <__aeabi_dmul+0x4ae>
 800227a:	1d11      	adds	r1, r2, #4
 800227c:	4291      	cmp	r1, r2
 800227e:	4192      	sbcs	r2, r2
 8002280:	4252      	negs	r2, r2
 8002282:	18a4      	adds	r4, r4, r2
 8002284:	000a      	movs	r2, r1
 8002286:	0223      	lsls	r3, r4, #8
 8002288:	d54b      	bpl.n	8002322 <__aeabi_dmul+0x4ae>
 800228a:	2201      	movs	r2, #1
 800228c:	2400      	movs	r4, #0
 800228e:	2500      	movs	r5, #0
 8002290:	e660      	b.n	8001f54 <__aeabi_dmul+0xe0>
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	031b      	lsls	r3, r3, #12
 8002296:	421c      	tst	r4, r3
 8002298:	d009      	beq.n	80022ae <__aeabi_dmul+0x43a>
 800229a:	421e      	tst	r6, r3
 800229c:	d107      	bne.n	80022ae <__aeabi_dmul+0x43a>
 800229e:	4333      	orrs	r3, r6
 80022a0:	031c      	lsls	r4, r3, #12
 80022a2:	4643      	mov	r3, r8
 80022a4:	0015      	movs	r5, r2
 80022a6:	0b24      	lsrs	r4, r4, #12
 80022a8:	4a25      	ldr	r2, [pc, #148]	; (8002340 <__aeabi_dmul+0x4cc>)
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	e652      	b.n	8001f54 <__aeabi_dmul+0xe0>
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	0312      	lsls	r2, r2, #12
 80022b2:	4314      	orrs	r4, r2
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	4a22      	ldr	r2, [pc, #136]	; (8002340 <__aeabi_dmul+0x4cc>)
 80022b8:	0b24      	lsrs	r4, r4, #12
 80022ba:	9701      	str	r7, [sp, #4]
 80022bc:	e64a      	b.n	8001f54 <__aeabi_dmul+0xe0>
 80022be:	f000 fd51 	bl	8002d64 <__clzsi2>
 80022c2:	0003      	movs	r3, r0
 80022c4:	001a      	movs	r2, r3
 80022c6:	3215      	adds	r2, #21
 80022c8:	3020      	adds	r0, #32
 80022ca:	2a1c      	cmp	r2, #28
 80022cc:	dc00      	bgt.n	80022d0 <__aeabi_dmul+0x45c>
 80022ce:	e684      	b.n	8001fda <__aeabi_dmul+0x166>
 80022d0:	4656      	mov	r6, sl
 80022d2:	3b08      	subs	r3, #8
 80022d4:	2200      	movs	r2, #0
 80022d6:	409e      	lsls	r6, r3
 80022d8:	e689      	b.n	8001fee <__aeabi_dmul+0x17a>
 80022da:	f000 fd43 	bl	8002d64 <__clzsi2>
 80022de:	0001      	movs	r1, r0
 80022e0:	0002      	movs	r2, r0
 80022e2:	3115      	adds	r1, #21
 80022e4:	3220      	adds	r2, #32
 80022e6:	291c      	cmp	r1, #28
 80022e8:	dc00      	bgt.n	80022ec <__aeabi_dmul+0x478>
 80022ea:	e64e      	b.n	8001f8a <__aeabi_dmul+0x116>
 80022ec:	0034      	movs	r4, r6
 80022ee:	3808      	subs	r0, #8
 80022f0:	2500      	movs	r5, #0
 80022f2:	4084      	lsls	r4, r0
 80022f4:	e653      	b.n	8001f9e <__aeabi_dmul+0x12a>
 80022f6:	9b00      	ldr	r3, [sp, #0]
 80022f8:	469c      	mov	ip, r3
 80022fa:	e741      	b.n	8002180 <__aeabi_dmul+0x30c>
 80022fc:	4912      	ldr	r1, [pc, #72]	; (8002348 <__aeabi_dmul+0x4d4>)
 80022fe:	0022      	movs	r2, r4
 8002300:	4461      	add	r1, ip
 8002302:	002e      	movs	r6, r5
 8002304:	408d      	lsls	r5, r1
 8002306:	408a      	lsls	r2, r1
 8002308:	40c6      	lsrs	r6, r0
 800230a:	1e69      	subs	r1, r5, #1
 800230c:	418d      	sbcs	r5, r1
 800230e:	4332      	orrs	r2, r6
 8002310:	432a      	orrs	r2, r5
 8002312:	40c4      	lsrs	r4, r0
 8002314:	0753      	lsls	r3, r2, #29
 8002316:	d0b6      	beq.n	8002286 <__aeabi_dmul+0x412>
 8002318:	210f      	movs	r1, #15
 800231a:	4011      	ands	r1, r2
 800231c:	2904      	cmp	r1, #4
 800231e:	d1ac      	bne.n	800227a <__aeabi_dmul+0x406>
 8002320:	e7b1      	b.n	8002286 <__aeabi_dmul+0x412>
 8002322:	0765      	lsls	r5, r4, #29
 8002324:	0264      	lsls	r4, r4, #9
 8002326:	0b24      	lsrs	r4, r4, #12
 8002328:	08d2      	lsrs	r2, r2, #3
 800232a:	4315      	orrs	r5, r2
 800232c:	2200      	movs	r2, #0
 800232e:	e611      	b.n	8001f54 <__aeabi_dmul+0xe0>
 8002330:	2280      	movs	r2, #128	; 0x80
 8002332:	0312      	lsls	r2, r2, #12
 8002334:	4314      	orrs	r4, r2
 8002336:	0324      	lsls	r4, r4, #12
 8002338:	4a01      	ldr	r2, [pc, #4]	; (8002340 <__aeabi_dmul+0x4cc>)
 800233a:	0b24      	lsrs	r4, r4, #12
 800233c:	e60a      	b.n	8001f54 <__aeabi_dmul+0xe0>
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	000007ff 	.word	0x000007ff
 8002344:	0000043e 	.word	0x0000043e
 8002348:	0000041e 	.word	0x0000041e

0800234c <__aeabi_dsub>:
 800234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234e:	4657      	mov	r7, sl
 8002350:	464e      	mov	r6, r9
 8002352:	4645      	mov	r5, r8
 8002354:	46de      	mov	lr, fp
 8002356:	0004      	movs	r4, r0
 8002358:	b5e0      	push	{r5, r6, r7, lr}
 800235a:	001f      	movs	r7, r3
 800235c:	0010      	movs	r0, r2
 800235e:	030b      	lsls	r3, r1, #12
 8002360:	0f62      	lsrs	r2, r4, #29
 8002362:	004e      	lsls	r6, r1, #1
 8002364:	0fcd      	lsrs	r5, r1, #31
 8002366:	0a5b      	lsrs	r3, r3, #9
 8002368:	0339      	lsls	r1, r7, #12
 800236a:	4313      	orrs	r3, r2
 800236c:	0a49      	lsrs	r1, r1, #9
 800236e:	00e2      	lsls	r2, r4, #3
 8002370:	0f44      	lsrs	r4, r0, #29
 8002372:	4321      	orrs	r1, r4
 8002374:	4cc2      	ldr	r4, [pc, #776]	; (8002680 <__aeabi_dsub+0x334>)
 8002376:	4691      	mov	r9, r2
 8002378:	4692      	mov	sl, r2
 800237a:	00c0      	lsls	r0, r0, #3
 800237c:	007a      	lsls	r2, r7, #1
 800237e:	4680      	mov	r8, r0
 8002380:	0d76      	lsrs	r6, r6, #21
 8002382:	0d52      	lsrs	r2, r2, #21
 8002384:	0fff      	lsrs	r7, r7, #31
 8002386:	42a2      	cmp	r2, r4
 8002388:	d100      	bne.n	800238c <__aeabi_dsub+0x40>
 800238a:	e0b4      	b.n	80024f6 <__aeabi_dsub+0x1aa>
 800238c:	2401      	movs	r4, #1
 800238e:	4067      	eors	r7, r4
 8002390:	46bb      	mov	fp, r7
 8002392:	42bd      	cmp	r5, r7
 8002394:	d100      	bne.n	8002398 <__aeabi_dsub+0x4c>
 8002396:	e088      	b.n	80024aa <__aeabi_dsub+0x15e>
 8002398:	1ab4      	subs	r4, r6, r2
 800239a:	46a4      	mov	ip, r4
 800239c:	2c00      	cmp	r4, #0
 800239e:	dc00      	bgt.n	80023a2 <__aeabi_dsub+0x56>
 80023a0:	e0b2      	b.n	8002508 <__aeabi_dsub+0x1bc>
 80023a2:	2a00      	cmp	r2, #0
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x5c>
 80023a6:	e0c5      	b.n	8002534 <__aeabi_dsub+0x1e8>
 80023a8:	4ab5      	ldr	r2, [pc, #724]	; (8002680 <__aeabi_dsub+0x334>)
 80023aa:	4296      	cmp	r6, r2
 80023ac:	d100      	bne.n	80023b0 <__aeabi_dsub+0x64>
 80023ae:	e28b      	b.n	80028c8 <__aeabi_dsub+0x57c>
 80023b0:	2280      	movs	r2, #128	; 0x80
 80023b2:	0412      	lsls	r2, r2, #16
 80023b4:	4311      	orrs	r1, r2
 80023b6:	4662      	mov	r2, ip
 80023b8:	2a38      	cmp	r2, #56	; 0x38
 80023ba:	dd00      	ble.n	80023be <__aeabi_dsub+0x72>
 80023bc:	e1a1      	b.n	8002702 <__aeabi_dsub+0x3b6>
 80023be:	2a1f      	cmp	r2, #31
 80023c0:	dd00      	ble.n	80023c4 <__aeabi_dsub+0x78>
 80023c2:	e216      	b.n	80027f2 <__aeabi_dsub+0x4a6>
 80023c4:	2720      	movs	r7, #32
 80023c6:	000c      	movs	r4, r1
 80023c8:	1abf      	subs	r7, r7, r2
 80023ca:	40bc      	lsls	r4, r7
 80023cc:	0002      	movs	r2, r0
 80023ce:	46a0      	mov	r8, r4
 80023d0:	4664      	mov	r4, ip
 80023d2:	40b8      	lsls	r0, r7
 80023d4:	40e2      	lsrs	r2, r4
 80023d6:	4644      	mov	r4, r8
 80023d8:	4314      	orrs	r4, r2
 80023da:	0002      	movs	r2, r0
 80023dc:	1e50      	subs	r0, r2, #1
 80023de:	4182      	sbcs	r2, r0
 80023e0:	4660      	mov	r0, ip
 80023e2:	40c1      	lsrs	r1, r0
 80023e4:	4322      	orrs	r2, r4
 80023e6:	1a5b      	subs	r3, r3, r1
 80023e8:	4649      	mov	r1, r9
 80023ea:	1a8c      	subs	r4, r1, r2
 80023ec:	45a1      	cmp	r9, r4
 80023ee:	4192      	sbcs	r2, r2
 80023f0:	4252      	negs	r2, r2
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	4698      	mov	r8, r3
 80023f6:	4643      	mov	r3, r8
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	d400      	bmi.n	80023fe <__aeabi_dsub+0xb2>
 80023fc:	e117      	b.n	800262e <__aeabi_dsub+0x2e2>
 80023fe:	4643      	mov	r3, r8
 8002400:	025b      	lsls	r3, r3, #9
 8002402:	0a5b      	lsrs	r3, r3, #9
 8002404:	4698      	mov	r8, r3
 8002406:	4643      	mov	r3, r8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d100      	bne.n	800240e <__aeabi_dsub+0xc2>
 800240c:	e16c      	b.n	80026e8 <__aeabi_dsub+0x39c>
 800240e:	4640      	mov	r0, r8
 8002410:	f000 fca8 	bl	8002d64 <__clzsi2>
 8002414:	0002      	movs	r2, r0
 8002416:	3a08      	subs	r2, #8
 8002418:	2120      	movs	r1, #32
 800241a:	0020      	movs	r0, r4
 800241c:	4643      	mov	r3, r8
 800241e:	1a89      	subs	r1, r1, r2
 8002420:	4093      	lsls	r3, r2
 8002422:	40c8      	lsrs	r0, r1
 8002424:	4094      	lsls	r4, r2
 8002426:	4303      	orrs	r3, r0
 8002428:	4296      	cmp	r6, r2
 800242a:	dd00      	ble.n	800242e <__aeabi_dsub+0xe2>
 800242c:	e157      	b.n	80026de <__aeabi_dsub+0x392>
 800242e:	1b96      	subs	r6, r2, r6
 8002430:	1c71      	adds	r1, r6, #1
 8002432:	291f      	cmp	r1, #31
 8002434:	dd00      	ble.n	8002438 <__aeabi_dsub+0xec>
 8002436:	e1cb      	b.n	80027d0 <__aeabi_dsub+0x484>
 8002438:	2220      	movs	r2, #32
 800243a:	0018      	movs	r0, r3
 800243c:	0026      	movs	r6, r4
 800243e:	1a52      	subs	r2, r2, r1
 8002440:	4094      	lsls	r4, r2
 8002442:	4090      	lsls	r0, r2
 8002444:	40ce      	lsrs	r6, r1
 8002446:	40cb      	lsrs	r3, r1
 8002448:	1e62      	subs	r2, r4, #1
 800244a:	4194      	sbcs	r4, r2
 800244c:	4330      	orrs	r0, r6
 800244e:	4698      	mov	r8, r3
 8002450:	2600      	movs	r6, #0
 8002452:	4304      	orrs	r4, r0
 8002454:	0763      	lsls	r3, r4, #29
 8002456:	d009      	beq.n	800246c <__aeabi_dsub+0x120>
 8002458:	230f      	movs	r3, #15
 800245a:	4023      	ands	r3, r4
 800245c:	2b04      	cmp	r3, #4
 800245e:	d005      	beq.n	800246c <__aeabi_dsub+0x120>
 8002460:	1d23      	adds	r3, r4, #4
 8002462:	42a3      	cmp	r3, r4
 8002464:	41a4      	sbcs	r4, r4
 8002466:	4264      	negs	r4, r4
 8002468:	44a0      	add	r8, r4
 800246a:	001c      	movs	r4, r3
 800246c:	4643      	mov	r3, r8
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	d400      	bmi.n	8002474 <__aeabi_dsub+0x128>
 8002472:	e0df      	b.n	8002634 <__aeabi_dsub+0x2e8>
 8002474:	4b82      	ldr	r3, [pc, #520]	; (8002680 <__aeabi_dsub+0x334>)
 8002476:	3601      	adds	r6, #1
 8002478:	429e      	cmp	r6, r3
 800247a:	d100      	bne.n	800247e <__aeabi_dsub+0x132>
 800247c:	e0fb      	b.n	8002676 <__aeabi_dsub+0x32a>
 800247e:	4642      	mov	r2, r8
 8002480:	4b80      	ldr	r3, [pc, #512]	; (8002684 <__aeabi_dsub+0x338>)
 8002482:	08e4      	lsrs	r4, r4, #3
 8002484:	401a      	ands	r2, r3
 8002486:	0013      	movs	r3, r2
 8002488:	0571      	lsls	r1, r6, #21
 800248a:	0752      	lsls	r2, r2, #29
 800248c:	025b      	lsls	r3, r3, #9
 800248e:	4322      	orrs	r2, r4
 8002490:	0b1b      	lsrs	r3, r3, #12
 8002492:	0d49      	lsrs	r1, r1, #21
 8002494:	0509      	lsls	r1, r1, #20
 8002496:	07ed      	lsls	r5, r5, #31
 8002498:	4319      	orrs	r1, r3
 800249a:	4329      	orrs	r1, r5
 800249c:	0010      	movs	r0, r2
 800249e:	bcf0      	pop	{r4, r5, r6, r7}
 80024a0:	46bb      	mov	fp, r7
 80024a2:	46b2      	mov	sl, r6
 80024a4:	46a9      	mov	r9, r5
 80024a6:	46a0      	mov	r8, r4
 80024a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024aa:	1ab4      	subs	r4, r6, r2
 80024ac:	46a4      	mov	ip, r4
 80024ae:	2c00      	cmp	r4, #0
 80024b0:	dd58      	ble.n	8002564 <__aeabi_dsub+0x218>
 80024b2:	2a00      	cmp	r2, #0
 80024b4:	d100      	bne.n	80024b8 <__aeabi_dsub+0x16c>
 80024b6:	e09e      	b.n	80025f6 <__aeabi_dsub+0x2aa>
 80024b8:	4a71      	ldr	r2, [pc, #452]	; (8002680 <__aeabi_dsub+0x334>)
 80024ba:	4296      	cmp	r6, r2
 80024bc:	d100      	bne.n	80024c0 <__aeabi_dsub+0x174>
 80024be:	e13b      	b.n	8002738 <__aeabi_dsub+0x3ec>
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	0412      	lsls	r2, r2, #16
 80024c4:	4311      	orrs	r1, r2
 80024c6:	4662      	mov	r2, ip
 80024c8:	2a38      	cmp	r2, #56	; 0x38
 80024ca:	dd00      	ble.n	80024ce <__aeabi_dsub+0x182>
 80024cc:	e0c1      	b.n	8002652 <__aeabi_dsub+0x306>
 80024ce:	2a1f      	cmp	r2, #31
 80024d0:	dc00      	bgt.n	80024d4 <__aeabi_dsub+0x188>
 80024d2:	e1bb      	b.n	800284c <__aeabi_dsub+0x500>
 80024d4:	000c      	movs	r4, r1
 80024d6:	3a20      	subs	r2, #32
 80024d8:	40d4      	lsrs	r4, r2
 80024da:	0022      	movs	r2, r4
 80024dc:	4664      	mov	r4, ip
 80024de:	2c20      	cmp	r4, #32
 80024e0:	d004      	beq.n	80024ec <__aeabi_dsub+0x1a0>
 80024e2:	2740      	movs	r7, #64	; 0x40
 80024e4:	1b3f      	subs	r7, r7, r4
 80024e6:	40b9      	lsls	r1, r7
 80024e8:	4308      	orrs	r0, r1
 80024ea:	4680      	mov	r8, r0
 80024ec:	4644      	mov	r4, r8
 80024ee:	1e61      	subs	r1, r4, #1
 80024f0:	418c      	sbcs	r4, r1
 80024f2:	4314      	orrs	r4, r2
 80024f4:	e0b1      	b.n	800265a <__aeabi_dsub+0x30e>
 80024f6:	000c      	movs	r4, r1
 80024f8:	4304      	orrs	r4, r0
 80024fa:	d02a      	beq.n	8002552 <__aeabi_dsub+0x206>
 80024fc:	46bb      	mov	fp, r7
 80024fe:	42bd      	cmp	r5, r7
 8002500:	d02d      	beq.n	800255e <__aeabi_dsub+0x212>
 8002502:	4c61      	ldr	r4, [pc, #388]	; (8002688 <__aeabi_dsub+0x33c>)
 8002504:	46a4      	mov	ip, r4
 8002506:	44b4      	add	ip, r6
 8002508:	4664      	mov	r4, ip
 800250a:	2c00      	cmp	r4, #0
 800250c:	d05c      	beq.n	80025c8 <__aeabi_dsub+0x27c>
 800250e:	1b94      	subs	r4, r2, r6
 8002510:	46a4      	mov	ip, r4
 8002512:	2e00      	cmp	r6, #0
 8002514:	d000      	beq.n	8002518 <__aeabi_dsub+0x1cc>
 8002516:	e115      	b.n	8002744 <__aeabi_dsub+0x3f8>
 8002518:	464d      	mov	r5, r9
 800251a:	431d      	orrs	r5, r3
 800251c:	d100      	bne.n	8002520 <__aeabi_dsub+0x1d4>
 800251e:	e1c3      	b.n	80028a8 <__aeabi_dsub+0x55c>
 8002520:	1e65      	subs	r5, r4, #1
 8002522:	2c01      	cmp	r4, #1
 8002524:	d100      	bne.n	8002528 <__aeabi_dsub+0x1dc>
 8002526:	e20c      	b.n	8002942 <__aeabi_dsub+0x5f6>
 8002528:	4e55      	ldr	r6, [pc, #340]	; (8002680 <__aeabi_dsub+0x334>)
 800252a:	42b4      	cmp	r4, r6
 800252c:	d100      	bne.n	8002530 <__aeabi_dsub+0x1e4>
 800252e:	e1f8      	b.n	8002922 <__aeabi_dsub+0x5d6>
 8002530:	46ac      	mov	ip, r5
 8002532:	e10e      	b.n	8002752 <__aeabi_dsub+0x406>
 8002534:	000a      	movs	r2, r1
 8002536:	4302      	orrs	r2, r0
 8002538:	d100      	bne.n	800253c <__aeabi_dsub+0x1f0>
 800253a:	e136      	b.n	80027aa <__aeabi_dsub+0x45e>
 800253c:	0022      	movs	r2, r4
 800253e:	3a01      	subs	r2, #1
 8002540:	2c01      	cmp	r4, #1
 8002542:	d100      	bne.n	8002546 <__aeabi_dsub+0x1fa>
 8002544:	e1c6      	b.n	80028d4 <__aeabi_dsub+0x588>
 8002546:	4c4e      	ldr	r4, [pc, #312]	; (8002680 <__aeabi_dsub+0x334>)
 8002548:	45a4      	cmp	ip, r4
 800254a:	d100      	bne.n	800254e <__aeabi_dsub+0x202>
 800254c:	e0f4      	b.n	8002738 <__aeabi_dsub+0x3ec>
 800254e:	4694      	mov	ip, r2
 8002550:	e731      	b.n	80023b6 <__aeabi_dsub+0x6a>
 8002552:	2401      	movs	r4, #1
 8002554:	4067      	eors	r7, r4
 8002556:	46bb      	mov	fp, r7
 8002558:	42bd      	cmp	r5, r7
 800255a:	d000      	beq.n	800255e <__aeabi_dsub+0x212>
 800255c:	e71c      	b.n	8002398 <__aeabi_dsub+0x4c>
 800255e:	4c4a      	ldr	r4, [pc, #296]	; (8002688 <__aeabi_dsub+0x33c>)
 8002560:	46a4      	mov	ip, r4
 8002562:	44b4      	add	ip, r6
 8002564:	4664      	mov	r4, ip
 8002566:	2c00      	cmp	r4, #0
 8002568:	d100      	bne.n	800256c <__aeabi_dsub+0x220>
 800256a:	e0cf      	b.n	800270c <__aeabi_dsub+0x3c0>
 800256c:	1b94      	subs	r4, r2, r6
 800256e:	46a4      	mov	ip, r4
 8002570:	2e00      	cmp	r6, #0
 8002572:	d100      	bne.n	8002576 <__aeabi_dsub+0x22a>
 8002574:	e15c      	b.n	8002830 <__aeabi_dsub+0x4e4>
 8002576:	4e42      	ldr	r6, [pc, #264]	; (8002680 <__aeabi_dsub+0x334>)
 8002578:	42b2      	cmp	r2, r6
 800257a:	d100      	bne.n	800257e <__aeabi_dsub+0x232>
 800257c:	e1ec      	b.n	8002958 <__aeabi_dsub+0x60c>
 800257e:	2680      	movs	r6, #128	; 0x80
 8002580:	0436      	lsls	r6, r6, #16
 8002582:	4333      	orrs	r3, r6
 8002584:	4664      	mov	r4, ip
 8002586:	2c38      	cmp	r4, #56	; 0x38
 8002588:	dd00      	ble.n	800258c <__aeabi_dsub+0x240>
 800258a:	e1b3      	b.n	80028f4 <__aeabi_dsub+0x5a8>
 800258c:	2c1f      	cmp	r4, #31
 800258e:	dd00      	ble.n	8002592 <__aeabi_dsub+0x246>
 8002590:	e238      	b.n	8002a04 <__aeabi_dsub+0x6b8>
 8002592:	2620      	movs	r6, #32
 8002594:	1b36      	subs	r6, r6, r4
 8002596:	001c      	movs	r4, r3
 8002598:	40b4      	lsls	r4, r6
 800259a:	464f      	mov	r7, r9
 800259c:	46a0      	mov	r8, r4
 800259e:	4664      	mov	r4, ip
 80025a0:	40e7      	lsrs	r7, r4
 80025a2:	4644      	mov	r4, r8
 80025a4:	433c      	orrs	r4, r7
 80025a6:	464f      	mov	r7, r9
 80025a8:	40b7      	lsls	r7, r6
 80025aa:	003e      	movs	r6, r7
 80025ac:	1e77      	subs	r7, r6, #1
 80025ae:	41be      	sbcs	r6, r7
 80025b0:	4334      	orrs	r4, r6
 80025b2:	4666      	mov	r6, ip
 80025b4:	40f3      	lsrs	r3, r6
 80025b6:	18c9      	adds	r1, r1, r3
 80025b8:	1824      	adds	r4, r4, r0
 80025ba:	4284      	cmp	r4, r0
 80025bc:	419b      	sbcs	r3, r3
 80025be:	425b      	negs	r3, r3
 80025c0:	4698      	mov	r8, r3
 80025c2:	0016      	movs	r6, r2
 80025c4:	4488      	add	r8, r1
 80025c6:	e04e      	b.n	8002666 <__aeabi_dsub+0x31a>
 80025c8:	4a30      	ldr	r2, [pc, #192]	; (800268c <__aeabi_dsub+0x340>)
 80025ca:	1c74      	adds	r4, r6, #1
 80025cc:	4214      	tst	r4, r2
 80025ce:	d000      	beq.n	80025d2 <__aeabi_dsub+0x286>
 80025d0:	e0d6      	b.n	8002780 <__aeabi_dsub+0x434>
 80025d2:	464a      	mov	r2, r9
 80025d4:	431a      	orrs	r2, r3
 80025d6:	2e00      	cmp	r6, #0
 80025d8:	d000      	beq.n	80025dc <__aeabi_dsub+0x290>
 80025da:	e15b      	b.n	8002894 <__aeabi_dsub+0x548>
 80025dc:	2a00      	cmp	r2, #0
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x296>
 80025e0:	e1a5      	b.n	800292e <__aeabi_dsub+0x5e2>
 80025e2:	000a      	movs	r2, r1
 80025e4:	4302      	orrs	r2, r0
 80025e6:	d000      	beq.n	80025ea <__aeabi_dsub+0x29e>
 80025e8:	e1bb      	b.n	8002962 <__aeabi_dsub+0x616>
 80025ea:	464a      	mov	r2, r9
 80025ec:	0759      	lsls	r1, r3, #29
 80025ee:	08d2      	lsrs	r2, r2, #3
 80025f0:	430a      	orrs	r2, r1
 80025f2:	08db      	lsrs	r3, r3, #3
 80025f4:	e027      	b.n	8002646 <__aeabi_dsub+0x2fa>
 80025f6:	000a      	movs	r2, r1
 80025f8:	4302      	orrs	r2, r0
 80025fa:	d100      	bne.n	80025fe <__aeabi_dsub+0x2b2>
 80025fc:	e174      	b.n	80028e8 <__aeabi_dsub+0x59c>
 80025fe:	0022      	movs	r2, r4
 8002600:	3a01      	subs	r2, #1
 8002602:	2c01      	cmp	r4, #1
 8002604:	d005      	beq.n	8002612 <__aeabi_dsub+0x2c6>
 8002606:	4c1e      	ldr	r4, [pc, #120]	; (8002680 <__aeabi_dsub+0x334>)
 8002608:	45a4      	cmp	ip, r4
 800260a:	d100      	bne.n	800260e <__aeabi_dsub+0x2c2>
 800260c:	e094      	b.n	8002738 <__aeabi_dsub+0x3ec>
 800260e:	4694      	mov	ip, r2
 8002610:	e759      	b.n	80024c6 <__aeabi_dsub+0x17a>
 8002612:	4448      	add	r0, r9
 8002614:	4548      	cmp	r0, r9
 8002616:	4192      	sbcs	r2, r2
 8002618:	185b      	adds	r3, r3, r1
 800261a:	4698      	mov	r8, r3
 800261c:	0004      	movs	r4, r0
 800261e:	4252      	negs	r2, r2
 8002620:	4490      	add	r8, r2
 8002622:	4643      	mov	r3, r8
 8002624:	2602      	movs	r6, #2
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	d500      	bpl.n	800262c <__aeabi_dsub+0x2e0>
 800262a:	e0c4      	b.n	80027b6 <__aeabi_dsub+0x46a>
 800262c:	3e01      	subs	r6, #1
 800262e:	0763      	lsls	r3, r4, #29
 8002630:	d000      	beq.n	8002634 <__aeabi_dsub+0x2e8>
 8002632:	e711      	b.n	8002458 <__aeabi_dsub+0x10c>
 8002634:	4643      	mov	r3, r8
 8002636:	46b4      	mov	ip, r6
 8002638:	0759      	lsls	r1, r3, #29
 800263a:	08e2      	lsrs	r2, r4, #3
 800263c:	430a      	orrs	r2, r1
 800263e:	08db      	lsrs	r3, r3, #3
 8002640:	490f      	ldr	r1, [pc, #60]	; (8002680 <__aeabi_dsub+0x334>)
 8002642:	458c      	cmp	ip, r1
 8002644:	d040      	beq.n	80026c8 <__aeabi_dsub+0x37c>
 8002646:	4661      	mov	r1, ip
 8002648:	031b      	lsls	r3, r3, #12
 800264a:	0549      	lsls	r1, r1, #21
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0d49      	lsrs	r1, r1, #21
 8002650:	e720      	b.n	8002494 <__aeabi_dsub+0x148>
 8002652:	4301      	orrs	r1, r0
 8002654:	000c      	movs	r4, r1
 8002656:	1e61      	subs	r1, r4, #1
 8002658:	418c      	sbcs	r4, r1
 800265a:	444c      	add	r4, r9
 800265c:	454c      	cmp	r4, r9
 800265e:	4192      	sbcs	r2, r2
 8002660:	4252      	negs	r2, r2
 8002662:	4690      	mov	r8, r2
 8002664:	4498      	add	r8, r3
 8002666:	4643      	mov	r3, r8
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	d5e0      	bpl.n	800262e <__aeabi_dsub+0x2e2>
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <__aeabi_dsub+0x334>)
 800266e:	3601      	adds	r6, #1
 8002670:	429e      	cmp	r6, r3
 8002672:	d000      	beq.n	8002676 <__aeabi_dsub+0x32a>
 8002674:	e09f      	b.n	80027b6 <__aeabi_dsub+0x46a>
 8002676:	0031      	movs	r1, r6
 8002678:	2300      	movs	r3, #0
 800267a:	2200      	movs	r2, #0
 800267c:	e70a      	b.n	8002494 <__aeabi_dsub+0x148>
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	000007ff 	.word	0x000007ff
 8002684:	ff7fffff 	.word	0xff7fffff
 8002688:	fffff801 	.word	0xfffff801
 800268c:	000007fe 	.word	0x000007fe
 8002690:	2a00      	cmp	r2, #0
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x34a>
 8002694:	e160      	b.n	8002958 <__aeabi_dsub+0x60c>
 8002696:	000a      	movs	r2, r1
 8002698:	4302      	orrs	r2, r0
 800269a:	d04d      	beq.n	8002738 <__aeabi_dsub+0x3ec>
 800269c:	464a      	mov	r2, r9
 800269e:	075c      	lsls	r4, r3, #29
 80026a0:	08d2      	lsrs	r2, r2, #3
 80026a2:	4322      	orrs	r2, r4
 80026a4:	2480      	movs	r4, #128	; 0x80
 80026a6:	08db      	lsrs	r3, r3, #3
 80026a8:	0324      	lsls	r4, r4, #12
 80026aa:	4223      	tst	r3, r4
 80026ac:	d007      	beq.n	80026be <__aeabi_dsub+0x372>
 80026ae:	08ce      	lsrs	r6, r1, #3
 80026b0:	4226      	tst	r6, r4
 80026b2:	d104      	bne.n	80026be <__aeabi_dsub+0x372>
 80026b4:	465d      	mov	r5, fp
 80026b6:	0033      	movs	r3, r6
 80026b8:	08c2      	lsrs	r2, r0, #3
 80026ba:	0749      	lsls	r1, r1, #29
 80026bc:	430a      	orrs	r2, r1
 80026be:	0f51      	lsrs	r1, r2, #29
 80026c0:	00d2      	lsls	r2, r2, #3
 80026c2:	08d2      	lsrs	r2, r2, #3
 80026c4:	0749      	lsls	r1, r1, #29
 80026c6:	430a      	orrs	r2, r1
 80026c8:	0011      	movs	r1, r2
 80026ca:	4319      	orrs	r1, r3
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dsub+0x384>
 80026ce:	e1c8      	b.n	8002a62 <__aeabi_dsub+0x716>
 80026d0:	2180      	movs	r1, #128	; 0x80
 80026d2:	0309      	lsls	r1, r1, #12
 80026d4:	430b      	orrs	r3, r1
 80026d6:	031b      	lsls	r3, r3, #12
 80026d8:	49d5      	ldr	r1, [pc, #852]	; (8002a30 <__aeabi_dsub+0x6e4>)
 80026da:	0b1b      	lsrs	r3, r3, #12
 80026dc:	e6da      	b.n	8002494 <__aeabi_dsub+0x148>
 80026de:	49d5      	ldr	r1, [pc, #852]	; (8002a34 <__aeabi_dsub+0x6e8>)
 80026e0:	1ab6      	subs	r6, r6, r2
 80026e2:	400b      	ands	r3, r1
 80026e4:	4698      	mov	r8, r3
 80026e6:	e6b5      	b.n	8002454 <__aeabi_dsub+0x108>
 80026e8:	0020      	movs	r0, r4
 80026ea:	f000 fb3b 	bl	8002d64 <__clzsi2>
 80026ee:	0002      	movs	r2, r0
 80026f0:	3218      	adds	r2, #24
 80026f2:	2a1f      	cmp	r2, #31
 80026f4:	dc00      	bgt.n	80026f8 <__aeabi_dsub+0x3ac>
 80026f6:	e68f      	b.n	8002418 <__aeabi_dsub+0xcc>
 80026f8:	0023      	movs	r3, r4
 80026fa:	3808      	subs	r0, #8
 80026fc:	4083      	lsls	r3, r0
 80026fe:	2400      	movs	r4, #0
 8002700:	e692      	b.n	8002428 <__aeabi_dsub+0xdc>
 8002702:	4308      	orrs	r0, r1
 8002704:	0002      	movs	r2, r0
 8002706:	1e50      	subs	r0, r2, #1
 8002708:	4182      	sbcs	r2, r0
 800270a:	e66d      	b.n	80023e8 <__aeabi_dsub+0x9c>
 800270c:	4cca      	ldr	r4, [pc, #808]	; (8002a38 <__aeabi_dsub+0x6ec>)
 800270e:	1c72      	adds	r2, r6, #1
 8002710:	4222      	tst	r2, r4
 8002712:	d000      	beq.n	8002716 <__aeabi_dsub+0x3ca>
 8002714:	e0ad      	b.n	8002872 <__aeabi_dsub+0x526>
 8002716:	464a      	mov	r2, r9
 8002718:	431a      	orrs	r2, r3
 800271a:	2e00      	cmp	r6, #0
 800271c:	d1b8      	bne.n	8002690 <__aeabi_dsub+0x344>
 800271e:	2a00      	cmp	r2, #0
 8002720:	d100      	bne.n	8002724 <__aeabi_dsub+0x3d8>
 8002722:	e158      	b.n	80029d6 <__aeabi_dsub+0x68a>
 8002724:	000a      	movs	r2, r1
 8002726:	4302      	orrs	r2, r0
 8002728:	d000      	beq.n	800272c <__aeabi_dsub+0x3e0>
 800272a:	e159      	b.n	80029e0 <__aeabi_dsub+0x694>
 800272c:	464a      	mov	r2, r9
 800272e:	0759      	lsls	r1, r3, #29
 8002730:	08d2      	lsrs	r2, r2, #3
 8002732:	430a      	orrs	r2, r1
 8002734:	08db      	lsrs	r3, r3, #3
 8002736:	e786      	b.n	8002646 <__aeabi_dsub+0x2fa>
 8002738:	464a      	mov	r2, r9
 800273a:	0759      	lsls	r1, r3, #29
 800273c:	08d2      	lsrs	r2, r2, #3
 800273e:	430a      	orrs	r2, r1
 8002740:	08db      	lsrs	r3, r3, #3
 8002742:	e7c1      	b.n	80026c8 <__aeabi_dsub+0x37c>
 8002744:	4dba      	ldr	r5, [pc, #744]	; (8002a30 <__aeabi_dsub+0x6e4>)
 8002746:	42aa      	cmp	r2, r5
 8002748:	d100      	bne.n	800274c <__aeabi_dsub+0x400>
 800274a:	e11e      	b.n	800298a <__aeabi_dsub+0x63e>
 800274c:	2580      	movs	r5, #128	; 0x80
 800274e:	042d      	lsls	r5, r5, #16
 8002750:	432b      	orrs	r3, r5
 8002752:	4664      	mov	r4, ip
 8002754:	2c38      	cmp	r4, #56	; 0x38
 8002756:	dc5d      	bgt.n	8002814 <__aeabi_dsub+0x4c8>
 8002758:	2c1f      	cmp	r4, #31
 800275a:	dd00      	ble.n	800275e <__aeabi_dsub+0x412>
 800275c:	e0d0      	b.n	8002900 <__aeabi_dsub+0x5b4>
 800275e:	2520      	movs	r5, #32
 8002760:	4667      	mov	r7, ip
 8002762:	1b2d      	subs	r5, r5, r4
 8002764:	464e      	mov	r6, r9
 8002766:	001c      	movs	r4, r3
 8002768:	40fe      	lsrs	r6, r7
 800276a:	40ac      	lsls	r4, r5
 800276c:	4334      	orrs	r4, r6
 800276e:	464e      	mov	r6, r9
 8002770:	40ae      	lsls	r6, r5
 8002772:	0035      	movs	r5, r6
 8002774:	40fb      	lsrs	r3, r7
 8002776:	1e6e      	subs	r6, r5, #1
 8002778:	41b5      	sbcs	r5, r6
 800277a:	1ac9      	subs	r1, r1, r3
 800277c:	432c      	orrs	r4, r5
 800277e:	e04e      	b.n	800281e <__aeabi_dsub+0x4d2>
 8002780:	464a      	mov	r2, r9
 8002782:	1a14      	subs	r4, r2, r0
 8002784:	45a1      	cmp	r9, r4
 8002786:	4192      	sbcs	r2, r2
 8002788:	4252      	negs	r2, r2
 800278a:	4690      	mov	r8, r2
 800278c:	1a5f      	subs	r7, r3, r1
 800278e:	003a      	movs	r2, r7
 8002790:	4647      	mov	r7, r8
 8002792:	1bd2      	subs	r2, r2, r7
 8002794:	4690      	mov	r8, r2
 8002796:	0212      	lsls	r2, r2, #8
 8002798:	d500      	bpl.n	800279c <__aeabi_dsub+0x450>
 800279a:	e08b      	b.n	80028b4 <__aeabi_dsub+0x568>
 800279c:	4642      	mov	r2, r8
 800279e:	4322      	orrs	r2, r4
 80027a0:	d000      	beq.n	80027a4 <__aeabi_dsub+0x458>
 80027a2:	e630      	b.n	8002406 <__aeabi_dsub+0xba>
 80027a4:	2300      	movs	r3, #0
 80027a6:	2500      	movs	r5, #0
 80027a8:	e74d      	b.n	8002646 <__aeabi_dsub+0x2fa>
 80027aa:	464a      	mov	r2, r9
 80027ac:	0759      	lsls	r1, r3, #29
 80027ae:	08d2      	lsrs	r2, r2, #3
 80027b0:	430a      	orrs	r2, r1
 80027b2:	08db      	lsrs	r3, r3, #3
 80027b4:	e744      	b.n	8002640 <__aeabi_dsub+0x2f4>
 80027b6:	4642      	mov	r2, r8
 80027b8:	4b9e      	ldr	r3, [pc, #632]	; (8002a34 <__aeabi_dsub+0x6e8>)
 80027ba:	0861      	lsrs	r1, r4, #1
 80027bc:	401a      	ands	r2, r3
 80027be:	0013      	movs	r3, r2
 80027c0:	2201      	movs	r2, #1
 80027c2:	4014      	ands	r4, r2
 80027c4:	430c      	orrs	r4, r1
 80027c6:	07da      	lsls	r2, r3, #31
 80027c8:	085b      	lsrs	r3, r3, #1
 80027ca:	4698      	mov	r8, r3
 80027cc:	4314      	orrs	r4, r2
 80027ce:	e641      	b.n	8002454 <__aeabi_dsub+0x108>
 80027d0:	001a      	movs	r2, r3
 80027d2:	3e1f      	subs	r6, #31
 80027d4:	40f2      	lsrs	r2, r6
 80027d6:	0016      	movs	r6, r2
 80027d8:	2920      	cmp	r1, #32
 80027da:	d003      	beq.n	80027e4 <__aeabi_dsub+0x498>
 80027dc:	2240      	movs	r2, #64	; 0x40
 80027de:	1a51      	subs	r1, r2, r1
 80027e0:	408b      	lsls	r3, r1
 80027e2:	431c      	orrs	r4, r3
 80027e4:	1e62      	subs	r2, r4, #1
 80027e6:	4194      	sbcs	r4, r2
 80027e8:	2300      	movs	r3, #0
 80027ea:	4334      	orrs	r4, r6
 80027ec:	4698      	mov	r8, r3
 80027ee:	2600      	movs	r6, #0
 80027f0:	e71d      	b.n	800262e <__aeabi_dsub+0x2e2>
 80027f2:	000c      	movs	r4, r1
 80027f4:	3a20      	subs	r2, #32
 80027f6:	40d4      	lsrs	r4, r2
 80027f8:	0022      	movs	r2, r4
 80027fa:	4664      	mov	r4, ip
 80027fc:	2c20      	cmp	r4, #32
 80027fe:	d004      	beq.n	800280a <__aeabi_dsub+0x4be>
 8002800:	2740      	movs	r7, #64	; 0x40
 8002802:	1b3f      	subs	r7, r7, r4
 8002804:	40b9      	lsls	r1, r7
 8002806:	4308      	orrs	r0, r1
 8002808:	4680      	mov	r8, r0
 800280a:	4644      	mov	r4, r8
 800280c:	1e61      	subs	r1, r4, #1
 800280e:	418c      	sbcs	r4, r1
 8002810:	4322      	orrs	r2, r4
 8002812:	e5e9      	b.n	80023e8 <__aeabi_dsub+0x9c>
 8002814:	464c      	mov	r4, r9
 8002816:	4323      	orrs	r3, r4
 8002818:	001c      	movs	r4, r3
 800281a:	1e63      	subs	r3, r4, #1
 800281c:	419c      	sbcs	r4, r3
 800281e:	1b04      	subs	r4, r0, r4
 8002820:	42a0      	cmp	r0, r4
 8002822:	419b      	sbcs	r3, r3
 8002824:	425b      	negs	r3, r3
 8002826:	1acb      	subs	r3, r1, r3
 8002828:	4698      	mov	r8, r3
 800282a:	465d      	mov	r5, fp
 800282c:	0016      	movs	r6, r2
 800282e:	e5e2      	b.n	80023f6 <__aeabi_dsub+0xaa>
 8002830:	464e      	mov	r6, r9
 8002832:	431e      	orrs	r6, r3
 8002834:	d100      	bne.n	8002838 <__aeabi_dsub+0x4ec>
 8002836:	e0ae      	b.n	8002996 <__aeabi_dsub+0x64a>
 8002838:	1e66      	subs	r6, r4, #1
 800283a:	2c01      	cmp	r4, #1
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x4f4>
 800283e:	e0fd      	b.n	8002a3c <__aeabi_dsub+0x6f0>
 8002840:	4f7b      	ldr	r7, [pc, #492]	; (8002a30 <__aeabi_dsub+0x6e4>)
 8002842:	42bc      	cmp	r4, r7
 8002844:	d100      	bne.n	8002848 <__aeabi_dsub+0x4fc>
 8002846:	e107      	b.n	8002a58 <__aeabi_dsub+0x70c>
 8002848:	46b4      	mov	ip, r6
 800284a:	e69b      	b.n	8002584 <__aeabi_dsub+0x238>
 800284c:	4664      	mov	r4, ip
 800284e:	2220      	movs	r2, #32
 8002850:	1b12      	subs	r2, r2, r4
 8002852:	000c      	movs	r4, r1
 8002854:	4094      	lsls	r4, r2
 8002856:	0007      	movs	r7, r0
 8002858:	4090      	lsls	r0, r2
 800285a:	46a0      	mov	r8, r4
 800285c:	4664      	mov	r4, ip
 800285e:	1e42      	subs	r2, r0, #1
 8002860:	4190      	sbcs	r0, r2
 8002862:	4662      	mov	r2, ip
 8002864:	40e7      	lsrs	r7, r4
 8002866:	4644      	mov	r4, r8
 8002868:	40d1      	lsrs	r1, r2
 800286a:	433c      	orrs	r4, r7
 800286c:	4304      	orrs	r4, r0
 800286e:	185b      	adds	r3, r3, r1
 8002870:	e6f3      	b.n	800265a <__aeabi_dsub+0x30e>
 8002872:	4c6f      	ldr	r4, [pc, #444]	; (8002a30 <__aeabi_dsub+0x6e4>)
 8002874:	42a2      	cmp	r2, r4
 8002876:	d100      	bne.n	800287a <__aeabi_dsub+0x52e>
 8002878:	e0d5      	b.n	8002a26 <__aeabi_dsub+0x6da>
 800287a:	4448      	add	r0, r9
 800287c:	185b      	adds	r3, r3, r1
 800287e:	4548      	cmp	r0, r9
 8002880:	4189      	sbcs	r1, r1
 8002882:	4249      	negs	r1, r1
 8002884:	185b      	adds	r3, r3, r1
 8002886:	07dc      	lsls	r4, r3, #31
 8002888:	0840      	lsrs	r0, r0, #1
 800288a:	085b      	lsrs	r3, r3, #1
 800288c:	4698      	mov	r8, r3
 800288e:	0016      	movs	r6, r2
 8002890:	4304      	orrs	r4, r0
 8002892:	e6cc      	b.n	800262e <__aeabi_dsub+0x2e2>
 8002894:	2a00      	cmp	r2, #0
 8002896:	d000      	beq.n	800289a <__aeabi_dsub+0x54e>
 8002898:	e082      	b.n	80029a0 <__aeabi_dsub+0x654>
 800289a:	000a      	movs	r2, r1
 800289c:	4302      	orrs	r2, r0
 800289e:	d140      	bne.n	8002922 <__aeabi_dsub+0x5d6>
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	2500      	movs	r5, #0
 80028a4:	031b      	lsls	r3, r3, #12
 80028a6:	e713      	b.n	80026d0 <__aeabi_dsub+0x384>
 80028a8:	074b      	lsls	r3, r1, #29
 80028aa:	08c2      	lsrs	r2, r0, #3
 80028ac:	431a      	orrs	r2, r3
 80028ae:	465d      	mov	r5, fp
 80028b0:	08cb      	lsrs	r3, r1, #3
 80028b2:	e6c5      	b.n	8002640 <__aeabi_dsub+0x2f4>
 80028b4:	464a      	mov	r2, r9
 80028b6:	1a84      	subs	r4, r0, r2
 80028b8:	42a0      	cmp	r0, r4
 80028ba:	4192      	sbcs	r2, r2
 80028bc:	1acb      	subs	r3, r1, r3
 80028be:	4252      	negs	r2, r2
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	4698      	mov	r8, r3
 80028c4:	465d      	mov	r5, fp
 80028c6:	e59e      	b.n	8002406 <__aeabi_dsub+0xba>
 80028c8:	464a      	mov	r2, r9
 80028ca:	0759      	lsls	r1, r3, #29
 80028cc:	08d2      	lsrs	r2, r2, #3
 80028ce:	430a      	orrs	r2, r1
 80028d0:	08db      	lsrs	r3, r3, #3
 80028d2:	e6f9      	b.n	80026c8 <__aeabi_dsub+0x37c>
 80028d4:	464a      	mov	r2, r9
 80028d6:	1a14      	subs	r4, r2, r0
 80028d8:	45a1      	cmp	r9, r4
 80028da:	4192      	sbcs	r2, r2
 80028dc:	1a5b      	subs	r3, r3, r1
 80028de:	4252      	negs	r2, r2
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	4698      	mov	r8, r3
 80028e4:	2601      	movs	r6, #1
 80028e6:	e586      	b.n	80023f6 <__aeabi_dsub+0xaa>
 80028e8:	464a      	mov	r2, r9
 80028ea:	0759      	lsls	r1, r3, #29
 80028ec:	08d2      	lsrs	r2, r2, #3
 80028ee:	430a      	orrs	r2, r1
 80028f0:	08db      	lsrs	r3, r3, #3
 80028f2:	e6a5      	b.n	8002640 <__aeabi_dsub+0x2f4>
 80028f4:	464c      	mov	r4, r9
 80028f6:	4323      	orrs	r3, r4
 80028f8:	001c      	movs	r4, r3
 80028fa:	1e63      	subs	r3, r4, #1
 80028fc:	419c      	sbcs	r4, r3
 80028fe:	e65b      	b.n	80025b8 <__aeabi_dsub+0x26c>
 8002900:	4665      	mov	r5, ip
 8002902:	001e      	movs	r6, r3
 8002904:	3d20      	subs	r5, #32
 8002906:	40ee      	lsrs	r6, r5
 8002908:	2c20      	cmp	r4, #32
 800290a:	d005      	beq.n	8002918 <__aeabi_dsub+0x5cc>
 800290c:	2540      	movs	r5, #64	; 0x40
 800290e:	1b2d      	subs	r5, r5, r4
 8002910:	40ab      	lsls	r3, r5
 8002912:	464c      	mov	r4, r9
 8002914:	431c      	orrs	r4, r3
 8002916:	46a2      	mov	sl, r4
 8002918:	4654      	mov	r4, sl
 800291a:	1e63      	subs	r3, r4, #1
 800291c:	419c      	sbcs	r4, r3
 800291e:	4334      	orrs	r4, r6
 8002920:	e77d      	b.n	800281e <__aeabi_dsub+0x4d2>
 8002922:	074b      	lsls	r3, r1, #29
 8002924:	08c2      	lsrs	r2, r0, #3
 8002926:	431a      	orrs	r2, r3
 8002928:	465d      	mov	r5, fp
 800292a:	08cb      	lsrs	r3, r1, #3
 800292c:	e6cc      	b.n	80026c8 <__aeabi_dsub+0x37c>
 800292e:	000a      	movs	r2, r1
 8002930:	4302      	orrs	r2, r0
 8002932:	d100      	bne.n	8002936 <__aeabi_dsub+0x5ea>
 8002934:	e736      	b.n	80027a4 <__aeabi_dsub+0x458>
 8002936:	074b      	lsls	r3, r1, #29
 8002938:	08c2      	lsrs	r2, r0, #3
 800293a:	431a      	orrs	r2, r3
 800293c:	465d      	mov	r5, fp
 800293e:	08cb      	lsrs	r3, r1, #3
 8002940:	e681      	b.n	8002646 <__aeabi_dsub+0x2fa>
 8002942:	464a      	mov	r2, r9
 8002944:	1a84      	subs	r4, r0, r2
 8002946:	42a0      	cmp	r0, r4
 8002948:	4192      	sbcs	r2, r2
 800294a:	1acb      	subs	r3, r1, r3
 800294c:	4252      	negs	r2, r2
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	4698      	mov	r8, r3
 8002952:	465d      	mov	r5, fp
 8002954:	2601      	movs	r6, #1
 8002956:	e54e      	b.n	80023f6 <__aeabi_dsub+0xaa>
 8002958:	074b      	lsls	r3, r1, #29
 800295a:	08c2      	lsrs	r2, r0, #3
 800295c:	431a      	orrs	r2, r3
 800295e:	08cb      	lsrs	r3, r1, #3
 8002960:	e6b2      	b.n	80026c8 <__aeabi_dsub+0x37c>
 8002962:	464a      	mov	r2, r9
 8002964:	1a14      	subs	r4, r2, r0
 8002966:	45a1      	cmp	r9, r4
 8002968:	4192      	sbcs	r2, r2
 800296a:	1a5f      	subs	r7, r3, r1
 800296c:	4252      	negs	r2, r2
 800296e:	1aba      	subs	r2, r7, r2
 8002970:	4690      	mov	r8, r2
 8002972:	0212      	lsls	r2, r2, #8
 8002974:	d56b      	bpl.n	8002a4e <__aeabi_dsub+0x702>
 8002976:	464a      	mov	r2, r9
 8002978:	1a84      	subs	r4, r0, r2
 800297a:	42a0      	cmp	r0, r4
 800297c:	4192      	sbcs	r2, r2
 800297e:	1acb      	subs	r3, r1, r3
 8002980:	4252      	negs	r2, r2
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	4698      	mov	r8, r3
 8002986:	465d      	mov	r5, fp
 8002988:	e564      	b.n	8002454 <__aeabi_dsub+0x108>
 800298a:	074b      	lsls	r3, r1, #29
 800298c:	08c2      	lsrs	r2, r0, #3
 800298e:	431a      	orrs	r2, r3
 8002990:	465d      	mov	r5, fp
 8002992:	08cb      	lsrs	r3, r1, #3
 8002994:	e698      	b.n	80026c8 <__aeabi_dsub+0x37c>
 8002996:	074b      	lsls	r3, r1, #29
 8002998:	08c2      	lsrs	r2, r0, #3
 800299a:	431a      	orrs	r2, r3
 800299c:	08cb      	lsrs	r3, r1, #3
 800299e:	e64f      	b.n	8002640 <__aeabi_dsub+0x2f4>
 80029a0:	000a      	movs	r2, r1
 80029a2:	4302      	orrs	r2, r0
 80029a4:	d090      	beq.n	80028c8 <__aeabi_dsub+0x57c>
 80029a6:	464a      	mov	r2, r9
 80029a8:	075c      	lsls	r4, r3, #29
 80029aa:	08d2      	lsrs	r2, r2, #3
 80029ac:	4314      	orrs	r4, r2
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	08db      	lsrs	r3, r3, #3
 80029b2:	0312      	lsls	r2, r2, #12
 80029b4:	4213      	tst	r3, r2
 80029b6:	d008      	beq.n	80029ca <__aeabi_dsub+0x67e>
 80029b8:	08ce      	lsrs	r6, r1, #3
 80029ba:	4216      	tst	r6, r2
 80029bc:	d105      	bne.n	80029ca <__aeabi_dsub+0x67e>
 80029be:	08c0      	lsrs	r0, r0, #3
 80029c0:	0749      	lsls	r1, r1, #29
 80029c2:	4308      	orrs	r0, r1
 80029c4:	0004      	movs	r4, r0
 80029c6:	465d      	mov	r5, fp
 80029c8:	0033      	movs	r3, r6
 80029ca:	0f61      	lsrs	r1, r4, #29
 80029cc:	00e2      	lsls	r2, r4, #3
 80029ce:	0749      	lsls	r1, r1, #29
 80029d0:	08d2      	lsrs	r2, r2, #3
 80029d2:	430a      	orrs	r2, r1
 80029d4:	e678      	b.n	80026c8 <__aeabi_dsub+0x37c>
 80029d6:	074b      	lsls	r3, r1, #29
 80029d8:	08c2      	lsrs	r2, r0, #3
 80029da:	431a      	orrs	r2, r3
 80029dc:	08cb      	lsrs	r3, r1, #3
 80029de:	e632      	b.n	8002646 <__aeabi_dsub+0x2fa>
 80029e0:	4448      	add	r0, r9
 80029e2:	185b      	adds	r3, r3, r1
 80029e4:	4548      	cmp	r0, r9
 80029e6:	4192      	sbcs	r2, r2
 80029e8:	4698      	mov	r8, r3
 80029ea:	4252      	negs	r2, r2
 80029ec:	4490      	add	r8, r2
 80029ee:	4643      	mov	r3, r8
 80029f0:	0004      	movs	r4, r0
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	d400      	bmi.n	80029f8 <__aeabi_dsub+0x6ac>
 80029f6:	e61a      	b.n	800262e <__aeabi_dsub+0x2e2>
 80029f8:	4642      	mov	r2, r8
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <__aeabi_dsub+0x6e8>)
 80029fc:	2601      	movs	r6, #1
 80029fe:	401a      	ands	r2, r3
 8002a00:	4690      	mov	r8, r2
 8002a02:	e614      	b.n	800262e <__aeabi_dsub+0x2e2>
 8002a04:	4666      	mov	r6, ip
 8002a06:	001f      	movs	r7, r3
 8002a08:	3e20      	subs	r6, #32
 8002a0a:	40f7      	lsrs	r7, r6
 8002a0c:	2c20      	cmp	r4, #32
 8002a0e:	d005      	beq.n	8002a1c <__aeabi_dsub+0x6d0>
 8002a10:	2640      	movs	r6, #64	; 0x40
 8002a12:	1b36      	subs	r6, r6, r4
 8002a14:	40b3      	lsls	r3, r6
 8002a16:	464c      	mov	r4, r9
 8002a18:	431c      	orrs	r4, r3
 8002a1a:	46a2      	mov	sl, r4
 8002a1c:	4654      	mov	r4, sl
 8002a1e:	1e63      	subs	r3, r4, #1
 8002a20:	419c      	sbcs	r4, r3
 8002a22:	433c      	orrs	r4, r7
 8002a24:	e5c8      	b.n	80025b8 <__aeabi_dsub+0x26c>
 8002a26:	0011      	movs	r1, r2
 8002a28:	2300      	movs	r3, #0
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	e532      	b.n	8002494 <__aeabi_dsub+0x148>
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	000007ff 	.word	0x000007ff
 8002a34:	ff7fffff 	.word	0xff7fffff
 8002a38:	000007fe 	.word	0x000007fe
 8002a3c:	464a      	mov	r2, r9
 8002a3e:	1814      	adds	r4, r2, r0
 8002a40:	4284      	cmp	r4, r0
 8002a42:	4192      	sbcs	r2, r2
 8002a44:	185b      	adds	r3, r3, r1
 8002a46:	4698      	mov	r8, r3
 8002a48:	4252      	negs	r2, r2
 8002a4a:	4490      	add	r8, r2
 8002a4c:	e5e9      	b.n	8002622 <__aeabi_dsub+0x2d6>
 8002a4e:	4642      	mov	r2, r8
 8002a50:	4322      	orrs	r2, r4
 8002a52:	d100      	bne.n	8002a56 <__aeabi_dsub+0x70a>
 8002a54:	e6a6      	b.n	80027a4 <__aeabi_dsub+0x458>
 8002a56:	e5ea      	b.n	800262e <__aeabi_dsub+0x2e2>
 8002a58:	074b      	lsls	r3, r1, #29
 8002a5a:	08c2      	lsrs	r2, r0, #3
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	08cb      	lsrs	r3, r1, #3
 8002a60:	e632      	b.n	80026c8 <__aeabi_dsub+0x37c>
 8002a62:	2200      	movs	r2, #0
 8002a64:	4901      	ldr	r1, [pc, #4]	; (8002a6c <__aeabi_dsub+0x720>)
 8002a66:	0013      	movs	r3, r2
 8002a68:	e514      	b.n	8002494 <__aeabi_dsub+0x148>
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	000007ff 	.word	0x000007ff

08002a70 <__aeabi_dcmpun>:
 8002a70:	b570      	push	{r4, r5, r6, lr}
 8002a72:	0005      	movs	r5, r0
 8002a74:	480c      	ldr	r0, [pc, #48]	; (8002aa8 <__aeabi_dcmpun+0x38>)
 8002a76:	030c      	lsls	r4, r1, #12
 8002a78:	0016      	movs	r6, r2
 8002a7a:	0049      	lsls	r1, r1, #1
 8002a7c:	031a      	lsls	r2, r3, #12
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	0b24      	lsrs	r4, r4, #12
 8002a82:	0d49      	lsrs	r1, r1, #21
 8002a84:	0b12      	lsrs	r2, r2, #12
 8002a86:	0d5b      	lsrs	r3, r3, #21
 8002a88:	4281      	cmp	r1, r0
 8002a8a:	d008      	beq.n	8002a9e <__aeabi_dcmpun+0x2e>
 8002a8c:	4906      	ldr	r1, [pc, #24]	; (8002aa8 <__aeabi_dcmpun+0x38>)
 8002a8e:	2000      	movs	r0, #0
 8002a90:	428b      	cmp	r3, r1
 8002a92:	d103      	bne.n	8002a9c <__aeabi_dcmpun+0x2c>
 8002a94:	4332      	orrs	r2, r6
 8002a96:	0010      	movs	r0, r2
 8002a98:	1e42      	subs	r2, r0, #1
 8002a9a:	4190      	sbcs	r0, r2
 8002a9c:	bd70      	pop	{r4, r5, r6, pc}
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	432c      	orrs	r4, r5
 8002aa2:	d1fb      	bne.n	8002a9c <__aeabi_dcmpun+0x2c>
 8002aa4:	e7f2      	b.n	8002a8c <__aeabi_dcmpun+0x1c>
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	000007ff 	.word	0x000007ff

08002aac <__aeabi_d2iz>:
 8002aac:	000a      	movs	r2, r1
 8002aae:	b530      	push	{r4, r5, lr}
 8002ab0:	4c13      	ldr	r4, [pc, #76]	; (8002b00 <__aeabi_d2iz+0x54>)
 8002ab2:	0053      	lsls	r3, r2, #1
 8002ab4:	0309      	lsls	r1, r1, #12
 8002ab6:	0005      	movs	r5, r0
 8002ab8:	0b09      	lsrs	r1, r1, #12
 8002aba:	2000      	movs	r0, #0
 8002abc:	0d5b      	lsrs	r3, r3, #21
 8002abe:	0fd2      	lsrs	r2, r2, #31
 8002ac0:	42a3      	cmp	r3, r4
 8002ac2:	dd04      	ble.n	8002ace <__aeabi_d2iz+0x22>
 8002ac4:	480f      	ldr	r0, [pc, #60]	; (8002b04 <__aeabi_d2iz+0x58>)
 8002ac6:	4283      	cmp	r3, r0
 8002ac8:	dd02      	ble.n	8002ad0 <__aeabi_d2iz+0x24>
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <__aeabi_d2iz+0x5c>)
 8002acc:	18d0      	adds	r0, r2, r3
 8002ace:	bd30      	pop	{r4, r5, pc}
 8002ad0:	2080      	movs	r0, #128	; 0x80
 8002ad2:	0340      	lsls	r0, r0, #13
 8002ad4:	4301      	orrs	r1, r0
 8002ad6:	480d      	ldr	r0, [pc, #52]	; (8002b0c <__aeabi_d2iz+0x60>)
 8002ad8:	1ac0      	subs	r0, r0, r3
 8002ada:	281f      	cmp	r0, #31
 8002adc:	dd08      	ble.n	8002af0 <__aeabi_d2iz+0x44>
 8002ade:	480c      	ldr	r0, [pc, #48]	; (8002b10 <__aeabi_d2iz+0x64>)
 8002ae0:	1ac3      	subs	r3, r0, r3
 8002ae2:	40d9      	lsrs	r1, r3
 8002ae4:	000b      	movs	r3, r1
 8002ae6:	4258      	negs	r0, r3
 8002ae8:	2a00      	cmp	r2, #0
 8002aea:	d1f0      	bne.n	8002ace <__aeabi_d2iz+0x22>
 8002aec:	0018      	movs	r0, r3
 8002aee:	e7ee      	b.n	8002ace <__aeabi_d2iz+0x22>
 8002af0:	4c08      	ldr	r4, [pc, #32]	; (8002b14 <__aeabi_d2iz+0x68>)
 8002af2:	40c5      	lsrs	r5, r0
 8002af4:	46a4      	mov	ip, r4
 8002af6:	4463      	add	r3, ip
 8002af8:	4099      	lsls	r1, r3
 8002afa:	000b      	movs	r3, r1
 8002afc:	432b      	orrs	r3, r5
 8002afe:	e7f2      	b.n	8002ae6 <__aeabi_d2iz+0x3a>
 8002b00:	000003fe 	.word	0x000003fe
 8002b04:	0000041d 	.word	0x0000041d
 8002b08:	7fffffff 	.word	0x7fffffff
 8002b0c:	00000433 	.word	0x00000433
 8002b10:	00000413 	.word	0x00000413
 8002b14:	fffffbed 	.word	0xfffffbed

08002b18 <__aeabi_i2d>:
 8002b18:	b570      	push	{r4, r5, r6, lr}
 8002b1a:	2800      	cmp	r0, #0
 8002b1c:	d016      	beq.n	8002b4c <__aeabi_i2d+0x34>
 8002b1e:	17c3      	asrs	r3, r0, #31
 8002b20:	18c5      	adds	r5, r0, r3
 8002b22:	405d      	eors	r5, r3
 8002b24:	0fc4      	lsrs	r4, r0, #31
 8002b26:	0028      	movs	r0, r5
 8002b28:	f000 f91c 	bl	8002d64 <__clzsi2>
 8002b2c:	4a11      	ldr	r2, [pc, #68]	; (8002b74 <__aeabi_i2d+0x5c>)
 8002b2e:	1a12      	subs	r2, r2, r0
 8002b30:	280a      	cmp	r0, #10
 8002b32:	dc16      	bgt.n	8002b62 <__aeabi_i2d+0x4a>
 8002b34:	0003      	movs	r3, r0
 8002b36:	002e      	movs	r6, r5
 8002b38:	3315      	adds	r3, #21
 8002b3a:	409e      	lsls	r6, r3
 8002b3c:	230b      	movs	r3, #11
 8002b3e:	1a18      	subs	r0, r3, r0
 8002b40:	40c5      	lsrs	r5, r0
 8002b42:	0553      	lsls	r3, r2, #21
 8002b44:	032d      	lsls	r5, r5, #12
 8002b46:	0b2d      	lsrs	r5, r5, #12
 8002b48:	0d5b      	lsrs	r3, r3, #21
 8002b4a:	e003      	b.n	8002b54 <__aeabi_i2d+0x3c>
 8002b4c:	2400      	movs	r4, #0
 8002b4e:	2300      	movs	r3, #0
 8002b50:	2500      	movs	r5, #0
 8002b52:	2600      	movs	r6, #0
 8002b54:	051b      	lsls	r3, r3, #20
 8002b56:	432b      	orrs	r3, r5
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	4323      	orrs	r3, r4
 8002b5c:	0030      	movs	r0, r6
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	380b      	subs	r0, #11
 8002b64:	4085      	lsls	r5, r0
 8002b66:	0553      	lsls	r3, r2, #21
 8002b68:	032d      	lsls	r5, r5, #12
 8002b6a:	2600      	movs	r6, #0
 8002b6c:	0b2d      	lsrs	r5, r5, #12
 8002b6e:	0d5b      	lsrs	r3, r3, #21
 8002b70:	e7f0      	b.n	8002b54 <__aeabi_i2d+0x3c>
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	0000041e 	.word	0x0000041e

08002b78 <__aeabi_ui2d>:
 8002b78:	b510      	push	{r4, lr}
 8002b7a:	1e04      	subs	r4, r0, #0
 8002b7c:	d010      	beq.n	8002ba0 <__aeabi_ui2d+0x28>
 8002b7e:	f000 f8f1 	bl	8002d64 <__clzsi2>
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_ui2d+0x48>)
 8002b84:	1a1b      	subs	r3, r3, r0
 8002b86:	280a      	cmp	r0, #10
 8002b88:	dc11      	bgt.n	8002bae <__aeabi_ui2d+0x36>
 8002b8a:	220b      	movs	r2, #11
 8002b8c:	0021      	movs	r1, r4
 8002b8e:	1a12      	subs	r2, r2, r0
 8002b90:	40d1      	lsrs	r1, r2
 8002b92:	3015      	adds	r0, #21
 8002b94:	030a      	lsls	r2, r1, #12
 8002b96:	055b      	lsls	r3, r3, #21
 8002b98:	4084      	lsls	r4, r0
 8002b9a:	0b12      	lsrs	r2, r2, #12
 8002b9c:	0d5b      	lsrs	r3, r3, #21
 8002b9e:	e001      	b.n	8002ba4 <__aeabi_ui2d+0x2c>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	051b      	lsls	r3, r3, #20
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	0020      	movs	r0, r4
 8002baa:	0019      	movs	r1, r3
 8002bac:	bd10      	pop	{r4, pc}
 8002bae:	0022      	movs	r2, r4
 8002bb0:	380b      	subs	r0, #11
 8002bb2:	4082      	lsls	r2, r0
 8002bb4:	055b      	lsls	r3, r3, #21
 8002bb6:	0312      	lsls	r2, r2, #12
 8002bb8:	2400      	movs	r4, #0
 8002bba:	0b12      	lsrs	r2, r2, #12
 8002bbc:	0d5b      	lsrs	r3, r3, #21
 8002bbe:	e7f1      	b.n	8002ba4 <__aeabi_ui2d+0x2c>
 8002bc0:	0000041e 	.word	0x0000041e

08002bc4 <__aeabi_f2d>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	0043      	lsls	r3, r0, #1
 8002bc8:	0246      	lsls	r6, r0, #9
 8002bca:	0fc4      	lsrs	r4, r0, #31
 8002bcc:	20fe      	movs	r0, #254	; 0xfe
 8002bce:	0e1b      	lsrs	r3, r3, #24
 8002bd0:	1c59      	adds	r1, r3, #1
 8002bd2:	0a75      	lsrs	r5, r6, #9
 8002bd4:	4208      	tst	r0, r1
 8002bd6:	d00c      	beq.n	8002bf2 <__aeabi_f2d+0x2e>
 8002bd8:	22e0      	movs	r2, #224	; 0xe0
 8002bda:	0092      	lsls	r2, r2, #2
 8002bdc:	4694      	mov	ip, r2
 8002bde:	076d      	lsls	r5, r5, #29
 8002be0:	0b36      	lsrs	r6, r6, #12
 8002be2:	4463      	add	r3, ip
 8002be4:	051b      	lsls	r3, r3, #20
 8002be6:	4333      	orrs	r3, r6
 8002be8:	07e4      	lsls	r4, r4, #31
 8002bea:	4323      	orrs	r3, r4
 8002bec:	0028      	movs	r0, r5
 8002bee:	0019      	movs	r1, r3
 8002bf0:	bd70      	pop	{r4, r5, r6, pc}
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d114      	bne.n	8002c20 <__aeabi_f2d+0x5c>
 8002bf6:	2d00      	cmp	r5, #0
 8002bf8:	d01b      	beq.n	8002c32 <__aeabi_f2d+0x6e>
 8002bfa:	0028      	movs	r0, r5
 8002bfc:	f000 f8b2 	bl	8002d64 <__clzsi2>
 8002c00:	280a      	cmp	r0, #10
 8002c02:	dc1c      	bgt.n	8002c3e <__aeabi_f2d+0x7a>
 8002c04:	230b      	movs	r3, #11
 8002c06:	002a      	movs	r2, r5
 8002c08:	1a1b      	subs	r3, r3, r0
 8002c0a:	40da      	lsrs	r2, r3
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	3315      	adds	r3, #21
 8002c10:	409d      	lsls	r5, r3
 8002c12:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <__aeabi_f2d+0x88>)
 8002c14:	0312      	lsls	r2, r2, #12
 8002c16:	1a1b      	subs	r3, r3, r0
 8002c18:	055b      	lsls	r3, r3, #21
 8002c1a:	0b16      	lsrs	r6, r2, #12
 8002c1c:	0d5b      	lsrs	r3, r3, #21
 8002c1e:	e7e1      	b.n	8002be4 <__aeabi_f2d+0x20>
 8002c20:	2d00      	cmp	r5, #0
 8002c22:	d009      	beq.n	8002c38 <__aeabi_f2d+0x74>
 8002c24:	0b32      	lsrs	r2, r6, #12
 8002c26:	2680      	movs	r6, #128	; 0x80
 8002c28:	0336      	lsls	r6, r6, #12
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <__aeabi_f2d+0x8c>)
 8002c2c:	076d      	lsls	r5, r5, #29
 8002c2e:	4316      	orrs	r6, r2
 8002c30:	e7d8      	b.n	8002be4 <__aeabi_f2d+0x20>
 8002c32:	2300      	movs	r3, #0
 8002c34:	2600      	movs	r6, #0
 8002c36:	e7d5      	b.n	8002be4 <__aeabi_f2d+0x20>
 8002c38:	2600      	movs	r6, #0
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <__aeabi_f2d+0x8c>)
 8002c3c:	e7d2      	b.n	8002be4 <__aeabi_f2d+0x20>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	002a      	movs	r2, r5
 8002c42:	3b0b      	subs	r3, #11
 8002c44:	409a      	lsls	r2, r3
 8002c46:	2500      	movs	r5, #0
 8002c48:	e7e3      	b.n	8002c12 <__aeabi_f2d+0x4e>
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	00000389 	.word	0x00000389
 8002c50:	000007ff 	.word	0x000007ff

08002c54 <__aeabi_d2f>:
 8002c54:	0002      	movs	r2, r0
 8002c56:	004b      	lsls	r3, r1, #1
 8002c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5a:	0308      	lsls	r0, r1, #12
 8002c5c:	0d5b      	lsrs	r3, r3, #21
 8002c5e:	4e3d      	ldr	r6, [pc, #244]	; (8002d54 <__aeabi_d2f+0x100>)
 8002c60:	0fcc      	lsrs	r4, r1, #31
 8002c62:	0a40      	lsrs	r0, r0, #9
 8002c64:	0f51      	lsrs	r1, r2, #29
 8002c66:	1c5f      	adds	r7, r3, #1
 8002c68:	4308      	orrs	r0, r1
 8002c6a:	00d5      	lsls	r5, r2, #3
 8002c6c:	4237      	tst	r7, r6
 8002c6e:	d00a      	beq.n	8002c86 <__aeabi_d2f+0x32>
 8002c70:	4939      	ldr	r1, [pc, #228]	; (8002d58 <__aeabi_d2f+0x104>)
 8002c72:	185e      	adds	r6, r3, r1
 8002c74:	2efe      	cmp	r6, #254	; 0xfe
 8002c76:	dd16      	ble.n	8002ca6 <__aeabi_d2f+0x52>
 8002c78:	23ff      	movs	r3, #255	; 0xff
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	05db      	lsls	r3, r3, #23
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	07e0      	lsls	r0, r4, #31
 8002c82:	4318      	orrs	r0, r3
 8002c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <__aeabi_d2f+0x44>
 8002c8a:	4328      	orrs	r0, r5
 8002c8c:	d027      	beq.n	8002cde <__aeabi_d2f+0x8a>
 8002c8e:	2105      	movs	r1, #5
 8002c90:	0189      	lsls	r1, r1, #6
 8002c92:	0a49      	lsrs	r1, r1, #9
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	e7f1      	b.n	8002c7c <__aeabi_d2f+0x28>
 8002c98:	4305      	orrs	r5, r0
 8002c9a:	d0ed      	beq.n	8002c78 <__aeabi_d2f+0x24>
 8002c9c:	2180      	movs	r1, #128	; 0x80
 8002c9e:	03c9      	lsls	r1, r1, #15
 8002ca0:	23ff      	movs	r3, #255	; 0xff
 8002ca2:	4301      	orrs	r1, r0
 8002ca4:	e7ea      	b.n	8002c7c <__aeabi_d2f+0x28>
 8002ca6:	2e00      	cmp	r6, #0
 8002ca8:	dd1c      	ble.n	8002ce4 <__aeabi_d2f+0x90>
 8002caa:	0192      	lsls	r2, r2, #6
 8002cac:	0011      	movs	r1, r2
 8002cae:	1e4a      	subs	r2, r1, #1
 8002cb0:	4191      	sbcs	r1, r2
 8002cb2:	00c0      	lsls	r0, r0, #3
 8002cb4:	0f6d      	lsrs	r5, r5, #29
 8002cb6:	4301      	orrs	r1, r0
 8002cb8:	4329      	orrs	r1, r5
 8002cba:	074b      	lsls	r3, r1, #29
 8002cbc:	d048      	beq.n	8002d50 <__aeabi_d2f+0xfc>
 8002cbe:	230f      	movs	r3, #15
 8002cc0:	400b      	ands	r3, r1
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d000      	beq.n	8002cc8 <__aeabi_d2f+0x74>
 8002cc6:	3104      	adds	r1, #4
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	04db      	lsls	r3, r3, #19
 8002ccc:	400b      	ands	r3, r1
 8002cce:	d03f      	beq.n	8002d50 <__aeabi_d2f+0xfc>
 8002cd0:	1c72      	adds	r2, r6, #1
 8002cd2:	2efe      	cmp	r6, #254	; 0xfe
 8002cd4:	d0d0      	beq.n	8002c78 <__aeabi_d2f+0x24>
 8002cd6:	0189      	lsls	r1, r1, #6
 8002cd8:	0a49      	lsrs	r1, r1, #9
 8002cda:	b2d3      	uxtb	r3, r2
 8002cdc:	e7ce      	b.n	8002c7c <__aeabi_d2f+0x28>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	e7cb      	b.n	8002c7c <__aeabi_d2f+0x28>
 8002ce4:	0032      	movs	r2, r6
 8002ce6:	3217      	adds	r2, #23
 8002ce8:	db22      	blt.n	8002d30 <__aeabi_d2f+0xdc>
 8002cea:	2180      	movs	r1, #128	; 0x80
 8002cec:	221e      	movs	r2, #30
 8002cee:	0409      	lsls	r1, r1, #16
 8002cf0:	4308      	orrs	r0, r1
 8002cf2:	1b92      	subs	r2, r2, r6
 8002cf4:	2a1f      	cmp	r2, #31
 8002cf6:	dd1d      	ble.n	8002d34 <__aeabi_d2f+0xe0>
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	4249      	negs	r1, r1
 8002cfc:	1b8e      	subs	r6, r1, r6
 8002cfe:	0001      	movs	r1, r0
 8002d00:	40f1      	lsrs	r1, r6
 8002d02:	000e      	movs	r6, r1
 8002d04:	2a20      	cmp	r2, #32
 8002d06:	d004      	beq.n	8002d12 <__aeabi_d2f+0xbe>
 8002d08:	4a14      	ldr	r2, [pc, #80]	; (8002d5c <__aeabi_d2f+0x108>)
 8002d0a:	4694      	mov	ip, r2
 8002d0c:	4463      	add	r3, ip
 8002d0e:	4098      	lsls	r0, r3
 8002d10:	4305      	orrs	r5, r0
 8002d12:	0029      	movs	r1, r5
 8002d14:	1e4d      	subs	r5, r1, #1
 8002d16:	41a9      	sbcs	r1, r5
 8002d18:	4331      	orrs	r1, r6
 8002d1a:	2600      	movs	r6, #0
 8002d1c:	074b      	lsls	r3, r1, #29
 8002d1e:	d1ce      	bne.n	8002cbe <__aeabi_d2f+0x6a>
 8002d20:	2080      	movs	r0, #128	; 0x80
 8002d22:	000b      	movs	r3, r1
 8002d24:	04c0      	lsls	r0, r0, #19
 8002d26:	2201      	movs	r2, #1
 8002d28:	4003      	ands	r3, r0
 8002d2a:	4201      	tst	r1, r0
 8002d2c:	d1d3      	bne.n	8002cd6 <__aeabi_d2f+0x82>
 8002d2e:	e7af      	b.n	8002c90 <__aeabi_d2f+0x3c>
 8002d30:	2300      	movs	r3, #0
 8002d32:	e7ac      	b.n	8002c8e <__aeabi_d2f+0x3a>
 8002d34:	490a      	ldr	r1, [pc, #40]	; (8002d60 <__aeabi_d2f+0x10c>)
 8002d36:	468c      	mov	ip, r1
 8002d38:	0029      	movs	r1, r5
 8002d3a:	4463      	add	r3, ip
 8002d3c:	40d1      	lsrs	r1, r2
 8002d3e:	409d      	lsls	r5, r3
 8002d40:	000a      	movs	r2, r1
 8002d42:	0029      	movs	r1, r5
 8002d44:	4098      	lsls	r0, r3
 8002d46:	1e4d      	subs	r5, r1, #1
 8002d48:	41a9      	sbcs	r1, r5
 8002d4a:	4301      	orrs	r1, r0
 8002d4c:	4311      	orrs	r1, r2
 8002d4e:	e7e4      	b.n	8002d1a <__aeabi_d2f+0xc6>
 8002d50:	0033      	movs	r3, r6
 8002d52:	e79d      	b.n	8002c90 <__aeabi_d2f+0x3c>
 8002d54:	000007fe 	.word	0x000007fe
 8002d58:	fffffc80 	.word	0xfffffc80
 8002d5c:	fffffca2 	.word	0xfffffca2
 8002d60:	fffffc82 	.word	0xfffffc82

08002d64 <__clzsi2>:
 8002d64:	211c      	movs	r1, #28
 8002d66:	2301      	movs	r3, #1
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	4298      	cmp	r0, r3
 8002d6c:	d301      	bcc.n	8002d72 <__clzsi2+0xe>
 8002d6e:	0c00      	lsrs	r0, r0, #16
 8002d70:	3910      	subs	r1, #16
 8002d72:	0a1b      	lsrs	r3, r3, #8
 8002d74:	4298      	cmp	r0, r3
 8002d76:	d301      	bcc.n	8002d7c <__clzsi2+0x18>
 8002d78:	0a00      	lsrs	r0, r0, #8
 8002d7a:	3908      	subs	r1, #8
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	4298      	cmp	r0, r3
 8002d80:	d301      	bcc.n	8002d86 <__clzsi2+0x22>
 8002d82:	0900      	lsrs	r0, r0, #4
 8002d84:	3904      	subs	r1, #4
 8002d86:	a202      	add	r2, pc, #8	; (adr r2, 8002d90 <__clzsi2+0x2c>)
 8002d88:	5c10      	ldrb	r0, [r2, r0]
 8002d8a:	1840      	adds	r0, r0, r1
 8002d8c:	4770      	bx	lr
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	02020304 	.word	0x02020304
 8002d94:	01010101 	.word	0x01010101
	...

08002da0 <__clzdi2>:
 8002da0:	b510      	push	{r4, lr}
 8002da2:	2900      	cmp	r1, #0
 8002da4:	d103      	bne.n	8002dae <__clzdi2+0xe>
 8002da6:	f7ff ffdd 	bl	8002d64 <__clzsi2>
 8002daa:	3020      	adds	r0, #32
 8002dac:	e002      	b.n	8002db4 <__clzdi2+0x14>
 8002dae:	1c08      	adds	r0, r1, #0
 8002db0:	f7ff ffd8 	bl	8002d64 <__clzsi2>
 8002db4:	bd10      	pop	{r4, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)

08002db8 <dataCalibration>:
long B6 = 0;
unsigned long B7 = 0;
long Pressure = 0;
long TE = 0;

void dataCalibration() {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af04      	add	r7, sp, #16
	uint8_t dataCalibration[22] = {0};
 8002dbe:	003b      	movs	r3, r7
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2212      	movs	r2, #18
 8002dc8:	2100      	movs	r1, #0
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f005 fbd2 	bl	8008574 <memset>
	uint16_t startCalibration = 0xAA;
 8002dd0:	2116      	movs	r1, #22
 8002dd2:	187b      	adds	r3, r7, r1
 8002dd4:	22aa      	movs	r2, #170	; 0xaa
 8002dd6:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, 0xEE, startCalibration, 1, dataCalibration, 22, HAL_MAX_DELAY);
 8002dd8:	187b      	adds	r3, r7, r1
 8002dda:	881a      	ldrh	r2, [r3, #0]
 8002ddc:	4845      	ldr	r0, [pc, #276]	; (8002ef4 <dataCalibration+0x13c>)
 8002dde:	2301      	movs	r3, #1
 8002de0:	425b      	negs	r3, r3
 8002de2:	9302      	str	r3, [sp, #8]
 8002de4:	2316      	movs	r3, #22
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	003b      	movs	r3, r7
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	2301      	movs	r3, #1
 8002dee:	21ee      	movs	r1, #238	; 0xee
 8002df0:	f002 ff0e 	bl	8005c10 <HAL_I2C_Mem_Read>
	AC1 = ((dataCalibration[0] << 8) | dataCalibration[1]);
 8002df4:	003b      	movs	r3, r7
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	b21a      	sxth	r2, r3
 8002dfc:	003b      	movs	r3, r7
 8002dfe:	785b      	ldrb	r3, [r3, #1]
 8002e00:	b21b      	sxth	r3, r3
 8002e02:	4313      	orrs	r3, r2
 8002e04:	b21a      	sxth	r2, r3
 8002e06:	4b3c      	ldr	r3, [pc, #240]	; (8002ef8 <dataCalibration+0x140>)
 8002e08:	801a      	strh	r2, [r3, #0]
	AC2 = ((dataCalibration[2] << 8) | dataCalibration[3]);
 8002e0a:	003b      	movs	r3, r7
 8002e0c:	789b      	ldrb	r3, [r3, #2]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	b21a      	sxth	r2, r3
 8002e12:	003b      	movs	r3, r7
 8002e14:	78db      	ldrb	r3, [r3, #3]
 8002e16:	b21b      	sxth	r3, r3
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	b21a      	sxth	r2, r3
 8002e1c:	4b37      	ldr	r3, [pc, #220]	; (8002efc <dataCalibration+0x144>)
 8002e1e:	801a      	strh	r2, [r3, #0]
	AC3 = ((dataCalibration[4] << 8) | dataCalibration[5]);
 8002e20:	003b      	movs	r3, r7
 8002e22:	791b      	ldrb	r3, [r3, #4]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	b21a      	sxth	r2, r3
 8002e28:	003b      	movs	r3, r7
 8002e2a:	795b      	ldrb	r3, [r3, #5]
 8002e2c:	b21b      	sxth	r3, r3
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	b21a      	sxth	r2, r3
 8002e32:	4b33      	ldr	r3, [pc, #204]	; (8002f00 <dataCalibration+0x148>)
 8002e34:	801a      	strh	r2, [r3, #0]
	AC4 = ((dataCalibration[6] << 8) | dataCalibration[7]);
 8002e36:	003b      	movs	r3, r7
 8002e38:	799b      	ldrb	r3, [r3, #6]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	b21a      	sxth	r2, r3
 8002e3e:	003b      	movs	r3, r7
 8002e40:	79db      	ldrb	r3, [r3, #7]
 8002e42:	b21b      	sxth	r3, r3
 8002e44:	4313      	orrs	r3, r2
 8002e46:	b21b      	sxth	r3, r3
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <dataCalibration+0x14c>)
 8002e4c:	801a      	strh	r2, [r3, #0]
	AC5 = ((dataCalibration[8] << 8) | dataCalibration[9]);
 8002e4e:	003b      	movs	r3, r7
 8002e50:	7a1b      	ldrb	r3, [r3, #8]
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	b21a      	sxth	r2, r3
 8002e56:	003b      	movs	r3, r7
 8002e58:	7a5b      	ldrb	r3, [r3, #9]
 8002e5a:	b21b      	sxth	r3, r3
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	b21b      	sxth	r3, r3
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <dataCalibration+0x150>)
 8002e64:	801a      	strh	r2, [r3, #0]
	AC6 = ((dataCalibration[10] << 8) | dataCalibration[11]);
 8002e66:	003b      	movs	r3, r7
 8002e68:	7a9b      	ldrb	r3, [r3, #10]
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	b21a      	sxth	r2, r3
 8002e6e:	003b      	movs	r3, r7
 8002e70:	7adb      	ldrb	r3, [r3, #11]
 8002e72:	b21b      	sxth	r3, r3
 8002e74:	4313      	orrs	r3, r2
 8002e76:	b21b      	sxth	r3, r3
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <dataCalibration+0x154>)
 8002e7c:	801a      	strh	r2, [r3, #0]
	B1 = ((dataCalibration[12] << 8) | dataCalibration[13]);
 8002e7e:	003b      	movs	r3, r7
 8002e80:	7b1b      	ldrb	r3, [r3, #12]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	b21a      	sxth	r2, r3
 8002e86:	003b      	movs	r3, r7
 8002e88:	7b5b      	ldrb	r3, [r3, #13]
 8002e8a:	b21b      	sxth	r3, r3
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	b21a      	sxth	r2, r3
 8002e90:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <dataCalibration+0x158>)
 8002e92:	801a      	strh	r2, [r3, #0]
	B2 = ((dataCalibration[14] << 8) | dataCalibration[15]);
 8002e94:	003b      	movs	r3, r7
 8002e96:	7b9b      	ldrb	r3, [r3, #14]
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	b21a      	sxth	r2, r3
 8002e9c:	003b      	movs	r3, r7
 8002e9e:	7bdb      	ldrb	r3, [r3, #15]
 8002ea0:	b21b      	sxth	r3, r3
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	b21a      	sxth	r2, r3
 8002ea6:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <dataCalibration+0x15c>)
 8002ea8:	801a      	strh	r2, [r3, #0]
	MB = ((dataCalibration[16] << 8) | dataCalibration[17]);
 8002eaa:	003b      	movs	r3, r7
 8002eac:	7c1b      	ldrb	r3, [r3, #16]
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	b21a      	sxth	r2, r3
 8002eb2:	003b      	movs	r3, r7
 8002eb4:	7c5b      	ldrb	r3, [r3, #17]
 8002eb6:	b21b      	sxth	r3, r3
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	b21a      	sxth	r2, r3
 8002ebc:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <dataCalibration+0x160>)
 8002ebe:	801a      	strh	r2, [r3, #0]
	MC = ((dataCalibration[18] << 8) | dataCalibration[19]);
 8002ec0:	003b      	movs	r3, r7
 8002ec2:	7c9b      	ldrb	r3, [r3, #18]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	b21a      	sxth	r2, r3
 8002ec8:	003b      	movs	r3, r7
 8002eca:	7cdb      	ldrb	r3, [r3, #19]
 8002ecc:	b21b      	sxth	r3, r3
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	b21a      	sxth	r2, r3
 8002ed2:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <dataCalibration+0x164>)
 8002ed4:	801a      	strh	r2, [r3, #0]
	MD = ((dataCalibration[20] << 8) | dataCalibration[21]);
 8002ed6:	003b      	movs	r3, r7
 8002ed8:	7d1b      	ldrb	r3, [r3, #20]
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	b21a      	sxth	r2, r3
 8002ede:	003b      	movs	r3, r7
 8002ee0:	7d5b      	ldrb	r3, [r3, #21]
 8002ee2:	b21b      	sxth	r3, r3
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b21a      	sxth	r2, r3
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <dataCalibration+0x168>)
 8002eea:	801a      	strh	r2, [r3, #0]
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b006      	add	sp, #24
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	2000025c 	.word	0x2000025c
 8002ef8:	2000022a 	.word	0x2000022a
 8002efc:	20000240 	.word	0x20000240
 8002f00:	20000242 	.word	0x20000242
 8002f04:	20000236 	.word	0x20000236
 8002f08:	20000234 	.word	0x20000234
 8002f0c:	2000022c 	.word	0x2000022c
 8002f10:	2000024c 	.word	0x2000024c
 8002f14:	20000244 	.word	0x20000244
 8002f18:	20000238 	.word	0x20000238
 8002f1c:	20000254 	.word	0x20000254
 8002f20:	20000228 	.word	0x20000228

08002f24 <utemp>:

uint16_t utemp() {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 8002f2a:	1dfb      	adds	r3, r7, #7
 8002f2c:	222e      	movs	r2, #46	; 0x2e
 8002f2e:	701a      	strb	r2, [r3, #0]
	uint8_t rawtemp[2] = {0};
 8002f30:	1d3b      	adds	r3, r7, #4
 8002f32:	2200      	movs	r2, #0
 8002f34:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, 0xEE, 0xF4, 1, &data, 1, 1000);
 8002f36:	4815      	ldr	r0, [pc, #84]	; (8002f8c <utemp+0x68>)
 8002f38:	23fa      	movs	r3, #250	; 0xfa
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	9302      	str	r3, [sp, #8]
 8002f3e:	2301      	movs	r3, #1
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	1dfb      	adds	r3, r7, #7
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2301      	movs	r3, #1
 8002f48:	22f4      	movs	r2, #244	; 0xf4
 8002f4a:	21ee      	movs	r1, #238	; 0xee
 8002f4c:	f002 fd32 	bl	80059b4 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8002f50:	2005      	movs	r0, #5
 8002f52:	f001 fe8b 	bl	8004c6c <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, 0xEE, 0xF6, 1, rawtemp, 2, 1000);
 8002f56:	480d      	ldr	r0, [pc, #52]	; (8002f8c <utemp+0x68>)
 8002f58:	23fa      	movs	r3, #250	; 0xfa
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	9302      	str	r3, [sp, #8]
 8002f5e:	2302      	movs	r3, #2
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	2301      	movs	r3, #1
 8002f68:	22f6      	movs	r2, #246	; 0xf6
 8002f6a:	21ee      	movs	r1, #238	; 0xee
 8002f6c:	f002 fe50 	bl	8005c10 <HAL_I2C_Mem_Read>
	return (rawtemp[0] << 8) + rawtemp[1];
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	1d3b      	adds	r3, r7, #4
 8002f7c:	785b      	ldrb	r3, [r3, #1]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	18d3      	adds	r3, r2, r3
 8002f82:	b29b      	uxth	r3, r3
}
 8002f84:	0018      	movs	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b002      	add	sp, #8
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	2000025c 	.word	0x2000025c

08002f90 <getTemp>:

uint16_t getTemp() {
 8002f90:	b5b0      	push	{r4, r5, r7, lr}
 8002f92:	af00      	add	r7, sp, #0
	UT = utemp();
 8002f94:	f7ff ffc6 	bl	8002f24 <utemp>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	4b3c      	ldr	r3, [pc, #240]	; (8003090 <getTemp+0x100>)
 8002f9e:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8002fa0:	4b3b      	ldr	r3, [pc, #236]	; (8003090 <getTemp+0x100>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a3b      	ldr	r2, [pc, #236]	; (8003094 <getTemp+0x104>)
 8002fa6:	8812      	ldrh	r2, [r2, #0]
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	0018      	movs	r0, r3
 8002fac:	f7ff fdb4 	bl	8002b18 <__aeabi_i2d>
 8002fb0:	0004      	movs	r4, r0
 8002fb2:	000d      	movs	r5, r1
 8002fb4:	4b38      	ldr	r3, [pc, #224]	; (8003098 <getTemp+0x108>)
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f7ff fdad 	bl	8002b18 <__aeabi_i2d>
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	4b36      	ldr	r3, [pc, #216]	; (800309c <getTemp+0x10c>)
 8002fc2:	f7fe fb51 	bl	8001668 <__aeabi_ddiv>
 8002fc6:	0002      	movs	r2, r0
 8002fc8:	000b      	movs	r3, r1
 8002fca:	0020      	movs	r0, r4
 8002fcc:	0029      	movs	r1, r5
 8002fce:	f7fe ff51 	bl	8001e74 <__aeabi_dmul>
 8002fd2:	0002      	movs	r2, r0
 8002fd4:	000b      	movs	r3, r1
 8002fd6:	0010      	movs	r0, r2
 8002fd8:	0019      	movs	r1, r3
 8002fda:	f7ff fd67 	bl	8002aac <__aeabi_d2iz>
 8002fde:	0002      	movs	r2, r0
 8002fe0:	4b2f      	ldr	r3, [pc, #188]	; (80030a0 <getTemp+0x110>)
 8002fe2:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8002fe4:	4b2f      	ldr	r3, [pc, #188]	; (80030a4 <getTemp+0x114>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	5e9b      	ldrsh	r3, [r3, r2]
 8002fea:	0018      	movs	r0, r3
 8002fec:	f7ff fd94 	bl	8002b18 <__aeabi_i2d>
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	4b2d      	ldr	r3, [pc, #180]	; (80030a8 <getTemp+0x118>)
 8002ff4:	f7fe ff3e 	bl	8001e74 <__aeabi_dmul>
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	000b      	movs	r3, r1
 8002ffc:	0014      	movs	r4, r2
 8002ffe:	001d      	movs	r5, r3
 8003000:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <getTemp+0x11c>)
 8003002:	2200      	movs	r2, #0
 8003004:	5e9b      	ldrsh	r3, [r3, r2]
 8003006:	001a      	movs	r2, r3
 8003008:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <getTemp+0x110>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	18d3      	adds	r3, r2, r3
 800300e:	0018      	movs	r0, r3
 8003010:	f7ff fd82 	bl	8002b18 <__aeabi_i2d>
 8003014:	0002      	movs	r2, r0
 8003016:	000b      	movs	r3, r1
 8003018:	0020      	movs	r0, r4
 800301a:	0029      	movs	r1, r5
 800301c:	f7fe fb24 	bl	8001668 <__aeabi_ddiv>
 8003020:	0002      	movs	r2, r0
 8003022:	000b      	movs	r3, r1
 8003024:	0010      	movs	r0, r2
 8003026:	0019      	movs	r1, r3
 8003028:	f7ff fd40 	bl	8002aac <__aeabi_d2iz>
 800302c:	0002      	movs	r2, r0
 800302e:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <getTemp+0x120>)
 8003030:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 8003032:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <getTemp+0x110>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <getTemp+0x120>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	18d2      	adds	r2, r2, r3
 800303c:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <getTemp+0x124>)
 800303e:	601a      	str	r2, [r3, #0]
	TE = (B5+8)/(pow(2,4));
 8003040:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <getTemp+0x124>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3308      	adds	r3, #8
 8003046:	0018      	movs	r0, r3
 8003048:	f7ff fd66 	bl	8002b18 <__aeabi_i2d>
 800304c:	2200      	movs	r2, #0
 800304e:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <getTemp+0x128>)
 8003050:	f7fe fb0a 	bl	8001668 <__aeabi_ddiv>
 8003054:	0002      	movs	r2, r0
 8003056:	000b      	movs	r3, r1
 8003058:	0010      	movs	r0, r2
 800305a:	0019      	movs	r1, r3
 800305c:	f7ff fd26 	bl	8002aac <__aeabi_d2iz>
 8003060:	0002      	movs	r2, r0
 8003062:	4b16      	ldr	r3, [pc, #88]	; (80030bc <getTemp+0x12c>)
 8003064:	601a      	str	r2, [r3, #0]
	return TE/10.0;
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <getTemp+0x12c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	0018      	movs	r0, r3
 800306c:	f7ff fd54 	bl	8002b18 <__aeabi_i2d>
 8003070:	2200      	movs	r2, #0
 8003072:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <getTemp+0x130>)
 8003074:	f7fe faf8 	bl	8001668 <__aeabi_ddiv>
 8003078:	0002      	movs	r2, r0
 800307a:	000b      	movs	r3, r1
 800307c:	0010      	movs	r0, r2
 800307e:	0019      	movs	r1, r3
 8003080:	f7fd fa5a 	bl	8000538 <__aeabi_d2uiz>
 8003084:	0003      	movs	r3, r0
 8003086:	b29b      	uxth	r3, r3
}
 8003088:	0018      	movs	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	bdb0      	pop	{r4, r5, r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	200001fc 	.word	0x200001fc
 8003094:	2000022c 	.word	0x2000022c
 8003098:	20000234 	.word	0x20000234
 800309c:	40e00000 	.word	0x40e00000
 80030a0:	2000023c 	.word	0x2000023c
 80030a4:	20000254 	.word	0x20000254
 80030a8:	40a00000 	.word	0x40a00000
 80030ac:	20000228 	.word	0x20000228
 80030b0:	20000230 	.word	0x20000230
 80030b4:	20000204 	.word	0x20000204
 80030b8:	40300000 	.word	0x40300000
 80030bc:	20000218 	.word	0x20000218
 80030c0:	40240000 	.word	0x40240000

080030c4 <upress>:

uint32_t upress(int s) {
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b089      	sub	sp, #36	; 0x24
 80030c8:	af04      	add	r7, sp, #16
 80030ca:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x34 + (s << 6);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	019b      	lsls	r3, r3, #6
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	3334      	adds	r3, #52	; 0x34
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	240f      	movs	r4, #15
 80030da:	193b      	adds	r3, r7, r4
 80030dc:	701a      	strb	r2, [r3, #0]
	uint8_t rawpress[3] = {0};
 80030de:	230c      	movs	r3, #12
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <upress+0xd0>)
 80030e4:	8812      	ldrh	r2, [r2, #0]
 80030e6:	801a      	strh	r2, [r3, #0]
 80030e8:	2202      	movs	r2, #2
 80030ea:	2100      	movs	r1, #0
 80030ec:	5499      	strb	r1, [r3, r2]
	HAL_I2C_Mem_Write(&hi2c1, 0xEE, 0xF4, 1, &data, 1, 1000);
 80030ee:	482a      	ldr	r0, [pc, #168]	; (8003198 <upress+0xd4>)
 80030f0:	23fa      	movs	r3, #250	; 0xfa
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	9302      	str	r3, [sp, #8]
 80030f6:	2301      	movs	r3, #1
 80030f8:	9301      	str	r3, [sp, #4]
 80030fa:	193b      	adds	r3, r7, r4
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2301      	movs	r3, #1
 8003100:	22f4      	movs	r2, #244	; 0xf4
 8003102:	21ee      	movs	r1, #238	; 0xee
 8003104:	f002 fc56 	bl	80059b4 <HAL_I2C_Mem_Write>
	switch(s) {
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d01b      	beq.n	8003146 <upress+0x82>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b03      	cmp	r3, #3
 8003112:	dc1c      	bgt.n	800314e <upress+0x8a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d011      	beq.n	800313e <upress+0x7a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b02      	cmp	r3, #2
 800311e:	dc16      	bgt.n	800314e <upress+0x8a>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <upress+0x6a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d004      	beq.n	8003136 <upress+0x72>
 800312c:	e00f      	b.n	800314e <upress+0x8a>
	case(0):
			HAL_Delay(5);
 800312e:	2005      	movs	r0, #5
 8003130:	f001 fd9c 	bl	8004c6c <HAL_Delay>
	break;
 8003134:	e00b      	b.n	800314e <upress+0x8a>
	case(1):
			HAL_Delay(8);
 8003136:	2008      	movs	r0, #8
 8003138:	f001 fd98 	bl	8004c6c <HAL_Delay>
	break;
 800313c:	e007      	b.n	800314e <upress+0x8a>
	case(2):
			HAL_Delay(14);
 800313e:	200e      	movs	r0, #14
 8003140:	f001 fd94 	bl	8004c6c <HAL_Delay>
	break;
 8003144:	e003      	b.n	800314e <upress+0x8a>
	case(3):
			HAL_Delay(26);
 8003146:	201a      	movs	r0, #26
 8003148:	f001 fd90 	bl	8004c6c <HAL_Delay>
	break;
 800314c:	46c0      	nop			; (mov r8, r8)
	}
	HAL_I2C_Mem_Read(&hi2c1, 0xEE, 0xF6, 1, rawpress, 3, 1000);
 800314e:	4812      	ldr	r0, [pc, #72]	; (8003198 <upress+0xd4>)
 8003150:	23fa      	movs	r3, #250	; 0xfa
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	9302      	str	r3, [sp, #8]
 8003156:	2303      	movs	r3, #3
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	240c      	movs	r4, #12
 800315c:	193b      	adds	r3, r7, r4
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2301      	movs	r3, #1
 8003162:	22f6      	movs	r2, #246	; 0xf6
 8003164:	21ee      	movs	r1, #238	; 0xee
 8003166:	f002 fd53 	bl	8005c10 <HAL_I2C_Mem_Read>
	return (((rawpress[0] << 16) + (rawpress[1] << 8) + rawpress[2]) >> (8-s));
 800316a:	0021      	movs	r1, r4
 800316c:	187b      	adds	r3, r7, r1
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	041a      	lsls	r2, r3, #16
 8003172:	187b      	adds	r3, r7, r1
 8003174:	785b      	ldrb	r3, [r3, #1]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	18d3      	adds	r3, r2, r3
 800317a:	187a      	adds	r2, r7, r1
 800317c:	7892      	ldrb	r2, [r2, #2]
 800317e:	189a      	adds	r2, r3, r2
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2108      	movs	r1, #8
 8003184:	1acb      	subs	r3, r1, r3
 8003186:	411a      	asrs	r2, r3
 8003188:	0013      	movs	r3, r2
}
 800318a:	0018      	movs	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	b005      	add	sp, #20
 8003190:	bd90      	pop	{r4, r7, pc}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	0800c328 	.word	0x0800c328
 8003198:	2000025c 	.word	0x2000025c

0800319c <getPressure>:

float getPressure(int s) {
 800319c:	b5b0      	push	{r4, r5, r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	UP = upress(s);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7ff ff8c 	bl	80030c4 <upress>
 80031ac:	0003      	movs	r3, r0
 80031ae:	001a      	movs	r2, r3
 80031b0:	4bea      	ldr	r3, [pc, #936]	; (800355c <getPressure+0x3c0>)
 80031b2:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80031b4:	4bea      	ldr	r3, [pc, #936]	; (8003560 <getPressure+0x3c4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4aea      	ldr	r2, [pc, #936]	; (8003564 <getPressure+0x3c8>)
 80031ba:	8812      	ldrh	r2, [r2, #0]
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	0018      	movs	r0, r3
 80031c0:	f7ff fcaa 	bl	8002b18 <__aeabi_i2d>
 80031c4:	0004      	movs	r4, r0
 80031c6:	000d      	movs	r5, r1
 80031c8:	4be7      	ldr	r3, [pc, #924]	; (8003568 <getPressure+0x3cc>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	0018      	movs	r0, r3
 80031ce:	f7ff fca3 	bl	8002b18 <__aeabi_i2d>
 80031d2:	2200      	movs	r2, #0
 80031d4:	4be5      	ldr	r3, [pc, #916]	; (800356c <getPressure+0x3d0>)
 80031d6:	f7fe fa47 	bl	8001668 <__aeabi_ddiv>
 80031da:	0002      	movs	r2, r0
 80031dc:	000b      	movs	r3, r1
 80031de:	0020      	movs	r0, r4
 80031e0:	0029      	movs	r1, r5
 80031e2:	f7fe fe47 	bl	8001e74 <__aeabi_dmul>
 80031e6:	0002      	movs	r2, r0
 80031e8:	000b      	movs	r3, r1
 80031ea:	0010      	movs	r0, r2
 80031ec:	0019      	movs	r1, r3
 80031ee:	f7ff fc5d 	bl	8002aac <__aeabi_d2iz>
 80031f2:	0002      	movs	r2, r0
 80031f4:	4bde      	ldr	r3, [pc, #888]	; (8003570 <getPressure+0x3d4>)
 80031f6:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80031f8:	4bde      	ldr	r3, [pc, #888]	; (8003574 <getPressure+0x3d8>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	5e9b      	ldrsh	r3, [r3, r2]
 80031fe:	0018      	movs	r0, r3
 8003200:	f7ff fc8a 	bl	8002b18 <__aeabi_i2d>
 8003204:	2200      	movs	r2, #0
 8003206:	4bdc      	ldr	r3, [pc, #880]	; (8003578 <getPressure+0x3dc>)
 8003208:	f7fe fe34 	bl	8001e74 <__aeabi_dmul>
 800320c:	0002      	movs	r2, r0
 800320e:	000b      	movs	r3, r1
 8003210:	0014      	movs	r4, r2
 8003212:	001d      	movs	r5, r3
 8003214:	4bd9      	ldr	r3, [pc, #868]	; (800357c <getPressure+0x3e0>)
 8003216:	2200      	movs	r2, #0
 8003218:	5e9b      	ldrsh	r3, [r3, r2]
 800321a:	001a      	movs	r2, r3
 800321c:	4bd4      	ldr	r3, [pc, #848]	; (8003570 <getPressure+0x3d4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	18d3      	adds	r3, r2, r3
 8003222:	0018      	movs	r0, r3
 8003224:	f7ff fc78 	bl	8002b18 <__aeabi_i2d>
 8003228:	0002      	movs	r2, r0
 800322a:	000b      	movs	r3, r1
 800322c:	0020      	movs	r0, r4
 800322e:	0029      	movs	r1, r5
 8003230:	f7fe fa1a 	bl	8001668 <__aeabi_ddiv>
 8003234:	0002      	movs	r2, r0
 8003236:	000b      	movs	r3, r1
 8003238:	0010      	movs	r0, r2
 800323a:	0019      	movs	r1, r3
 800323c:	f7ff fc36 	bl	8002aac <__aeabi_d2iz>
 8003240:	0002      	movs	r2, r0
 8003242:	4bcf      	ldr	r3, [pc, #828]	; (8003580 <getPressure+0x3e4>)
 8003244:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 8003246:	4bca      	ldr	r3, [pc, #808]	; (8003570 <getPressure+0x3d4>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4bcd      	ldr	r3, [pc, #820]	; (8003580 <getPressure+0x3e4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	18d2      	adds	r2, r2, r3
 8003250:	4bcc      	ldr	r3, [pc, #816]	; (8003584 <getPressure+0x3e8>)
 8003252:	601a      	str	r2, [r3, #0]
	B6 = B5-4000;
 8003254:	4bcb      	ldr	r3, [pc, #812]	; (8003584 <getPressure+0x3e8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4acb      	ldr	r2, [pc, #812]	; (8003588 <getPressure+0x3ec>)
 800325a:	189a      	adds	r2, r3, r2
 800325c:	4bcb      	ldr	r3, [pc, #812]	; (800358c <getPressure+0x3f0>)
 800325e:	601a      	str	r2, [r3, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8003260:	4bcb      	ldr	r3, [pc, #812]	; (8003590 <getPressure+0x3f4>)
 8003262:	2200      	movs	r2, #0
 8003264:	5e9b      	ldrsh	r3, [r3, r2]
 8003266:	0018      	movs	r0, r3
 8003268:	f7ff fc56 	bl	8002b18 <__aeabi_i2d>
 800326c:	0004      	movs	r4, r0
 800326e:	000d      	movs	r5, r1
 8003270:	4bc6      	ldr	r3, [pc, #792]	; (800358c <getPressure+0x3f0>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	4bc5      	ldr	r3, [pc, #788]	; (800358c <getPressure+0x3f0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4353      	muls	r3, r2
 800327a:	0018      	movs	r0, r3
 800327c:	f7ff fc4c 	bl	8002b18 <__aeabi_i2d>
 8003280:	2200      	movs	r2, #0
 8003282:	4bc4      	ldr	r3, [pc, #784]	; (8003594 <getPressure+0x3f8>)
 8003284:	f7fe f9f0 	bl	8001668 <__aeabi_ddiv>
 8003288:	0002      	movs	r2, r0
 800328a:	000b      	movs	r3, r1
 800328c:	0020      	movs	r0, r4
 800328e:	0029      	movs	r1, r5
 8003290:	f7fe fdf0 	bl	8001e74 <__aeabi_dmul>
 8003294:	0002      	movs	r2, r0
 8003296:	000b      	movs	r3, r1
 8003298:	0010      	movs	r0, r2
 800329a:	0019      	movs	r1, r3
 800329c:	2200      	movs	r2, #0
 800329e:	4bb6      	ldr	r3, [pc, #728]	; (8003578 <getPressure+0x3dc>)
 80032a0:	f7fe f9e2 	bl	8001668 <__aeabi_ddiv>
 80032a4:	0002      	movs	r2, r0
 80032a6:	000b      	movs	r3, r1
 80032a8:	0010      	movs	r0, r2
 80032aa:	0019      	movs	r1, r3
 80032ac:	f7ff fbfe 	bl	8002aac <__aeabi_d2iz>
 80032b0:	0002      	movs	r2, r0
 80032b2:	4baf      	ldr	r3, [pc, #700]	; (8003570 <getPressure+0x3d4>)
 80032b4:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(pow(2,11));
 80032b6:	4bb8      	ldr	r3, [pc, #736]	; (8003598 <getPressure+0x3fc>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	5e9b      	ldrsh	r3, [r3, r2]
 80032bc:	001a      	movs	r2, r3
 80032be:	4bb3      	ldr	r3, [pc, #716]	; (800358c <getPressure+0x3f0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4353      	muls	r3, r2
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7ff fc27 	bl	8002b18 <__aeabi_i2d>
 80032ca:	2200      	movs	r2, #0
 80032cc:	4baa      	ldr	r3, [pc, #680]	; (8003578 <getPressure+0x3dc>)
 80032ce:	f7fe f9cb 	bl	8001668 <__aeabi_ddiv>
 80032d2:	0002      	movs	r2, r0
 80032d4:	000b      	movs	r3, r1
 80032d6:	0010      	movs	r0, r2
 80032d8:	0019      	movs	r1, r3
 80032da:	f7ff fbe7 	bl	8002aac <__aeabi_d2iz>
 80032de:	0002      	movs	r2, r0
 80032e0:	4ba7      	ldr	r3, [pc, #668]	; (8003580 <getPressure+0x3e4>)
 80032e2:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 80032e4:	4ba2      	ldr	r3, [pc, #648]	; (8003570 <getPressure+0x3d4>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4ba5      	ldr	r3, [pc, #660]	; (8003580 <getPressure+0x3e4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	18d2      	adds	r2, r2, r3
 80032ee:	4bab      	ldr	r3, [pc, #684]	; (800359c <getPressure+0x400>)
 80032f0:	601a      	str	r2, [r3, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80032f2:	4bab      	ldr	r3, [pc, #684]	; (80035a0 <getPressure+0x404>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	5e9b      	ldrsh	r3, [r3, r2]
 80032f8:	009a      	lsls	r2, r3, #2
 80032fa:	4ba8      	ldr	r3, [pc, #672]	; (800359c <getPressure+0x400>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	18d3      	adds	r3, r2, r3
 8003300:	4aa8      	ldr	r2, [pc, #672]	; (80035a4 <getPressure+0x408>)
 8003302:	2100      	movs	r1, #0
 8003304:	5e52      	ldrsh	r2, [r2, r1]
 8003306:	4093      	lsls	r3, r2
 8003308:	3302      	adds	r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	da00      	bge.n	8003310 <getPressure+0x174>
 800330e:	3303      	adds	r3, #3
 8003310:	109b      	asrs	r3, r3, #2
 8003312:	001a      	movs	r2, r3
 8003314:	4ba4      	ldr	r3, [pc, #656]	; (80035a8 <getPressure+0x40c>)
 8003316:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8003318:	4ba4      	ldr	r3, [pc, #656]	; (80035ac <getPressure+0x410>)
 800331a:	2200      	movs	r2, #0
 800331c:	5e9b      	ldrsh	r3, [r3, r2]
 800331e:	001a      	movs	r2, r3
 8003320:	4b9a      	ldr	r3, [pc, #616]	; (800358c <getPressure+0x3f0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4353      	muls	r3, r2
 8003326:	0018      	movs	r0, r3
 8003328:	f7ff fbf6 	bl	8002b18 <__aeabi_i2d>
 800332c:	2200      	movs	r2, #0
 800332e:	4ba0      	ldr	r3, [pc, #640]	; (80035b0 <getPressure+0x414>)
 8003330:	f7fe f99a 	bl	8001668 <__aeabi_ddiv>
 8003334:	0002      	movs	r2, r0
 8003336:	000b      	movs	r3, r1
 8003338:	0010      	movs	r0, r2
 800333a:	0019      	movs	r1, r3
 800333c:	f7ff fbb6 	bl	8002aac <__aeabi_d2iz>
 8003340:	0002      	movs	r2, r0
 8003342:	4b8b      	ldr	r3, [pc, #556]	; (8003570 <getPressure+0x3d4>)
 8003344:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8003346:	4b9b      	ldr	r3, [pc, #620]	; (80035b4 <getPressure+0x418>)
 8003348:	2200      	movs	r2, #0
 800334a:	5e9b      	ldrsh	r3, [r3, r2]
 800334c:	0018      	movs	r0, r3
 800334e:	f7ff fbe3 	bl	8002b18 <__aeabi_i2d>
 8003352:	0004      	movs	r4, r0
 8003354:	000d      	movs	r5, r1
 8003356:	4b8d      	ldr	r3, [pc, #564]	; (800358c <getPressure+0x3f0>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4b8c      	ldr	r3, [pc, #560]	; (800358c <getPressure+0x3f0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4353      	muls	r3, r2
 8003360:	0018      	movs	r0, r3
 8003362:	f7ff fbd9 	bl	8002b18 <__aeabi_i2d>
 8003366:	2200      	movs	r2, #0
 8003368:	4b8a      	ldr	r3, [pc, #552]	; (8003594 <getPressure+0x3f8>)
 800336a:	f7fe f97d 	bl	8001668 <__aeabi_ddiv>
 800336e:	0002      	movs	r2, r0
 8003370:	000b      	movs	r3, r1
 8003372:	0020      	movs	r0, r4
 8003374:	0029      	movs	r1, r5
 8003376:	f7fe fd7d 	bl	8001e74 <__aeabi_dmul>
 800337a:	0002      	movs	r2, r0
 800337c:	000b      	movs	r3, r1
 800337e:	0010      	movs	r0, r2
 8003380:	0019      	movs	r1, r3
 8003382:	2200      	movs	r2, #0
 8003384:	4b8c      	ldr	r3, [pc, #560]	; (80035b8 <getPressure+0x41c>)
 8003386:	f7fe f96f 	bl	8001668 <__aeabi_ddiv>
 800338a:	0002      	movs	r2, r0
 800338c:	000b      	movs	r3, r1
 800338e:	0010      	movs	r0, r2
 8003390:	0019      	movs	r1, r3
 8003392:	f7ff fb8b 	bl	8002aac <__aeabi_d2iz>
 8003396:	0002      	movs	r2, r0
 8003398:	4b79      	ldr	r3, [pc, #484]	; (8003580 <getPressure+0x3e4>)
 800339a:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 800339c:	4b74      	ldr	r3, [pc, #464]	; (8003570 <getPressure+0x3d4>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b77      	ldr	r3, [pc, #476]	; (8003580 <getPressure+0x3e4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	18d3      	adds	r3, r2, r3
 80033a6:	3302      	adds	r3, #2
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7ff fbb5 	bl	8002b18 <__aeabi_i2d>
 80033ae:	2200      	movs	r2, #0
 80033b0:	4b82      	ldr	r3, [pc, #520]	; (80035bc <getPressure+0x420>)
 80033b2:	f7fe f959 	bl	8001668 <__aeabi_ddiv>
 80033b6:	0002      	movs	r2, r0
 80033b8:	000b      	movs	r3, r1
 80033ba:	0010      	movs	r0, r2
 80033bc:	0019      	movs	r1, r3
 80033be:	f7ff fb75 	bl	8002aac <__aeabi_d2iz>
 80033c2:	0002      	movs	r2, r0
 80033c4:	4b75      	ldr	r3, [pc, #468]	; (800359c <getPressure+0x400>)
 80033c6:	601a      	str	r2, [r3, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80033c8:	4b7d      	ldr	r3, [pc, #500]	; (80035c0 <getPressure+0x424>)
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	001a      	movs	r2, r3
 80033ce:	4b73      	ldr	r3, [pc, #460]	; (800359c <getPressure+0x400>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2180      	movs	r1, #128	; 0x80
 80033d4:	0209      	lsls	r1, r1, #8
 80033d6:	468c      	mov	ip, r1
 80033d8:	4463      	add	r3, ip
 80033da:	4353      	muls	r3, r2
 80033dc:	0018      	movs	r0, r3
 80033de:	f7ff fbcb 	bl	8002b78 <__aeabi_ui2d>
 80033e2:	2200      	movs	r2, #0
 80033e4:	4b61      	ldr	r3, [pc, #388]	; (800356c <getPressure+0x3d0>)
 80033e6:	f7fe f93f 	bl	8001668 <__aeabi_ddiv>
 80033ea:	0002      	movs	r2, r0
 80033ec:	000b      	movs	r3, r1
 80033ee:	0010      	movs	r0, r2
 80033f0:	0019      	movs	r1, r3
 80033f2:	f7fd f8a1 	bl	8000538 <__aeabi_d2uiz>
 80033f6:	0002      	movs	r2, r0
 80033f8:	4b72      	ldr	r3, [pc, #456]	; (80035c4 <getPressure+0x428>)
 80033fa:	601a      	str	r2, [r3, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>s);
 80033fc:	4b57      	ldr	r3, [pc, #348]	; (800355c <getPressure+0x3c0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	001a      	movs	r2, r3
 8003402:	4b69      	ldr	r3, [pc, #420]	; (80035a8 <getPressure+0x40c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	496f      	ldr	r1, [pc, #444]	; (80035c8 <getPressure+0x42c>)
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	4111      	asrs	r1, r2
 800340e:	000a      	movs	r2, r1
 8003410:	435a      	muls	r2, r3
 8003412:	4b6e      	ldr	r3, [pc, #440]	; (80035cc <getPressure+0x430>)
 8003414:	601a      	str	r2, [r3, #0]
	if(B7 < 0x80000000) {
 8003416:	4b6d      	ldr	r3, [pc, #436]	; (80035cc <getPressure+0x430>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	db0d      	blt.n	800343a <getPressure+0x29e>
		Pressure = (B7*2) / B4;
 800341e:	4b6b      	ldr	r3, [pc, #428]	; (80035cc <getPressure+0x430>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	005a      	lsls	r2, r3, #1
 8003424:	4b67      	ldr	r3, [pc, #412]	; (80035c4 <getPressure+0x428>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	0019      	movs	r1, r3
 800342a:	0010      	movs	r0, r2
 800342c:	f7fc fe88 	bl	8000140 <__udivsi3>
 8003430:	0003      	movs	r3, r0
 8003432:	001a      	movs	r2, r3
 8003434:	4b66      	ldr	r3, [pc, #408]	; (80035d0 <getPressure+0x434>)
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e00c      	b.n	8003454 <getPressure+0x2b8>
	} else {
		Pressure = (B7/B4)*2;
 800343a:	4b64      	ldr	r3, [pc, #400]	; (80035cc <getPressure+0x430>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b61      	ldr	r3, [pc, #388]	; (80035c4 <getPressure+0x428>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	0019      	movs	r1, r3
 8003444:	0010      	movs	r0, r2
 8003446:	f7fc fe7b 	bl	8000140 <__udivsi3>
 800344a:	0003      	movs	r3, r0
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	001a      	movs	r2, r3
 8003450:	4b5f      	ldr	r3, [pc, #380]	; (80035d0 <getPressure+0x434>)
 8003452:	601a      	str	r2, [r3, #0]
	}
	X1 = (Pressure/(pow(2,8)))*(Pressure/(pow(2,8)));
 8003454:	4b5e      	ldr	r3, [pc, #376]	; (80035d0 <getPressure+0x434>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	0018      	movs	r0, r3
 800345a:	f7ff fb5d 	bl	8002b18 <__aeabi_i2d>
 800345e:	2200      	movs	r2, #0
 8003460:	4b5c      	ldr	r3, [pc, #368]	; (80035d4 <getPressure+0x438>)
 8003462:	f7fe f901 	bl	8001668 <__aeabi_ddiv>
 8003466:	0002      	movs	r2, r0
 8003468:	000b      	movs	r3, r1
 800346a:	0014      	movs	r4, r2
 800346c:	001d      	movs	r5, r3
 800346e:	4b58      	ldr	r3, [pc, #352]	; (80035d0 <getPressure+0x434>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	0018      	movs	r0, r3
 8003474:	f7ff fb50 	bl	8002b18 <__aeabi_i2d>
 8003478:	2200      	movs	r2, #0
 800347a:	4b56      	ldr	r3, [pc, #344]	; (80035d4 <getPressure+0x438>)
 800347c:	f7fe f8f4 	bl	8001668 <__aeabi_ddiv>
 8003480:	0002      	movs	r2, r0
 8003482:	000b      	movs	r3, r1
 8003484:	0020      	movs	r0, r4
 8003486:	0029      	movs	r1, r5
 8003488:	f7fe fcf4 	bl	8001e74 <__aeabi_dmul>
 800348c:	0002      	movs	r2, r0
 800348e:	000b      	movs	r3, r1
 8003490:	0010      	movs	r0, r2
 8003492:	0019      	movs	r1, r3
 8003494:	f7ff fb0a 	bl	8002aac <__aeabi_d2iz>
 8003498:	0002      	movs	r2, r0
 800349a:	4b35      	ldr	r3, [pc, #212]	; (8003570 <getPressure+0x3d4>)
 800349c:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(pow(2,16));
 800349e:	4b34      	ldr	r3, [pc, #208]	; (8003570 <getPressure+0x3d4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a4d      	ldr	r2, [pc, #308]	; (80035d8 <getPressure+0x43c>)
 80034a4:	4353      	muls	r3, r2
 80034a6:	0018      	movs	r0, r3
 80034a8:	f7ff fb36 	bl	8002b18 <__aeabi_i2d>
 80034ac:	2200      	movs	r2, #0
 80034ae:	4b42      	ldr	r3, [pc, #264]	; (80035b8 <getPressure+0x41c>)
 80034b0:	f7fe f8da 	bl	8001668 <__aeabi_ddiv>
 80034b4:	0002      	movs	r2, r0
 80034b6:	000b      	movs	r3, r1
 80034b8:	0010      	movs	r0, r2
 80034ba:	0019      	movs	r1, r3
 80034bc:	f7ff faf6 	bl	8002aac <__aeabi_d2iz>
 80034c0:	0002      	movs	r2, r0
 80034c2:	4b2b      	ldr	r3, [pc, #172]	; (8003570 <getPressure+0x3d4>)
 80034c4:	601a      	str	r2, [r3, #0]
	X2 = (-7357*Pressure)/(pow(2,16));
 80034c6:	4b42      	ldr	r3, [pc, #264]	; (80035d0 <getPressure+0x434>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	0013      	movs	r3, r2
 80034cc:	015b      	lsls	r3, r3, #5
 80034ce:	189b      	adds	r3, r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	00da      	lsls	r2, r3, #3
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	425b      	negs	r3, r3
 80034de:	0018      	movs	r0, r3
 80034e0:	f7ff fb1a 	bl	8002b18 <__aeabi_i2d>
 80034e4:	2200      	movs	r2, #0
 80034e6:	4b34      	ldr	r3, [pc, #208]	; (80035b8 <getPressure+0x41c>)
 80034e8:	f7fe f8be 	bl	8001668 <__aeabi_ddiv>
 80034ec:	0002      	movs	r2, r0
 80034ee:	000b      	movs	r3, r1
 80034f0:	0010      	movs	r0, r2
 80034f2:	0019      	movs	r1, r3
 80034f4:	f7ff fada 	bl	8002aac <__aeabi_d2iz>
 80034f8:	0002      	movs	r2, r0
 80034fa:	4b21      	ldr	r3, [pc, #132]	; (8003580 <getPressure+0x3e4>)
 80034fc:	601a      	str	r2, [r3, #0]
	Pressure = Pressure + (X1+X2+3791)/(pow(2,4));
 80034fe:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <getPressure+0x434>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	0018      	movs	r0, r3
 8003504:	f7ff fb08 	bl	8002b18 <__aeabi_i2d>
 8003508:	0004      	movs	r4, r0
 800350a:	000d      	movs	r5, r1
 800350c:	4b18      	ldr	r3, [pc, #96]	; (8003570 <getPressure+0x3d4>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <getPressure+0x3e4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	18d3      	adds	r3, r2, r3
 8003516:	4a31      	ldr	r2, [pc, #196]	; (80035dc <getPressure+0x440>)
 8003518:	4694      	mov	ip, r2
 800351a:	4463      	add	r3, ip
 800351c:	0018      	movs	r0, r3
 800351e:	f7ff fafb 	bl	8002b18 <__aeabi_i2d>
 8003522:	2200      	movs	r2, #0
 8003524:	4b2e      	ldr	r3, [pc, #184]	; (80035e0 <getPressure+0x444>)
 8003526:	f7fe f89f 	bl	8001668 <__aeabi_ddiv>
 800352a:	0002      	movs	r2, r0
 800352c:	000b      	movs	r3, r1
 800352e:	0020      	movs	r0, r4
 8003530:	0029      	movs	r1, r5
 8003532:	f7fd fd2f 	bl	8000f94 <__aeabi_dadd>
 8003536:	0002      	movs	r2, r0
 8003538:	000b      	movs	r3, r1
 800353a:	0010      	movs	r0, r2
 800353c:	0019      	movs	r1, r3
 800353e:	f7ff fab5 	bl	8002aac <__aeabi_d2iz>
 8003542:	0002      	movs	r2, r0
 8003544:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <getPressure+0x434>)
 8003546:	601a      	str	r2, [r3, #0]
	return Pressure;
 8003548:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <getPressure+0x434>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	0018      	movs	r0, r3
 800354e:	f7fd fc9f 	bl	8000e90 <__aeabi_i2f>
 8003552:	1c03      	adds	r3, r0, #0
}
 8003554:	1c18      	adds	r0, r3, #0
 8003556:	46bd      	mov	sp, r7
 8003558:	b002      	add	sp, #8
 800355a:	bdb0      	pop	{r4, r5, r7, pc}
 800355c:	20000250 	.word	0x20000250
 8003560:	200001fc 	.word	0x200001fc
 8003564:	2000022c 	.word	0x2000022c
 8003568:	20000234 	.word	0x20000234
 800356c:	40e00000 	.word	0x40e00000
 8003570:	2000023c 	.word	0x2000023c
 8003574:	20000254 	.word	0x20000254
 8003578:	40a00000 	.word	0x40a00000
 800357c:	20000228 	.word	0x20000228
 8003580:	20000230 	.word	0x20000230
 8003584:	20000204 	.word	0x20000204
 8003588:	fffff060 	.word	0xfffff060
 800358c:	2000020c 	.word	0x2000020c
 8003590:	20000244 	.word	0x20000244
 8003594:	40b00000 	.word	0x40b00000
 8003598:	20000240 	.word	0x20000240
 800359c:	20000248 	.word	0x20000248
 80035a0:	2000022a 	.word	0x2000022a
 80035a4:	20000200 	.word	0x20000200
 80035a8:	20000258 	.word	0x20000258
 80035ac:	20000242 	.word	0x20000242
 80035b0:	40c00000 	.word	0x40c00000
 80035b4:	2000024c 	.word	0x2000024c
 80035b8:	40f00000 	.word	0x40f00000
 80035bc:	40100000 	.word	0x40100000
 80035c0:	20000236 	.word	0x20000236
 80035c4:	20000208 	.word	0x20000208
 80035c8:	0000c350 	.word	0x0000c350
 80035cc:	20000210 	.word	0x20000210
 80035d0:	20000214 	.word	0x20000214
 80035d4:	40700000 	.word	0x40700000
 80035d8:	00000bde 	.word	0x00000bde
 80035dc:	00000ecf 	.word	0x00000ecf
 80035e0:	40300000 	.word	0x40300000

080035e4 <getAlt>:

float getAlt(int s) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	getPressure(s);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	0018      	movs	r0, r3
 80035f0:	f7ff fdd4 	bl	800319c <getPressure>
	return 44330*(1-(pow((Pressure/(float)101325), 0.19029495718)));
 80035f4:	4b15      	ldr	r3, [pc, #84]	; (800364c <getAlt+0x68>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f7fd fc49 	bl	8000e90 <__aeabi_i2f>
 80035fe:	1c03      	adds	r3, r0, #0
 8003600:	4913      	ldr	r1, [pc, #76]	; (8003650 <getAlt+0x6c>)
 8003602:	1c18      	adds	r0, r3, #0
 8003604:	f7fd fa1e 	bl	8000a44 <__aeabi_fdiv>
 8003608:	1c03      	adds	r3, r0, #0
 800360a:	1c18      	adds	r0, r3, #0
 800360c:	f7ff fada 	bl	8002bc4 <__aeabi_f2d>
 8003610:	4a10      	ldr	r2, [pc, #64]	; (8003654 <getAlt+0x70>)
 8003612:	4b11      	ldr	r3, [pc, #68]	; (8003658 <getAlt+0x74>)
 8003614:	f007 ff02 	bl	800b41c <pow>
 8003618:	0002      	movs	r2, r0
 800361a:	000b      	movs	r3, r1
 800361c:	2000      	movs	r0, #0
 800361e:	490f      	ldr	r1, [pc, #60]	; (800365c <getAlt+0x78>)
 8003620:	f7fe fe94 	bl	800234c <__aeabi_dsub>
 8003624:	0002      	movs	r2, r0
 8003626:	000b      	movs	r3, r1
 8003628:	0010      	movs	r0, r2
 800362a:	0019      	movs	r1, r3
 800362c:	2200      	movs	r2, #0
 800362e:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <getAlt+0x7c>)
 8003630:	f7fe fc20 	bl	8001e74 <__aeabi_dmul>
 8003634:	0002      	movs	r2, r0
 8003636:	000b      	movs	r3, r1
 8003638:	0010      	movs	r0, r2
 800363a:	0019      	movs	r1, r3
 800363c:	f7ff fb0a 	bl	8002c54 <__aeabi_d2f>
 8003640:	1c03      	adds	r3, r0, #0
}
 8003642:	1c18      	adds	r0, r3, #0
 8003644:	46bd      	mov	sp, r7
 8003646:	b002      	add	sp, #8
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	20000214 	.word	0x20000214
 8003650:	47c5e680 	.word	0x47c5e680
 8003654:	ccd745e4 	.word	0xccd745e4
 8003658:	3fc85b95 	.word	0x3fc85b95
 800365c:	3ff00000 	.word	0x3ff00000
 8003660:	40e5a540 	.word	0x40e5a540

08003664 <setOut>:
 *      Author: Michael
 */

#include "delay.h"

void setOut(GPIO_TypeDef* GPIOx) { //set gpio output mode
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b089      	sub	sp, #36	; 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800366c:	240c      	movs	r4, #12
 800366e:	193b      	adds	r3, r7, r4
 8003670:	0018      	movs	r0, r3
 8003672:	2314      	movs	r3, #20
 8003674:	001a      	movs	r2, r3
 8003676:	2100      	movs	r1, #0
 8003678:	f004 ff7c 	bl	8008574 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800367c:	193b      	adds	r3, r7, r4
 800367e:	2202      	movs	r2, #2
 8003680:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003682:	193b      	adds	r3, r7, r4
 8003684:	2201      	movs	r2, #1
 8003686:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003688:	193b      	adds	r3, r7, r4
 800368a:	2200      	movs	r2, #0
 800368c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800368e:	193a      	adds	r2, r7, r4
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	0011      	movs	r1, r2
 8003694:	0018      	movs	r0, r3
 8003696:	f001 ff3f 	bl	8005518 <HAL_GPIO_Init>
}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	b009      	add	sp, #36	; 0x24
 80036a0:	bd90      	pop	{r4, r7, pc}

080036a2 <setIn>:

void setIn(GPIO_TypeDef* GPIOx) { //set gpio input mode
 80036a2:	b590      	push	{r4, r7, lr}
 80036a4:	b089      	sub	sp, #36	; 0x24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036aa:	240c      	movs	r4, #12
 80036ac:	193b      	adds	r3, r7, r4
 80036ae:	0018      	movs	r0, r3
 80036b0:	2314      	movs	r3, #20
 80036b2:	001a      	movs	r2, r3
 80036b4:	2100      	movs	r1, #0
 80036b6:	f004 ff5d 	bl	8008574 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036ba:	193b      	adds	r3, r7, r4
 80036bc:	2202      	movs	r2, #2
 80036be:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036c0:	193b      	adds	r3, r7, r4
 80036c2:	2200      	movs	r2, #0
 80036c4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036c6:	193b      	adds	r3, r7, r4
 80036c8:	2201      	movs	r2, #1
 80036ca:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80036cc:	193a      	adds	r2, r7, r4
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	0011      	movs	r1, r2
 80036d2:	0018      	movs	r0, r3
 80036d4:	f001 ff20 	bl	8005518 <HAL_GPIO_Init>
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b009      	add	sp, #36	; 0x24
 80036de:	bd90      	pop	{r4, r7, pc}

080036e0 <sensorInit>:

#define PC GPIOC

void sensorInit() {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
	setOut(PC); //set output mode
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <sensorInit+0x50>)
 80036e6:	0018      	movs	r0, r3
 80036e8:	f7ff ffbc 	bl	8003664 <setOut>
	HAL_GPIO_WritePin(PC, GPIO_PIN_1, 1);
 80036ec:	4b10      	ldr	r3, [pc, #64]	; (8003730 <sensorInit+0x50>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	2102      	movs	r1, #2
 80036f2:	0018      	movs	r0, r3
 80036f4:	f002 f8ab 	bl	800584e <HAL_GPIO_WritePin>
	//HAL_Delay(200);
	HAL_Delay(200); //wait two seconds before doing anything. just keep the pin high
 80036f8:	20c8      	movs	r0, #200	; 0xc8
 80036fa:	f001 fab7 	bl	8004c6c <HAL_Delay>
	HAL_GPIO_WritePin(PC, GPIO_PIN_1, 0);
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <sensorInit+0x50>)
 8003700:	2200      	movs	r2, #0
 8003702:	2102      	movs	r1, #2
 8003704:	0018      	movs	r0, r3
 8003706:	f002 f8a2 	bl	800584e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800370a:	2005      	movs	r0, #5
 800370c:	f001 faae 	bl	8004c6c <HAL_Delay>
	//delay(5000); //5ms. wait 5 miliseconds
	HAL_GPIO_WritePin(PC, GPIO_PIN_1, 1);
 8003710:	4b07      	ldr	r3, [pc, #28]	; (8003730 <sensorInit+0x50>)
 8003712:	2201      	movs	r2, #1
 8003714:	2102      	movs	r1, #2
 8003716:	0018      	movs	r0, r3
 8003718:	f002 f899 	bl	800584e <HAL_GPIO_WritePin>
	delay(20); //wait 20 microseconds
 800371c:	2014      	movs	r0, #20
 800371e:	f000 f98b 	bl	8003a38 <delay>
	setIn(PC); //set input to read the sensor response in next function
 8003722:	4b03      	ldr	r3, [pc, #12]	; (8003730 <sensorInit+0x50>)
 8003724:	0018      	movs	r0, r3
 8003726:	f7ff ffbc 	bl	80036a2 <setIn>
}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	50000800 	.word	0x50000800

08003734 <sensorVerify>:

uint8_t sensorVerify() {
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
	//setIn(PA);
	uint8_t r = 0;
 800373a:	1dfb      	adds	r3, r7, #7
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]
	delay(40);
 8003740:	2028      	movs	r0, #40	; 0x28
 8003742:	f000 f979 	bl	8003a38 <delay>
	if(HAL_GPIO_ReadPin(PC, GPIO_PIN_1) == GPIO_PIN_RESET) {  //if the pin is low
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <sensorVerify+0x60>)
 8003748:	2102      	movs	r1, #2
 800374a:	0018      	movs	r0, r3
 800374c:	f002 f862 	bl	8005814 <HAL_GPIO_ReadPin>
 8003750:	1e03      	subs	r3, r0, #0
 8003752:	d110      	bne.n	8003776 <sensorVerify+0x42>
		delay(80);
 8003754:	2050      	movs	r0, #80	; 0x50
 8003756:	f000 f96f 	bl	8003a38 <delay>
		if((HAL_GPIO_ReadPin(PC, GPIO_PIN_1))) { //if the pin is high
 800375a:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <sensorVerify+0x60>)
 800375c:	2102      	movs	r1, #2
 800375e:	0018      	movs	r0, r3
 8003760:	f002 f858 	bl	8005814 <HAL_GPIO_ReadPin>
 8003764:	1e03      	subs	r3, r0, #0
 8003766:	d003      	beq.n	8003770 <sensorVerify+0x3c>
			r = 1;
 8003768:	1dfb      	adds	r3, r7, #7
 800376a:	2201      	movs	r2, #1
 800376c:	701a      	strb	r2, [r3, #0]
 800376e:	e002      	b.n	8003776 <sensorVerify+0x42>
		} else {
			r = -1;
 8003770:	1dfb      	adds	r3, r7, #7
 8003772:	22ff      	movs	r2, #255	; 0xff
 8003774:	701a      	strb	r2, [r3, #0]
		}
	}
	while((HAL_GPIO_ReadPin(PC, GPIO_PIN_1)));
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <sensorVerify+0x60>)
 800377a:	2102      	movs	r1, #2
 800377c:	0018      	movs	r0, r3
 800377e:	f002 f849 	bl	8005814 <HAL_GPIO_ReadPin>
 8003782:	1e03      	subs	r3, r0, #0
 8003784:	d1f8      	bne.n	8003778 <sensorVerify+0x44>
	//sensor does not send back response?
	//r = 0 indicates that the pin is always high and never pulls down.
	return r;
 8003786:	1dfb      	adds	r3, r7, #7
 8003788:	781b      	ldrb	r3, [r3, #0]
}
 800378a:	0018      	movs	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	b002      	add	sp, #8
 8003790:	bd80      	pop	{r7, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	50000800 	.word	0x50000800

08003798 <sensorRead>:

uint8_t sensorRead() {
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for(j = 0; j < 8; j++) {
 800379e:	1dbb      	adds	r3, r7, #6
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]
 80037a4:	e03f      	b.n	8003826 <sensorRead+0x8e>
		while(!(HAL_GPIO_ReadPin(PC, GPIO_PIN_1)));
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <sensorRead+0xa4>)
 80037aa:	2102      	movs	r1, #2
 80037ac:	0018      	movs	r0, r3
 80037ae:	f002 f831 	bl	8005814 <HAL_GPIO_ReadPin>
 80037b2:	1e03      	subs	r3, r0, #0
 80037b4:	d0f8      	beq.n	80037a8 <sensorRead+0x10>
		delay(40);
 80037b6:	2028      	movs	r0, #40	; 0x28
 80037b8:	f000 f93e 	bl	8003a38 <delay>
		if(!(HAL_GPIO_ReadPin(PC, GPIO_PIN_1))) {
 80037bc:	4b1f      	ldr	r3, [pc, #124]	; (800383c <sensorRead+0xa4>)
 80037be:	2102      	movs	r1, #2
 80037c0:	0018      	movs	r0, r3
 80037c2:	f002 f827 	bl	8005814 <HAL_GPIO_ReadPin>
 80037c6:	1e03      	subs	r3, r0, #0
 80037c8:	d111      	bne.n	80037ee <sensorRead+0x56>
			i &= ~(1<<(7-j));
 80037ca:	1dbb      	adds	r3, r7, #6
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2207      	movs	r2, #7
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2201      	movs	r2, #1
 80037d4:	409a      	lsls	r2, r3
 80037d6:	0013      	movs	r3, r2
 80037d8:	b25b      	sxtb	r3, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	b25b      	sxtb	r3, r3
 80037de:	1dfa      	adds	r2, r7, #7
 80037e0:	7812      	ldrb	r2, [r2, #0]
 80037e2:	b252      	sxtb	r2, r2
 80037e4:	4013      	ands	r3, r2
 80037e6:	b25a      	sxtb	r2, r3
 80037e8:	1dfb      	adds	r3, r7, #7
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e00e      	b.n	800380c <sensorRead+0x74>
		} else {
			i |= (1<<(7-j));
 80037ee:	1dbb      	adds	r3, r7, #6
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2207      	movs	r2, #7
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2201      	movs	r2, #1
 80037f8:	409a      	lsls	r2, r3
 80037fa:	0013      	movs	r3, r2
 80037fc:	b25a      	sxtb	r2, r3
 80037fe:	1dfb      	adds	r3, r7, #7
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	b25b      	sxtb	r3, r3
 8003804:	4313      	orrs	r3, r2
 8003806:	b25a      	sxtb	r2, r3
 8003808:	1dfb      	adds	r3, r7, #7
 800380a:	701a      	strb	r2, [r3, #0]
		}
		while((HAL_GPIO_ReadPin(PC, GPIO_PIN_1)));
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <sensorRead+0xa4>)
 8003810:	2102      	movs	r1, #2
 8003812:	0018      	movs	r0, r3
 8003814:	f001 fffe 	bl	8005814 <HAL_GPIO_ReadPin>
 8003818:	1e03      	subs	r3, r0, #0
 800381a:	d1f8      	bne.n	800380e <sensorRead+0x76>
	for(j = 0; j < 8; j++) {
 800381c:	1dbb      	adds	r3, r7, #6
 800381e:	781a      	ldrb	r2, [r3, #0]
 8003820:	1dbb      	adds	r3, r7, #6
 8003822:	3201      	adds	r2, #1
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	1dbb      	adds	r3, r7, #6
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b07      	cmp	r3, #7
 800382c:	d9bb      	bls.n	80037a6 <sensorRead+0xe>
	}
	return i;
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	781b      	ldrb	r3, [r3, #0]
}
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	b002      	add	sp, #8
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	50000800 	.word	0x50000800

08003840 <setOutDS>:
 */

#include "delay.h"
#define PC GPIOC

void setOutDS(GPIO_TypeDef* GPIOx) { //set gpio output mode
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b089      	sub	sp, #36	; 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003848:	240c      	movs	r4, #12
 800384a:	193b      	adds	r3, r7, r4
 800384c:	0018      	movs	r0, r3
 800384e:	2314      	movs	r3, #20
 8003850:	001a      	movs	r2, r3
 8003852:	2100      	movs	r1, #0
 8003854:	f004 fe8e 	bl	8008574 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003858:	193b      	adds	r3, r7, r4
 800385a:	2204      	movs	r2, #4
 800385c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800385e:	193b      	adds	r3, r7, r4
 8003860:	2201      	movs	r2, #1
 8003862:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003864:	193b      	adds	r3, r7, r4
 8003866:	2200      	movs	r2, #0
 8003868:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800386a:	193a      	adds	r2, r7, r4
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	0011      	movs	r1, r2
 8003870:	0018      	movs	r0, r3
 8003872:	f001 fe51 	bl	8005518 <HAL_GPIO_Init>
}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	46bd      	mov	sp, r7
 800387a:	b009      	add	sp, #36	; 0x24
 800387c:	bd90      	pop	{r4, r7, pc}

0800387e <setInDS>:

void setInDS(GPIO_TypeDef* GPIOx) { //set gpio input mode
 800387e:	b590      	push	{r4, r7, lr}
 8003880:	b089      	sub	sp, #36	; 0x24
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003886:	240c      	movs	r4, #12
 8003888:	193b      	adds	r3, r7, r4
 800388a:	0018      	movs	r0, r3
 800388c:	2314      	movs	r3, #20
 800388e:	001a      	movs	r2, r3
 8003890:	2100      	movs	r1, #0
 8003892:	f004 fe6f 	bl	8008574 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003896:	193b      	adds	r3, r7, r4
 8003898:	2204      	movs	r2, #4
 800389a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800389c:	193b      	adds	r3, r7, r4
 800389e:	2200      	movs	r2, #0
 80038a0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038a2:	193b      	adds	r3, r7, r4
 80038a4:	2201      	movs	r2, #1
 80038a6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80038a8:	193a      	adds	r2, r7, r4
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	0011      	movs	r1, r2
 80038ae:	0018      	movs	r0, r3
 80038b0:	f001 fe32 	bl	8005518 <HAL_GPIO_Init>
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b009      	add	sp, #36	; 0x24
 80038ba:	bd90      	pop	{r4, r7, pc}

080038bc <dsInit>:

uint8_t dsInit() {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
	uint8_t r = 0;
 80038c2:	1dfb      	adds	r3, r7, #7
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
	setOutDS(PC);
 80038c8:	4b15      	ldr	r3, [pc, #84]	; (8003920 <dsInit+0x64>)
 80038ca:	0018      	movs	r0, r3
 80038cc:	f7ff ffb8 	bl	8003840 <setOutDS>
	HAL_GPIO_WritePin(PC, GPIO_PIN_2, 0);
 80038d0:	4b13      	ldr	r3, [pc, #76]	; (8003920 <dsInit+0x64>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	2104      	movs	r1, #4
 80038d6:	0018      	movs	r0, r3
 80038d8:	f001 ffb9 	bl	800584e <HAL_GPIO_WritePin>
	delay(50);
 80038dc:	2032      	movs	r0, #50	; 0x32
 80038de:	f000 f8ab 	bl	8003a38 <delay>
	//delay(480);
	setInDS(PC);
 80038e2:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <dsInit+0x64>)
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7ff ffca 	bl	800387e <setInDS>
	delay(50);
 80038ea:	2032      	movs	r0, #50	; 0x32
 80038ec:	f000 f8a4 	bl	8003a38 <delay>
	//delay(80);
	if(!(HAL_GPIO_ReadPin(PC, GPIO_PIN_2))) {
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <dsInit+0x64>)
 80038f2:	2104      	movs	r1, #4
 80038f4:	0018      	movs	r0, r3
 80038f6:	f001 ff8d 	bl	8005814 <HAL_GPIO_ReadPin>
 80038fa:	1e03      	subs	r3, r0, #0
 80038fc:	d103      	bne.n	8003906 <dsInit+0x4a>
		r = 1;
 80038fe:	1dfb      	adds	r3, r7, #7
 8003900:	2201      	movs	r2, #1
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	e002      	b.n	800390c <dsInit+0x50>
	} else {
		r = -1;
 8003906:	1dfb      	adds	r3, r7, #7
 8003908:	22ff      	movs	r2, #255	; 0xff
 800390a:	701a      	strb	r2, [r3, #0]
	}
	delay(50);
 800390c:	2032      	movs	r0, #50	; 0x32
 800390e:	f000 f893 	bl	8003a38 <delay>
	//delay(400);
	return r;
 8003912:	1dfb      	adds	r3, r7, #7
 8003914:	781b      	ldrb	r3, [r3, #0]
}
 8003916:	0018      	movs	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	b002      	add	sp, #8
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	50000800 	.word	0x50000800

08003924 <dsWrite>:

void dsWrite(uint8_t data) {
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	0002      	movs	r2, r0
 800392c:	1dfb      	adds	r3, r7, #7
 800392e:	701a      	strb	r2, [r3, #0]
	setOutDS(PC);
 8003930:	4b1f      	ldr	r3, [pc, #124]	; (80039b0 <dsWrite+0x8c>)
 8003932:	0018      	movs	r0, r3
 8003934:	f7ff ff84 	bl	8003840 <setOutDS>
	for(int i = 0; i < 8; i++) {
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	e030      	b.n	80039a0 <dsWrite+0x7c>
		if((data & (1 << i)) != 0) {
 800393e:	1dfb      	adds	r3, r7, #7
 8003940:	781a      	ldrb	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	411a      	asrs	r2, r3
 8003946:	0013      	movs	r3, r2
 8003948:	2201      	movs	r2, #1
 800394a:	4013      	ands	r3, r2
 800394c:	d014      	beq.n	8003978 <dsWrite+0x54>
			setOutDS(PC);
 800394e:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <dsWrite+0x8c>)
 8003950:	0018      	movs	r0, r3
 8003952:	f7ff ff75 	bl	8003840 <setOutDS>
			HAL_GPIO_WritePin(PC, GPIO_PIN_2, 0);
 8003956:	4b16      	ldr	r3, [pc, #88]	; (80039b0 <dsWrite+0x8c>)
 8003958:	2200      	movs	r2, #0
 800395a:	2104      	movs	r1, #4
 800395c:	0018      	movs	r0, r3
 800395e:	f001 ff76 	bl	800584e <HAL_GPIO_WritePin>
			delay(1);
 8003962:	2001      	movs	r0, #1
 8003964:	f000 f868 	bl	8003a38 <delay>
			setInDS(PC);
 8003968:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <dsWrite+0x8c>)
 800396a:	0018      	movs	r0, r3
 800396c:	f7ff ff87 	bl	800387e <setInDS>
			delay(50);
 8003970:	2032      	movs	r0, #50	; 0x32
 8003972:	f000 f861 	bl	8003a38 <delay>
 8003976:	e010      	b.n	800399a <dsWrite+0x76>
		} else {
			setOutDS(PC);
 8003978:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <dsWrite+0x8c>)
 800397a:	0018      	movs	r0, r3
 800397c:	f7ff ff60 	bl	8003840 <setOutDS>
			HAL_GPIO_WritePin(PC, GPIO_PIN_2, 0);
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <dsWrite+0x8c>)
 8003982:	2200      	movs	r2, #0
 8003984:	2104      	movs	r1, #4
 8003986:	0018      	movs	r0, r3
 8003988:	f001 ff61 	bl	800584e <HAL_GPIO_WritePin>
			delay(50);
 800398c:	2032      	movs	r0, #50	; 0x32
 800398e:	f000 f853 	bl	8003a38 <delay>
			setInDS(PC);
 8003992:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <dsWrite+0x8c>)
 8003994:	0018      	movs	r0, r3
 8003996:	f7ff ff72 	bl	800387e <setInDS>
	for(int i = 0; i < 8; i++) {
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3301      	adds	r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b07      	cmp	r3, #7
 80039a4:	ddcb      	ble.n	800393e <dsWrite+0x1a>
		}
	}
}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	46c0      	nop			; (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b004      	add	sp, #16
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	50000800 	.word	0x50000800

080039b4 <dsRead>:

uint8_t dsRead() {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
	uint8_t v = 0;
 80039ba:	1dfb      	adds	r3, r7, #7
 80039bc:	2200      	movs	r2, #0
 80039be:	701a      	strb	r2, [r3, #0]
	setInDS(PC);
 80039c0:	4b1c      	ldr	r3, [pc, #112]	; (8003a34 <dsRead+0x80>)
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7ff ff5b 	bl	800387e <setInDS>
	for(int i = 0; i < 8; i++) {
 80039c8:	2300      	movs	r3, #0
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	e029      	b.n	8003a22 <dsRead+0x6e>
		setOutDS(PC);
 80039ce:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <dsRead+0x80>)
 80039d0:	0018      	movs	r0, r3
 80039d2:	f7ff ff35 	bl	8003840 <setOutDS>
		HAL_GPIO_WritePin(PC, GPIO_PIN_2, 0);
 80039d6:	4b17      	ldr	r3, [pc, #92]	; (8003a34 <dsRead+0x80>)
 80039d8:	2200      	movs	r2, #0
 80039da:	2104      	movs	r1, #4
 80039dc:	0018      	movs	r0, r3
 80039de:	f001 ff36 	bl	800584e <HAL_GPIO_WritePin>
		delay(2);
 80039e2:	2002      	movs	r0, #2
 80039e4:	f000 f828 	bl	8003a38 <delay>
		setInDS(PC);
 80039e8:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <dsRead+0x80>)
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7ff ff47 	bl	800387e <setInDS>
		if(HAL_GPIO_ReadPin(PC, GPIO_PIN_2)) {
 80039f0:	4b10      	ldr	r3, [pc, #64]	; (8003a34 <dsRead+0x80>)
 80039f2:	2104      	movs	r1, #4
 80039f4:	0018      	movs	r0, r3
 80039f6:	f001 ff0d 	bl	8005814 <HAL_GPIO_ReadPin>
 80039fa:	1e03      	subs	r3, r0, #0
 80039fc:	d00b      	beq.n	8003a16 <dsRead+0x62>
			v |= 1 << i;
 80039fe:	2201      	movs	r2, #1
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	409a      	lsls	r2, r3
 8003a04:	0013      	movs	r3, r2
 8003a06:	b25a      	sxtb	r2, r3
 8003a08:	1dfb      	adds	r3, r7, #7
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	b25b      	sxtb	r3, r3
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	b25a      	sxtb	r2, r3
 8003a12:	1dfb      	adds	r3, r7, #7
 8003a14:	701a      	strb	r2, [r3, #0]
		}
		delay(60);
 8003a16:	203c      	movs	r0, #60	; 0x3c
 8003a18:	f000 f80e 	bl	8003a38 <delay>
	for(int i = 0; i < 8; i++) {
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b07      	cmp	r3, #7
 8003a26:	ddd2      	ble.n	80039ce <dsRead+0x1a>
	}
	return v;
 8003a28:	1dfb      	adds	r3, r7, #7
 8003a2a:	781b      	ldrb	r3, [r3, #0]
}
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b002      	add	sp, #8
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	50000800 	.word	0x50000800

08003a38 <delay>:
 */

#include "stm32l0xx_hal.h"
extern TIM_HandleTypeDef htim2;

void delay(uint16_t time) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	0002      	movs	r2, r0
 8003a40:	1dbb      	adds	r3, r7, #6
 8003a42:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <delay+0x30>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim2)) < time);
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <delay+0x30>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a54:	1dbb      	adds	r3, r7, #6
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d3f8      	bcc.n	8003a4e <delay+0x16>
}
 8003a5c:	46c0      	nop			; (mov r8, r8)
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b002      	add	sp, #8
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	200003b0 	.word	0x200003b0

08003a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a6e:	4cfc      	ldr	r4, [pc, #1008]	; (8003e60 <main+0x3f4>)
 8003a70:	44a5      	add	sp, r4
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//----------------------------------------------------variables
	//-------------------------------------GPS
	uint8_t buf[71] = "";
 8003a74:	2390      	movs	r3, #144	; 0x90
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	2243      	movs	r2, #67	; 0x43
 8003a82:	2100      	movs	r1, #0
 8003a84:	0018      	movs	r0, r3
 8003a86:	f004 fd75 	bl	8008574 <memset>
	uint8_t msg0[32] = "\n\rFUll NMEA String: ";
 8003a8a:	2388      	movs	r3, #136	; 0x88
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	18f9      	adds	r1, r7, r3
 8003a90:	4af4      	ldr	r2, [pc, #976]	; (8003e64 <main+0x3f8>)
 8003a92:	000b      	movs	r3, r1
 8003a94:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003a96:	c331      	stmia	r3!, {r0, r4, r5}
 8003a98:	ca11      	ldmia	r2!, {r0, r4}
 8003a9a:	c311      	stmia	r3!, {r0, r4}
 8003a9c:	7812      	ldrb	r2, [r2, #0]
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	2315      	movs	r3, #21
 8003aa2:	18cb      	adds	r3, r1, r3
 8003aa4:	220b      	movs	r2, #11
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f004 fd63 	bl	8008574 <memset>
	uint8_t msg1[32] = "\n\rLongitude: ";
 8003aae:	2380      	movs	r3, #128	; 0x80
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	18f9      	adds	r1, r7, r3
 8003ab4:	4aec      	ldr	r2, [pc, #944]	; (8003e68 <main+0x3fc>)
 8003ab6:	000b      	movs	r3, r1
 8003ab8:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003aba:	c331      	stmia	r3!, {r0, r4, r5}
 8003abc:	8812      	ldrh	r2, [r2, #0]
 8003abe:	801a      	strh	r2, [r3, #0]
 8003ac0:	230e      	movs	r3, #14
 8003ac2:	18cb      	adds	r3, r1, r3
 8003ac4:	2212      	movs	r2, #18
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f004 fd53 	bl	8008574 <memset>
	uint8_t msg2[32] = "\n\rLatitude: ";
 8003ace:	23f0      	movs	r3, #240	; 0xf0
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	18f9      	adds	r1, r7, r3
 8003ad4:	4ae5      	ldr	r2, [pc, #916]	; (8003e6c <main+0x400>)
 8003ad6:	000b      	movs	r3, r1
 8003ad8:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003ada:	c331      	stmia	r3!, {r0, r4, r5}
 8003adc:	7812      	ldrb	r2, [r2, #0]
 8003ade:	701a      	strb	r2, [r3, #0]
 8003ae0:	230d      	movs	r3, #13
 8003ae2:	18cb      	adds	r3, r1, r3
 8003ae4:	2213      	movs	r2, #19
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f004 fd43 	bl	8008574 <memset>
	uint8_t command[45] = "PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"; //For GGA and RMC information only
 8003aee:	24d8      	movs	r4, #216	; 0xd8
 8003af0:	0064      	lsls	r4, r4, #1
 8003af2:	193b      	adds	r3, r7, r4
 8003af4:	4ade      	ldr	r2, [pc, #888]	; (8003e70 <main+0x404>)
 8003af6:	ca23      	ldmia	r2!, {r0, r1, r5}
 8003af8:	c323      	stmia	r3!, {r0, r1, r5}
 8003afa:	ca23      	ldmia	r2!, {r0, r1, r5}
 8003afc:	c323      	stmia	r3!, {r0, r1, r5}
 8003afe:	ca23      	ldmia	r2!, {r0, r1, r5}
 8003b00:	c323      	stmia	r3!, {r0, r1, r5}
 8003b02:	ca03      	ldmia	r2!, {r0, r1}
 8003b04:	c303      	stmia	r3!, {r0, r1}
 8003b06:	7812      	ldrb	r2, [r2, #0]
 8003b08:	701a      	strb	r2, [r3, #0]
	//-------------------------------------BMP180
	float BMP_TempC, BMP_Alt, BMP_Pressure;
	char BMP180_PressBuffer[50];
	char BMP180_AltBuffer[50];
	char BMP180_TempBuffer[50];
	char skipp[] = "@@@";
 8003b0a:	4bda      	ldr	r3, [pc, #872]	; (8003e74 <main+0x408>)
 8003b0c:	22a6      	movs	r2, #166	; 0xa6
 8003b0e:	0092      	lsls	r2, r2, #2
 8003b10:	4694      	mov	ip, r2
 8003b12:	44bc      	add	ip, r7
 8003b14:	4463      	add	r3, ip
 8003b16:	4ad8      	ldr	r2, [pc, #864]	; (8003e78 <main+0x40c>)
 8003b18:	601a      	str	r2, [r3, #0]
	//-------------------------------------DHT22
	float DHT_TempC = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	1c7a      	adds	r2, r7, #1
 8003b1e:	32ff      	adds	r2, #255	; 0xff
 8003b20:	6013      	str	r3, [r2, #0]
	float DHT_Hum = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	22fc      	movs	r2, #252	; 0xfc
 8003b26:	18ba      	adds	r2, r7, r2
 8003b28:	6013      	str	r3, [r2, #0]
	uint8_t thp[] = {0, 0, 0, 0, 0};			//t1, t2, h1, h2, p
 8003b2a:	4bd4      	ldr	r3, [pc, #848]	; (8003e7c <main+0x410>)
 8003b2c:	22a6      	movs	r2, #166	; 0xa6
 8003b2e:	0092      	lsls	r2, r2, #2
 8003b30:	4694      	mov	ip, r2
 8003b32:	44bc      	add	ip, r7
 8003b34:	4463      	add	r3, ip
 8003b36:	4ad2      	ldr	r2, [pc, #840]	; (8003e80 <main+0x414>)
 8003b38:	6811      	ldr	r1, [r2, #0]
 8003b3a:	6019      	str	r1, [r3, #0]
 8003b3c:	7912      	ldrb	r2, [r2, #4]
 8003b3e:	711a      	strb	r2, [r3, #4]
	uint16_t temphumsum[] = {0, 0, 0};			//temp, hum, sum
 8003b40:	4bd0      	ldr	r3, [pc, #832]	; (8003e84 <main+0x418>)
 8003b42:	22a6      	movs	r2, #166	; 0xa6
 8003b44:	0092      	lsls	r2, r2, #2
 8003b46:	4694      	mov	ip, r2
 8003b48:	44bc      	add	ip, r7
 8003b4a:	4463      	add	r3, ip
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	801a      	strh	r2, [r3, #0]
 8003b50:	4bcc      	ldr	r3, [pc, #816]	; (8003e84 <main+0x418>)
 8003b52:	22a6      	movs	r2, #166	; 0xa6
 8003b54:	0092      	lsls	r2, r2, #2
 8003b56:	4694      	mov	ip, r2
 8003b58:	44bc      	add	ip, r7
 8003b5a:	4463      	add	r3, ip
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	805a      	strh	r2, [r3, #2]
 8003b60:	4bc8      	ldr	r3, [pc, #800]	; (8003e84 <main+0x418>)
 8003b62:	22a6      	movs	r2, #166	; 0xa6
 8003b64:	0092      	lsls	r2, r2, #2
 8003b66:	4694      	mov	ip, r2
 8003b68:	44bc      	add	ip, r7
 8003b6a:	4463      	add	r3, ip
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	809a      	strh	r2, [r3, #4]
	char DHT22_TempBuffer[50];
	char DHT22_HumBuffer[50];
	//-------------------------------------DS18B20
	uint8_t DS18B20_tempArr[] = {0, 0};
 8003b70:	4bc5      	ldr	r3, [pc, #788]	; (8003e88 <main+0x41c>)
 8003b72:	22a6      	movs	r2, #166	; 0xa6
 8003b74:	0092      	lsls	r2, r2, #2
 8003b76:	4694      	mov	ip, r2
 8003b78:	44bc      	add	ip, r7
 8003b7a:	4463      	add	r3, ip
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	801a      	strh	r2, [r3, #0]
	uint16_t DS18B20_T;
	float internalTemp = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	67bb      	str	r3, [r7, #120]	; 0x78
	char DS18B20_TempBuffer[50];
	//-------------------------------------LDR
	uint16_t light = 0;
 8003b84:	4bc1      	ldr	r3, [pc, #772]	; (8003e8c <main+0x420>)
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	2200      	movs	r2, #0
 8003b8a:	801a      	strh	r2, [r3, #0]
	float voltage;
	//char voltBuffer[50];
	//-------------------------------------moisture
	uint16_t  moisture = 0;
 8003b8c:	4bc0      	ldr	r3, [pc, #768]	; (8003e90 <main+0x424>)
 8003b8e:	22a6      	movs	r2, #166	; 0xa6
 8003b90:	0092      	lsls	r2, r2, #2
 8003b92:	4694      	mov	ip, r2
 8003b94:	44bc      	add	ip, r7
 8003b96:	4463      	add	r3, ip
 8003b98:	2200      	movs	r2, #0
 8003b9a:	801a      	strh	r2, [r3, #0]
	char moistbuffer[50];
	ADC_ChannelConfTypeDef sConfig2 = {13};
 8003b9c:	4bbd      	ldr	r3, [pc, #756]	; (8003e94 <main+0x428>)
 8003b9e:	22a6      	movs	r2, #166	; 0xa6
 8003ba0:	0092      	lsls	r2, r2, #2
 8003ba2:	4694      	mov	ip, r2
 8003ba4:	44bc      	add	ip, r7
 8003ba6:	4463      	add	r3, ip
 8003ba8:	0018      	movs	r0, r3
 8003baa:	2308      	movs	r3, #8
 8003bac:	001a      	movs	r2, r3
 8003bae:	2100      	movs	r1, #0
 8003bb0:	f004 fce0 	bl	8008574 <memset>
 8003bb4:	4bb7      	ldr	r3, [pc, #732]	; (8003e94 <main+0x428>)
 8003bb6:	22a6      	movs	r2, #166	; 0xa6
 8003bb8:	0092      	lsls	r2, r2, #2
 8003bba:	4694      	mov	ip, r2
 8003bbc:	44bc      	add	ip, r7
 8003bbe:	4463      	add	r3, ip
 8003bc0:	220d      	movs	r2, #13
 8003bc2:	601a      	str	r2, [r3, #0]
	sConfig2.Channel = ADC_CHANNEL_13;
 8003bc4:	4bb3      	ldr	r3, [pc, #716]	; (8003e94 <main+0x428>)
 8003bc6:	22a6      	movs	r2, #166	; 0xa6
 8003bc8:	0092      	lsls	r2, r2, #2
 8003bca:	4694      	mov	ip, r2
 8003bcc:	44bc      	add	ip, r7
 8003bce:	4463      	add	r3, ip
 8003bd0:	4ab1      	ldr	r2, [pc, #708]	; (8003e98 <main+0x42c>)
 8003bd2:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003bd4:	f000 ffda 	bl	8004b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
	SystemClock_Config();
 8003bd8:	f000 fa14 	bl	8004004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_TIM2_Init();
 8003bdc:	f000 fb3a 	bl	8004254 <MX_TIM2_Init>
	MX_GPIO_Init();
 8003be0:	f000 fbec 	bl	80043bc <MX_GPIO_Init>
	MX_I2C1_Init();
 8003be4:	f000 faf6 	bl	80041d4 <MX_I2C1_Init>
	MX_ADC_Init();
 8003be8:	f000 fa82 	bl	80040f0 <MX_ADC_Init>
	MX_USART1_UART_Init();
 8003bec:	f000 fb86 	bl	80042fc <MX_USART1_UART_Init>
	MX_USART4_UART_Init();
 8003bf0:	f000 fbb4 	bl	800435c <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8003bf4:	4ba9      	ldr	r3, [pc, #676]	; (8003e9c <main+0x430>)
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f003 fbb6 	bl	8007368 <HAL_TIM_Base_Start>
	dataCalibration();
 8003bfc:	f7ff f8dc 	bl	8002db8 <dataCalibration>
  	HAL_UART_Transmit(&huart1, command, 45, 4000);
 8003c00:	23fa      	movs	r3, #250	; 0xfa
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	1939      	adds	r1, r7, r4
 8003c06:	48a6      	ldr	r0, [pc, #664]	; (8003ea0 <main+0x434>)
 8003c08:	222d      	movs	r2, #45	; 0x2d
 8003c0a:	f003 fe75 	bl	80078f8 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //---------------------------------------GPS
	  strcpy((char*)buf, "");
 8003c0e:	2490      	movs	r4, #144	; 0x90
 8003c10:	00a4      	lsls	r4, r4, #2
 8003c12:	193b      	adds	r3, r7, r4
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive(&huart1, buf, 71, 4000);
 8003c18:	23fa      	movs	r3, #250	; 0xfa
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	1939      	adds	r1, r7, r4
 8003c1e:	48a0      	ldr	r0, [pc, #640]	; (8003ea0 <main+0x434>)
 8003c20:	2247      	movs	r2, #71	; 0x47
 8003c22:	f003 ff11 	bl	8007a48 <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart1, msg0, 32, 1000);
 8003c26:	23fa      	movs	r3, #250	; 0xfa
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	2288      	movs	r2, #136	; 0x88
 8003c2c:	0092      	lsls	r2, r2, #2
 8003c2e:	18b9      	adds	r1, r7, r2
 8003c30:	489b      	ldr	r0, [pc, #620]	; (8003ea0 <main+0x434>)
 8003c32:	2220      	movs	r2, #32
 8003c34:	f003 fe60 	bl	80078f8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, buf, 71, 4000);
 8003c38:	23fa      	movs	r3, #250	; 0xfa
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1939      	adds	r1, r7, r4
 8003c3e:	4898      	ldr	r0, [pc, #608]	; (8003ea0 <main+0x434>)
 8003c40:	2247      	movs	r2, #71	; 0x47
 8003c42:	f003 fe59 	bl	80078f8 <HAL_UART_Transmit>

	  char* LongT = (char*) buf;
 8003c46:	0022      	movs	r2, r4
 8003c48:	193b      	adds	r3, r7, r4
 8003c4a:	24a4      	movs	r4, #164	; 0xa4
 8003c4c:	00a4      	lsls	r4, r4, #2
 8003c4e:	1939      	adds	r1, r7, r4
 8003c50:	600b      	str	r3, [r1, #0]
	  LongT = LongT + 18;
 8003c52:	193b      	adds	r3, r7, r4
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3312      	adds	r3, #18
 8003c58:	1939      	adds	r1, r7, r4
 8003c5a:	600b      	str	r3, [r1, #0]
	  char* LatT = (char*) buf;
 8003c5c:	18bb      	adds	r3, r7, r2
 8003c5e:	25a3      	movs	r5, #163	; 0xa3
 8003c60:	00ad      	lsls	r5, r5, #2
 8003c62:	197a      	adds	r2, r7, r5
 8003c64:	6013      	str	r3, [r2, #0]
	  LatT = LatT + 30;
 8003c66:	197b      	adds	r3, r7, r5
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	331e      	adds	r3, #30
 8003c6c:	197a      	adds	r2, r7, r5
 8003c6e:	6013      	str	r3, [r2, #0]

	  HAL_UART_Transmit(&huart1, msg1, 32, 1000);
 8003c70:	23fa      	movs	r3, #250	; 0xfa
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	2280      	movs	r2, #128	; 0x80
 8003c76:	0092      	lsls	r2, r2, #2
 8003c78:	18b9      	adds	r1, r7, r2
 8003c7a:	4889      	ldr	r0, [pc, #548]	; (8003ea0 <main+0x434>)
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f003 fe3b 	bl	80078f8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, LongT, 11, 1000);
 8003c82:	23fa      	movs	r3, #250	; 0xfa
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	193a      	adds	r2, r7, r4
 8003c88:	6811      	ldr	r1, [r2, #0]
 8003c8a:	4885      	ldr	r0, [pc, #532]	; (8003ea0 <main+0x434>)
 8003c8c:	220b      	movs	r2, #11
 8003c8e:	f003 fe33 	bl	80078f8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, msg2, 32, 1000);
 8003c92:	23fa      	movs	r3, #250	; 0xfa
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	22f0      	movs	r2, #240	; 0xf0
 8003c98:	0052      	lsls	r2, r2, #1
 8003c9a:	18b9      	adds	r1, r7, r2
 8003c9c:	4880      	ldr	r0, [pc, #512]	; (8003ea0 <main+0x434>)
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f003 fe2a 	bl	80078f8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, LatT, 12, 1000);
 8003ca4:	23fa      	movs	r3, #250	; 0xfa
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	197a      	adds	r2, r7, r5
 8003caa:	6811      	ldr	r1, [r2, #0]
 8003cac:	487c      	ldr	r0, [pc, #496]	; (8003ea0 <main+0x434>)
 8003cae:	220c      	movs	r2, #12
 8003cb0:	f003 fe22 	bl	80078f8 <HAL_UART_Transmit>
	  //read_DS18B20();-------------------???
	  //read_LDR();
	  //read_moisture();------------------v

	  //------------------------------------------------------------BMP180
	  get_BMP180Readings(&BMP_TempC, &BMP_Pressure, &BMP_Alt);
 8003cb4:	23d4      	movs	r3, #212	; 0xd4
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	18fa      	adds	r2, r7, r3
 8003cba:	23d2      	movs	r3, #210	; 0xd2
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	18f9      	adds	r1, r7, r3
 8003cc0:	23d6      	movs	r3, #214	; 0xd6
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f000 fbc8 	bl	800445c <get_BMP180Readings>
	  //------------------------------------------------------------DHT22
	  get_DHT22Readings(&DHT_TempC, &DHT_Hum, thp, temphumsum);
 8003ccc:	23ec      	movs	r3, #236	; 0xec
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	25f4      	movs	r5, #244	; 0xf4
 8003cd2:	197a      	adds	r2, r7, r5
 8003cd4:	21fc      	movs	r1, #252	; 0xfc
 8003cd6:	1879      	adds	r1, r7, r1
 8003cd8:	1c78      	adds	r0, r7, #1
 8003cda:	30ff      	adds	r0, #255	; 0xff
 8003cdc:	f000 fbde 	bl	800449c <get_DHT22Readings>
	  //------------------------------------------------------------DS18B20
	  get_DS18B20Readings(&thp[4], DS18B20_tempArr, &DS18B20_T, &internalTemp);
 8003ce0:	2378      	movs	r3, #120	; 0x78
 8003ce2:	18fc      	adds	r4, r7, r3
 8003ce4:	237e      	movs	r3, #126	; 0x7e
 8003ce6:	18fa      	adds	r2, r7, r3
 8003ce8:	2380      	movs	r3, #128	; 0x80
 8003cea:	18f9      	adds	r1, r7, r3
 8003cec:	197b      	adds	r3, r7, r5
 8003cee:	1d18      	adds	r0, r3, #4
 8003cf0:	0023      	movs	r3, r4
 8003cf2:	f000 fc67 	bl	80045c4 <get_DS18B20Readings>
	  //------------------------------------------------------------LDR
	  ADC_ChannelConfTypeDef sConfig = {0};
 8003cf6:	4b6b      	ldr	r3, [pc, #428]	; (8003ea4 <main+0x438>)
 8003cf8:	22a6      	movs	r2, #166	; 0xa6
 8003cfa:	0092      	lsls	r2, r2, #2
 8003cfc:	4694      	mov	ip, r2
 8003cfe:	44bc      	add	ip, r7
 8003d00:	4463      	add	r3, ip
 8003d02:	0018      	movs	r0, r3
 8003d04:	2308      	movs	r3, #8
 8003d06:	001a      	movs	r2, r3
 8003d08:	2100      	movs	r1, #0
 8003d0a:	f004 fc33 	bl	8008574 <memset>
	  sConfig.Channel = ADC_CHANNEL_0;
 8003d0e:	4b65      	ldr	r3, [pc, #404]	; (8003ea4 <main+0x438>)
 8003d10:	22a6      	movs	r2, #166	; 0xa6
 8003d12:	0092      	lsls	r2, r2, #2
 8003d14:	4694      	mov	ip, r2
 8003d16:	44bc      	add	ip, r7
 8003d18:	4463      	add	r3, ip
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 8003d1e:	4b61      	ldr	r3, [pc, #388]	; (8003ea4 <main+0x438>)
 8003d20:	22a6      	movs	r2, #166	; 0xa6
 8003d22:	0092      	lsls	r2, r2, #2
 8003d24:	4694      	mov	ip, r2
 8003d26:	44bc      	add	ip, r7
 8003d28:	4463      	add	r3, ip
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	605a      	str	r2, [r3, #4]
	 // sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES; //l0 hal has no .samplingtime attribute?
	  if(HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8003d2e:	003a      	movs	r2, r7
 8003d30:	4b5d      	ldr	r3, [pc, #372]	; (8003ea8 <main+0x43c>)
 8003d32:	0011      	movs	r1, r2
 8003d34:	0018      	movs	r0, r3
 8003d36:	f001 fa2d 	bl	8005194 <HAL_ADC_ConfigChannel>
 8003d3a:	1e03      	subs	r3, r0, #0
 8003d3c:	d001      	beq.n	8003d42 <main+0x2d6>
		  Error_Handler();
 8003d3e:	f000 fcdb 	bl	80046f8 <Error_Handler>
	  }
	  HAL_ADC_Start(&hadc); //Start Light ADC
 8003d42:	4b59      	ldr	r3, [pc, #356]	; (8003ea8 <main+0x43c>)
 8003d44:	0018      	movs	r0, r3
 8003d46:	f001 f929 	bl	8004f9c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	425a      	negs	r2, r3
 8003d4e:	4b56      	ldr	r3, [pc, #344]	; (8003ea8 <main+0x43c>)
 8003d50:	0011      	movs	r1, r2
 8003d52:	0018      	movs	r0, r3
 8003d54:	f001 f976 	bl	8005044 <HAL_ADC_PollForConversion>
	  light = HAL_ADC_GetValue(&hadc);
 8003d58:	4b53      	ldr	r3, [pc, #332]	; (8003ea8 <main+0x43c>)
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f001 fa0e 	bl	800517c <HAL_ADC_GetValue>
 8003d60:	0002      	movs	r2, r0
 8003d62:	494a      	ldr	r1, [pc, #296]	; (8003e8c <main+0x420>)
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	801a      	strh	r2, [r3, #0]
	  voltage = 3.3 * light;
 8003d68:	187b      	adds	r3, r7, r1
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f7fe fed3 	bl	8002b18 <__aeabi_i2d>
 8003d72:	4a4e      	ldr	r2, [pc, #312]	; (8003eac <main+0x440>)
 8003d74:	4b4e      	ldr	r3, [pc, #312]	; (8003eb0 <main+0x444>)
 8003d76:	f7fe f87d 	bl	8001e74 <__aeabi_dmul>
 8003d7a:	0002      	movs	r2, r0
 8003d7c:	000b      	movs	r3, r1
 8003d7e:	0010      	movs	r0, r2
 8003d80:	0019      	movs	r1, r3
 8003d82:	f7fe ff67 	bl	8002c54 <__aeabi_d2f>
 8003d86:	1c03      	adds	r3, r0, #0
 8003d88:	24a2      	movs	r4, #162	; 0xa2
 8003d8a:	00a4      	lsls	r4, r4, #2
 8003d8c:	193a      	adds	r2, r7, r4
 8003d8e:	6013      	str	r3, [r2, #0]
	  voltage = voltage / 4095;
 8003d90:	4948      	ldr	r1, [pc, #288]	; (8003eb4 <main+0x448>)
 8003d92:	193b      	adds	r3, r7, r4
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	f7fc fe55 	bl	8000a44 <__aeabi_fdiv>
 8003d9a:	1c03      	adds	r3, r0, #0
 8003d9c:	193a      	adds	r2, r7, r4
 8003d9e:	6013      	str	r3, [r2, #0]
	  //-----------------------------------------------------------moisture
	  get_moistureReadings(&sConfig2, &moisture);
 8003da0:	2342      	movs	r3, #66	; 0x42
 8003da2:	18fa      	adds	r2, r7, r3
 8003da4:	2308      	movs	r3, #8
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	0011      	movs	r1, r2
 8003daa:	0018      	movs	r0, r3
 8003dac:	f000 fc7c 	bl	80046a8 <get_moistureReadings>

	  //------------------------------------------------------------------float to string
/*	  gcvt(BMP_Pressure, 6, BMP180_PressBuffer);		//float to char array
	  gcvt(BMP_Alt, 6, BMP180_AltBuffer);
	  gcvt(BMP_TempC, 6, BMP180_TempBuffer);*/
	  sprintf(BMP180_PressBuffer, "%.1f", BMP_Pressure);
 8003db0:	23d2      	movs	r3, #210	; 0xd2
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	1c18      	adds	r0, r3, #0
 8003dba:	f7fe ff03 	bl	8002bc4 <__aeabi_f2d>
 8003dbe:	0002      	movs	r2, r0
 8003dc0:	000b      	movs	r3, r1
 8003dc2:	493d      	ldr	r1, [pc, #244]	; (8003eb8 <main+0x44c>)
 8003dc4:	25b8      	movs	r5, #184	; 0xb8
 8003dc6:	006d      	lsls	r5, r5, #1
 8003dc8:	1978      	adds	r0, r7, r5
 8003dca:	f005 f855 	bl	8008e78 <siprintf>
	  sprintf(BMP180_AltBuffer, "%.1f", BMP_Alt);
 8003dce:	23d4      	movs	r3, #212	; 0xd4
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	1c18      	adds	r0, r3, #0
 8003dd8:	f7fe fef4 	bl	8002bc4 <__aeabi_f2d>
 8003ddc:	0002      	movs	r2, r0
 8003dde:	000b      	movs	r3, r1
 8003de0:	4935      	ldr	r1, [pc, #212]	; (8003eb8 <main+0x44c>)
 8003de2:	269e      	movs	r6, #158	; 0x9e
 8003de4:	0076      	lsls	r6, r6, #1
 8003de6:	19b8      	adds	r0, r7, r6
 8003de8:	f005 f846 	bl	8008e78 <siprintf>
	  sprintf(BMP180_TempBuffer, "%.1f", BMP_TempC);
 8003dec:	23d6      	movs	r3, #214	; 0xd6
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	18fb      	adds	r3, r7, r3
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	1c18      	adds	r0, r3, #0
 8003df6:	f7fe fee5 	bl	8002bc4 <__aeabi_f2d>
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	000b      	movs	r3, r1
 8003dfe:	492e      	ldr	r1, [pc, #184]	; (8003eb8 <main+0x44c>)
 8003e00:	2084      	movs	r0, #132	; 0x84
 8003e02:	0040      	lsls	r0, r0, #1
 8003e04:	1838      	adds	r0, r7, r0
 8003e06:	f005 f837 	bl	8008e78 <siprintf>

	  //gcvt(DHT_TempC, 6, DHT22_TempBuffer);
	  //gcvt(DHT_Hum, 6, DHT22_HumBuffer);
	  sprintf(DHT22_TempBuffer, "%.1f", DHT_TempC);
 8003e0a:	1c7b      	adds	r3, r7, #1
 8003e0c:	33ff      	adds	r3, #255	; 0xff
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	1c18      	adds	r0, r3, #0
 8003e12:	f7fe fed7 	bl	8002bc4 <__aeabi_f2d>
 8003e16:	0002      	movs	r2, r0
 8003e18:	000b      	movs	r3, r1
 8003e1a:	4927      	ldr	r1, [pc, #156]	; (8003eb8 <main+0x44c>)
 8003e1c:	24b8      	movs	r4, #184	; 0xb8
 8003e1e:	1938      	adds	r0, r7, r4
 8003e20:	f005 f82a 	bl	8008e78 <siprintf>
	  sprintf(DHT22_HumBuffer, "%.1f", DHT_Hum);
 8003e24:	23fc      	movs	r3, #252	; 0xfc
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	1c18      	adds	r0, r3, #0
 8003e2c:	f7fe feca 	bl	8002bc4 <__aeabi_f2d>
 8003e30:	0002      	movs	r2, r0
 8003e32:	000b      	movs	r3, r1
 8003e34:	4920      	ldr	r1, [pc, #128]	; (8003eb8 <main+0x44c>)
 8003e36:	2084      	movs	r0, #132	; 0x84
 8003e38:	1838      	adds	r0, r7, r0
 8003e3a:	f005 f81d 	bl	8008e78 <siprintf>

	  //gcvt(internalTemp, 6, DS18B20_TempBuffer);
	  sprintf(DS18B20_TempBuffer, "%.1f", internalTemp);
 8003e3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e40:	1c18      	adds	r0, r3, #0
 8003e42:	f7fe febf 	bl	8002bc4 <__aeabi_f2d>
 8003e46:	0002      	movs	r2, r0
 8003e48:	000b      	movs	r3, r1
 8003e4a:	491b      	ldr	r1, [pc, #108]	; (8003eb8 <main+0x44c>)
 8003e4c:	2044      	movs	r0, #68	; 0x44
 8003e4e:	1838      	adds	r0, r7, r0
 8003e50:	f005 f812 	bl	8008e78 <siprintf>

	  sprintf(moistbuffer, "%hu\r\n", moisture);
 8003e54:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <main+0x424>)
 8003e56:	22a6      	movs	r2, #166	; 0xa6
 8003e58:	0092      	lsls	r2, r2, #2
 8003e5a:	4694      	mov	ip, r2
 8003e5c:	e02e      	b.n	8003ebc <main+0x450>
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	fffffd64 	.word	0xfffffd64
 8003e64:	0800c35c 	.word	0x0800c35c
 8003e68:	0800c37c 	.word	0x0800c37c
 8003e6c:	0800c39c 	.word	0x0800c39c
 8003e70:	0800c3bc 	.word	0x0800c3bc
 8003e74:	fffffe6c 	.word	0xfffffe6c
 8003e78:	00404040 	.word	0x00404040
 8003e7c:	fffffe5c 	.word	0xfffffe5c
 8003e80:	0800c3ec 	.word	0x0800c3ec
 8003e84:	fffffe54 	.word	0xfffffe54
 8003e88:	fffffde8 	.word	0xfffffde8
 8003e8c:	00000296 	.word	0x00000296
 8003e90:	fffffdaa 	.word	0xfffffdaa
 8003e94:	fffffd70 	.word	0xfffffd70
 8003e98:	34002000 	.word	0x34002000
 8003e9c:	200003b0 	.word	0x200003b0
 8003ea0:	200002a8 	.word	0x200002a8
 8003ea4:	fffffd68 	.word	0xfffffd68
 8003ea8:	200003f0 	.word	0x200003f0
 8003eac:	66666666 	.word	0x66666666
 8003eb0:	400a6666 	.word	0x400a6666
 8003eb4:	457ff000 	.word	0x457ff000
 8003eb8:	0800c32c 	.word	0x0800c32c
 8003ebc:	44bc      	add	ip, r7
 8003ebe:	4463      	add	r3, ip
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	001a      	movs	r2, r3
 8003ec4:	4945      	ldr	r1, [pc, #276]	; (8003fdc <main+0x570>)
 8003ec6:	2310      	movs	r3, #16
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f004 ffd4 	bl	8008e78 <siprintf>
	  //BMP180 - pres -> P
	  //Moisture -> M
	  //close: #

	  //----------------------------------------------------------------------message frame - head
	  HAL_UART_Transmit(&huart4, (uint8_t*)"@", strlen("@"), HAL_MAX_DELAY);
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	425b      	negs	r3, r3
 8003ed4:	4942      	ldr	r1, [pc, #264]	; (8003fe0 <main+0x574>)
 8003ed6:	4843      	ldr	r0, [pc, #268]	; (8003fe4 <main+0x578>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f003 fd0d 	bl	80078f8 <HAL_UART_Transmit>

	  //-------------------------------------------------------------------------------DHT22
	  //--------------------------------------------------temp
	  //HAL_UART_Transmit(&huart4, (uint8_t*)DHT22_TempString, strlen(DHT22_TempString), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart4, (uint8_t*)DHT22_TempBuffer, strlen(DHT22_TempBuffer), HAL_MAX_DELAY);
 8003ede:	193b      	adds	r3, r7, r4
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f7fc f911 	bl	8000108 <strlen>
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	2301      	movs	r3, #1
 8003eec:	425b      	negs	r3, r3
 8003eee:	1939      	adds	r1, r7, r4
 8003ef0:	483c      	ldr	r0, [pc, #240]	; (8003fe4 <main+0x578>)
 8003ef2:	f003 fd01 	bl	80078f8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t*)"T", strlen("T"), HAL_MAX_DELAY);
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	425b      	negs	r3, r3
 8003efa:	493b      	ldr	r1, [pc, #236]	; (8003fe8 <main+0x57c>)
 8003efc:	4839      	ldr	r0, [pc, #228]	; (8003fe4 <main+0x578>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	f003 fcfa 	bl	80078f8 <HAL_UART_Transmit>

	  //-------------------------------------------------humidity
	  //HAL_UART_Transmit(&huart4, (uint8_t*)DHT22_HumString, strlen(DHT22_HumString), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart4, (uint8_t*)DHT22_HumBuffer, strlen(DHT22_HumBuffer), HAL_MAX_DELAY);
 8003f04:	2084      	movs	r0, #132	; 0x84
 8003f06:	183b      	adds	r3, r7, r0
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f7fc f8fd 	bl	8000108 <strlen>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	2301      	movs	r3, #1
 8003f14:	425b      	negs	r3, r3
 8003f16:	2084      	movs	r0, #132	; 0x84
 8003f18:	1839      	adds	r1, r7, r0
 8003f1a:	4832      	ldr	r0, [pc, #200]	; (8003fe4 <main+0x578>)
 8003f1c:	f003 fcec 	bl	80078f8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t*)"H", strlen("H"), HAL_MAX_DELAY);
 8003f20:	2301      	movs	r3, #1
 8003f22:	425b      	negs	r3, r3
 8003f24:	4931      	ldr	r1, [pc, #196]	; (8003fec <main+0x580>)
 8003f26:	482f      	ldr	r0, [pc, #188]	; (8003fe4 <main+0x578>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f003 fce5 	bl	80078f8 <HAL_UART_Transmit>

	  //--------------------------------------------------------------------------------DS18B20
	  //HAL_UART_Transmit(&huart4, (uint8_t*)DS18B20_TempString, strlen(DS18B20_TempString), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart4, (uint8_t*)DS18B20_TempBuffer, strlen(DHT22_TempBuffer), HAL_MAX_DELAY);
 8003f2e:	193b      	adds	r3, r7, r4
 8003f30:	0018      	movs	r0, r3
 8003f32:	f7fc f8e9 	bl	8000108 <strlen>
 8003f36:	0003      	movs	r3, r0
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	425b      	negs	r3, r3
 8003f3e:	2044      	movs	r0, #68	; 0x44
 8003f40:	1839      	adds	r1, r7, r0
 8003f42:	4828      	ldr	r0, [pc, #160]	; (8003fe4 <main+0x578>)
 8003f44:	f003 fcd8 	bl	80078f8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t*)"S", strlen("S"), HAL_MAX_DELAY);
 8003f48:	2301      	movs	r3, #1
 8003f4a:	425b      	negs	r3, r3
 8003f4c:	4928      	ldr	r1, [pc, #160]	; (8003ff0 <main+0x584>)
 8003f4e:	4825      	ldr	r0, [pc, #148]	; (8003fe4 <main+0x578>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	f003 fcd1 	bl	80078f8 <HAL_UART_Transmit>

	  //----------------------------------------------------------------------------------BMP180
	  //-----------------------------------------altitude
	  HAL_UART_Transmit(&huart4, (uint8_t*)BMP180_AltBuffer, strlen(BMP180_AltBuffer), HAL_MAX_DELAY);
 8003f56:	19bb      	adds	r3, r7, r6
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7fc f8d5 	bl	8000108 <strlen>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	2301      	movs	r3, #1
 8003f64:	425b      	negs	r3, r3
 8003f66:	19b9      	adds	r1, r7, r6
 8003f68:	481e      	ldr	r0, [pc, #120]	; (8003fe4 <main+0x578>)
 8003f6a:	f003 fcc5 	bl	80078f8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t*)"A", strlen("A"), HAL_MAX_DELAY);
 8003f6e:	2301      	movs	r3, #1
 8003f70:	425b      	negs	r3, r3
 8003f72:	4920      	ldr	r1, [pc, #128]	; (8003ff4 <main+0x588>)
 8003f74:	481b      	ldr	r0, [pc, #108]	; (8003fe4 <main+0x578>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	f003 fcbe 	bl	80078f8 <HAL_UART_Transmit>
	  //-----------------------------------------pressure
	  HAL_UART_Transmit(&huart4, (uint8_t*)BMP180_PressBuffer, strlen(BMP180_PressBuffer), HAL_MAX_DELAY);
 8003f7c:	197b      	adds	r3, r7, r5
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f7fc f8c2 	bl	8000108 <strlen>
 8003f84:	0003      	movs	r3, r0
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	2301      	movs	r3, #1
 8003f8a:	425b      	negs	r3, r3
 8003f8c:	1979      	adds	r1, r7, r5
 8003f8e:	4815      	ldr	r0, [pc, #84]	; (8003fe4 <main+0x578>)
 8003f90:	f003 fcb2 	bl	80078f8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t*)"P", strlen("P"), HAL_MAX_DELAY);
 8003f94:	2301      	movs	r3, #1
 8003f96:	425b      	negs	r3, r3
 8003f98:	4917      	ldr	r1, [pc, #92]	; (8003ff8 <main+0x58c>)
 8003f9a:	4812      	ldr	r0, [pc, #72]	; (8003fe4 <main+0x578>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f003 fcab 	bl	80078f8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, buf, strlen(buf), HAL_MAX_DELAY);
	  //-------------@@@
	  HAL_UART_Transmit(&huart4, (uint8_t*)skipp, strlen(skipp), HAL_MAX_DELAY);*/

	  //------------------------------------------------------------------------------------Moisture
	  HAL_UART_Transmit(&huart4, (uint8_t*)moistbuffer, strlen(moistbuffer), HAL_MAX_DELAY);
 8003fa2:	2410      	movs	r4, #16
 8003fa4:	193b      	adds	r3, r7, r4
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7fc f8ae 	bl	8000108 <strlen>
 8003fac:	0003      	movs	r3, r0
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	425b      	negs	r3, r3
 8003fb4:	1939      	adds	r1, r7, r4
 8003fb6:	480b      	ldr	r0, [pc, #44]	; (8003fe4 <main+0x578>)
 8003fb8:	f003 fc9e 	bl	80078f8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t*)"M", strlen("M"), HAL_MAX_DELAY);
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	425b      	negs	r3, r3
 8003fc0:	490e      	ldr	r1, [pc, #56]	; (8003ffc <main+0x590>)
 8003fc2:	4808      	ldr	r0, [pc, #32]	; (8003fe4 <main+0x578>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f003 fc97 	bl	80078f8 <HAL_UART_Transmit>

	  //----------------------------------------------------------------------message frame - tail
	  HAL_UART_Transmit(&huart4, (uint8_t*)"#", strlen("#"), HAL_MAX_DELAY);
 8003fca:	2301      	movs	r3, #1
 8003fcc:	425b      	negs	r3, r3
 8003fce:	490c      	ldr	r1, [pc, #48]	; (8004000 <main+0x594>)
 8003fd0:	4804      	ldr	r0, [pc, #16]	; (8003fe4 <main+0x578>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f003 fc90 	bl	80078f8 <HAL_UART_Transmit>
  {
 8003fd8:	e619      	b.n	8003c0e <main+0x1a2>
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	0800c334 	.word	0x0800c334
 8003fe0:	0800c33c 	.word	0x0800c33c
 8003fe4:	2000032c 	.word	0x2000032c
 8003fe8:	0800c340 	.word	0x0800c340
 8003fec:	0800c344 	.word	0x0800c344
 8003ff0:	0800c348 	.word	0x0800c348
 8003ff4:	0800c34c 	.word	0x0800c34c
 8003ff8:	0800c350 	.word	0x0800c350
 8003ffc:	0800c354 	.word	0x0800c354
 8004000:	0800c358 	.word	0x0800c358

08004004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004004:	b590      	push	{r4, r7, lr}
 8004006:	b09d      	sub	sp, #116	; 0x74
 8004008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800400a:	2438      	movs	r4, #56	; 0x38
 800400c:	193b      	adds	r3, r7, r4
 800400e:	0018      	movs	r0, r3
 8004010:	2338      	movs	r3, #56	; 0x38
 8004012:	001a      	movs	r2, r3
 8004014:	2100      	movs	r1, #0
 8004016:	f004 faad 	bl	8008574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800401a:	2324      	movs	r3, #36	; 0x24
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	0018      	movs	r0, r3
 8004020:	2314      	movs	r3, #20
 8004022:	001a      	movs	r2, r3
 8004024:	2100      	movs	r1, #0
 8004026:	f004 faa5 	bl	8008574 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800402a:	003b      	movs	r3, r7
 800402c:	0018      	movs	r0, r3
 800402e:	2324      	movs	r3, #36	; 0x24
 8004030:	001a      	movs	r2, r3
 8004032:	2100      	movs	r1, #0
 8004034:	f004 fa9e 	bl	8008574 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004038:	4b2b      	ldr	r3, [pc, #172]	; (80040e8 <SystemClock_Config+0xe4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2b      	ldr	r2, [pc, #172]	; (80040ec <SystemClock_Config+0xe8>)
 800403e:	401a      	ands	r2, r3
 8004040:	4b29      	ldr	r3, [pc, #164]	; (80040e8 <SystemClock_Config+0xe4>)
 8004042:	2180      	movs	r1, #128	; 0x80
 8004044:	0109      	lsls	r1, r1, #4
 8004046:	430a      	orrs	r2, r1
 8004048:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800404a:	0021      	movs	r1, r4
 800404c:	187b      	adds	r3, r7, r1
 800404e:	2202      	movs	r2, #2
 8004050:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004052:	187b      	adds	r3, r7, r1
 8004054:	2201      	movs	r2, #1
 8004056:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004058:	187b      	adds	r3, r7, r1
 800405a:	2210      	movs	r2, #16
 800405c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800405e:	187b      	adds	r3, r7, r1
 8004060:	2202      	movs	r2, #2
 8004062:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004064:	187b      	adds	r3, r7, r1
 8004066:	2200      	movs	r2, #0
 8004068:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800406a:	187b      	adds	r3, r7, r1
 800406c:	2280      	movs	r2, #128	; 0x80
 800406e:	02d2      	lsls	r2, r2, #11
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8004072:	187b      	adds	r3, r7, r1
 8004074:	2280      	movs	r2, #128	; 0x80
 8004076:	03d2      	lsls	r2, r2, #15
 8004078:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800407a:	187b      	adds	r3, r7, r1
 800407c:	0018      	movs	r0, r3
 800407e:	f002 f9e5 	bl	800644c <HAL_RCC_OscConfig>
 8004082:	1e03      	subs	r3, r0, #0
 8004084:	d001      	beq.n	800408a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8004086:	f000 fb37 	bl	80046f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800408a:	2124      	movs	r1, #36	; 0x24
 800408c:	187b      	adds	r3, r7, r1
 800408e:	220f      	movs	r2, #15
 8004090:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004092:	187b      	adds	r3, r7, r1
 8004094:	2203      	movs	r2, #3
 8004096:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004098:	187b      	adds	r3, r7, r1
 800409a:	2200      	movs	r2, #0
 800409c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800409e:	187b      	adds	r3, r7, r1
 80040a0:	2200      	movs	r2, #0
 80040a2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040a4:	187b      	adds	r3, r7, r1
 80040a6:	2200      	movs	r2, #0
 80040a8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80040aa:	187b      	adds	r3, r7, r1
 80040ac:	2101      	movs	r1, #1
 80040ae:	0018      	movs	r0, r3
 80040b0:	f002 fda0 	bl	8006bf4 <HAL_RCC_ClockConfig>
 80040b4:	1e03      	subs	r3, r0, #0
 80040b6:	d001      	beq.n	80040bc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80040b8:	f000 fb1e 	bl	80046f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80040bc:	003b      	movs	r3, r7
 80040be:	2209      	movs	r2, #9
 80040c0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80040c2:	003b      	movs	r3, r7
 80040c4:	2200      	movs	r2, #0
 80040c6:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80040c8:	003b      	movs	r3, r7
 80040ca:	2200      	movs	r2, #0
 80040cc:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040ce:	003b      	movs	r3, r7
 80040d0:	0018      	movs	r0, r3
 80040d2:	f002 ffb3 	bl	800703c <HAL_RCCEx_PeriphCLKConfig>
 80040d6:	1e03      	subs	r3, r0, #0
 80040d8:	d001      	beq.n	80040de <SystemClock_Config+0xda>
  {
    Error_Handler();
 80040da:	f000 fb0d 	bl	80046f8 <Error_Handler>
  }
}
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	46bd      	mov	sp, r7
 80040e2:	b01d      	add	sp, #116	; 0x74
 80040e4:	bd90      	pop	{r4, r7, pc}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	40007000 	.word	0x40007000
 80040ec:	ffffe7ff 	.word	0xffffe7ff

080040f0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80040f6:	003b      	movs	r3, r7
 80040f8:	0018      	movs	r0, r3
 80040fa:	2308      	movs	r3, #8
 80040fc:	001a      	movs	r2, r3
 80040fe:	2100      	movs	r1, #0
 8004100:	f004 fa38 	bl	8008574 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004104:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <MX_ADC_Init+0xd8>)
 8004106:	4a31      	ldr	r2, [pc, #196]	; (80041cc <MX_ADC_Init+0xdc>)
 8004108:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800410a:	4b2f      	ldr	r3, [pc, #188]	; (80041c8 <MX_ADC_Init+0xd8>)
 800410c:	2200      	movs	r2, #0
 800410e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004110:	4b2d      	ldr	r3, [pc, #180]	; (80041c8 <MX_ADC_Init+0xd8>)
 8004112:	2280      	movs	r2, #128	; 0x80
 8004114:	05d2      	lsls	r2, r2, #23
 8004116:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004118:	4b2b      	ldr	r3, [pc, #172]	; (80041c8 <MX_ADC_Init+0xd8>)
 800411a:	2200      	movs	r2, #0
 800411c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800411e:	4b2a      	ldr	r3, [pc, #168]	; (80041c8 <MX_ADC_Init+0xd8>)
 8004120:	2200      	movs	r2, #0
 8004122:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004124:	4b28      	ldr	r3, [pc, #160]	; (80041c8 <MX_ADC_Init+0xd8>)
 8004126:	2201      	movs	r2, #1
 8004128:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800412a:	4b27      	ldr	r3, [pc, #156]	; (80041c8 <MX_ADC_Init+0xd8>)
 800412c:	2200      	movs	r2, #0
 800412e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004130:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <MX_ADC_Init+0xd8>)
 8004132:	2220      	movs	r2, #32
 8004134:	2100      	movs	r1, #0
 8004136:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004138:	4b23      	ldr	r3, [pc, #140]	; (80041c8 <MX_ADC_Init+0xd8>)
 800413a:	2221      	movs	r2, #33	; 0x21
 800413c:	2100      	movs	r1, #0
 800413e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004140:	4b21      	ldr	r3, [pc, #132]	; (80041c8 <MX_ADC_Init+0xd8>)
 8004142:	2200      	movs	r2, #0
 8004144:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004146:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <MX_ADC_Init+0xd8>)
 8004148:	22c2      	movs	r2, #194	; 0xc2
 800414a:	32ff      	adds	r2, #255	; 0xff
 800414c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800414e:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <MX_ADC_Init+0xd8>)
 8004150:	222c      	movs	r2, #44	; 0x2c
 8004152:	2100      	movs	r1, #0
 8004154:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004156:	4b1c      	ldr	r3, [pc, #112]	; (80041c8 <MX_ADC_Init+0xd8>)
 8004158:	2204      	movs	r2, #4
 800415a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800415c:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <MX_ADC_Init+0xd8>)
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004162:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <MX_ADC_Init+0xd8>)
 8004164:	2200      	movs	r2, #0
 8004166:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004168:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <MX_ADC_Init+0xd8>)
 800416a:	2200      	movs	r2, #0
 800416c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800416e:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <MX_ADC_Init+0xd8>)
 8004170:	2200      	movs	r2, #0
 8004172:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004174:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <MX_ADC_Init+0xd8>)
 8004176:	0018      	movs	r0, r3
 8004178:	f000 fd9c 	bl	8004cb4 <HAL_ADC_Init>
 800417c:	1e03      	subs	r3, r0, #0
 800417e:	d001      	beq.n	8004184 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004180:	f000 faba 	bl	80046f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004184:	003b      	movs	r3, r7
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800418a:	003b      	movs	r3, r7
 800418c:	2280      	movs	r2, #128	; 0x80
 800418e:	0152      	lsls	r2, r2, #5
 8004190:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004192:	003a      	movs	r2, r7
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <MX_ADC_Init+0xd8>)
 8004196:	0011      	movs	r1, r2
 8004198:	0018      	movs	r0, r3
 800419a:	f000 fffb 	bl	8005194 <HAL_ADC_ConfigChannel>
 800419e:	1e03      	subs	r3, r0, #0
 80041a0:	d001      	beq.n	80041a6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80041a2:	f000 faa9 	bl	80046f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80041a6:	003b      	movs	r3, r7
 80041a8:	4a09      	ldr	r2, [pc, #36]	; (80041d0 <MX_ADC_Init+0xe0>)
 80041aa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80041ac:	003a      	movs	r2, r7
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <MX_ADC_Init+0xd8>)
 80041b0:	0011      	movs	r1, r2
 80041b2:	0018      	movs	r0, r3
 80041b4:	f000 ffee 	bl	8005194 <HAL_ADC_ConfigChannel>
 80041b8:	1e03      	subs	r3, r0, #0
 80041ba:	d001      	beq.n	80041c0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80041bc:	f000 fa9c 	bl	80046f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80041c0:	46c0      	nop			; (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b002      	add	sp, #8
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	200003f0 	.word	0x200003f0
 80041cc:	40012400 	.word	0x40012400
 80041d0:	34002000 	.word	0x34002000

080041d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041d8:	4b1b      	ldr	r3, [pc, #108]	; (8004248 <MX_I2C1_Init+0x74>)
 80041da:	4a1c      	ldr	r2, [pc, #112]	; (800424c <MX_I2C1_Init+0x78>)
 80041dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80041de:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <MX_I2C1_Init+0x74>)
 80041e0:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <MX_I2C1_Init+0x7c>)
 80041e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80041e4:	4b18      	ldr	r3, [pc, #96]	; (8004248 <MX_I2C1_Init+0x74>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041ea:	4b17      	ldr	r3, [pc, #92]	; (8004248 <MX_I2C1_Init+0x74>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041f0:	4b15      	ldr	r3, [pc, #84]	; (8004248 <MX_I2C1_Init+0x74>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80041f6:	4b14      	ldr	r3, [pc, #80]	; (8004248 <MX_I2C1_Init+0x74>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80041fc:	4b12      	ldr	r3, [pc, #72]	; (8004248 <MX_I2C1_Init+0x74>)
 80041fe:	2200      	movs	r2, #0
 8004200:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004202:	4b11      	ldr	r3, [pc, #68]	; (8004248 <MX_I2C1_Init+0x74>)
 8004204:	2200      	movs	r2, #0
 8004206:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004208:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <MX_I2C1_Init+0x74>)
 800420a:	2200      	movs	r2, #0
 800420c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800420e:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <MX_I2C1_Init+0x74>)
 8004210:	0018      	movs	r0, r3
 8004212:	f001 fb39 	bl	8005888 <HAL_I2C_Init>
 8004216:	1e03      	subs	r3, r0, #0
 8004218:	d001      	beq.n	800421e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800421a:	f000 fa6d 	bl	80046f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800421e:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <MX_I2C1_Init+0x74>)
 8004220:	2100      	movs	r1, #0
 8004222:	0018      	movs	r0, r3
 8004224:	f002 f87a 	bl	800631c <HAL_I2CEx_ConfigAnalogFilter>
 8004228:	1e03      	subs	r3, r0, #0
 800422a:	d001      	beq.n	8004230 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800422c:	f000 fa64 	bl	80046f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <MX_I2C1_Init+0x74>)
 8004232:	2100      	movs	r1, #0
 8004234:	0018      	movs	r0, r3
 8004236:	f002 f8bd 	bl	80063b4 <HAL_I2CEx_ConfigDigitalFilter>
 800423a:	1e03      	subs	r3, r0, #0
 800423c:	d001      	beq.n	8004242 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800423e:	f000 fa5b 	bl	80046f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	2000025c 	.word	0x2000025c
 800424c:	40005400 	.word	0x40005400
 8004250:	00707cbb 	.word	0x00707cbb

08004254 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800425a:	2308      	movs	r3, #8
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	0018      	movs	r0, r3
 8004260:	2310      	movs	r3, #16
 8004262:	001a      	movs	r2, r3
 8004264:	2100      	movs	r1, #0
 8004266:	f004 f985 	bl	8008574 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800426a:	003b      	movs	r3, r7
 800426c:	0018      	movs	r0, r3
 800426e:	2308      	movs	r3, #8
 8004270:	001a      	movs	r2, r3
 8004272:	2100      	movs	r1, #0
 8004274:	f004 f97e 	bl	8008574 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004278:	4b1e      	ldr	r3, [pc, #120]	; (80042f4 <MX_TIM2_Init+0xa0>)
 800427a:	2280      	movs	r2, #128	; 0x80
 800427c:	05d2      	lsls	r2, r2, #23
 800427e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24;
 8004280:	4b1c      	ldr	r3, [pc, #112]	; (80042f4 <MX_TIM2_Init+0xa0>)
 8004282:	2218      	movs	r2, #24
 8004284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004286:	4b1b      	ldr	r3, [pc, #108]	; (80042f4 <MX_TIM2_Init+0xa0>)
 8004288:	2200      	movs	r2, #0
 800428a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800428c:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <MX_TIM2_Init+0xa0>)
 800428e:	4a1a      	ldr	r2, [pc, #104]	; (80042f8 <MX_TIM2_Init+0xa4>)
 8004290:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004292:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <MX_TIM2_Init+0xa0>)
 8004294:	2200      	movs	r2, #0
 8004296:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004298:	4b16      	ldr	r3, [pc, #88]	; (80042f4 <MX_TIM2_Init+0xa0>)
 800429a:	2200      	movs	r2, #0
 800429c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <MX_TIM2_Init+0xa0>)
 80042a0:	0018      	movs	r0, r3
 80042a2:	f003 f821 	bl	80072e8 <HAL_TIM_Base_Init>
 80042a6:	1e03      	subs	r3, r0, #0
 80042a8:	d001      	beq.n	80042ae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80042aa:	f000 fa25 	bl	80046f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042ae:	2108      	movs	r1, #8
 80042b0:	187b      	adds	r3, r7, r1
 80042b2:	2280      	movs	r2, #128	; 0x80
 80042b4:	0152      	lsls	r2, r2, #5
 80042b6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80042b8:	187a      	adds	r2, r7, r1
 80042ba:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <MX_TIM2_Init+0xa0>)
 80042bc:	0011      	movs	r1, r2
 80042be:	0018      	movs	r0, r3
 80042c0:	f003 f89c 	bl	80073fc <HAL_TIM_ConfigClockSource>
 80042c4:	1e03      	subs	r3, r0, #0
 80042c6:	d001      	beq.n	80042cc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80042c8:	f000 fa16 	bl	80046f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042cc:	003b      	movs	r3, r7
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042d2:	003b      	movs	r3, r7
 80042d4:	2200      	movs	r2, #0
 80042d6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042d8:	003a      	movs	r2, r7
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <MX_TIM2_Init+0xa0>)
 80042dc:	0011      	movs	r1, r2
 80042de:	0018      	movs	r0, r3
 80042e0:	f003 fa58 	bl	8007794 <HAL_TIMEx_MasterConfigSynchronization>
 80042e4:	1e03      	subs	r3, r0, #0
 80042e6:	d001      	beq.n	80042ec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80042e8:	f000 fa06 	bl	80046f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80042ec:	46c0      	nop			; (mov r8, r8)
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b006      	add	sp, #24
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	200003b0 	.word	0x200003b0
 80042f8:	0000ffff 	.word	0x0000ffff

080042fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004300:	4b14      	ldr	r3, [pc, #80]	; (8004354 <MX_USART1_UART_Init+0x58>)
 8004302:	4a15      	ldr	r2, [pc, #84]	; (8004358 <MX_USART1_UART_Init+0x5c>)
 8004304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004306:	4b13      	ldr	r3, [pc, #76]	; (8004354 <MX_USART1_UART_Init+0x58>)
 8004308:	2296      	movs	r2, #150	; 0x96
 800430a:	0192      	lsls	r2, r2, #6
 800430c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800430e:	4b11      	ldr	r3, [pc, #68]	; (8004354 <MX_USART1_UART_Init+0x58>)
 8004310:	2200      	movs	r2, #0
 8004312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <MX_USART1_UART_Init+0x58>)
 8004316:	2200      	movs	r2, #0
 8004318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800431a:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <MX_USART1_UART_Init+0x58>)
 800431c:	2200      	movs	r2, #0
 800431e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004320:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <MX_USART1_UART_Init+0x58>)
 8004322:	220c      	movs	r2, #12
 8004324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004326:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <MX_USART1_UART_Init+0x58>)
 8004328:	2200      	movs	r2, #0
 800432a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800432c:	4b09      	ldr	r3, [pc, #36]	; (8004354 <MX_USART1_UART_Init+0x58>)
 800432e:	2200      	movs	r2, #0
 8004330:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <MX_USART1_UART_Init+0x58>)
 8004334:	2200      	movs	r2, #0
 8004336:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004338:	4b06      	ldr	r3, [pc, #24]	; (8004354 <MX_USART1_UART_Init+0x58>)
 800433a:	2200      	movs	r2, #0
 800433c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <MX_USART1_UART_Init+0x58>)
 8004340:	0018      	movs	r0, r3
 8004342:	f003 fa85 	bl	8007850 <HAL_UART_Init>
 8004346:	1e03      	subs	r3, r0, #0
 8004348:	d001      	beq.n	800434e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800434a:	f000 f9d5 	bl	80046f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	200002a8 	.word	0x200002a8
 8004358:	40013800 	.word	0x40013800

0800435c <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8004360:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <MX_USART4_UART_Init+0x58>)
 8004362:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <MX_USART4_UART_Init+0x5c>)
 8004364:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004366:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <MX_USART4_UART_Init+0x58>)
 8004368:	2296      	movs	r2, #150	; 0x96
 800436a:	0192      	lsls	r2, r2, #6
 800436c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <MX_USART4_UART_Init+0x58>)
 8004370:	2200      	movs	r2, #0
 8004372:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004374:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <MX_USART4_UART_Init+0x58>)
 8004376:	2200      	movs	r2, #0
 8004378:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800437a:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <MX_USART4_UART_Init+0x58>)
 800437c:	2200      	movs	r2, #0
 800437e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004380:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <MX_USART4_UART_Init+0x58>)
 8004382:	220c      	movs	r2, #12
 8004384:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004386:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <MX_USART4_UART_Init+0x58>)
 8004388:	2200      	movs	r2, #0
 800438a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <MX_USART4_UART_Init+0x58>)
 800438e:	2200      	movs	r2, #0
 8004390:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <MX_USART4_UART_Init+0x58>)
 8004394:	2200      	movs	r2, #0
 8004396:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004398:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <MX_USART4_UART_Init+0x58>)
 800439a:	2200      	movs	r2, #0
 800439c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800439e:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <MX_USART4_UART_Init+0x58>)
 80043a0:	0018      	movs	r0, r3
 80043a2:	f003 fa55 	bl	8007850 <HAL_UART_Init>
 80043a6:	1e03      	subs	r3, r0, #0
 80043a8:	d001      	beq.n	80043ae <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80043aa:	f000 f9a5 	bl	80046f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	2000032c 	.word	0x2000032c
 80043b8:	40004c00 	.word	0x40004c00

080043bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043bc:	b590      	push	{r4, r7, lr}
 80043be:	b089      	sub	sp, #36	; 0x24
 80043c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c2:	240c      	movs	r4, #12
 80043c4:	193b      	adds	r3, r7, r4
 80043c6:	0018      	movs	r0, r3
 80043c8:	2314      	movs	r3, #20
 80043ca:	001a      	movs	r2, r3
 80043cc:	2100      	movs	r1, #0
 80043ce:	f004 f8d1 	bl	8008574 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043d2:	4b20      	ldr	r3, [pc, #128]	; (8004454 <MX_GPIO_Init+0x98>)
 80043d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d6:	4b1f      	ldr	r3, [pc, #124]	; (8004454 <MX_GPIO_Init+0x98>)
 80043d8:	2104      	movs	r1, #4
 80043da:	430a      	orrs	r2, r1
 80043dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80043de:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <MX_GPIO_Init+0x98>)
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	2204      	movs	r2, #4
 80043e4:	4013      	ands	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ea:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <MX_GPIO_Init+0x98>)
 80043ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ee:	4b19      	ldr	r3, [pc, #100]	; (8004454 <MX_GPIO_Init+0x98>)
 80043f0:	2101      	movs	r1, #1
 80043f2:	430a      	orrs	r2, r1
 80043f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80043f6:	4b17      	ldr	r3, [pc, #92]	; (8004454 <MX_GPIO_Init+0x98>)
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	2201      	movs	r2, #1
 80043fc:	4013      	ands	r3, r2
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004402:	4b14      	ldr	r3, [pc, #80]	; (8004454 <MX_GPIO_Init+0x98>)
 8004404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <MX_GPIO_Init+0x98>)
 8004408:	2102      	movs	r1, #2
 800440a:	430a      	orrs	r2, r1
 800440c:	62da      	str	r2, [r3, #44]	; 0x2c
 800440e:	4b11      	ldr	r3, [pc, #68]	; (8004454 <MX_GPIO_Init+0x98>)
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	2202      	movs	r2, #2
 8004414:	4013      	ands	r3, r2
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800441a:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <MX_GPIO_Init+0x9c>)
 800441c:	2200      	movs	r2, #0
 800441e:	2106      	movs	r1, #6
 8004420:	0018      	movs	r0, r3
 8004422:	f001 fa14 	bl	800584e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8004426:	0021      	movs	r1, r4
 8004428:	187b      	adds	r3, r7, r1
 800442a:	2206      	movs	r2, #6
 800442c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800442e:	187b      	adds	r3, r7, r1
 8004430:	2201      	movs	r2, #1
 8004432:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004434:	187b      	adds	r3, r7, r1
 8004436:	2200      	movs	r2, #0
 8004438:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800443a:	187b      	adds	r3, r7, r1
 800443c:	2200      	movs	r2, #0
 800443e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004440:	187b      	adds	r3, r7, r1
 8004442:	4a05      	ldr	r2, [pc, #20]	; (8004458 <MX_GPIO_Init+0x9c>)
 8004444:	0019      	movs	r1, r3
 8004446:	0010      	movs	r0, r2
 8004448:	f001 f866 	bl	8005518 <HAL_GPIO_Init>

}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b009      	add	sp, #36	; 0x24
 8004452:	bd90      	pop	{r4, r7, pc}
 8004454:	40021000 	.word	0x40021000
 8004458:	50000800 	.word	0x50000800

0800445c <get_BMP180Readings>:

/* USER CODE BEGIN 4 */
void get_BMP180Readings(float *tempPtr, float *pressurePtr, float *altPtr){
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
	  *tempPtr = getTemp(); 						//Get Temperature
 8004468:	f7fe fd92 	bl	8002f90 <getTemp>
 800446c:	0003      	movs	r3, r0
 800446e:	0018      	movs	r0, r3
 8004470:	f7fc fd54 	bl	8000f1c <__aeabi_ui2f>
 8004474:	1c02      	adds	r2, r0, #0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	601a      	str	r2, [r3, #0]
	  //BMP_TempF = ((BMP_TempC * 9) / 5) + 32; 	//Convert to F
	  *pressurePtr = getPressure(0); 				//Get Pressure
 800447a:	2000      	movs	r0, #0
 800447c:	f7fe fe8e 	bl	800319c <getPressure>
 8004480:	1c02      	adds	r2, r0, #0
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	601a      	str	r2, [r3, #0]
	  *altPtr = getAlt(0); 							//Get Altitude
 8004486:	2000      	movs	r0, #0
 8004488:	f7ff f8ac 	bl	80035e4 <getAlt>
 800448c:	1c02      	adds	r2, r0, #0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	601a      	str	r2, [r3, #0]
}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	46bd      	mov	sp, r7
 8004496:	b004      	add	sp, #16
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <get_DHT22Readings>:
void get_DHT22Readings(float *tempPtr, float *humPtr, uint8_t *u8Arr, uint16_t *u16Arr){
 800449c:	b590      	push	{r4, r7, lr}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
	  sensorInit();
 80044aa:	f7ff f919 	bl	80036e0 <sensorInit>
	  u8Arr[4] = sensorVerify();
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	1d1c      	adds	r4, r3, #4
 80044b2:	f7ff f93f 	bl	8003734 <sensorVerify>
 80044b6:	0003      	movs	r3, r0
 80044b8:	7023      	strb	r3, [r4, #0]
	  if(u8Arr[4]) {
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3304      	adds	r3, #4
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d075      	beq.n	80045b0 <get_DHT22Readings+0x114>
	  	  u8Arr[2] = sensorRead(); 						//Read Lower 8 Humidity
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	1c9c      	adds	r4, r3, #2
 80044c8:	f7ff f966 	bl	8003798 <sensorRead>
 80044cc:	0003      	movs	r3, r0
 80044ce:	7023      	strb	r3, [r4, #0]
	  	  u8Arr[3] = sensorRead(); 						//Read Upper 8 Humidity
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	1cdc      	adds	r4, r3, #3
 80044d4:	f7ff f960 	bl	8003798 <sensorRead>
 80044d8:	0003      	movs	r3, r0
 80044da:	7023      	strb	r3, [r4, #0]
	  	  u8Arr[0] = sensorRead(); 						//Read Lower 8 Temperature
 80044dc:	f7ff f95c 	bl	8003798 <sensorRead>
 80044e0:	0003      	movs	r3, r0
 80044e2:	001a      	movs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	701a      	strb	r2, [r3, #0]
	  	  u8Arr[1] = sensorRead(); 						//Read Upper 8 Temperature
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	1c5c      	adds	r4, r3, #1
 80044ec:	f7ff f954 	bl	8003798 <sensorRead>
 80044f0:	0003      	movs	r3, r0
 80044f2:	7023      	strb	r3, [r4, #0]
	  	  u16Arr[2] = sensorRead(); 					//Read Checksum
 80044f4:	f7ff f950 	bl	8003798 <sensorRead>
 80044f8:	0003      	movs	r3, r0
 80044fa:	001a      	movs	r2, r3
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	3304      	adds	r3, #4
 8004500:	b292      	uxth	r2, r2
 8004502:	801a      	strh	r2, [r3, #0]

	  	  u16Arr[0] = ((u8Arr[0] << 8) | u8Arr[1]); 	//Assemble Temperature
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	021b      	lsls	r3, r3, #8
 800450a:	b21a      	sxth	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3301      	adds	r3, #1
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	b21b      	sxth	r3, r3
 8004514:	4313      	orrs	r3, r2
 8004516:	b21b      	sxth	r3, r3
 8004518:	b29a      	uxth	r2, r3
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	801a      	strh	r2, [r3, #0]
	  	  u16Arr[1] = ((u8Arr[2] << 8 | u8Arr[3])); 	//Assemble Humidity
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3302      	adds	r3, #2
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	b21a      	sxth	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3303      	adds	r3, #3
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b21b      	sxth	r3, r3
 8004530:	4313      	orrs	r3, r2
 8004532:	b21a      	sxth	r2, r3
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	3302      	adds	r3, #2
 8004538:	b292      	uxth	r2, r2
 800453a:	801a      	strh	r2, [r3, #0]

	  	  *tempPtr = (float) (u16Arr[0]/10.0);			//Get Temperature
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	0018      	movs	r0, r3
 8004542:	f7fe fae9 	bl	8002b18 <__aeabi_i2d>
 8004546:	2200      	movs	r2, #0
 8004548:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <get_DHT22Readings+0x11c>)
 800454a:	f7fd f88d 	bl	8001668 <__aeabi_ddiv>
 800454e:	0002      	movs	r2, r0
 8004550:	000b      	movs	r3, r1
 8004552:	0010      	movs	r0, r2
 8004554:	0019      	movs	r1, r3
 8004556:	f7fe fb7d 	bl	8002c54 <__aeabi_d2f>
 800455a:	1c02      	adds	r2, r0, #0
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	601a      	str	r2, [r3, #0]
	   	  *tempPtr = ((*tempPtr * 9) / 5) + 32; 		//Convert from Celsius
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4915      	ldr	r1, [pc, #84]	; (80045bc <get_DHT22Readings+0x120>)
 8004566:	1c18      	adds	r0, r3, #0
 8004568:	f7fc fb78 	bl	8000c5c <__aeabi_fmul>
 800456c:	1c03      	adds	r3, r0, #0
 800456e:	4914      	ldr	r1, [pc, #80]	; (80045c0 <get_DHT22Readings+0x124>)
 8004570:	1c18      	adds	r0, r3, #0
 8004572:	f7fc fa67 	bl	8000a44 <__aeabi_fdiv>
 8004576:	1c03      	adds	r3, r0, #0
 8004578:	2184      	movs	r1, #132	; 0x84
 800457a:	05c9      	lsls	r1, r1, #23
 800457c:	1c18      	adds	r0, r3, #0
 800457e:	f7fc f8c5 	bl	800070c <__aeabi_fadd>
 8004582:	1c03      	adds	r3, r0, #0
 8004584:	1c1a      	adds	r2, r3, #0
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	601a      	str	r2, [r3, #0]
	   	  *humPtr = (float) (u16Arr[1]/10.0); 			//Get Humidity
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	3302      	adds	r3, #2
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	0018      	movs	r0, r3
 8004592:	f7fe fac1 	bl	8002b18 <__aeabi_i2d>
 8004596:	2200      	movs	r2, #0
 8004598:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <get_DHT22Readings+0x11c>)
 800459a:	f7fd f865 	bl	8001668 <__aeabi_ddiv>
 800459e:	0002      	movs	r2, r0
 80045a0:	000b      	movs	r3, r1
 80045a2:	0010      	movs	r0, r2
 80045a4:	0019      	movs	r1, r3
 80045a6:	f7fe fb55 	bl	8002c54 <__aeabi_d2f>
 80045aa:	1c02      	adds	r2, r0, #0
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	601a      	str	r2, [r3, #0]
	   	  }
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b005      	add	sp, #20
 80045b6:	bd90      	pop	{r4, r7, pc}
 80045b8:	40240000 	.word	0x40240000
 80045bc:	41100000 	.word	0x41100000
 80045c0:	40a00000 	.word	0x40a00000

080045c4 <get_DS18B20Readings>:
void get_DS18B20Readings(uint8_t *statusPtr, uint8_t *u8Arr, uint16_t *u16Ptr, float *floatPtr){
 80045c4:	b590      	push	{r4, r7, lr}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
	  *statusPtr = dsInit(); 							//Initialize the DS18B20
 80045d2:	f7ff f973 	bl	80038bc <dsInit>
 80045d6:	0003      	movs	r3, r0
 80045d8:	001a      	movs	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	701a      	strb	r2, [r3, #0]
	  if(*statusPtr) {
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <get_DS18B20Readings+0x34>
		  HAL_Delay(1);
 80045e6:	2001      	movs	r0, #1
 80045e8:	f000 fb40 	bl	8004c6c <HAL_Delay>
		  dsWrite(0xCC); 								//Skip ROM Command
 80045ec:	20cc      	movs	r0, #204	; 0xcc
 80045ee:	f7ff f999 	bl	8003924 <dsWrite>
		  dsWrite(0x44);								//Convert Temperature
 80045f2:	2044      	movs	r0, #68	; 0x44
 80045f4:	f7ff f996 	bl	8003924 <dsWrite>
	  }
	  *statusPtr = dsInit(); 							//Initialize DS18B20 Again
 80045f8:	f7ff f960 	bl	80038bc <dsInit>
 80045fc:	0003      	movs	r3, r0
 80045fe:	001a      	movs	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	701a      	strb	r2, [r3, #0]
	  if(*statusPtr) {
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d045      	beq.n	8004698 <get_DS18B20Readings+0xd4>
		  HAL_Delay(1);
 800460c:	2001      	movs	r0, #1
 800460e:	f000 fb2d 	bl	8004c6c <HAL_Delay>
		  dsWrite(0xCC); 								//Skip ROM Command
 8004612:	20cc      	movs	r0, #204	; 0xcc
 8004614:	f7ff f986 	bl	8003924 <dsWrite>
		  dsWrite(0xBE); 								//Read Scratchpad
 8004618:	20be      	movs	r0, #190	; 0xbe
 800461a:	f7ff f983 	bl	8003924 <dsWrite>
		  u8Arr[0] = dsRead(); 							//Read Lower 8
 800461e:	f7ff f9c9 	bl	80039b4 <dsRead>
 8004622:	0003      	movs	r3, r0
 8004624:	001a      	movs	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	701a      	strb	r2, [r3, #0]
		  u8Arr[1] = dsRead(); 							//Read Upper 8
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	1c5c      	adds	r4, r3, #1
 800462e:	f7ff f9c1 	bl	80039b4 <dsRead>
 8004632:	0003      	movs	r3, r0
 8004634:	7023      	strb	r3, [r4, #0]

		  *u16Ptr = (u8Arr[1] << 8) | u8Arr[0]; 		//Combine
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	3301      	adds	r3, #1
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	b21a      	sxth	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	b21b      	sxth	r3, r3
 8004646:	4313      	orrs	r3, r2
 8004648:	b21b      	sxth	r3, r3
 800464a:	b29a      	uxth	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	801a      	strh	r2, [r3, #0]
		  *floatPtr = (float) *u16Ptr/16; 				//Get Temperature
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	0018      	movs	r0, r3
 8004656:	f7fc fc61 	bl	8000f1c <__aeabi_ui2f>
 800465a:	1c03      	adds	r3, r0, #0
 800465c:	2183      	movs	r1, #131	; 0x83
 800465e:	05c9      	lsls	r1, r1, #23
 8004660:	1c18      	adds	r0, r3, #0
 8004662:	f7fc f9ef 	bl	8000a44 <__aeabi_fdiv>
 8004666:	1c03      	adds	r3, r0, #0
 8004668:	1c1a      	adds	r2, r3, #0
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	601a      	str	r2, [r3, #0]
		  *floatPtr = ((*floatPtr * 9) / 5) + 32; 		//Convert to F
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	490b      	ldr	r1, [pc, #44]	; (80046a0 <get_DS18B20Readings+0xdc>)
 8004674:	1c18      	adds	r0, r3, #0
 8004676:	f7fc faf1 	bl	8000c5c <__aeabi_fmul>
 800467a:	1c03      	adds	r3, r0, #0
 800467c:	4909      	ldr	r1, [pc, #36]	; (80046a4 <get_DS18B20Readings+0xe0>)
 800467e:	1c18      	adds	r0, r3, #0
 8004680:	f7fc f9e0 	bl	8000a44 <__aeabi_fdiv>
 8004684:	1c03      	adds	r3, r0, #0
 8004686:	2184      	movs	r1, #132	; 0x84
 8004688:	05c9      	lsls	r1, r1, #23
 800468a:	1c18      	adds	r0, r3, #0
 800468c:	f7fc f83e 	bl	800070c <__aeabi_fadd>
 8004690:	1c03      	adds	r3, r0, #0
 8004692:	1c1a      	adds	r2, r3, #0
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	601a      	str	r2, [r3, #0]
	  }
}
 8004698:	46c0      	nop			; (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	b005      	add	sp, #20
 800469e:	bd90      	pop	{r4, r7, pc}
 80046a0:	41100000 	.word	0x41100000
 80046a4:	40a00000 	.word	0x40a00000

080046a8 <get_moistureReadings>:
void get_moistureReadings(ADC_ChannelConfTypeDef *ADC_configPtr, uint16_t *moisturePtr){
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]

	  //ADC_configPtr->Channel = ADC_CHANNEL_13;
	  if(HAL_ADC_ConfigChannel(&hadc, ADC_configPtr) != HAL_OK) {
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <get_moistureReadings+0x4c>)
 80046b6:	0011      	movs	r1, r2
 80046b8:	0018      	movs	r0, r3
 80046ba:	f000 fd6b 	bl	8005194 <HAL_ADC_ConfigChannel>
 80046be:	1e03      	subs	r3, r0, #0
 80046c0:	d001      	beq.n	80046c6 <get_moistureReadings+0x1e>
		  Error_Handler();
 80046c2:	f000 f819 	bl	80046f8 <Error_Handler>
	  }
	  HAL_ADC_Start(&hadc); 									//Start Soil ADC
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <get_moistureReadings+0x4c>)
 80046c8:	0018      	movs	r0, r3
 80046ca:	f000 fc67 	bl	8004f9c <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80046ce:	2301      	movs	r3, #1
 80046d0:	425a      	negs	r2, r3
 80046d2:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <get_moistureReadings+0x4c>)
 80046d4:	0011      	movs	r1, r2
 80046d6:	0018      	movs	r0, r3
 80046d8:	f000 fcb4 	bl	8005044 <HAL_ADC_PollForConversion>
	  *moisturePtr = HAL_ADC_GetValue(&hadc);
 80046dc:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <get_moistureReadings+0x4c>)
 80046de:	0018      	movs	r0, r3
 80046e0:	f000 fd4c 	bl	800517c <HAL_ADC_GetValue>
 80046e4:	0003      	movs	r3, r0
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	801a      	strh	r2, [r3, #0]
}
 80046ec:	46c0      	nop			; (mov r8, r8)
 80046ee:	46bd      	mov	sp, r7
 80046f0:	b002      	add	sp, #8
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	200003f0 	.word	0x200003f0

080046f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046fc:	b672      	cpsid	i
}
 80046fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004700:	e7fe      	b.n	8004700 <Error_Handler+0x8>
	...

08004704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004708:	4b07      	ldr	r3, [pc, #28]	; (8004728 <HAL_MspInit+0x24>)
 800470a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <HAL_MspInit+0x24>)
 800470e:	2101      	movs	r1, #1
 8004710:	430a      	orrs	r2, r1
 8004712:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004714:	4b04      	ldr	r3, [pc, #16]	; (8004728 <HAL_MspInit+0x24>)
 8004716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004718:	4b03      	ldr	r3, [pc, #12]	; (8004728 <HAL_MspInit+0x24>)
 800471a:	2180      	movs	r1, #128	; 0x80
 800471c:	0549      	lsls	r1, r1, #21
 800471e:	430a      	orrs	r2, r1
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40021000 	.word	0x40021000

0800472c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800472c:	b590      	push	{r4, r7, lr}
 800472e:	b08b      	sub	sp, #44	; 0x2c
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004734:	2414      	movs	r4, #20
 8004736:	193b      	adds	r3, r7, r4
 8004738:	0018      	movs	r0, r3
 800473a:	2314      	movs	r3, #20
 800473c:	001a      	movs	r2, r3
 800473e:	2100      	movs	r1, #0
 8004740:	f003 ff18 	bl	8008574 <memset>
  if(hadc->Instance==ADC1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a22      	ldr	r2, [pc, #136]	; (80047d4 <HAL_ADC_MspInit+0xa8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d13e      	bne.n	80047cc <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800474e:	4b22      	ldr	r3, [pc, #136]	; (80047d8 <HAL_ADC_MspInit+0xac>)
 8004750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004752:	4b21      	ldr	r3, [pc, #132]	; (80047d8 <HAL_ADC_MspInit+0xac>)
 8004754:	2180      	movs	r1, #128	; 0x80
 8004756:	0089      	lsls	r1, r1, #2
 8004758:	430a      	orrs	r2, r1
 800475a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800475c:	4b1e      	ldr	r3, [pc, #120]	; (80047d8 <HAL_ADC_MspInit+0xac>)
 800475e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004760:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <HAL_ADC_MspInit+0xac>)
 8004762:	2104      	movs	r1, #4
 8004764:	430a      	orrs	r2, r1
 8004766:	62da      	str	r2, [r3, #44]	; 0x2c
 8004768:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <HAL_ADC_MspInit+0xac>)
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	2204      	movs	r2, #4
 800476e:	4013      	ands	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004774:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <HAL_ADC_MspInit+0xac>)
 8004776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004778:	4b17      	ldr	r3, [pc, #92]	; (80047d8 <HAL_ADC_MspInit+0xac>)
 800477a:	2101      	movs	r1, #1
 800477c:	430a      	orrs	r2, r1
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004780:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <HAL_ADC_MspInit+0xac>)
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	2201      	movs	r2, #1
 8004786:	4013      	ands	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC3     ------> ADC_IN13
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800478c:	193b      	adds	r3, r7, r4
 800478e:	2208      	movs	r2, #8
 8004790:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004792:	193b      	adds	r3, r7, r4
 8004794:	2203      	movs	r2, #3
 8004796:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004798:	193b      	adds	r3, r7, r4
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800479e:	193b      	adds	r3, r7, r4
 80047a0:	4a0e      	ldr	r2, [pc, #56]	; (80047dc <HAL_ADC_MspInit+0xb0>)
 80047a2:	0019      	movs	r1, r3
 80047a4:	0010      	movs	r0, r2
 80047a6:	f000 feb7 	bl	8005518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80047aa:	0021      	movs	r1, r4
 80047ac:	187b      	adds	r3, r7, r1
 80047ae:	2201      	movs	r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047b2:	187b      	adds	r3, r7, r1
 80047b4:	2203      	movs	r2, #3
 80047b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b8:	187b      	adds	r3, r7, r1
 80047ba:	2200      	movs	r2, #0
 80047bc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047be:	187a      	adds	r2, r7, r1
 80047c0:	23a0      	movs	r3, #160	; 0xa0
 80047c2:	05db      	lsls	r3, r3, #23
 80047c4:	0011      	movs	r1, r2
 80047c6:	0018      	movs	r0, r3
 80047c8:	f000 fea6 	bl	8005518 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80047cc:	46c0      	nop			; (mov r8, r8)
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b00b      	add	sp, #44	; 0x2c
 80047d2:	bd90      	pop	{r4, r7, pc}
 80047d4:	40012400 	.word	0x40012400
 80047d8:	40021000 	.word	0x40021000
 80047dc:	50000800 	.word	0x50000800

080047e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80047e0:	b590      	push	{r4, r7, lr}
 80047e2:	b089      	sub	sp, #36	; 0x24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e8:	240c      	movs	r4, #12
 80047ea:	193b      	adds	r3, r7, r4
 80047ec:	0018      	movs	r0, r3
 80047ee:	2314      	movs	r3, #20
 80047f0:	001a      	movs	r2, r3
 80047f2:	2100      	movs	r1, #0
 80047f4:	f003 febe 	bl	8008574 <memset>
  if(hi2c->Instance==I2C1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a17      	ldr	r2, [pc, #92]	; (800485c <HAL_I2C_MspInit+0x7c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d128      	bne.n	8004854 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004802:	4b17      	ldr	r3, [pc, #92]	; (8004860 <HAL_I2C_MspInit+0x80>)
 8004804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004806:	4b16      	ldr	r3, [pc, #88]	; (8004860 <HAL_I2C_MspInit+0x80>)
 8004808:	2102      	movs	r1, #2
 800480a:	430a      	orrs	r2, r1
 800480c:	62da      	str	r2, [r3, #44]	; 0x2c
 800480e:	4b14      	ldr	r3, [pc, #80]	; (8004860 <HAL_I2C_MspInit+0x80>)
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	2202      	movs	r2, #2
 8004814:	4013      	ands	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]
 8004818:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800481a:	0021      	movs	r1, r4
 800481c:	187b      	adds	r3, r7, r1
 800481e:	22c0      	movs	r2, #192	; 0xc0
 8004820:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004822:	187b      	adds	r3, r7, r1
 8004824:	2212      	movs	r2, #18
 8004826:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004828:	187b      	adds	r3, r7, r1
 800482a:	2200      	movs	r2, #0
 800482c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800482e:	187b      	adds	r3, r7, r1
 8004830:	2203      	movs	r2, #3
 8004832:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004834:	187b      	adds	r3, r7, r1
 8004836:	2201      	movs	r2, #1
 8004838:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800483a:	187b      	adds	r3, r7, r1
 800483c:	4a09      	ldr	r2, [pc, #36]	; (8004864 <HAL_I2C_MspInit+0x84>)
 800483e:	0019      	movs	r1, r3
 8004840:	0010      	movs	r0, r2
 8004842:	f000 fe69 	bl	8005518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004846:	4b06      	ldr	r3, [pc, #24]	; (8004860 <HAL_I2C_MspInit+0x80>)
 8004848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_I2C_MspInit+0x80>)
 800484c:	2180      	movs	r1, #128	; 0x80
 800484e:	0389      	lsls	r1, r1, #14
 8004850:	430a      	orrs	r2, r1
 8004852:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004854:	46c0      	nop			; (mov r8, r8)
 8004856:	46bd      	mov	sp, r7
 8004858:	b009      	add	sp, #36	; 0x24
 800485a:	bd90      	pop	{r4, r7, pc}
 800485c:	40005400 	.word	0x40005400
 8004860:	40021000 	.word	0x40021000
 8004864:	50000400 	.word	0x50000400

08004868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	05db      	lsls	r3, r3, #23
 8004878:	429a      	cmp	r2, r3
 800487a:	d105      	bne.n	8004888 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <HAL_TIM_Base_MspInit+0x28>)
 800487e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004880:	4b03      	ldr	r3, [pc, #12]	; (8004890 <HAL_TIM_Base_MspInit+0x28>)
 8004882:	2101      	movs	r1, #1
 8004884:	430a      	orrs	r2, r1
 8004886:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004888:	46c0      	nop			; (mov r8, r8)
 800488a:	46bd      	mov	sp, r7
 800488c:	b002      	add	sp, #8
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000

08004894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004894:	b590      	push	{r4, r7, lr}
 8004896:	b08b      	sub	sp, #44	; 0x2c
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800489c:	2414      	movs	r4, #20
 800489e:	193b      	adds	r3, r7, r4
 80048a0:	0018      	movs	r0, r3
 80048a2:	2314      	movs	r3, #20
 80048a4:	001a      	movs	r2, r3
 80048a6:	2100      	movs	r1, #0
 80048a8:	f003 fe64 	bl	8008574 <memset>
  if(huart->Instance==USART1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a30      	ldr	r2, [pc, #192]	; (8004974 <HAL_UART_MspInit+0xe0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d12b      	bne.n	800490e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048b6:	4b30      	ldr	r3, [pc, #192]	; (8004978 <HAL_UART_MspInit+0xe4>)
 80048b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ba:	4b2f      	ldr	r3, [pc, #188]	; (8004978 <HAL_UART_MspInit+0xe4>)
 80048bc:	2180      	movs	r1, #128	; 0x80
 80048be:	01c9      	lsls	r1, r1, #7
 80048c0:	430a      	orrs	r2, r1
 80048c2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c4:	4b2c      	ldr	r3, [pc, #176]	; (8004978 <HAL_UART_MspInit+0xe4>)
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	4b2b      	ldr	r3, [pc, #172]	; (8004978 <HAL_UART_MspInit+0xe4>)
 80048ca:	2101      	movs	r1, #1
 80048cc:	430a      	orrs	r2, r1
 80048ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80048d0:	4b29      	ldr	r3, [pc, #164]	; (8004978 <HAL_UART_MspInit+0xe4>)
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	2201      	movs	r2, #1
 80048d6:	4013      	ands	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80048dc:	193b      	adds	r3, r7, r4
 80048de:	22c0      	movs	r2, #192	; 0xc0
 80048e0:	00d2      	lsls	r2, r2, #3
 80048e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e4:	0021      	movs	r1, r4
 80048e6:	187b      	adds	r3, r7, r1
 80048e8:	2202      	movs	r2, #2
 80048ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ec:	187b      	adds	r3, r7, r1
 80048ee:	2200      	movs	r2, #0
 80048f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f2:	187b      	adds	r3, r7, r1
 80048f4:	2203      	movs	r2, #3
 80048f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80048f8:	187b      	adds	r3, r7, r1
 80048fa:	2204      	movs	r2, #4
 80048fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048fe:	187a      	adds	r2, r7, r1
 8004900:	23a0      	movs	r3, #160	; 0xa0
 8004902:	05db      	lsls	r3, r3, #23
 8004904:	0011      	movs	r1, r2
 8004906:	0018      	movs	r0, r3
 8004908:	f000 fe06 	bl	8005518 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 800490c:	e02e      	b.n	800496c <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART4)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1a      	ldr	r2, [pc, #104]	; (800497c <HAL_UART_MspInit+0xe8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d129      	bne.n	800496c <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART4_CLK_ENABLE();
 8004918:	4b17      	ldr	r3, [pc, #92]	; (8004978 <HAL_UART_MspInit+0xe4>)
 800491a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491c:	4b16      	ldr	r3, [pc, #88]	; (8004978 <HAL_UART_MspInit+0xe4>)
 800491e:	2180      	movs	r1, #128	; 0x80
 8004920:	0309      	lsls	r1, r1, #12
 8004922:	430a      	orrs	r2, r1
 8004924:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004926:	4b14      	ldr	r3, [pc, #80]	; (8004978 <HAL_UART_MspInit+0xe4>)
 8004928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492a:	4b13      	ldr	r3, [pc, #76]	; (8004978 <HAL_UART_MspInit+0xe4>)
 800492c:	2104      	movs	r1, #4
 800492e:	430a      	orrs	r2, r1
 8004930:	62da      	str	r2, [r3, #44]	; 0x2c
 8004932:	4b11      	ldr	r3, [pc, #68]	; (8004978 <HAL_UART_MspInit+0xe4>)
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	2204      	movs	r2, #4
 8004938:	4013      	ands	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800493e:	2114      	movs	r1, #20
 8004940:	187b      	adds	r3, r7, r1
 8004942:	22c0      	movs	r2, #192	; 0xc0
 8004944:	0112      	lsls	r2, r2, #4
 8004946:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004948:	187b      	adds	r3, r7, r1
 800494a:	2202      	movs	r2, #2
 800494c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494e:	187b      	adds	r3, r7, r1
 8004950:	2200      	movs	r2, #0
 8004952:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004954:	187b      	adds	r3, r7, r1
 8004956:	2203      	movs	r2, #3
 8004958:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800495a:	187b      	adds	r3, r7, r1
 800495c:	2206      	movs	r2, #6
 800495e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004960:	187b      	adds	r3, r7, r1
 8004962:	4a07      	ldr	r2, [pc, #28]	; (8004980 <HAL_UART_MspInit+0xec>)
 8004964:	0019      	movs	r1, r3
 8004966:	0010      	movs	r0, r2
 8004968:	f000 fdd6 	bl	8005518 <HAL_GPIO_Init>
}
 800496c:	46c0      	nop			; (mov r8, r8)
 800496e:	46bd      	mov	sp, r7
 8004970:	b00b      	add	sp, #44	; 0x2c
 8004972:	bd90      	pop	{r4, r7, pc}
 8004974:	40013800 	.word	0x40013800
 8004978:	40021000 	.word	0x40021000
 800497c:	40004c00 	.word	0x40004c00
 8004980:	50000800 	.word	0x50000800

08004984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004988:	e7fe      	b.n	8004988 <NMI_Handler+0x4>

0800498a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800498e:	e7fe      	b.n	800498e <HardFault_Handler+0x4>

08004990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004994:	46c0      	nop			; (mov r8, r8)
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049a8:	f000 f944 	bl	8004c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049ac:	46c0      	nop			; (mov r8, r8)
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	af00      	add	r7, sp, #0
	return 1;
 80049b6:	2301      	movs	r3, #1
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <_kill>:

int _kill(int pid, int sig)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80049c8:	f003 fdaa 	bl	8008520 <__errno>
 80049cc:	0003      	movs	r3, r0
 80049ce:	2216      	movs	r2, #22
 80049d0:	601a      	str	r2, [r3, #0]
	return -1;
 80049d2:	2301      	movs	r3, #1
 80049d4:	425b      	negs	r3, r3
}
 80049d6:	0018      	movs	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	b002      	add	sp, #8
 80049dc:	bd80      	pop	{r7, pc}

080049de <_exit>:

void _exit (int status)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80049e6:	2301      	movs	r3, #1
 80049e8:	425a      	negs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	0011      	movs	r1, r2
 80049ee:	0018      	movs	r0, r3
 80049f0:	f7ff ffe5 	bl	80049be <_kill>
	while (1) {}		/* Make sure we hang here */
 80049f4:	e7fe      	b.n	80049f4 <_exit+0x16>

080049f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b086      	sub	sp, #24
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	e00a      	b.n	8004a1e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004a08:	e000      	b.n	8004a0c <_read+0x16>
 8004a0a:	bf00      	nop
 8004a0c:	0001      	movs	r1, r0
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	60ba      	str	r2, [r7, #8]
 8004a14:	b2ca      	uxtb	r2, r1
 8004a16:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	dbf0      	blt.n	8004a08 <_read+0x12>
	}

return len;
 8004a26:	687b      	ldr	r3, [r7, #4]
}
 8004a28:	0018      	movs	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b006      	add	sp, #24
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e009      	b.n	8004a56 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	60ba      	str	r2, [r7, #8]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	e000      	b.n	8004a50 <_write+0x20>
 8004a4e:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	3301      	adds	r3, #1
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	dbf1      	blt.n	8004a42 <_write+0x12>
	}
	return len;
 8004a5e:	687b      	ldr	r3, [r7, #4]
}
 8004a60:	0018      	movs	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b006      	add	sp, #24
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <_close>:

int _close(int file)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	return -1;
 8004a70:	2301      	movs	r3, #1
 8004a72:	425b      	negs	r3, r3
}
 8004a74:	0018      	movs	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b002      	add	sp, #8
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2280      	movs	r2, #128	; 0x80
 8004a8a:	0192      	lsls	r2, r2, #6
 8004a8c:	605a      	str	r2, [r3, #4]
	return 0;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	0018      	movs	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	b002      	add	sp, #8
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <_isatty>:

int _isatty(int file)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	return 1;
 8004aa0:	2301      	movs	r3, #1
}
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b002      	add	sp, #8
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	607a      	str	r2, [r7, #4]
	return 0;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	0018      	movs	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	b004      	add	sp, #16
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ac8:	4a14      	ldr	r2, [pc, #80]	; (8004b1c <_sbrk+0x5c>)
 8004aca:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <_sbrk+0x60>)
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ad4:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <_sbrk+0x64>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d102      	bne.n	8004ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004adc:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <_sbrk+0x64>)
 8004ade:	4a12      	ldr	r2, [pc, #72]	; (8004b28 <_sbrk+0x68>)
 8004ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <_sbrk+0x64>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	18d3      	adds	r3, r2, r3
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d207      	bcs.n	8004b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004af0:	f003 fd16 	bl	8008520 <__errno>
 8004af4:	0003      	movs	r3, r0
 8004af6:	220c      	movs	r2, #12
 8004af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004afa:	2301      	movs	r3, #1
 8004afc:	425b      	negs	r3, r3
 8004afe:	e009      	b.n	8004b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b00:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <_sbrk+0x64>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b06:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <_sbrk+0x64>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	18d2      	adds	r2, r2, r3
 8004b0e:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <_sbrk+0x64>)
 8004b10:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004b12:	68fb      	ldr	r3, [r7, #12]
}
 8004b14:	0018      	movs	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	b006      	add	sp, #24
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20005000 	.word	0x20005000
 8004b20:	00000400 	.word	0x00000400
 8004b24:	2000021c 	.word	0x2000021c
 8004b28:	20000460 	.word	0x20000460

08004b2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b30:	46c0      	nop			; (mov r8, r8)
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004b38:	480d      	ldr	r0, [pc, #52]	; (8004b70 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004b3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b3c:	480d      	ldr	r0, [pc, #52]	; (8004b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8004b3e:	490e      	ldr	r1, [pc, #56]	; (8004b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b40:	4a0e      	ldr	r2, [pc, #56]	; (8004b7c <LoopForever+0xe>)
  movs r3, #0
 8004b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b44:	e002      	b.n	8004b4c <LoopCopyDataInit>

08004b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b4a:	3304      	adds	r3, #4

08004b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b50:	d3f9      	bcc.n	8004b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b52:	4a0b      	ldr	r2, [pc, #44]	; (8004b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b54:	4c0b      	ldr	r4, [pc, #44]	; (8004b84 <LoopForever+0x16>)
  movs r3, #0
 8004b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b58:	e001      	b.n	8004b5e <LoopFillZerobss>

08004b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b5c:	3204      	adds	r2, #4

08004b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b60:	d3fb      	bcc.n	8004b5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004b62:	f7ff ffe3 	bl	8004b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b66:	f003 fce1 	bl	800852c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b6a:	f7fe ff7f 	bl	8003a6c <main>

08004b6e <LoopForever>:

LoopForever:
    b LoopForever
 8004b6e:	e7fe      	b.n	8004b6e <LoopForever>
   ldr   r0, =_estack
 8004b70:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b78:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004b7c:	0800c9d8 	.word	0x0800c9d8
  ldr r2, =_sbss
 8004b80:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004b84:	20000460 	.word	0x20000460

08004b88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b88:	e7fe      	b.n	8004b88 <ADC1_COMP_IRQHandler>
	...

08004b8c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b92:	1dfb      	adds	r3, r7, #7
 8004b94:	2200      	movs	r2, #0
 8004b96:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_Init+0x3c>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <HAL_Init+0x3c>)
 8004b9e:	2140      	movs	r1, #64	; 0x40
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ba4:	2003      	movs	r0, #3
 8004ba6:	f000 f811 	bl	8004bcc <HAL_InitTick>
 8004baa:	1e03      	subs	r3, r0, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004bae:	1dfb      	adds	r3, r7, #7
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	e001      	b.n	8004bba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004bb6:	f7ff fda5 	bl	8004704 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004bba:	1dfb      	adds	r3, r7, #7
 8004bbc:	781b      	ldrb	r3, [r3, #0]
}
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b002      	add	sp, #8
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	40022000 	.word	0x40022000

08004bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bcc:	b590      	push	{r4, r7, lr}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bd4:	4b14      	ldr	r3, [pc, #80]	; (8004c28 <HAL_InitTick+0x5c>)
 8004bd6:	681c      	ldr	r4, [r3, #0]
 8004bd8:	4b14      	ldr	r3, [pc, #80]	; (8004c2c <HAL_InitTick+0x60>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	0019      	movs	r1, r3
 8004bde:	23fa      	movs	r3, #250	; 0xfa
 8004be0:	0098      	lsls	r0, r3, #2
 8004be2:	f7fb faad 	bl	8000140 <__udivsi3>
 8004be6:	0003      	movs	r3, r0
 8004be8:	0019      	movs	r1, r3
 8004bea:	0020      	movs	r0, r4
 8004bec:	f7fb faa8 	bl	8000140 <__udivsi3>
 8004bf0:	0003      	movs	r3, r0
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f000 fc83 	bl	80054fe <HAL_SYSTICK_Config>
 8004bf8:	1e03      	subs	r3, r0, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e00f      	b.n	8004c20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d80b      	bhi.n	8004c1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	2301      	movs	r3, #1
 8004c0a:	425b      	negs	r3, r3
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f000 fc60 	bl	80054d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c14:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <HAL_InitTick+0x64>)
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e000      	b.n	8004c20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
}
 8004c20:	0018      	movs	r0, r3
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b003      	add	sp, #12
 8004c26:	bd90      	pop	{r4, r7, pc}
 8004c28:	20000000 	.word	0x20000000
 8004c2c:	20000008 	.word	0x20000008
 8004c30:	20000004 	.word	0x20000004

08004c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c38:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <HAL_IncTick+0x1c>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	001a      	movs	r2, r3
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <HAL_IncTick+0x20>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	18d2      	adds	r2, r2, r3
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <HAL_IncTick+0x20>)
 8004c46:	601a      	str	r2, [r3, #0]
}
 8004c48:	46c0      	nop			; (mov r8, r8)
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	20000008 	.word	0x20000008
 8004c54:	2000044c 	.word	0x2000044c

08004c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c5c:	4b02      	ldr	r3, [pc, #8]	; (8004c68 <HAL_GetTick+0x10>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
}
 8004c60:	0018      	movs	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	2000044c 	.word	0x2000044c

08004c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c74:	f7ff fff0 	bl	8004c58 <HAL_GetTick>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3301      	adds	r3, #1
 8004c84:	d005      	beq.n	8004c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c86:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <HAL_Delay+0x44>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	001a      	movs	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	189b      	adds	r3, r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	f7ff ffe0 	bl	8004c58 <HAL_GetTick>
 8004c98:	0002      	movs	r2, r0
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d8f7      	bhi.n	8004c94 <HAL_Delay+0x28>
  {
  }
}
 8004ca4:	46c0      	nop			; (mov r8, r8)
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b004      	add	sp, #16
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	20000008 	.word	0x20000008

08004cb4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e159      	b.n	8004f7a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2250      	movs	r2, #80	; 0x50
 8004cd8:	2100      	movs	r1, #0
 8004cda:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f7ff fd24 	bl	800472c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce8:	2210      	movs	r2, #16
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b10      	cmp	r3, #16
 8004cee:	d005      	beq.n	8004cfc <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004cfa:	d00b      	beq.n	8004d14 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d00:	2210      	movs	r2, #16
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2250      	movs	r2, #80	; 0x50
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e132      	b.n	8004f7a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d18:	4a9a      	ldr	r2, [pc, #616]	; (8004f84 <HAL_ADC_Init+0x2d0>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d108      	bne.n	8004d44 <HAL_ADC_Init+0x90>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_ADC_Init+0x90>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <HAL_ADC_Init+0x92>
 8004d44:	2300      	movs	r3, #0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d149      	bne.n	8004dde <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	23c0      	movs	r3, #192	; 0xc0
 8004d50:	061b      	lsls	r3, r3, #24
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d00b      	beq.n	8004d6e <HAL_ADC_Init+0xba>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	2380      	movs	r3, #128	; 0x80
 8004d5c:	05db      	lsls	r3, r3, #23
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d005      	beq.n	8004d6e <HAL_ADC_Init+0xba>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	2380      	movs	r3, #128	; 0x80
 8004d68:	061b      	lsls	r3, r3, #24
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d111      	bne.n	8004d92 <HAL_ADC_Init+0xde>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	0092      	lsls	r2, r2, #2
 8004d7a:	0892      	lsrs	r2, r2, #2
 8004d7c:	611a      	str	r2, [r3, #16]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6919      	ldr	r1, [r3, #16]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	611a      	str	r2, [r3, #16]
 8004d90:	e014      	b.n	8004dbc <HAL_ADC_Init+0x108>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	0092      	lsls	r2, r2, #2
 8004d9e:	0892      	lsrs	r2, r2, #2
 8004da0:	611a      	str	r2, [r3, #16]
 8004da2:	4b79      	ldr	r3, [pc, #484]	; (8004f88 <HAL_ADC_Init+0x2d4>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4b78      	ldr	r3, [pc, #480]	; (8004f88 <HAL_ADC_Init+0x2d4>)
 8004da8:	4978      	ldr	r1, [pc, #480]	; (8004f8c <HAL_ADC_Init+0x2d8>)
 8004daa:	400a      	ands	r2, r1
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	4b76      	ldr	r3, [pc, #472]	; (8004f88 <HAL_ADC_Init+0x2d4>)
 8004db0:	6819      	ldr	r1, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	4b74      	ldr	r3, [pc, #464]	; (8004f88 <HAL_ADC_Init+0x2d4>)
 8004db8:	430a      	orrs	r2, r1
 8004dba:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2118      	movs	r1, #24
 8004dc8:	438a      	bics	r2, r1
 8004dca:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68d9      	ldr	r1, [r3, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004dde:	4b6a      	ldr	r3, [pc, #424]	; (8004f88 <HAL_ADC_Init+0x2d4>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4b69      	ldr	r3, [pc, #420]	; (8004f88 <HAL_ADC_Init+0x2d4>)
 8004de4:	496a      	ldr	r1, [pc, #424]	; (8004f90 <HAL_ADC_Init+0x2dc>)
 8004de6:	400a      	ands	r2, r1
 8004de8:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8004dea:	4b67      	ldr	r3, [pc, #412]	; (8004f88 <HAL_ADC_Init+0x2d4>)
 8004dec:	6819      	ldr	r1, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df2:	065a      	lsls	r2, r3, #25
 8004df4:	4b64      	ldr	r3, [pc, #400]	; (8004f88 <HAL_ADC_Init+0x2d4>)
 8004df6:	430a      	orrs	r2, r1
 8004df8:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	2380      	movs	r3, #128	; 0x80
 8004e02:	055b      	lsls	r3, r3, #21
 8004e04:	4013      	ands	r3, r2
 8004e06:	d108      	bne.n	8004e1a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2180      	movs	r1, #128	; 0x80
 8004e14:	0549      	lsls	r1, r1, #21
 8004e16:	430a      	orrs	r2, r1
 8004e18:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	495b      	ldr	r1, [pc, #364]	; (8004f94 <HAL_ADC_Init+0x2e0>)
 8004e26:	400a      	ands	r2, r1
 8004e28:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68d9      	ldr	r1, [r3, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d101      	bne.n	8004e40 <HAL_ADC_Init+0x18c>
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	e000      	b.n	8004e42 <HAL_ADC_Init+0x18e>
 8004e40:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004e42:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2020      	movs	r0, #32
 8004e48:	5c1b      	ldrb	r3, [r3, r0]
 8004e4a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004e4c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	202c      	movs	r0, #44	; 0x2c
 8004e52:	5c1b      	ldrb	r3, [r3, r0]
 8004e54:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004e56:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004e5c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004e64:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004e6c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e7a:	23c2      	movs	r3, #194	; 0xc2
 8004e7c:	33ff      	adds	r3, #255	; 0xff
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d00b      	beq.n	8004e9a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68d9      	ldr	r1, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2221      	movs	r2, #33	; 0x21
 8004e9e:	5c9b      	ldrb	r3, [r3, r2]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d11a      	bne.n	8004eda <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	5c9b      	ldrb	r3, [r3, r2]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d109      	bne.n	8004ec2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2180      	movs	r1, #128	; 0x80
 8004eba:	0249      	lsls	r1, r1, #9
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	60da      	str	r2, [r3, #12]
 8004ec0:	e00b      	b.n	8004eda <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d11f      	bne.n	8004f22 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	492a      	ldr	r1, [pc, #168]	; (8004f98 <HAL_ADC_Init+0x2e4>)
 8004eee:	400a      	ands	r2, r1
 8004ef0:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6919      	ldr	r1, [r3, #16]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004f00:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8004f06:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691a      	ldr	r2, [r3, #16]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	611a      	str	r2, [r3, #16]
 8004f20:	e00e      	b.n	8004f40 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d107      	bne.n	8004f40 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691a      	ldr	r2, [r3, #16]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	438a      	bics	r2, r1
 8004f3e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2107      	movs	r1, #7
 8004f4c:	438a      	bics	r2, r1
 8004f4e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6959      	ldr	r1, [r3, #20]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	4393      	bics	r3, r2
 8004f70:	2201      	movs	r2, #1
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	b002      	add	sp, #8
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	fffffefd 	.word	0xfffffefd
 8004f88:	40012708 	.word	0x40012708
 8004f8c:	ffc3ffff 	.word	0xffc3ffff
 8004f90:	fdffffff 	.word	0xfdffffff
 8004f94:	fffe0219 	.word	0xfffe0219
 8004f98:	fffffc03 	.word	0xfffffc03

08004f9c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fa4:	230f      	movs	r3, #15
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	2200      	movs	r2, #0
 8004faa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2204      	movs	r2, #4
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d138      	bne.n	800502a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2250      	movs	r2, #80	; 0x50
 8004fbc:	5c9b      	ldrb	r3, [r3, r2]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_ADC_Start+0x2a>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e038      	b.n	8005038 <HAL_ADC_Start+0x9c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2250      	movs	r2, #80	; 0x50
 8004fca:	2101      	movs	r1, #1
 8004fcc:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d007      	beq.n	8004fe6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004fd6:	230f      	movs	r3, #15
 8004fd8:	18fc      	adds	r4, r7, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f000 f95f 	bl	80052a0 <ADC_Enable>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004fe6:	230f      	movs	r3, #15
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d120      	bne.n	8005032 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff4:	4a12      	ldr	r2, [pc, #72]	; (8005040 <HAL_ADC_Start+0xa4>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2280      	movs	r2, #128	; 0x80
 8004ffa:	0052      	lsls	r2, r2, #1
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2250      	movs	r2, #80	; 0x50
 800500c:	2100      	movs	r1, #0
 800500e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	221c      	movs	r2, #28
 8005016:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2104      	movs	r1, #4
 8005024:	430a      	orrs	r2, r1
 8005026:	609a      	str	r2, [r3, #8]
 8005028:	e003      	b.n	8005032 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800502a:	230f      	movs	r3, #15
 800502c:	18fb      	adds	r3, r7, r3
 800502e:	2202      	movs	r2, #2
 8005030:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005032:	230f      	movs	r3, #15
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	781b      	ldrb	r3, [r3, #0]
}
 8005038:	0018      	movs	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	b005      	add	sp, #20
 800503e:	bd90      	pop	{r4, r7, pc}
 8005040:	fffff0fe 	.word	0xfffff0fe

08005044 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	2b08      	cmp	r3, #8
 800505c:	d102      	bne.n	8005064 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800505e:	2308      	movs	r3, #8
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	e014      	b.n	800508e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	4013      	ands	r3, r2
 800506e:	2b01      	cmp	r3, #1
 8005070:	d10b      	bne.n	800508a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	2220      	movs	r2, #32
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2250      	movs	r2, #80	; 0x50
 8005082:	2100      	movs	r1, #0
 8005084:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e072      	b.n	8005170 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800508a:	230c      	movs	r3, #12
 800508c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800508e:	f7ff fde3 	bl	8004c58 <HAL_GetTick>
 8005092:	0003      	movs	r3, r0
 8005094:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005096:	e01f      	b.n	80050d8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	3301      	adds	r3, #1
 800509c:	d01c      	beq.n	80050d8 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <HAL_ADC_PollForConversion+0x70>
 80050a4:	f7ff fdd8 	bl	8004c58 <HAL_GetTick>
 80050a8:	0002      	movs	r2, r0
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d211      	bcs.n	80050d8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4013      	ands	r3, r2
 80050be:	d10b      	bne.n	80050d8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c4:	2204      	movs	r2, #4
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2250      	movs	r2, #80	; 0x50
 80050d0:	2100      	movs	r1, #0
 80050d2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e04b      	b.n	8005170 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4013      	ands	r3, r2
 80050e2:	d0d9      	beq.n	8005098 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e8:	2280      	movs	r2, #128	; 0x80
 80050ea:	0092      	lsls	r2, r2, #2
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	23c0      	movs	r3, #192	; 0xc0
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	4013      	ands	r3, r2
 80050fe:	d12e      	bne.n	800515e <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005106:	2b00      	cmp	r3, #0
 8005108:	d129      	bne.n	800515e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2208      	movs	r2, #8
 8005112:	4013      	ands	r3, r2
 8005114:	2b08      	cmp	r3, #8
 8005116:	d122      	bne.n	800515e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2204      	movs	r2, #4
 8005120:	4013      	ands	r3, r2
 8005122:	d110      	bne.n	8005146 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	210c      	movs	r1, #12
 8005130:	438a      	bics	r2, r1
 8005132:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005138:	4a0f      	ldr	r2, [pc, #60]	; (8005178 <HAL_ADC_PollForConversion+0x134>)
 800513a:	4013      	ands	r3, r2
 800513c:	2201      	movs	r2, #1
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	655a      	str	r2, [r3, #84]	; 0x54
 8005144:	e00b      	b.n	800515e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514a:	2220      	movs	r2, #32
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005156:	2201      	movs	r2, #1
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d103      	bne.n	800516e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	220c      	movs	r2, #12
 800516c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	0018      	movs	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	b004      	add	sp, #16
 8005176:	bd80      	pop	{r7, pc}
 8005178:	fffffefe 	.word	0xfffffefe

0800517c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800518a:	0018      	movs	r0, r3
 800518c:	46bd      	mov	sp, r7
 800518e:	b002      	add	sp, #8
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2250      	movs	r2, #80	; 0x50
 80051a2:	5c9b      	ldrb	r3, [r3, r2]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <HAL_ADC_ConfigChannel+0x18>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e06c      	b.n	8005286 <HAL_ADC_ConfigChannel+0xf2>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2250      	movs	r2, #80	; 0x50
 80051b0:	2101      	movs	r1, #1
 80051b2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2204      	movs	r2, #4
 80051bc:	4013      	ands	r3, r2
 80051be:	d00b      	beq.n	80051d8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c4:	2220      	movs	r2, #32
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2250      	movs	r2, #80	; 0x50
 80051d0:	2100      	movs	r1, #0
 80051d2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e056      	b.n	8005286 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4a2c      	ldr	r2, [pc, #176]	; (8005290 <HAL_ADC_ConfigChannel+0xfc>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d028      	beq.n	8005234 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	035b      	lsls	r3, r3, #13
 80051ee:	0b5a      	lsrs	r2, r3, #13
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	2380      	movs	r3, #128	; 0x80
 80051fe:	02db      	lsls	r3, r3, #11
 8005200:	4013      	ands	r3, r2
 8005202:	d009      	beq.n	8005218 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8005204:	4b23      	ldr	r3, [pc, #140]	; (8005294 <HAL_ADC_ConfigChannel+0x100>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	4b22      	ldr	r3, [pc, #136]	; (8005294 <HAL_ADC_ConfigChannel+0x100>)
 800520a:	2180      	movs	r1, #128	; 0x80
 800520c:	0409      	lsls	r1, r1, #16
 800520e:	430a      	orrs	r2, r1
 8005210:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8005212:	200a      	movs	r0, #10
 8005214:	f000 f8ac 	bl	8005370 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	029b      	lsls	r3, r3, #10
 8005220:	4013      	ands	r3, r2
 8005222:	d02b      	beq.n	800527c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8005224:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <HAL_ADC_ConfigChannel+0x100>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4b1a      	ldr	r3, [pc, #104]	; (8005294 <HAL_ADC_ConfigChannel+0x100>)
 800522a:	2180      	movs	r1, #128	; 0x80
 800522c:	03c9      	lsls	r1, r1, #15
 800522e:	430a      	orrs	r2, r1
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e023      	b.n	800527c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	035b      	lsls	r3, r3, #13
 8005240:	0b5b      	lsrs	r3, r3, #13
 8005242:	43d9      	mvns	r1, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	400a      	ands	r2, r1
 800524a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	02db      	lsls	r3, r3, #11
 8005254:	4013      	ands	r3, r2
 8005256:	d005      	beq.n	8005264 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8005258:	4b0e      	ldr	r3, [pc, #56]	; (8005294 <HAL_ADC_ConfigChannel+0x100>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <HAL_ADC_ConfigChannel+0x100>)
 800525e:	490e      	ldr	r1, [pc, #56]	; (8005298 <HAL_ADC_ConfigChannel+0x104>)
 8005260:	400a      	ands	r2, r1
 8005262:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	2380      	movs	r3, #128	; 0x80
 800526a:	029b      	lsls	r3, r3, #10
 800526c:	4013      	ands	r3, r2
 800526e:	d005      	beq.n	800527c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8005270:	4b08      	ldr	r3, [pc, #32]	; (8005294 <HAL_ADC_ConfigChannel+0x100>)
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	4b07      	ldr	r3, [pc, #28]	; (8005294 <HAL_ADC_ConfigChannel+0x100>)
 8005276:	4909      	ldr	r1, [pc, #36]	; (800529c <HAL_ADC_ConfigChannel+0x108>)
 8005278:	400a      	ands	r2, r1
 800527a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2250      	movs	r2, #80	; 0x50
 8005280:	2100      	movs	r1, #0
 8005282:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	0018      	movs	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	b002      	add	sp, #8
 800528c:	bd80      	pop	{r7, pc}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	00001001 	.word	0x00001001
 8005294:	40012708 	.word	0x40012708
 8005298:	ff7fffff 	.word	0xff7fffff
 800529c:	ffbfffff 	.word	0xffbfffff

080052a0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2203      	movs	r2, #3
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d108      	bne.n	80052cc <ADC_Enable+0x2c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2201      	movs	r2, #1
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <ADC_Enable+0x2c>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <ADC_Enable+0x2e>
 80052cc:	2300      	movs	r3, #0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d146      	bne.n	8005360 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	4a24      	ldr	r2, [pc, #144]	; (800536c <ADC_Enable+0xcc>)
 80052da:	4013      	ands	r3, r2
 80052dc:	d00d      	beq.n	80052fa <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e2:	2210      	movs	r2, #16
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ee:	2201      	movs	r2, #1
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e033      	b.n	8005362 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2101      	movs	r1, #1
 8005306:	430a      	orrs	r2, r1
 8005308:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800530a:	2001      	movs	r0, #1
 800530c:	f000 f830 	bl	8005370 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8005310:	f7ff fca2 	bl	8004c58 <HAL_GetTick>
 8005314:	0003      	movs	r3, r0
 8005316:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005318:	e01b      	b.n	8005352 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800531a:	f7ff fc9d 	bl	8004c58 <HAL_GetTick>
 800531e:	0002      	movs	r2, r0
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b0a      	cmp	r3, #10
 8005326:	d914      	bls.n	8005352 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2201      	movs	r2, #1
 8005330:	4013      	ands	r3, r2
 8005332:	2b01      	cmp	r3, #1
 8005334:	d00d      	beq.n	8005352 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533a:	2210      	movs	r2, #16
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005346:	2201      	movs	r2, #1
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e007      	b.n	8005362 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2201      	movs	r2, #1
 800535a:	4013      	ands	r3, r2
 800535c:	2b01      	cmp	r3, #1
 800535e:	d1dc      	bne.n	800531a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	0018      	movs	r0, r3
 8005364:	46bd      	mov	sp, r7
 8005366:	b004      	add	sp, #16
 8005368:	bd80      	pop	{r7, pc}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	80000017 	.word	0x80000017

08005370 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8005378:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <ADC_DelayMicroSecond+0x38>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	490b      	ldr	r1, [pc, #44]	; (80053ac <ADC_DelayMicroSecond+0x3c>)
 800537e:	0018      	movs	r0, r3
 8005380:	f7fa fede 	bl	8000140 <__udivsi3>
 8005384:	0003      	movs	r3, r0
 8005386:	001a      	movs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4353      	muls	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800538e:	e002      	b.n	8005396 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3b01      	subs	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1f9      	bne.n	8005390 <ADC_DelayMicroSecond+0x20>
  } 
}
 800539c:	46c0      	nop			; (mov r8, r8)
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b004      	add	sp, #16
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	20000000 	.word	0x20000000
 80053ac:	000f4240 	.word	0x000f4240

080053b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	0002      	movs	r2, r0
 80053b8:	6039      	str	r1, [r7, #0]
 80053ba:	1dfb      	adds	r3, r7, #7
 80053bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80053be:	1dfb      	adds	r3, r7, #7
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b7f      	cmp	r3, #127	; 0x7f
 80053c4:	d828      	bhi.n	8005418 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053c6:	4a2f      	ldr	r2, [pc, #188]	; (8005484 <__NVIC_SetPriority+0xd4>)
 80053c8:	1dfb      	adds	r3, r7, #7
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	b25b      	sxtb	r3, r3
 80053ce:	089b      	lsrs	r3, r3, #2
 80053d0:	33c0      	adds	r3, #192	; 0xc0
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	589b      	ldr	r3, [r3, r2]
 80053d6:	1dfa      	adds	r2, r7, #7
 80053d8:	7812      	ldrb	r2, [r2, #0]
 80053da:	0011      	movs	r1, r2
 80053dc:	2203      	movs	r2, #3
 80053de:	400a      	ands	r2, r1
 80053e0:	00d2      	lsls	r2, r2, #3
 80053e2:	21ff      	movs	r1, #255	; 0xff
 80053e4:	4091      	lsls	r1, r2
 80053e6:	000a      	movs	r2, r1
 80053e8:	43d2      	mvns	r2, r2
 80053ea:	401a      	ands	r2, r3
 80053ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	019b      	lsls	r3, r3, #6
 80053f2:	22ff      	movs	r2, #255	; 0xff
 80053f4:	401a      	ands	r2, r3
 80053f6:	1dfb      	adds	r3, r7, #7
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	0018      	movs	r0, r3
 80053fc:	2303      	movs	r3, #3
 80053fe:	4003      	ands	r3, r0
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005404:	481f      	ldr	r0, [pc, #124]	; (8005484 <__NVIC_SetPriority+0xd4>)
 8005406:	1dfb      	adds	r3, r7, #7
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	b25b      	sxtb	r3, r3
 800540c:	089b      	lsrs	r3, r3, #2
 800540e:	430a      	orrs	r2, r1
 8005410:	33c0      	adds	r3, #192	; 0xc0
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005416:	e031      	b.n	800547c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005418:	4a1b      	ldr	r2, [pc, #108]	; (8005488 <__NVIC_SetPriority+0xd8>)
 800541a:	1dfb      	adds	r3, r7, #7
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	0019      	movs	r1, r3
 8005420:	230f      	movs	r3, #15
 8005422:	400b      	ands	r3, r1
 8005424:	3b08      	subs	r3, #8
 8005426:	089b      	lsrs	r3, r3, #2
 8005428:	3306      	adds	r3, #6
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	18d3      	adds	r3, r2, r3
 800542e:	3304      	adds	r3, #4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	1dfa      	adds	r2, r7, #7
 8005434:	7812      	ldrb	r2, [r2, #0]
 8005436:	0011      	movs	r1, r2
 8005438:	2203      	movs	r2, #3
 800543a:	400a      	ands	r2, r1
 800543c:	00d2      	lsls	r2, r2, #3
 800543e:	21ff      	movs	r1, #255	; 0xff
 8005440:	4091      	lsls	r1, r2
 8005442:	000a      	movs	r2, r1
 8005444:	43d2      	mvns	r2, r2
 8005446:	401a      	ands	r2, r3
 8005448:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	019b      	lsls	r3, r3, #6
 800544e:	22ff      	movs	r2, #255	; 0xff
 8005450:	401a      	ands	r2, r3
 8005452:	1dfb      	adds	r3, r7, #7
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	0018      	movs	r0, r3
 8005458:	2303      	movs	r3, #3
 800545a:	4003      	ands	r3, r0
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005460:	4809      	ldr	r0, [pc, #36]	; (8005488 <__NVIC_SetPriority+0xd8>)
 8005462:	1dfb      	adds	r3, r7, #7
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	001c      	movs	r4, r3
 8005468:	230f      	movs	r3, #15
 800546a:	4023      	ands	r3, r4
 800546c:	3b08      	subs	r3, #8
 800546e:	089b      	lsrs	r3, r3, #2
 8005470:	430a      	orrs	r2, r1
 8005472:	3306      	adds	r3, #6
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	18c3      	adds	r3, r0, r3
 8005478:	3304      	adds	r3, #4
 800547a:	601a      	str	r2, [r3, #0]
}
 800547c:	46c0      	nop			; (mov r8, r8)
 800547e:	46bd      	mov	sp, r7
 8005480:	b003      	add	sp, #12
 8005482:	bd90      	pop	{r4, r7, pc}
 8005484:	e000e100 	.word	0xe000e100
 8005488:	e000ed00 	.word	0xe000ed00

0800548c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	1e5a      	subs	r2, r3, #1
 8005498:	2380      	movs	r3, #128	; 0x80
 800549a:	045b      	lsls	r3, r3, #17
 800549c:	429a      	cmp	r2, r3
 800549e:	d301      	bcc.n	80054a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054a0:	2301      	movs	r3, #1
 80054a2:	e010      	b.n	80054c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054a4:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <SysTick_Config+0x44>)
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	3a01      	subs	r2, #1
 80054aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054ac:	2301      	movs	r3, #1
 80054ae:	425b      	negs	r3, r3
 80054b0:	2103      	movs	r1, #3
 80054b2:	0018      	movs	r0, r3
 80054b4:	f7ff ff7c 	bl	80053b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <SysTick_Config+0x44>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054be:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <SysTick_Config+0x44>)
 80054c0:	2207      	movs	r2, #7
 80054c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	0018      	movs	r0, r3
 80054c8:	46bd      	mov	sp, r7
 80054ca:	b002      	add	sp, #8
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	e000e010 	.word	0xe000e010

080054d4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
 80054de:	210f      	movs	r1, #15
 80054e0:	187b      	adds	r3, r7, r1
 80054e2:	1c02      	adds	r2, r0, #0
 80054e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	187b      	adds	r3, r7, r1
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	b25b      	sxtb	r3, r3
 80054ee:	0011      	movs	r1, r2
 80054f0:	0018      	movs	r0, r3
 80054f2:	f7ff ff5d 	bl	80053b0 <__NVIC_SetPriority>
}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b004      	add	sp, #16
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b082      	sub	sp, #8
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	0018      	movs	r0, r3
 800550a:	f7ff ffbf 	bl	800548c <SysTick_Config>
 800550e:	0003      	movs	r3, r0
}
 8005510:	0018      	movs	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	b002      	add	sp, #8
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800552a:	2300      	movs	r3, #0
 800552c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800552e:	e155      	b.n	80057dc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2101      	movs	r1, #1
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4091      	lsls	r1, r2
 800553a:	000a      	movs	r2, r1
 800553c:	4013      	ands	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d100      	bne.n	8005548 <HAL_GPIO_Init+0x30>
 8005546:	e146      	b.n	80057d6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2203      	movs	r2, #3
 800554e:	4013      	ands	r3, r2
 8005550:	2b01      	cmp	r3, #1
 8005552:	d005      	beq.n	8005560 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2203      	movs	r2, #3
 800555a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800555c:	2b02      	cmp	r3, #2
 800555e:	d130      	bne.n	80055c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	2203      	movs	r2, #3
 800556c:	409a      	lsls	r2, r3
 800556e:	0013      	movs	r3, r2
 8005570:	43da      	mvns	r2, r3
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	4013      	ands	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	409a      	lsls	r2, r3
 8005582:	0013      	movs	r3, r2
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005596:	2201      	movs	r2, #1
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	409a      	lsls	r2, r3
 800559c:	0013      	movs	r3, r2
 800559e:	43da      	mvns	r2, r3
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	4013      	ands	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	091b      	lsrs	r3, r3, #4
 80055ac:	2201      	movs	r2, #1
 80055ae:	401a      	ands	r2, r3
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	409a      	lsls	r2, r3
 80055b4:	0013      	movs	r3, r2
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2203      	movs	r2, #3
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d017      	beq.n	80055fe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	2203      	movs	r2, #3
 80055da:	409a      	lsls	r2, r3
 80055dc:	0013      	movs	r3, r2
 80055de:	43da      	mvns	r2, r3
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	4013      	ands	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	409a      	lsls	r2, r3
 80055f0:	0013      	movs	r3, r2
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2203      	movs	r2, #3
 8005604:	4013      	ands	r3, r2
 8005606:	2b02      	cmp	r3, #2
 8005608:	d123      	bne.n	8005652 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	08da      	lsrs	r2, r3, #3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3208      	adds	r2, #8
 8005612:	0092      	lsls	r2, r2, #2
 8005614:	58d3      	ldr	r3, [r2, r3]
 8005616:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2207      	movs	r2, #7
 800561c:	4013      	ands	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	220f      	movs	r2, #15
 8005622:	409a      	lsls	r2, r3
 8005624:	0013      	movs	r3, r2
 8005626:	43da      	mvns	r2, r3
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	4013      	ands	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2107      	movs	r1, #7
 8005636:	400b      	ands	r3, r1
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	409a      	lsls	r2, r3
 800563c:	0013      	movs	r3, r2
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4313      	orrs	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	08da      	lsrs	r2, r3, #3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3208      	adds	r2, #8
 800564c:	0092      	lsls	r2, r2, #2
 800564e:	6939      	ldr	r1, [r7, #16]
 8005650:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	2203      	movs	r2, #3
 800565e:	409a      	lsls	r2, r3
 8005660:	0013      	movs	r3, r2
 8005662:	43da      	mvns	r2, r3
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	4013      	ands	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2203      	movs	r2, #3
 8005670:	401a      	ands	r2, r3
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	409a      	lsls	r2, r3
 8005678:	0013      	movs	r3, r2
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	23c0      	movs	r3, #192	; 0xc0
 800568c:	029b      	lsls	r3, r3, #10
 800568e:	4013      	ands	r3, r2
 8005690:	d100      	bne.n	8005694 <HAL_GPIO_Init+0x17c>
 8005692:	e0a0      	b.n	80057d6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005694:	4b57      	ldr	r3, [pc, #348]	; (80057f4 <HAL_GPIO_Init+0x2dc>)
 8005696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005698:	4b56      	ldr	r3, [pc, #344]	; (80057f4 <HAL_GPIO_Init+0x2dc>)
 800569a:	2101      	movs	r1, #1
 800569c:	430a      	orrs	r2, r1
 800569e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80056a0:	4a55      	ldr	r2, [pc, #340]	; (80057f8 <HAL_GPIO_Init+0x2e0>)
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	089b      	lsrs	r3, r3, #2
 80056a6:	3302      	adds	r3, #2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	589b      	ldr	r3, [r3, r2]
 80056ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2203      	movs	r2, #3
 80056b2:	4013      	ands	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	220f      	movs	r2, #15
 80056b8:	409a      	lsls	r2, r3
 80056ba:	0013      	movs	r3, r2
 80056bc:	43da      	mvns	r2, r3
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	4013      	ands	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	23a0      	movs	r3, #160	; 0xa0
 80056c8:	05db      	lsls	r3, r3, #23
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d01f      	beq.n	800570e <HAL_GPIO_Init+0x1f6>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a4a      	ldr	r2, [pc, #296]	; (80057fc <HAL_GPIO_Init+0x2e4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d019      	beq.n	800570a <HAL_GPIO_Init+0x1f2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a49      	ldr	r2, [pc, #292]	; (8005800 <HAL_GPIO_Init+0x2e8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <HAL_GPIO_Init+0x1ee>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a48      	ldr	r2, [pc, #288]	; (8005804 <HAL_GPIO_Init+0x2ec>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00d      	beq.n	8005702 <HAL_GPIO_Init+0x1ea>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a47      	ldr	r2, [pc, #284]	; (8005808 <HAL_GPIO_Init+0x2f0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d007      	beq.n	80056fe <HAL_GPIO_Init+0x1e6>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a46      	ldr	r2, [pc, #280]	; (800580c <HAL_GPIO_Init+0x2f4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d101      	bne.n	80056fa <HAL_GPIO_Init+0x1e2>
 80056f6:	2305      	movs	r3, #5
 80056f8:	e00a      	b.n	8005710 <HAL_GPIO_Init+0x1f8>
 80056fa:	2306      	movs	r3, #6
 80056fc:	e008      	b.n	8005710 <HAL_GPIO_Init+0x1f8>
 80056fe:	2304      	movs	r3, #4
 8005700:	e006      	b.n	8005710 <HAL_GPIO_Init+0x1f8>
 8005702:	2303      	movs	r3, #3
 8005704:	e004      	b.n	8005710 <HAL_GPIO_Init+0x1f8>
 8005706:	2302      	movs	r3, #2
 8005708:	e002      	b.n	8005710 <HAL_GPIO_Init+0x1f8>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <HAL_GPIO_Init+0x1f8>
 800570e:	2300      	movs	r3, #0
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	2103      	movs	r1, #3
 8005714:	400a      	ands	r2, r1
 8005716:	0092      	lsls	r2, r2, #2
 8005718:	4093      	lsls	r3, r2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005720:	4935      	ldr	r1, [pc, #212]	; (80057f8 <HAL_GPIO_Init+0x2e0>)
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	089b      	lsrs	r3, r3, #2
 8005726:	3302      	adds	r3, #2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800572e:	4b38      	ldr	r3, [pc, #224]	; (8005810 <HAL_GPIO_Init+0x2f8>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	43da      	mvns	r2, r3
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	4013      	ands	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	2380      	movs	r3, #128	; 0x80
 8005744:	025b      	lsls	r3, r3, #9
 8005746:	4013      	ands	r3, r2
 8005748:	d003      	beq.n	8005752 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005752:	4b2f      	ldr	r3, [pc, #188]	; (8005810 <HAL_GPIO_Init+0x2f8>)
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005758:	4b2d      	ldr	r3, [pc, #180]	; (8005810 <HAL_GPIO_Init+0x2f8>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	43da      	mvns	r2, r3
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4013      	ands	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	2380      	movs	r3, #128	; 0x80
 800576e:	029b      	lsls	r3, r3, #10
 8005770:	4013      	ands	r3, r2
 8005772:	d003      	beq.n	800577c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800577c:	4b24      	ldr	r3, [pc, #144]	; (8005810 <HAL_GPIO_Init+0x2f8>)
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005782:	4b23      	ldr	r3, [pc, #140]	; (8005810 <HAL_GPIO_Init+0x2f8>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	43da      	mvns	r2, r3
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	4013      	ands	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	2380      	movs	r3, #128	; 0x80
 8005798:	035b      	lsls	r3, r3, #13
 800579a:	4013      	ands	r3, r2
 800579c:	d003      	beq.n	80057a6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80057a6:	4b1a      	ldr	r3, [pc, #104]	; (8005810 <HAL_GPIO_Init+0x2f8>)
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80057ac:	4b18      	ldr	r3, [pc, #96]	; (8005810 <HAL_GPIO_Init+0x2f8>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	43da      	mvns	r2, r3
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4013      	ands	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	2380      	movs	r3, #128	; 0x80
 80057c2:	039b      	lsls	r3, r3, #14
 80057c4:	4013      	ands	r3, r2
 80057c6:	d003      	beq.n	80057d0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80057d0:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <HAL_GPIO_Init+0x2f8>)
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	3301      	adds	r3, #1
 80057da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	40da      	lsrs	r2, r3
 80057e4:	1e13      	subs	r3, r2, #0
 80057e6:	d000      	beq.n	80057ea <HAL_GPIO_Init+0x2d2>
 80057e8:	e6a2      	b.n	8005530 <HAL_GPIO_Init+0x18>
  }
}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	46c0      	nop			; (mov r8, r8)
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b006      	add	sp, #24
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40021000 	.word	0x40021000
 80057f8:	40010000 	.word	0x40010000
 80057fc:	50000400 	.word	0x50000400
 8005800:	50000800 	.word	0x50000800
 8005804:	50000c00 	.word	0x50000c00
 8005808:	50001000 	.word	0x50001000
 800580c:	50001c00 	.word	0x50001c00
 8005810:	40010400 	.word	0x40010400

08005814 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	000a      	movs	r2, r1
 800581e:	1cbb      	adds	r3, r7, #2
 8005820:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	1cba      	adds	r2, r7, #2
 8005828:	8812      	ldrh	r2, [r2, #0]
 800582a:	4013      	ands	r3, r2
 800582c:	d004      	beq.n	8005838 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800582e:	230f      	movs	r3, #15
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	2201      	movs	r2, #1
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	e003      	b.n	8005840 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005838:	230f      	movs	r3, #15
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	2200      	movs	r2, #0
 800583e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005840:	230f      	movs	r3, #15
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	781b      	ldrb	r3, [r3, #0]
}
 8005846:	0018      	movs	r0, r3
 8005848:	46bd      	mov	sp, r7
 800584a:	b004      	add	sp, #16
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b082      	sub	sp, #8
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	0008      	movs	r0, r1
 8005858:	0011      	movs	r1, r2
 800585a:	1cbb      	adds	r3, r7, #2
 800585c:	1c02      	adds	r2, r0, #0
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	1c7b      	adds	r3, r7, #1
 8005862:	1c0a      	adds	r2, r1, #0
 8005864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005866:	1c7b      	adds	r3, r7, #1
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d004      	beq.n	8005878 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800586e:	1cbb      	adds	r3, r7, #2
 8005870:	881a      	ldrh	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005876:	e003      	b.n	8005880 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005878:	1cbb      	adds	r3, r7, #2
 800587a:	881a      	ldrh	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005880:	46c0      	nop			; (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	b002      	add	sp, #8
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e082      	b.n	80059a0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2241      	movs	r2, #65	; 0x41
 800589e:	5c9b      	ldrb	r3, [r3, r2]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d107      	bne.n	80058b6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2240      	movs	r2, #64	; 0x40
 80058aa:	2100      	movs	r1, #0
 80058ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	0018      	movs	r0, r3
 80058b2:	f7fe ff95 	bl	80047e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2241      	movs	r2, #65	; 0x41
 80058ba:	2124      	movs	r1, #36	; 0x24
 80058bc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2101      	movs	r1, #1
 80058ca:	438a      	bics	r2, r1
 80058cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4934      	ldr	r1, [pc, #208]	; (80059a8 <HAL_I2C_Init+0x120>)
 80058d8:	400a      	ands	r2, r1
 80058da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4931      	ldr	r1, [pc, #196]	; (80059ac <HAL_I2C_Init+0x124>)
 80058e8:	400a      	ands	r2, r1
 80058ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d108      	bne.n	8005906 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2180      	movs	r1, #128	; 0x80
 80058fe:	0209      	lsls	r1, r1, #8
 8005900:	430a      	orrs	r2, r1
 8005902:	609a      	str	r2, [r3, #8]
 8005904:	e007      	b.n	8005916 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689a      	ldr	r2, [r3, #8]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2184      	movs	r1, #132	; 0x84
 8005910:	0209      	lsls	r1, r1, #8
 8005912:	430a      	orrs	r2, r1
 8005914:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	2b02      	cmp	r3, #2
 800591c:	d104      	bne.n	8005928 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2280      	movs	r2, #128	; 0x80
 8005924:	0112      	lsls	r2, r2, #4
 8005926:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	491f      	ldr	r1, [pc, #124]	; (80059b0 <HAL_I2C_Init+0x128>)
 8005934:	430a      	orrs	r2, r1
 8005936:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	491a      	ldr	r1, [pc, #104]	; (80059ac <HAL_I2C_Init+0x124>)
 8005944:	400a      	ands	r2, r1
 8005946:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	431a      	orrs	r2, r3
 8005952:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69d9      	ldr	r1, [r3, #28]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1a      	ldr	r2, [r3, #32]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2101      	movs	r1, #1
 800597e:	430a      	orrs	r2, r1
 8005980:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2241      	movs	r2, #65	; 0x41
 800598c:	2120      	movs	r1, #32
 800598e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2242      	movs	r2, #66	; 0x42
 800599a:	2100      	movs	r1, #0
 800599c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	0018      	movs	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b002      	add	sp, #8
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	f0ffffff 	.word	0xf0ffffff
 80059ac:	ffff7fff 	.word	0xffff7fff
 80059b0:	02008000 	.word	0x02008000

080059b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b4:	b590      	push	{r4, r7, lr}
 80059b6:	b089      	sub	sp, #36	; 0x24
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	000c      	movs	r4, r1
 80059be:	0010      	movs	r0, r2
 80059c0:	0019      	movs	r1, r3
 80059c2:	230a      	movs	r3, #10
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	1c22      	adds	r2, r4, #0
 80059c8:	801a      	strh	r2, [r3, #0]
 80059ca:	2308      	movs	r3, #8
 80059cc:	18fb      	adds	r3, r7, r3
 80059ce:	1c02      	adds	r2, r0, #0
 80059d0:	801a      	strh	r2, [r3, #0]
 80059d2:	1dbb      	adds	r3, r7, #6
 80059d4:	1c0a      	adds	r2, r1, #0
 80059d6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2241      	movs	r2, #65	; 0x41
 80059dc:	5c9b      	ldrb	r3, [r3, r2]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	d000      	beq.n	80059e6 <HAL_I2C_Mem_Write+0x32>
 80059e4:	e10c      	b.n	8005c00 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d004      	beq.n	80059f6 <HAL_I2C_Mem_Write+0x42>
 80059ec:	232c      	movs	r3, #44	; 0x2c
 80059ee:	18fb      	adds	r3, r7, r3
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d105      	bne.n	8005a02 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2280      	movs	r2, #128	; 0x80
 80059fa:	0092      	lsls	r2, r2, #2
 80059fc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e0ff      	b.n	8005c02 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2240      	movs	r2, #64	; 0x40
 8005a06:	5c9b      	ldrb	r3, [r3, r2]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d101      	bne.n	8005a10 <HAL_I2C_Mem_Write+0x5c>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e0f8      	b.n	8005c02 <HAL_I2C_Mem_Write+0x24e>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2240      	movs	r2, #64	; 0x40
 8005a14:	2101      	movs	r1, #1
 8005a16:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a18:	f7ff f91e 	bl	8004c58 <HAL_GetTick>
 8005a1c:	0003      	movs	r3, r0
 8005a1e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a20:	2380      	movs	r3, #128	; 0x80
 8005a22:	0219      	lsls	r1, r3, #8
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	2319      	movs	r3, #25
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f000 fb0b 	bl	8006048 <I2C_WaitOnFlagUntilTimeout>
 8005a32:	1e03      	subs	r3, r0, #0
 8005a34:	d001      	beq.n	8005a3a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e0e3      	b.n	8005c02 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2241      	movs	r2, #65	; 0x41
 8005a3e:	2121      	movs	r1, #33	; 0x21
 8005a40:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2242      	movs	r2, #66	; 0x42
 8005a46:	2140      	movs	r1, #64	; 0x40
 8005a48:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	222c      	movs	r2, #44	; 0x2c
 8005a5a:	18ba      	adds	r2, r7, r2
 8005a5c:	8812      	ldrh	r2, [r2, #0]
 8005a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a66:	1dbb      	adds	r3, r7, #6
 8005a68:	881c      	ldrh	r4, [r3, #0]
 8005a6a:	2308      	movs	r3, #8
 8005a6c:	18fb      	adds	r3, r7, r3
 8005a6e:	881a      	ldrh	r2, [r3, #0]
 8005a70:	230a      	movs	r3, #10
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	8819      	ldrh	r1, [r3, #0]
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	0023      	movs	r3, r4
 8005a82:	f000 f9f9 	bl	8005e78 <I2C_RequestMemoryWrite>
 8005a86:	1e03      	subs	r3, r0, #0
 8005a88:	d005      	beq.n	8005a96 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2240      	movs	r2, #64	; 0x40
 8005a8e:	2100      	movs	r1, #0
 8005a90:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e0b5      	b.n	8005c02 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2bff      	cmp	r3, #255	; 0xff
 8005a9e:	d911      	bls.n	8005ac4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	22ff      	movs	r2, #255	; 0xff
 8005aa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	2380      	movs	r3, #128	; 0x80
 8005aae:	045c      	lsls	r4, r3, #17
 8005ab0:	230a      	movs	r3, #10
 8005ab2:	18fb      	adds	r3, r7, r3
 8005ab4:	8819      	ldrh	r1, [r3, #0]
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	0023      	movs	r3, r4
 8005abe:	f000 fbf7 	bl	80062b0 <I2C_TransferConfig>
 8005ac2:	e012      	b.n	8005aea <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	2380      	movs	r3, #128	; 0x80
 8005ad6:	049c      	lsls	r4, r3, #18
 8005ad8:	230a      	movs	r3, #10
 8005ada:	18fb      	adds	r3, r7, r3
 8005adc:	8819      	ldrh	r1, [r3, #0]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	0023      	movs	r3, r4
 8005ae6:	f000 fbe3 	bl	80062b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	0018      	movs	r0, r3
 8005af2:	f000 fae8 	bl	80060c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005af6:	1e03      	subs	r3, r0, #0
 8005af8:	d001      	beq.n	8005afe <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e081      	b.n	8005c02 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	781a      	ldrb	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d03a      	beq.n	8005bae <HAL_I2C_Mem_Write+0x1fa>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d136      	bne.n	8005bae <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	0013      	movs	r3, r2
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2180      	movs	r1, #128	; 0x80
 8005b4e:	f000 fa7b 	bl	8006048 <I2C_WaitOnFlagUntilTimeout>
 8005b52:	1e03      	subs	r3, r0, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e053      	b.n	8005c02 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2bff      	cmp	r3, #255	; 0xff
 8005b62:	d911      	bls.n	8005b88 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	22ff      	movs	r2, #255	; 0xff
 8005b68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	045c      	lsls	r4, r3, #17
 8005b74:	230a      	movs	r3, #10
 8005b76:	18fb      	adds	r3, r7, r3
 8005b78:	8819      	ldrh	r1, [r3, #0]
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	0023      	movs	r3, r4
 8005b82:	f000 fb95 	bl	80062b0 <I2C_TransferConfig>
 8005b86:	e012      	b.n	8005bae <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	2380      	movs	r3, #128	; 0x80
 8005b9a:	049c      	lsls	r4, r3, #18
 8005b9c:	230a      	movs	r3, #10
 8005b9e:	18fb      	adds	r3, r7, r3
 8005ba0:	8819      	ldrh	r1, [r3, #0]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	0023      	movs	r3, r4
 8005baa:	f000 fb81 	bl	80062b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d198      	bne.n	8005aea <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f000 fac0 	bl	8006144 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bc4:	1e03      	subs	r3, r0, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e01a      	b.n	8005c02 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	490b      	ldr	r1, [pc, #44]	; (8005c0c <HAL_I2C_Mem_Write+0x258>)
 8005be0:	400a      	ands	r2, r1
 8005be2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2241      	movs	r2, #65	; 0x41
 8005be8:	2120      	movs	r1, #32
 8005bea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2242      	movs	r2, #66	; 0x42
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2240      	movs	r2, #64	; 0x40
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	e000      	b.n	8005c02 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005c00:	2302      	movs	r3, #2
  }
}
 8005c02:	0018      	movs	r0, r3
 8005c04:	46bd      	mov	sp, r7
 8005c06:	b007      	add	sp, #28
 8005c08:	bd90      	pop	{r4, r7, pc}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	fe00e800 	.word	0xfe00e800

08005c10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c10:	b590      	push	{r4, r7, lr}
 8005c12:	b089      	sub	sp, #36	; 0x24
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	000c      	movs	r4, r1
 8005c1a:	0010      	movs	r0, r2
 8005c1c:	0019      	movs	r1, r3
 8005c1e:	230a      	movs	r3, #10
 8005c20:	18fb      	adds	r3, r7, r3
 8005c22:	1c22      	adds	r2, r4, #0
 8005c24:	801a      	strh	r2, [r3, #0]
 8005c26:	2308      	movs	r3, #8
 8005c28:	18fb      	adds	r3, r7, r3
 8005c2a:	1c02      	adds	r2, r0, #0
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	1dbb      	adds	r3, r7, #6
 8005c30:	1c0a      	adds	r2, r1, #0
 8005c32:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2241      	movs	r2, #65	; 0x41
 8005c38:	5c9b      	ldrb	r3, [r3, r2]
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d000      	beq.n	8005c42 <HAL_I2C_Mem_Read+0x32>
 8005c40:	e110      	b.n	8005e64 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d004      	beq.n	8005c52 <HAL_I2C_Mem_Read+0x42>
 8005c48:	232c      	movs	r3, #44	; 0x2c
 8005c4a:	18fb      	adds	r3, r7, r3
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d105      	bne.n	8005c5e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2280      	movs	r2, #128	; 0x80
 8005c56:	0092      	lsls	r2, r2, #2
 8005c58:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e103      	b.n	8005e66 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2240      	movs	r2, #64	; 0x40
 8005c62:	5c9b      	ldrb	r3, [r3, r2]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_I2C_Mem_Read+0x5c>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e0fc      	b.n	8005e66 <HAL_I2C_Mem_Read+0x256>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2240      	movs	r2, #64	; 0x40
 8005c70:	2101      	movs	r1, #1
 8005c72:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c74:	f7fe fff0 	bl	8004c58 <HAL_GetTick>
 8005c78:	0003      	movs	r3, r0
 8005c7a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c7c:	2380      	movs	r3, #128	; 0x80
 8005c7e:	0219      	lsls	r1, r3, #8
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	2319      	movs	r3, #25
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f000 f9dd 	bl	8006048 <I2C_WaitOnFlagUntilTimeout>
 8005c8e:	1e03      	subs	r3, r0, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e0e7      	b.n	8005e66 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2241      	movs	r2, #65	; 0x41
 8005c9a:	2122      	movs	r1, #34	; 0x22
 8005c9c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2242      	movs	r2, #66	; 0x42
 8005ca2:	2140      	movs	r1, #64	; 0x40
 8005ca4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	222c      	movs	r2, #44	; 0x2c
 8005cb6:	18ba      	adds	r2, r7, r2
 8005cb8:	8812      	ldrh	r2, [r2, #0]
 8005cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cc2:	1dbb      	adds	r3, r7, #6
 8005cc4:	881c      	ldrh	r4, [r3, #0]
 8005cc6:	2308      	movs	r3, #8
 8005cc8:	18fb      	adds	r3, r7, r3
 8005cca:	881a      	ldrh	r2, [r3, #0]
 8005ccc:	230a      	movs	r3, #10
 8005cce:	18fb      	adds	r3, r7, r3
 8005cd0:	8819      	ldrh	r1, [r3, #0]
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	0023      	movs	r3, r4
 8005cde:	f000 f92f 	bl	8005f40 <I2C_RequestMemoryRead>
 8005ce2:	1e03      	subs	r3, r0, #0
 8005ce4:	d005      	beq.n	8005cf2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2240      	movs	r2, #64	; 0x40
 8005cea:	2100      	movs	r1, #0
 8005cec:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e0b9      	b.n	8005e66 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2bff      	cmp	r3, #255	; 0xff
 8005cfa:	d911      	bls.n	8005d20 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	22ff      	movs	r2, #255	; 0xff
 8005d00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	2380      	movs	r3, #128	; 0x80
 8005d0a:	045c      	lsls	r4, r3, #17
 8005d0c:	230a      	movs	r3, #10
 8005d0e:	18fb      	adds	r3, r7, r3
 8005d10:	8819      	ldrh	r1, [r3, #0]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	4b56      	ldr	r3, [pc, #344]	; (8005e70 <HAL_I2C_Mem_Read+0x260>)
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	0023      	movs	r3, r4
 8005d1a:	f000 fac9 	bl	80062b0 <I2C_TransferConfig>
 8005d1e:	e012      	b.n	8005d46 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	2380      	movs	r3, #128	; 0x80
 8005d32:	049c      	lsls	r4, r3, #18
 8005d34:	230a      	movs	r3, #10
 8005d36:	18fb      	adds	r3, r7, r3
 8005d38:	8819      	ldrh	r1, [r3, #0]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	4b4c      	ldr	r3, [pc, #304]	; (8005e70 <HAL_I2C_Mem_Read+0x260>)
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	0023      	movs	r3, r4
 8005d42:	f000 fab5 	bl	80062b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	0013      	movs	r3, r2
 8005d50:	2200      	movs	r2, #0
 8005d52:	2104      	movs	r1, #4
 8005d54:	f000 f978 	bl	8006048 <I2C_WaitOnFlagUntilTimeout>
 8005d58:	1e03      	subs	r3, r0, #0
 8005d5a:	d001      	beq.n	8005d60 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e082      	b.n	8005e66 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d03a      	beq.n	8005e12 <HAL_I2C_Mem_Read+0x202>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d136      	bne.n	8005e12 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	0013      	movs	r3, r2
 8005dae:	2200      	movs	r2, #0
 8005db0:	2180      	movs	r1, #128	; 0x80
 8005db2:	f000 f949 	bl	8006048 <I2C_WaitOnFlagUntilTimeout>
 8005db6:	1e03      	subs	r3, r0, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e053      	b.n	8005e66 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2bff      	cmp	r3, #255	; 0xff
 8005dc6:	d911      	bls.n	8005dec <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	22ff      	movs	r2, #255	; 0xff
 8005dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	2380      	movs	r3, #128	; 0x80
 8005dd6:	045c      	lsls	r4, r3, #17
 8005dd8:	230a      	movs	r3, #10
 8005dda:	18fb      	adds	r3, r7, r3
 8005ddc:	8819      	ldrh	r1, [r3, #0]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	2300      	movs	r3, #0
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	0023      	movs	r3, r4
 8005de6:	f000 fa63 	bl	80062b0 <I2C_TransferConfig>
 8005dea:	e012      	b.n	8005e12 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	2380      	movs	r3, #128	; 0x80
 8005dfe:	049c      	lsls	r4, r3, #18
 8005e00:	230a      	movs	r3, #10
 8005e02:	18fb      	adds	r3, r7, r3
 8005e04:	8819      	ldrh	r1, [r3, #0]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	0023      	movs	r3, r4
 8005e0e:	f000 fa4f 	bl	80062b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d194      	bne.n	8005d46 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	0018      	movs	r0, r3
 8005e24:	f000 f98e 	bl	8006144 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e28:	1e03      	subs	r3, r0, #0
 8005e2a:	d001      	beq.n	8005e30 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e01a      	b.n	8005e66 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2220      	movs	r2, #32
 8005e36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	490c      	ldr	r1, [pc, #48]	; (8005e74 <HAL_I2C_Mem_Read+0x264>)
 8005e44:	400a      	ands	r2, r1
 8005e46:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2241      	movs	r2, #65	; 0x41
 8005e4c:	2120      	movs	r1, #32
 8005e4e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2242      	movs	r2, #66	; 0x42
 8005e54:	2100      	movs	r1, #0
 8005e56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2240      	movs	r2, #64	; 0x40
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	e000      	b.n	8005e66 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005e64:	2302      	movs	r3, #2
  }
}
 8005e66:	0018      	movs	r0, r3
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	b007      	add	sp, #28
 8005e6c:	bd90      	pop	{r4, r7, pc}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	80002400 	.word	0x80002400
 8005e74:	fe00e800 	.word	0xfe00e800

08005e78 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005e78:	b5b0      	push	{r4, r5, r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	000c      	movs	r4, r1
 8005e82:	0010      	movs	r0, r2
 8005e84:	0019      	movs	r1, r3
 8005e86:	250a      	movs	r5, #10
 8005e88:	197b      	adds	r3, r7, r5
 8005e8a:	1c22      	adds	r2, r4, #0
 8005e8c:	801a      	strh	r2, [r3, #0]
 8005e8e:	2308      	movs	r3, #8
 8005e90:	18fb      	adds	r3, r7, r3
 8005e92:	1c02      	adds	r2, r0, #0
 8005e94:	801a      	strh	r2, [r3, #0]
 8005e96:	1dbb      	adds	r3, r7, #6
 8005e98:	1c0a      	adds	r2, r1, #0
 8005e9a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005e9c:	1dbb      	adds	r3, r7, #6
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	2380      	movs	r3, #128	; 0x80
 8005ea4:	045c      	lsls	r4, r3, #17
 8005ea6:	197b      	adds	r3, r7, r5
 8005ea8:	8819      	ldrh	r1, [r3, #0]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	4b23      	ldr	r3, [pc, #140]	; (8005f3c <I2C_RequestMemoryWrite+0xc4>)
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	0023      	movs	r3, r4
 8005eb2:	f000 f9fd 	bl	80062b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb8:	6a39      	ldr	r1, [r7, #32]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f000 f902 	bl	80060c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ec2:	1e03      	subs	r3, r0, #0
 8005ec4:	d001      	beq.n	8005eca <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e033      	b.n	8005f32 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eca:	1dbb      	adds	r3, r7, #6
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d107      	bne.n	8005ee2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ed2:	2308      	movs	r3, #8
 8005ed4:	18fb      	adds	r3, r7, r3
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	629a      	str	r2, [r3, #40]	; 0x28
 8005ee0:	e019      	b.n	8005f16 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ee2:	2308      	movs	r3, #8
 8005ee4:	18fb      	adds	r3, r7, r3
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	0a1b      	lsrs	r3, r3, #8
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef6:	6a39      	ldr	r1, [r7, #32]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	0018      	movs	r0, r3
 8005efc:	f000 f8e3 	bl	80060c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f00:	1e03      	subs	r3, r0, #0
 8005f02:	d001      	beq.n	8005f08 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e014      	b.n	8005f32 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f08:	2308      	movs	r3, #8
 8005f0a:	18fb      	adds	r3, r7, r3
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005f16:	6a3a      	ldr	r2, [r7, #32]
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	0013      	movs	r3, r2
 8005f20:	2200      	movs	r2, #0
 8005f22:	2180      	movs	r1, #128	; 0x80
 8005f24:	f000 f890 	bl	8006048 <I2C_WaitOnFlagUntilTimeout>
 8005f28:	1e03      	subs	r3, r0, #0
 8005f2a:	d001      	beq.n	8005f30 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	0018      	movs	r0, r3
 8005f34:	46bd      	mov	sp, r7
 8005f36:	b004      	add	sp, #16
 8005f38:	bdb0      	pop	{r4, r5, r7, pc}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	80002000 	.word	0x80002000

08005f40 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005f40:	b5b0      	push	{r4, r5, r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	000c      	movs	r4, r1
 8005f4a:	0010      	movs	r0, r2
 8005f4c:	0019      	movs	r1, r3
 8005f4e:	250a      	movs	r5, #10
 8005f50:	197b      	adds	r3, r7, r5
 8005f52:	1c22      	adds	r2, r4, #0
 8005f54:	801a      	strh	r2, [r3, #0]
 8005f56:	2308      	movs	r3, #8
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	1c02      	adds	r2, r0, #0
 8005f5c:	801a      	strh	r2, [r3, #0]
 8005f5e:	1dbb      	adds	r3, r7, #6
 8005f60:	1c0a      	adds	r2, r1, #0
 8005f62:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005f64:	1dbb      	adds	r3, r7, #6
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	197b      	adds	r3, r7, r5
 8005f6c:	8819      	ldrh	r1, [r3, #0]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	4b23      	ldr	r3, [pc, #140]	; (8006000 <I2C_RequestMemoryRead+0xc0>)
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	2300      	movs	r3, #0
 8005f76:	f000 f99b 	bl	80062b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7c:	6a39      	ldr	r1, [r7, #32]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	0018      	movs	r0, r3
 8005f82:	f000 f8a0 	bl	80060c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f86:	1e03      	subs	r3, r0, #0
 8005f88:	d001      	beq.n	8005f8e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e033      	b.n	8005ff6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f8e:	1dbb      	adds	r3, r7, #6
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d107      	bne.n	8005fa6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f96:	2308      	movs	r3, #8
 8005f98:	18fb      	adds	r3, r7, r3
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8005fa4:	e019      	b.n	8005fda <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005fa6:	2308      	movs	r3, #8
 8005fa8:	18fb      	adds	r3, r7, r3
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	0a1b      	lsrs	r3, r3, #8
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fba:	6a39      	ldr	r1, [r7, #32]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	f000 f881 	bl	80060c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005fc4:	1e03      	subs	r3, r0, #0
 8005fc6:	d001      	beq.n	8005fcc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e014      	b.n	8005ff6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fcc:	2308      	movs	r3, #8
 8005fce:	18fb      	adds	r3, r7, r3
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005fda:	6a3a      	ldr	r2, [r7, #32]
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	0013      	movs	r3, r2
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2140      	movs	r1, #64	; 0x40
 8005fe8:	f000 f82e 	bl	8006048 <I2C_WaitOnFlagUntilTimeout>
 8005fec:	1e03      	subs	r3, r0, #0
 8005fee:	d001      	beq.n	8005ff4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e000      	b.n	8005ff6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	b004      	add	sp, #16
 8005ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	80002000 	.word	0x80002000

08006004 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	2202      	movs	r2, #2
 8006014:	4013      	ands	r3, r2
 8006016:	2b02      	cmp	r3, #2
 8006018:	d103      	bne.n	8006022 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2200      	movs	r2, #0
 8006020:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	2201      	movs	r2, #1
 800602a:	4013      	ands	r3, r2
 800602c:	2b01      	cmp	r3, #1
 800602e:	d007      	beq.n	8006040 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2101      	movs	r1, #1
 800603c:	430a      	orrs	r2, r1
 800603e:	619a      	str	r2, [r3, #24]
  }
}
 8006040:	46c0      	nop			; (mov r8, r8)
 8006042:	46bd      	mov	sp, r7
 8006044:	b002      	add	sp, #8
 8006046:	bd80      	pop	{r7, pc}

08006048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	1dfb      	adds	r3, r7, #7
 8006056:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006058:	e021      	b.n	800609e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	3301      	adds	r3, #1
 800605e:	d01e      	beq.n	800609e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006060:	f7fe fdfa 	bl	8004c58 <HAL_GetTick>
 8006064:	0002      	movs	r2, r0
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d302      	bcc.n	8006076 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d113      	bne.n	800609e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607a:	2220      	movs	r2, #32
 800607c:	431a      	orrs	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2241      	movs	r2, #65	; 0x41
 8006086:	2120      	movs	r1, #32
 8006088:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2242      	movs	r2, #66	; 0x42
 800608e:	2100      	movs	r1, #0
 8006090:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2240      	movs	r2, #64	; 0x40
 8006096:	2100      	movs	r1, #0
 8006098:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e00f      	b.n	80060be <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	4013      	ands	r3, r2
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	425a      	negs	r2, r3
 80060ae:	4153      	adcs	r3, r2
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	001a      	movs	r2, r3
 80060b4:	1dfb      	adds	r3, r7, #7
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d0ce      	beq.n	800605a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	0018      	movs	r0, r3
 80060c0:	46bd      	mov	sp, r7
 80060c2:	b004      	add	sp, #16
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060d2:	e02b      	b.n	800612c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	68b9      	ldr	r1, [r7, #8]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	0018      	movs	r0, r3
 80060dc:	f000 f86e 	bl	80061bc <I2C_IsAcknowledgeFailed>
 80060e0:	1e03      	subs	r3, r0, #0
 80060e2:	d001      	beq.n	80060e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e029      	b.n	800613c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	3301      	adds	r3, #1
 80060ec:	d01e      	beq.n	800612c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ee:	f7fe fdb3 	bl	8004c58 <HAL_GetTick>
 80060f2:	0002      	movs	r2, r0
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d302      	bcc.n	8006104 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d113      	bne.n	800612c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006108:	2220      	movs	r2, #32
 800610a:	431a      	orrs	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2241      	movs	r2, #65	; 0x41
 8006114:	2120      	movs	r1, #32
 8006116:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2242      	movs	r2, #66	; 0x42
 800611c:	2100      	movs	r1, #0
 800611e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2240      	movs	r2, #64	; 0x40
 8006124:	2100      	movs	r1, #0
 8006126:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e007      	b.n	800613c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	2202      	movs	r2, #2
 8006134:	4013      	ands	r3, r2
 8006136:	2b02      	cmp	r3, #2
 8006138:	d1cc      	bne.n	80060d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	0018      	movs	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	b004      	add	sp, #16
 8006142:	bd80      	pop	{r7, pc}

08006144 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006150:	e028      	b.n	80061a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	0018      	movs	r0, r3
 800615a:	f000 f82f 	bl	80061bc <I2C_IsAcknowledgeFailed>
 800615e:	1e03      	subs	r3, r0, #0
 8006160:	d001      	beq.n	8006166 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e026      	b.n	80061b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006166:	f7fe fd77 	bl	8004c58 <HAL_GetTick>
 800616a:	0002      	movs	r2, r0
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	429a      	cmp	r2, r3
 8006174:	d302      	bcc.n	800617c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d113      	bne.n	80061a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006180:	2220      	movs	r2, #32
 8006182:	431a      	orrs	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2241      	movs	r2, #65	; 0x41
 800618c:	2120      	movs	r1, #32
 800618e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2242      	movs	r2, #66	; 0x42
 8006194:	2100      	movs	r1, #0
 8006196:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2240      	movs	r2, #64	; 0x40
 800619c:	2100      	movs	r1, #0
 800619e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e007      	b.n	80061b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	2220      	movs	r2, #32
 80061ac:	4013      	ands	r3, r2
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	d1cf      	bne.n	8006152 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	0018      	movs	r0, r3
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b004      	add	sp, #16
 80061ba:	bd80      	pop	{r7, pc}

080061bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	2210      	movs	r2, #16
 80061d0:	4013      	ands	r3, r2
 80061d2:	2b10      	cmp	r3, #16
 80061d4:	d164      	bne.n	80062a0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	2380      	movs	r3, #128	; 0x80
 80061de:	049b      	lsls	r3, r3, #18
 80061e0:	401a      	ands	r2, r3
 80061e2:	2380      	movs	r3, #128	; 0x80
 80061e4:	049b      	lsls	r3, r3, #18
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d02b      	beq.n	8006242 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2180      	movs	r1, #128	; 0x80
 80061f6:	01c9      	lsls	r1, r1, #7
 80061f8:	430a      	orrs	r2, r1
 80061fa:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061fc:	e021      	b.n	8006242 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	3301      	adds	r3, #1
 8006202:	d01e      	beq.n	8006242 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006204:	f7fe fd28 	bl	8004c58 <HAL_GetTick>
 8006208:	0002      	movs	r2, r0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	429a      	cmp	r2, r3
 8006212:	d302      	bcc.n	800621a <I2C_IsAcknowledgeFailed+0x5e>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d113      	bne.n	8006242 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621e:	2220      	movs	r2, #32
 8006220:	431a      	orrs	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2241      	movs	r2, #65	; 0x41
 800622a:	2120      	movs	r1, #32
 800622c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2242      	movs	r2, #66	; 0x42
 8006232:	2100      	movs	r1, #0
 8006234:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2240      	movs	r2, #64	; 0x40
 800623a:	2100      	movs	r1, #0
 800623c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e02f      	b.n	80062a2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	2220      	movs	r2, #32
 800624a:	4013      	ands	r3, r2
 800624c:	2b20      	cmp	r3, #32
 800624e:	d1d6      	bne.n	80061fe <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2210      	movs	r2, #16
 8006256:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2220      	movs	r2, #32
 800625e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	0018      	movs	r0, r3
 8006264:	f7ff fece 	bl	8006004 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	490e      	ldr	r1, [pc, #56]	; (80062ac <I2C_IsAcknowledgeFailed+0xf0>)
 8006274:	400a      	ands	r2, r1
 8006276:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627c:	2204      	movs	r2, #4
 800627e:	431a      	orrs	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2241      	movs	r2, #65	; 0x41
 8006288:	2120      	movs	r1, #32
 800628a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2242      	movs	r2, #66	; 0x42
 8006290:	2100      	movs	r1, #0
 8006292:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2240      	movs	r2, #64	; 0x40
 8006298:	2100      	movs	r1, #0
 800629a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e000      	b.n	80062a2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	0018      	movs	r0, r3
 80062a4:	46bd      	mov	sp, r7
 80062a6:	b004      	add	sp, #16
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	46c0      	nop			; (mov r8, r8)
 80062ac:	fe00e800 	.word	0xfe00e800

080062b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80062b0:	b590      	push	{r4, r7, lr}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	0008      	movs	r0, r1
 80062ba:	0011      	movs	r1, r2
 80062bc:	607b      	str	r3, [r7, #4]
 80062be:	240a      	movs	r4, #10
 80062c0:	193b      	adds	r3, r7, r4
 80062c2:	1c02      	adds	r2, r0, #0
 80062c4:	801a      	strh	r2, [r3, #0]
 80062c6:	2009      	movs	r0, #9
 80062c8:	183b      	adds	r3, r7, r0
 80062ca:	1c0a      	adds	r2, r1, #0
 80062cc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	6a3a      	ldr	r2, [r7, #32]
 80062d6:	0d51      	lsrs	r1, r2, #21
 80062d8:	2280      	movs	r2, #128	; 0x80
 80062da:	00d2      	lsls	r2, r2, #3
 80062dc:	400a      	ands	r2, r1
 80062de:	490e      	ldr	r1, [pc, #56]	; (8006318 <I2C_TransferConfig+0x68>)
 80062e0:	430a      	orrs	r2, r1
 80062e2:	43d2      	mvns	r2, r2
 80062e4:	401a      	ands	r2, r3
 80062e6:	0011      	movs	r1, r2
 80062e8:	193b      	adds	r3, r7, r4
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	059b      	lsls	r3, r3, #22
 80062ee:	0d9a      	lsrs	r2, r3, #22
 80062f0:	183b      	adds	r3, r7, r0
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	0418      	lsls	r0, r3, #16
 80062f6:	23ff      	movs	r3, #255	; 0xff
 80062f8:	041b      	lsls	r3, r3, #16
 80062fa:	4003      	ands	r3, r0
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	431a      	orrs	r2, r3
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	431a      	orrs	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	46bd      	mov	sp, r7
 8006312:	b005      	add	sp, #20
 8006314:	bd90      	pop	{r4, r7, pc}
 8006316:	46c0      	nop			; (mov r8, r8)
 8006318:	03ff63ff 	.word	0x03ff63ff

0800631c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2241      	movs	r2, #65	; 0x41
 800632a:	5c9b      	ldrb	r3, [r3, r2]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b20      	cmp	r3, #32
 8006330:	d138      	bne.n	80063a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2240      	movs	r2, #64	; 0x40
 8006336:	5c9b      	ldrb	r3, [r3, r2]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800633c:	2302      	movs	r3, #2
 800633e:	e032      	b.n	80063a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2240      	movs	r2, #64	; 0x40
 8006344:	2101      	movs	r1, #1
 8006346:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2241      	movs	r2, #65	; 0x41
 800634c:	2124      	movs	r1, #36	; 0x24
 800634e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2101      	movs	r1, #1
 800635c:	438a      	bics	r2, r1
 800635e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4911      	ldr	r1, [pc, #68]	; (80063b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800636c:	400a      	ands	r2, r1
 800636e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6819      	ldr	r1, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2101      	movs	r1, #1
 800638c:	430a      	orrs	r2, r1
 800638e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2241      	movs	r2, #65	; 0x41
 8006394:	2120      	movs	r1, #32
 8006396:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2240      	movs	r2, #64	; 0x40
 800639c:	2100      	movs	r1, #0
 800639e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	e000      	b.n	80063a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063a4:	2302      	movs	r3, #2
  }
}
 80063a6:	0018      	movs	r0, r3
 80063a8:	46bd      	mov	sp, r7
 80063aa:	b002      	add	sp, #8
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	ffffefff 	.word	0xffffefff

080063b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2241      	movs	r2, #65	; 0x41
 80063c2:	5c9b      	ldrb	r3, [r3, r2]
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b20      	cmp	r3, #32
 80063c8:	d139      	bne.n	800643e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2240      	movs	r2, #64	; 0x40
 80063ce:	5c9b      	ldrb	r3, [r3, r2]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d101      	bne.n	80063d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063d4:	2302      	movs	r3, #2
 80063d6:	e033      	b.n	8006440 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2240      	movs	r2, #64	; 0x40
 80063dc:	2101      	movs	r1, #1
 80063de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2241      	movs	r2, #65	; 0x41
 80063e4:	2124      	movs	r1, #36	; 0x24
 80063e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2101      	movs	r1, #1
 80063f4:	438a      	bics	r2, r1
 80063f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a11      	ldr	r2, [pc, #68]	; (8006448 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006404:	4013      	ands	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2101      	movs	r1, #1
 8006426:	430a      	orrs	r2, r1
 8006428:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2241      	movs	r2, #65	; 0x41
 800642e:	2120      	movs	r1, #32
 8006430:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2240      	movs	r2, #64	; 0x40
 8006436:	2100      	movs	r1, #0
 8006438:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	e000      	b.n	8006440 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800643e:	2302      	movs	r3, #2
  }
}
 8006440:	0018      	movs	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	b004      	add	sp, #16
 8006446:	bd80      	pop	{r7, pc}
 8006448:	fffff0ff 	.word	0xfffff0ff

0800644c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800644c:	b5b0      	push	{r4, r5, r7, lr}
 800644e:	b08a      	sub	sp, #40	; 0x28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d102      	bne.n	8006460 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	f000 fbbf 	bl	8006bde <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006460:	4bc9      	ldr	r3, [pc, #804]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	220c      	movs	r2, #12
 8006466:	4013      	ands	r3, r2
 8006468:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800646a:	4bc7      	ldr	r3, [pc, #796]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	2380      	movs	r3, #128	; 0x80
 8006470:	025b      	lsls	r3, r3, #9
 8006472:	4013      	ands	r3, r2
 8006474:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2201      	movs	r2, #1
 800647c:	4013      	ands	r3, r2
 800647e:	d100      	bne.n	8006482 <HAL_RCC_OscConfig+0x36>
 8006480:	e07e      	b.n	8006580 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	2b08      	cmp	r3, #8
 8006486:	d007      	beq.n	8006498 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	2b0c      	cmp	r3, #12
 800648c:	d112      	bne.n	80064b4 <HAL_RCC_OscConfig+0x68>
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	2380      	movs	r3, #128	; 0x80
 8006492:	025b      	lsls	r3, r3, #9
 8006494:	429a      	cmp	r2, r3
 8006496:	d10d      	bne.n	80064b4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006498:	4bbb      	ldr	r3, [pc, #748]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	2380      	movs	r3, #128	; 0x80
 800649e:	029b      	lsls	r3, r3, #10
 80064a0:	4013      	ands	r3, r2
 80064a2:	d100      	bne.n	80064a6 <HAL_RCC_OscConfig+0x5a>
 80064a4:	e06b      	b.n	800657e <HAL_RCC_OscConfig+0x132>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d167      	bne.n	800657e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	f000 fb95 	bl	8006bde <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	2380      	movs	r3, #128	; 0x80
 80064ba:	025b      	lsls	r3, r3, #9
 80064bc:	429a      	cmp	r2, r3
 80064be:	d107      	bne.n	80064d0 <HAL_RCC_OscConfig+0x84>
 80064c0:	4bb1      	ldr	r3, [pc, #708]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	4bb0      	ldr	r3, [pc, #704]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80064c6:	2180      	movs	r1, #128	; 0x80
 80064c8:	0249      	lsls	r1, r1, #9
 80064ca:	430a      	orrs	r2, r1
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	e027      	b.n	8006520 <HAL_RCC_OscConfig+0xd4>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	23a0      	movs	r3, #160	; 0xa0
 80064d6:	02db      	lsls	r3, r3, #11
 80064d8:	429a      	cmp	r2, r3
 80064da:	d10e      	bne.n	80064fa <HAL_RCC_OscConfig+0xae>
 80064dc:	4baa      	ldr	r3, [pc, #680]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	4ba9      	ldr	r3, [pc, #676]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80064e2:	2180      	movs	r1, #128	; 0x80
 80064e4:	02c9      	lsls	r1, r1, #11
 80064e6:	430a      	orrs	r2, r1
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	4ba7      	ldr	r3, [pc, #668]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	4ba6      	ldr	r3, [pc, #664]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80064f0:	2180      	movs	r1, #128	; 0x80
 80064f2:	0249      	lsls	r1, r1, #9
 80064f4:	430a      	orrs	r2, r1
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	e012      	b.n	8006520 <HAL_RCC_OscConfig+0xd4>
 80064fa:	4ba3      	ldr	r3, [pc, #652]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	4ba2      	ldr	r3, [pc, #648]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 8006500:	49a2      	ldr	r1, [pc, #648]	; (800678c <HAL_RCC_OscConfig+0x340>)
 8006502:	400a      	ands	r2, r1
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	4ba0      	ldr	r3, [pc, #640]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	2380      	movs	r3, #128	; 0x80
 800650c:	025b      	lsls	r3, r3, #9
 800650e:	4013      	ands	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4b9c      	ldr	r3, [pc, #624]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	4b9b      	ldr	r3, [pc, #620]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 800651a:	499d      	ldr	r1, [pc, #628]	; (8006790 <HAL_RCC_OscConfig+0x344>)
 800651c:	400a      	ands	r2, r1
 800651e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d015      	beq.n	8006554 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006528:	f7fe fb96 	bl	8004c58 <HAL_GetTick>
 800652c:	0003      	movs	r3, r0
 800652e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006530:	e009      	b.n	8006546 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006532:	f7fe fb91 	bl	8004c58 <HAL_GetTick>
 8006536:	0002      	movs	r2, r0
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b64      	cmp	r3, #100	; 0x64
 800653e:	d902      	bls.n	8006546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	f000 fb4c 	bl	8006bde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006546:	4b90      	ldr	r3, [pc, #576]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	2380      	movs	r3, #128	; 0x80
 800654c:	029b      	lsls	r3, r3, #10
 800654e:	4013      	ands	r3, r2
 8006550:	d0ef      	beq.n	8006532 <HAL_RCC_OscConfig+0xe6>
 8006552:	e015      	b.n	8006580 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006554:	f7fe fb80 	bl	8004c58 <HAL_GetTick>
 8006558:	0003      	movs	r3, r0
 800655a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800655e:	f7fe fb7b 	bl	8004c58 <HAL_GetTick>
 8006562:	0002      	movs	r2, r0
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b64      	cmp	r3, #100	; 0x64
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e336      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006570:	4b85      	ldr	r3, [pc, #532]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	2380      	movs	r3, #128	; 0x80
 8006576:	029b      	lsls	r3, r3, #10
 8006578:	4013      	ands	r3, r2
 800657a:	d1f0      	bne.n	800655e <HAL_RCC_OscConfig+0x112>
 800657c:	e000      	b.n	8006580 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800657e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2202      	movs	r2, #2
 8006586:	4013      	ands	r3, r2
 8006588:	d100      	bne.n	800658c <HAL_RCC_OscConfig+0x140>
 800658a:	e099      	b.n	80066c0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	2220      	movs	r2, #32
 8006596:	4013      	ands	r3, r2
 8006598:	d009      	beq.n	80065ae <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800659a:	4b7b      	ldr	r3, [pc, #492]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	4b7a      	ldr	r3, [pc, #488]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80065a0:	2120      	movs	r1, #32
 80065a2:	430a      	orrs	r2, r1
 80065a4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	2220      	movs	r2, #32
 80065aa:	4393      	bics	r3, r2
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	d005      	beq.n	80065c0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	2b0c      	cmp	r3, #12
 80065b8:	d13e      	bne.n	8006638 <HAL_RCC_OscConfig+0x1ec>
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d13b      	bne.n	8006638 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80065c0:	4b71      	ldr	r3, [pc, #452]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2204      	movs	r2, #4
 80065c6:	4013      	ands	r3, r2
 80065c8:	d004      	beq.n	80065d4 <HAL_RCC_OscConfig+0x188>
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e304      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d4:	4b6c      	ldr	r3, [pc, #432]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	4a6e      	ldr	r2, [pc, #440]	; (8006794 <HAL_RCC_OscConfig+0x348>)
 80065da:	4013      	ands	r3, r2
 80065dc:	0019      	movs	r1, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	021a      	lsls	r2, r3, #8
 80065e4:	4b68      	ldr	r3, [pc, #416]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80065ea:	4b67      	ldr	r3, [pc, #412]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2209      	movs	r2, #9
 80065f0:	4393      	bics	r3, r2
 80065f2:	0019      	movs	r1, r3
 80065f4:	4b64      	ldr	r3, [pc, #400]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80065f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f8:	430a      	orrs	r2, r1
 80065fa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065fc:	f000 fc42 	bl	8006e84 <HAL_RCC_GetSysClockFreq>
 8006600:	0001      	movs	r1, r0
 8006602:	4b61      	ldr	r3, [pc, #388]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	091b      	lsrs	r3, r3, #4
 8006608:	220f      	movs	r2, #15
 800660a:	4013      	ands	r3, r2
 800660c:	4a62      	ldr	r2, [pc, #392]	; (8006798 <HAL_RCC_OscConfig+0x34c>)
 800660e:	5cd3      	ldrb	r3, [r2, r3]
 8006610:	000a      	movs	r2, r1
 8006612:	40da      	lsrs	r2, r3
 8006614:	4b61      	ldr	r3, [pc, #388]	; (800679c <HAL_RCC_OscConfig+0x350>)
 8006616:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006618:	4b61      	ldr	r3, [pc, #388]	; (80067a0 <HAL_RCC_OscConfig+0x354>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2513      	movs	r5, #19
 800661e:	197c      	adds	r4, r7, r5
 8006620:	0018      	movs	r0, r3
 8006622:	f7fe fad3 	bl	8004bcc <HAL_InitTick>
 8006626:	0003      	movs	r3, r0
 8006628:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800662a:	197b      	adds	r3, r7, r5
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d046      	beq.n	80066c0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8006632:	197b      	adds	r3, r7, r5
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	e2d2      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	2b00      	cmp	r3, #0
 800663c:	d027      	beq.n	800668e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800663e:	4b52      	ldr	r3, [pc, #328]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2209      	movs	r2, #9
 8006644:	4393      	bics	r3, r2
 8006646:	0019      	movs	r1, r3
 8006648:	4b4f      	ldr	r3, [pc, #316]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 800664a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664c:	430a      	orrs	r2, r1
 800664e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006650:	f7fe fb02 	bl	8004c58 <HAL_GetTick>
 8006654:	0003      	movs	r3, r0
 8006656:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800665a:	f7fe fafd 	bl	8004c58 <HAL_GetTick>
 800665e:	0002      	movs	r2, r0
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e2b8      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800666c:	4b46      	ldr	r3, [pc, #280]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2204      	movs	r2, #4
 8006672:	4013      	ands	r3, r2
 8006674:	d0f1      	beq.n	800665a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006676:	4b44      	ldr	r3, [pc, #272]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	4a46      	ldr	r2, [pc, #280]	; (8006794 <HAL_RCC_OscConfig+0x348>)
 800667c:	4013      	ands	r3, r2
 800667e:	0019      	movs	r1, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	021a      	lsls	r2, r3, #8
 8006686:	4b40      	ldr	r3, [pc, #256]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 8006688:	430a      	orrs	r2, r1
 800668a:	605a      	str	r2, [r3, #4]
 800668c:	e018      	b.n	80066c0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800668e:	4b3e      	ldr	r3, [pc, #248]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4b3d      	ldr	r3, [pc, #244]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 8006694:	2101      	movs	r1, #1
 8006696:	438a      	bics	r2, r1
 8006698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800669a:	f7fe fadd 	bl	8004c58 <HAL_GetTick>
 800669e:	0003      	movs	r3, r0
 80066a0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066a2:	e008      	b.n	80066b6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066a4:	f7fe fad8 	bl	8004c58 <HAL_GetTick>
 80066a8:	0002      	movs	r2, r0
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e293      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066b6:	4b34      	ldr	r3, [pc, #208]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2204      	movs	r2, #4
 80066bc:	4013      	ands	r3, r2
 80066be:	d1f1      	bne.n	80066a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2210      	movs	r2, #16
 80066c6:	4013      	ands	r3, r2
 80066c8:	d100      	bne.n	80066cc <HAL_RCC_OscConfig+0x280>
 80066ca:	e0a2      	b.n	8006812 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d140      	bne.n	8006754 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80066d2:	4b2d      	ldr	r3, [pc, #180]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	2380      	movs	r3, #128	; 0x80
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4013      	ands	r3, r2
 80066dc:	d005      	beq.n	80066ea <HAL_RCC_OscConfig+0x29e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e279      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066ea:	4b27      	ldr	r3, [pc, #156]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	4a2d      	ldr	r2, [pc, #180]	; (80067a4 <HAL_RCC_OscConfig+0x358>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	0019      	movs	r1, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066f8:	4b23      	ldr	r3, [pc, #140]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 80066fa:	430a      	orrs	r2, r1
 80066fc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066fe:	4b22      	ldr	r3, [pc, #136]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	021b      	lsls	r3, r3, #8
 8006704:	0a19      	lsrs	r1, r3, #8
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	061a      	lsls	r2, r3, #24
 800670c:	4b1e      	ldr	r3, [pc, #120]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 800670e:	430a      	orrs	r2, r1
 8006710:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006716:	0b5b      	lsrs	r3, r3, #13
 8006718:	3301      	adds	r3, #1
 800671a:	2280      	movs	r2, #128	; 0x80
 800671c:	0212      	lsls	r2, r2, #8
 800671e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006720:	4b19      	ldr	r3, [pc, #100]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	091b      	lsrs	r3, r3, #4
 8006726:	210f      	movs	r1, #15
 8006728:	400b      	ands	r3, r1
 800672a:	491b      	ldr	r1, [pc, #108]	; (8006798 <HAL_RCC_OscConfig+0x34c>)
 800672c:	5ccb      	ldrb	r3, [r1, r3]
 800672e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006730:	4b1a      	ldr	r3, [pc, #104]	; (800679c <HAL_RCC_OscConfig+0x350>)
 8006732:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006734:	4b1a      	ldr	r3, [pc, #104]	; (80067a0 <HAL_RCC_OscConfig+0x354>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2513      	movs	r5, #19
 800673a:	197c      	adds	r4, r7, r5
 800673c:	0018      	movs	r0, r3
 800673e:	f7fe fa45 	bl	8004bcc <HAL_InitTick>
 8006742:	0003      	movs	r3, r0
 8006744:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006746:	197b      	adds	r3, r7, r5
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d061      	beq.n	8006812 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800674e:	197b      	adds	r3, r7, r5
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	e244      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d040      	beq.n	80067de <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800675c:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	4b09      	ldr	r3, [pc, #36]	; (8006788 <HAL_RCC_OscConfig+0x33c>)
 8006762:	2180      	movs	r1, #128	; 0x80
 8006764:	0049      	lsls	r1, r1, #1
 8006766:	430a      	orrs	r2, r1
 8006768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800676a:	f7fe fa75 	bl	8004c58 <HAL_GetTick>
 800676e:	0003      	movs	r3, r0
 8006770:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006772:	e019      	b.n	80067a8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006774:	f7fe fa70 	bl	8004c58 <HAL_GetTick>
 8006778:	0002      	movs	r2, r0
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d912      	bls.n	80067a8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e22b      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
 8006786:	46c0      	nop			; (mov r8, r8)
 8006788:	40021000 	.word	0x40021000
 800678c:	fffeffff 	.word	0xfffeffff
 8006790:	fffbffff 	.word	0xfffbffff
 8006794:	ffffe0ff 	.word	0xffffe0ff
 8006798:	0800c534 	.word	0x0800c534
 800679c:	20000000 	.word	0x20000000
 80067a0:	20000004 	.word	0x20000004
 80067a4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80067a8:	4bca      	ldr	r3, [pc, #808]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	2380      	movs	r3, #128	; 0x80
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4013      	ands	r3, r2
 80067b2:	d0df      	beq.n	8006774 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067b4:	4bc7      	ldr	r3, [pc, #796]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	4ac7      	ldr	r2, [pc, #796]	; (8006ad8 <HAL_RCC_OscConfig+0x68c>)
 80067ba:	4013      	ands	r3, r2
 80067bc:	0019      	movs	r1, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067c2:	4bc4      	ldr	r3, [pc, #784]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 80067c4:	430a      	orrs	r2, r1
 80067c6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067c8:	4bc2      	ldr	r3, [pc, #776]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	0a19      	lsrs	r1, r3, #8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	061a      	lsls	r2, r3, #24
 80067d6:	4bbf      	ldr	r3, [pc, #764]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 80067d8:	430a      	orrs	r2, r1
 80067da:	605a      	str	r2, [r3, #4]
 80067dc:	e019      	b.n	8006812 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80067de:	4bbd      	ldr	r3, [pc, #756]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	4bbc      	ldr	r3, [pc, #752]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 80067e4:	49bd      	ldr	r1, [pc, #756]	; (8006adc <HAL_RCC_OscConfig+0x690>)
 80067e6:	400a      	ands	r2, r1
 80067e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ea:	f7fe fa35 	bl	8004c58 <HAL_GetTick>
 80067ee:	0003      	movs	r3, r0
 80067f0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067f4:	f7fe fa30 	bl	8004c58 <HAL_GetTick>
 80067f8:	0002      	movs	r2, r0
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e1eb      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006806:	4bb3      	ldr	r3, [pc, #716]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	2380      	movs	r3, #128	; 0x80
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4013      	ands	r3, r2
 8006810:	d1f0      	bne.n	80067f4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2208      	movs	r2, #8
 8006818:	4013      	ands	r3, r2
 800681a:	d036      	beq.n	800688a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d019      	beq.n	8006858 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006824:	4bab      	ldr	r3, [pc, #684]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006826:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006828:	4baa      	ldr	r3, [pc, #680]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 800682a:	2101      	movs	r1, #1
 800682c:	430a      	orrs	r2, r1
 800682e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006830:	f7fe fa12 	bl	8004c58 <HAL_GetTick>
 8006834:	0003      	movs	r3, r0
 8006836:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006838:	e008      	b.n	800684c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800683a:	f7fe fa0d 	bl	8004c58 <HAL_GetTick>
 800683e:	0002      	movs	r2, r0
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e1c8      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800684c:	4ba1      	ldr	r3, [pc, #644]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 800684e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006850:	2202      	movs	r2, #2
 8006852:	4013      	ands	r3, r2
 8006854:	d0f1      	beq.n	800683a <HAL_RCC_OscConfig+0x3ee>
 8006856:	e018      	b.n	800688a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006858:	4b9e      	ldr	r3, [pc, #632]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 800685a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800685c:	4b9d      	ldr	r3, [pc, #628]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 800685e:	2101      	movs	r1, #1
 8006860:	438a      	bics	r2, r1
 8006862:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006864:	f7fe f9f8 	bl	8004c58 <HAL_GetTick>
 8006868:	0003      	movs	r3, r0
 800686a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800686c:	e008      	b.n	8006880 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800686e:	f7fe f9f3 	bl	8004c58 <HAL_GetTick>
 8006872:	0002      	movs	r2, r0
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	2b02      	cmp	r3, #2
 800687a:	d901      	bls.n	8006880 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e1ae      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006880:	4b94      	ldr	r3, [pc, #592]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006884:	2202      	movs	r2, #2
 8006886:	4013      	ands	r3, r2
 8006888:	d1f1      	bne.n	800686e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2204      	movs	r2, #4
 8006890:	4013      	ands	r3, r2
 8006892:	d100      	bne.n	8006896 <HAL_RCC_OscConfig+0x44a>
 8006894:	e0ae      	b.n	80069f4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006896:	2023      	movs	r0, #35	; 0x23
 8006898:	183b      	adds	r3, r7, r0
 800689a:	2200      	movs	r2, #0
 800689c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800689e:	4b8d      	ldr	r3, [pc, #564]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 80068a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068a2:	2380      	movs	r3, #128	; 0x80
 80068a4:	055b      	lsls	r3, r3, #21
 80068a6:	4013      	ands	r3, r2
 80068a8:	d109      	bne.n	80068be <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068aa:	4b8a      	ldr	r3, [pc, #552]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 80068ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ae:	4b89      	ldr	r3, [pc, #548]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 80068b0:	2180      	movs	r1, #128	; 0x80
 80068b2:	0549      	lsls	r1, r1, #21
 80068b4:	430a      	orrs	r2, r1
 80068b6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80068b8:	183b      	adds	r3, r7, r0
 80068ba:	2201      	movs	r2, #1
 80068bc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068be:	4b88      	ldr	r3, [pc, #544]	; (8006ae0 <HAL_RCC_OscConfig+0x694>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	2380      	movs	r3, #128	; 0x80
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	4013      	ands	r3, r2
 80068c8:	d11a      	bne.n	8006900 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068ca:	4b85      	ldr	r3, [pc, #532]	; (8006ae0 <HAL_RCC_OscConfig+0x694>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4b84      	ldr	r3, [pc, #528]	; (8006ae0 <HAL_RCC_OscConfig+0x694>)
 80068d0:	2180      	movs	r1, #128	; 0x80
 80068d2:	0049      	lsls	r1, r1, #1
 80068d4:	430a      	orrs	r2, r1
 80068d6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068d8:	f7fe f9be 	bl	8004c58 <HAL_GetTick>
 80068dc:	0003      	movs	r3, r0
 80068de:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068e0:	e008      	b.n	80068f4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e2:	f7fe f9b9 	bl	8004c58 <HAL_GetTick>
 80068e6:	0002      	movs	r2, r0
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b64      	cmp	r3, #100	; 0x64
 80068ee:	d901      	bls.n	80068f4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e174      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068f4:	4b7a      	ldr	r3, [pc, #488]	; (8006ae0 <HAL_RCC_OscConfig+0x694>)
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	2380      	movs	r3, #128	; 0x80
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	4013      	ands	r3, r2
 80068fe:	d0f0      	beq.n	80068e2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	2380      	movs	r3, #128	; 0x80
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	429a      	cmp	r2, r3
 800690a:	d107      	bne.n	800691c <HAL_RCC_OscConfig+0x4d0>
 800690c:	4b71      	ldr	r3, [pc, #452]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 800690e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006910:	4b70      	ldr	r3, [pc, #448]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006912:	2180      	movs	r1, #128	; 0x80
 8006914:	0049      	lsls	r1, r1, #1
 8006916:	430a      	orrs	r2, r1
 8006918:	651a      	str	r2, [r3, #80]	; 0x50
 800691a:	e031      	b.n	8006980 <HAL_RCC_OscConfig+0x534>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10c      	bne.n	800693e <HAL_RCC_OscConfig+0x4f2>
 8006924:	4b6b      	ldr	r3, [pc, #428]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006926:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006928:	4b6a      	ldr	r3, [pc, #424]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 800692a:	496c      	ldr	r1, [pc, #432]	; (8006adc <HAL_RCC_OscConfig+0x690>)
 800692c:	400a      	ands	r2, r1
 800692e:	651a      	str	r2, [r3, #80]	; 0x50
 8006930:	4b68      	ldr	r3, [pc, #416]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006932:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006934:	4b67      	ldr	r3, [pc, #412]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006936:	496b      	ldr	r1, [pc, #428]	; (8006ae4 <HAL_RCC_OscConfig+0x698>)
 8006938:	400a      	ands	r2, r1
 800693a:	651a      	str	r2, [r3, #80]	; 0x50
 800693c:	e020      	b.n	8006980 <HAL_RCC_OscConfig+0x534>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689a      	ldr	r2, [r3, #8]
 8006942:	23a0      	movs	r3, #160	; 0xa0
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	429a      	cmp	r2, r3
 8006948:	d10e      	bne.n	8006968 <HAL_RCC_OscConfig+0x51c>
 800694a:	4b62      	ldr	r3, [pc, #392]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 800694c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800694e:	4b61      	ldr	r3, [pc, #388]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006950:	2180      	movs	r1, #128	; 0x80
 8006952:	00c9      	lsls	r1, r1, #3
 8006954:	430a      	orrs	r2, r1
 8006956:	651a      	str	r2, [r3, #80]	; 0x50
 8006958:	4b5e      	ldr	r3, [pc, #376]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 800695a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800695c:	4b5d      	ldr	r3, [pc, #372]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 800695e:	2180      	movs	r1, #128	; 0x80
 8006960:	0049      	lsls	r1, r1, #1
 8006962:	430a      	orrs	r2, r1
 8006964:	651a      	str	r2, [r3, #80]	; 0x50
 8006966:	e00b      	b.n	8006980 <HAL_RCC_OscConfig+0x534>
 8006968:	4b5a      	ldr	r3, [pc, #360]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 800696a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800696c:	4b59      	ldr	r3, [pc, #356]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 800696e:	495b      	ldr	r1, [pc, #364]	; (8006adc <HAL_RCC_OscConfig+0x690>)
 8006970:	400a      	ands	r2, r1
 8006972:	651a      	str	r2, [r3, #80]	; 0x50
 8006974:	4b57      	ldr	r3, [pc, #348]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006976:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006978:	4b56      	ldr	r3, [pc, #344]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 800697a:	495a      	ldr	r1, [pc, #360]	; (8006ae4 <HAL_RCC_OscConfig+0x698>)
 800697c:	400a      	ands	r2, r1
 800697e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d015      	beq.n	80069b4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006988:	f7fe f966 	bl	8004c58 <HAL_GetTick>
 800698c:	0003      	movs	r3, r0
 800698e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006990:	e009      	b.n	80069a6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006992:	f7fe f961 	bl	8004c58 <HAL_GetTick>
 8006996:	0002      	movs	r2, r0
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	4a52      	ldr	r2, [pc, #328]	; (8006ae8 <HAL_RCC_OscConfig+0x69c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e11b      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069a6:	4b4b      	ldr	r3, [pc, #300]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 80069a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069aa:	2380      	movs	r3, #128	; 0x80
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4013      	ands	r3, r2
 80069b0:	d0ef      	beq.n	8006992 <HAL_RCC_OscConfig+0x546>
 80069b2:	e014      	b.n	80069de <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069b4:	f7fe f950 	bl	8004c58 <HAL_GetTick>
 80069b8:	0003      	movs	r3, r0
 80069ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069bc:	e009      	b.n	80069d2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069be:	f7fe f94b 	bl	8004c58 <HAL_GetTick>
 80069c2:	0002      	movs	r2, r0
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	4a47      	ldr	r2, [pc, #284]	; (8006ae8 <HAL_RCC_OscConfig+0x69c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e105      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069d2:	4b40      	ldr	r3, [pc, #256]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 80069d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069d6:	2380      	movs	r3, #128	; 0x80
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4013      	ands	r3, r2
 80069dc:	d1ef      	bne.n	80069be <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80069de:	2323      	movs	r3, #35	; 0x23
 80069e0:	18fb      	adds	r3, r7, r3
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d105      	bne.n	80069f4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069e8:	4b3a      	ldr	r3, [pc, #232]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 80069ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ec:	4b39      	ldr	r3, [pc, #228]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 80069ee:	493f      	ldr	r1, [pc, #252]	; (8006aec <HAL_RCC_OscConfig+0x6a0>)
 80069f0:	400a      	ands	r2, r1
 80069f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2220      	movs	r2, #32
 80069fa:	4013      	ands	r3, r2
 80069fc:	d049      	beq.n	8006a92 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d026      	beq.n	8006a54 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006a06:	4b33      	ldr	r3, [pc, #204]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	4b32      	ldr	r3, [pc, #200]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006a0c:	2101      	movs	r1, #1
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	609a      	str	r2, [r3, #8]
 8006a12:	4b30      	ldr	r3, [pc, #192]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a16:	4b2f      	ldr	r3, [pc, #188]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006a18:	2101      	movs	r1, #1
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8006a1e:	4b34      	ldr	r3, [pc, #208]	; (8006af0 <HAL_RCC_OscConfig+0x6a4>)
 8006a20:	6a1a      	ldr	r2, [r3, #32]
 8006a22:	4b33      	ldr	r3, [pc, #204]	; (8006af0 <HAL_RCC_OscConfig+0x6a4>)
 8006a24:	2180      	movs	r1, #128	; 0x80
 8006a26:	0189      	lsls	r1, r1, #6
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a2c:	f7fe f914 	bl	8004c58 <HAL_GetTick>
 8006a30:	0003      	movs	r3, r0
 8006a32:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a34:	e008      	b.n	8006a48 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a36:	f7fe f90f 	bl	8004c58 <HAL_GetTick>
 8006a3a:	0002      	movs	r2, r0
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d901      	bls.n	8006a48 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e0ca      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a48:	4b22      	ldr	r3, [pc, #136]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	4013      	ands	r3, r2
 8006a50:	d0f1      	beq.n	8006a36 <HAL_RCC_OscConfig+0x5ea>
 8006a52:	e01e      	b.n	8006a92 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006a54:	4b1f      	ldr	r3, [pc, #124]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	4b1e      	ldr	r3, [pc, #120]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	438a      	bics	r2, r1
 8006a5e:	609a      	str	r2, [r3, #8]
 8006a60:	4b23      	ldr	r3, [pc, #140]	; (8006af0 <HAL_RCC_OscConfig+0x6a4>)
 8006a62:	6a1a      	ldr	r2, [r3, #32]
 8006a64:	4b22      	ldr	r3, [pc, #136]	; (8006af0 <HAL_RCC_OscConfig+0x6a4>)
 8006a66:	4923      	ldr	r1, [pc, #140]	; (8006af4 <HAL_RCC_OscConfig+0x6a8>)
 8006a68:	400a      	ands	r2, r1
 8006a6a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a6c:	f7fe f8f4 	bl	8004c58 <HAL_GetTick>
 8006a70:	0003      	movs	r3, r0
 8006a72:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a74:	e008      	b.n	8006a88 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a76:	f7fe f8ef 	bl	8004c58 <HAL_GetTick>
 8006a7a:	0002      	movs	r2, r0
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d901      	bls.n	8006a88 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e0aa      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a88:	4b12      	ldr	r3, [pc, #72]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	4013      	ands	r3, r2
 8006a90:	d1f1      	bne.n	8006a76 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d100      	bne.n	8006a9c <HAL_RCC_OscConfig+0x650>
 8006a9a:	e09f      	b.n	8006bdc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	2b0c      	cmp	r3, #12
 8006aa0:	d100      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x658>
 8006aa2:	e078      	b.n	8006b96 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d159      	bne.n	8006b60 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aac:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <HAL_RCC_OscConfig+0x688>)
 8006ab2:	4911      	ldr	r1, [pc, #68]	; (8006af8 <HAL_RCC_OscConfig+0x6ac>)
 8006ab4:	400a      	ands	r2, r1
 8006ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab8:	f7fe f8ce 	bl	8004c58 <HAL_GetTick>
 8006abc:	0003      	movs	r3, r0
 8006abe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006ac0:	e01c      	b.n	8006afc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ac2:	f7fe f8c9 	bl	8004c58 <HAL_GetTick>
 8006ac6:	0002      	movs	r2, r0
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d915      	bls.n	8006afc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e084      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	ffff1fff 	.word	0xffff1fff
 8006adc:	fffffeff 	.word	0xfffffeff
 8006ae0:	40007000 	.word	0x40007000
 8006ae4:	fffffbff 	.word	0xfffffbff
 8006ae8:	00001388 	.word	0x00001388
 8006aec:	efffffff 	.word	0xefffffff
 8006af0:	40010000 	.word	0x40010000
 8006af4:	ffffdfff 	.word	0xffffdfff
 8006af8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006afc:	4b3a      	ldr	r3, [pc, #232]	; (8006be8 <HAL_RCC_OscConfig+0x79c>)
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	2380      	movs	r3, #128	; 0x80
 8006b02:	049b      	lsls	r3, r3, #18
 8006b04:	4013      	ands	r3, r2
 8006b06:	d1dc      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b08:	4b37      	ldr	r3, [pc, #220]	; (8006be8 <HAL_RCC_OscConfig+0x79c>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	4a37      	ldr	r2, [pc, #220]	; (8006bec <HAL_RCC_OscConfig+0x7a0>)
 8006b0e:	4013      	ands	r3, r2
 8006b10:	0019      	movs	r1, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b20:	431a      	orrs	r2, r3
 8006b22:	4b31      	ldr	r3, [pc, #196]	; (8006be8 <HAL_RCC_OscConfig+0x79c>)
 8006b24:	430a      	orrs	r2, r1
 8006b26:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b28:	4b2f      	ldr	r3, [pc, #188]	; (8006be8 <HAL_RCC_OscConfig+0x79c>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	4b2e      	ldr	r3, [pc, #184]	; (8006be8 <HAL_RCC_OscConfig+0x79c>)
 8006b2e:	2180      	movs	r1, #128	; 0x80
 8006b30:	0449      	lsls	r1, r1, #17
 8006b32:	430a      	orrs	r2, r1
 8006b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b36:	f7fe f88f 	bl	8004c58 <HAL_GetTick>
 8006b3a:	0003      	movs	r3, r0
 8006b3c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006b3e:	e008      	b.n	8006b52 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b40:	f7fe f88a 	bl	8004c58 <HAL_GetTick>
 8006b44:	0002      	movs	r2, r0
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e045      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006b52:	4b25      	ldr	r3, [pc, #148]	; (8006be8 <HAL_RCC_OscConfig+0x79c>)
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	2380      	movs	r3, #128	; 0x80
 8006b58:	049b      	lsls	r3, r3, #18
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	d0f0      	beq.n	8006b40 <HAL_RCC_OscConfig+0x6f4>
 8006b5e:	e03d      	b.n	8006bdc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b60:	4b21      	ldr	r3, [pc, #132]	; (8006be8 <HAL_RCC_OscConfig+0x79c>)
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	4b20      	ldr	r3, [pc, #128]	; (8006be8 <HAL_RCC_OscConfig+0x79c>)
 8006b66:	4922      	ldr	r1, [pc, #136]	; (8006bf0 <HAL_RCC_OscConfig+0x7a4>)
 8006b68:	400a      	ands	r2, r1
 8006b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b6c:	f7fe f874 	bl	8004c58 <HAL_GetTick>
 8006b70:	0003      	movs	r3, r0
 8006b72:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006b74:	e008      	b.n	8006b88 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b76:	f7fe f86f 	bl	8004c58 <HAL_GetTick>
 8006b7a:	0002      	movs	r2, r0
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d901      	bls.n	8006b88 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e02a      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006b88:	4b17      	ldr	r3, [pc, #92]	; (8006be8 <HAL_RCC_OscConfig+0x79c>)
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	2380      	movs	r3, #128	; 0x80
 8006b8e:	049b      	lsls	r3, r3, #18
 8006b90:	4013      	ands	r3, r2
 8006b92:	d1f0      	bne.n	8006b76 <HAL_RCC_OscConfig+0x72a>
 8006b94:	e022      	b.n	8006bdc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d101      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e01d      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006ba2:	4b11      	ldr	r3, [pc, #68]	; (8006be8 <HAL_RCC_OscConfig+0x79c>)
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	2380      	movs	r3, #128	; 0x80
 8006bac:	025b      	lsls	r3, r3, #9
 8006bae:	401a      	ands	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d10f      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	23f0      	movs	r3, #240	; 0xf0
 8006bbc:	039b      	lsls	r3, r3, #14
 8006bbe:	401a      	ands	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d107      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	23c0      	movs	r3, #192	; 0xc0
 8006bcc:	041b      	lsls	r3, r3, #16
 8006bce:	401a      	ands	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d001      	beq.n	8006bdc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e000      	b.n	8006bde <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	0018      	movs	r0, r3
 8006be0:	46bd      	mov	sp, r7
 8006be2:	b00a      	add	sp, #40	; 0x28
 8006be4:	bdb0      	pop	{r4, r5, r7, pc}
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	40021000 	.word	0x40021000
 8006bec:	ff02ffff 	.word	0xff02ffff
 8006bf0:	feffffff 	.word	0xfeffffff

08006bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bf4:	b5b0      	push	{r4, r5, r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e128      	b.n	8006e5a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c08:	4b96      	ldr	r3, [pc, #600]	; (8006e64 <HAL_RCC_ClockConfig+0x270>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	4013      	ands	r3, r2
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d91e      	bls.n	8006c54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c16:	4b93      	ldr	r3, [pc, #588]	; (8006e64 <HAL_RCC_ClockConfig+0x270>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	4393      	bics	r3, r2
 8006c1e:	0019      	movs	r1, r3
 8006c20:	4b90      	ldr	r3, [pc, #576]	; (8006e64 <HAL_RCC_ClockConfig+0x270>)
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c28:	f7fe f816 	bl	8004c58 <HAL_GetTick>
 8006c2c:	0003      	movs	r3, r0
 8006c2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c30:	e009      	b.n	8006c46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c32:	f7fe f811 	bl	8004c58 <HAL_GetTick>
 8006c36:	0002      	movs	r2, r0
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	4a8a      	ldr	r2, [pc, #552]	; (8006e68 <HAL_RCC_ClockConfig+0x274>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e109      	b.n	8006e5a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c46:	4b87      	ldr	r3, [pc, #540]	; (8006e64 <HAL_RCC_ClockConfig+0x270>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d1ee      	bne.n	8006c32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	d009      	beq.n	8006c72 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c5e:	4b83      	ldr	r3, [pc, #524]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	22f0      	movs	r2, #240	; 0xf0
 8006c64:	4393      	bics	r3, r2
 8006c66:	0019      	movs	r1, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	4b7f      	ldr	r3, [pc, #508]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2201      	movs	r2, #1
 8006c78:	4013      	ands	r3, r2
 8006c7a:	d100      	bne.n	8006c7e <HAL_RCC_ClockConfig+0x8a>
 8006c7c:	e089      	b.n	8006d92 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d107      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c86:	4b79      	ldr	r3, [pc, #484]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	2380      	movs	r3, #128	; 0x80
 8006c8c:	029b      	lsls	r3, r3, #10
 8006c8e:	4013      	ands	r3, r2
 8006c90:	d120      	bne.n	8006cd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e0e1      	b.n	8006e5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d107      	bne.n	8006cae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c9e:	4b73      	ldr	r3, [pc, #460]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	2380      	movs	r3, #128	; 0x80
 8006ca4:	049b      	lsls	r3, r3, #18
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	d114      	bne.n	8006cd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e0d5      	b.n	8006e5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d106      	bne.n	8006cc4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cb6:	4b6d      	ldr	r3, [pc, #436]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2204      	movs	r2, #4
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	d109      	bne.n	8006cd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0ca      	b.n	8006e5a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006cc4:	4b69      	ldr	r3, [pc, #420]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	2380      	movs	r3, #128	; 0x80
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4013      	ands	r3, r2
 8006cce:	d101      	bne.n	8006cd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e0c2      	b.n	8006e5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cd4:	4b65      	ldr	r3, [pc, #404]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	2203      	movs	r2, #3
 8006cda:	4393      	bics	r3, r2
 8006cdc:	0019      	movs	r1, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	4b62      	ldr	r3, [pc, #392]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ce8:	f7fd ffb6 	bl	8004c58 <HAL_GetTick>
 8006cec:	0003      	movs	r3, r0
 8006cee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d111      	bne.n	8006d1c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cf8:	e009      	b.n	8006d0e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cfa:	f7fd ffad 	bl	8004c58 <HAL_GetTick>
 8006cfe:	0002      	movs	r2, r0
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	4a58      	ldr	r2, [pc, #352]	; (8006e68 <HAL_RCC_ClockConfig+0x274>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e0a5      	b.n	8006e5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d0e:	4b57      	ldr	r3, [pc, #348]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	220c      	movs	r2, #12
 8006d14:	4013      	ands	r3, r2
 8006d16:	2b08      	cmp	r3, #8
 8006d18:	d1ef      	bne.n	8006cfa <HAL_RCC_ClockConfig+0x106>
 8006d1a:	e03a      	b.n	8006d92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d111      	bne.n	8006d48 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d24:	e009      	b.n	8006d3a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d26:	f7fd ff97 	bl	8004c58 <HAL_GetTick>
 8006d2a:	0002      	movs	r2, r0
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	4a4d      	ldr	r2, [pc, #308]	; (8006e68 <HAL_RCC_ClockConfig+0x274>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e08f      	b.n	8006e5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d3a:	4b4c      	ldr	r3, [pc, #304]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	220c      	movs	r2, #12
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b0c      	cmp	r3, #12
 8006d44:	d1ef      	bne.n	8006d26 <HAL_RCC_ClockConfig+0x132>
 8006d46:	e024      	b.n	8006d92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d11b      	bne.n	8006d88 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d50:	e009      	b.n	8006d66 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d52:	f7fd ff81 	bl	8004c58 <HAL_GetTick>
 8006d56:	0002      	movs	r2, r0
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	4a42      	ldr	r2, [pc, #264]	; (8006e68 <HAL_RCC_ClockConfig+0x274>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e079      	b.n	8006e5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d66:	4b41      	ldr	r3, [pc, #260]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	220c      	movs	r2, #12
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	d1ef      	bne.n	8006d52 <HAL_RCC_ClockConfig+0x15e>
 8006d72:	e00e      	b.n	8006d92 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d74:	f7fd ff70 	bl	8004c58 <HAL_GetTick>
 8006d78:	0002      	movs	r2, r0
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	4a3a      	ldr	r2, [pc, #232]	; (8006e68 <HAL_RCC_ClockConfig+0x274>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d901      	bls.n	8006d88 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e068      	b.n	8006e5a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006d88:	4b38      	ldr	r3, [pc, #224]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	220c      	movs	r2, #12
 8006d8e:	4013      	ands	r3, r2
 8006d90:	d1f0      	bne.n	8006d74 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d92:	4b34      	ldr	r3, [pc, #208]	; (8006e64 <HAL_RCC_ClockConfig+0x270>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2201      	movs	r2, #1
 8006d98:	4013      	ands	r3, r2
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d21e      	bcs.n	8006dde <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006da0:	4b30      	ldr	r3, [pc, #192]	; (8006e64 <HAL_RCC_ClockConfig+0x270>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2201      	movs	r2, #1
 8006da6:	4393      	bics	r3, r2
 8006da8:	0019      	movs	r1, r3
 8006daa:	4b2e      	ldr	r3, [pc, #184]	; (8006e64 <HAL_RCC_ClockConfig+0x270>)
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006db2:	f7fd ff51 	bl	8004c58 <HAL_GetTick>
 8006db6:	0003      	movs	r3, r0
 8006db8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dba:	e009      	b.n	8006dd0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dbc:	f7fd ff4c 	bl	8004c58 <HAL_GetTick>
 8006dc0:	0002      	movs	r2, r0
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	4a28      	ldr	r2, [pc, #160]	; (8006e68 <HAL_RCC_ClockConfig+0x274>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e044      	b.n	8006e5a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dd0:	4b24      	ldr	r3, [pc, #144]	; (8006e64 <HAL_RCC_ClockConfig+0x270>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d1ee      	bne.n	8006dbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2204      	movs	r2, #4
 8006de4:	4013      	ands	r3, r2
 8006de6:	d009      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006de8:	4b20      	ldr	r3, [pc, #128]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	4a20      	ldr	r2, [pc, #128]	; (8006e70 <HAL_RCC_ClockConfig+0x27c>)
 8006dee:	4013      	ands	r3, r2
 8006df0:	0019      	movs	r1, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	4b1d      	ldr	r3, [pc, #116]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2208      	movs	r2, #8
 8006e02:	4013      	ands	r3, r2
 8006e04:	d00a      	beq.n	8006e1c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e06:	4b19      	ldr	r3, [pc, #100]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	4a1a      	ldr	r2, [pc, #104]	; (8006e74 <HAL_RCC_ClockConfig+0x280>)
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	0019      	movs	r1, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	00da      	lsls	r2, r3, #3
 8006e16:	4b15      	ldr	r3, [pc, #84]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e1c:	f000 f832 	bl	8006e84 <HAL_RCC_GetSysClockFreq>
 8006e20:	0001      	movs	r1, r0
 8006e22:	4b12      	ldr	r3, [pc, #72]	; (8006e6c <HAL_RCC_ClockConfig+0x278>)
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	091b      	lsrs	r3, r3, #4
 8006e28:	220f      	movs	r2, #15
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	4a12      	ldr	r2, [pc, #72]	; (8006e78 <HAL_RCC_ClockConfig+0x284>)
 8006e2e:	5cd3      	ldrb	r3, [r2, r3]
 8006e30:	000a      	movs	r2, r1
 8006e32:	40da      	lsrs	r2, r3
 8006e34:	4b11      	ldr	r3, [pc, #68]	; (8006e7c <HAL_RCC_ClockConfig+0x288>)
 8006e36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e38:	4b11      	ldr	r3, [pc, #68]	; (8006e80 <HAL_RCC_ClockConfig+0x28c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	250b      	movs	r5, #11
 8006e3e:	197c      	adds	r4, r7, r5
 8006e40:	0018      	movs	r0, r3
 8006e42:	f7fd fec3 	bl	8004bcc <HAL_InitTick>
 8006e46:	0003      	movs	r3, r0
 8006e48:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006e4a:	197b      	adds	r3, r7, r5
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006e52:	197b      	adds	r3, r7, r5
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	e000      	b.n	8006e5a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b004      	add	sp, #16
 8006e60:	bdb0      	pop	{r4, r5, r7, pc}
 8006e62:	46c0      	nop			; (mov r8, r8)
 8006e64:	40022000 	.word	0x40022000
 8006e68:	00001388 	.word	0x00001388
 8006e6c:	40021000 	.word	0x40021000
 8006e70:	fffff8ff 	.word	0xfffff8ff
 8006e74:	ffffc7ff 	.word	0xffffc7ff
 8006e78:	0800c534 	.word	0x0800c534
 8006e7c:	20000000 	.word	0x20000000
 8006e80:	20000004 	.word	0x20000004

08006e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e84:	b5b0      	push	{r4, r5, r7, lr}
 8006e86:	b08e      	sub	sp, #56	; 0x38
 8006e88:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006e8a:	4b4c      	ldr	r3, [pc, #304]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x138>)
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e92:	230c      	movs	r3, #12
 8006e94:	4013      	ands	r3, r2
 8006e96:	2b0c      	cmp	r3, #12
 8006e98:	d014      	beq.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8006e9a:	d900      	bls.n	8006e9e <HAL_RCC_GetSysClockFreq+0x1a>
 8006e9c:	e07b      	b.n	8006f96 <HAL_RCC_GetSysClockFreq+0x112>
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d002      	beq.n	8006ea8 <HAL_RCC_GetSysClockFreq+0x24>
 8006ea2:	2b08      	cmp	r3, #8
 8006ea4:	d00b      	beq.n	8006ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8006ea6:	e076      	b.n	8006f96 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006ea8:	4b44      	ldr	r3, [pc, #272]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x138>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2210      	movs	r2, #16
 8006eae:	4013      	ands	r3, r2
 8006eb0:	d002      	beq.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006eb2:	4b43      	ldr	r3, [pc, #268]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006eb4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006eb6:	e07c      	b.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006eb8:	4b42      	ldr	r3, [pc, #264]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x140>)
 8006eba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006ebc:	e079      	b.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ebe:	4b42      	ldr	r3, [pc, #264]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x144>)
 8006ec0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006ec2:	e076      	b.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec6:	0c9a      	lsrs	r2, r3, #18
 8006ec8:	230f      	movs	r3, #15
 8006eca:	401a      	ands	r2, r3
 8006ecc:	4b3f      	ldr	r3, [pc, #252]	; (8006fcc <HAL_RCC_GetSysClockFreq+0x148>)
 8006ece:	5c9b      	ldrb	r3, [r3, r2]
 8006ed0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed4:	0d9a      	lsrs	r2, r3, #22
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	4013      	ands	r3, r2
 8006eda:	3301      	adds	r3, #1
 8006edc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ede:	4b37      	ldr	r3, [pc, #220]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x138>)
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	2380      	movs	r3, #128	; 0x80
 8006ee4:	025b      	lsls	r3, r3, #9
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	d01a      	beq.n	8006f20 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	4a35      	ldr	r2, [pc, #212]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x144>)
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	69b8      	ldr	r0, [r7, #24]
 8006ef8:	69f9      	ldr	r1, [r7, #28]
 8006efa:	f7f9 faf5 	bl	80004e8 <__aeabi_lmul>
 8006efe:	0002      	movs	r2, r0
 8006f00:	000b      	movs	r3, r1
 8006f02:	0010      	movs	r0, r2
 8006f04:	0019      	movs	r1, r3
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f7f9 fac9 	bl	80004a8 <__aeabi_uldivmod>
 8006f16:	0002      	movs	r2, r0
 8006f18:	000b      	movs	r3, r1
 8006f1a:	0013      	movs	r3, r2
 8006f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f1e:	e037      	b.n	8006f90 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006f20:	4b26      	ldr	r3, [pc, #152]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x138>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2210      	movs	r2, #16
 8006f26:	4013      	ands	r3, r2
 8006f28:	d01a      	beq.n	8006f60 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	60bb      	str	r3, [r7, #8]
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	4a23      	ldr	r2, [pc, #140]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006f34:	2300      	movs	r3, #0
 8006f36:	68b8      	ldr	r0, [r7, #8]
 8006f38:	68f9      	ldr	r1, [r7, #12]
 8006f3a:	f7f9 fad5 	bl	80004e8 <__aeabi_lmul>
 8006f3e:	0002      	movs	r2, r0
 8006f40:	000b      	movs	r3, r1
 8006f42:	0010      	movs	r0, r2
 8006f44:	0019      	movs	r1, r3
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	603b      	str	r3, [r7, #0]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	607b      	str	r3, [r7, #4]
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f7f9 faa9 	bl	80004a8 <__aeabi_uldivmod>
 8006f56:	0002      	movs	r2, r0
 8006f58:	000b      	movs	r3, r1
 8006f5a:	0013      	movs	r3, r2
 8006f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f5e:	e017      	b.n	8006f90 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	0018      	movs	r0, r3
 8006f64:	2300      	movs	r3, #0
 8006f66:	0019      	movs	r1, r3
 8006f68:	4a16      	ldr	r2, [pc, #88]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x140>)
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f7f9 fabc 	bl	80004e8 <__aeabi_lmul>
 8006f70:	0002      	movs	r2, r0
 8006f72:	000b      	movs	r3, r1
 8006f74:	0010      	movs	r0, r2
 8006f76:	0019      	movs	r1, r3
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	001c      	movs	r4, r3
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	001d      	movs	r5, r3
 8006f80:	0022      	movs	r2, r4
 8006f82:	002b      	movs	r3, r5
 8006f84:	f7f9 fa90 	bl	80004a8 <__aeabi_uldivmod>
 8006f88:	0002      	movs	r2, r0
 8006f8a:	000b      	movs	r3, r1
 8006f8c:	0013      	movs	r3, r2
 8006f8e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006f94:	e00d      	b.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006f96:	4b09      	ldr	r3, [pc, #36]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x138>)
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	0b5b      	lsrs	r3, r3, #13
 8006f9c:	2207      	movs	r2, #7
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	2280      	movs	r2, #128	; 0x80
 8006fa8:	0212      	lsls	r2, r2, #8
 8006faa:	409a      	lsls	r2, r3
 8006fac:	0013      	movs	r3, r2
 8006fae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006fb0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	b00e      	add	sp, #56	; 0x38
 8006fba:	bdb0      	pop	{r4, r5, r7, pc}
 8006fbc:	40021000 	.word	0x40021000
 8006fc0:	003d0900 	.word	0x003d0900
 8006fc4:	00f42400 	.word	0x00f42400
 8006fc8:	007a1200 	.word	0x007a1200
 8006fcc:	0800c54c 	.word	0x0800c54c

08006fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fd4:	4b02      	ldr	r3, [pc, #8]	; (8006fe0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
}
 8006fd8:	0018      	movs	r0, r3
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	46c0      	nop			; (mov r8, r8)
 8006fe0:	20000000 	.word	0x20000000

08006fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006fe8:	f7ff fff2 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8006fec:	0001      	movs	r1, r0
 8006fee:	4b06      	ldr	r3, [pc, #24]	; (8007008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	0a1b      	lsrs	r3, r3, #8
 8006ff4:	2207      	movs	r2, #7
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	4a04      	ldr	r2, [pc, #16]	; (800700c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ffa:	5cd3      	ldrb	r3, [r2, r3]
 8006ffc:	40d9      	lsrs	r1, r3
 8006ffe:	000b      	movs	r3, r1
}
 8007000:	0018      	movs	r0, r3
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	40021000 	.word	0x40021000
 800700c:	0800c544 	.word	0x0800c544

08007010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007014:	f7ff ffdc 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8007018:	0001      	movs	r1, r0
 800701a:	4b06      	ldr	r3, [pc, #24]	; (8007034 <HAL_RCC_GetPCLK2Freq+0x24>)
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	0adb      	lsrs	r3, r3, #11
 8007020:	2207      	movs	r2, #7
 8007022:	4013      	ands	r3, r2
 8007024:	4a04      	ldr	r2, [pc, #16]	; (8007038 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007026:	5cd3      	ldrb	r3, [r2, r3]
 8007028:	40d9      	lsrs	r1, r3
 800702a:	000b      	movs	r3, r1
}
 800702c:	0018      	movs	r0, r3
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	46c0      	nop			; (mov r8, r8)
 8007034:	40021000 	.word	0x40021000
 8007038:	0800c544 	.word	0x0800c544

0800703c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8007044:	2017      	movs	r0, #23
 8007046:	183b      	adds	r3, r7, r0
 8007048:	2200      	movs	r2, #0
 800704a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2220      	movs	r2, #32
 8007052:	4013      	ands	r3, r2
 8007054:	d100      	bne.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8007056:	e0c2      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007058:	4b98      	ldr	r3, [pc, #608]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800705a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800705c:	2380      	movs	r3, #128	; 0x80
 800705e:	055b      	lsls	r3, r3, #21
 8007060:	4013      	ands	r3, r2
 8007062:	d109      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007064:	4b95      	ldr	r3, [pc, #596]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007068:	4b94      	ldr	r3, [pc, #592]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800706a:	2180      	movs	r1, #128	; 0x80
 800706c:	0549      	lsls	r1, r1, #21
 800706e:	430a      	orrs	r2, r1
 8007070:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007072:	183b      	adds	r3, r7, r0
 8007074:	2201      	movs	r2, #1
 8007076:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007078:	4b91      	ldr	r3, [pc, #580]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	2380      	movs	r3, #128	; 0x80
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	4013      	ands	r3, r2
 8007082:	d11a      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007084:	4b8e      	ldr	r3, [pc, #568]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	4b8d      	ldr	r3, [pc, #564]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800708a:	2180      	movs	r1, #128	; 0x80
 800708c:	0049      	lsls	r1, r1, #1
 800708e:	430a      	orrs	r2, r1
 8007090:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007092:	f7fd fde1 	bl	8004c58 <HAL_GetTick>
 8007096:	0003      	movs	r3, r0
 8007098:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800709a:	e008      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800709c:	f7fd fddc 	bl	8004c58 <HAL_GetTick>
 80070a0:	0002      	movs	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b64      	cmp	r3, #100	; 0x64
 80070a8:	d901      	bls.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e102      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070ae:	4b84      	ldr	r3, [pc, #528]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	2380      	movs	r3, #128	; 0x80
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	4013      	ands	r3, r2
 80070b8:	d0f0      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80070ba:	4b80      	ldr	r3, [pc, #512]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	23c0      	movs	r3, #192	; 0xc0
 80070c0:	039b      	lsls	r3, r3, #14
 80070c2:	4013      	ands	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	23c0      	movs	r3, #192	; 0xc0
 80070cc:	039b      	lsls	r3, r3, #14
 80070ce:	4013      	ands	r3, r2
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d013      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	23c0      	movs	r3, #192	; 0xc0
 80070dc:	029b      	lsls	r3, r3, #10
 80070de:	401a      	ands	r2, r3
 80070e0:	23c0      	movs	r3, #192	; 0xc0
 80070e2:	029b      	lsls	r3, r3, #10
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d10a      	bne.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070e8:	4b74      	ldr	r3, [pc, #464]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	2380      	movs	r3, #128	; 0x80
 80070ee:	029b      	lsls	r3, r3, #10
 80070f0:	401a      	ands	r2, r3
 80070f2:	2380      	movs	r3, #128	; 0x80
 80070f4:	029b      	lsls	r3, r3, #10
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d101      	bne.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e0da      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80070fe:	4b6f      	ldr	r3, [pc, #444]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007100:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007102:	23c0      	movs	r3, #192	; 0xc0
 8007104:	029b      	lsls	r3, r3, #10
 8007106:	4013      	ands	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d03b      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	23c0      	movs	r3, #192	; 0xc0
 8007116:	029b      	lsls	r3, r3, #10
 8007118:	4013      	ands	r3, r2
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	429a      	cmp	r2, r3
 800711e:	d033      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2220      	movs	r2, #32
 8007126:	4013      	ands	r3, r2
 8007128:	d02e      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800712a:	4b64      	ldr	r3, [pc, #400]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800712c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712e:	4a65      	ldr	r2, [pc, #404]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007130:	4013      	ands	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007134:	4b61      	ldr	r3, [pc, #388]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007138:	4b60      	ldr	r3, [pc, #384]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800713a:	2180      	movs	r1, #128	; 0x80
 800713c:	0309      	lsls	r1, r1, #12
 800713e:	430a      	orrs	r2, r1
 8007140:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007142:	4b5e      	ldr	r3, [pc, #376]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007144:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007146:	4b5d      	ldr	r3, [pc, #372]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007148:	495f      	ldr	r1, [pc, #380]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800714a:	400a      	ands	r2, r1
 800714c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800714e:	4b5b      	ldr	r3, [pc, #364]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	2380      	movs	r3, #128	; 0x80
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	4013      	ands	r3, r2
 800715c:	d014      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800715e:	f7fd fd7b 	bl	8004c58 <HAL_GetTick>
 8007162:	0003      	movs	r3, r0
 8007164:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007166:	e009      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007168:	f7fd fd76 	bl	8004c58 <HAL_GetTick>
 800716c:	0002      	movs	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	4a56      	ldr	r2, [pc, #344]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d901      	bls.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e09b      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800717c:	4b4f      	ldr	r3, [pc, #316]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800717e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007180:	2380      	movs	r3, #128	; 0x80
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4013      	ands	r3, r2
 8007186:	d0ef      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	23c0      	movs	r3, #192	; 0xc0
 800718e:	029b      	lsls	r3, r3, #10
 8007190:	401a      	ands	r2, r3
 8007192:	23c0      	movs	r3, #192	; 0xc0
 8007194:	029b      	lsls	r3, r3, #10
 8007196:	429a      	cmp	r2, r3
 8007198:	d10c      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800719a:	4b48      	ldr	r3, [pc, #288]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a4c      	ldr	r2, [pc, #304]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	0019      	movs	r1, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	23c0      	movs	r3, #192	; 0xc0
 80071aa:	039b      	lsls	r3, r3, #14
 80071ac:	401a      	ands	r2, r3
 80071ae:	4b43      	ldr	r3, [pc, #268]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071b0:	430a      	orrs	r2, r1
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	4b41      	ldr	r3, [pc, #260]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071b6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	23c0      	movs	r3, #192	; 0xc0
 80071be:	029b      	lsls	r3, r3, #10
 80071c0:	401a      	ands	r2, r3
 80071c2:	4b3e      	ldr	r3, [pc, #248]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071c4:	430a      	orrs	r2, r1
 80071c6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80071c8:	2317      	movs	r3, #23
 80071ca:	18fb      	adds	r3, r7, r3
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d105      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071d2:	4b3a      	ldr	r3, [pc, #232]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071d6:	4b39      	ldr	r3, [pc, #228]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071d8:	493e      	ldr	r1, [pc, #248]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80071da:	400a      	ands	r2, r1
 80071dc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2201      	movs	r2, #1
 80071e4:	4013      	ands	r3, r2
 80071e6:	d009      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071e8:	4b34      	ldr	r3, [pc, #208]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ec:	2203      	movs	r2, #3
 80071ee:	4393      	bics	r3, r2
 80071f0:	0019      	movs	r1, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689a      	ldr	r2, [r3, #8]
 80071f6:	4b31      	ldr	r3, [pc, #196]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071f8:	430a      	orrs	r2, r1
 80071fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2202      	movs	r2, #2
 8007202:	4013      	ands	r3, r2
 8007204:	d009      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007206:	4b2d      	ldr	r3, [pc, #180]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720a:	220c      	movs	r2, #12
 800720c:	4393      	bics	r3, r2
 800720e:	0019      	movs	r1, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68da      	ldr	r2, [r3, #12]
 8007214:	4b29      	ldr	r3, [pc, #164]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007216:	430a      	orrs	r2, r1
 8007218:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2204      	movs	r2, #4
 8007220:	4013      	ands	r3, r2
 8007222:	d009      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007224:	4b25      	ldr	r3, [pc, #148]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007228:	4a2b      	ldr	r2, [pc, #172]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800722a:	4013      	ands	r3, r2
 800722c:	0019      	movs	r1, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691a      	ldr	r2, [r3, #16]
 8007232:	4b22      	ldr	r3, [pc, #136]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007234:	430a      	orrs	r2, r1
 8007236:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2208      	movs	r2, #8
 800723e:	4013      	ands	r3, r2
 8007240:	d009      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007242:	4b1e      	ldr	r3, [pc, #120]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007246:	4a25      	ldr	r2, [pc, #148]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007248:	4013      	ands	r3, r2
 800724a:	0019      	movs	r1, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	695a      	ldr	r2, [r3, #20]
 8007250:	4b1a      	ldr	r3, [pc, #104]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007252:	430a      	orrs	r2, r1
 8007254:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	2380      	movs	r3, #128	; 0x80
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	4013      	ands	r3, r2
 8007260:	d009      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007262:	4b16      	ldr	r3, [pc, #88]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007266:	4a17      	ldr	r2, [pc, #92]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007268:	4013      	ands	r3, r2
 800726a:	0019      	movs	r1, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	699a      	ldr	r2, [r3, #24]
 8007270:	4b12      	ldr	r3, [pc, #72]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007272:	430a      	orrs	r2, r1
 8007274:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2240      	movs	r2, #64	; 0x40
 800727c:	4013      	ands	r3, r2
 800727e:	d009      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007280:	4b0e      	ldr	r3, [pc, #56]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007284:	4a16      	ldr	r2, [pc, #88]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007286:	4013      	ands	r3, r2
 8007288:	0019      	movs	r1, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1a      	ldr	r2, [r3, #32]
 800728e:	4b0b      	ldr	r3, [pc, #44]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007290:	430a      	orrs	r2, r1
 8007292:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2280      	movs	r2, #128	; 0x80
 800729a:	4013      	ands	r3, r2
 800729c:	d009      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800729e:	4b07      	ldr	r3, [pc, #28]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a2:	4a10      	ldr	r2, [pc, #64]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	0019      	movs	r1, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	69da      	ldr	r2, [r3, #28]
 80072ac:	4b03      	ldr	r3, [pc, #12]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072ae:	430a      	orrs	r2, r1
 80072b0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	0018      	movs	r0, r3
 80072b6:	46bd      	mov	sp, r7
 80072b8:	b006      	add	sp, #24
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	40021000 	.word	0x40021000
 80072c0:	40007000 	.word	0x40007000
 80072c4:	fffcffff 	.word	0xfffcffff
 80072c8:	fff7ffff 	.word	0xfff7ffff
 80072cc:	00001388 	.word	0x00001388
 80072d0:	ffcfffff 	.word	0xffcfffff
 80072d4:	efffffff 	.word	0xefffffff
 80072d8:	fffff3ff 	.word	0xfffff3ff
 80072dc:	ffffcfff 	.word	0xffffcfff
 80072e0:	fbffffff 	.word	0xfbffffff
 80072e4:	fff3ffff 	.word	0xfff3ffff

080072e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e032      	b.n	8007360 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2239      	movs	r2, #57	; 0x39
 80072fe:	5c9b      	ldrb	r3, [r3, r2]
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d107      	bne.n	8007316 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2238      	movs	r2, #56	; 0x38
 800730a:	2100      	movs	r1, #0
 800730c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	0018      	movs	r0, r3
 8007312:	f7fd faa9 	bl	8004868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2239      	movs	r2, #57	; 0x39
 800731a:	2102      	movs	r1, #2
 800731c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3304      	adds	r3, #4
 8007326:	0019      	movs	r1, r3
 8007328:	0010      	movs	r0, r2
 800732a:	f000 f93b 	bl	80075a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	223e      	movs	r2, #62	; 0x3e
 8007332:	2101      	movs	r1, #1
 8007334:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	223a      	movs	r2, #58	; 0x3a
 800733a:	2101      	movs	r1, #1
 800733c:	5499      	strb	r1, [r3, r2]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	223b      	movs	r2, #59	; 0x3b
 8007342:	2101      	movs	r1, #1
 8007344:	5499      	strb	r1, [r3, r2]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	223c      	movs	r2, #60	; 0x3c
 800734a:	2101      	movs	r1, #1
 800734c:	5499      	strb	r1, [r3, r2]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	223d      	movs	r2, #61	; 0x3d
 8007352:	2101      	movs	r1, #1
 8007354:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2239      	movs	r2, #57	; 0x39
 800735a:	2101      	movs	r1, #1
 800735c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	0018      	movs	r0, r3
 8007362:	46bd      	mov	sp, r7
 8007364:	b002      	add	sp, #8
 8007366:	bd80      	pop	{r7, pc}

08007368 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2239      	movs	r2, #57	; 0x39
 8007374:	5c9b      	ldrb	r3, [r3, r2]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b01      	cmp	r3, #1
 800737a:	d001      	beq.n	8007380 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e033      	b.n	80073e8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2239      	movs	r2, #57	; 0x39
 8007384:	2102      	movs	r1, #2
 8007386:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	2380      	movs	r3, #128	; 0x80
 800738e:	05db      	lsls	r3, r3, #23
 8007390:	429a      	cmp	r2, r3
 8007392:	d00e      	beq.n	80073b2 <HAL_TIM_Base_Start+0x4a>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a15      	ldr	r2, [pc, #84]	; (80073f0 <HAL_TIM_Base_Start+0x88>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d009      	beq.n	80073b2 <HAL_TIM_Base_Start+0x4a>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a14      	ldr	r2, [pc, #80]	; (80073f4 <HAL_TIM_Base_Start+0x8c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d004      	beq.n	80073b2 <HAL_TIM_Base_Start+0x4a>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a12      	ldr	r2, [pc, #72]	; (80073f8 <HAL_TIM_Base_Start+0x90>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d111      	bne.n	80073d6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	2207      	movs	r2, #7
 80073ba:	4013      	ands	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b06      	cmp	r3, #6
 80073c2:	d010      	beq.n	80073e6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2101      	movs	r1, #1
 80073d0:	430a      	orrs	r2, r1
 80073d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d4:	e007      	b.n	80073e6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2101      	movs	r1, #1
 80073e2:	430a      	orrs	r2, r1
 80073e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	0018      	movs	r0, r3
 80073ea:	46bd      	mov	sp, r7
 80073ec:	b004      	add	sp, #16
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	40000400 	.word	0x40000400
 80073f4:	40010800 	.word	0x40010800
 80073f8:	40011400 	.word	0x40011400

080073fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007406:	230f      	movs	r3, #15
 8007408:	18fb      	adds	r3, r7, r3
 800740a:	2200      	movs	r2, #0
 800740c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2238      	movs	r2, #56	; 0x38
 8007412:	5c9b      	ldrb	r3, [r3, r2]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d101      	bne.n	800741c <HAL_TIM_ConfigClockSource+0x20>
 8007418:	2302      	movs	r3, #2
 800741a:	e0bc      	b.n	8007596 <HAL_TIM_ConfigClockSource+0x19a>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2238      	movs	r2, #56	; 0x38
 8007420:	2101      	movs	r1, #1
 8007422:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2239      	movs	r2, #57	; 0x39
 8007428:	2102      	movs	r1, #2
 800742a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2277      	movs	r2, #119	; 0x77
 8007438:	4393      	bics	r3, r2
 800743a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	4a58      	ldr	r2, [pc, #352]	; (80075a0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007440:	4013      	ands	r3, r2
 8007442:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2280      	movs	r2, #128	; 0x80
 8007452:	0192      	lsls	r2, r2, #6
 8007454:	4293      	cmp	r3, r2
 8007456:	d040      	beq.n	80074da <HAL_TIM_ConfigClockSource+0xde>
 8007458:	2280      	movs	r2, #128	; 0x80
 800745a:	0192      	lsls	r2, r2, #6
 800745c:	4293      	cmp	r3, r2
 800745e:	d900      	bls.n	8007462 <HAL_TIM_ConfigClockSource+0x66>
 8007460:	e088      	b.n	8007574 <HAL_TIM_ConfigClockSource+0x178>
 8007462:	2280      	movs	r2, #128	; 0x80
 8007464:	0152      	lsls	r2, r2, #5
 8007466:	4293      	cmp	r3, r2
 8007468:	d100      	bne.n	800746c <HAL_TIM_ConfigClockSource+0x70>
 800746a:	e088      	b.n	800757e <HAL_TIM_ConfigClockSource+0x182>
 800746c:	2280      	movs	r2, #128	; 0x80
 800746e:	0152      	lsls	r2, r2, #5
 8007470:	4293      	cmp	r3, r2
 8007472:	d900      	bls.n	8007476 <HAL_TIM_ConfigClockSource+0x7a>
 8007474:	e07e      	b.n	8007574 <HAL_TIM_ConfigClockSource+0x178>
 8007476:	2b70      	cmp	r3, #112	; 0x70
 8007478:	d018      	beq.n	80074ac <HAL_TIM_ConfigClockSource+0xb0>
 800747a:	d900      	bls.n	800747e <HAL_TIM_ConfigClockSource+0x82>
 800747c:	e07a      	b.n	8007574 <HAL_TIM_ConfigClockSource+0x178>
 800747e:	2b60      	cmp	r3, #96	; 0x60
 8007480:	d04f      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0x126>
 8007482:	d900      	bls.n	8007486 <HAL_TIM_ConfigClockSource+0x8a>
 8007484:	e076      	b.n	8007574 <HAL_TIM_ConfigClockSource+0x178>
 8007486:	2b50      	cmp	r3, #80	; 0x50
 8007488:	d03b      	beq.n	8007502 <HAL_TIM_ConfigClockSource+0x106>
 800748a:	d900      	bls.n	800748e <HAL_TIM_ConfigClockSource+0x92>
 800748c:	e072      	b.n	8007574 <HAL_TIM_ConfigClockSource+0x178>
 800748e:	2b40      	cmp	r3, #64	; 0x40
 8007490:	d057      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0x146>
 8007492:	d900      	bls.n	8007496 <HAL_TIM_ConfigClockSource+0x9a>
 8007494:	e06e      	b.n	8007574 <HAL_TIM_ConfigClockSource+0x178>
 8007496:	2b30      	cmp	r3, #48	; 0x30
 8007498:	d063      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x166>
 800749a:	d86b      	bhi.n	8007574 <HAL_TIM_ConfigClockSource+0x178>
 800749c:	2b20      	cmp	r3, #32
 800749e:	d060      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x166>
 80074a0:	d868      	bhi.n	8007574 <HAL_TIM_ConfigClockSource+0x178>
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d05d      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x166>
 80074a6:	2b10      	cmp	r3, #16
 80074a8:	d05b      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x166>
 80074aa:	e063      	b.n	8007574 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6818      	ldr	r0, [r3, #0]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	6899      	ldr	r1, [r3, #8]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f000 f94a 	bl	8007754 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2277      	movs	r2, #119	; 0x77
 80074cc:	4313      	orrs	r3, r2
 80074ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	609a      	str	r2, [r3, #8]
      break;
 80074d8:	e052      	b.n	8007580 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6818      	ldr	r0, [r3, #0]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	6899      	ldr	r1, [r3, #8]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f000 f933 	bl	8007754 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2180      	movs	r1, #128	; 0x80
 80074fa:	01c9      	lsls	r1, r1, #7
 80074fc:	430a      	orrs	r2, r1
 80074fe:	609a      	str	r2, [r3, #8]
      break;
 8007500:	e03e      	b.n	8007580 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6818      	ldr	r0, [r3, #0]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	6859      	ldr	r1, [r3, #4]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	001a      	movs	r2, r3
 8007510:	f000 f8a6 	bl	8007660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2150      	movs	r1, #80	; 0x50
 800751a:	0018      	movs	r0, r3
 800751c:	f000 f900 	bl	8007720 <TIM_ITRx_SetConfig>
      break;
 8007520:	e02e      	b.n	8007580 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6818      	ldr	r0, [r3, #0]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	6859      	ldr	r1, [r3, #4]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	001a      	movs	r2, r3
 8007530:	f000 f8c4 	bl	80076bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2160      	movs	r1, #96	; 0x60
 800753a:	0018      	movs	r0, r3
 800753c:	f000 f8f0 	bl	8007720 <TIM_ITRx_SetConfig>
      break;
 8007540:	e01e      	b.n	8007580 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6818      	ldr	r0, [r3, #0]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	6859      	ldr	r1, [r3, #4]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	001a      	movs	r2, r3
 8007550:	f000 f886 	bl	8007660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2140      	movs	r1, #64	; 0x40
 800755a:	0018      	movs	r0, r3
 800755c:	f000 f8e0 	bl	8007720 <TIM_ITRx_SetConfig>
      break;
 8007560:	e00e      	b.n	8007580 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	0019      	movs	r1, r3
 800756c:	0010      	movs	r0, r2
 800756e:	f000 f8d7 	bl	8007720 <TIM_ITRx_SetConfig>
      break;
 8007572:	e005      	b.n	8007580 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007574:	230f      	movs	r3, #15
 8007576:	18fb      	adds	r3, r7, r3
 8007578:	2201      	movs	r2, #1
 800757a:	701a      	strb	r2, [r3, #0]
      break;
 800757c:	e000      	b.n	8007580 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800757e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2239      	movs	r2, #57	; 0x39
 8007584:	2101      	movs	r1, #1
 8007586:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2238      	movs	r2, #56	; 0x38
 800758c:	2100      	movs	r1, #0
 800758e:	5499      	strb	r1, [r3, r2]

  return status;
 8007590:	230f      	movs	r3, #15
 8007592:	18fb      	adds	r3, r7, r3
 8007594:	781b      	ldrb	r3, [r3, #0]
}
 8007596:	0018      	movs	r0, r3
 8007598:	46bd      	mov	sp, r7
 800759a:	b004      	add	sp, #16
 800759c:	bd80      	pop	{r7, pc}
 800759e:	46c0      	nop			; (mov r8, r8)
 80075a0:	ffff00ff 	.word	0xffff00ff

080075a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	2380      	movs	r3, #128	; 0x80
 80075b8:	05db      	lsls	r3, r3, #23
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d00b      	beq.n	80075d6 <TIM_Base_SetConfig+0x32>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a23      	ldr	r2, [pc, #140]	; (8007650 <TIM_Base_SetConfig+0xac>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d007      	beq.n	80075d6 <TIM_Base_SetConfig+0x32>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a22      	ldr	r2, [pc, #136]	; (8007654 <TIM_Base_SetConfig+0xb0>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d003      	beq.n	80075d6 <TIM_Base_SetConfig+0x32>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a21      	ldr	r2, [pc, #132]	; (8007658 <TIM_Base_SetConfig+0xb4>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d108      	bne.n	80075e8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2270      	movs	r2, #112	; 0x70
 80075da:	4393      	bics	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	2380      	movs	r3, #128	; 0x80
 80075ec:	05db      	lsls	r3, r3, #23
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d00b      	beq.n	800760a <TIM_Base_SetConfig+0x66>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a16      	ldr	r2, [pc, #88]	; (8007650 <TIM_Base_SetConfig+0xac>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d007      	beq.n	800760a <TIM_Base_SetConfig+0x66>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a15      	ldr	r2, [pc, #84]	; (8007654 <TIM_Base_SetConfig+0xb0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d003      	beq.n	800760a <TIM_Base_SetConfig+0x66>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a14      	ldr	r2, [pc, #80]	; (8007658 <TIM_Base_SetConfig+0xb4>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d108      	bne.n	800761c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4a13      	ldr	r2, [pc, #76]	; (800765c <TIM_Base_SetConfig+0xb8>)
 800760e:	4013      	ands	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	4313      	orrs	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2280      	movs	r2, #128	; 0x80
 8007620:	4393      	bics	r3, r2
 8007622:	001a      	movs	r2, r3
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	615a      	str	r2, [r3, #20]
}
 8007648:	46c0      	nop			; (mov r8, r8)
 800764a:	46bd      	mov	sp, r7
 800764c:	b004      	add	sp, #16
 800764e:	bd80      	pop	{r7, pc}
 8007650:	40000400 	.word	0x40000400
 8007654:	40010800 	.word	0x40010800
 8007658:	40011400 	.word	0x40011400
 800765c:	fffffcff 	.word	0xfffffcff

08007660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	2201      	movs	r2, #1
 8007678:	4393      	bics	r3, r2
 800767a:	001a      	movs	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	22f0      	movs	r2, #240	; 0xf0
 800768a:	4393      	bics	r3, r2
 800768c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	011b      	lsls	r3, r3, #4
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4313      	orrs	r3, r2
 8007696:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	220a      	movs	r2, #10
 800769c:	4393      	bics	r3, r2
 800769e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	621a      	str	r2, [r3, #32]
}
 80076b4:	46c0      	nop			; (mov r8, r8)
 80076b6:	46bd      	mov	sp, r7
 80076b8:	b006      	add	sp, #24
 80076ba:	bd80      	pop	{r7, pc}

080076bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6a1b      	ldr	r3, [r3, #32]
 80076cc:	2210      	movs	r2, #16
 80076ce:	4393      	bics	r3, r2
 80076d0:	001a      	movs	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	4a0d      	ldr	r2, [pc, #52]	; (800771c <TIM_TI2_ConfigInputStage+0x60>)
 80076e6:	4013      	ands	r3, r2
 80076e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	031b      	lsls	r3, r3, #12
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	22a0      	movs	r2, #160	; 0xa0
 80076f8:	4393      	bics	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	4313      	orrs	r3, r2
 8007704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	621a      	str	r2, [r3, #32]
}
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	46bd      	mov	sp, r7
 8007716:	b006      	add	sp, #24
 8007718:	bd80      	pop	{r7, pc}
 800771a:	46c0      	nop			; (mov r8, r8)
 800771c:	ffff0fff 	.word	0xffff0fff

08007720 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2270      	movs	r2, #112	; 0x70
 8007734:	4393      	bics	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4313      	orrs	r3, r2
 800773e:	2207      	movs	r2, #7
 8007740:	4313      	orrs	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	609a      	str	r2, [r3, #8]
}
 800774a:	46c0      	nop			; (mov r8, r8)
 800774c:	46bd      	mov	sp, r7
 800774e:	b004      	add	sp, #16
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	4a09      	ldr	r2, [pc, #36]	; (8007790 <TIM_ETR_SetConfig+0x3c>)
 800776c:	4013      	ands	r3, r2
 800776e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	021a      	lsls	r2, r3, #8
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	431a      	orrs	r2, r3
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4313      	orrs	r3, r2
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	4313      	orrs	r3, r2
 8007780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	609a      	str	r2, [r3, #8]
}
 8007788:	46c0      	nop			; (mov r8, r8)
 800778a:	46bd      	mov	sp, r7
 800778c:	b006      	add	sp, #24
 800778e:	bd80      	pop	{r7, pc}
 8007790:	ffff00ff 	.word	0xffff00ff

08007794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2238      	movs	r2, #56	; 0x38
 80077a2:	5c9b      	ldrb	r3, [r3, r2]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d101      	bne.n	80077ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077a8:	2302      	movs	r3, #2
 80077aa:	e047      	b.n	800783c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2238      	movs	r2, #56	; 0x38
 80077b0:	2101      	movs	r1, #1
 80077b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2239      	movs	r2, #57	; 0x39
 80077b8:	2102      	movs	r1, #2
 80077ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2270      	movs	r2, #112	; 0x70
 80077d0:	4393      	bics	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	4313      	orrs	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	2380      	movs	r3, #128	; 0x80
 80077ec:	05db      	lsls	r3, r3, #23
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d00e      	beq.n	8007810 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a13      	ldr	r2, [pc, #76]	; (8007844 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d009      	beq.n	8007810 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a11      	ldr	r2, [pc, #68]	; (8007848 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d004      	beq.n	8007810 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a10      	ldr	r2, [pc, #64]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d10c      	bne.n	800782a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2280      	movs	r2, #128	; 0x80
 8007814:	4393      	bics	r3, r2
 8007816:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	4313      	orrs	r3, r2
 8007820:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2239      	movs	r2, #57	; 0x39
 800782e:	2101      	movs	r1, #1
 8007830:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2238      	movs	r2, #56	; 0x38
 8007836:	2100      	movs	r1, #0
 8007838:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	0018      	movs	r0, r3
 800783e:	46bd      	mov	sp, r7
 8007840:	b004      	add	sp, #16
 8007842:	bd80      	pop	{r7, pc}
 8007844:	40000400 	.word	0x40000400
 8007848:	40010800 	.word	0x40010800
 800784c:	40011400 	.word	0x40011400

08007850 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e044      	b.n	80078ec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007866:	2b00      	cmp	r3, #0
 8007868:	d107      	bne.n	800787a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2274      	movs	r2, #116	; 0x74
 800786e:	2100      	movs	r1, #0
 8007870:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	0018      	movs	r0, r3
 8007876:	f7fd f80d 	bl	8004894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2224      	movs	r2, #36	; 0x24
 800787e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2101      	movs	r1, #1
 800788c:	438a      	bics	r2, r1
 800788e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	0018      	movs	r0, r3
 8007894:	f000 f9c6 	bl	8007c24 <UART_SetConfig>
 8007898:	0003      	movs	r3, r0
 800789a:	2b01      	cmp	r3, #1
 800789c:	d101      	bne.n	80078a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e024      	b.n	80078ec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d003      	beq.n	80078b2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	0018      	movs	r0, r3
 80078ae:	f000 fc77 	bl	80081a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	490d      	ldr	r1, [pc, #52]	; (80078f4 <HAL_UART_Init+0xa4>)
 80078be:	400a      	ands	r2, r1
 80078c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	212a      	movs	r1, #42	; 0x2a
 80078ce:	438a      	bics	r2, r1
 80078d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2101      	movs	r1, #1
 80078de:	430a      	orrs	r2, r1
 80078e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	0018      	movs	r0, r3
 80078e6:	f000 fd0f 	bl	8008308 <UART_CheckIdleState>
 80078ea:	0003      	movs	r3, r0
}
 80078ec:	0018      	movs	r0, r3
 80078ee:	46bd      	mov	sp, r7
 80078f0:	b002      	add	sp, #8
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	ffffb7ff 	.word	0xffffb7ff

080078f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b08a      	sub	sp, #40	; 0x28
 80078fc:	af02      	add	r7, sp, #8
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	603b      	str	r3, [r7, #0]
 8007904:	1dbb      	adds	r3, r7, #6
 8007906:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800790c:	2b20      	cmp	r3, #32
 800790e:	d000      	beq.n	8007912 <HAL_UART_Transmit+0x1a>
 8007910:	e095      	b.n	8007a3e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <HAL_UART_Transmit+0x28>
 8007918:	1dbb      	adds	r3, r7, #6
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e08d      	b.n	8007a40 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	2380      	movs	r3, #128	; 0x80
 800792a:	015b      	lsls	r3, r3, #5
 800792c:	429a      	cmp	r2, r3
 800792e:	d109      	bne.n	8007944 <HAL_UART_Transmit+0x4c>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d105      	bne.n	8007944 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2201      	movs	r2, #1
 800793c:	4013      	ands	r3, r2
 800793e:	d001      	beq.n	8007944 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e07d      	b.n	8007a40 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2274      	movs	r2, #116	; 0x74
 8007948:	5c9b      	ldrb	r3, [r3, r2]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d101      	bne.n	8007952 <HAL_UART_Transmit+0x5a>
 800794e:	2302      	movs	r3, #2
 8007950:	e076      	b.n	8007a40 <HAL_UART_Transmit+0x148>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2274      	movs	r2, #116	; 0x74
 8007956:	2101      	movs	r1, #1
 8007958:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2280      	movs	r2, #128	; 0x80
 800795e:	2100      	movs	r1, #0
 8007960:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2221      	movs	r2, #33	; 0x21
 8007966:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007968:	f7fd f976 	bl	8004c58 <HAL_GetTick>
 800796c:	0003      	movs	r3, r0
 800796e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	1dba      	adds	r2, r7, #6
 8007974:	2150      	movs	r1, #80	; 0x50
 8007976:	8812      	ldrh	r2, [r2, #0]
 8007978:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	1dba      	adds	r2, r7, #6
 800797e:	2152      	movs	r1, #82	; 0x52
 8007980:	8812      	ldrh	r2, [r2, #0]
 8007982:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	2380      	movs	r3, #128	; 0x80
 800798a:	015b      	lsls	r3, r3, #5
 800798c:	429a      	cmp	r2, r3
 800798e:	d108      	bne.n	80079a2 <HAL_UART_Transmit+0xaa>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d104      	bne.n	80079a2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8007998:	2300      	movs	r3, #0
 800799a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	61bb      	str	r3, [r7, #24]
 80079a0:	e003      	b.n	80079aa <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2274      	movs	r2, #116	; 0x74
 80079ae:	2100      	movs	r1, #0
 80079b0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80079b2:	e02c      	b.n	8007a0e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	0013      	movs	r3, r2
 80079be:	2200      	movs	r2, #0
 80079c0:	2180      	movs	r1, #128	; 0x80
 80079c2:	f000 fce9 	bl	8008398 <UART_WaitOnFlagUntilTimeout>
 80079c6:	1e03      	subs	r3, r0, #0
 80079c8:	d001      	beq.n	80079ce <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e038      	b.n	8007a40 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10b      	bne.n	80079ec <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	881b      	ldrh	r3, [r3, #0]
 80079d8:	001a      	movs	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	05d2      	lsls	r2, r2, #23
 80079e0:	0dd2      	lsrs	r2, r2, #23
 80079e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	3302      	adds	r3, #2
 80079e8:	61bb      	str	r3, [r7, #24]
 80079ea:	e007      	b.n	80079fc <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	781a      	ldrb	r2, [r3, #0]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	3301      	adds	r3, #1
 80079fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2252      	movs	r2, #82	; 0x52
 8007a00:	5a9b      	ldrh	r3, [r3, r2]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	3b01      	subs	r3, #1
 8007a06:	b299      	uxth	r1, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2252      	movs	r2, #82	; 0x52
 8007a0c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2252      	movs	r2, #82	; 0x52
 8007a12:	5a9b      	ldrh	r3, [r3, r2]
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1cc      	bne.n	80079b4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	0013      	movs	r3, r2
 8007a24:	2200      	movs	r2, #0
 8007a26:	2140      	movs	r1, #64	; 0x40
 8007a28:	f000 fcb6 	bl	8008398 <UART_WaitOnFlagUntilTimeout>
 8007a2c:	1e03      	subs	r3, r0, #0
 8007a2e:	d001      	beq.n	8007a34 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e005      	b.n	8007a40 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2220      	movs	r2, #32
 8007a38:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	e000      	b.n	8007a40 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8007a3e:	2302      	movs	r3, #2
  }
}
 8007a40:	0018      	movs	r0, r3
 8007a42:	46bd      	mov	sp, r7
 8007a44:	b008      	add	sp, #32
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08a      	sub	sp, #40	; 0x28
 8007a4c:	af02      	add	r7, sp, #8
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	603b      	str	r3, [r7, #0]
 8007a54:	1dbb      	adds	r3, r7, #6
 8007a56:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a5c:	2b20      	cmp	r3, #32
 8007a5e:	d000      	beq.n	8007a62 <HAL_UART_Receive+0x1a>
 8007a60:	e0d9      	b.n	8007c16 <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <HAL_UART_Receive+0x28>
 8007a68:	1dbb      	adds	r3, r7, #6
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e0d1      	b.n	8007c18 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	2380      	movs	r3, #128	; 0x80
 8007a7a:	015b      	lsls	r3, r3, #5
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d109      	bne.n	8007a94 <HAL_UART_Receive+0x4c>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d105      	bne.n	8007a94 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	d001      	beq.n	8007a94 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e0c1      	b.n	8007c18 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2274      	movs	r2, #116	; 0x74
 8007a98:	5c9b      	ldrb	r3, [r3, r2]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d101      	bne.n	8007aa2 <HAL_UART_Receive+0x5a>
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	e0ba      	b.n	8007c18 <HAL_UART_Receive+0x1d0>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2274      	movs	r2, #116	; 0x74
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2280      	movs	r2, #128	; 0x80
 8007aae:	2100      	movs	r1, #0
 8007ab0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2222      	movs	r2, #34	; 0x22
 8007ab6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007abe:	f7fd f8cb 	bl	8004c58 <HAL_GetTick>
 8007ac2:	0003      	movs	r3, r0
 8007ac4:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	1dba      	adds	r2, r7, #6
 8007aca:	2158      	movs	r1, #88	; 0x58
 8007acc:	8812      	ldrh	r2, [r2, #0]
 8007ace:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	1dba      	adds	r2, r7, #6
 8007ad4:	215a      	movs	r1, #90	; 0x5a
 8007ad6:	8812      	ldrh	r2, [r2, #0]
 8007ad8:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	2380      	movs	r3, #128	; 0x80
 8007ae0:	015b      	lsls	r3, r3, #5
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d10d      	bne.n	8007b02 <HAL_UART_Receive+0xba>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d104      	bne.n	8007af8 <HAL_UART_Receive+0xb0>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	225c      	movs	r2, #92	; 0x5c
 8007af2:	494b      	ldr	r1, [pc, #300]	; (8007c20 <HAL_UART_Receive+0x1d8>)
 8007af4:	5299      	strh	r1, [r3, r2]
 8007af6:	e02e      	b.n	8007b56 <HAL_UART_Receive+0x10e>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	225c      	movs	r2, #92	; 0x5c
 8007afc:	21ff      	movs	r1, #255	; 0xff
 8007afe:	5299      	strh	r1, [r3, r2]
 8007b00:	e029      	b.n	8007b56 <HAL_UART_Receive+0x10e>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10d      	bne.n	8007b26 <HAL_UART_Receive+0xde>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d104      	bne.n	8007b1c <HAL_UART_Receive+0xd4>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	225c      	movs	r2, #92	; 0x5c
 8007b16:	21ff      	movs	r1, #255	; 0xff
 8007b18:	5299      	strh	r1, [r3, r2]
 8007b1a:	e01c      	b.n	8007b56 <HAL_UART_Receive+0x10e>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	225c      	movs	r2, #92	; 0x5c
 8007b20:	217f      	movs	r1, #127	; 0x7f
 8007b22:	5299      	strh	r1, [r3, r2]
 8007b24:	e017      	b.n	8007b56 <HAL_UART_Receive+0x10e>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	689a      	ldr	r2, [r3, #8]
 8007b2a:	2380      	movs	r3, #128	; 0x80
 8007b2c:	055b      	lsls	r3, r3, #21
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d10d      	bne.n	8007b4e <HAL_UART_Receive+0x106>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d104      	bne.n	8007b44 <HAL_UART_Receive+0xfc>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	225c      	movs	r2, #92	; 0x5c
 8007b3e:	217f      	movs	r1, #127	; 0x7f
 8007b40:	5299      	strh	r1, [r3, r2]
 8007b42:	e008      	b.n	8007b56 <HAL_UART_Receive+0x10e>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	225c      	movs	r2, #92	; 0x5c
 8007b48:	213f      	movs	r1, #63	; 0x3f
 8007b4a:	5299      	strh	r1, [r3, r2]
 8007b4c:	e003      	b.n	8007b56 <HAL_UART_Receive+0x10e>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	225c      	movs	r2, #92	; 0x5c
 8007b52:	2100      	movs	r1, #0
 8007b54:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8007b56:	2312      	movs	r3, #18
 8007b58:	18fb      	adds	r3, r7, r3
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	215c      	movs	r1, #92	; 0x5c
 8007b5e:	5a52      	ldrh	r2, [r2, r1]
 8007b60:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	689a      	ldr	r2, [r3, #8]
 8007b66:	2380      	movs	r3, #128	; 0x80
 8007b68:	015b      	lsls	r3, r3, #5
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d108      	bne.n	8007b80 <HAL_UART_Receive+0x138>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d104      	bne.n	8007b80 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	61bb      	str	r3, [r7, #24]
 8007b7e:	e003      	b.n	8007b88 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b84:	2300      	movs	r3, #0
 8007b86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2274      	movs	r2, #116	; 0x74
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007b90:	e036      	b.n	8007c00 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	0013      	movs	r3, r2
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	2120      	movs	r1, #32
 8007ba0:	f000 fbfa 	bl	8008398 <UART_WaitOnFlagUntilTimeout>
 8007ba4:	1e03      	subs	r3, r0, #0
 8007ba6:	d001      	beq.n	8007bac <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e035      	b.n	8007c18 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10e      	bne.n	8007bd0 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2212      	movs	r2, #18
 8007bbc:	18ba      	adds	r2, r7, r2
 8007bbe:	8812      	ldrh	r2, [r2, #0]
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	3302      	adds	r3, #2
 8007bcc:	61bb      	str	r3, [r7, #24]
 8007bce:	e00e      	b.n	8007bee <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2212      	movs	r2, #18
 8007bda:	18ba      	adds	r2, r7, r2
 8007bdc:	8812      	ldrh	r2, [r2, #0]
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	4013      	ands	r3, r2
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	3301      	adds	r3, #1
 8007bec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	225a      	movs	r2, #90	; 0x5a
 8007bf2:	5a9b      	ldrh	r3, [r3, r2]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	b299      	uxth	r1, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	225a      	movs	r2, #90	; 0x5a
 8007bfe:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	225a      	movs	r2, #90	; 0x5a
 8007c04:	5a9b      	ldrh	r3, [r3, r2]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1c2      	bne.n	8007b92 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	e000      	b.n	8007c18 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8007c16:	2302      	movs	r3, #2
  }
}
 8007c18:	0018      	movs	r0, r3
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	b008      	add	sp, #32
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	000001ff 	.word	0x000001ff

08007c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c24:	b5b0      	push	{r4, r5, r7, lr}
 8007c26:	b08e      	sub	sp, #56	; 0x38
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c2c:	231a      	movs	r3, #26
 8007c2e:	2218      	movs	r2, #24
 8007c30:	4694      	mov	ip, r2
 8007c32:	44bc      	add	ip, r7
 8007c34:	4463      	add	r3, ip
 8007c36:	2200      	movs	r2, #0
 8007c38:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	431a      	orrs	r2, r3
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4ab0      	ldr	r2, [pc, #704]	; (8007f1c <UART_SetConfig+0x2f8>)
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	0019      	movs	r1, r3
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c64:	430a      	orrs	r2, r1
 8007c66:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	4aac      	ldr	r2, [pc, #688]	; (8007f20 <UART_SetConfig+0x2fc>)
 8007c70:	4013      	ands	r3, r2
 8007c72:	0019      	movs	r1, r3
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4aa6      	ldr	r2, [pc, #664]	; (8007f24 <UART_SetConfig+0x300>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d004      	beq.n	8007c9a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c96:	4313      	orrs	r3, r2
 8007c98:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	4aa1      	ldr	r2, [pc, #644]	; (8007f28 <UART_SetConfig+0x304>)
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	0019      	movs	r1, r3
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cac:	430a      	orrs	r2, r1
 8007cae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a9d      	ldr	r2, [pc, #628]	; (8007f2c <UART_SetConfig+0x308>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d136      	bne.n	8007d28 <UART_SetConfig+0x104>
 8007cba:	4b9d      	ldr	r3, [pc, #628]	; (8007f30 <UART_SetConfig+0x30c>)
 8007cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cbe:	2203      	movs	r2, #3
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d020      	beq.n	8007d08 <UART_SetConfig+0xe4>
 8007cc6:	d827      	bhi.n	8007d18 <UART_SetConfig+0xf4>
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d00d      	beq.n	8007ce8 <UART_SetConfig+0xc4>
 8007ccc:	d824      	bhi.n	8007d18 <UART_SetConfig+0xf4>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <UART_SetConfig+0xb4>
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d010      	beq.n	8007cf8 <UART_SetConfig+0xd4>
 8007cd6:	e01f      	b.n	8007d18 <UART_SetConfig+0xf4>
 8007cd8:	231b      	movs	r3, #27
 8007cda:	2218      	movs	r2, #24
 8007cdc:	4694      	mov	ip, r2
 8007cde:	44bc      	add	ip, r7
 8007ce0:	4463      	add	r3, ip
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	701a      	strb	r2, [r3, #0]
 8007ce6:	e0c5      	b.n	8007e74 <UART_SetConfig+0x250>
 8007ce8:	231b      	movs	r3, #27
 8007cea:	2218      	movs	r2, #24
 8007cec:	4694      	mov	ip, r2
 8007cee:	44bc      	add	ip, r7
 8007cf0:	4463      	add	r3, ip
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	e0bd      	b.n	8007e74 <UART_SetConfig+0x250>
 8007cf8:	231b      	movs	r3, #27
 8007cfa:	2218      	movs	r2, #24
 8007cfc:	4694      	mov	ip, r2
 8007cfe:	44bc      	add	ip, r7
 8007d00:	4463      	add	r3, ip
 8007d02:	2204      	movs	r2, #4
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	e0b5      	b.n	8007e74 <UART_SetConfig+0x250>
 8007d08:	231b      	movs	r3, #27
 8007d0a:	2218      	movs	r2, #24
 8007d0c:	4694      	mov	ip, r2
 8007d0e:	44bc      	add	ip, r7
 8007d10:	4463      	add	r3, ip
 8007d12:	2208      	movs	r2, #8
 8007d14:	701a      	strb	r2, [r3, #0]
 8007d16:	e0ad      	b.n	8007e74 <UART_SetConfig+0x250>
 8007d18:	231b      	movs	r3, #27
 8007d1a:	2218      	movs	r2, #24
 8007d1c:	4694      	mov	ip, r2
 8007d1e:	44bc      	add	ip, r7
 8007d20:	4463      	add	r3, ip
 8007d22:	2210      	movs	r2, #16
 8007d24:	701a      	strb	r2, [r3, #0]
 8007d26:	e0a5      	b.n	8007e74 <UART_SetConfig+0x250>
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a81      	ldr	r2, [pc, #516]	; (8007f34 <UART_SetConfig+0x310>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d136      	bne.n	8007da0 <UART_SetConfig+0x17c>
 8007d32:	4b7f      	ldr	r3, [pc, #508]	; (8007f30 <UART_SetConfig+0x30c>)
 8007d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d36:	220c      	movs	r2, #12
 8007d38:	4013      	ands	r3, r2
 8007d3a:	2b0c      	cmp	r3, #12
 8007d3c:	d020      	beq.n	8007d80 <UART_SetConfig+0x15c>
 8007d3e:	d827      	bhi.n	8007d90 <UART_SetConfig+0x16c>
 8007d40:	2b08      	cmp	r3, #8
 8007d42:	d00d      	beq.n	8007d60 <UART_SetConfig+0x13c>
 8007d44:	d824      	bhi.n	8007d90 <UART_SetConfig+0x16c>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d002      	beq.n	8007d50 <UART_SetConfig+0x12c>
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	d010      	beq.n	8007d70 <UART_SetConfig+0x14c>
 8007d4e:	e01f      	b.n	8007d90 <UART_SetConfig+0x16c>
 8007d50:	231b      	movs	r3, #27
 8007d52:	2218      	movs	r2, #24
 8007d54:	4694      	mov	ip, r2
 8007d56:	44bc      	add	ip, r7
 8007d58:	4463      	add	r3, ip
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	701a      	strb	r2, [r3, #0]
 8007d5e:	e089      	b.n	8007e74 <UART_SetConfig+0x250>
 8007d60:	231b      	movs	r3, #27
 8007d62:	2218      	movs	r2, #24
 8007d64:	4694      	mov	ip, r2
 8007d66:	44bc      	add	ip, r7
 8007d68:	4463      	add	r3, ip
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	701a      	strb	r2, [r3, #0]
 8007d6e:	e081      	b.n	8007e74 <UART_SetConfig+0x250>
 8007d70:	231b      	movs	r3, #27
 8007d72:	2218      	movs	r2, #24
 8007d74:	4694      	mov	ip, r2
 8007d76:	44bc      	add	ip, r7
 8007d78:	4463      	add	r3, ip
 8007d7a:	2204      	movs	r2, #4
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	e079      	b.n	8007e74 <UART_SetConfig+0x250>
 8007d80:	231b      	movs	r3, #27
 8007d82:	2218      	movs	r2, #24
 8007d84:	4694      	mov	ip, r2
 8007d86:	44bc      	add	ip, r7
 8007d88:	4463      	add	r3, ip
 8007d8a:	2208      	movs	r2, #8
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	e071      	b.n	8007e74 <UART_SetConfig+0x250>
 8007d90:	231b      	movs	r3, #27
 8007d92:	2218      	movs	r2, #24
 8007d94:	4694      	mov	ip, r2
 8007d96:	44bc      	add	ip, r7
 8007d98:	4463      	add	r3, ip
 8007d9a:	2210      	movs	r2, #16
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	e069      	b.n	8007e74 <UART_SetConfig+0x250>
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a64      	ldr	r2, [pc, #400]	; (8007f38 <UART_SetConfig+0x314>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d107      	bne.n	8007dba <UART_SetConfig+0x196>
 8007daa:	231b      	movs	r3, #27
 8007dac:	2218      	movs	r2, #24
 8007dae:	4694      	mov	ip, r2
 8007db0:	44bc      	add	ip, r7
 8007db2:	4463      	add	r3, ip
 8007db4:	2200      	movs	r2, #0
 8007db6:	701a      	strb	r2, [r3, #0]
 8007db8:	e05c      	b.n	8007e74 <UART_SetConfig+0x250>
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a5f      	ldr	r2, [pc, #380]	; (8007f3c <UART_SetConfig+0x318>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d107      	bne.n	8007dd4 <UART_SetConfig+0x1b0>
 8007dc4:	231b      	movs	r3, #27
 8007dc6:	2218      	movs	r2, #24
 8007dc8:	4694      	mov	ip, r2
 8007dca:	44bc      	add	ip, r7
 8007dcc:	4463      	add	r3, ip
 8007dce:	2200      	movs	r2, #0
 8007dd0:	701a      	strb	r2, [r3, #0]
 8007dd2:	e04f      	b.n	8007e74 <UART_SetConfig+0x250>
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a52      	ldr	r2, [pc, #328]	; (8007f24 <UART_SetConfig+0x300>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d143      	bne.n	8007e66 <UART_SetConfig+0x242>
 8007dde:	4b54      	ldr	r3, [pc, #336]	; (8007f30 <UART_SetConfig+0x30c>)
 8007de0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007de2:	23c0      	movs	r3, #192	; 0xc0
 8007de4:	011b      	lsls	r3, r3, #4
 8007de6:	4013      	ands	r3, r2
 8007de8:	22c0      	movs	r2, #192	; 0xc0
 8007dea:	0112      	lsls	r2, r2, #4
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d02a      	beq.n	8007e46 <UART_SetConfig+0x222>
 8007df0:	22c0      	movs	r2, #192	; 0xc0
 8007df2:	0112      	lsls	r2, r2, #4
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d82e      	bhi.n	8007e56 <UART_SetConfig+0x232>
 8007df8:	2280      	movs	r2, #128	; 0x80
 8007dfa:	0112      	lsls	r2, r2, #4
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d012      	beq.n	8007e26 <UART_SetConfig+0x202>
 8007e00:	2280      	movs	r2, #128	; 0x80
 8007e02:	0112      	lsls	r2, r2, #4
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d826      	bhi.n	8007e56 <UART_SetConfig+0x232>
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d004      	beq.n	8007e16 <UART_SetConfig+0x1f2>
 8007e0c:	2280      	movs	r2, #128	; 0x80
 8007e0e:	00d2      	lsls	r2, r2, #3
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d010      	beq.n	8007e36 <UART_SetConfig+0x212>
 8007e14:	e01f      	b.n	8007e56 <UART_SetConfig+0x232>
 8007e16:	231b      	movs	r3, #27
 8007e18:	2218      	movs	r2, #24
 8007e1a:	4694      	mov	ip, r2
 8007e1c:	44bc      	add	ip, r7
 8007e1e:	4463      	add	r3, ip
 8007e20:	2200      	movs	r2, #0
 8007e22:	701a      	strb	r2, [r3, #0]
 8007e24:	e026      	b.n	8007e74 <UART_SetConfig+0x250>
 8007e26:	231b      	movs	r3, #27
 8007e28:	2218      	movs	r2, #24
 8007e2a:	4694      	mov	ip, r2
 8007e2c:	44bc      	add	ip, r7
 8007e2e:	4463      	add	r3, ip
 8007e30:	2202      	movs	r2, #2
 8007e32:	701a      	strb	r2, [r3, #0]
 8007e34:	e01e      	b.n	8007e74 <UART_SetConfig+0x250>
 8007e36:	231b      	movs	r3, #27
 8007e38:	2218      	movs	r2, #24
 8007e3a:	4694      	mov	ip, r2
 8007e3c:	44bc      	add	ip, r7
 8007e3e:	4463      	add	r3, ip
 8007e40:	2204      	movs	r2, #4
 8007e42:	701a      	strb	r2, [r3, #0]
 8007e44:	e016      	b.n	8007e74 <UART_SetConfig+0x250>
 8007e46:	231b      	movs	r3, #27
 8007e48:	2218      	movs	r2, #24
 8007e4a:	4694      	mov	ip, r2
 8007e4c:	44bc      	add	ip, r7
 8007e4e:	4463      	add	r3, ip
 8007e50:	2208      	movs	r2, #8
 8007e52:	701a      	strb	r2, [r3, #0]
 8007e54:	e00e      	b.n	8007e74 <UART_SetConfig+0x250>
 8007e56:	231b      	movs	r3, #27
 8007e58:	2218      	movs	r2, #24
 8007e5a:	4694      	mov	ip, r2
 8007e5c:	44bc      	add	ip, r7
 8007e5e:	4463      	add	r3, ip
 8007e60:	2210      	movs	r2, #16
 8007e62:	701a      	strb	r2, [r3, #0]
 8007e64:	e006      	b.n	8007e74 <UART_SetConfig+0x250>
 8007e66:	231b      	movs	r3, #27
 8007e68:	2218      	movs	r2, #24
 8007e6a:	4694      	mov	ip, r2
 8007e6c:	44bc      	add	ip, r7
 8007e6e:	4463      	add	r3, ip
 8007e70:	2210      	movs	r2, #16
 8007e72:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a2a      	ldr	r2, [pc, #168]	; (8007f24 <UART_SetConfig+0x300>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d000      	beq.n	8007e80 <UART_SetConfig+0x25c>
 8007e7e:	e09e      	b.n	8007fbe <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e80:	231b      	movs	r3, #27
 8007e82:	2218      	movs	r2, #24
 8007e84:	4694      	mov	ip, r2
 8007e86:	44bc      	add	ip, r7
 8007e88:	4463      	add	r3, ip
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b08      	cmp	r3, #8
 8007e8e:	d01d      	beq.n	8007ecc <UART_SetConfig+0x2a8>
 8007e90:	dc20      	bgt.n	8007ed4 <UART_SetConfig+0x2b0>
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d015      	beq.n	8007ec2 <UART_SetConfig+0x29e>
 8007e96:	dc1d      	bgt.n	8007ed4 <UART_SetConfig+0x2b0>
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <UART_SetConfig+0x27e>
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d005      	beq.n	8007eac <UART_SetConfig+0x288>
 8007ea0:	e018      	b.n	8007ed4 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ea2:	f7ff f89f 	bl	8006fe4 <HAL_RCC_GetPCLK1Freq>
 8007ea6:	0003      	movs	r3, r0
 8007ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007eaa:	e01d      	b.n	8007ee8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eac:	4b20      	ldr	r3, [pc, #128]	; (8007f30 <UART_SetConfig+0x30c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2210      	movs	r2, #16
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	d002      	beq.n	8007ebc <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007eb6:	4b22      	ldr	r3, [pc, #136]	; (8007f40 <UART_SetConfig+0x31c>)
 8007eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007eba:	e015      	b.n	8007ee8 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8007ebc:	4b21      	ldr	r3, [pc, #132]	; (8007f44 <UART_SetConfig+0x320>)
 8007ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ec0:	e012      	b.n	8007ee8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ec2:	f7fe ffdf 	bl	8006e84 <HAL_RCC_GetSysClockFreq>
 8007ec6:	0003      	movs	r3, r0
 8007ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007eca:	e00d      	b.n	8007ee8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ecc:	2380      	movs	r3, #128	; 0x80
 8007ece:	021b      	lsls	r3, r3, #8
 8007ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ed2:	e009      	b.n	8007ee8 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007ed8:	231a      	movs	r3, #26
 8007eda:	2218      	movs	r2, #24
 8007edc:	4694      	mov	ip, r2
 8007ede:	44bc      	add	ip, r7
 8007ee0:	4463      	add	r3, ip
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	701a      	strb	r2, [r3, #0]
        break;
 8007ee6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d100      	bne.n	8007ef0 <UART_SetConfig+0x2cc>
 8007eee:	e13c      	b.n	800816a <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	0013      	movs	r3, r2
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	189b      	adds	r3, r3, r2
 8007efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d305      	bcc.n	8007f0c <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d91d      	bls.n	8007f48 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8007f0c:	231a      	movs	r3, #26
 8007f0e:	2218      	movs	r2, #24
 8007f10:	4694      	mov	ip, r2
 8007f12:	44bc      	add	ip, r7
 8007f14:	4463      	add	r3, ip
 8007f16:	2201      	movs	r2, #1
 8007f18:	701a      	strb	r2, [r3, #0]
 8007f1a:	e126      	b.n	800816a <UART_SetConfig+0x546>
 8007f1c:	efff69f3 	.word	0xefff69f3
 8007f20:	ffffcfff 	.word	0xffffcfff
 8007f24:	40004800 	.word	0x40004800
 8007f28:	fffff4ff 	.word	0xfffff4ff
 8007f2c:	40013800 	.word	0x40013800
 8007f30:	40021000 	.word	0x40021000
 8007f34:	40004400 	.word	0x40004400
 8007f38:	40004c00 	.word	0x40004c00
 8007f3c:	40005000 	.word	0x40005000
 8007f40:	003d0900 	.word	0x003d0900
 8007f44:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	613b      	str	r3, [r7, #16]
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	617b      	str	r3, [r7, #20]
 8007f50:	6939      	ldr	r1, [r7, #16]
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	000b      	movs	r3, r1
 8007f56:	0e1b      	lsrs	r3, r3, #24
 8007f58:	0010      	movs	r0, r2
 8007f5a:	0205      	lsls	r5, r0, #8
 8007f5c:	431d      	orrs	r5, r3
 8007f5e:	000b      	movs	r3, r1
 8007f60:	021c      	lsls	r4, r3, #8
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	085b      	lsrs	r3, r3, #1
 8007f68:	60bb      	str	r3, [r7, #8]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60fb      	str	r3, [r7, #12]
 8007f6e:	68b8      	ldr	r0, [r7, #8]
 8007f70:	68f9      	ldr	r1, [r7, #12]
 8007f72:	1900      	adds	r0, r0, r4
 8007f74:	4169      	adcs	r1, r5
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	607b      	str	r3, [r7, #4]
 8007f80:	683a      	ldr	r2, [r7, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f7f8 fa90 	bl	80004a8 <__aeabi_uldivmod>
 8007f88:	0002      	movs	r2, r0
 8007f8a:	000b      	movs	r3, r1
 8007f8c:	0013      	movs	r3, r2
 8007f8e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f92:	23c0      	movs	r3, #192	; 0xc0
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d309      	bcc.n	8007fae <UART_SetConfig+0x38a>
 8007f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f9c:	2380      	movs	r3, #128	; 0x80
 8007f9e:	035b      	lsls	r3, r3, #13
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d204      	bcs.n	8007fae <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007faa:	60da      	str	r2, [r3, #12]
 8007fac:	e0dd      	b.n	800816a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8007fae:	231a      	movs	r3, #26
 8007fb0:	2218      	movs	r2, #24
 8007fb2:	4694      	mov	ip, r2
 8007fb4:	44bc      	add	ip, r7
 8007fb6:	4463      	add	r3, ip
 8007fb8:	2201      	movs	r2, #1
 8007fba:	701a      	strb	r2, [r3, #0]
 8007fbc:	e0d5      	b.n	800816a <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	69da      	ldr	r2, [r3, #28]
 8007fc2:	2380      	movs	r3, #128	; 0x80
 8007fc4:	021b      	lsls	r3, r3, #8
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d000      	beq.n	8007fcc <UART_SetConfig+0x3a8>
 8007fca:	e074      	b.n	80080b6 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8007fcc:	231b      	movs	r3, #27
 8007fce:	2218      	movs	r2, #24
 8007fd0:	4694      	mov	ip, r2
 8007fd2:	44bc      	add	ip, r7
 8007fd4:	4463      	add	r3, ip
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d822      	bhi.n	8008022 <UART_SetConfig+0x3fe>
 8007fdc:	009a      	lsls	r2, r3, #2
 8007fde:	4b6b      	ldr	r3, [pc, #428]	; (800818c <UART_SetConfig+0x568>)
 8007fe0:	18d3      	adds	r3, r2, r3
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fe6:	f7fe fffd 	bl	8006fe4 <HAL_RCC_GetPCLK1Freq>
 8007fea:	0003      	movs	r3, r0
 8007fec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fee:	e022      	b.n	8008036 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ff0:	f7ff f80e 	bl	8007010 <HAL_RCC_GetPCLK2Freq>
 8007ff4:	0003      	movs	r3, r0
 8007ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ff8:	e01d      	b.n	8008036 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ffa:	4b65      	ldr	r3, [pc, #404]	; (8008190 <UART_SetConfig+0x56c>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2210      	movs	r2, #16
 8008000:	4013      	ands	r3, r2
 8008002:	d002      	beq.n	800800a <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008004:	4b63      	ldr	r3, [pc, #396]	; (8008194 <UART_SetConfig+0x570>)
 8008006:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008008:	e015      	b.n	8008036 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800800a:	4b63      	ldr	r3, [pc, #396]	; (8008198 <UART_SetConfig+0x574>)
 800800c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800800e:	e012      	b.n	8008036 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008010:	f7fe ff38 	bl	8006e84 <HAL_RCC_GetSysClockFreq>
 8008014:	0003      	movs	r3, r0
 8008016:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008018:	e00d      	b.n	8008036 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800801a:	2380      	movs	r3, #128	; 0x80
 800801c:	021b      	lsls	r3, r3, #8
 800801e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008020:	e009      	b.n	8008036 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8008022:	2300      	movs	r3, #0
 8008024:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008026:	231a      	movs	r3, #26
 8008028:	2218      	movs	r2, #24
 800802a:	4694      	mov	ip, r2
 800802c:	44bc      	add	ip, r7
 800802e:	4463      	add	r3, ip
 8008030:	2201      	movs	r2, #1
 8008032:	701a      	strb	r2, [r3, #0]
        break;
 8008034:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008038:	2b00      	cmp	r3, #0
 800803a:	d100      	bne.n	800803e <UART_SetConfig+0x41a>
 800803c:	e095      	b.n	800816a <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800803e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008040:	005a      	lsls	r2, r3, #1
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	085b      	lsrs	r3, r3, #1
 8008048:	18d2      	adds	r2, r2, r3
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	0019      	movs	r1, r3
 8008050:	0010      	movs	r0, r2
 8008052:	f7f8 f875 	bl	8000140 <__udivsi3>
 8008056:	0003      	movs	r3, r0
 8008058:	b29b      	uxth	r3, r3
 800805a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800805c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805e:	2b0f      	cmp	r3, #15
 8008060:	d921      	bls.n	80080a6 <UART_SetConfig+0x482>
 8008062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008064:	2380      	movs	r3, #128	; 0x80
 8008066:	025b      	lsls	r3, r3, #9
 8008068:	429a      	cmp	r2, r3
 800806a:	d21c      	bcs.n	80080a6 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806e:	b29a      	uxth	r2, r3
 8008070:	200e      	movs	r0, #14
 8008072:	2418      	movs	r4, #24
 8008074:	193b      	adds	r3, r7, r4
 8008076:	181b      	adds	r3, r3, r0
 8008078:	210f      	movs	r1, #15
 800807a:	438a      	bics	r2, r1
 800807c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008080:	085b      	lsrs	r3, r3, #1
 8008082:	b29b      	uxth	r3, r3
 8008084:	2207      	movs	r2, #7
 8008086:	4013      	ands	r3, r2
 8008088:	b299      	uxth	r1, r3
 800808a:	193b      	adds	r3, r7, r4
 800808c:	181b      	adds	r3, r3, r0
 800808e:	193a      	adds	r2, r7, r4
 8008090:	1812      	adds	r2, r2, r0
 8008092:	8812      	ldrh	r2, [r2, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	193a      	adds	r2, r7, r4
 800809e:	1812      	adds	r2, r2, r0
 80080a0:	8812      	ldrh	r2, [r2, #0]
 80080a2:	60da      	str	r2, [r3, #12]
 80080a4:	e061      	b.n	800816a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80080a6:	231a      	movs	r3, #26
 80080a8:	2218      	movs	r2, #24
 80080aa:	4694      	mov	ip, r2
 80080ac:	44bc      	add	ip, r7
 80080ae:	4463      	add	r3, ip
 80080b0:	2201      	movs	r2, #1
 80080b2:	701a      	strb	r2, [r3, #0]
 80080b4:	e059      	b.n	800816a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080b6:	231b      	movs	r3, #27
 80080b8:	2218      	movs	r2, #24
 80080ba:	4694      	mov	ip, r2
 80080bc:	44bc      	add	ip, r7
 80080be:	4463      	add	r3, ip
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b08      	cmp	r3, #8
 80080c4:	d822      	bhi.n	800810c <UART_SetConfig+0x4e8>
 80080c6:	009a      	lsls	r2, r3, #2
 80080c8:	4b34      	ldr	r3, [pc, #208]	; (800819c <UART_SetConfig+0x578>)
 80080ca:	18d3      	adds	r3, r2, r3
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080d0:	f7fe ff88 	bl	8006fe4 <HAL_RCC_GetPCLK1Freq>
 80080d4:	0003      	movs	r3, r0
 80080d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080d8:	e022      	b.n	8008120 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080da:	f7fe ff99 	bl	8007010 <HAL_RCC_GetPCLK2Freq>
 80080de:	0003      	movs	r3, r0
 80080e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080e2:	e01d      	b.n	8008120 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080e4:	4b2a      	ldr	r3, [pc, #168]	; (8008190 <UART_SetConfig+0x56c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2210      	movs	r2, #16
 80080ea:	4013      	ands	r3, r2
 80080ec:	d002      	beq.n	80080f4 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80080ee:	4b29      	ldr	r3, [pc, #164]	; (8008194 <UART_SetConfig+0x570>)
 80080f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080f2:	e015      	b.n	8008120 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 80080f4:	4b28      	ldr	r3, [pc, #160]	; (8008198 <UART_SetConfig+0x574>)
 80080f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080f8:	e012      	b.n	8008120 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080fa:	f7fe fec3 	bl	8006e84 <HAL_RCC_GetSysClockFreq>
 80080fe:	0003      	movs	r3, r0
 8008100:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008102:	e00d      	b.n	8008120 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008104:	2380      	movs	r3, #128	; 0x80
 8008106:	021b      	lsls	r3, r3, #8
 8008108:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800810a:	e009      	b.n	8008120 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008110:	231a      	movs	r3, #26
 8008112:	2218      	movs	r2, #24
 8008114:	4694      	mov	ip, r2
 8008116:	44bc      	add	ip, r7
 8008118:	4463      	add	r3, ip
 800811a:	2201      	movs	r2, #1
 800811c:	701a      	strb	r2, [r3, #0]
        break;
 800811e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d021      	beq.n	800816a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	085a      	lsrs	r2, r3, #1
 800812c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812e:	18d2      	adds	r2, r2, r3
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	0019      	movs	r1, r3
 8008136:	0010      	movs	r0, r2
 8008138:	f7f8 f802 	bl	8000140 <__udivsi3>
 800813c:	0003      	movs	r3, r0
 800813e:	b29b      	uxth	r3, r3
 8008140:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008144:	2b0f      	cmp	r3, #15
 8008146:	d909      	bls.n	800815c <UART_SetConfig+0x538>
 8008148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800814a:	2380      	movs	r3, #128	; 0x80
 800814c:	025b      	lsls	r3, r3, #9
 800814e:	429a      	cmp	r2, r3
 8008150:	d204      	bcs.n	800815c <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008158:	60da      	str	r2, [r3, #12]
 800815a:	e006      	b.n	800816a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800815c:	231a      	movs	r3, #26
 800815e:	2218      	movs	r2, #24
 8008160:	4694      	mov	ip, r2
 8008162:	44bc      	add	ip, r7
 8008164:	4463      	add	r3, ip
 8008166:	2201      	movs	r2, #1
 8008168:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	2200      	movs	r2, #0
 800816e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	2200      	movs	r2, #0
 8008174:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008176:	231a      	movs	r3, #26
 8008178:	2218      	movs	r2, #24
 800817a:	4694      	mov	ip, r2
 800817c:	44bc      	add	ip, r7
 800817e:	4463      	add	r3, ip
 8008180:	781b      	ldrb	r3, [r3, #0]
}
 8008182:	0018      	movs	r0, r3
 8008184:	46bd      	mov	sp, r7
 8008186:	b00e      	add	sp, #56	; 0x38
 8008188:	bdb0      	pop	{r4, r5, r7, pc}
 800818a:	46c0      	nop			; (mov r8, r8)
 800818c:	0800c558 	.word	0x0800c558
 8008190:	40021000 	.word	0x40021000
 8008194:	003d0900 	.word	0x003d0900
 8008198:	00f42400 	.word	0x00f42400
 800819c:	0800c57c 	.word	0x0800c57c

080081a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	2201      	movs	r2, #1
 80081ae:	4013      	ands	r3, r2
 80081b0:	d00b      	beq.n	80081ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	4a4a      	ldr	r2, [pc, #296]	; (80082e4 <UART_AdvFeatureConfig+0x144>)
 80081ba:	4013      	ands	r3, r2
 80081bc:	0019      	movs	r1, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	2202      	movs	r2, #2
 80081d0:	4013      	ands	r3, r2
 80081d2:	d00b      	beq.n	80081ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	4a43      	ldr	r2, [pc, #268]	; (80082e8 <UART_AdvFeatureConfig+0x148>)
 80081dc:	4013      	ands	r3, r2
 80081de:	0019      	movs	r1, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	2204      	movs	r2, #4
 80081f2:	4013      	ands	r3, r2
 80081f4:	d00b      	beq.n	800820e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	4a3b      	ldr	r2, [pc, #236]	; (80082ec <UART_AdvFeatureConfig+0x14c>)
 80081fe:	4013      	ands	r3, r2
 8008200:	0019      	movs	r1, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	2208      	movs	r2, #8
 8008214:	4013      	ands	r3, r2
 8008216:	d00b      	beq.n	8008230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	4a34      	ldr	r2, [pc, #208]	; (80082f0 <UART_AdvFeatureConfig+0x150>)
 8008220:	4013      	ands	r3, r2
 8008222:	0019      	movs	r1, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008234:	2210      	movs	r2, #16
 8008236:	4013      	ands	r3, r2
 8008238:	d00b      	beq.n	8008252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	4a2c      	ldr	r2, [pc, #176]	; (80082f4 <UART_AdvFeatureConfig+0x154>)
 8008242:	4013      	ands	r3, r2
 8008244:	0019      	movs	r1, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	2220      	movs	r2, #32
 8008258:	4013      	ands	r3, r2
 800825a:	d00b      	beq.n	8008274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	4a25      	ldr	r2, [pc, #148]	; (80082f8 <UART_AdvFeatureConfig+0x158>)
 8008264:	4013      	ands	r3, r2
 8008266:	0019      	movs	r1, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	430a      	orrs	r2, r1
 8008272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	2240      	movs	r2, #64	; 0x40
 800827a:	4013      	ands	r3, r2
 800827c:	d01d      	beq.n	80082ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	4a1d      	ldr	r2, [pc, #116]	; (80082fc <UART_AdvFeatureConfig+0x15c>)
 8008286:	4013      	ands	r3, r2
 8008288:	0019      	movs	r1, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800829a:	2380      	movs	r3, #128	; 0x80
 800829c:	035b      	lsls	r3, r3, #13
 800829e:	429a      	cmp	r2, r3
 80082a0:	d10b      	bne.n	80082ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	4a15      	ldr	r2, [pc, #84]	; (8008300 <UART_AdvFeatureConfig+0x160>)
 80082aa:	4013      	ands	r3, r2
 80082ac:	0019      	movs	r1, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	2280      	movs	r2, #128	; 0x80
 80082c0:	4013      	ands	r3, r2
 80082c2:	d00b      	beq.n	80082dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	4a0e      	ldr	r2, [pc, #56]	; (8008304 <UART_AdvFeatureConfig+0x164>)
 80082cc:	4013      	ands	r3, r2
 80082ce:	0019      	movs	r1, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	430a      	orrs	r2, r1
 80082da:	605a      	str	r2, [r3, #4]
  }
}
 80082dc:	46c0      	nop			; (mov r8, r8)
 80082de:	46bd      	mov	sp, r7
 80082e0:	b002      	add	sp, #8
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	fffdffff 	.word	0xfffdffff
 80082e8:	fffeffff 	.word	0xfffeffff
 80082ec:	fffbffff 	.word	0xfffbffff
 80082f0:	ffff7fff 	.word	0xffff7fff
 80082f4:	ffffefff 	.word	0xffffefff
 80082f8:	ffffdfff 	.word	0xffffdfff
 80082fc:	ffefffff 	.word	0xffefffff
 8008300:	ff9fffff 	.word	0xff9fffff
 8008304:	fff7ffff 	.word	0xfff7ffff

08008308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af02      	add	r7, sp, #8
 800830e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2280      	movs	r2, #128	; 0x80
 8008314:	2100      	movs	r1, #0
 8008316:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008318:	f7fc fc9e 	bl	8004c58 <HAL_GetTick>
 800831c:	0003      	movs	r3, r0
 800831e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2208      	movs	r2, #8
 8008328:	4013      	ands	r3, r2
 800832a:	2b08      	cmp	r3, #8
 800832c:	d10c      	bne.n	8008348 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2280      	movs	r2, #128	; 0x80
 8008332:	0391      	lsls	r1, r2, #14
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	4a17      	ldr	r2, [pc, #92]	; (8008394 <UART_CheckIdleState+0x8c>)
 8008338:	9200      	str	r2, [sp, #0]
 800833a:	2200      	movs	r2, #0
 800833c:	f000 f82c 	bl	8008398 <UART_WaitOnFlagUntilTimeout>
 8008340:	1e03      	subs	r3, r0, #0
 8008342:	d001      	beq.n	8008348 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e021      	b.n	800838c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2204      	movs	r2, #4
 8008350:	4013      	ands	r3, r2
 8008352:	2b04      	cmp	r3, #4
 8008354:	d10c      	bne.n	8008370 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2280      	movs	r2, #128	; 0x80
 800835a:	03d1      	lsls	r1, r2, #15
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	4a0d      	ldr	r2, [pc, #52]	; (8008394 <UART_CheckIdleState+0x8c>)
 8008360:	9200      	str	r2, [sp, #0]
 8008362:	2200      	movs	r2, #0
 8008364:	f000 f818 	bl	8008398 <UART_WaitOnFlagUntilTimeout>
 8008368:	1e03      	subs	r3, r0, #0
 800836a:	d001      	beq.n	8008370 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e00d      	b.n	800838c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2220      	movs	r2, #32
 8008374:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2220      	movs	r2, #32
 800837a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2274      	movs	r2, #116	; 0x74
 8008386:	2100      	movs	r1, #0
 8008388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	0018      	movs	r0, r3
 800838e:	46bd      	mov	sp, r7
 8008390:	b004      	add	sp, #16
 8008392:	bd80      	pop	{r7, pc}
 8008394:	01ffffff 	.word	0x01ffffff

08008398 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b094      	sub	sp, #80	; 0x50
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	603b      	str	r3, [r7, #0]
 80083a4:	1dfb      	adds	r3, r7, #7
 80083a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a8:	e0a3      	b.n	80084f2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083ac:	3301      	adds	r3, #1
 80083ae:	d100      	bne.n	80083b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80083b0:	e09f      	b.n	80084f2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083b2:	f7fc fc51 	bl	8004c58 <HAL_GetTick>
 80083b6:	0002      	movs	r2, r0
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083be:	429a      	cmp	r2, r3
 80083c0:	d302      	bcc.n	80083c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80083c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d13d      	bne.n	8008444 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083c8:	f3ef 8310 	mrs	r3, PRIMASK
 80083cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083d0:	647b      	str	r3, [r7, #68]	; 0x44
 80083d2:	2301      	movs	r3, #1
 80083d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d8:	f383 8810 	msr	PRIMASK, r3
}
 80083dc:	46c0      	nop			; (mov r8, r8)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	494c      	ldr	r1, [pc, #304]	; (800851c <UART_WaitOnFlagUntilTimeout+0x184>)
 80083ea:	400a      	ands	r2, r1
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	f383 8810 	msr	PRIMASK, r3
}
 80083f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083fa:	f3ef 8310 	mrs	r3, PRIMASK
 80083fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008402:	643b      	str	r3, [r7, #64]	; 0x40
 8008404:	2301      	movs	r3, #1
 8008406:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840a:	f383 8810 	msr	PRIMASK, r3
}
 800840e:	46c0      	nop			; (mov r8, r8)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689a      	ldr	r2, [r3, #8]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2101      	movs	r1, #1
 800841c:	438a      	bics	r2, r1
 800841e:	609a      	str	r2, [r3, #8]
 8008420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008422:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008426:	f383 8810 	msr	PRIMASK, r3
}
 800842a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2220      	movs	r2, #32
 8008430:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2220      	movs	r2, #32
 8008436:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2274      	movs	r2, #116	; 0x74
 800843c:	2100      	movs	r1, #0
 800843e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e067      	b.n	8008514 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2204      	movs	r2, #4
 800844c:	4013      	ands	r3, r2
 800844e:	d050      	beq.n	80084f2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	69da      	ldr	r2, [r3, #28]
 8008456:	2380      	movs	r3, #128	; 0x80
 8008458:	011b      	lsls	r3, r3, #4
 800845a:	401a      	ands	r2, r3
 800845c:	2380      	movs	r3, #128	; 0x80
 800845e:	011b      	lsls	r3, r3, #4
 8008460:	429a      	cmp	r2, r3
 8008462:	d146      	bne.n	80084f2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2280      	movs	r2, #128	; 0x80
 800846a:	0112      	lsls	r2, r2, #4
 800846c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800846e:	f3ef 8310 	mrs	r3, PRIMASK
 8008472:	613b      	str	r3, [r7, #16]
  return(result);
 8008474:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008478:	2301      	movs	r3, #1
 800847a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f383 8810 	msr	PRIMASK, r3
}
 8008482:	46c0      	nop			; (mov r8, r8)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4923      	ldr	r1, [pc, #140]	; (800851c <UART_WaitOnFlagUntilTimeout+0x184>)
 8008490:	400a      	ands	r2, r1
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008496:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	f383 8810 	msr	PRIMASK, r3
}
 800849e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084a0:	f3ef 8310 	mrs	r3, PRIMASK
 80084a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80084a6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80084aa:	2301      	movs	r3, #1
 80084ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ae:	6a3b      	ldr	r3, [r7, #32]
 80084b0:	f383 8810 	msr	PRIMASK, r3
}
 80084b4:	46c0      	nop			; (mov r8, r8)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2101      	movs	r1, #1
 80084c2:	438a      	bics	r2, r1
 80084c4:	609a      	str	r2, [r3, #8]
 80084c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	f383 8810 	msr	PRIMASK, r3
}
 80084d0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2220      	movs	r2, #32
 80084d6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2220      	movs	r2, #32
 80084dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2280      	movs	r2, #128	; 0x80
 80084e2:	2120      	movs	r1, #32
 80084e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2274      	movs	r2, #116	; 0x74
 80084ea:	2100      	movs	r1, #0
 80084ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e010      	b.n	8008514 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	69db      	ldr	r3, [r3, #28]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	4013      	ands	r3, r2
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	425a      	negs	r2, r3
 8008502:	4153      	adcs	r3, r2
 8008504:	b2db      	uxtb	r3, r3
 8008506:	001a      	movs	r2, r3
 8008508:	1dfb      	adds	r3, r7, #7
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	429a      	cmp	r2, r3
 800850e:	d100      	bne.n	8008512 <UART_WaitOnFlagUntilTimeout+0x17a>
 8008510:	e74b      	b.n	80083aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	0018      	movs	r0, r3
 8008516:	46bd      	mov	sp, r7
 8008518:	b014      	add	sp, #80	; 0x50
 800851a:	bd80      	pop	{r7, pc}
 800851c:	fffffe5f 	.word	0xfffffe5f

08008520 <__errno>:
 8008520:	4b01      	ldr	r3, [pc, #4]	; (8008528 <__errno+0x8>)
 8008522:	6818      	ldr	r0, [r3, #0]
 8008524:	4770      	bx	lr
 8008526:	46c0      	nop			; (mov r8, r8)
 8008528:	2000000c 	.word	0x2000000c

0800852c <__libc_init_array>:
 800852c:	b570      	push	{r4, r5, r6, lr}
 800852e:	2600      	movs	r6, #0
 8008530:	4d0c      	ldr	r5, [pc, #48]	; (8008564 <__libc_init_array+0x38>)
 8008532:	4c0d      	ldr	r4, [pc, #52]	; (8008568 <__libc_init_array+0x3c>)
 8008534:	1b64      	subs	r4, r4, r5
 8008536:	10a4      	asrs	r4, r4, #2
 8008538:	42a6      	cmp	r6, r4
 800853a:	d109      	bne.n	8008550 <__libc_init_array+0x24>
 800853c:	2600      	movs	r6, #0
 800853e:	f003 fee7 	bl	800c310 <_init>
 8008542:	4d0a      	ldr	r5, [pc, #40]	; (800856c <__libc_init_array+0x40>)
 8008544:	4c0a      	ldr	r4, [pc, #40]	; (8008570 <__libc_init_array+0x44>)
 8008546:	1b64      	subs	r4, r4, r5
 8008548:	10a4      	asrs	r4, r4, #2
 800854a:	42a6      	cmp	r6, r4
 800854c:	d105      	bne.n	800855a <__libc_init_array+0x2e>
 800854e:	bd70      	pop	{r4, r5, r6, pc}
 8008550:	00b3      	lsls	r3, r6, #2
 8008552:	58eb      	ldr	r3, [r5, r3]
 8008554:	4798      	blx	r3
 8008556:	3601      	adds	r6, #1
 8008558:	e7ee      	b.n	8008538 <__libc_init_array+0xc>
 800855a:	00b3      	lsls	r3, r6, #2
 800855c:	58eb      	ldr	r3, [r5, r3]
 800855e:	4798      	blx	r3
 8008560:	3601      	adds	r6, #1
 8008562:	e7f2      	b.n	800854a <__libc_init_array+0x1e>
 8008564:	0800c9d0 	.word	0x0800c9d0
 8008568:	0800c9d0 	.word	0x0800c9d0
 800856c:	0800c9d0 	.word	0x0800c9d0
 8008570:	0800c9d4 	.word	0x0800c9d4

08008574 <memset>:
 8008574:	0003      	movs	r3, r0
 8008576:	1882      	adds	r2, r0, r2
 8008578:	4293      	cmp	r3, r2
 800857a:	d100      	bne.n	800857e <memset+0xa>
 800857c:	4770      	bx	lr
 800857e:	7019      	strb	r1, [r3, #0]
 8008580:	3301      	adds	r3, #1
 8008582:	e7f9      	b.n	8008578 <memset+0x4>

08008584 <__cvt>:
 8008584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008586:	001e      	movs	r6, r3
 8008588:	2300      	movs	r3, #0
 800858a:	0014      	movs	r4, r2
 800858c:	b08b      	sub	sp, #44	; 0x2c
 800858e:	429e      	cmp	r6, r3
 8008590:	da04      	bge.n	800859c <__cvt+0x18>
 8008592:	2180      	movs	r1, #128	; 0x80
 8008594:	0609      	lsls	r1, r1, #24
 8008596:	1873      	adds	r3, r6, r1
 8008598:	001e      	movs	r6, r3
 800859a:	232d      	movs	r3, #45	; 0x2d
 800859c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800859e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80085a0:	7013      	strb	r3, [r2, #0]
 80085a2:	2320      	movs	r3, #32
 80085a4:	2203      	movs	r2, #3
 80085a6:	439f      	bics	r7, r3
 80085a8:	2f46      	cmp	r7, #70	; 0x46
 80085aa:	d007      	beq.n	80085bc <__cvt+0x38>
 80085ac:	003b      	movs	r3, r7
 80085ae:	3b45      	subs	r3, #69	; 0x45
 80085b0:	4259      	negs	r1, r3
 80085b2:	414b      	adcs	r3, r1
 80085b4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80085b6:	3a01      	subs	r2, #1
 80085b8:	18cb      	adds	r3, r1, r3
 80085ba:	9310      	str	r3, [sp, #64]	; 0x40
 80085bc:	ab09      	add	r3, sp, #36	; 0x24
 80085be:	9304      	str	r3, [sp, #16]
 80085c0:	ab08      	add	r3, sp, #32
 80085c2:	9303      	str	r3, [sp, #12]
 80085c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085c6:	9200      	str	r2, [sp, #0]
 80085c8:	9302      	str	r3, [sp, #8]
 80085ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085cc:	0022      	movs	r2, r4
 80085ce:	9301      	str	r3, [sp, #4]
 80085d0:	0033      	movs	r3, r6
 80085d2:	f000 fcfd 	bl	8008fd0 <_dtoa_r>
 80085d6:	0005      	movs	r5, r0
 80085d8:	2f47      	cmp	r7, #71	; 0x47
 80085da:	d102      	bne.n	80085e2 <__cvt+0x5e>
 80085dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085de:	07db      	lsls	r3, r3, #31
 80085e0:	d528      	bpl.n	8008634 <__cvt+0xb0>
 80085e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085e4:	18eb      	adds	r3, r5, r3
 80085e6:	9307      	str	r3, [sp, #28]
 80085e8:	2f46      	cmp	r7, #70	; 0x46
 80085ea:	d114      	bne.n	8008616 <__cvt+0x92>
 80085ec:	782b      	ldrb	r3, [r5, #0]
 80085ee:	2b30      	cmp	r3, #48	; 0x30
 80085f0:	d10c      	bne.n	800860c <__cvt+0x88>
 80085f2:	2200      	movs	r2, #0
 80085f4:	2300      	movs	r3, #0
 80085f6:	0020      	movs	r0, r4
 80085f8:	0031      	movs	r1, r6
 80085fa:	f7f7 ff27 	bl	800044c <__aeabi_dcmpeq>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d104      	bne.n	800860c <__cvt+0x88>
 8008602:	2301      	movs	r3, #1
 8008604:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008606:	1a9b      	subs	r3, r3, r2
 8008608:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800860e:	9a07      	ldr	r2, [sp, #28]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	18d3      	adds	r3, r2, r3
 8008614:	9307      	str	r3, [sp, #28]
 8008616:	2200      	movs	r2, #0
 8008618:	2300      	movs	r3, #0
 800861a:	0020      	movs	r0, r4
 800861c:	0031      	movs	r1, r6
 800861e:	f7f7 ff15 	bl	800044c <__aeabi_dcmpeq>
 8008622:	2800      	cmp	r0, #0
 8008624:	d001      	beq.n	800862a <__cvt+0xa6>
 8008626:	9b07      	ldr	r3, [sp, #28]
 8008628:	9309      	str	r3, [sp, #36]	; 0x24
 800862a:	2230      	movs	r2, #48	; 0x30
 800862c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800862e:	9907      	ldr	r1, [sp, #28]
 8008630:	428b      	cmp	r3, r1
 8008632:	d306      	bcc.n	8008642 <__cvt+0xbe>
 8008634:	0028      	movs	r0, r5
 8008636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008638:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800863a:	1b5b      	subs	r3, r3, r5
 800863c:	6013      	str	r3, [r2, #0]
 800863e:	b00b      	add	sp, #44	; 0x2c
 8008640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008642:	1c59      	adds	r1, r3, #1
 8008644:	9109      	str	r1, [sp, #36]	; 0x24
 8008646:	701a      	strb	r2, [r3, #0]
 8008648:	e7f0      	b.n	800862c <__cvt+0xa8>

0800864a <__exponent>:
 800864a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800864c:	1c83      	adds	r3, r0, #2
 800864e:	b087      	sub	sp, #28
 8008650:	9303      	str	r3, [sp, #12]
 8008652:	0005      	movs	r5, r0
 8008654:	000c      	movs	r4, r1
 8008656:	232b      	movs	r3, #43	; 0x2b
 8008658:	7002      	strb	r2, [r0, #0]
 800865a:	2900      	cmp	r1, #0
 800865c:	da01      	bge.n	8008662 <__exponent+0x18>
 800865e:	424c      	negs	r4, r1
 8008660:	3302      	adds	r3, #2
 8008662:	706b      	strb	r3, [r5, #1]
 8008664:	2c09      	cmp	r4, #9
 8008666:	dd31      	ble.n	80086cc <__exponent+0x82>
 8008668:	270a      	movs	r7, #10
 800866a:	ab04      	add	r3, sp, #16
 800866c:	1dde      	adds	r6, r3, #7
 800866e:	0020      	movs	r0, r4
 8008670:	0039      	movs	r1, r7
 8008672:	9601      	str	r6, [sp, #4]
 8008674:	f7f7 fed4 	bl	8000420 <__aeabi_idivmod>
 8008678:	3e01      	subs	r6, #1
 800867a:	3130      	adds	r1, #48	; 0x30
 800867c:	0020      	movs	r0, r4
 800867e:	7031      	strb	r1, [r6, #0]
 8008680:	0039      	movs	r1, r7
 8008682:	9402      	str	r4, [sp, #8]
 8008684:	f7f7 fde6 	bl	8000254 <__divsi3>
 8008688:	9b02      	ldr	r3, [sp, #8]
 800868a:	0004      	movs	r4, r0
 800868c:	2b63      	cmp	r3, #99	; 0x63
 800868e:	dcee      	bgt.n	800866e <__exponent+0x24>
 8008690:	9b01      	ldr	r3, [sp, #4]
 8008692:	3430      	adds	r4, #48	; 0x30
 8008694:	1e9a      	subs	r2, r3, #2
 8008696:	0013      	movs	r3, r2
 8008698:	9903      	ldr	r1, [sp, #12]
 800869a:	7014      	strb	r4, [r2, #0]
 800869c:	a804      	add	r0, sp, #16
 800869e:	3007      	adds	r0, #7
 80086a0:	4298      	cmp	r0, r3
 80086a2:	d80e      	bhi.n	80086c2 <__exponent+0x78>
 80086a4:	ab04      	add	r3, sp, #16
 80086a6:	3307      	adds	r3, #7
 80086a8:	2000      	movs	r0, #0
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d804      	bhi.n	80086b8 <__exponent+0x6e>
 80086ae:	ab04      	add	r3, sp, #16
 80086b0:	3009      	adds	r0, #9
 80086b2:	18c0      	adds	r0, r0, r3
 80086b4:	9b01      	ldr	r3, [sp, #4]
 80086b6:	1ac0      	subs	r0, r0, r3
 80086b8:	9b03      	ldr	r3, [sp, #12]
 80086ba:	1818      	adds	r0, r3, r0
 80086bc:	1b40      	subs	r0, r0, r5
 80086be:	b007      	add	sp, #28
 80086c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086c2:	7818      	ldrb	r0, [r3, #0]
 80086c4:	3301      	adds	r3, #1
 80086c6:	7008      	strb	r0, [r1, #0]
 80086c8:	3101      	adds	r1, #1
 80086ca:	e7e7      	b.n	800869c <__exponent+0x52>
 80086cc:	2330      	movs	r3, #48	; 0x30
 80086ce:	18e4      	adds	r4, r4, r3
 80086d0:	70ab      	strb	r3, [r5, #2]
 80086d2:	1d28      	adds	r0, r5, #4
 80086d4:	70ec      	strb	r4, [r5, #3]
 80086d6:	e7f1      	b.n	80086bc <__exponent+0x72>

080086d8 <_printf_float>:
 80086d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086da:	b095      	sub	sp, #84	; 0x54
 80086dc:	000c      	movs	r4, r1
 80086de:	9208      	str	r2, [sp, #32]
 80086e0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80086e2:	9309      	str	r3, [sp, #36]	; 0x24
 80086e4:	0007      	movs	r7, r0
 80086e6:	f001 fa91 	bl	8009c0c <_localeconv_r>
 80086ea:	6803      	ldr	r3, [r0, #0]
 80086ec:	0018      	movs	r0, r3
 80086ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80086f0:	f7f7 fd0a 	bl	8000108 <strlen>
 80086f4:	2300      	movs	r3, #0
 80086f6:	9312      	str	r3, [sp, #72]	; 0x48
 80086f8:	7e23      	ldrb	r3, [r4, #24]
 80086fa:	2207      	movs	r2, #7
 80086fc:	001e      	movs	r6, r3
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	900d      	str	r0, [sp, #52]	; 0x34
 8008702:	930c      	str	r3, [sp, #48]	; 0x30
 8008704:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008706:	682b      	ldr	r3, [r5, #0]
 8008708:	05c9      	lsls	r1, r1, #23
 800870a:	d547      	bpl.n	800879c <_printf_float+0xc4>
 800870c:	189b      	adds	r3, r3, r2
 800870e:	4393      	bics	r3, r2
 8008710:	001a      	movs	r2, r3
 8008712:	3208      	adds	r2, #8
 8008714:	602a      	str	r2, [r5, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	64a2      	str	r2, [r4, #72]	; 0x48
 800871c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800871e:	2201      	movs	r2, #1
 8008720:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008722:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008724:	930a      	str	r3, [sp, #40]	; 0x28
 8008726:	006b      	lsls	r3, r5, #1
 8008728:	085b      	lsrs	r3, r3, #1
 800872a:	930e      	str	r3, [sp, #56]	; 0x38
 800872c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800872e:	4ba8      	ldr	r3, [pc, #672]	; (80089d0 <_printf_float+0x2f8>)
 8008730:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008732:	4252      	negs	r2, r2
 8008734:	f7fa f99c 	bl	8002a70 <__aeabi_dcmpun>
 8008738:	2800      	cmp	r0, #0
 800873a:	d131      	bne.n	80087a0 <_printf_float+0xc8>
 800873c:	2201      	movs	r2, #1
 800873e:	4ba4      	ldr	r3, [pc, #656]	; (80089d0 <_printf_float+0x2f8>)
 8008740:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008742:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008744:	4252      	negs	r2, r2
 8008746:	f7f7 fe91 	bl	800046c <__aeabi_dcmple>
 800874a:	2800      	cmp	r0, #0
 800874c:	d128      	bne.n	80087a0 <_printf_float+0xc8>
 800874e:	2200      	movs	r2, #0
 8008750:	2300      	movs	r3, #0
 8008752:	0029      	movs	r1, r5
 8008754:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008756:	f7f7 fe7f 	bl	8000458 <__aeabi_dcmplt>
 800875a:	2800      	cmp	r0, #0
 800875c:	d003      	beq.n	8008766 <_printf_float+0x8e>
 800875e:	0023      	movs	r3, r4
 8008760:	222d      	movs	r2, #45	; 0x2d
 8008762:	3343      	adds	r3, #67	; 0x43
 8008764:	701a      	strb	r2, [r3, #0]
 8008766:	4d9b      	ldr	r5, [pc, #620]	; (80089d4 <_printf_float+0x2fc>)
 8008768:	2e47      	cmp	r6, #71	; 0x47
 800876a:	d900      	bls.n	800876e <_printf_float+0x96>
 800876c:	4d9a      	ldr	r5, [pc, #616]	; (80089d8 <_printf_float+0x300>)
 800876e:	2303      	movs	r3, #3
 8008770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008772:	6123      	str	r3, [r4, #16]
 8008774:	3301      	adds	r3, #1
 8008776:	439a      	bics	r2, r3
 8008778:	2300      	movs	r3, #0
 800877a:	6022      	str	r2, [r4, #0]
 800877c:	930a      	str	r3, [sp, #40]	; 0x28
 800877e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008780:	0021      	movs	r1, r4
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	0038      	movs	r0, r7
 8008786:	9b08      	ldr	r3, [sp, #32]
 8008788:	aa13      	add	r2, sp, #76	; 0x4c
 800878a:	f000 f9f3 	bl	8008b74 <_printf_common>
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	d000      	beq.n	8008794 <_printf_float+0xbc>
 8008792:	e09e      	b.n	80088d2 <_printf_float+0x1fa>
 8008794:	2001      	movs	r0, #1
 8008796:	4240      	negs	r0, r0
 8008798:	b015      	add	sp, #84	; 0x54
 800879a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800879c:	3307      	adds	r3, #7
 800879e:	e7b6      	b.n	800870e <_printf_float+0x36>
 80087a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087a2:	002b      	movs	r3, r5
 80087a4:	0010      	movs	r0, r2
 80087a6:	0029      	movs	r1, r5
 80087a8:	f7fa f962 	bl	8002a70 <__aeabi_dcmpun>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d00a      	beq.n	80087c6 <_printf_float+0xee>
 80087b0:	2d00      	cmp	r5, #0
 80087b2:	da03      	bge.n	80087bc <_printf_float+0xe4>
 80087b4:	0023      	movs	r3, r4
 80087b6:	222d      	movs	r2, #45	; 0x2d
 80087b8:	3343      	adds	r3, #67	; 0x43
 80087ba:	701a      	strb	r2, [r3, #0]
 80087bc:	4d87      	ldr	r5, [pc, #540]	; (80089dc <_printf_float+0x304>)
 80087be:	2e47      	cmp	r6, #71	; 0x47
 80087c0:	d9d5      	bls.n	800876e <_printf_float+0x96>
 80087c2:	4d87      	ldr	r5, [pc, #540]	; (80089e0 <_printf_float+0x308>)
 80087c4:	e7d3      	b.n	800876e <_printf_float+0x96>
 80087c6:	2220      	movs	r2, #32
 80087c8:	0031      	movs	r1, r6
 80087ca:	6863      	ldr	r3, [r4, #4]
 80087cc:	4391      	bics	r1, r2
 80087ce:	910e      	str	r1, [sp, #56]	; 0x38
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	d147      	bne.n	8008864 <_printf_float+0x18c>
 80087d4:	3307      	adds	r3, #7
 80087d6:	6063      	str	r3, [r4, #4]
 80087d8:	2380      	movs	r3, #128	; 0x80
 80087da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087dc:	00db      	lsls	r3, r3, #3
 80087de:	4313      	orrs	r3, r2
 80087e0:	2200      	movs	r2, #0
 80087e2:	9206      	str	r2, [sp, #24]
 80087e4:	aa12      	add	r2, sp, #72	; 0x48
 80087e6:	9205      	str	r2, [sp, #20]
 80087e8:	aa11      	add	r2, sp, #68	; 0x44
 80087ea:	9203      	str	r2, [sp, #12]
 80087ec:	2223      	movs	r2, #35	; 0x23
 80087ee:	a908      	add	r1, sp, #32
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	9301      	str	r3, [sp, #4]
 80087f4:	6863      	ldr	r3, [r4, #4]
 80087f6:	1852      	adds	r2, r2, r1
 80087f8:	9202      	str	r2, [sp, #8]
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	0038      	movs	r0, r7
 80087fe:	002b      	movs	r3, r5
 8008800:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008802:	9604      	str	r6, [sp, #16]
 8008804:	f7ff febe 	bl	8008584 <__cvt>
 8008808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800880a:	0005      	movs	r5, r0
 800880c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800880e:	2b47      	cmp	r3, #71	; 0x47
 8008810:	d108      	bne.n	8008824 <_printf_float+0x14c>
 8008812:	1ccb      	adds	r3, r1, #3
 8008814:	db02      	blt.n	800881c <_printf_float+0x144>
 8008816:	6863      	ldr	r3, [r4, #4]
 8008818:	4299      	cmp	r1, r3
 800881a:	dd46      	ble.n	80088aa <_printf_float+0x1d2>
 800881c:	0033      	movs	r3, r6
 800881e:	3b02      	subs	r3, #2
 8008820:	b2db      	uxtb	r3, r3
 8008822:	001e      	movs	r6, r3
 8008824:	2e65      	cmp	r6, #101	; 0x65
 8008826:	d824      	bhi.n	8008872 <_printf_float+0x19a>
 8008828:	0020      	movs	r0, r4
 800882a:	0032      	movs	r2, r6
 800882c:	3901      	subs	r1, #1
 800882e:	3050      	adds	r0, #80	; 0x50
 8008830:	9111      	str	r1, [sp, #68]	; 0x44
 8008832:	f7ff ff0a 	bl	800864a <__exponent>
 8008836:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008838:	900a      	str	r0, [sp, #40]	; 0x28
 800883a:	1813      	adds	r3, r2, r0
 800883c:	6123      	str	r3, [r4, #16]
 800883e:	2a01      	cmp	r2, #1
 8008840:	dc02      	bgt.n	8008848 <_printf_float+0x170>
 8008842:	6822      	ldr	r2, [r4, #0]
 8008844:	07d2      	lsls	r2, r2, #31
 8008846:	d501      	bpl.n	800884c <_printf_float+0x174>
 8008848:	3301      	adds	r3, #1
 800884a:	6123      	str	r3, [r4, #16]
 800884c:	2323      	movs	r3, #35	; 0x23
 800884e:	aa08      	add	r2, sp, #32
 8008850:	189b      	adds	r3, r3, r2
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d100      	bne.n	800885a <_printf_float+0x182>
 8008858:	e791      	b.n	800877e <_printf_float+0xa6>
 800885a:	0023      	movs	r3, r4
 800885c:	222d      	movs	r2, #45	; 0x2d
 800885e:	3343      	adds	r3, #67	; 0x43
 8008860:	701a      	strb	r2, [r3, #0]
 8008862:	e78c      	b.n	800877e <_printf_float+0xa6>
 8008864:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008866:	2a47      	cmp	r2, #71	; 0x47
 8008868:	d1b6      	bne.n	80087d8 <_printf_float+0x100>
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1b4      	bne.n	80087d8 <_printf_float+0x100>
 800886e:	3301      	adds	r3, #1
 8008870:	e7b1      	b.n	80087d6 <_printf_float+0xfe>
 8008872:	2e66      	cmp	r6, #102	; 0x66
 8008874:	d11b      	bne.n	80088ae <_printf_float+0x1d6>
 8008876:	6863      	ldr	r3, [r4, #4]
 8008878:	2900      	cmp	r1, #0
 800887a:	dd0d      	ble.n	8008898 <_printf_float+0x1c0>
 800887c:	6121      	str	r1, [r4, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d102      	bne.n	8008888 <_printf_float+0x1b0>
 8008882:	6822      	ldr	r2, [r4, #0]
 8008884:	07d2      	lsls	r2, r2, #31
 8008886:	d502      	bpl.n	800888e <_printf_float+0x1b6>
 8008888:	3301      	adds	r3, #1
 800888a:	1859      	adds	r1, r3, r1
 800888c:	6121      	str	r1, [r4, #16]
 800888e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008890:	65a3      	str	r3, [r4, #88]	; 0x58
 8008892:	2300      	movs	r3, #0
 8008894:	930a      	str	r3, [sp, #40]	; 0x28
 8008896:	e7d9      	b.n	800884c <_printf_float+0x174>
 8008898:	2b00      	cmp	r3, #0
 800889a:	d103      	bne.n	80088a4 <_printf_float+0x1cc>
 800889c:	2201      	movs	r2, #1
 800889e:	6821      	ldr	r1, [r4, #0]
 80088a0:	4211      	tst	r1, r2
 80088a2:	d000      	beq.n	80088a6 <_printf_float+0x1ce>
 80088a4:	1c9a      	adds	r2, r3, #2
 80088a6:	6122      	str	r2, [r4, #16]
 80088a8:	e7f1      	b.n	800888e <_printf_float+0x1b6>
 80088aa:	2367      	movs	r3, #103	; 0x67
 80088ac:	001e      	movs	r6, r3
 80088ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088b2:	4293      	cmp	r3, r2
 80088b4:	db06      	blt.n	80088c4 <_printf_float+0x1ec>
 80088b6:	6822      	ldr	r2, [r4, #0]
 80088b8:	6123      	str	r3, [r4, #16]
 80088ba:	07d2      	lsls	r2, r2, #31
 80088bc:	d5e7      	bpl.n	800888e <_printf_float+0x1b6>
 80088be:	3301      	adds	r3, #1
 80088c0:	6123      	str	r3, [r4, #16]
 80088c2:	e7e4      	b.n	800888e <_printf_float+0x1b6>
 80088c4:	2101      	movs	r1, #1
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	dc01      	bgt.n	80088ce <_printf_float+0x1f6>
 80088ca:	1849      	adds	r1, r1, r1
 80088cc:	1ac9      	subs	r1, r1, r3
 80088ce:	1852      	adds	r2, r2, r1
 80088d0:	e7e9      	b.n	80088a6 <_printf_float+0x1ce>
 80088d2:	6822      	ldr	r2, [r4, #0]
 80088d4:	0553      	lsls	r3, r2, #21
 80088d6:	d408      	bmi.n	80088ea <_printf_float+0x212>
 80088d8:	6923      	ldr	r3, [r4, #16]
 80088da:	002a      	movs	r2, r5
 80088dc:	0038      	movs	r0, r7
 80088de:	9908      	ldr	r1, [sp, #32]
 80088e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80088e2:	47a8      	blx	r5
 80088e4:	1c43      	adds	r3, r0, #1
 80088e6:	d129      	bne.n	800893c <_printf_float+0x264>
 80088e8:	e754      	b.n	8008794 <_printf_float+0xbc>
 80088ea:	2e65      	cmp	r6, #101	; 0x65
 80088ec:	d800      	bhi.n	80088f0 <_printf_float+0x218>
 80088ee:	e0ec      	b.n	8008aca <_printf_float+0x3f2>
 80088f0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80088f2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80088f4:	2200      	movs	r2, #0
 80088f6:	2300      	movs	r3, #0
 80088f8:	f7f7 fda8 	bl	800044c <__aeabi_dcmpeq>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d034      	beq.n	800896a <_printf_float+0x292>
 8008900:	2301      	movs	r3, #1
 8008902:	0038      	movs	r0, r7
 8008904:	4a37      	ldr	r2, [pc, #220]	; (80089e4 <_printf_float+0x30c>)
 8008906:	9908      	ldr	r1, [sp, #32]
 8008908:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800890a:	47a8      	blx	r5
 800890c:	1c43      	adds	r3, r0, #1
 800890e:	d100      	bne.n	8008912 <_printf_float+0x23a>
 8008910:	e740      	b.n	8008794 <_printf_float+0xbc>
 8008912:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008914:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008916:	4293      	cmp	r3, r2
 8008918:	db02      	blt.n	8008920 <_printf_float+0x248>
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	07db      	lsls	r3, r3, #31
 800891e:	d50d      	bpl.n	800893c <_printf_float+0x264>
 8008920:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008922:	0038      	movs	r0, r7
 8008924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008926:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008928:	9908      	ldr	r1, [sp, #32]
 800892a:	47a8      	blx	r5
 800892c:	2500      	movs	r5, #0
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	d100      	bne.n	8008934 <_printf_float+0x25c>
 8008932:	e72f      	b.n	8008794 <_printf_float+0xbc>
 8008934:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008936:	3b01      	subs	r3, #1
 8008938:	42ab      	cmp	r3, r5
 800893a:	dc0a      	bgt.n	8008952 <_printf_float+0x27a>
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	079b      	lsls	r3, r3, #30
 8008940:	d500      	bpl.n	8008944 <_printf_float+0x26c>
 8008942:	e114      	b.n	8008b6e <_printf_float+0x496>
 8008944:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008946:	68e0      	ldr	r0, [r4, #12]
 8008948:	4298      	cmp	r0, r3
 800894a:	db00      	blt.n	800894e <_printf_float+0x276>
 800894c:	e724      	b.n	8008798 <_printf_float+0xc0>
 800894e:	0018      	movs	r0, r3
 8008950:	e722      	b.n	8008798 <_printf_float+0xc0>
 8008952:	0022      	movs	r2, r4
 8008954:	2301      	movs	r3, #1
 8008956:	0038      	movs	r0, r7
 8008958:	9908      	ldr	r1, [sp, #32]
 800895a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800895c:	321a      	adds	r2, #26
 800895e:	47b0      	blx	r6
 8008960:	1c43      	adds	r3, r0, #1
 8008962:	d100      	bne.n	8008966 <_printf_float+0x28e>
 8008964:	e716      	b.n	8008794 <_printf_float+0xbc>
 8008966:	3501      	adds	r5, #1
 8008968:	e7e4      	b.n	8008934 <_printf_float+0x25c>
 800896a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800896c:	2b00      	cmp	r3, #0
 800896e:	dc3b      	bgt.n	80089e8 <_printf_float+0x310>
 8008970:	2301      	movs	r3, #1
 8008972:	0038      	movs	r0, r7
 8008974:	4a1b      	ldr	r2, [pc, #108]	; (80089e4 <_printf_float+0x30c>)
 8008976:	9908      	ldr	r1, [sp, #32]
 8008978:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800897a:	47b0      	blx	r6
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d100      	bne.n	8008982 <_printf_float+0x2aa>
 8008980:	e708      	b.n	8008794 <_printf_float+0xbc>
 8008982:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008984:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008986:	4313      	orrs	r3, r2
 8008988:	d102      	bne.n	8008990 <_printf_float+0x2b8>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	07db      	lsls	r3, r3, #31
 800898e:	d5d5      	bpl.n	800893c <_printf_float+0x264>
 8008990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008992:	0038      	movs	r0, r7
 8008994:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008996:	9908      	ldr	r1, [sp, #32]
 8008998:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800899a:	47b0      	blx	r6
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d100      	bne.n	80089a2 <_printf_float+0x2ca>
 80089a0:	e6f8      	b.n	8008794 <_printf_float+0xbc>
 80089a2:	2300      	movs	r3, #0
 80089a4:	930a      	str	r3, [sp, #40]	; 0x28
 80089a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089aa:	425b      	negs	r3, r3
 80089ac:	4293      	cmp	r3, r2
 80089ae:	dc01      	bgt.n	80089b4 <_printf_float+0x2dc>
 80089b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089b2:	e792      	b.n	80088da <_printf_float+0x202>
 80089b4:	0022      	movs	r2, r4
 80089b6:	2301      	movs	r3, #1
 80089b8:	0038      	movs	r0, r7
 80089ba:	9908      	ldr	r1, [sp, #32]
 80089bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80089be:	321a      	adds	r2, #26
 80089c0:	47b0      	blx	r6
 80089c2:	1c43      	adds	r3, r0, #1
 80089c4:	d100      	bne.n	80089c8 <_printf_float+0x2f0>
 80089c6:	e6e5      	b.n	8008794 <_printf_float+0xbc>
 80089c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ca:	3301      	adds	r3, #1
 80089cc:	e7ea      	b.n	80089a4 <_printf_float+0x2cc>
 80089ce:	46c0      	nop			; (mov r8, r8)
 80089d0:	7fefffff 	.word	0x7fefffff
 80089d4:	0800c5a4 	.word	0x0800c5a4
 80089d8:	0800c5a8 	.word	0x0800c5a8
 80089dc:	0800c5ac 	.word	0x0800c5ac
 80089e0:	0800c5b0 	.word	0x0800c5b0
 80089e4:	0800c5b4 	.word	0x0800c5b4
 80089e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089ec:	920a      	str	r2, [sp, #40]	; 0x28
 80089ee:	429a      	cmp	r2, r3
 80089f0:	dd00      	ble.n	80089f4 <_printf_float+0x31c>
 80089f2:	930a      	str	r3, [sp, #40]	; 0x28
 80089f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	dc3d      	bgt.n	8008a76 <_printf_float+0x39e>
 80089fa:	2300      	movs	r3, #0
 80089fc:	930e      	str	r3, [sp, #56]	; 0x38
 80089fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a00:	43db      	mvns	r3, r3
 8008a02:	17db      	asrs	r3, r3, #31
 8008a04:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a0a:	930c      	str	r3, [sp, #48]	; 0x30
 8008a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a0e:	4013      	ands	r3, r2
 8008a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a16:	4293      	cmp	r3, r2
 8008a18:	dc36      	bgt.n	8008a88 <_printf_float+0x3b0>
 8008a1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	db40      	blt.n	8008aa4 <_printf_float+0x3cc>
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	07db      	lsls	r3, r3, #31
 8008a26:	d43d      	bmi.n	8008aa4 <_printf_float+0x3cc>
 8008a28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	1a52      	subs	r2, r2, r1
 8008a32:	920a      	str	r2, [sp, #40]	; 0x28
 8008a34:	429a      	cmp	r2, r3
 8008a36:	dd00      	ble.n	8008a3a <_printf_float+0x362>
 8008a38:	930a      	str	r3, [sp, #40]	; 0x28
 8008a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	dc3a      	bgt.n	8008ab6 <_printf_float+0x3de>
 8008a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a42:	2500      	movs	r5, #0
 8008a44:	43db      	mvns	r3, r3
 8008a46:	17db      	asrs	r3, r3, #31
 8008a48:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a50:	1a9b      	subs	r3, r3, r2
 8008a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a54:	400a      	ands	r2, r1
 8008a56:	1a9b      	subs	r3, r3, r2
 8008a58:	42ab      	cmp	r3, r5
 8008a5a:	dc00      	bgt.n	8008a5e <_printf_float+0x386>
 8008a5c:	e76e      	b.n	800893c <_printf_float+0x264>
 8008a5e:	0022      	movs	r2, r4
 8008a60:	2301      	movs	r3, #1
 8008a62:	0038      	movs	r0, r7
 8008a64:	9908      	ldr	r1, [sp, #32]
 8008a66:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008a68:	321a      	adds	r2, #26
 8008a6a:	47b0      	blx	r6
 8008a6c:	1c43      	adds	r3, r0, #1
 8008a6e:	d100      	bne.n	8008a72 <_printf_float+0x39a>
 8008a70:	e690      	b.n	8008794 <_printf_float+0xbc>
 8008a72:	3501      	adds	r5, #1
 8008a74:	e7e9      	b.n	8008a4a <_printf_float+0x372>
 8008a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a78:	002a      	movs	r2, r5
 8008a7a:	0038      	movs	r0, r7
 8008a7c:	9908      	ldr	r1, [sp, #32]
 8008a7e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008a80:	47b0      	blx	r6
 8008a82:	1c43      	adds	r3, r0, #1
 8008a84:	d1b9      	bne.n	80089fa <_printf_float+0x322>
 8008a86:	e685      	b.n	8008794 <_printf_float+0xbc>
 8008a88:	0022      	movs	r2, r4
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	0038      	movs	r0, r7
 8008a8e:	9908      	ldr	r1, [sp, #32]
 8008a90:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008a92:	321a      	adds	r2, #26
 8008a94:	47b0      	blx	r6
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	d100      	bne.n	8008a9c <_printf_float+0x3c4>
 8008a9a:	e67b      	b.n	8008794 <_printf_float+0xbc>
 8008a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	930e      	str	r3, [sp, #56]	; 0x38
 8008aa2:	e7b0      	b.n	8008a06 <_printf_float+0x32e>
 8008aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aa6:	0038      	movs	r0, r7
 8008aa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008aaa:	9908      	ldr	r1, [sp, #32]
 8008aac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008aae:	47b0      	blx	r6
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d1b9      	bne.n	8008a28 <_printf_float+0x350>
 8008ab4:	e66e      	b.n	8008794 <_printf_float+0xbc>
 8008ab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ab8:	0038      	movs	r0, r7
 8008aba:	18ea      	adds	r2, r5, r3
 8008abc:	9908      	ldr	r1, [sp, #32]
 8008abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ac2:	47a8      	blx	r5
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d1bb      	bne.n	8008a40 <_printf_float+0x368>
 8008ac8:	e664      	b.n	8008794 <_printf_float+0xbc>
 8008aca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	dc02      	bgt.n	8008ad6 <_printf_float+0x3fe>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	421a      	tst	r2, r3
 8008ad4:	d038      	beq.n	8008b48 <_printf_float+0x470>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	002a      	movs	r2, r5
 8008ada:	0038      	movs	r0, r7
 8008adc:	9908      	ldr	r1, [sp, #32]
 8008ade:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ae0:	47b0      	blx	r6
 8008ae2:	1c43      	adds	r3, r0, #1
 8008ae4:	d100      	bne.n	8008ae8 <_printf_float+0x410>
 8008ae6:	e655      	b.n	8008794 <_printf_float+0xbc>
 8008ae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aea:	0038      	movs	r0, r7
 8008aec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008aee:	9908      	ldr	r1, [sp, #32]
 8008af0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008af2:	47b0      	blx	r6
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	d100      	bne.n	8008afa <_printf_float+0x422>
 8008af8:	e64c      	b.n	8008794 <_printf_float+0xbc>
 8008afa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008afc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008afe:	2200      	movs	r2, #0
 8008b00:	2300      	movs	r3, #0
 8008b02:	f7f7 fca3 	bl	800044c <__aeabi_dcmpeq>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d11c      	bne.n	8008b44 <_printf_float+0x46c>
 8008b0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b0c:	1c6a      	adds	r2, r5, #1
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	0038      	movs	r0, r7
 8008b12:	9908      	ldr	r1, [sp, #32]
 8008b14:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b16:	47a8      	blx	r5
 8008b18:	1c43      	adds	r3, r0, #1
 8008b1a:	d10f      	bne.n	8008b3c <_printf_float+0x464>
 8008b1c:	e63a      	b.n	8008794 <_printf_float+0xbc>
 8008b1e:	0022      	movs	r2, r4
 8008b20:	2301      	movs	r3, #1
 8008b22:	0038      	movs	r0, r7
 8008b24:	9908      	ldr	r1, [sp, #32]
 8008b26:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008b28:	321a      	adds	r2, #26
 8008b2a:	47b0      	blx	r6
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	d100      	bne.n	8008b32 <_printf_float+0x45a>
 8008b30:	e630      	b.n	8008794 <_printf_float+0xbc>
 8008b32:	3501      	adds	r5, #1
 8008b34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b36:	3b01      	subs	r3, #1
 8008b38:	42ab      	cmp	r3, r5
 8008b3a:	dcf0      	bgt.n	8008b1e <_printf_float+0x446>
 8008b3c:	0022      	movs	r2, r4
 8008b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b40:	3250      	adds	r2, #80	; 0x50
 8008b42:	e6cb      	b.n	80088dc <_printf_float+0x204>
 8008b44:	2500      	movs	r5, #0
 8008b46:	e7f5      	b.n	8008b34 <_printf_float+0x45c>
 8008b48:	002a      	movs	r2, r5
 8008b4a:	e7e1      	b.n	8008b10 <_printf_float+0x438>
 8008b4c:	0022      	movs	r2, r4
 8008b4e:	2301      	movs	r3, #1
 8008b50:	0038      	movs	r0, r7
 8008b52:	9908      	ldr	r1, [sp, #32]
 8008b54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008b56:	3219      	adds	r2, #25
 8008b58:	47b0      	blx	r6
 8008b5a:	1c43      	adds	r3, r0, #1
 8008b5c:	d100      	bne.n	8008b60 <_printf_float+0x488>
 8008b5e:	e619      	b.n	8008794 <_printf_float+0xbc>
 8008b60:	3501      	adds	r5, #1
 8008b62:	68e3      	ldr	r3, [r4, #12]
 8008b64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b66:	1a9b      	subs	r3, r3, r2
 8008b68:	42ab      	cmp	r3, r5
 8008b6a:	dcef      	bgt.n	8008b4c <_printf_float+0x474>
 8008b6c:	e6ea      	b.n	8008944 <_printf_float+0x26c>
 8008b6e:	2500      	movs	r5, #0
 8008b70:	e7f7      	b.n	8008b62 <_printf_float+0x48a>
 8008b72:	46c0      	nop			; (mov r8, r8)

08008b74 <_printf_common>:
 8008b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b76:	0015      	movs	r5, r2
 8008b78:	9301      	str	r3, [sp, #4]
 8008b7a:	688a      	ldr	r2, [r1, #8]
 8008b7c:	690b      	ldr	r3, [r1, #16]
 8008b7e:	000c      	movs	r4, r1
 8008b80:	9000      	str	r0, [sp, #0]
 8008b82:	4293      	cmp	r3, r2
 8008b84:	da00      	bge.n	8008b88 <_printf_common+0x14>
 8008b86:	0013      	movs	r3, r2
 8008b88:	0022      	movs	r2, r4
 8008b8a:	602b      	str	r3, [r5, #0]
 8008b8c:	3243      	adds	r2, #67	; 0x43
 8008b8e:	7812      	ldrb	r2, [r2, #0]
 8008b90:	2a00      	cmp	r2, #0
 8008b92:	d001      	beq.n	8008b98 <_printf_common+0x24>
 8008b94:	3301      	adds	r3, #1
 8008b96:	602b      	str	r3, [r5, #0]
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	069b      	lsls	r3, r3, #26
 8008b9c:	d502      	bpl.n	8008ba4 <_printf_common+0x30>
 8008b9e:	682b      	ldr	r3, [r5, #0]
 8008ba0:	3302      	adds	r3, #2
 8008ba2:	602b      	str	r3, [r5, #0]
 8008ba4:	6822      	ldr	r2, [r4, #0]
 8008ba6:	2306      	movs	r3, #6
 8008ba8:	0017      	movs	r7, r2
 8008baa:	401f      	ands	r7, r3
 8008bac:	421a      	tst	r2, r3
 8008bae:	d027      	beq.n	8008c00 <_printf_common+0x8c>
 8008bb0:	0023      	movs	r3, r4
 8008bb2:	3343      	adds	r3, #67	; 0x43
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	1e5a      	subs	r2, r3, #1
 8008bb8:	4193      	sbcs	r3, r2
 8008bba:	6822      	ldr	r2, [r4, #0]
 8008bbc:	0692      	lsls	r2, r2, #26
 8008bbe:	d430      	bmi.n	8008c22 <_printf_common+0xae>
 8008bc0:	0022      	movs	r2, r4
 8008bc2:	9901      	ldr	r1, [sp, #4]
 8008bc4:	9800      	ldr	r0, [sp, #0]
 8008bc6:	9e08      	ldr	r6, [sp, #32]
 8008bc8:	3243      	adds	r2, #67	; 0x43
 8008bca:	47b0      	blx	r6
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	d025      	beq.n	8008c1c <_printf_common+0xa8>
 8008bd0:	2306      	movs	r3, #6
 8008bd2:	6820      	ldr	r0, [r4, #0]
 8008bd4:	682a      	ldr	r2, [r5, #0]
 8008bd6:	68e1      	ldr	r1, [r4, #12]
 8008bd8:	2500      	movs	r5, #0
 8008bda:	4003      	ands	r3, r0
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	d103      	bne.n	8008be8 <_printf_common+0x74>
 8008be0:	1a8d      	subs	r5, r1, r2
 8008be2:	43eb      	mvns	r3, r5
 8008be4:	17db      	asrs	r3, r3, #31
 8008be6:	401d      	ands	r5, r3
 8008be8:	68a3      	ldr	r3, [r4, #8]
 8008bea:	6922      	ldr	r2, [r4, #16]
 8008bec:	4293      	cmp	r3, r2
 8008bee:	dd01      	ble.n	8008bf4 <_printf_common+0x80>
 8008bf0:	1a9b      	subs	r3, r3, r2
 8008bf2:	18ed      	adds	r5, r5, r3
 8008bf4:	2700      	movs	r7, #0
 8008bf6:	42bd      	cmp	r5, r7
 8008bf8:	d120      	bne.n	8008c3c <_printf_common+0xc8>
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	e010      	b.n	8008c20 <_printf_common+0xac>
 8008bfe:	3701      	adds	r7, #1
 8008c00:	68e3      	ldr	r3, [r4, #12]
 8008c02:	682a      	ldr	r2, [r5, #0]
 8008c04:	1a9b      	subs	r3, r3, r2
 8008c06:	42bb      	cmp	r3, r7
 8008c08:	ddd2      	ble.n	8008bb0 <_printf_common+0x3c>
 8008c0a:	0022      	movs	r2, r4
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	9901      	ldr	r1, [sp, #4]
 8008c10:	9800      	ldr	r0, [sp, #0]
 8008c12:	9e08      	ldr	r6, [sp, #32]
 8008c14:	3219      	adds	r2, #25
 8008c16:	47b0      	blx	r6
 8008c18:	1c43      	adds	r3, r0, #1
 8008c1a:	d1f0      	bne.n	8008bfe <_printf_common+0x8a>
 8008c1c:	2001      	movs	r0, #1
 8008c1e:	4240      	negs	r0, r0
 8008c20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c22:	2030      	movs	r0, #48	; 0x30
 8008c24:	18e1      	adds	r1, r4, r3
 8008c26:	3143      	adds	r1, #67	; 0x43
 8008c28:	7008      	strb	r0, [r1, #0]
 8008c2a:	0021      	movs	r1, r4
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	3145      	adds	r1, #69	; 0x45
 8008c30:	7809      	ldrb	r1, [r1, #0]
 8008c32:	18a2      	adds	r2, r4, r2
 8008c34:	3243      	adds	r2, #67	; 0x43
 8008c36:	3302      	adds	r3, #2
 8008c38:	7011      	strb	r1, [r2, #0]
 8008c3a:	e7c1      	b.n	8008bc0 <_printf_common+0x4c>
 8008c3c:	0022      	movs	r2, r4
 8008c3e:	2301      	movs	r3, #1
 8008c40:	9901      	ldr	r1, [sp, #4]
 8008c42:	9800      	ldr	r0, [sp, #0]
 8008c44:	9e08      	ldr	r6, [sp, #32]
 8008c46:	321a      	adds	r2, #26
 8008c48:	47b0      	blx	r6
 8008c4a:	1c43      	adds	r3, r0, #1
 8008c4c:	d0e6      	beq.n	8008c1c <_printf_common+0xa8>
 8008c4e:	3701      	adds	r7, #1
 8008c50:	e7d1      	b.n	8008bf6 <_printf_common+0x82>
	...

08008c54 <_printf_i>:
 8008c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c56:	b08b      	sub	sp, #44	; 0x2c
 8008c58:	9206      	str	r2, [sp, #24]
 8008c5a:	000a      	movs	r2, r1
 8008c5c:	3243      	adds	r2, #67	; 0x43
 8008c5e:	9307      	str	r3, [sp, #28]
 8008c60:	9005      	str	r0, [sp, #20]
 8008c62:	9204      	str	r2, [sp, #16]
 8008c64:	7e0a      	ldrb	r2, [r1, #24]
 8008c66:	000c      	movs	r4, r1
 8008c68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c6a:	2a78      	cmp	r2, #120	; 0x78
 8008c6c:	d806      	bhi.n	8008c7c <_printf_i+0x28>
 8008c6e:	2a62      	cmp	r2, #98	; 0x62
 8008c70:	d808      	bhi.n	8008c84 <_printf_i+0x30>
 8008c72:	2a00      	cmp	r2, #0
 8008c74:	d100      	bne.n	8008c78 <_printf_i+0x24>
 8008c76:	e0c0      	b.n	8008dfa <_printf_i+0x1a6>
 8008c78:	2a58      	cmp	r2, #88	; 0x58
 8008c7a:	d052      	beq.n	8008d22 <_printf_i+0xce>
 8008c7c:	0026      	movs	r6, r4
 8008c7e:	3642      	adds	r6, #66	; 0x42
 8008c80:	7032      	strb	r2, [r6, #0]
 8008c82:	e022      	b.n	8008cca <_printf_i+0x76>
 8008c84:	0010      	movs	r0, r2
 8008c86:	3863      	subs	r0, #99	; 0x63
 8008c88:	2815      	cmp	r0, #21
 8008c8a:	d8f7      	bhi.n	8008c7c <_printf_i+0x28>
 8008c8c:	f7f7 fa4e 	bl	800012c <__gnu_thumb1_case_shi>
 8008c90:	001f0016 	.word	0x001f0016
 8008c94:	fff6fff6 	.word	0xfff6fff6
 8008c98:	fff6fff6 	.word	0xfff6fff6
 8008c9c:	fff6001f 	.word	0xfff6001f
 8008ca0:	fff6fff6 	.word	0xfff6fff6
 8008ca4:	00a8fff6 	.word	0x00a8fff6
 8008ca8:	009a0036 	.word	0x009a0036
 8008cac:	fff6fff6 	.word	0xfff6fff6
 8008cb0:	fff600b9 	.word	0xfff600b9
 8008cb4:	fff60036 	.word	0xfff60036
 8008cb8:	009efff6 	.word	0x009efff6
 8008cbc:	0026      	movs	r6, r4
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	3642      	adds	r6, #66	; 0x42
 8008cc2:	1d11      	adds	r1, r2, #4
 8008cc4:	6019      	str	r1, [r3, #0]
 8008cc6:	6813      	ldr	r3, [r2, #0]
 8008cc8:	7033      	strb	r3, [r6, #0]
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e0a7      	b.n	8008e1e <_printf_i+0x1ca>
 8008cce:	6808      	ldr	r0, [r1, #0]
 8008cd0:	6819      	ldr	r1, [r3, #0]
 8008cd2:	1d0a      	adds	r2, r1, #4
 8008cd4:	0605      	lsls	r5, r0, #24
 8008cd6:	d50b      	bpl.n	8008cf0 <_printf_i+0x9c>
 8008cd8:	680d      	ldr	r5, [r1, #0]
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	2d00      	cmp	r5, #0
 8008cde:	da03      	bge.n	8008ce8 <_printf_i+0x94>
 8008ce0:	232d      	movs	r3, #45	; 0x2d
 8008ce2:	9a04      	ldr	r2, [sp, #16]
 8008ce4:	426d      	negs	r5, r5
 8008ce6:	7013      	strb	r3, [r2, #0]
 8008ce8:	4b61      	ldr	r3, [pc, #388]	; (8008e70 <_printf_i+0x21c>)
 8008cea:	270a      	movs	r7, #10
 8008cec:	9303      	str	r3, [sp, #12]
 8008cee:	e032      	b.n	8008d56 <_printf_i+0x102>
 8008cf0:	680d      	ldr	r5, [r1, #0]
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	0641      	lsls	r1, r0, #25
 8008cf6:	d5f1      	bpl.n	8008cdc <_printf_i+0x88>
 8008cf8:	b22d      	sxth	r5, r5
 8008cfa:	e7ef      	b.n	8008cdc <_printf_i+0x88>
 8008cfc:	680d      	ldr	r5, [r1, #0]
 8008cfe:	6819      	ldr	r1, [r3, #0]
 8008d00:	1d08      	adds	r0, r1, #4
 8008d02:	6018      	str	r0, [r3, #0]
 8008d04:	062e      	lsls	r6, r5, #24
 8008d06:	d501      	bpl.n	8008d0c <_printf_i+0xb8>
 8008d08:	680d      	ldr	r5, [r1, #0]
 8008d0a:	e003      	b.n	8008d14 <_printf_i+0xc0>
 8008d0c:	066d      	lsls	r5, r5, #25
 8008d0e:	d5fb      	bpl.n	8008d08 <_printf_i+0xb4>
 8008d10:	680d      	ldr	r5, [r1, #0]
 8008d12:	b2ad      	uxth	r5, r5
 8008d14:	4b56      	ldr	r3, [pc, #344]	; (8008e70 <_printf_i+0x21c>)
 8008d16:	270a      	movs	r7, #10
 8008d18:	9303      	str	r3, [sp, #12]
 8008d1a:	2a6f      	cmp	r2, #111	; 0x6f
 8008d1c:	d117      	bne.n	8008d4e <_printf_i+0xfa>
 8008d1e:	2708      	movs	r7, #8
 8008d20:	e015      	b.n	8008d4e <_printf_i+0xfa>
 8008d22:	3145      	adds	r1, #69	; 0x45
 8008d24:	700a      	strb	r2, [r1, #0]
 8008d26:	4a52      	ldr	r2, [pc, #328]	; (8008e70 <_printf_i+0x21c>)
 8008d28:	9203      	str	r2, [sp, #12]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	6821      	ldr	r1, [r4, #0]
 8008d2e:	ca20      	ldmia	r2!, {r5}
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	0608      	lsls	r0, r1, #24
 8008d34:	d550      	bpl.n	8008dd8 <_printf_i+0x184>
 8008d36:	07cb      	lsls	r3, r1, #31
 8008d38:	d502      	bpl.n	8008d40 <_printf_i+0xec>
 8008d3a:	2320      	movs	r3, #32
 8008d3c:	4319      	orrs	r1, r3
 8008d3e:	6021      	str	r1, [r4, #0]
 8008d40:	2710      	movs	r7, #16
 8008d42:	2d00      	cmp	r5, #0
 8008d44:	d103      	bne.n	8008d4e <_printf_i+0xfa>
 8008d46:	2320      	movs	r3, #32
 8008d48:	6822      	ldr	r2, [r4, #0]
 8008d4a:	439a      	bics	r2, r3
 8008d4c:	6022      	str	r2, [r4, #0]
 8008d4e:	0023      	movs	r3, r4
 8008d50:	2200      	movs	r2, #0
 8008d52:	3343      	adds	r3, #67	; 0x43
 8008d54:	701a      	strb	r2, [r3, #0]
 8008d56:	6863      	ldr	r3, [r4, #4]
 8008d58:	60a3      	str	r3, [r4, #8]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	db03      	blt.n	8008d66 <_printf_i+0x112>
 8008d5e:	2204      	movs	r2, #4
 8008d60:	6821      	ldr	r1, [r4, #0]
 8008d62:	4391      	bics	r1, r2
 8008d64:	6021      	str	r1, [r4, #0]
 8008d66:	2d00      	cmp	r5, #0
 8008d68:	d102      	bne.n	8008d70 <_printf_i+0x11c>
 8008d6a:	9e04      	ldr	r6, [sp, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00c      	beq.n	8008d8a <_printf_i+0x136>
 8008d70:	9e04      	ldr	r6, [sp, #16]
 8008d72:	0028      	movs	r0, r5
 8008d74:	0039      	movs	r1, r7
 8008d76:	f7f7 fa69 	bl	800024c <__aeabi_uidivmod>
 8008d7a:	9b03      	ldr	r3, [sp, #12]
 8008d7c:	3e01      	subs	r6, #1
 8008d7e:	5c5b      	ldrb	r3, [r3, r1]
 8008d80:	7033      	strb	r3, [r6, #0]
 8008d82:	002b      	movs	r3, r5
 8008d84:	0005      	movs	r5, r0
 8008d86:	429f      	cmp	r7, r3
 8008d88:	d9f3      	bls.n	8008d72 <_printf_i+0x11e>
 8008d8a:	2f08      	cmp	r7, #8
 8008d8c:	d109      	bne.n	8008da2 <_printf_i+0x14e>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	07db      	lsls	r3, r3, #31
 8008d92:	d506      	bpl.n	8008da2 <_printf_i+0x14e>
 8008d94:	6863      	ldr	r3, [r4, #4]
 8008d96:	6922      	ldr	r2, [r4, #16]
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	dc02      	bgt.n	8008da2 <_printf_i+0x14e>
 8008d9c:	2330      	movs	r3, #48	; 0x30
 8008d9e:	3e01      	subs	r6, #1
 8008da0:	7033      	strb	r3, [r6, #0]
 8008da2:	9b04      	ldr	r3, [sp, #16]
 8008da4:	1b9b      	subs	r3, r3, r6
 8008da6:	6123      	str	r3, [r4, #16]
 8008da8:	9b07      	ldr	r3, [sp, #28]
 8008daa:	0021      	movs	r1, r4
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	9805      	ldr	r0, [sp, #20]
 8008db0:	9b06      	ldr	r3, [sp, #24]
 8008db2:	aa09      	add	r2, sp, #36	; 0x24
 8008db4:	f7ff fede 	bl	8008b74 <_printf_common>
 8008db8:	1c43      	adds	r3, r0, #1
 8008dba:	d135      	bne.n	8008e28 <_printf_i+0x1d4>
 8008dbc:	2001      	movs	r0, #1
 8008dbe:	4240      	negs	r0, r0
 8008dc0:	b00b      	add	sp, #44	; 0x2c
 8008dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	6809      	ldr	r1, [r1, #0]
 8008dc8:	430a      	orrs	r2, r1
 8008dca:	6022      	str	r2, [r4, #0]
 8008dcc:	0022      	movs	r2, r4
 8008dce:	2178      	movs	r1, #120	; 0x78
 8008dd0:	3245      	adds	r2, #69	; 0x45
 8008dd2:	7011      	strb	r1, [r2, #0]
 8008dd4:	4a27      	ldr	r2, [pc, #156]	; (8008e74 <_printf_i+0x220>)
 8008dd6:	e7a7      	b.n	8008d28 <_printf_i+0xd4>
 8008dd8:	0648      	lsls	r0, r1, #25
 8008dda:	d5ac      	bpl.n	8008d36 <_printf_i+0xe2>
 8008ddc:	b2ad      	uxth	r5, r5
 8008dde:	e7aa      	b.n	8008d36 <_printf_i+0xe2>
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	680d      	ldr	r5, [r1, #0]
 8008de4:	1d10      	adds	r0, r2, #4
 8008de6:	6949      	ldr	r1, [r1, #20]
 8008de8:	6018      	str	r0, [r3, #0]
 8008dea:	6813      	ldr	r3, [r2, #0]
 8008dec:	062e      	lsls	r6, r5, #24
 8008dee:	d501      	bpl.n	8008df4 <_printf_i+0x1a0>
 8008df0:	6019      	str	r1, [r3, #0]
 8008df2:	e002      	b.n	8008dfa <_printf_i+0x1a6>
 8008df4:	066d      	lsls	r5, r5, #25
 8008df6:	d5fb      	bpl.n	8008df0 <_printf_i+0x19c>
 8008df8:	8019      	strh	r1, [r3, #0]
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	9e04      	ldr	r6, [sp, #16]
 8008dfe:	6123      	str	r3, [r4, #16]
 8008e00:	e7d2      	b.n	8008da8 <_printf_i+0x154>
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	1d11      	adds	r1, r2, #4
 8008e06:	6019      	str	r1, [r3, #0]
 8008e08:	6816      	ldr	r6, [r2, #0]
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	0030      	movs	r0, r6
 8008e0e:	6862      	ldr	r2, [r4, #4]
 8008e10:	f000 ff0a 	bl	8009c28 <memchr>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d001      	beq.n	8008e1c <_printf_i+0x1c8>
 8008e18:	1b80      	subs	r0, r0, r6
 8008e1a:	6060      	str	r0, [r4, #4]
 8008e1c:	6863      	ldr	r3, [r4, #4]
 8008e1e:	6123      	str	r3, [r4, #16]
 8008e20:	2300      	movs	r3, #0
 8008e22:	9a04      	ldr	r2, [sp, #16]
 8008e24:	7013      	strb	r3, [r2, #0]
 8008e26:	e7bf      	b.n	8008da8 <_printf_i+0x154>
 8008e28:	6923      	ldr	r3, [r4, #16]
 8008e2a:	0032      	movs	r2, r6
 8008e2c:	9906      	ldr	r1, [sp, #24]
 8008e2e:	9805      	ldr	r0, [sp, #20]
 8008e30:	9d07      	ldr	r5, [sp, #28]
 8008e32:	47a8      	blx	r5
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d0c1      	beq.n	8008dbc <_printf_i+0x168>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	079b      	lsls	r3, r3, #30
 8008e3c:	d415      	bmi.n	8008e6a <_printf_i+0x216>
 8008e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e40:	68e0      	ldr	r0, [r4, #12]
 8008e42:	4298      	cmp	r0, r3
 8008e44:	dabc      	bge.n	8008dc0 <_printf_i+0x16c>
 8008e46:	0018      	movs	r0, r3
 8008e48:	e7ba      	b.n	8008dc0 <_printf_i+0x16c>
 8008e4a:	0022      	movs	r2, r4
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	9906      	ldr	r1, [sp, #24]
 8008e50:	9805      	ldr	r0, [sp, #20]
 8008e52:	9e07      	ldr	r6, [sp, #28]
 8008e54:	3219      	adds	r2, #25
 8008e56:	47b0      	blx	r6
 8008e58:	1c43      	adds	r3, r0, #1
 8008e5a:	d0af      	beq.n	8008dbc <_printf_i+0x168>
 8008e5c:	3501      	adds	r5, #1
 8008e5e:	68e3      	ldr	r3, [r4, #12]
 8008e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e62:	1a9b      	subs	r3, r3, r2
 8008e64:	42ab      	cmp	r3, r5
 8008e66:	dcf0      	bgt.n	8008e4a <_printf_i+0x1f6>
 8008e68:	e7e9      	b.n	8008e3e <_printf_i+0x1ea>
 8008e6a:	2500      	movs	r5, #0
 8008e6c:	e7f7      	b.n	8008e5e <_printf_i+0x20a>
 8008e6e:	46c0      	nop			; (mov r8, r8)
 8008e70:	0800c5b6 	.word	0x0800c5b6
 8008e74:	0800c5c7 	.word	0x0800c5c7

08008e78 <siprintf>:
 8008e78:	b40e      	push	{r1, r2, r3}
 8008e7a:	b500      	push	{lr}
 8008e7c:	490b      	ldr	r1, [pc, #44]	; (8008eac <siprintf+0x34>)
 8008e7e:	b09c      	sub	sp, #112	; 0x70
 8008e80:	ab1d      	add	r3, sp, #116	; 0x74
 8008e82:	9002      	str	r0, [sp, #8]
 8008e84:	9006      	str	r0, [sp, #24]
 8008e86:	9107      	str	r1, [sp, #28]
 8008e88:	9104      	str	r1, [sp, #16]
 8008e8a:	4809      	ldr	r0, [pc, #36]	; (8008eb0 <siprintf+0x38>)
 8008e8c:	4909      	ldr	r1, [pc, #36]	; (8008eb4 <siprintf+0x3c>)
 8008e8e:	cb04      	ldmia	r3!, {r2}
 8008e90:	9105      	str	r1, [sp, #20]
 8008e92:	6800      	ldr	r0, [r0, #0]
 8008e94:	a902      	add	r1, sp, #8
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	f001 fb90 	bl	800a5bc <_svfiprintf_r>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	9a02      	ldr	r2, [sp, #8]
 8008ea0:	7013      	strb	r3, [r2, #0]
 8008ea2:	b01c      	add	sp, #112	; 0x70
 8008ea4:	bc08      	pop	{r3}
 8008ea6:	b003      	add	sp, #12
 8008ea8:	4718      	bx	r3
 8008eaa:	46c0      	nop			; (mov r8, r8)
 8008eac:	7fffffff 	.word	0x7fffffff
 8008eb0:	2000000c 	.word	0x2000000c
 8008eb4:	ffff0208 	.word	0xffff0208

08008eb8 <quorem>:
 8008eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eba:	0006      	movs	r6, r0
 8008ebc:	690d      	ldr	r5, [r1, #16]
 8008ebe:	6933      	ldr	r3, [r6, #16]
 8008ec0:	b087      	sub	sp, #28
 8008ec2:	2000      	movs	r0, #0
 8008ec4:	9102      	str	r1, [sp, #8]
 8008ec6:	42ab      	cmp	r3, r5
 8008ec8:	db6b      	blt.n	8008fa2 <quorem+0xea>
 8008eca:	000b      	movs	r3, r1
 8008ecc:	3d01      	subs	r5, #1
 8008ece:	00ac      	lsls	r4, r5, #2
 8008ed0:	3314      	adds	r3, #20
 8008ed2:	9305      	str	r3, [sp, #20]
 8008ed4:	191b      	adds	r3, r3, r4
 8008ed6:	9303      	str	r3, [sp, #12]
 8008ed8:	0033      	movs	r3, r6
 8008eda:	3314      	adds	r3, #20
 8008edc:	9301      	str	r3, [sp, #4]
 8008ede:	191c      	adds	r4, r3, r4
 8008ee0:	9b03      	ldr	r3, [sp, #12]
 8008ee2:	6827      	ldr	r7, [r4, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	0038      	movs	r0, r7
 8008ee8:	9300      	str	r3, [sp, #0]
 8008eea:	3301      	adds	r3, #1
 8008eec:	0019      	movs	r1, r3
 8008eee:	9304      	str	r3, [sp, #16]
 8008ef0:	f7f7 f926 	bl	8000140 <__udivsi3>
 8008ef4:	9b04      	ldr	r3, [sp, #16]
 8008ef6:	9000      	str	r0, [sp, #0]
 8008ef8:	429f      	cmp	r7, r3
 8008efa:	d329      	bcc.n	8008f50 <quorem+0x98>
 8008efc:	2300      	movs	r3, #0
 8008efe:	469c      	mov	ip, r3
 8008f00:	9801      	ldr	r0, [sp, #4]
 8008f02:	9f05      	ldr	r7, [sp, #20]
 8008f04:	9304      	str	r3, [sp, #16]
 8008f06:	cf08      	ldmia	r7!, {r3}
 8008f08:	9a00      	ldr	r2, [sp, #0]
 8008f0a:	b299      	uxth	r1, r3
 8008f0c:	4351      	muls	r1, r2
 8008f0e:	0c1b      	lsrs	r3, r3, #16
 8008f10:	4353      	muls	r3, r2
 8008f12:	4461      	add	r1, ip
 8008f14:	0c0a      	lsrs	r2, r1, #16
 8008f16:	189b      	adds	r3, r3, r2
 8008f18:	0c1a      	lsrs	r2, r3, #16
 8008f1a:	9305      	str	r3, [sp, #20]
 8008f1c:	6803      	ldr	r3, [r0, #0]
 8008f1e:	4694      	mov	ip, r2
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	9b04      	ldr	r3, [sp, #16]
 8008f24:	b289      	uxth	r1, r1
 8008f26:	18d2      	adds	r2, r2, r3
 8008f28:	6803      	ldr	r3, [r0, #0]
 8008f2a:	1a52      	subs	r2, r2, r1
 8008f2c:	0c19      	lsrs	r1, r3, #16
 8008f2e:	466b      	mov	r3, sp
 8008f30:	8a9b      	ldrh	r3, [r3, #20]
 8008f32:	1acb      	subs	r3, r1, r3
 8008f34:	1411      	asrs	r1, r2, #16
 8008f36:	185b      	adds	r3, r3, r1
 8008f38:	1419      	asrs	r1, r3, #16
 8008f3a:	b292      	uxth	r2, r2
 8008f3c:	041b      	lsls	r3, r3, #16
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	9b03      	ldr	r3, [sp, #12]
 8008f42:	9104      	str	r1, [sp, #16]
 8008f44:	c004      	stmia	r0!, {r2}
 8008f46:	42bb      	cmp	r3, r7
 8008f48:	d2dd      	bcs.n	8008f06 <quorem+0x4e>
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d02e      	beq.n	8008fae <quorem+0xf6>
 8008f50:	0030      	movs	r0, r6
 8008f52:	9902      	ldr	r1, [sp, #8]
 8008f54:	f001 f902 	bl	800a15c <__mcmp>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	db21      	blt.n	8008fa0 <quorem+0xe8>
 8008f5c:	0030      	movs	r0, r6
 8008f5e:	2400      	movs	r4, #0
 8008f60:	9b00      	ldr	r3, [sp, #0]
 8008f62:	9902      	ldr	r1, [sp, #8]
 8008f64:	3301      	adds	r3, #1
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	3014      	adds	r0, #20
 8008f6a:	3114      	adds	r1, #20
 8008f6c:	6802      	ldr	r2, [r0, #0]
 8008f6e:	c908      	ldmia	r1!, {r3}
 8008f70:	b292      	uxth	r2, r2
 8008f72:	1914      	adds	r4, r2, r4
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	1aa2      	subs	r2, r4, r2
 8008f78:	6804      	ldr	r4, [r0, #0]
 8008f7a:	0c1b      	lsrs	r3, r3, #16
 8008f7c:	0c24      	lsrs	r4, r4, #16
 8008f7e:	1ae3      	subs	r3, r4, r3
 8008f80:	1414      	asrs	r4, r2, #16
 8008f82:	191b      	adds	r3, r3, r4
 8008f84:	141c      	asrs	r4, r3, #16
 8008f86:	b292      	uxth	r2, r2
 8008f88:	041b      	lsls	r3, r3, #16
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	c008      	stmia	r0!, {r3}
 8008f8e:	9b03      	ldr	r3, [sp, #12]
 8008f90:	428b      	cmp	r3, r1
 8008f92:	d2eb      	bcs.n	8008f6c <quorem+0xb4>
 8008f94:	9a01      	ldr	r2, [sp, #4]
 8008f96:	00ab      	lsls	r3, r5, #2
 8008f98:	18d3      	adds	r3, r2, r3
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	2a00      	cmp	r2, #0
 8008f9e:	d010      	beq.n	8008fc2 <quorem+0x10a>
 8008fa0:	9800      	ldr	r0, [sp, #0]
 8008fa2:	b007      	add	sp, #28
 8008fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <quorem+0xfe>
 8008fac:	3d01      	subs	r5, #1
 8008fae:	9b01      	ldr	r3, [sp, #4]
 8008fb0:	3c04      	subs	r4, #4
 8008fb2:	42a3      	cmp	r3, r4
 8008fb4:	d3f7      	bcc.n	8008fa6 <quorem+0xee>
 8008fb6:	6135      	str	r5, [r6, #16]
 8008fb8:	e7ca      	b.n	8008f50 <quorem+0x98>
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	2a00      	cmp	r2, #0
 8008fbe:	d104      	bne.n	8008fca <quorem+0x112>
 8008fc0:	3d01      	subs	r5, #1
 8008fc2:	9a01      	ldr	r2, [sp, #4]
 8008fc4:	3b04      	subs	r3, #4
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d3f7      	bcc.n	8008fba <quorem+0x102>
 8008fca:	6135      	str	r5, [r6, #16]
 8008fcc:	e7e8      	b.n	8008fa0 <quorem+0xe8>
	...

08008fd0 <_dtoa_r>:
 8008fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fd2:	b09d      	sub	sp, #116	; 0x74
 8008fd4:	9202      	str	r2, [sp, #8]
 8008fd6:	9303      	str	r3, [sp, #12]
 8008fd8:	9b02      	ldr	r3, [sp, #8]
 8008fda:	9c03      	ldr	r4, [sp, #12]
 8008fdc:	930a      	str	r3, [sp, #40]	; 0x28
 8008fde:	940b      	str	r4, [sp, #44]	; 0x2c
 8008fe0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008fe2:	0007      	movs	r7, r0
 8008fe4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008fe6:	2c00      	cmp	r4, #0
 8008fe8:	d10e      	bne.n	8009008 <_dtoa_r+0x38>
 8008fea:	2010      	movs	r0, #16
 8008fec:	f000 fe12 	bl	8009c14 <malloc>
 8008ff0:	1e02      	subs	r2, r0, #0
 8008ff2:	6278      	str	r0, [r7, #36]	; 0x24
 8008ff4:	d104      	bne.n	8009000 <_dtoa_r+0x30>
 8008ff6:	21ea      	movs	r1, #234	; 0xea
 8008ff8:	4bc0      	ldr	r3, [pc, #768]	; (80092fc <_dtoa_r+0x32c>)
 8008ffa:	48c1      	ldr	r0, [pc, #772]	; (8009300 <_dtoa_r+0x330>)
 8008ffc:	f001 fbf0 	bl	800a7e0 <__assert_func>
 8009000:	6044      	str	r4, [r0, #4]
 8009002:	6084      	str	r4, [r0, #8]
 8009004:	6004      	str	r4, [r0, #0]
 8009006:	60c4      	str	r4, [r0, #12]
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	6819      	ldr	r1, [r3, #0]
 800900c:	2900      	cmp	r1, #0
 800900e:	d00a      	beq.n	8009026 <_dtoa_r+0x56>
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	2301      	movs	r3, #1
 8009014:	4093      	lsls	r3, r2
 8009016:	604a      	str	r2, [r1, #4]
 8009018:	608b      	str	r3, [r1, #8]
 800901a:	0038      	movs	r0, r7
 800901c:	f000 fe5c 	bl	8009cd8 <_Bfree>
 8009020:	2200      	movs	r2, #0
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	9b03      	ldr	r3, [sp, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	da21      	bge.n	8009070 <_dtoa_r+0xa0>
 800902c:	2301      	movs	r3, #1
 800902e:	602b      	str	r3, [r5, #0]
 8009030:	9b03      	ldr	r3, [sp, #12]
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	085b      	lsrs	r3, r3, #1
 8009036:	930b      	str	r3, [sp, #44]	; 0x2c
 8009038:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800903a:	4bb2      	ldr	r3, [pc, #712]	; (8009304 <_dtoa_r+0x334>)
 800903c:	002a      	movs	r2, r5
 800903e:	9318      	str	r3, [sp, #96]	; 0x60
 8009040:	401a      	ands	r2, r3
 8009042:	429a      	cmp	r2, r3
 8009044:	d117      	bne.n	8009076 <_dtoa_r+0xa6>
 8009046:	4bb0      	ldr	r3, [pc, #704]	; (8009308 <_dtoa_r+0x338>)
 8009048:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800904a:	0328      	lsls	r0, r5, #12
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	9b02      	ldr	r3, [sp, #8]
 8009050:	0b00      	lsrs	r0, r0, #12
 8009052:	4318      	orrs	r0, r3
 8009054:	d101      	bne.n	800905a <_dtoa_r+0x8a>
 8009056:	f000 fdc3 	bl	8009be0 <_dtoa_r+0xc10>
 800905a:	48ac      	ldr	r0, [pc, #688]	; (800930c <_dtoa_r+0x33c>)
 800905c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800905e:	9005      	str	r0, [sp, #20]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <_dtoa_r+0x9a>
 8009064:	4baa      	ldr	r3, [pc, #680]	; (8009310 <_dtoa_r+0x340>)
 8009066:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	9805      	ldr	r0, [sp, #20]
 800906c:	b01d      	add	sp, #116	; 0x74
 800906e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009070:	2300      	movs	r3, #0
 8009072:	602b      	str	r3, [r5, #0]
 8009074:	e7e0      	b.n	8009038 <_dtoa_r+0x68>
 8009076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009078:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800907a:	9312      	str	r3, [sp, #72]	; 0x48
 800907c:	9413      	str	r4, [sp, #76]	; 0x4c
 800907e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009080:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009082:	2200      	movs	r2, #0
 8009084:	2300      	movs	r3, #0
 8009086:	f7f7 f9e1 	bl	800044c <__aeabi_dcmpeq>
 800908a:	1e04      	subs	r4, r0, #0
 800908c:	d00b      	beq.n	80090a6 <_dtoa_r+0xd6>
 800908e:	2301      	movs	r3, #1
 8009090:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009092:	6013      	str	r3, [r2, #0]
 8009094:	4b9f      	ldr	r3, [pc, #636]	; (8009314 <_dtoa_r+0x344>)
 8009096:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009098:	9305      	str	r3, [sp, #20]
 800909a:	2a00      	cmp	r2, #0
 800909c:	d0e5      	beq.n	800906a <_dtoa_r+0x9a>
 800909e:	4a9e      	ldr	r2, [pc, #632]	; (8009318 <_dtoa_r+0x348>)
 80090a0:	9926      	ldr	r1, [sp, #152]	; 0x98
 80090a2:	600a      	str	r2, [r1, #0]
 80090a4:	e7e1      	b.n	800906a <_dtoa_r+0x9a>
 80090a6:	ab1a      	add	r3, sp, #104	; 0x68
 80090a8:	9301      	str	r3, [sp, #4]
 80090aa:	ab1b      	add	r3, sp, #108	; 0x6c
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	0038      	movs	r0, r7
 80090b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090b4:	f001 f906 	bl	800a2c4 <__d2b>
 80090b8:	006e      	lsls	r6, r5, #1
 80090ba:	9004      	str	r0, [sp, #16]
 80090bc:	0d76      	lsrs	r6, r6, #21
 80090be:	d100      	bne.n	80090c2 <_dtoa_r+0xf2>
 80090c0:	e07c      	b.n	80091bc <_dtoa_r+0x1ec>
 80090c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80090c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80090c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090c8:	4a94      	ldr	r2, [pc, #592]	; (800931c <_dtoa_r+0x34c>)
 80090ca:	031b      	lsls	r3, r3, #12
 80090cc:	0b1b      	lsrs	r3, r3, #12
 80090ce:	431a      	orrs	r2, r3
 80090d0:	0011      	movs	r1, r2
 80090d2:	4b93      	ldr	r3, [pc, #588]	; (8009320 <_dtoa_r+0x350>)
 80090d4:	9416      	str	r4, [sp, #88]	; 0x58
 80090d6:	18f6      	adds	r6, r6, r3
 80090d8:	2200      	movs	r2, #0
 80090da:	4b92      	ldr	r3, [pc, #584]	; (8009324 <_dtoa_r+0x354>)
 80090dc:	f7f9 f936 	bl	800234c <__aeabi_dsub>
 80090e0:	4a91      	ldr	r2, [pc, #580]	; (8009328 <_dtoa_r+0x358>)
 80090e2:	4b92      	ldr	r3, [pc, #584]	; (800932c <_dtoa_r+0x35c>)
 80090e4:	f7f8 fec6 	bl	8001e74 <__aeabi_dmul>
 80090e8:	4a91      	ldr	r2, [pc, #580]	; (8009330 <_dtoa_r+0x360>)
 80090ea:	4b92      	ldr	r3, [pc, #584]	; (8009334 <_dtoa_r+0x364>)
 80090ec:	f7f7 ff52 	bl	8000f94 <__aeabi_dadd>
 80090f0:	0004      	movs	r4, r0
 80090f2:	0030      	movs	r0, r6
 80090f4:	000d      	movs	r5, r1
 80090f6:	f7f9 fd0f 	bl	8002b18 <__aeabi_i2d>
 80090fa:	4a8f      	ldr	r2, [pc, #572]	; (8009338 <_dtoa_r+0x368>)
 80090fc:	4b8f      	ldr	r3, [pc, #572]	; (800933c <_dtoa_r+0x36c>)
 80090fe:	f7f8 feb9 	bl	8001e74 <__aeabi_dmul>
 8009102:	0002      	movs	r2, r0
 8009104:	000b      	movs	r3, r1
 8009106:	0020      	movs	r0, r4
 8009108:	0029      	movs	r1, r5
 800910a:	f7f7 ff43 	bl	8000f94 <__aeabi_dadd>
 800910e:	0004      	movs	r4, r0
 8009110:	000d      	movs	r5, r1
 8009112:	f7f9 fccb 	bl	8002aac <__aeabi_d2iz>
 8009116:	2200      	movs	r2, #0
 8009118:	9002      	str	r0, [sp, #8]
 800911a:	2300      	movs	r3, #0
 800911c:	0020      	movs	r0, r4
 800911e:	0029      	movs	r1, r5
 8009120:	f7f7 f99a 	bl	8000458 <__aeabi_dcmplt>
 8009124:	2800      	cmp	r0, #0
 8009126:	d00b      	beq.n	8009140 <_dtoa_r+0x170>
 8009128:	9802      	ldr	r0, [sp, #8]
 800912a:	f7f9 fcf5 	bl	8002b18 <__aeabi_i2d>
 800912e:	002b      	movs	r3, r5
 8009130:	0022      	movs	r2, r4
 8009132:	f7f7 f98b 	bl	800044c <__aeabi_dcmpeq>
 8009136:	4243      	negs	r3, r0
 8009138:	4158      	adcs	r0, r3
 800913a:	9b02      	ldr	r3, [sp, #8]
 800913c:	1a1b      	subs	r3, r3, r0
 800913e:	9302      	str	r3, [sp, #8]
 8009140:	2301      	movs	r3, #1
 8009142:	9315      	str	r3, [sp, #84]	; 0x54
 8009144:	9b02      	ldr	r3, [sp, #8]
 8009146:	2b16      	cmp	r3, #22
 8009148:	d80f      	bhi.n	800916a <_dtoa_r+0x19a>
 800914a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800914c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800914e:	00da      	lsls	r2, r3, #3
 8009150:	4b7b      	ldr	r3, [pc, #492]	; (8009340 <_dtoa_r+0x370>)
 8009152:	189b      	adds	r3, r3, r2
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f7f7 f97e 	bl	8000458 <__aeabi_dcmplt>
 800915c:	2800      	cmp	r0, #0
 800915e:	d049      	beq.n	80091f4 <_dtoa_r+0x224>
 8009160:	9b02      	ldr	r3, [sp, #8]
 8009162:	3b01      	subs	r3, #1
 8009164:	9302      	str	r3, [sp, #8]
 8009166:	2300      	movs	r3, #0
 8009168:	9315      	str	r3, [sp, #84]	; 0x54
 800916a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800916c:	1b9e      	subs	r6, r3, r6
 800916e:	2300      	movs	r3, #0
 8009170:	9308      	str	r3, [sp, #32]
 8009172:	0033      	movs	r3, r6
 8009174:	3b01      	subs	r3, #1
 8009176:	930d      	str	r3, [sp, #52]	; 0x34
 8009178:	d504      	bpl.n	8009184 <_dtoa_r+0x1b4>
 800917a:	2301      	movs	r3, #1
 800917c:	1b9b      	subs	r3, r3, r6
 800917e:	9308      	str	r3, [sp, #32]
 8009180:	2300      	movs	r3, #0
 8009182:	930d      	str	r3, [sp, #52]	; 0x34
 8009184:	9b02      	ldr	r3, [sp, #8]
 8009186:	2b00      	cmp	r3, #0
 8009188:	db36      	blt.n	80091f8 <_dtoa_r+0x228>
 800918a:	9a02      	ldr	r2, [sp, #8]
 800918c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800918e:	4694      	mov	ip, r2
 8009190:	4463      	add	r3, ip
 8009192:	930d      	str	r3, [sp, #52]	; 0x34
 8009194:	2300      	movs	r3, #0
 8009196:	9214      	str	r2, [sp, #80]	; 0x50
 8009198:	930e      	str	r3, [sp, #56]	; 0x38
 800919a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800919c:	2401      	movs	r4, #1
 800919e:	2b09      	cmp	r3, #9
 80091a0:	d862      	bhi.n	8009268 <_dtoa_r+0x298>
 80091a2:	2b05      	cmp	r3, #5
 80091a4:	dd02      	ble.n	80091ac <_dtoa_r+0x1dc>
 80091a6:	2400      	movs	r4, #0
 80091a8:	3b04      	subs	r3, #4
 80091aa:	9322      	str	r3, [sp, #136]	; 0x88
 80091ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091ae:	1e98      	subs	r0, r3, #2
 80091b0:	2803      	cmp	r0, #3
 80091b2:	d862      	bhi.n	800927a <_dtoa_r+0x2aa>
 80091b4:	f7f6 ffb0 	bl	8000118 <__gnu_thumb1_case_uqi>
 80091b8:	56343629 	.word	0x56343629
 80091bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80091be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80091c0:	189e      	adds	r6, r3, r2
 80091c2:	4b60      	ldr	r3, [pc, #384]	; (8009344 <_dtoa_r+0x374>)
 80091c4:	18f2      	adds	r2, r6, r3
 80091c6:	2a20      	cmp	r2, #32
 80091c8:	dd0f      	ble.n	80091ea <_dtoa_r+0x21a>
 80091ca:	2340      	movs	r3, #64	; 0x40
 80091cc:	1a9b      	subs	r3, r3, r2
 80091ce:	409d      	lsls	r5, r3
 80091d0:	4b5d      	ldr	r3, [pc, #372]	; (8009348 <_dtoa_r+0x378>)
 80091d2:	9802      	ldr	r0, [sp, #8]
 80091d4:	18f3      	adds	r3, r6, r3
 80091d6:	40d8      	lsrs	r0, r3
 80091d8:	4328      	orrs	r0, r5
 80091da:	f7f9 fccd 	bl	8002b78 <__aeabi_ui2d>
 80091de:	2301      	movs	r3, #1
 80091e0:	4c5a      	ldr	r4, [pc, #360]	; (800934c <_dtoa_r+0x37c>)
 80091e2:	3e01      	subs	r6, #1
 80091e4:	1909      	adds	r1, r1, r4
 80091e6:	9316      	str	r3, [sp, #88]	; 0x58
 80091e8:	e776      	b.n	80090d8 <_dtoa_r+0x108>
 80091ea:	2320      	movs	r3, #32
 80091ec:	9802      	ldr	r0, [sp, #8]
 80091ee:	1a9b      	subs	r3, r3, r2
 80091f0:	4098      	lsls	r0, r3
 80091f2:	e7f2      	b.n	80091da <_dtoa_r+0x20a>
 80091f4:	9015      	str	r0, [sp, #84]	; 0x54
 80091f6:	e7b8      	b.n	800916a <_dtoa_r+0x19a>
 80091f8:	9b08      	ldr	r3, [sp, #32]
 80091fa:	9a02      	ldr	r2, [sp, #8]
 80091fc:	1a9b      	subs	r3, r3, r2
 80091fe:	9308      	str	r3, [sp, #32]
 8009200:	4253      	negs	r3, r2
 8009202:	930e      	str	r3, [sp, #56]	; 0x38
 8009204:	2300      	movs	r3, #0
 8009206:	9314      	str	r3, [sp, #80]	; 0x50
 8009208:	e7c7      	b.n	800919a <_dtoa_r+0x1ca>
 800920a:	2300      	movs	r3, #0
 800920c:	930f      	str	r3, [sp, #60]	; 0x3c
 800920e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009210:	2b00      	cmp	r3, #0
 8009212:	dc36      	bgt.n	8009282 <_dtoa_r+0x2b2>
 8009214:	2301      	movs	r3, #1
 8009216:	001a      	movs	r2, r3
 8009218:	930c      	str	r3, [sp, #48]	; 0x30
 800921a:	9306      	str	r3, [sp, #24]
 800921c:	9223      	str	r2, [sp, #140]	; 0x8c
 800921e:	e00d      	b.n	800923c <_dtoa_r+0x26c>
 8009220:	2301      	movs	r3, #1
 8009222:	e7f3      	b.n	800920c <_dtoa_r+0x23c>
 8009224:	2300      	movs	r3, #0
 8009226:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009228:	930f      	str	r3, [sp, #60]	; 0x3c
 800922a:	4694      	mov	ip, r2
 800922c:	9b02      	ldr	r3, [sp, #8]
 800922e:	4463      	add	r3, ip
 8009230:	930c      	str	r3, [sp, #48]	; 0x30
 8009232:	3301      	adds	r3, #1
 8009234:	9306      	str	r3, [sp, #24]
 8009236:	2b00      	cmp	r3, #0
 8009238:	dc00      	bgt.n	800923c <_dtoa_r+0x26c>
 800923a:	2301      	movs	r3, #1
 800923c:	2200      	movs	r2, #0
 800923e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009240:	6042      	str	r2, [r0, #4]
 8009242:	3204      	adds	r2, #4
 8009244:	0015      	movs	r5, r2
 8009246:	3514      	adds	r5, #20
 8009248:	6841      	ldr	r1, [r0, #4]
 800924a:	429d      	cmp	r5, r3
 800924c:	d91d      	bls.n	800928a <_dtoa_r+0x2ba>
 800924e:	0038      	movs	r0, r7
 8009250:	f000 fcfe 	bl	8009c50 <_Balloc>
 8009254:	9005      	str	r0, [sp, #20]
 8009256:	2800      	cmp	r0, #0
 8009258:	d11b      	bne.n	8009292 <_dtoa_r+0x2c2>
 800925a:	21d5      	movs	r1, #213	; 0xd5
 800925c:	0002      	movs	r2, r0
 800925e:	4b3c      	ldr	r3, [pc, #240]	; (8009350 <_dtoa_r+0x380>)
 8009260:	0049      	lsls	r1, r1, #1
 8009262:	e6ca      	b.n	8008ffa <_dtoa_r+0x2a>
 8009264:	2301      	movs	r3, #1
 8009266:	e7de      	b.n	8009226 <_dtoa_r+0x256>
 8009268:	2300      	movs	r3, #0
 800926a:	940f      	str	r4, [sp, #60]	; 0x3c
 800926c:	9322      	str	r3, [sp, #136]	; 0x88
 800926e:	3b01      	subs	r3, #1
 8009270:	930c      	str	r3, [sp, #48]	; 0x30
 8009272:	9306      	str	r3, [sp, #24]
 8009274:	2200      	movs	r2, #0
 8009276:	3313      	adds	r3, #19
 8009278:	e7d0      	b.n	800921c <_dtoa_r+0x24c>
 800927a:	2301      	movs	r3, #1
 800927c:	930f      	str	r3, [sp, #60]	; 0x3c
 800927e:	3b02      	subs	r3, #2
 8009280:	e7f6      	b.n	8009270 <_dtoa_r+0x2a0>
 8009282:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009284:	930c      	str	r3, [sp, #48]	; 0x30
 8009286:	9306      	str	r3, [sp, #24]
 8009288:	e7d8      	b.n	800923c <_dtoa_r+0x26c>
 800928a:	3101      	adds	r1, #1
 800928c:	6041      	str	r1, [r0, #4]
 800928e:	0052      	lsls	r2, r2, #1
 8009290:	e7d8      	b.n	8009244 <_dtoa_r+0x274>
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009294:	9a05      	ldr	r2, [sp, #20]
 8009296:	601a      	str	r2, [r3, #0]
 8009298:	9b06      	ldr	r3, [sp, #24]
 800929a:	2b0e      	cmp	r3, #14
 800929c:	d900      	bls.n	80092a0 <_dtoa_r+0x2d0>
 800929e:	e0eb      	b.n	8009478 <_dtoa_r+0x4a8>
 80092a0:	2c00      	cmp	r4, #0
 80092a2:	d100      	bne.n	80092a6 <_dtoa_r+0x2d6>
 80092a4:	e0e8      	b.n	8009478 <_dtoa_r+0x4a8>
 80092a6:	9b02      	ldr	r3, [sp, #8]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	dd68      	ble.n	800937e <_dtoa_r+0x3ae>
 80092ac:	001a      	movs	r2, r3
 80092ae:	210f      	movs	r1, #15
 80092b0:	4b23      	ldr	r3, [pc, #140]	; (8009340 <_dtoa_r+0x370>)
 80092b2:	400a      	ands	r2, r1
 80092b4:	00d2      	lsls	r2, r2, #3
 80092b6:	189b      	adds	r3, r3, r2
 80092b8:	681d      	ldr	r5, [r3, #0]
 80092ba:	685e      	ldr	r6, [r3, #4]
 80092bc:	9b02      	ldr	r3, [sp, #8]
 80092be:	111c      	asrs	r4, r3, #4
 80092c0:	2302      	movs	r3, #2
 80092c2:	9310      	str	r3, [sp, #64]	; 0x40
 80092c4:	9b02      	ldr	r3, [sp, #8]
 80092c6:	05db      	lsls	r3, r3, #23
 80092c8:	d50b      	bpl.n	80092e2 <_dtoa_r+0x312>
 80092ca:	4b22      	ldr	r3, [pc, #136]	; (8009354 <_dtoa_r+0x384>)
 80092cc:	400c      	ands	r4, r1
 80092ce:	6a1a      	ldr	r2, [r3, #32]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80092d4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80092d6:	f7f8 f9c7 	bl	8001668 <__aeabi_ddiv>
 80092da:	2303      	movs	r3, #3
 80092dc:	900a      	str	r0, [sp, #40]	; 0x28
 80092de:	910b      	str	r1, [sp, #44]	; 0x2c
 80092e0:	9310      	str	r3, [sp, #64]	; 0x40
 80092e2:	4b1c      	ldr	r3, [pc, #112]	; (8009354 <_dtoa_r+0x384>)
 80092e4:	9307      	str	r3, [sp, #28]
 80092e6:	2c00      	cmp	r4, #0
 80092e8:	d136      	bne.n	8009358 <_dtoa_r+0x388>
 80092ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80092ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092ee:	002a      	movs	r2, r5
 80092f0:	0033      	movs	r3, r6
 80092f2:	f7f8 f9b9 	bl	8001668 <__aeabi_ddiv>
 80092f6:	900a      	str	r0, [sp, #40]	; 0x28
 80092f8:	910b      	str	r1, [sp, #44]	; 0x2c
 80092fa:	e05c      	b.n	80093b6 <_dtoa_r+0x3e6>
 80092fc:	0800c5e5 	.word	0x0800c5e5
 8009300:	0800c5fc 	.word	0x0800c5fc
 8009304:	7ff00000 	.word	0x7ff00000
 8009308:	0000270f 	.word	0x0000270f
 800930c:	0800c5e1 	.word	0x0800c5e1
 8009310:	0800c5e4 	.word	0x0800c5e4
 8009314:	0800c5b4 	.word	0x0800c5b4
 8009318:	0800c5b5 	.word	0x0800c5b5
 800931c:	3ff00000 	.word	0x3ff00000
 8009320:	fffffc01 	.word	0xfffffc01
 8009324:	3ff80000 	.word	0x3ff80000
 8009328:	636f4361 	.word	0x636f4361
 800932c:	3fd287a7 	.word	0x3fd287a7
 8009330:	8b60c8b3 	.word	0x8b60c8b3
 8009334:	3fc68a28 	.word	0x3fc68a28
 8009338:	509f79fb 	.word	0x509f79fb
 800933c:	3fd34413 	.word	0x3fd34413
 8009340:	0800c6f8 	.word	0x0800c6f8
 8009344:	00000432 	.word	0x00000432
 8009348:	00000412 	.word	0x00000412
 800934c:	fe100000 	.word	0xfe100000
 8009350:	0800c65b 	.word	0x0800c65b
 8009354:	0800c6d0 	.word	0x0800c6d0
 8009358:	2301      	movs	r3, #1
 800935a:	421c      	tst	r4, r3
 800935c:	d00b      	beq.n	8009376 <_dtoa_r+0x3a6>
 800935e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009360:	0028      	movs	r0, r5
 8009362:	3301      	adds	r3, #1
 8009364:	9310      	str	r3, [sp, #64]	; 0x40
 8009366:	9b07      	ldr	r3, [sp, #28]
 8009368:	0031      	movs	r1, r6
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	f7f8 fd81 	bl	8001e74 <__aeabi_dmul>
 8009372:	0005      	movs	r5, r0
 8009374:	000e      	movs	r6, r1
 8009376:	9b07      	ldr	r3, [sp, #28]
 8009378:	1064      	asrs	r4, r4, #1
 800937a:	3308      	adds	r3, #8
 800937c:	e7b2      	b.n	80092e4 <_dtoa_r+0x314>
 800937e:	2302      	movs	r3, #2
 8009380:	9310      	str	r3, [sp, #64]	; 0x40
 8009382:	9b02      	ldr	r3, [sp, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d016      	beq.n	80093b6 <_dtoa_r+0x3e6>
 8009388:	9812      	ldr	r0, [sp, #72]	; 0x48
 800938a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800938c:	425c      	negs	r4, r3
 800938e:	230f      	movs	r3, #15
 8009390:	4ab5      	ldr	r2, [pc, #724]	; (8009668 <_dtoa_r+0x698>)
 8009392:	4023      	ands	r3, r4
 8009394:	00db      	lsls	r3, r3, #3
 8009396:	18d3      	adds	r3, r2, r3
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	f7f8 fd6a 	bl	8001e74 <__aeabi_dmul>
 80093a0:	2601      	movs	r6, #1
 80093a2:	2300      	movs	r3, #0
 80093a4:	900a      	str	r0, [sp, #40]	; 0x28
 80093a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80093a8:	4db0      	ldr	r5, [pc, #704]	; (800966c <_dtoa_r+0x69c>)
 80093aa:	1124      	asrs	r4, r4, #4
 80093ac:	2c00      	cmp	r4, #0
 80093ae:	d000      	beq.n	80093b2 <_dtoa_r+0x3e2>
 80093b0:	e094      	b.n	80094dc <_dtoa_r+0x50c>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d19f      	bne.n	80092f6 <_dtoa_r+0x326>
 80093b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d100      	bne.n	80093be <_dtoa_r+0x3ee>
 80093bc:	e09b      	b.n	80094f6 <_dtoa_r+0x526>
 80093be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80093c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80093c2:	2200      	movs	r2, #0
 80093c4:	0020      	movs	r0, r4
 80093c6:	0029      	movs	r1, r5
 80093c8:	4ba9      	ldr	r3, [pc, #676]	; (8009670 <_dtoa_r+0x6a0>)
 80093ca:	f7f7 f845 	bl	8000458 <__aeabi_dcmplt>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d100      	bne.n	80093d4 <_dtoa_r+0x404>
 80093d2:	e090      	b.n	80094f6 <_dtoa_r+0x526>
 80093d4:	9b06      	ldr	r3, [sp, #24]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d100      	bne.n	80093dc <_dtoa_r+0x40c>
 80093da:	e08c      	b.n	80094f6 <_dtoa_r+0x526>
 80093dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093de:	2b00      	cmp	r3, #0
 80093e0:	dd46      	ble.n	8009470 <_dtoa_r+0x4a0>
 80093e2:	9b02      	ldr	r3, [sp, #8]
 80093e4:	2200      	movs	r2, #0
 80093e6:	0020      	movs	r0, r4
 80093e8:	0029      	movs	r1, r5
 80093ea:	1e5e      	subs	r6, r3, #1
 80093ec:	4ba1      	ldr	r3, [pc, #644]	; (8009674 <_dtoa_r+0x6a4>)
 80093ee:	f7f8 fd41 	bl	8001e74 <__aeabi_dmul>
 80093f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093f4:	900a      	str	r0, [sp, #40]	; 0x28
 80093f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80093f8:	3301      	adds	r3, #1
 80093fa:	9310      	str	r3, [sp, #64]	; 0x40
 80093fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009400:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009402:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009404:	9307      	str	r3, [sp, #28]
 8009406:	f7f9 fb87 	bl	8002b18 <__aeabi_i2d>
 800940a:	0022      	movs	r2, r4
 800940c:	002b      	movs	r3, r5
 800940e:	f7f8 fd31 	bl	8001e74 <__aeabi_dmul>
 8009412:	2200      	movs	r2, #0
 8009414:	4b98      	ldr	r3, [pc, #608]	; (8009678 <_dtoa_r+0x6a8>)
 8009416:	f7f7 fdbd 	bl	8000f94 <__aeabi_dadd>
 800941a:	9010      	str	r0, [sp, #64]	; 0x40
 800941c:	9111      	str	r1, [sp, #68]	; 0x44
 800941e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009420:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009422:	920a      	str	r2, [sp, #40]	; 0x28
 8009424:	930b      	str	r3, [sp, #44]	; 0x2c
 8009426:	4a95      	ldr	r2, [pc, #596]	; (800967c <_dtoa_r+0x6ac>)
 8009428:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800942a:	4694      	mov	ip, r2
 800942c:	4463      	add	r3, ip
 800942e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009430:	930b      	str	r3, [sp, #44]	; 0x2c
 8009432:	9b07      	ldr	r3, [sp, #28]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d161      	bne.n	80094fc <_dtoa_r+0x52c>
 8009438:	2200      	movs	r2, #0
 800943a:	0020      	movs	r0, r4
 800943c:	0029      	movs	r1, r5
 800943e:	4b90      	ldr	r3, [pc, #576]	; (8009680 <_dtoa_r+0x6b0>)
 8009440:	f7f8 ff84 	bl	800234c <__aeabi_dsub>
 8009444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009446:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009448:	0004      	movs	r4, r0
 800944a:	000d      	movs	r5, r1
 800944c:	f7f7 f818 	bl	8000480 <__aeabi_dcmpgt>
 8009450:	2800      	cmp	r0, #0
 8009452:	d000      	beq.n	8009456 <_dtoa_r+0x486>
 8009454:	e2b5      	b.n	80099c2 <_dtoa_r+0x9f2>
 8009456:	488b      	ldr	r0, [pc, #556]	; (8009684 <_dtoa_r+0x6b4>)
 8009458:	9911      	ldr	r1, [sp, #68]	; 0x44
 800945a:	4684      	mov	ip, r0
 800945c:	4461      	add	r1, ip
 800945e:	000b      	movs	r3, r1
 8009460:	0020      	movs	r0, r4
 8009462:	0029      	movs	r1, r5
 8009464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009466:	f7f6 fff7 	bl	8000458 <__aeabi_dcmplt>
 800946a:	2800      	cmp	r0, #0
 800946c:	d000      	beq.n	8009470 <_dtoa_r+0x4a0>
 800946e:	e2a5      	b.n	80099bc <_dtoa_r+0x9ec>
 8009470:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009472:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009474:	930a      	str	r3, [sp, #40]	; 0x28
 8009476:	940b      	str	r4, [sp, #44]	; 0x2c
 8009478:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800947a:	2b00      	cmp	r3, #0
 800947c:	da00      	bge.n	8009480 <_dtoa_r+0x4b0>
 800947e:	e171      	b.n	8009764 <_dtoa_r+0x794>
 8009480:	9a02      	ldr	r2, [sp, #8]
 8009482:	2a0e      	cmp	r2, #14
 8009484:	dd00      	ble.n	8009488 <_dtoa_r+0x4b8>
 8009486:	e16d      	b.n	8009764 <_dtoa_r+0x794>
 8009488:	4b77      	ldr	r3, [pc, #476]	; (8009668 <_dtoa_r+0x698>)
 800948a:	00d2      	lsls	r2, r2, #3
 800948c:	189b      	adds	r3, r3, r2
 800948e:	685c      	ldr	r4, [r3, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	9308      	str	r3, [sp, #32]
 8009494:	9409      	str	r4, [sp, #36]	; 0x24
 8009496:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009498:	2b00      	cmp	r3, #0
 800949a:	db00      	blt.n	800949e <_dtoa_r+0x4ce>
 800949c:	e0f6      	b.n	800968c <_dtoa_r+0x6bc>
 800949e:	9b06      	ldr	r3, [sp, #24]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	dd00      	ble.n	80094a6 <_dtoa_r+0x4d6>
 80094a4:	e0f2      	b.n	800968c <_dtoa_r+0x6bc>
 80094a6:	d000      	beq.n	80094aa <_dtoa_r+0x4da>
 80094a8:	e288      	b.n	80099bc <_dtoa_r+0x9ec>
 80094aa:	9808      	ldr	r0, [sp, #32]
 80094ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094ae:	2200      	movs	r2, #0
 80094b0:	4b73      	ldr	r3, [pc, #460]	; (8009680 <_dtoa_r+0x6b0>)
 80094b2:	f7f8 fcdf 	bl	8001e74 <__aeabi_dmul>
 80094b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ba:	f7f6 ffeb 	bl	8000494 <__aeabi_dcmpge>
 80094be:	9e06      	ldr	r6, [sp, #24]
 80094c0:	0035      	movs	r5, r6
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d000      	beq.n	80094c8 <_dtoa_r+0x4f8>
 80094c6:	e25f      	b.n	8009988 <_dtoa_r+0x9b8>
 80094c8:	9b05      	ldr	r3, [sp, #20]
 80094ca:	9a05      	ldr	r2, [sp, #20]
 80094cc:	3301      	adds	r3, #1
 80094ce:	9307      	str	r3, [sp, #28]
 80094d0:	2331      	movs	r3, #49	; 0x31
 80094d2:	7013      	strb	r3, [r2, #0]
 80094d4:	9b02      	ldr	r3, [sp, #8]
 80094d6:	3301      	adds	r3, #1
 80094d8:	9302      	str	r3, [sp, #8]
 80094da:	e25a      	b.n	8009992 <_dtoa_r+0x9c2>
 80094dc:	4234      	tst	r4, r6
 80094de:	d007      	beq.n	80094f0 <_dtoa_r+0x520>
 80094e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094e2:	3301      	adds	r3, #1
 80094e4:	9310      	str	r3, [sp, #64]	; 0x40
 80094e6:	682a      	ldr	r2, [r5, #0]
 80094e8:	686b      	ldr	r3, [r5, #4]
 80094ea:	f7f8 fcc3 	bl	8001e74 <__aeabi_dmul>
 80094ee:	0033      	movs	r3, r6
 80094f0:	1064      	asrs	r4, r4, #1
 80094f2:	3508      	adds	r5, #8
 80094f4:	e75a      	b.n	80093ac <_dtoa_r+0x3dc>
 80094f6:	9e02      	ldr	r6, [sp, #8]
 80094f8:	9b06      	ldr	r3, [sp, #24]
 80094fa:	e780      	b.n	80093fe <_dtoa_r+0x42e>
 80094fc:	9b07      	ldr	r3, [sp, #28]
 80094fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009500:	1e5a      	subs	r2, r3, #1
 8009502:	4b59      	ldr	r3, [pc, #356]	; (8009668 <_dtoa_r+0x698>)
 8009504:	00d2      	lsls	r2, r2, #3
 8009506:	189b      	adds	r3, r3, r2
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	2900      	cmp	r1, #0
 800950e:	d051      	beq.n	80095b4 <_dtoa_r+0x5e4>
 8009510:	2000      	movs	r0, #0
 8009512:	495d      	ldr	r1, [pc, #372]	; (8009688 <_dtoa_r+0x6b8>)
 8009514:	f7f8 f8a8 	bl	8001668 <__aeabi_ddiv>
 8009518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800951a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800951c:	f7f8 ff16 	bl	800234c <__aeabi_dsub>
 8009520:	9a05      	ldr	r2, [sp, #20]
 8009522:	9b05      	ldr	r3, [sp, #20]
 8009524:	4694      	mov	ip, r2
 8009526:	9310      	str	r3, [sp, #64]	; 0x40
 8009528:	9b07      	ldr	r3, [sp, #28]
 800952a:	900a      	str	r0, [sp, #40]	; 0x28
 800952c:	910b      	str	r1, [sp, #44]	; 0x2c
 800952e:	4463      	add	r3, ip
 8009530:	9319      	str	r3, [sp, #100]	; 0x64
 8009532:	0029      	movs	r1, r5
 8009534:	0020      	movs	r0, r4
 8009536:	f7f9 fab9 	bl	8002aac <__aeabi_d2iz>
 800953a:	9017      	str	r0, [sp, #92]	; 0x5c
 800953c:	f7f9 faec 	bl	8002b18 <__aeabi_i2d>
 8009540:	0002      	movs	r2, r0
 8009542:	000b      	movs	r3, r1
 8009544:	0020      	movs	r0, r4
 8009546:	0029      	movs	r1, r5
 8009548:	f7f8 ff00 	bl	800234c <__aeabi_dsub>
 800954c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800954e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009550:	3301      	adds	r3, #1
 8009552:	9307      	str	r3, [sp, #28]
 8009554:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009556:	0004      	movs	r4, r0
 8009558:	3330      	adds	r3, #48	; 0x30
 800955a:	7013      	strb	r3, [r2, #0]
 800955c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800955e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009560:	000d      	movs	r5, r1
 8009562:	f7f6 ff79 	bl	8000458 <__aeabi_dcmplt>
 8009566:	2800      	cmp	r0, #0
 8009568:	d175      	bne.n	8009656 <_dtoa_r+0x686>
 800956a:	0022      	movs	r2, r4
 800956c:	002b      	movs	r3, r5
 800956e:	2000      	movs	r0, #0
 8009570:	493f      	ldr	r1, [pc, #252]	; (8009670 <_dtoa_r+0x6a0>)
 8009572:	f7f8 feeb 	bl	800234c <__aeabi_dsub>
 8009576:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800957a:	f7f6 ff6d 	bl	8000458 <__aeabi_dcmplt>
 800957e:	2800      	cmp	r0, #0
 8009580:	d000      	beq.n	8009584 <_dtoa_r+0x5b4>
 8009582:	e0d1      	b.n	8009728 <_dtoa_r+0x758>
 8009584:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009586:	9a07      	ldr	r2, [sp, #28]
 8009588:	4293      	cmp	r3, r2
 800958a:	d100      	bne.n	800958e <_dtoa_r+0x5be>
 800958c:	e770      	b.n	8009470 <_dtoa_r+0x4a0>
 800958e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009592:	2200      	movs	r2, #0
 8009594:	4b37      	ldr	r3, [pc, #220]	; (8009674 <_dtoa_r+0x6a4>)
 8009596:	f7f8 fc6d 	bl	8001e74 <__aeabi_dmul>
 800959a:	4b36      	ldr	r3, [pc, #216]	; (8009674 <_dtoa_r+0x6a4>)
 800959c:	900a      	str	r0, [sp, #40]	; 0x28
 800959e:	910b      	str	r1, [sp, #44]	; 0x2c
 80095a0:	2200      	movs	r2, #0
 80095a2:	0020      	movs	r0, r4
 80095a4:	0029      	movs	r1, r5
 80095a6:	f7f8 fc65 	bl	8001e74 <__aeabi_dmul>
 80095aa:	9b07      	ldr	r3, [sp, #28]
 80095ac:	0004      	movs	r4, r0
 80095ae:	000d      	movs	r5, r1
 80095b0:	9310      	str	r3, [sp, #64]	; 0x40
 80095b2:	e7be      	b.n	8009532 <_dtoa_r+0x562>
 80095b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80095b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095b8:	f7f8 fc5c 	bl	8001e74 <__aeabi_dmul>
 80095bc:	9a05      	ldr	r2, [sp, #20]
 80095be:	9b05      	ldr	r3, [sp, #20]
 80095c0:	4694      	mov	ip, r2
 80095c2:	930a      	str	r3, [sp, #40]	; 0x28
 80095c4:	9b07      	ldr	r3, [sp, #28]
 80095c6:	9010      	str	r0, [sp, #64]	; 0x40
 80095c8:	9111      	str	r1, [sp, #68]	; 0x44
 80095ca:	4463      	add	r3, ip
 80095cc:	9319      	str	r3, [sp, #100]	; 0x64
 80095ce:	0029      	movs	r1, r5
 80095d0:	0020      	movs	r0, r4
 80095d2:	f7f9 fa6b 	bl	8002aac <__aeabi_d2iz>
 80095d6:	9017      	str	r0, [sp, #92]	; 0x5c
 80095d8:	f7f9 fa9e 	bl	8002b18 <__aeabi_i2d>
 80095dc:	0002      	movs	r2, r0
 80095de:	000b      	movs	r3, r1
 80095e0:	0020      	movs	r0, r4
 80095e2:	0029      	movs	r1, r5
 80095e4:	f7f8 feb2 	bl	800234c <__aeabi_dsub>
 80095e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ec:	3330      	adds	r3, #48	; 0x30
 80095ee:	7013      	strb	r3, [r2, #0]
 80095f0:	0013      	movs	r3, r2
 80095f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80095f4:	3301      	adds	r3, #1
 80095f6:	0004      	movs	r4, r0
 80095f8:	000d      	movs	r5, r1
 80095fa:	930a      	str	r3, [sp, #40]	; 0x28
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d12c      	bne.n	800965a <_dtoa_r+0x68a>
 8009600:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009602:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009604:	9a05      	ldr	r2, [sp, #20]
 8009606:	9b07      	ldr	r3, [sp, #28]
 8009608:	4694      	mov	ip, r2
 800960a:	4463      	add	r3, ip
 800960c:	2200      	movs	r2, #0
 800960e:	9307      	str	r3, [sp, #28]
 8009610:	4b1d      	ldr	r3, [pc, #116]	; (8009688 <_dtoa_r+0x6b8>)
 8009612:	f7f7 fcbf 	bl	8000f94 <__aeabi_dadd>
 8009616:	0002      	movs	r2, r0
 8009618:	000b      	movs	r3, r1
 800961a:	0020      	movs	r0, r4
 800961c:	0029      	movs	r1, r5
 800961e:	f7f6 ff2f 	bl	8000480 <__aeabi_dcmpgt>
 8009622:	2800      	cmp	r0, #0
 8009624:	d000      	beq.n	8009628 <_dtoa_r+0x658>
 8009626:	e07f      	b.n	8009728 <_dtoa_r+0x758>
 8009628:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800962a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800962c:	2000      	movs	r0, #0
 800962e:	4916      	ldr	r1, [pc, #88]	; (8009688 <_dtoa_r+0x6b8>)
 8009630:	f7f8 fe8c 	bl	800234c <__aeabi_dsub>
 8009634:	0002      	movs	r2, r0
 8009636:	000b      	movs	r3, r1
 8009638:	0020      	movs	r0, r4
 800963a:	0029      	movs	r1, r5
 800963c:	f7f6 ff0c 	bl	8000458 <__aeabi_dcmplt>
 8009640:	2800      	cmp	r0, #0
 8009642:	d100      	bne.n	8009646 <_dtoa_r+0x676>
 8009644:	e714      	b.n	8009470 <_dtoa_r+0x4a0>
 8009646:	9b07      	ldr	r3, [sp, #28]
 8009648:	001a      	movs	r2, r3
 800964a:	3a01      	subs	r2, #1
 800964c:	9207      	str	r2, [sp, #28]
 800964e:	7812      	ldrb	r2, [r2, #0]
 8009650:	2a30      	cmp	r2, #48	; 0x30
 8009652:	d0f8      	beq.n	8009646 <_dtoa_r+0x676>
 8009654:	9307      	str	r3, [sp, #28]
 8009656:	9602      	str	r6, [sp, #8]
 8009658:	e054      	b.n	8009704 <_dtoa_r+0x734>
 800965a:	2200      	movs	r2, #0
 800965c:	4b05      	ldr	r3, [pc, #20]	; (8009674 <_dtoa_r+0x6a4>)
 800965e:	f7f8 fc09 	bl	8001e74 <__aeabi_dmul>
 8009662:	0004      	movs	r4, r0
 8009664:	000d      	movs	r5, r1
 8009666:	e7b2      	b.n	80095ce <_dtoa_r+0x5fe>
 8009668:	0800c6f8 	.word	0x0800c6f8
 800966c:	0800c6d0 	.word	0x0800c6d0
 8009670:	3ff00000 	.word	0x3ff00000
 8009674:	40240000 	.word	0x40240000
 8009678:	401c0000 	.word	0x401c0000
 800967c:	fcc00000 	.word	0xfcc00000
 8009680:	40140000 	.word	0x40140000
 8009684:	7cc00000 	.word	0x7cc00000
 8009688:	3fe00000 	.word	0x3fe00000
 800968c:	9b06      	ldr	r3, [sp, #24]
 800968e:	9e05      	ldr	r6, [sp, #20]
 8009690:	3b01      	subs	r3, #1
 8009692:	199b      	adds	r3, r3, r6
 8009694:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009696:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009698:	930a      	str	r3, [sp, #40]	; 0x28
 800969a:	9a08      	ldr	r2, [sp, #32]
 800969c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800969e:	0020      	movs	r0, r4
 80096a0:	0029      	movs	r1, r5
 80096a2:	f7f7 ffe1 	bl	8001668 <__aeabi_ddiv>
 80096a6:	f7f9 fa01 	bl	8002aac <__aeabi_d2iz>
 80096aa:	9006      	str	r0, [sp, #24]
 80096ac:	f7f9 fa34 	bl	8002b18 <__aeabi_i2d>
 80096b0:	9a08      	ldr	r2, [sp, #32]
 80096b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b4:	f7f8 fbde 	bl	8001e74 <__aeabi_dmul>
 80096b8:	0002      	movs	r2, r0
 80096ba:	000b      	movs	r3, r1
 80096bc:	0020      	movs	r0, r4
 80096be:	0029      	movs	r1, r5
 80096c0:	f7f8 fe44 	bl	800234c <__aeabi_dsub>
 80096c4:	0033      	movs	r3, r6
 80096c6:	9a06      	ldr	r2, [sp, #24]
 80096c8:	3601      	adds	r6, #1
 80096ca:	3230      	adds	r2, #48	; 0x30
 80096cc:	701a      	strb	r2, [r3, #0]
 80096ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096d0:	9607      	str	r6, [sp, #28]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d139      	bne.n	800974a <_dtoa_r+0x77a>
 80096d6:	0002      	movs	r2, r0
 80096d8:	000b      	movs	r3, r1
 80096da:	f7f7 fc5b 	bl	8000f94 <__aeabi_dadd>
 80096de:	9a08      	ldr	r2, [sp, #32]
 80096e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e2:	0004      	movs	r4, r0
 80096e4:	000d      	movs	r5, r1
 80096e6:	f7f6 fecb 	bl	8000480 <__aeabi_dcmpgt>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d11b      	bne.n	8009726 <_dtoa_r+0x756>
 80096ee:	9a08      	ldr	r2, [sp, #32]
 80096f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f2:	0020      	movs	r0, r4
 80096f4:	0029      	movs	r1, r5
 80096f6:	f7f6 fea9 	bl	800044c <__aeabi_dcmpeq>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d002      	beq.n	8009704 <_dtoa_r+0x734>
 80096fe:	9b06      	ldr	r3, [sp, #24]
 8009700:	07db      	lsls	r3, r3, #31
 8009702:	d410      	bmi.n	8009726 <_dtoa_r+0x756>
 8009704:	0038      	movs	r0, r7
 8009706:	9904      	ldr	r1, [sp, #16]
 8009708:	f000 fae6 	bl	8009cd8 <_Bfree>
 800970c:	2300      	movs	r3, #0
 800970e:	9a07      	ldr	r2, [sp, #28]
 8009710:	9802      	ldr	r0, [sp, #8]
 8009712:	7013      	strb	r3, [r2, #0]
 8009714:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009716:	3001      	adds	r0, #1
 8009718:	6018      	str	r0, [r3, #0]
 800971a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800971c:	2b00      	cmp	r3, #0
 800971e:	d100      	bne.n	8009722 <_dtoa_r+0x752>
 8009720:	e4a3      	b.n	800906a <_dtoa_r+0x9a>
 8009722:	601a      	str	r2, [r3, #0]
 8009724:	e4a1      	b.n	800906a <_dtoa_r+0x9a>
 8009726:	9e02      	ldr	r6, [sp, #8]
 8009728:	9b07      	ldr	r3, [sp, #28]
 800972a:	9307      	str	r3, [sp, #28]
 800972c:	3b01      	subs	r3, #1
 800972e:	781a      	ldrb	r2, [r3, #0]
 8009730:	2a39      	cmp	r2, #57	; 0x39
 8009732:	d106      	bne.n	8009742 <_dtoa_r+0x772>
 8009734:	9a05      	ldr	r2, [sp, #20]
 8009736:	429a      	cmp	r2, r3
 8009738:	d1f7      	bne.n	800972a <_dtoa_r+0x75a>
 800973a:	2230      	movs	r2, #48	; 0x30
 800973c:	9905      	ldr	r1, [sp, #20]
 800973e:	3601      	adds	r6, #1
 8009740:	700a      	strb	r2, [r1, #0]
 8009742:	781a      	ldrb	r2, [r3, #0]
 8009744:	3201      	adds	r2, #1
 8009746:	701a      	strb	r2, [r3, #0]
 8009748:	e785      	b.n	8009656 <_dtoa_r+0x686>
 800974a:	2200      	movs	r2, #0
 800974c:	4bad      	ldr	r3, [pc, #692]	; (8009a04 <_dtoa_r+0xa34>)
 800974e:	f7f8 fb91 	bl	8001e74 <__aeabi_dmul>
 8009752:	2200      	movs	r2, #0
 8009754:	2300      	movs	r3, #0
 8009756:	0004      	movs	r4, r0
 8009758:	000d      	movs	r5, r1
 800975a:	f7f6 fe77 	bl	800044c <__aeabi_dcmpeq>
 800975e:	2800      	cmp	r0, #0
 8009760:	d09b      	beq.n	800969a <_dtoa_r+0x6ca>
 8009762:	e7cf      	b.n	8009704 <_dtoa_r+0x734>
 8009764:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009766:	2a00      	cmp	r2, #0
 8009768:	d100      	bne.n	800976c <_dtoa_r+0x79c>
 800976a:	e082      	b.n	8009872 <_dtoa_r+0x8a2>
 800976c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800976e:	2a01      	cmp	r2, #1
 8009770:	dc66      	bgt.n	8009840 <_dtoa_r+0x870>
 8009772:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009774:	2a00      	cmp	r2, #0
 8009776:	d05f      	beq.n	8009838 <_dtoa_r+0x868>
 8009778:	4aa3      	ldr	r2, [pc, #652]	; (8009a08 <_dtoa_r+0xa38>)
 800977a:	189b      	adds	r3, r3, r2
 800977c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800977e:	9c08      	ldr	r4, [sp, #32]
 8009780:	9a08      	ldr	r2, [sp, #32]
 8009782:	2101      	movs	r1, #1
 8009784:	18d2      	adds	r2, r2, r3
 8009786:	9208      	str	r2, [sp, #32]
 8009788:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800978a:	0038      	movs	r0, r7
 800978c:	18d3      	adds	r3, r2, r3
 800978e:	930d      	str	r3, [sp, #52]	; 0x34
 8009790:	f000 fb52 	bl	8009e38 <__i2b>
 8009794:	0005      	movs	r5, r0
 8009796:	2c00      	cmp	r4, #0
 8009798:	dd0e      	ble.n	80097b8 <_dtoa_r+0x7e8>
 800979a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800979c:	2b00      	cmp	r3, #0
 800979e:	dd0b      	ble.n	80097b8 <_dtoa_r+0x7e8>
 80097a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097a2:	0023      	movs	r3, r4
 80097a4:	4294      	cmp	r4, r2
 80097a6:	dd00      	ble.n	80097aa <_dtoa_r+0x7da>
 80097a8:	0013      	movs	r3, r2
 80097aa:	9a08      	ldr	r2, [sp, #32]
 80097ac:	1ae4      	subs	r4, r4, r3
 80097ae:	1ad2      	subs	r2, r2, r3
 80097b0:	9208      	str	r2, [sp, #32]
 80097b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	930d      	str	r3, [sp, #52]	; 0x34
 80097b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d01f      	beq.n	80097fe <_dtoa_r+0x82e>
 80097be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d05a      	beq.n	800987a <_dtoa_r+0x8aa>
 80097c4:	2e00      	cmp	r6, #0
 80097c6:	dd11      	ble.n	80097ec <_dtoa_r+0x81c>
 80097c8:	0029      	movs	r1, r5
 80097ca:	0032      	movs	r2, r6
 80097cc:	0038      	movs	r0, r7
 80097ce:	f000 fbf9 	bl	8009fc4 <__pow5mult>
 80097d2:	9a04      	ldr	r2, [sp, #16]
 80097d4:	0001      	movs	r1, r0
 80097d6:	0005      	movs	r5, r0
 80097d8:	0038      	movs	r0, r7
 80097da:	f000 fb43 	bl	8009e64 <__multiply>
 80097de:	9904      	ldr	r1, [sp, #16]
 80097e0:	9007      	str	r0, [sp, #28]
 80097e2:	0038      	movs	r0, r7
 80097e4:	f000 fa78 	bl	8009cd8 <_Bfree>
 80097e8:	9b07      	ldr	r3, [sp, #28]
 80097ea:	9304      	str	r3, [sp, #16]
 80097ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097ee:	1b9a      	subs	r2, r3, r6
 80097f0:	42b3      	cmp	r3, r6
 80097f2:	d004      	beq.n	80097fe <_dtoa_r+0x82e>
 80097f4:	0038      	movs	r0, r7
 80097f6:	9904      	ldr	r1, [sp, #16]
 80097f8:	f000 fbe4 	bl	8009fc4 <__pow5mult>
 80097fc:	9004      	str	r0, [sp, #16]
 80097fe:	2101      	movs	r1, #1
 8009800:	0038      	movs	r0, r7
 8009802:	f000 fb19 	bl	8009e38 <__i2b>
 8009806:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009808:	0006      	movs	r6, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	dd37      	ble.n	800987e <_dtoa_r+0x8ae>
 800980e:	001a      	movs	r2, r3
 8009810:	0001      	movs	r1, r0
 8009812:	0038      	movs	r0, r7
 8009814:	f000 fbd6 	bl	8009fc4 <__pow5mult>
 8009818:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800981a:	0006      	movs	r6, r0
 800981c:	2b01      	cmp	r3, #1
 800981e:	dd33      	ble.n	8009888 <_dtoa_r+0x8b8>
 8009820:	2300      	movs	r3, #0
 8009822:	9307      	str	r3, [sp, #28]
 8009824:	6933      	ldr	r3, [r6, #16]
 8009826:	3303      	adds	r3, #3
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	18f3      	adds	r3, r6, r3
 800982c:	6858      	ldr	r0, [r3, #4]
 800982e:	f000 fabb 	bl	8009da8 <__hi0bits>
 8009832:	2320      	movs	r3, #32
 8009834:	1a18      	subs	r0, r3, r0
 8009836:	e03f      	b.n	80098b8 <_dtoa_r+0x8e8>
 8009838:	2336      	movs	r3, #54	; 0x36
 800983a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800983c:	1a9b      	subs	r3, r3, r2
 800983e:	e79d      	b.n	800977c <_dtoa_r+0x7ac>
 8009840:	9b06      	ldr	r3, [sp, #24]
 8009842:	1e5e      	subs	r6, r3, #1
 8009844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009846:	42b3      	cmp	r3, r6
 8009848:	db08      	blt.n	800985c <_dtoa_r+0x88c>
 800984a:	1b9e      	subs	r6, r3, r6
 800984c:	9b06      	ldr	r3, [sp, #24]
 800984e:	2b00      	cmp	r3, #0
 8009850:	da0c      	bge.n	800986c <_dtoa_r+0x89c>
 8009852:	9b08      	ldr	r3, [sp, #32]
 8009854:	9a06      	ldr	r2, [sp, #24]
 8009856:	1a9c      	subs	r4, r3, r2
 8009858:	2300      	movs	r3, #0
 800985a:	e791      	b.n	8009780 <_dtoa_r+0x7b0>
 800985c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800985e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009860:	1af3      	subs	r3, r6, r3
 8009862:	18d3      	adds	r3, r2, r3
 8009864:	960e      	str	r6, [sp, #56]	; 0x38
 8009866:	9314      	str	r3, [sp, #80]	; 0x50
 8009868:	2600      	movs	r6, #0
 800986a:	e7ef      	b.n	800984c <_dtoa_r+0x87c>
 800986c:	9c08      	ldr	r4, [sp, #32]
 800986e:	9b06      	ldr	r3, [sp, #24]
 8009870:	e786      	b.n	8009780 <_dtoa_r+0x7b0>
 8009872:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009874:	9c08      	ldr	r4, [sp, #32]
 8009876:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009878:	e78d      	b.n	8009796 <_dtoa_r+0x7c6>
 800987a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800987c:	e7ba      	b.n	80097f4 <_dtoa_r+0x824>
 800987e:	2300      	movs	r3, #0
 8009880:	9307      	str	r3, [sp, #28]
 8009882:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009884:	2b01      	cmp	r3, #1
 8009886:	dc13      	bgt.n	80098b0 <_dtoa_r+0x8e0>
 8009888:	2300      	movs	r3, #0
 800988a:	9307      	str	r3, [sp, #28]
 800988c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800988e:	2b00      	cmp	r3, #0
 8009890:	d10e      	bne.n	80098b0 <_dtoa_r+0x8e0>
 8009892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009894:	031b      	lsls	r3, r3, #12
 8009896:	d10b      	bne.n	80098b0 <_dtoa_r+0x8e0>
 8009898:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800989a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800989c:	4213      	tst	r3, r2
 800989e:	d007      	beq.n	80098b0 <_dtoa_r+0x8e0>
 80098a0:	9b08      	ldr	r3, [sp, #32]
 80098a2:	3301      	adds	r3, #1
 80098a4:	9308      	str	r3, [sp, #32]
 80098a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098a8:	3301      	adds	r3, #1
 80098aa:	930d      	str	r3, [sp, #52]	; 0x34
 80098ac:	2301      	movs	r3, #1
 80098ae:	9307      	str	r3, [sp, #28]
 80098b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098b2:	2001      	movs	r0, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1b5      	bne.n	8009824 <_dtoa_r+0x854>
 80098b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098ba:	221f      	movs	r2, #31
 80098bc:	1818      	adds	r0, r3, r0
 80098be:	0003      	movs	r3, r0
 80098c0:	4013      	ands	r3, r2
 80098c2:	4210      	tst	r0, r2
 80098c4:	d046      	beq.n	8009954 <_dtoa_r+0x984>
 80098c6:	3201      	adds	r2, #1
 80098c8:	1ad2      	subs	r2, r2, r3
 80098ca:	2a04      	cmp	r2, #4
 80098cc:	dd3f      	ble.n	800994e <_dtoa_r+0x97e>
 80098ce:	221c      	movs	r2, #28
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	9a08      	ldr	r2, [sp, #32]
 80098d4:	18e4      	adds	r4, r4, r3
 80098d6:	18d2      	adds	r2, r2, r3
 80098d8:	9208      	str	r2, [sp, #32]
 80098da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098dc:	18d3      	adds	r3, r2, r3
 80098de:	930d      	str	r3, [sp, #52]	; 0x34
 80098e0:	9b08      	ldr	r3, [sp, #32]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	dd05      	ble.n	80098f2 <_dtoa_r+0x922>
 80098e6:	001a      	movs	r2, r3
 80098e8:	0038      	movs	r0, r7
 80098ea:	9904      	ldr	r1, [sp, #16]
 80098ec:	f000 fbc6 	bl	800a07c <__lshift>
 80098f0:	9004      	str	r0, [sp, #16]
 80098f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dd05      	ble.n	8009904 <_dtoa_r+0x934>
 80098f8:	0031      	movs	r1, r6
 80098fa:	001a      	movs	r2, r3
 80098fc:	0038      	movs	r0, r7
 80098fe:	f000 fbbd 	bl	800a07c <__lshift>
 8009902:	0006      	movs	r6, r0
 8009904:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009906:	2b00      	cmp	r3, #0
 8009908:	d026      	beq.n	8009958 <_dtoa_r+0x988>
 800990a:	0031      	movs	r1, r6
 800990c:	9804      	ldr	r0, [sp, #16]
 800990e:	f000 fc25 	bl	800a15c <__mcmp>
 8009912:	2800      	cmp	r0, #0
 8009914:	da20      	bge.n	8009958 <_dtoa_r+0x988>
 8009916:	9b02      	ldr	r3, [sp, #8]
 8009918:	220a      	movs	r2, #10
 800991a:	3b01      	subs	r3, #1
 800991c:	9302      	str	r3, [sp, #8]
 800991e:	0038      	movs	r0, r7
 8009920:	2300      	movs	r3, #0
 8009922:	9904      	ldr	r1, [sp, #16]
 8009924:	f000 f9fc 	bl	8009d20 <__multadd>
 8009928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800992a:	9004      	str	r0, [sp, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d100      	bne.n	8009932 <_dtoa_r+0x962>
 8009930:	e160      	b.n	8009bf4 <_dtoa_r+0xc24>
 8009932:	2300      	movs	r3, #0
 8009934:	0029      	movs	r1, r5
 8009936:	220a      	movs	r2, #10
 8009938:	0038      	movs	r0, r7
 800993a:	f000 f9f1 	bl	8009d20 <__multadd>
 800993e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009940:	0005      	movs	r5, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	dc47      	bgt.n	80099d6 <_dtoa_r+0xa06>
 8009946:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009948:	2b02      	cmp	r3, #2
 800994a:	dc0d      	bgt.n	8009968 <_dtoa_r+0x998>
 800994c:	e043      	b.n	80099d6 <_dtoa_r+0xa06>
 800994e:	2a04      	cmp	r2, #4
 8009950:	d0c6      	beq.n	80098e0 <_dtoa_r+0x910>
 8009952:	0013      	movs	r3, r2
 8009954:	331c      	adds	r3, #28
 8009956:	e7bc      	b.n	80098d2 <_dtoa_r+0x902>
 8009958:	9b06      	ldr	r3, [sp, #24]
 800995a:	2b00      	cmp	r3, #0
 800995c:	dc35      	bgt.n	80099ca <_dtoa_r+0x9fa>
 800995e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009960:	2b02      	cmp	r3, #2
 8009962:	dd32      	ble.n	80099ca <_dtoa_r+0x9fa>
 8009964:	9b06      	ldr	r3, [sp, #24]
 8009966:	930c      	str	r3, [sp, #48]	; 0x30
 8009968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10c      	bne.n	8009988 <_dtoa_r+0x9b8>
 800996e:	0031      	movs	r1, r6
 8009970:	2205      	movs	r2, #5
 8009972:	0038      	movs	r0, r7
 8009974:	f000 f9d4 	bl	8009d20 <__multadd>
 8009978:	0006      	movs	r6, r0
 800997a:	0001      	movs	r1, r0
 800997c:	9804      	ldr	r0, [sp, #16]
 800997e:	f000 fbed 	bl	800a15c <__mcmp>
 8009982:	2800      	cmp	r0, #0
 8009984:	dd00      	ble.n	8009988 <_dtoa_r+0x9b8>
 8009986:	e59f      	b.n	80094c8 <_dtoa_r+0x4f8>
 8009988:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800998a:	43db      	mvns	r3, r3
 800998c:	9302      	str	r3, [sp, #8]
 800998e:	9b05      	ldr	r3, [sp, #20]
 8009990:	9307      	str	r3, [sp, #28]
 8009992:	2400      	movs	r4, #0
 8009994:	0031      	movs	r1, r6
 8009996:	0038      	movs	r0, r7
 8009998:	f000 f99e 	bl	8009cd8 <_Bfree>
 800999c:	2d00      	cmp	r5, #0
 800999e:	d100      	bne.n	80099a2 <_dtoa_r+0x9d2>
 80099a0:	e6b0      	b.n	8009704 <_dtoa_r+0x734>
 80099a2:	2c00      	cmp	r4, #0
 80099a4:	d005      	beq.n	80099b2 <_dtoa_r+0x9e2>
 80099a6:	42ac      	cmp	r4, r5
 80099a8:	d003      	beq.n	80099b2 <_dtoa_r+0x9e2>
 80099aa:	0021      	movs	r1, r4
 80099ac:	0038      	movs	r0, r7
 80099ae:	f000 f993 	bl	8009cd8 <_Bfree>
 80099b2:	0029      	movs	r1, r5
 80099b4:	0038      	movs	r0, r7
 80099b6:	f000 f98f 	bl	8009cd8 <_Bfree>
 80099ba:	e6a3      	b.n	8009704 <_dtoa_r+0x734>
 80099bc:	2600      	movs	r6, #0
 80099be:	0035      	movs	r5, r6
 80099c0:	e7e2      	b.n	8009988 <_dtoa_r+0x9b8>
 80099c2:	9602      	str	r6, [sp, #8]
 80099c4:	9e07      	ldr	r6, [sp, #28]
 80099c6:	0035      	movs	r5, r6
 80099c8:	e57e      	b.n	80094c8 <_dtoa_r+0x4f8>
 80099ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d100      	bne.n	80099d2 <_dtoa_r+0xa02>
 80099d0:	e0c8      	b.n	8009b64 <_dtoa_r+0xb94>
 80099d2:	9b06      	ldr	r3, [sp, #24]
 80099d4:	930c      	str	r3, [sp, #48]	; 0x30
 80099d6:	2c00      	cmp	r4, #0
 80099d8:	dd05      	ble.n	80099e6 <_dtoa_r+0xa16>
 80099da:	0029      	movs	r1, r5
 80099dc:	0022      	movs	r2, r4
 80099de:	0038      	movs	r0, r7
 80099e0:	f000 fb4c 	bl	800a07c <__lshift>
 80099e4:	0005      	movs	r5, r0
 80099e6:	9b07      	ldr	r3, [sp, #28]
 80099e8:	0028      	movs	r0, r5
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d01f      	beq.n	8009a2e <_dtoa_r+0xa5e>
 80099ee:	0038      	movs	r0, r7
 80099f0:	6869      	ldr	r1, [r5, #4]
 80099f2:	f000 f92d 	bl	8009c50 <_Balloc>
 80099f6:	1e04      	subs	r4, r0, #0
 80099f8:	d10c      	bne.n	8009a14 <_dtoa_r+0xa44>
 80099fa:	0002      	movs	r2, r0
 80099fc:	4b03      	ldr	r3, [pc, #12]	; (8009a0c <_dtoa_r+0xa3c>)
 80099fe:	4904      	ldr	r1, [pc, #16]	; (8009a10 <_dtoa_r+0xa40>)
 8009a00:	f7ff fafb 	bl	8008ffa <_dtoa_r+0x2a>
 8009a04:	40240000 	.word	0x40240000
 8009a08:	00000433 	.word	0x00000433
 8009a0c:	0800c65b 	.word	0x0800c65b
 8009a10:	000002ea 	.word	0x000002ea
 8009a14:	0029      	movs	r1, r5
 8009a16:	692b      	ldr	r3, [r5, #16]
 8009a18:	310c      	adds	r1, #12
 8009a1a:	1c9a      	adds	r2, r3, #2
 8009a1c:	0092      	lsls	r2, r2, #2
 8009a1e:	300c      	adds	r0, #12
 8009a20:	f000 f90d 	bl	8009c3e <memcpy>
 8009a24:	2201      	movs	r2, #1
 8009a26:	0021      	movs	r1, r4
 8009a28:	0038      	movs	r0, r7
 8009a2a:	f000 fb27 	bl	800a07c <__lshift>
 8009a2e:	002c      	movs	r4, r5
 8009a30:	0005      	movs	r5, r0
 8009a32:	9b05      	ldr	r3, [sp, #20]
 8009a34:	9308      	str	r3, [sp, #32]
 8009a36:	0031      	movs	r1, r6
 8009a38:	9804      	ldr	r0, [sp, #16]
 8009a3a:	f7ff fa3d 	bl	8008eb8 <quorem>
 8009a3e:	0003      	movs	r3, r0
 8009a40:	0021      	movs	r1, r4
 8009a42:	3330      	adds	r3, #48	; 0x30
 8009a44:	900e      	str	r0, [sp, #56]	; 0x38
 8009a46:	9804      	ldr	r0, [sp, #16]
 8009a48:	9306      	str	r3, [sp, #24]
 8009a4a:	f000 fb87 	bl	800a15c <__mcmp>
 8009a4e:	002a      	movs	r2, r5
 8009a50:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a52:	0031      	movs	r1, r6
 8009a54:	0038      	movs	r0, r7
 8009a56:	f000 fb9d 	bl	800a194 <__mdiff>
 8009a5a:	68c3      	ldr	r3, [r0, #12]
 8009a5c:	9007      	str	r0, [sp, #28]
 8009a5e:	9310      	str	r3, [sp, #64]	; 0x40
 8009a60:	2301      	movs	r3, #1
 8009a62:	930d      	str	r3, [sp, #52]	; 0x34
 8009a64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d104      	bne.n	8009a74 <_dtoa_r+0xaa4>
 8009a6a:	0001      	movs	r1, r0
 8009a6c:	9804      	ldr	r0, [sp, #16]
 8009a6e:	f000 fb75 	bl	800a15c <__mcmp>
 8009a72:	900d      	str	r0, [sp, #52]	; 0x34
 8009a74:	0038      	movs	r0, r7
 8009a76:	9907      	ldr	r1, [sp, #28]
 8009a78:	f000 f92e 	bl	8009cd8 <_Bfree>
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009a80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a82:	4018      	ands	r0, r3
 8009a84:	9b08      	ldr	r3, [sp, #32]
 8009a86:	3301      	adds	r3, #1
 8009a88:	9307      	str	r3, [sp, #28]
 8009a8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	4303      	orrs	r3, r0
 8009a90:	d10c      	bne.n	8009aac <_dtoa_r+0xadc>
 8009a92:	9b06      	ldr	r3, [sp, #24]
 8009a94:	2b39      	cmp	r3, #57	; 0x39
 8009a96:	d025      	beq.n	8009ae4 <_dtoa_r+0xb14>
 8009a98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	dd02      	ble.n	8009aa4 <_dtoa_r+0xad4>
 8009a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009aa0:	3331      	adds	r3, #49	; 0x31
 8009aa2:	9306      	str	r3, [sp, #24]
 8009aa4:	9b08      	ldr	r3, [sp, #32]
 8009aa6:	9a06      	ldr	r2, [sp, #24]
 8009aa8:	701a      	strb	r2, [r3, #0]
 8009aaa:	e773      	b.n	8009994 <_dtoa_r+0x9c4>
 8009aac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	db03      	blt.n	8009aba <_dtoa_r+0xaea>
 8009ab2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	4303      	orrs	r3, r0
 8009ab8:	d11f      	bne.n	8009afa <_dtoa_r+0xb2a>
 8009aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	ddf1      	ble.n	8009aa4 <_dtoa_r+0xad4>
 8009ac0:	9904      	ldr	r1, [sp, #16]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	0038      	movs	r0, r7
 8009ac6:	f000 fad9 	bl	800a07c <__lshift>
 8009aca:	0031      	movs	r1, r6
 8009acc:	9004      	str	r0, [sp, #16]
 8009ace:	f000 fb45 	bl	800a15c <__mcmp>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	dc03      	bgt.n	8009ade <_dtoa_r+0xb0e>
 8009ad6:	d1e5      	bne.n	8009aa4 <_dtoa_r+0xad4>
 8009ad8:	9b06      	ldr	r3, [sp, #24]
 8009ada:	07db      	lsls	r3, r3, #31
 8009adc:	d5e2      	bpl.n	8009aa4 <_dtoa_r+0xad4>
 8009ade:	9b06      	ldr	r3, [sp, #24]
 8009ae0:	2b39      	cmp	r3, #57	; 0x39
 8009ae2:	d1dc      	bne.n	8009a9e <_dtoa_r+0xace>
 8009ae4:	2339      	movs	r3, #57	; 0x39
 8009ae6:	9a08      	ldr	r2, [sp, #32]
 8009ae8:	7013      	strb	r3, [r2, #0]
 8009aea:	9b07      	ldr	r3, [sp, #28]
 8009aec:	9307      	str	r3, [sp, #28]
 8009aee:	3b01      	subs	r3, #1
 8009af0:	781a      	ldrb	r2, [r3, #0]
 8009af2:	2a39      	cmp	r2, #57	; 0x39
 8009af4:	d06c      	beq.n	8009bd0 <_dtoa_r+0xc00>
 8009af6:	3201      	adds	r2, #1
 8009af8:	e7d6      	b.n	8009aa8 <_dtoa_r+0xad8>
 8009afa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	dd07      	ble.n	8009b10 <_dtoa_r+0xb40>
 8009b00:	9b06      	ldr	r3, [sp, #24]
 8009b02:	2b39      	cmp	r3, #57	; 0x39
 8009b04:	d0ee      	beq.n	8009ae4 <_dtoa_r+0xb14>
 8009b06:	9b06      	ldr	r3, [sp, #24]
 8009b08:	9a08      	ldr	r2, [sp, #32]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	7013      	strb	r3, [r2, #0]
 8009b0e:	e741      	b.n	8009994 <_dtoa_r+0x9c4>
 8009b10:	9b08      	ldr	r3, [sp, #32]
 8009b12:	9a06      	ldr	r2, [sp, #24]
 8009b14:	701a      	strb	r2, [r3, #0]
 8009b16:	2301      	movs	r3, #1
 8009b18:	9a05      	ldr	r2, [sp, #20]
 8009b1a:	1a9b      	subs	r3, r3, r2
 8009b1c:	9a08      	ldr	r2, [sp, #32]
 8009b1e:	189b      	adds	r3, r3, r2
 8009b20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d03e      	beq.n	8009ba4 <_dtoa_r+0xbd4>
 8009b26:	2300      	movs	r3, #0
 8009b28:	220a      	movs	r2, #10
 8009b2a:	9904      	ldr	r1, [sp, #16]
 8009b2c:	0038      	movs	r0, r7
 8009b2e:	f000 f8f7 	bl	8009d20 <__multadd>
 8009b32:	2300      	movs	r3, #0
 8009b34:	9004      	str	r0, [sp, #16]
 8009b36:	220a      	movs	r2, #10
 8009b38:	0021      	movs	r1, r4
 8009b3a:	0038      	movs	r0, r7
 8009b3c:	42ac      	cmp	r4, r5
 8009b3e:	d106      	bne.n	8009b4e <_dtoa_r+0xb7e>
 8009b40:	f000 f8ee 	bl	8009d20 <__multadd>
 8009b44:	0004      	movs	r4, r0
 8009b46:	0005      	movs	r5, r0
 8009b48:	9b07      	ldr	r3, [sp, #28]
 8009b4a:	9308      	str	r3, [sp, #32]
 8009b4c:	e773      	b.n	8009a36 <_dtoa_r+0xa66>
 8009b4e:	f000 f8e7 	bl	8009d20 <__multadd>
 8009b52:	0029      	movs	r1, r5
 8009b54:	0004      	movs	r4, r0
 8009b56:	2300      	movs	r3, #0
 8009b58:	220a      	movs	r2, #10
 8009b5a:	0038      	movs	r0, r7
 8009b5c:	f000 f8e0 	bl	8009d20 <__multadd>
 8009b60:	0005      	movs	r5, r0
 8009b62:	e7f1      	b.n	8009b48 <_dtoa_r+0xb78>
 8009b64:	9b06      	ldr	r3, [sp, #24]
 8009b66:	930c      	str	r3, [sp, #48]	; 0x30
 8009b68:	2400      	movs	r4, #0
 8009b6a:	0031      	movs	r1, r6
 8009b6c:	9804      	ldr	r0, [sp, #16]
 8009b6e:	f7ff f9a3 	bl	8008eb8 <quorem>
 8009b72:	9b05      	ldr	r3, [sp, #20]
 8009b74:	3030      	adds	r0, #48	; 0x30
 8009b76:	5518      	strb	r0, [r3, r4]
 8009b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b7a:	3401      	adds	r4, #1
 8009b7c:	9006      	str	r0, [sp, #24]
 8009b7e:	42a3      	cmp	r3, r4
 8009b80:	dd07      	ble.n	8009b92 <_dtoa_r+0xbc2>
 8009b82:	2300      	movs	r3, #0
 8009b84:	220a      	movs	r2, #10
 8009b86:	0038      	movs	r0, r7
 8009b88:	9904      	ldr	r1, [sp, #16]
 8009b8a:	f000 f8c9 	bl	8009d20 <__multadd>
 8009b8e:	9004      	str	r0, [sp, #16]
 8009b90:	e7eb      	b.n	8009b6a <_dtoa_r+0xb9a>
 8009b92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b94:	2001      	movs	r0, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	dd00      	ble.n	8009b9c <_dtoa_r+0xbcc>
 8009b9a:	0018      	movs	r0, r3
 8009b9c:	2400      	movs	r4, #0
 8009b9e:	9b05      	ldr	r3, [sp, #20]
 8009ba0:	181b      	adds	r3, r3, r0
 8009ba2:	9307      	str	r3, [sp, #28]
 8009ba4:	9904      	ldr	r1, [sp, #16]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	0038      	movs	r0, r7
 8009baa:	f000 fa67 	bl	800a07c <__lshift>
 8009bae:	0031      	movs	r1, r6
 8009bb0:	9004      	str	r0, [sp, #16]
 8009bb2:	f000 fad3 	bl	800a15c <__mcmp>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	dc97      	bgt.n	8009aea <_dtoa_r+0xb1a>
 8009bba:	d102      	bne.n	8009bc2 <_dtoa_r+0xbf2>
 8009bbc:	9b06      	ldr	r3, [sp, #24]
 8009bbe:	07db      	lsls	r3, r3, #31
 8009bc0:	d493      	bmi.n	8009aea <_dtoa_r+0xb1a>
 8009bc2:	9b07      	ldr	r3, [sp, #28]
 8009bc4:	9307      	str	r3, [sp, #28]
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	781a      	ldrb	r2, [r3, #0]
 8009bca:	2a30      	cmp	r2, #48	; 0x30
 8009bcc:	d0fa      	beq.n	8009bc4 <_dtoa_r+0xbf4>
 8009bce:	e6e1      	b.n	8009994 <_dtoa_r+0x9c4>
 8009bd0:	9a05      	ldr	r2, [sp, #20]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d18a      	bne.n	8009aec <_dtoa_r+0xb1c>
 8009bd6:	9b02      	ldr	r3, [sp, #8]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	9302      	str	r3, [sp, #8]
 8009bdc:	2331      	movs	r3, #49	; 0x31
 8009bde:	e795      	b.n	8009b0c <_dtoa_r+0xb3c>
 8009be0:	4b08      	ldr	r3, [pc, #32]	; (8009c04 <_dtoa_r+0xc34>)
 8009be2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009be4:	9305      	str	r3, [sp, #20]
 8009be6:	4b08      	ldr	r3, [pc, #32]	; (8009c08 <_dtoa_r+0xc38>)
 8009be8:	2a00      	cmp	r2, #0
 8009bea:	d001      	beq.n	8009bf0 <_dtoa_r+0xc20>
 8009bec:	f7ff fa3b 	bl	8009066 <_dtoa_r+0x96>
 8009bf0:	f7ff fa3b 	bl	800906a <_dtoa_r+0x9a>
 8009bf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	dcb6      	bgt.n	8009b68 <_dtoa_r+0xb98>
 8009bfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	dd00      	ble.n	8009c02 <_dtoa_r+0xc32>
 8009c00:	e6b2      	b.n	8009968 <_dtoa_r+0x998>
 8009c02:	e7b1      	b.n	8009b68 <_dtoa_r+0xb98>
 8009c04:	0800c5d8 	.word	0x0800c5d8
 8009c08:	0800c5e0 	.word	0x0800c5e0

08009c0c <_localeconv_r>:
 8009c0c:	4800      	ldr	r0, [pc, #0]	; (8009c10 <_localeconv_r+0x4>)
 8009c0e:	4770      	bx	lr
 8009c10:	20000160 	.word	0x20000160

08009c14 <malloc>:
 8009c14:	b510      	push	{r4, lr}
 8009c16:	4b03      	ldr	r3, [pc, #12]	; (8009c24 <malloc+0x10>)
 8009c18:	0001      	movs	r1, r0
 8009c1a:	6818      	ldr	r0, [r3, #0]
 8009c1c:	f000 fc0e 	bl	800a43c <_malloc_r>
 8009c20:	bd10      	pop	{r4, pc}
 8009c22:	46c0      	nop			; (mov r8, r8)
 8009c24:	2000000c 	.word	0x2000000c

08009c28 <memchr>:
 8009c28:	b2c9      	uxtb	r1, r1
 8009c2a:	1882      	adds	r2, r0, r2
 8009c2c:	4290      	cmp	r0, r2
 8009c2e:	d101      	bne.n	8009c34 <memchr+0xc>
 8009c30:	2000      	movs	r0, #0
 8009c32:	4770      	bx	lr
 8009c34:	7803      	ldrb	r3, [r0, #0]
 8009c36:	428b      	cmp	r3, r1
 8009c38:	d0fb      	beq.n	8009c32 <memchr+0xa>
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	e7f6      	b.n	8009c2c <memchr+0x4>

08009c3e <memcpy>:
 8009c3e:	2300      	movs	r3, #0
 8009c40:	b510      	push	{r4, lr}
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d100      	bne.n	8009c48 <memcpy+0xa>
 8009c46:	bd10      	pop	{r4, pc}
 8009c48:	5ccc      	ldrb	r4, [r1, r3]
 8009c4a:	54c4      	strb	r4, [r0, r3]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	e7f8      	b.n	8009c42 <memcpy+0x4>

08009c50 <_Balloc>:
 8009c50:	b570      	push	{r4, r5, r6, lr}
 8009c52:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c54:	0006      	movs	r6, r0
 8009c56:	000c      	movs	r4, r1
 8009c58:	2d00      	cmp	r5, #0
 8009c5a:	d10e      	bne.n	8009c7a <_Balloc+0x2a>
 8009c5c:	2010      	movs	r0, #16
 8009c5e:	f7ff ffd9 	bl	8009c14 <malloc>
 8009c62:	1e02      	subs	r2, r0, #0
 8009c64:	6270      	str	r0, [r6, #36]	; 0x24
 8009c66:	d104      	bne.n	8009c72 <_Balloc+0x22>
 8009c68:	2166      	movs	r1, #102	; 0x66
 8009c6a:	4b19      	ldr	r3, [pc, #100]	; (8009cd0 <_Balloc+0x80>)
 8009c6c:	4819      	ldr	r0, [pc, #100]	; (8009cd4 <_Balloc+0x84>)
 8009c6e:	f000 fdb7 	bl	800a7e0 <__assert_func>
 8009c72:	6045      	str	r5, [r0, #4]
 8009c74:	6085      	str	r5, [r0, #8]
 8009c76:	6005      	str	r5, [r0, #0]
 8009c78:	60c5      	str	r5, [r0, #12]
 8009c7a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009c7c:	68eb      	ldr	r3, [r5, #12]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d013      	beq.n	8009caa <_Balloc+0x5a>
 8009c82:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c84:	00a2      	lsls	r2, r4, #2
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	189b      	adds	r3, r3, r2
 8009c8a:	6818      	ldr	r0, [r3, #0]
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	d118      	bne.n	8009cc2 <_Balloc+0x72>
 8009c90:	2101      	movs	r1, #1
 8009c92:	000d      	movs	r5, r1
 8009c94:	40a5      	lsls	r5, r4
 8009c96:	1d6a      	adds	r2, r5, #5
 8009c98:	0030      	movs	r0, r6
 8009c9a:	0092      	lsls	r2, r2, #2
 8009c9c:	f000 fb76 	bl	800a38c <_calloc_r>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d00c      	beq.n	8009cbe <_Balloc+0x6e>
 8009ca4:	6044      	str	r4, [r0, #4]
 8009ca6:	6085      	str	r5, [r0, #8]
 8009ca8:	e00d      	b.n	8009cc6 <_Balloc+0x76>
 8009caa:	2221      	movs	r2, #33	; 0x21
 8009cac:	2104      	movs	r1, #4
 8009cae:	0030      	movs	r0, r6
 8009cb0:	f000 fb6c 	bl	800a38c <_calloc_r>
 8009cb4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009cb6:	60e8      	str	r0, [r5, #12]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1e1      	bne.n	8009c82 <_Balloc+0x32>
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	bd70      	pop	{r4, r5, r6, pc}
 8009cc2:	6802      	ldr	r2, [r0, #0]
 8009cc4:	601a      	str	r2, [r3, #0]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	6103      	str	r3, [r0, #16]
 8009cca:	60c3      	str	r3, [r0, #12]
 8009ccc:	e7f8      	b.n	8009cc0 <_Balloc+0x70>
 8009cce:	46c0      	nop			; (mov r8, r8)
 8009cd0:	0800c5e5 	.word	0x0800c5e5
 8009cd4:	0800c66c 	.word	0x0800c66c

08009cd8 <_Bfree>:
 8009cd8:	b570      	push	{r4, r5, r6, lr}
 8009cda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009cdc:	0005      	movs	r5, r0
 8009cde:	000c      	movs	r4, r1
 8009ce0:	2e00      	cmp	r6, #0
 8009ce2:	d10e      	bne.n	8009d02 <_Bfree+0x2a>
 8009ce4:	2010      	movs	r0, #16
 8009ce6:	f7ff ff95 	bl	8009c14 <malloc>
 8009cea:	1e02      	subs	r2, r0, #0
 8009cec:	6268      	str	r0, [r5, #36]	; 0x24
 8009cee:	d104      	bne.n	8009cfa <_Bfree+0x22>
 8009cf0:	218a      	movs	r1, #138	; 0x8a
 8009cf2:	4b09      	ldr	r3, [pc, #36]	; (8009d18 <_Bfree+0x40>)
 8009cf4:	4809      	ldr	r0, [pc, #36]	; (8009d1c <_Bfree+0x44>)
 8009cf6:	f000 fd73 	bl	800a7e0 <__assert_func>
 8009cfa:	6046      	str	r6, [r0, #4]
 8009cfc:	6086      	str	r6, [r0, #8]
 8009cfe:	6006      	str	r6, [r0, #0]
 8009d00:	60c6      	str	r6, [r0, #12]
 8009d02:	2c00      	cmp	r4, #0
 8009d04:	d007      	beq.n	8009d16 <_Bfree+0x3e>
 8009d06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d08:	6862      	ldr	r2, [r4, #4]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	0092      	lsls	r2, r2, #2
 8009d0e:	189b      	adds	r3, r3, r2
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	6022      	str	r2, [r4, #0]
 8009d14:	601c      	str	r4, [r3, #0]
 8009d16:	bd70      	pop	{r4, r5, r6, pc}
 8009d18:	0800c5e5 	.word	0x0800c5e5
 8009d1c:	0800c66c 	.word	0x0800c66c

08009d20 <__multadd>:
 8009d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d22:	000e      	movs	r6, r1
 8009d24:	9001      	str	r0, [sp, #4]
 8009d26:	000c      	movs	r4, r1
 8009d28:	001d      	movs	r5, r3
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	690f      	ldr	r7, [r1, #16]
 8009d2e:	3614      	adds	r6, #20
 8009d30:	6833      	ldr	r3, [r6, #0]
 8009d32:	3001      	adds	r0, #1
 8009d34:	b299      	uxth	r1, r3
 8009d36:	4351      	muls	r1, r2
 8009d38:	0c1b      	lsrs	r3, r3, #16
 8009d3a:	4353      	muls	r3, r2
 8009d3c:	1949      	adds	r1, r1, r5
 8009d3e:	0c0d      	lsrs	r5, r1, #16
 8009d40:	195b      	adds	r3, r3, r5
 8009d42:	0c1d      	lsrs	r5, r3, #16
 8009d44:	b289      	uxth	r1, r1
 8009d46:	041b      	lsls	r3, r3, #16
 8009d48:	185b      	adds	r3, r3, r1
 8009d4a:	c608      	stmia	r6!, {r3}
 8009d4c:	4287      	cmp	r7, r0
 8009d4e:	dcef      	bgt.n	8009d30 <__multadd+0x10>
 8009d50:	2d00      	cmp	r5, #0
 8009d52:	d022      	beq.n	8009d9a <__multadd+0x7a>
 8009d54:	68a3      	ldr	r3, [r4, #8]
 8009d56:	42bb      	cmp	r3, r7
 8009d58:	dc19      	bgt.n	8009d8e <__multadd+0x6e>
 8009d5a:	6863      	ldr	r3, [r4, #4]
 8009d5c:	9801      	ldr	r0, [sp, #4]
 8009d5e:	1c59      	adds	r1, r3, #1
 8009d60:	f7ff ff76 	bl	8009c50 <_Balloc>
 8009d64:	1e06      	subs	r6, r0, #0
 8009d66:	d105      	bne.n	8009d74 <__multadd+0x54>
 8009d68:	0002      	movs	r2, r0
 8009d6a:	21b5      	movs	r1, #181	; 0xb5
 8009d6c:	4b0c      	ldr	r3, [pc, #48]	; (8009da0 <__multadd+0x80>)
 8009d6e:	480d      	ldr	r0, [pc, #52]	; (8009da4 <__multadd+0x84>)
 8009d70:	f000 fd36 	bl	800a7e0 <__assert_func>
 8009d74:	0021      	movs	r1, r4
 8009d76:	6923      	ldr	r3, [r4, #16]
 8009d78:	310c      	adds	r1, #12
 8009d7a:	1c9a      	adds	r2, r3, #2
 8009d7c:	0092      	lsls	r2, r2, #2
 8009d7e:	300c      	adds	r0, #12
 8009d80:	f7ff ff5d 	bl	8009c3e <memcpy>
 8009d84:	0021      	movs	r1, r4
 8009d86:	9801      	ldr	r0, [sp, #4]
 8009d88:	f7ff ffa6 	bl	8009cd8 <_Bfree>
 8009d8c:	0034      	movs	r4, r6
 8009d8e:	1d3b      	adds	r3, r7, #4
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	18e3      	adds	r3, r4, r3
 8009d94:	605d      	str	r5, [r3, #4]
 8009d96:	1c7b      	adds	r3, r7, #1
 8009d98:	6123      	str	r3, [r4, #16]
 8009d9a:	0020      	movs	r0, r4
 8009d9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d9e:	46c0      	nop			; (mov r8, r8)
 8009da0:	0800c65b 	.word	0x0800c65b
 8009da4:	0800c66c 	.word	0x0800c66c

08009da8 <__hi0bits>:
 8009da8:	0003      	movs	r3, r0
 8009daa:	0c02      	lsrs	r2, r0, #16
 8009dac:	2000      	movs	r0, #0
 8009dae:	4282      	cmp	r2, r0
 8009db0:	d101      	bne.n	8009db6 <__hi0bits+0xe>
 8009db2:	041b      	lsls	r3, r3, #16
 8009db4:	3010      	adds	r0, #16
 8009db6:	0e1a      	lsrs	r2, r3, #24
 8009db8:	d101      	bne.n	8009dbe <__hi0bits+0x16>
 8009dba:	3008      	adds	r0, #8
 8009dbc:	021b      	lsls	r3, r3, #8
 8009dbe:	0f1a      	lsrs	r2, r3, #28
 8009dc0:	d101      	bne.n	8009dc6 <__hi0bits+0x1e>
 8009dc2:	3004      	adds	r0, #4
 8009dc4:	011b      	lsls	r3, r3, #4
 8009dc6:	0f9a      	lsrs	r2, r3, #30
 8009dc8:	d101      	bne.n	8009dce <__hi0bits+0x26>
 8009dca:	3002      	adds	r0, #2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	db03      	blt.n	8009dda <__hi0bits+0x32>
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	d400      	bmi.n	8009dda <__hi0bits+0x32>
 8009dd8:	2020      	movs	r0, #32
 8009dda:	4770      	bx	lr

08009ddc <__lo0bits>:
 8009ddc:	6803      	ldr	r3, [r0, #0]
 8009dde:	0002      	movs	r2, r0
 8009de0:	2107      	movs	r1, #7
 8009de2:	0018      	movs	r0, r3
 8009de4:	4008      	ands	r0, r1
 8009de6:	420b      	tst	r3, r1
 8009de8:	d00d      	beq.n	8009e06 <__lo0bits+0x2a>
 8009dea:	3906      	subs	r1, #6
 8009dec:	2000      	movs	r0, #0
 8009dee:	420b      	tst	r3, r1
 8009df0:	d105      	bne.n	8009dfe <__lo0bits+0x22>
 8009df2:	3002      	adds	r0, #2
 8009df4:	4203      	tst	r3, r0
 8009df6:	d003      	beq.n	8009e00 <__lo0bits+0x24>
 8009df8:	40cb      	lsrs	r3, r1
 8009dfa:	0008      	movs	r0, r1
 8009dfc:	6013      	str	r3, [r2, #0]
 8009dfe:	4770      	bx	lr
 8009e00:	089b      	lsrs	r3, r3, #2
 8009e02:	6013      	str	r3, [r2, #0]
 8009e04:	e7fb      	b.n	8009dfe <__lo0bits+0x22>
 8009e06:	b299      	uxth	r1, r3
 8009e08:	2900      	cmp	r1, #0
 8009e0a:	d101      	bne.n	8009e10 <__lo0bits+0x34>
 8009e0c:	2010      	movs	r0, #16
 8009e0e:	0c1b      	lsrs	r3, r3, #16
 8009e10:	b2d9      	uxtb	r1, r3
 8009e12:	2900      	cmp	r1, #0
 8009e14:	d101      	bne.n	8009e1a <__lo0bits+0x3e>
 8009e16:	3008      	adds	r0, #8
 8009e18:	0a1b      	lsrs	r3, r3, #8
 8009e1a:	0719      	lsls	r1, r3, #28
 8009e1c:	d101      	bne.n	8009e22 <__lo0bits+0x46>
 8009e1e:	3004      	adds	r0, #4
 8009e20:	091b      	lsrs	r3, r3, #4
 8009e22:	0799      	lsls	r1, r3, #30
 8009e24:	d101      	bne.n	8009e2a <__lo0bits+0x4e>
 8009e26:	3002      	adds	r0, #2
 8009e28:	089b      	lsrs	r3, r3, #2
 8009e2a:	07d9      	lsls	r1, r3, #31
 8009e2c:	d4e9      	bmi.n	8009e02 <__lo0bits+0x26>
 8009e2e:	3001      	adds	r0, #1
 8009e30:	085b      	lsrs	r3, r3, #1
 8009e32:	d1e6      	bne.n	8009e02 <__lo0bits+0x26>
 8009e34:	2020      	movs	r0, #32
 8009e36:	e7e2      	b.n	8009dfe <__lo0bits+0x22>

08009e38 <__i2b>:
 8009e38:	b510      	push	{r4, lr}
 8009e3a:	000c      	movs	r4, r1
 8009e3c:	2101      	movs	r1, #1
 8009e3e:	f7ff ff07 	bl	8009c50 <_Balloc>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d106      	bne.n	8009e54 <__i2b+0x1c>
 8009e46:	21a0      	movs	r1, #160	; 0xa0
 8009e48:	0002      	movs	r2, r0
 8009e4a:	4b04      	ldr	r3, [pc, #16]	; (8009e5c <__i2b+0x24>)
 8009e4c:	4804      	ldr	r0, [pc, #16]	; (8009e60 <__i2b+0x28>)
 8009e4e:	0049      	lsls	r1, r1, #1
 8009e50:	f000 fcc6 	bl	800a7e0 <__assert_func>
 8009e54:	2301      	movs	r3, #1
 8009e56:	6144      	str	r4, [r0, #20]
 8009e58:	6103      	str	r3, [r0, #16]
 8009e5a:	bd10      	pop	{r4, pc}
 8009e5c:	0800c65b 	.word	0x0800c65b
 8009e60:	0800c66c 	.word	0x0800c66c

08009e64 <__multiply>:
 8009e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e66:	690b      	ldr	r3, [r1, #16]
 8009e68:	0014      	movs	r4, r2
 8009e6a:	6912      	ldr	r2, [r2, #16]
 8009e6c:	000d      	movs	r5, r1
 8009e6e:	b089      	sub	sp, #36	; 0x24
 8009e70:	4293      	cmp	r3, r2
 8009e72:	da01      	bge.n	8009e78 <__multiply+0x14>
 8009e74:	0025      	movs	r5, r4
 8009e76:	000c      	movs	r4, r1
 8009e78:	692f      	ldr	r7, [r5, #16]
 8009e7a:	6926      	ldr	r6, [r4, #16]
 8009e7c:	6869      	ldr	r1, [r5, #4]
 8009e7e:	19bb      	adds	r3, r7, r6
 8009e80:	9302      	str	r3, [sp, #8]
 8009e82:	68ab      	ldr	r3, [r5, #8]
 8009e84:	19ba      	adds	r2, r7, r6
 8009e86:	4293      	cmp	r3, r2
 8009e88:	da00      	bge.n	8009e8c <__multiply+0x28>
 8009e8a:	3101      	adds	r1, #1
 8009e8c:	f7ff fee0 	bl	8009c50 <_Balloc>
 8009e90:	9001      	str	r0, [sp, #4]
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d106      	bne.n	8009ea4 <__multiply+0x40>
 8009e96:	215e      	movs	r1, #94	; 0x5e
 8009e98:	0002      	movs	r2, r0
 8009e9a:	4b48      	ldr	r3, [pc, #288]	; (8009fbc <__multiply+0x158>)
 8009e9c:	4848      	ldr	r0, [pc, #288]	; (8009fc0 <__multiply+0x15c>)
 8009e9e:	31ff      	adds	r1, #255	; 0xff
 8009ea0:	f000 fc9e 	bl	800a7e0 <__assert_func>
 8009ea4:	9b01      	ldr	r3, [sp, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	3314      	adds	r3, #20
 8009eaa:	469c      	mov	ip, r3
 8009eac:	19bb      	adds	r3, r7, r6
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4463      	add	r3, ip
 8009eb2:	9303      	str	r3, [sp, #12]
 8009eb4:	4663      	mov	r3, ip
 8009eb6:	9903      	ldr	r1, [sp, #12]
 8009eb8:	428b      	cmp	r3, r1
 8009eba:	d32c      	bcc.n	8009f16 <__multiply+0xb2>
 8009ebc:	002b      	movs	r3, r5
 8009ebe:	0022      	movs	r2, r4
 8009ec0:	3314      	adds	r3, #20
 8009ec2:	00bf      	lsls	r7, r7, #2
 8009ec4:	3214      	adds	r2, #20
 8009ec6:	9306      	str	r3, [sp, #24]
 8009ec8:	00b6      	lsls	r6, r6, #2
 8009eca:	19db      	adds	r3, r3, r7
 8009ecc:	9304      	str	r3, [sp, #16]
 8009ece:	1993      	adds	r3, r2, r6
 8009ed0:	9307      	str	r3, [sp, #28]
 8009ed2:	2304      	movs	r3, #4
 8009ed4:	9305      	str	r3, [sp, #20]
 8009ed6:	002b      	movs	r3, r5
 8009ed8:	9904      	ldr	r1, [sp, #16]
 8009eda:	3315      	adds	r3, #21
 8009edc:	9200      	str	r2, [sp, #0]
 8009ede:	4299      	cmp	r1, r3
 8009ee0:	d305      	bcc.n	8009eee <__multiply+0x8a>
 8009ee2:	1b4b      	subs	r3, r1, r5
 8009ee4:	3b15      	subs	r3, #21
 8009ee6:	089b      	lsrs	r3, r3, #2
 8009ee8:	3301      	adds	r3, #1
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	9305      	str	r3, [sp, #20]
 8009eee:	9b07      	ldr	r3, [sp, #28]
 8009ef0:	9a00      	ldr	r2, [sp, #0]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d311      	bcc.n	8009f1a <__multiply+0xb6>
 8009ef6:	9b02      	ldr	r3, [sp, #8]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	dd06      	ble.n	8009f0a <__multiply+0xa6>
 8009efc:	9b03      	ldr	r3, [sp, #12]
 8009efe:	3b04      	subs	r3, #4
 8009f00:	9303      	str	r3, [sp, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d054      	beq.n	8009fb4 <__multiply+0x150>
 8009f0a:	9b01      	ldr	r3, [sp, #4]
 8009f0c:	9a02      	ldr	r2, [sp, #8]
 8009f0e:	0018      	movs	r0, r3
 8009f10:	611a      	str	r2, [r3, #16]
 8009f12:	b009      	add	sp, #36	; 0x24
 8009f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f16:	c304      	stmia	r3!, {r2}
 8009f18:	e7cd      	b.n	8009eb6 <__multiply+0x52>
 8009f1a:	9b00      	ldr	r3, [sp, #0]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	b298      	uxth	r0, r3
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d01c      	beq.n	8009f5e <__multiply+0xfa>
 8009f24:	4667      	mov	r7, ip
 8009f26:	2400      	movs	r4, #0
 8009f28:	9e06      	ldr	r6, [sp, #24]
 8009f2a:	ce02      	ldmia	r6!, {r1}
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	b28b      	uxth	r3, r1
 8009f30:	4343      	muls	r3, r0
 8009f32:	0c09      	lsrs	r1, r1, #16
 8009f34:	4341      	muls	r1, r0
 8009f36:	b292      	uxth	r2, r2
 8009f38:	189b      	adds	r3, r3, r2
 8009f3a:	191b      	adds	r3, r3, r4
 8009f3c:	000c      	movs	r4, r1
 8009f3e:	683a      	ldr	r2, [r7, #0]
 8009f40:	0c11      	lsrs	r1, r2, #16
 8009f42:	1861      	adds	r1, r4, r1
 8009f44:	0c1c      	lsrs	r4, r3, #16
 8009f46:	1909      	adds	r1, r1, r4
 8009f48:	0c0c      	lsrs	r4, r1, #16
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	0409      	lsls	r1, r1, #16
 8009f4e:	430b      	orrs	r3, r1
 8009f50:	c708      	stmia	r7!, {r3}
 8009f52:	9b04      	ldr	r3, [sp, #16]
 8009f54:	42b3      	cmp	r3, r6
 8009f56:	d8e8      	bhi.n	8009f2a <__multiply+0xc6>
 8009f58:	4663      	mov	r3, ip
 8009f5a:	9a05      	ldr	r2, [sp, #20]
 8009f5c:	509c      	str	r4, [r3, r2]
 8009f5e:	9b00      	ldr	r3, [sp, #0]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	0c1e      	lsrs	r6, r3, #16
 8009f64:	d020      	beq.n	8009fa8 <__multiply+0x144>
 8009f66:	4663      	mov	r3, ip
 8009f68:	002c      	movs	r4, r5
 8009f6a:	4660      	mov	r0, ip
 8009f6c:	2700      	movs	r7, #0
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3414      	adds	r4, #20
 8009f72:	6822      	ldr	r2, [r4, #0]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	b291      	uxth	r1, r2
 8009f78:	4371      	muls	r1, r6
 8009f7a:	6802      	ldr	r2, [r0, #0]
 8009f7c:	0c12      	lsrs	r2, r2, #16
 8009f7e:	1889      	adds	r1, r1, r2
 8009f80:	19cf      	adds	r7, r1, r7
 8009f82:	0439      	lsls	r1, r7, #16
 8009f84:	430b      	orrs	r3, r1
 8009f86:	6003      	str	r3, [r0, #0]
 8009f88:	cc02      	ldmia	r4!, {r1}
 8009f8a:	6843      	ldr	r3, [r0, #4]
 8009f8c:	0c09      	lsrs	r1, r1, #16
 8009f8e:	4371      	muls	r1, r6
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	0c3f      	lsrs	r7, r7, #16
 8009f94:	18cb      	adds	r3, r1, r3
 8009f96:	9a04      	ldr	r2, [sp, #16]
 8009f98:	19db      	adds	r3, r3, r7
 8009f9a:	0c1f      	lsrs	r7, r3, #16
 8009f9c:	3004      	adds	r0, #4
 8009f9e:	42a2      	cmp	r2, r4
 8009fa0:	d8e7      	bhi.n	8009f72 <__multiply+0x10e>
 8009fa2:	4662      	mov	r2, ip
 8009fa4:	9905      	ldr	r1, [sp, #20]
 8009fa6:	5053      	str	r3, [r2, r1]
 8009fa8:	9b00      	ldr	r3, [sp, #0]
 8009faa:	3304      	adds	r3, #4
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	2304      	movs	r3, #4
 8009fb0:	449c      	add	ip, r3
 8009fb2:	e79c      	b.n	8009eee <__multiply+0x8a>
 8009fb4:	9b02      	ldr	r3, [sp, #8]
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	9302      	str	r3, [sp, #8]
 8009fba:	e79c      	b.n	8009ef6 <__multiply+0x92>
 8009fbc:	0800c65b 	.word	0x0800c65b
 8009fc0:	0800c66c 	.word	0x0800c66c

08009fc4 <__pow5mult>:
 8009fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	0015      	movs	r5, r2
 8009fca:	0007      	movs	r7, r0
 8009fcc:	000e      	movs	r6, r1
 8009fce:	401a      	ands	r2, r3
 8009fd0:	421d      	tst	r5, r3
 8009fd2:	d008      	beq.n	8009fe6 <__pow5mult+0x22>
 8009fd4:	4925      	ldr	r1, [pc, #148]	; (800a06c <__pow5mult+0xa8>)
 8009fd6:	3a01      	subs	r2, #1
 8009fd8:	0092      	lsls	r2, r2, #2
 8009fda:	5852      	ldr	r2, [r2, r1]
 8009fdc:	2300      	movs	r3, #0
 8009fde:	0031      	movs	r1, r6
 8009fe0:	f7ff fe9e 	bl	8009d20 <__multadd>
 8009fe4:	0006      	movs	r6, r0
 8009fe6:	10ad      	asrs	r5, r5, #2
 8009fe8:	d03d      	beq.n	800a066 <__pow5mult+0xa2>
 8009fea:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009fec:	2c00      	cmp	r4, #0
 8009fee:	d10f      	bne.n	800a010 <__pow5mult+0x4c>
 8009ff0:	2010      	movs	r0, #16
 8009ff2:	f7ff fe0f 	bl	8009c14 <malloc>
 8009ff6:	1e02      	subs	r2, r0, #0
 8009ff8:	6278      	str	r0, [r7, #36]	; 0x24
 8009ffa:	d105      	bne.n	800a008 <__pow5mult+0x44>
 8009ffc:	21d7      	movs	r1, #215	; 0xd7
 8009ffe:	4b1c      	ldr	r3, [pc, #112]	; (800a070 <__pow5mult+0xac>)
 800a000:	481c      	ldr	r0, [pc, #112]	; (800a074 <__pow5mult+0xb0>)
 800a002:	0049      	lsls	r1, r1, #1
 800a004:	f000 fbec 	bl	800a7e0 <__assert_func>
 800a008:	6044      	str	r4, [r0, #4]
 800a00a:	6084      	str	r4, [r0, #8]
 800a00c:	6004      	str	r4, [r0, #0]
 800a00e:	60c4      	str	r4, [r0, #12]
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	689c      	ldr	r4, [r3, #8]
 800a014:	9301      	str	r3, [sp, #4]
 800a016:	2c00      	cmp	r4, #0
 800a018:	d108      	bne.n	800a02c <__pow5mult+0x68>
 800a01a:	0038      	movs	r0, r7
 800a01c:	4916      	ldr	r1, [pc, #88]	; (800a078 <__pow5mult+0xb4>)
 800a01e:	f7ff ff0b 	bl	8009e38 <__i2b>
 800a022:	9b01      	ldr	r3, [sp, #4]
 800a024:	0004      	movs	r4, r0
 800a026:	6098      	str	r0, [r3, #8]
 800a028:	2300      	movs	r3, #0
 800a02a:	6003      	str	r3, [r0, #0]
 800a02c:	2301      	movs	r3, #1
 800a02e:	421d      	tst	r5, r3
 800a030:	d00a      	beq.n	800a048 <__pow5mult+0x84>
 800a032:	0031      	movs	r1, r6
 800a034:	0022      	movs	r2, r4
 800a036:	0038      	movs	r0, r7
 800a038:	f7ff ff14 	bl	8009e64 <__multiply>
 800a03c:	0031      	movs	r1, r6
 800a03e:	9001      	str	r0, [sp, #4]
 800a040:	0038      	movs	r0, r7
 800a042:	f7ff fe49 	bl	8009cd8 <_Bfree>
 800a046:	9e01      	ldr	r6, [sp, #4]
 800a048:	106d      	asrs	r5, r5, #1
 800a04a:	d00c      	beq.n	800a066 <__pow5mult+0xa2>
 800a04c:	6820      	ldr	r0, [r4, #0]
 800a04e:	2800      	cmp	r0, #0
 800a050:	d107      	bne.n	800a062 <__pow5mult+0x9e>
 800a052:	0022      	movs	r2, r4
 800a054:	0021      	movs	r1, r4
 800a056:	0038      	movs	r0, r7
 800a058:	f7ff ff04 	bl	8009e64 <__multiply>
 800a05c:	2300      	movs	r3, #0
 800a05e:	6020      	str	r0, [r4, #0]
 800a060:	6003      	str	r3, [r0, #0]
 800a062:	0004      	movs	r4, r0
 800a064:	e7e2      	b.n	800a02c <__pow5mult+0x68>
 800a066:	0030      	movs	r0, r6
 800a068:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a06a:	46c0      	nop			; (mov r8, r8)
 800a06c:	0800c7c0 	.word	0x0800c7c0
 800a070:	0800c5e5 	.word	0x0800c5e5
 800a074:	0800c66c 	.word	0x0800c66c
 800a078:	00000271 	.word	0x00000271

0800a07c <__lshift>:
 800a07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a07e:	000c      	movs	r4, r1
 800a080:	0017      	movs	r7, r2
 800a082:	6923      	ldr	r3, [r4, #16]
 800a084:	1155      	asrs	r5, r2, #5
 800a086:	b087      	sub	sp, #28
 800a088:	18eb      	adds	r3, r5, r3
 800a08a:	9302      	str	r3, [sp, #8]
 800a08c:	3301      	adds	r3, #1
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	6849      	ldr	r1, [r1, #4]
 800a092:	68a3      	ldr	r3, [r4, #8]
 800a094:	9004      	str	r0, [sp, #16]
 800a096:	9a01      	ldr	r2, [sp, #4]
 800a098:	4293      	cmp	r3, r2
 800a09a:	db11      	blt.n	800a0c0 <__lshift+0x44>
 800a09c:	9804      	ldr	r0, [sp, #16]
 800a09e:	f7ff fdd7 	bl	8009c50 <_Balloc>
 800a0a2:	0002      	movs	r2, r0
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	3214      	adds	r2, #20
 800a0a8:	0006      	movs	r6, r0
 800a0aa:	0011      	movs	r1, r2
 800a0ac:	9203      	str	r2, [sp, #12]
 800a0ae:	4298      	cmp	r0, r3
 800a0b0:	d10d      	bne.n	800a0ce <__lshift+0x52>
 800a0b2:	21da      	movs	r1, #218	; 0xda
 800a0b4:	0002      	movs	r2, r0
 800a0b6:	4b27      	ldr	r3, [pc, #156]	; (800a154 <__lshift+0xd8>)
 800a0b8:	4827      	ldr	r0, [pc, #156]	; (800a158 <__lshift+0xdc>)
 800a0ba:	31ff      	adds	r1, #255	; 0xff
 800a0bc:	f000 fb90 	bl	800a7e0 <__assert_func>
 800a0c0:	3101      	adds	r1, #1
 800a0c2:	005b      	lsls	r3, r3, #1
 800a0c4:	e7e7      	b.n	800a096 <__lshift+0x1a>
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	0098      	lsls	r0, r3, #2
 800a0ca:	500a      	str	r2, [r1, r0]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	42ab      	cmp	r3, r5
 800a0d0:	dbf9      	blt.n	800a0c6 <__lshift+0x4a>
 800a0d2:	43eb      	mvns	r3, r5
 800a0d4:	17db      	asrs	r3, r3, #31
 800a0d6:	401d      	ands	r5, r3
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	00ad      	lsls	r5, r5, #2
 800a0dc:	211f      	movs	r1, #31
 800a0de:	0038      	movs	r0, r7
 800a0e0:	195d      	adds	r5, r3, r5
 800a0e2:	0023      	movs	r3, r4
 800a0e4:	6922      	ldr	r2, [r4, #16]
 800a0e6:	3314      	adds	r3, #20
 800a0e8:	0092      	lsls	r2, r2, #2
 800a0ea:	4008      	ands	r0, r1
 800a0ec:	4684      	mov	ip, r0
 800a0ee:	189a      	adds	r2, r3, r2
 800a0f0:	420f      	tst	r7, r1
 800a0f2:	d02a      	beq.n	800a14a <__lshift+0xce>
 800a0f4:	3101      	adds	r1, #1
 800a0f6:	1a09      	subs	r1, r1, r0
 800a0f8:	9105      	str	r1, [sp, #20]
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	9503      	str	r5, [sp, #12]
 800a0fe:	4667      	mov	r7, ip
 800a100:	6818      	ldr	r0, [r3, #0]
 800a102:	40b8      	lsls	r0, r7
 800a104:	4301      	orrs	r1, r0
 800a106:	9803      	ldr	r0, [sp, #12]
 800a108:	c002      	stmia	r0!, {r1}
 800a10a:	cb02      	ldmia	r3!, {r1}
 800a10c:	9003      	str	r0, [sp, #12]
 800a10e:	9805      	ldr	r0, [sp, #20]
 800a110:	40c1      	lsrs	r1, r0
 800a112:	429a      	cmp	r2, r3
 800a114:	d8f3      	bhi.n	800a0fe <__lshift+0x82>
 800a116:	0020      	movs	r0, r4
 800a118:	3015      	adds	r0, #21
 800a11a:	2304      	movs	r3, #4
 800a11c:	4282      	cmp	r2, r0
 800a11e:	d304      	bcc.n	800a12a <__lshift+0xae>
 800a120:	1b13      	subs	r3, r2, r4
 800a122:	3b15      	subs	r3, #21
 800a124:	089b      	lsrs	r3, r3, #2
 800a126:	3301      	adds	r3, #1
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	50e9      	str	r1, [r5, r3]
 800a12c:	2900      	cmp	r1, #0
 800a12e:	d002      	beq.n	800a136 <__lshift+0xba>
 800a130:	9b02      	ldr	r3, [sp, #8]
 800a132:	3302      	adds	r3, #2
 800a134:	9301      	str	r3, [sp, #4]
 800a136:	9b01      	ldr	r3, [sp, #4]
 800a138:	9804      	ldr	r0, [sp, #16]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	0021      	movs	r1, r4
 800a13e:	6133      	str	r3, [r6, #16]
 800a140:	f7ff fdca 	bl	8009cd8 <_Bfree>
 800a144:	0030      	movs	r0, r6
 800a146:	b007      	add	sp, #28
 800a148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a14a:	cb02      	ldmia	r3!, {r1}
 800a14c:	c502      	stmia	r5!, {r1}
 800a14e:	429a      	cmp	r2, r3
 800a150:	d8fb      	bhi.n	800a14a <__lshift+0xce>
 800a152:	e7f0      	b.n	800a136 <__lshift+0xba>
 800a154:	0800c65b 	.word	0x0800c65b
 800a158:	0800c66c 	.word	0x0800c66c

0800a15c <__mcmp>:
 800a15c:	6902      	ldr	r2, [r0, #16]
 800a15e:	690b      	ldr	r3, [r1, #16]
 800a160:	b530      	push	{r4, r5, lr}
 800a162:	0004      	movs	r4, r0
 800a164:	1ad0      	subs	r0, r2, r3
 800a166:	429a      	cmp	r2, r3
 800a168:	d10d      	bne.n	800a186 <__mcmp+0x2a>
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	3414      	adds	r4, #20
 800a16e:	3114      	adds	r1, #20
 800a170:	18e2      	adds	r2, r4, r3
 800a172:	18c9      	adds	r1, r1, r3
 800a174:	3a04      	subs	r2, #4
 800a176:	3904      	subs	r1, #4
 800a178:	6815      	ldr	r5, [r2, #0]
 800a17a:	680b      	ldr	r3, [r1, #0]
 800a17c:	429d      	cmp	r5, r3
 800a17e:	d003      	beq.n	800a188 <__mcmp+0x2c>
 800a180:	2001      	movs	r0, #1
 800a182:	429d      	cmp	r5, r3
 800a184:	d303      	bcc.n	800a18e <__mcmp+0x32>
 800a186:	bd30      	pop	{r4, r5, pc}
 800a188:	4294      	cmp	r4, r2
 800a18a:	d3f3      	bcc.n	800a174 <__mcmp+0x18>
 800a18c:	e7fb      	b.n	800a186 <__mcmp+0x2a>
 800a18e:	4240      	negs	r0, r0
 800a190:	e7f9      	b.n	800a186 <__mcmp+0x2a>
	...

0800a194 <__mdiff>:
 800a194:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a196:	000e      	movs	r6, r1
 800a198:	0007      	movs	r7, r0
 800a19a:	0011      	movs	r1, r2
 800a19c:	0030      	movs	r0, r6
 800a19e:	b087      	sub	sp, #28
 800a1a0:	0014      	movs	r4, r2
 800a1a2:	f7ff ffdb 	bl	800a15c <__mcmp>
 800a1a6:	1e05      	subs	r5, r0, #0
 800a1a8:	d110      	bne.n	800a1cc <__mdiff+0x38>
 800a1aa:	0001      	movs	r1, r0
 800a1ac:	0038      	movs	r0, r7
 800a1ae:	f7ff fd4f 	bl	8009c50 <_Balloc>
 800a1b2:	1e02      	subs	r2, r0, #0
 800a1b4:	d104      	bne.n	800a1c0 <__mdiff+0x2c>
 800a1b6:	4b40      	ldr	r3, [pc, #256]	; (800a2b8 <__mdiff+0x124>)
 800a1b8:	4940      	ldr	r1, [pc, #256]	; (800a2bc <__mdiff+0x128>)
 800a1ba:	4841      	ldr	r0, [pc, #260]	; (800a2c0 <__mdiff+0x12c>)
 800a1bc:	f000 fb10 	bl	800a7e0 <__assert_func>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	6145      	str	r5, [r0, #20]
 800a1c4:	6103      	str	r3, [r0, #16]
 800a1c6:	0010      	movs	r0, r2
 800a1c8:	b007      	add	sp, #28
 800a1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	9301      	str	r3, [sp, #4]
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	db04      	blt.n	800a1de <__mdiff+0x4a>
 800a1d4:	0023      	movs	r3, r4
 800a1d6:	0034      	movs	r4, r6
 800a1d8:	001e      	movs	r6, r3
 800a1da:	2300      	movs	r3, #0
 800a1dc:	9301      	str	r3, [sp, #4]
 800a1de:	0038      	movs	r0, r7
 800a1e0:	6861      	ldr	r1, [r4, #4]
 800a1e2:	f7ff fd35 	bl	8009c50 <_Balloc>
 800a1e6:	1e02      	subs	r2, r0, #0
 800a1e8:	d103      	bne.n	800a1f2 <__mdiff+0x5e>
 800a1ea:	2190      	movs	r1, #144	; 0x90
 800a1ec:	4b32      	ldr	r3, [pc, #200]	; (800a2b8 <__mdiff+0x124>)
 800a1ee:	0089      	lsls	r1, r1, #2
 800a1f0:	e7e3      	b.n	800a1ba <__mdiff+0x26>
 800a1f2:	9b01      	ldr	r3, [sp, #4]
 800a1f4:	2700      	movs	r7, #0
 800a1f6:	60c3      	str	r3, [r0, #12]
 800a1f8:	6920      	ldr	r0, [r4, #16]
 800a1fa:	3414      	adds	r4, #20
 800a1fc:	9401      	str	r4, [sp, #4]
 800a1fe:	9b01      	ldr	r3, [sp, #4]
 800a200:	0084      	lsls	r4, r0, #2
 800a202:	191b      	adds	r3, r3, r4
 800a204:	0034      	movs	r4, r6
 800a206:	9302      	str	r3, [sp, #8]
 800a208:	6933      	ldr	r3, [r6, #16]
 800a20a:	3414      	adds	r4, #20
 800a20c:	0099      	lsls	r1, r3, #2
 800a20e:	1863      	adds	r3, r4, r1
 800a210:	9303      	str	r3, [sp, #12]
 800a212:	0013      	movs	r3, r2
 800a214:	3314      	adds	r3, #20
 800a216:	469c      	mov	ip, r3
 800a218:	9305      	str	r3, [sp, #20]
 800a21a:	9b01      	ldr	r3, [sp, #4]
 800a21c:	9304      	str	r3, [sp, #16]
 800a21e:	9b04      	ldr	r3, [sp, #16]
 800a220:	cc02      	ldmia	r4!, {r1}
 800a222:	cb20      	ldmia	r3!, {r5}
 800a224:	9304      	str	r3, [sp, #16]
 800a226:	b2ab      	uxth	r3, r5
 800a228:	19df      	adds	r7, r3, r7
 800a22a:	b28b      	uxth	r3, r1
 800a22c:	1afb      	subs	r3, r7, r3
 800a22e:	0c2d      	lsrs	r5, r5, #16
 800a230:	0c09      	lsrs	r1, r1, #16
 800a232:	1a69      	subs	r1, r5, r1
 800a234:	141d      	asrs	r5, r3, #16
 800a236:	1949      	adds	r1, r1, r5
 800a238:	140f      	asrs	r7, r1, #16
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	0409      	lsls	r1, r1, #16
 800a23e:	430b      	orrs	r3, r1
 800a240:	4661      	mov	r1, ip
 800a242:	c108      	stmia	r1!, {r3}
 800a244:	9b03      	ldr	r3, [sp, #12]
 800a246:	468c      	mov	ip, r1
 800a248:	42a3      	cmp	r3, r4
 800a24a:	d8e8      	bhi.n	800a21e <__mdiff+0x8a>
 800a24c:	0031      	movs	r1, r6
 800a24e:	9c03      	ldr	r4, [sp, #12]
 800a250:	3115      	adds	r1, #21
 800a252:	2304      	movs	r3, #4
 800a254:	428c      	cmp	r4, r1
 800a256:	d304      	bcc.n	800a262 <__mdiff+0xce>
 800a258:	1ba3      	subs	r3, r4, r6
 800a25a:	3b15      	subs	r3, #21
 800a25c:	089b      	lsrs	r3, r3, #2
 800a25e:	3301      	adds	r3, #1
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	9901      	ldr	r1, [sp, #4]
 800a264:	18cc      	adds	r4, r1, r3
 800a266:	9905      	ldr	r1, [sp, #20]
 800a268:	0026      	movs	r6, r4
 800a26a:	18cb      	adds	r3, r1, r3
 800a26c:	469c      	mov	ip, r3
 800a26e:	9902      	ldr	r1, [sp, #8]
 800a270:	428e      	cmp	r6, r1
 800a272:	d310      	bcc.n	800a296 <__mdiff+0x102>
 800a274:	9e02      	ldr	r6, [sp, #8]
 800a276:	1ee5      	subs	r5, r4, #3
 800a278:	2100      	movs	r1, #0
 800a27a:	42ae      	cmp	r6, r5
 800a27c:	d304      	bcc.n	800a288 <__mdiff+0xf4>
 800a27e:	0031      	movs	r1, r6
 800a280:	3103      	adds	r1, #3
 800a282:	1b09      	subs	r1, r1, r4
 800a284:	0889      	lsrs	r1, r1, #2
 800a286:	0089      	lsls	r1, r1, #2
 800a288:	185b      	adds	r3, r3, r1
 800a28a:	3b04      	subs	r3, #4
 800a28c:	6819      	ldr	r1, [r3, #0]
 800a28e:	2900      	cmp	r1, #0
 800a290:	d00f      	beq.n	800a2b2 <__mdiff+0x11e>
 800a292:	6110      	str	r0, [r2, #16]
 800a294:	e797      	b.n	800a1c6 <__mdiff+0x32>
 800a296:	ce02      	ldmia	r6!, {r1}
 800a298:	b28d      	uxth	r5, r1
 800a29a:	19ed      	adds	r5, r5, r7
 800a29c:	0c0f      	lsrs	r7, r1, #16
 800a29e:	1429      	asrs	r1, r5, #16
 800a2a0:	1879      	adds	r1, r7, r1
 800a2a2:	140f      	asrs	r7, r1, #16
 800a2a4:	b2ad      	uxth	r5, r5
 800a2a6:	0409      	lsls	r1, r1, #16
 800a2a8:	430d      	orrs	r5, r1
 800a2aa:	4661      	mov	r1, ip
 800a2ac:	c120      	stmia	r1!, {r5}
 800a2ae:	468c      	mov	ip, r1
 800a2b0:	e7dd      	b.n	800a26e <__mdiff+0xda>
 800a2b2:	3801      	subs	r0, #1
 800a2b4:	e7e9      	b.n	800a28a <__mdiff+0xf6>
 800a2b6:	46c0      	nop			; (mov r8, r8)
 800a2b8:	0800c65b 	.word	0x0800c65b
 800a2bc:	00000232 	.word	0x00000232
 800a2c0:	0800c66c 	.word	0x0800c66c

0800a2c4 <__d2b>:
 800a2c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2c6:	2101      	movs	r1, #1
 800a2c8:	0014      	movs	r4, r2
 800a2ca:	001e      	movs	r6, r3
 800a2cc:	9f08      	ldr	r7, [sp, #32]
 800a2ce:	f7ff fcbf 	bl	8009c50 <_Balloc>
 800a2d2:	1e05      	subs	r5, r0, #0
 800a2d4:	d105      	bne.n	800a2e2 <__d2b+0x1e>
 800a2d6:	0002      	movs	r2, r0
 800a2d8:	4b26      	ldr	r3, [pc, #152]	; (800a374 <__d2b+0xb0>)
 800a2da:	4927      	ldr	r1, [pc, #156]	; (800a378 <__d2b+0xb4>)
 800a2dc:	4827      	ldr	r0, [pc, #156]	; (800a37c <__d2b+0xb8>)
 800a2de:	f000 fa7f 	bl	800a7e0 <__assert_func>
 800a2e2:	0333      	lsls	r3, r6, #12
 800a2e4:	0076      	lsls	r6, r6, #1
 800a2e6:	0b1b      	lsrs	r3, r3, #12
 800a2e8:	0d76      	lsrs	r6, r6, #21
 800a2ea:	d124      	bne.n	800a336 <__d2b+0x72>
 800a2ec:	9301      	str	r3, [sp, #4]
 800a2ee:	2c00      	cmp	r4, #0
 800a2f0:	d027      	beq.n	800a342 <__d2b+0x7e>
 800a2f2:	4668      	mov	r0, sp
 800a2f4:	9400      	str	r4, [sp, #0]
 800a2f6:	f7ff fd71 	bl	8009ddc <__lo0bits>
 800a2fa:	9c00      	ldr	r4, [sp, #0]
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d01e      	beq.n	800a33e <__d2b+0x7a>
 800a300:	9b01      	ldr	r3, [sp, #4]
 800a302:	2120      	movs	r1, #32
 800a304:	001a      	movs	r2, r3
 800a306:	1a09      	subs	r1, r1, r0
 800a308:	408a      	lsls	r2, r1
 800a30a:	40c3      	lsrs	r3, r0
 800a30c:	4322      	orrs	r2, r4
 800a30e:	616a      	str	r2, [r5, #20]
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	9c01      	ldr	r4, [sp, #4]
 800a314:	61ac      	str	r4, [r5, #24]
 800a316:	1e63      	subs	r3, r4, #1
 800a318:	419c      	sbcs	r4, r3
 800a31a:	3401      	adds	r4, #1
 800a31c:	612c      	str	r4, [r5, #16]
 800a31e:	2e00      	cmp	r6, #0
 800a320:	d018      	beq.n	800a354 <__d2b+0x90>
 800a322:	4b17      	ldr	r3, [pc, #92]	; (800a380 <__d2b+0xbc>)
 800a324:	18f6      	adds	r6, r6, r3
 800a326:	2335      	movs	r3, #53	; 0x35
 800a328:	1836      	adds	r6, r6, r0
 800a32a:	1a18      	subs	r0, r3, r0
 800a32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32e:	603e      	str	r6, [r7, #0]
 800a330:	6018      	str	r0, [r3, #0]
 800a332:	0028      	movs	r0, r5
 800a334:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a336:	2280      	movs	r2, #128	; 0x80
 800a338:	0352      	lsls	r2, r2, #13
 800a33a:	4313      	orrs	r3, r2
 800a33c:	e7d6      	b.n	800a2ec <__d2b+0x28>
 800a33e:	616c      	str	r4, [r5, #20]
 800a340:	e7e7      	b.n	800a312 <__d2b+0x4e>
 800a342:	a801      	add	r0, sp, #4
 800a344:	f7ff fd4a 	bl	8009ddc <__lo0bits>
 800a348:	2401      	movs	r4, #1
 800a34a:	9b01      	ldr	r3, [sp, #4]
 800a34c:	612c      	str	r4, [r5, #16]
 800a34e:	616b      	str	r3, [r5, #20]
 800a350:	3020      	adds	r0, #32
 800a352:	e7e4      	b.n	800a31e <__d2b+0x5a>
 800a354:	4b0b      	ldr	r3, [pc, #44]	; (800a384 <__d2b+0xc0>)
 800a356:	18c0      	adds	r0, r0, r3
 800a358:	4b0b      	ldr	r3, [pc, #44]	; (800a388 <__d2b+0xc4>)
 800a35a:	6038      	str	r0, [r7, #0]
 800a35c:	18e3      	adds	r3, r4, r3
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	18eb      	adds	r3, r5, r3
 800a362:	6958      	ldr	r0, [r3, #20]
 800a364:	f7ff fd20 	bl	8009da8 <__hi0bits>
 800a368:	0164      	lsls	r4, r4, #5
 800a36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a36c:	1a24      	subs	r4, r4, r0
 800a36e:	601c      	str	r4, [r3, #0]
 800a370:	e7df      	b.n	800a332 <__d2b+0x6e>
 800a372:	46c0      	nop			; (mov r8, r8)
 800a374:	0800c65b 	.word	0x0800c65b
 800a378:	0000030a 	.word	0x0000030a
 800a37c:	0800c66c 	.word	0x0800c66c
 800a380:	fffffbcd 	.word	0xfffffbcd
 800a384:	fffffbce 	.word	0xfffffbce
 800a388:	3fffffff 	.word	0x3fffffff

0800a38c <_calloc_r>:
 800a38c:	434a      	muls	r2, r1
 800a38e:	b570      	push	{r4, r5, r6, lr}
 800a390:	0011      	movs	r1, r2
 800a392:	0015      	movs	r5, r2
 800a394:	f000 f852 	bl	800a43c <_malloc_r>
 800a398:	1e04      	subs	r4, r0, #0
 800a39a:	d003      	beq.n	800a3a4 <_calloc_r+0x18>
 800a39c:	002a      	movs	r2, r5
 800a39e:	2100      	movs	r1, #0
 800a3a0:	f7fe f8e8 	bl	8008574 <memset>
 800a3a4:	0020      	movs	r0, r4
 800a3a6:	bd70      	pop	{r4, r5, r6, pc}

0800a3a8 <_free_r>:
 800a3a8:	b570      	push	{r4, r5, r6, lr}
 800a3aa:	0005      	movs	r5, r0
 800a3ac:	2900      	cmp	r1, #0
 800a3ae:	d010      	beq.n	800a3d2 <_free_r+0x2a>
 800a3b0:	1f0c      	subs	r4, r1, #4
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	da00      	bge.n	800a3ba <_free_r+0x12>
 800a3b8:	18e4      	adds	r4, r4, r3
 800a3ba:	0028      	movs	r0, r5
 800a3bc:	f000 fa64 	bl	800a888 <__malloc_lock>
 800a3c0:	4a1d      	ldr	r2, [pc, #116]	; (800a438 <_free_r+0x90>)
 800a3c2:	6813      	ldr	r3, [r2, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d105      	bne.n	800a3d4 <_free_r+0x2c>
 800a3c8:	6063      	str	r3, [r4, #4]
 800a3ca:	6014      	str	r4, [r2, #0]
 800a3cc:	0028      	movs	r0, r5
 800a3ce:	f000 fa63 	bl	800a898 <__malloc_unlock>
 800a3d2:	bd70      	pop	{r4, r5, r6, pc}
 800a3d4:	42a3      	cmp	r3, r4
 800a3d6:	d908      	bls.n	800a3ea <_free_r+0x42>
 800a3d8:	6821      	ldr	r1, [r4, #0]
 800a3da:	1860      	adds	r0, r4, r1
 800a3dc:	4283      	cmp	r3, r0
 800a3de:	d1f3      	bne.n	800a3c8 <_free_r+0x20>
 800a3e0:	6818      	ldr	r0, [r3, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	1841      	adds	r1, r0, r1
 800a3e6:	6021      	str	r1, [r4, #0]
 800a3e8:	e7ee      	b.n	800a3c8 <_free_r+0x20>
 800a3ea:	001a      	movs	r2, r3
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <_free_r+0x4e>
 800a3f2:	42a3      	cmp	r3, r4
 800a3f4:	d9f9      	bls.n	800a3ea <_free_r+0x42>
 800a3f6:	6811      	ldr	r1, [r2, #0]
 800a3f8:	1850      	adds	r0, r2, r1
 800a3fa:	42a0      	cmp	r0, r4
 800a3fc:	d10b      	bne.n	800a416 <_free_r+0x6e>
 800a3fe:	6820      	ldr	r0, [r4, #0]
 800a400:	1809      	adds	r1, r1, r0
 800a402:	1850      	adds	r0, r2, r1
 800a404:	6011      	str	r1, [r2, #0]
 800a406:	4283      	cmp	r3, r0
 800a408:	d1e0      	bne.n	800a3cc <_free_r+0x24>
 800a40a:	6818      	ldr	r0, [r3, #0]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	1841      	adds	r1, r0, r1
 800a410:	6011      	str	r1, [r2, #0]
 800a412:	6053      	str	r3, [r2, #4]
 800a414:	e7da      	b.n	800a3cc <_free_r+0x24>
 800a416:	42a0      	cmp	r0, r4
 800a418:	d902      	bls.n	800a420 <_free_r+0x78>
 800a41a:	230c      	movs	r3, #12
 800a41c:	602b      	str	r3, [r5, #0]
 800a41e:	e7d5      	b.n	800a3cc <_free_r+0x24>
 800a420:	6821      	ldr	r1, [r4, #0]
 800a422:	1860      	adds	r0, r4, r1
 800a424:	4283      	cmp	r3, r0
 800a426:	d103      	bne.n	800a430 <_free_r+0x88>
 800a428:	6818      	ldr	r0, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	1841      	adds	r1, r0, r1
 800a42e:	6021      	str	r1, [r4, #0]
 800a430:	6063      	str	r3, [r4, #4]
 800a432:	6054      	str	r4, [r2, #4]
 800a434:	e7ca      	b.n	800a3cc <_free_r+0x24>
 800a436:	46c0      	nop			; (mov r8, r8)
 800a438:	20000220 	.word	0x20000220

0800a43c <_malloc_r>:
 800a43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43e:	2303      	movs	r3, #3
 800a440:	1ccd      	adds	r5, r1, #3
 800a442:	439d      	bics	r5, r3
 800a444:	3508      	adds	r5, #8
 800a446:	0006      	movs	r6, r0
 800a448:	2d0c      	cmp	r5, #12
 800a44a:	d21f      	bcs.n	800a48c <_malloc_r+0x50>
 800a44c:	250c      	movs	r5, #12
 800a44e:	42a9      	cmp	r1, r5
 800a450:	d81e      	bhi.n	800a490 <_malloc_r+0x54>
 800a452:	0030      	movs	r0, r6
 800a454:	f000 fa18 	bl	800a888 <__malloc_lock>
 800a458:	4925      	ldr	r1, [pc, #148]	; (800a4f0 <_malloc_r+0xb4>)
 800a45a:	680a      	ldr	r2, [r1, #0]
 800a45c:	0014      	movs	r4, r2
 800a45e:	2c00      	cmp	r4, #0
 800a460:	d11a      	bne.n	800a498 <_malloc_r+0x5c>
 800a462:	4f24      	ldr	r7, [pc, #144]	; (800a4f4 <_malloc_r+0xb8>)
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d104      	bne.n	800a474 <_malloc_r+0x38>
 800a46a:	0021      	movs	r1, r4
 800a46c:	0030      	movs	r0, r6
 800a46e:	f000 f9a5 	bl	800a7bc <_sbrk_r>
 800a472:	6038      	str	r0, [r7, #0]
 800a474:	0029      	movs	r1, r5
 800a476:	0030      	movs	r0, r6
 800a478:	f000 f9a0 	bl	800a7bc <_sbrk_r>
 800a47c:	1c43      	adds	r3, r0, #1
 800a47e:	d12b      	bne.n	800a4d8 <_malloc_r+0x9c>
 800a480:	230c      	movs	r3, #12
 800a482:	0030      	movs	r0, r6
 800a484:	6033      	str	r3, [r6, #0]
 800a486:	f000 fa07 	bl	800a898 <__malloc_unlock>
 800a48a:	e003      	b.n	800a494 <_malloc_r+0x58>
 800a48c:	2d00      	cmp	r5, #0
 800a48e:	dade      	bge.n	800a44e <_malloc_r+0x12>
 800a490:	230c      	movs	r3, #12
 800a492:	6033      	str	r3, [r6, #0]
 800a494:	2000      	movs	r0, #0
 800a496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	1b5b      	subs	r3, r3, r5
 800a49c:	d419      	bmi.n	800a4d2 <_malloc_r+0x96>
 800a49e:	2b0b      	cmp	r3, #11
 800a4a0:	d903      	bls.n	800a4aa <_malloc_r+0x6e>
 800a4a2:	6023      	str	r3, [r4, #0]
 800a4a4:	18e4      	adds	r4, r4, r3
 800a4a6:	6025      	str	r5, [r4, #0]
 800a4a8:	e003      	b.n	800a4b2 <_malloc_r+0x76>
 800a4aa:	6863      	ldr	r3, [r4, #4]
 800a4ac:	42a2      	cmp	r2, r4
 800a4ae:	d10e      	bne.n	800a4ce <_malloc_r+0x92>
 800a4b0:	600b      	str	r3, [r1, #0]
 800a4b2:	0030      	movs	r0, r6
 800a4b4:	f000 f9f0 	bl	800a898 <__malloc_unlock>
 800a4b8:	0020      	movs	r0, r4
 800a4ba:	2207      	movs	r2, #7
 800a4bc:	300b      	adds	r0, #11
 800a4be:	1d23      	adds	r3, r4, #4
 800a4c0:	4390      	bics	r0, r2
 800a4c2:	1ac2      	subs	r2, r0, r3
 800a4c4:	4298      	cmp	r0, r3
 800a4c6:	d0e6      	beq.n	800a496 <_malloc_r+0x5a>
 800a4c8:	1a1b      	subs	r3, r3, r0
 800a4ca:	50a3      	str	r3, [r4, r2]
 800a4cc:	e7e3      	b.n	800a496 <_malloc_r+0x5a>
 800a4ce:	6053      	str	r3, [r2, #4]
 800a4d0:	e7ef      	b.n	800a4b2 <_malloc_r+0x76>
 800a4d2:	0022      	movs	r2, r4
 800a4d4:	6864      	ldr	r4, [r4, #4]
 800a4d6:	e7c2      	b.n	800a45e <_malloc_r+0x22>
 800a4d8:	2303      	movs	r3, #3
 800a4da:	1cc4      	adds	r4, r0, #3
 800a4dc:	439c      	bics	r4, r3
 800a4de:	42a0      	cmp	r0, r4
 800a4e0:	d0e1      	beq.n	800a4a6 <_malloc_r+0x6a>
 800a4e2:	1a21      	subs	r1, r4, r0
 800a4e4:	0030      	movs	r0, r6
 800a4e6:	f000 f969 	bl	800a7bc <_sbrk_r>
 800a4ea:	1c43      	adds	r3, r0, #1
 800a4ec:	d1db      	bne.n	800a4a6 <_malloc_r+0x6a>
 800a4ee:	e7c7      	b.n	800a480 <_malloc_r+0x44>
 800a4f0:	20000220 	.word	0x20000220
 800a4f4:	20000224 	.word	0x20000224

0800a4f8 <__ssputs_r>:
 800a4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4fa:	688e      	ldr	r6, [r1, #8]
 800a4fc:	b085      	sub	sp, #20
 800a4fe:	0007      	movs	r7, r0
 800a500:	000c      	movs	r4, r1
 800a502:	9203      	str	r2, [sp, #12]
 800a504:	9301      	str	r3, [sp, #4]
 800a506:	429e      	cmp	r6, r3
 800a508:	d83c      	bhi.n	800a584 <__ssputs_r+0x8c>
 800a50a:	2390      	movs	r3, #144	; 0x90
 800a50c:	898a      	ldrh	r2, [r1, #12]
 800a50e:	00db      	lsls	r3, r3, #3
 800a510:	421a      	tst	r2, r3
 800a512:	d034      	beq.n	800a57e <__ssputs_r+0x86>
 800a514:	2503      	movs	r5, #3
 800a516:	6909      	ldr	r1, [r1, #16]
 800a518:	6823      	ldr	r3, [r4, #0]
 800a51a:	1a5b      	subs	r3, r3, r1
 800a51c:	9302      	str	r3, [sp, #8]
 800a51e:	6963      	ldr	r3, [r4, #20]
 800a520:	9802      	ldr	r0, [sp, #8]
 800a522:	435d      	muls	r5, r3
 800a524:	0feb      	lsrs	r3, r5, #31
 800a526:	195d      	adds	r5, r3, r5
 800a528:	9b01      	ldr	r3, [sp, #4]
 800a52a:	106d      	asrs	r5, r5, #1
 800a52c:	3301      	adds	r3, #1
 800a52e:	181b      	adds	r3, r3, r0
 800a530:	42ab      	cmp	r3, r5
 800a532:	d900      	bls.n	800a536 <__ssputs_r+0x3e>
 800a534:	001d      	movs	r5, r3
 800a536:	0553      	lsls	r3, r2, #21
 800a538:	d532      	bpl.n	800a5a0 <__ssputs_r+0xa8>
 800a53a:	0029      	movs	r1, r5
 800a53c:	0038      	movs	r0, r7
 800a53e:	f7ff ff7d 	bl	800a43c <_malloc_r>
 800a542:	1e06      	subs	r6, r0, #0
 800a544:	d109      	bne.n	800a55a <__ssputs_r+0x62>
 800a546:	230c      	movs	r3, #12
 800a548:	603b      	str	r3, [r7, #0]
 800a54a:	2340      	movs	r3, #64	; 0x40
 800a54c:	2001      	movs	r0, #1
 800a54e:	89a2      	ldrh	r2, [r4, #12]
 800a550:	4240      	negs	r0, r0
 800a552:	4313      	orrs	r3, r2
 800a554:	81a3      	strh	r3, [r4, #12]
 800a556:	b005      	add	sp, #20
 800a558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a55a:	9a02      	ldr	r2, [sp, #8]
 800a55c:	6921      	ldr	r1, [r4, #16]
 800a55e:	f7ff fb6e 	bl	8009c3e <memcpy>
 800a562:	89a3      	ldrh	r3, [r4, #12]
 800a564:	4a14      	ldr	r2, [pc, #80]	; (800a5b8 <__ssputs_r+0xc0>)
 800a566:	401a      	ands	r2, r3
 800a568:	2380      	movs	r3, #128	; 0x80
 800a56a:	4313      	orrs	r3, r2
 800a56c:	81a3      	strh	r3, [r4, #12]
 800a56e:	9b02      	ldr	r3, [sp, #8]
 800a570:	6126      	str	r6, [r4, #16]
 800a572:	18f6      	adds	r6, r6, r3
 800a574:	6026      	str	r6, [r4, #0]
 800a576:	6165      	str	r5, [r4, #20]
 800a578:	9e01      	ldr	r6, [sp, #4]
 800a57a:	1aed      	subs	r5, r5, r3
 800a57c:	60a5      	str	r5, [r4, #8]
 800a57e:	9b01      	ldr	r3, [sp, #4]
 800a580:	429e      	cmp	r6, r3
 800a582:	d900      	bls.n	800a586 <__ssputs_r+0x8e>
 800a584:	9e01      	ldr	r6, [sp, #4]
 800a586:	0032      	movs	r2, r6
 800a588:	9903      	ldr	r1, [sp, #12]
 800a58a:	6820      	ldr	r0, [r4, #0]
 800a58c:	f000 f968 	bl	800a860 <memmove>
 800a590:	68a3      	ldr	r3, [r4, #8]
 800a592:	2000      	movs	r0, #0
 800a594:	1b9b      	subs	r3, r3, r6
 800a596:	60a3      	str	r3, [r4, #8]
 800a598:	6823      	ldr	r3, [r4, #0]
 800a59a:	199e      	adds	r6, r3, r6
 800a59c:	6026      	str	r6, [r4, #0]
 800a59e:	e7da      	b.n	800a556 <__ssputs_r+0x5e>
 800a5a0:	002a      	movs	r2, r5
 800a5a2:	0038      	movs	r0, r7
 800a5a4:	f000 f980 	bl	800a8a8 <_realloc_r>
 800a5a8:	1e06      	subs	r6, r0, #0
 800a5aa:	d1e0      	bne.n	800a56e <__ssputs_r+0x76>
 800a5ac:	0038      	movs	r0, r7
 800a5ae:	6921      	ldr	r1, [r4, #16]
 800a5b0:	f7ff fefa 	bl	800a3a8 <_free_r>
 800a5b4:	e7c7      	b.n	800a546 <__ssputs_r+0x4e>
 800a5b6:	46c0      	nop			; (mov r8, r8)
 800a5b8:	fffffb7f 	.word	0xfffffb7f

0800a5bc <_svfiprintf_r>:
 800a5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5be:	b0a1      	sub	sp, #132	; 0x84
 800a5c0:	9003      	str	r0, [sp, #12]
 800a5c2:	001d      	movs	r5, r3
 800a5c4:	898b      	ldrh	r3, [r1, #12]
 800a5c6:	000f      	movs	r7, r1
 800a5c8:	0016      	movs	r6, r2
 800a5ca:	061b      	lsls	r3, r3, #24
 800a5cc:	d511      	bpl.n	800a5f2 <_svfiprintf_r+0x36>
 800a5ce:	690b      	ldr	r3, [r1, #16]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10e      	bne.n	800a5f2 <_svfiprintf_r+0x36>
 800a5d4:	2140      	movs	r1, #64	; 0x40
 800a5d6:	f7ff ff31 	bl	800a43c <_malloc_r>
 800a5da:	6038      	str	r0, [r7, #0]
 800a5dc:	6138      	str	r0, [r7, #16]
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	d105      	bne.n	800a5ee <_svfiprintf_r+0x32>
 800a5e2:	230c      	movs	r3, #12
 800a5e4:	9a03      	ldr	r2, [sp, #12]
 800a5e6:	3801      	subs	r0, #1
 800a5e8:	6013      	str	r3, [r2, #0]
 800a5ea:	b021      	add	sp, #132	; 0x84
 800a5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ee:	2340      	movs	r3, #64	; 0x40
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	ac08      	add	r4, sp, #32
 800a5f6:	6163      	str	r3, [r4, #20]
 800a5f8:	3320      	adds	r3, #32
 800a5fa:	7663      	strb	r3, [r4, #25]
 800a5fc:	3310      	adds	r3, #16
 800a5fe:	76a3      	strb	r3, [r4, #26]
 800a600:	9507      	str	r5, [sp, #28]
 800a602:	0035      	movs	r5, r6
 800a604:	782b      	ldrb	r3, [r5, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <_svfiprintf_r+0x52>
 800a60a:	2b25      	cmp	r3, #37	; 0x25
 800a60c:	d147      	bne.n	800a69e <_svfiprintf_r+0xe2>
 800a60e:	1bab      	subs	r3, r5, r6
 800a610:	9305      	str	r3, [sp, #20]
 800a612:	42b5      	cmp	r5, r6
 800a614:	d00c      	beq.n	800a630 <_svfiprintf_r+0x74>
 800a616:	0032      	movs	r2, r6
 800a618:	0039      	movs	r1, r7
 800a61a:	9803      	ldr	r0, [sp, #12]
 800a61c:	f7ff ff6c 	bl	800a4f8 <__ssputs_r>
 800a620:	1c43      	adds	r3, r0, #1
 800a622:	d100      	bne.n	800a626 <_svfiprintf_r+0x6a>
 800a624:	e0ae      	b.n	800a784 <_svfiprintf_r+0x1c8>
 800a626:	6962      	ldr	r2, [r4, #20]
 800a628:	9b05      	ldr	r3, [sp, #20]
 800a62a:	4694      	mov	ip, r2
 800a62c:	4463      	add	r3, ip
 800a62e:	6163      	str	r3, [r4, #20]
 800a630:	782b      	ldrb	r3, [r5, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d100      	bne.n	800a638 <_svfiprintf_r+0x7c>
 800a636:	e0a5      	b.n	800a784 <_svfiprintf_r+0x1c8>
 800a638:	2201      	movs	r2, #1
 800a63a:	2300      	movs	r3, #0
 800a63c:	4252      	negs	r2, r2
 800a63e:	6062      	str	r2, [r4, #4]
 800a640:	a904      	add	r1, sp, #16
 800a642:	3254      	adds	r2, #84	; 0x54
 800a644:	1852      	adds	r2, r2, r1
 800a646:	1c6e      	adds	r6, r5, #1
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	60e3      	str	r3, [r4, #12]
 800a64c:	60a3      	str	r3, [r4, #8]
 800a64e:	7013      	strb	r3, [r2, #0]
 800a650:	65a3      	str	r3, [r4, #88]	; 0x58
 800a652:	2205      	movs	r2, #5
 800a654:	7831      	ldrb	r1, [r6, #0]
 800a656:	4854      	ldr	r0, [pc, #336]	; (800a7a8 <_svfiprintf_r+0x1ec>)
 800a658:	f7ff fae6 	bl	8009c28 <memchr>
 800a65c:	1c75      	adds	r5, r6, #1
 800a65e:	2800      	cmp	r0, #0
 800a660:	d11f      	bne.n	800a6a2 <_svfiprintf_r+0xe6>
 800a662:	6822      	ldr	r2, [r4, #0]
 800a664:	06d3      	lsls	r3, r2, #27
 800a666:	d504      	bpl.n	800a672 <_svfiprintf_r+0xb6>
 800a668:	2353      	movs	r3, #83	; 0x53
 800a66a:	a904      	add	r1, sp, #16
 800a66c:	185b      	adds	r3, r3, r1
 800a66e:	2120      	movs	r1, #32
 800a670:	7019      	strb	r1, [r3, #0]
 800a672:	0713      	lsls	r3, r2, #28
 800a674:	d504      	bpl.n	800a680 <_svfiprintf_r+0xc4>
 800a676:	2353      	movs	r3, #83	; 0x53
 800a678:	a904      	add	r1, sp, #16
 800a67a:	185b      	adds	r3, r3, r1
 800a67c:	212b      	movs	r1, #43	; 0x2b
 800a67e:	7019      	strb	r1, [r3, #0]
 800a680:	7833      	ldrb	r3, [r6, #0]
 800a682:	2b2a      	cmp	r3, #42	; 0x2a
 800a684:	d016      	beq.n	800a6b4 <_svfiprintf_r+0xf8>
 800a686:	0035      	movs	r5, r6
 800a688:	2100      	movs	r1, #0
 800a68a:	200a      	movs	r0, #10
 800a68c:	68e3      	ldr	r3, [r4, #12]
 800a68e:	782a      	ldrb	r2, [r5, #0]
 800a690:	1c6e      	adds	r6, r5, #1
 800a692:	3a30      	subs	r2, #48	; 0x30
 800a694:	2a09      	cmp	r2, #9
 800a696:	d94e      	bls.n	800a736 <_svfiprintf_r+0x17a>
 800a698:	2900      	cmp	r1, #0
 800a69a:	d111      	bne.n	800a6c0 <_svfiprintf_r+0x104>
 800a69c:	e017      	b.n	800a6ce <_svfiprintf_r+0x112>
 800a69e:	3501      	adds	r5, #1
 800a6a0:	e7b0      	b.n	800a604 <_svfiprintf_r+0x48>
 800a6a2:	4b41      	ldr	r3, [pc, #260]	; (800a7a8 <_svfiprintf_r+0x1ec>)
 800a6a4:	6822      	ldr	r2, [r4, #0]
 800a6a6:	1ac0      	subs	r0, r0, r3
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	4083      	lsls	r3, r0
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	002e      	movs	r6, r5
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	e7ce      	b.n	800a652 <_svfiprintf_r+0x96>
 800a6b4:	9b07      	ldr	r3, [sp, #28]
 800a6b6:	1d19      	adds	r1, r3, #4
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	9107      	str	r1, [sp, #28]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	db01      	blt.n	800a6c4 <_svfiprintf_r+0x108>
 800a6c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6c2:	e004      	b.n	800a6ce <_svfiprintf_r+0x112>
 800a6c4:	425b      	negs	r3, r3
 800a6c6:	60e3      	str	r3, [r4, #12]
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	782b      	ldrb	r3, [r5, #0]
 800a6d0:	2b2e      	cmp	r3, #46	; 0x2e
 800a6d2:	d10a      	bne.n	800a6ea <_svfiprintf_r+0x12e>
 800a6d4:	786b      	ldrb	r3, [r5, #1]
 800a6d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a6d8:	d135      	bne.n	800a746 <_svfiprintf_r+0x18a>
 800a6da:	9b07      	ldr	r3, [sp, #28]
 800a6dc:	3502      	adds	r5, #2
 800a6de:	1d1a      	adds	r2, r3, #4
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	9207      	str	r2, [sp, #28]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	db2b      	blt.n	800a740 <_svfiprintf_r+0x184>
 800a6e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ea:	4e30      	ldr	r6, [pc, #192]	; (800a7ac <_svfiprintf_r+0x1f0>)
 800a6ec:	2203      	movs	r2, #3
 800a6ee:	0030      	movs	r0, r6
 800a6f0:	7829      	ldrb	r1, [r5, #0]
 800a6f2:	f7ff fa99 	bl	8009c28 <memchr>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d006      	beq.n	800a708 <_svfiprintf_r+0x14c>
 800a6fa:	2340      	movs	r3, #64	; 0x40
 800a6fc:	1b80      	subs	r0, r0, r6
 800a6fe:	4083      	lsls	r3, r0
 800a700:	6822      	ldr	r2, [r4, #0]
 800a702:	3501      	adds	r5, #1
 800a704:	4313      	orrs	r3, r2
 800a706:	6023      	str	r3, [r4, #0]
 800a708:	7829      	ldrb	r1, [r5, #0]
 800a70a:	2206      	movs	r2, #6
 800a70c:	4828      	ldr	r0, [pc, #160]	; (800a7b0 <_svfiprintf_r+0x1f4>)
 800a70e:	1c6e      	adds	r6, r5, #1
 800a710:	7621      	strb	r1, [r4, #24]
 800a712:	f7ff fa89 	bl	8009c28 <memchr>
 800a716:	2800      	cmp	r0, #0
 800a718:	d03c      	beq.n	800a794 <_svfiprintf_r+0x1d8>
 800a71a:	4b26      	ldr	r3, [pc, #152]	; (800a7b4 <_svfiprintf_r+0x1f8>)
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d125      	bne.n	800a76c <_svfiprintf_r+0x1b0>
 800a720:	2207      	movs	r2, #7
 800a722:	9b07      	ldr	r3, [sp, #28]
 800a724:	3307      	adds	r3, #7
 800a726:	4393      	bics	r3, r2
 800a728:	3308      	adds	r3, #8
 800a72a:	9307      	str	r3, [sp, #28]
 800a72c:	6963      	ldr	r3, [r4, #20]
 800a72e:	9a04      	ldr	r2, [sp, #16]
 800a730:	189b      	adds	r3, r3, r2
 800a732:	6163      	str	r3, [r4, #20]
 800a734:	e765      	b.n	800a602 <_svfiprintf_r+0x46>
 800a736:	4343      	muls	r3, r0
 800a738:	0035      	movs	r5, r6
 800a73a:	2101      	movs	r1, #1
 800a73c:	189b      	adds	r3, r3, r2
 800a73e:	e7a6      	b.n	800a68e <_svfiprintf_r+0xd2>
 800a740:	2301      	movs	r3, #1
 800a742:	425b      	negs	r3, r3
 800a744:	e7d0      	b.n	800a6e8 <_svfiprintf_r+0x12c>
 800a746:	2300      	movs	r3, #0
 800a748:	200a      	movs	r0, #10
 800a74a:	001a      	movs	r2, r3
 800a74c:	3501      	adds	r5, #1
 800a74e:	6063      	str	r3, [r4, #4]
 800a750:	7829      	ldrb	r1, [r5, #0]
 800a752:	1c6e      	adds	r6, r5, #1
 800a754:	3930      	subs	r1, #48	; 0x30
 800a756:	2909      	cmp	r1, #9
 800a758:	d903      	bls.n	800a762 <_svfiprintf_r+0x1a6>
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d0c5      	beq.n	800a6ea <_svfiprintf_r+0x12e>
 800a75e:	9209      	str	r2, [sp, #36]	; 0x24
 800a760:	e7c3      	b.n	800a6ea <_svfiprintf_r+0x12e>
 800a762:	4342      	muls	r2, r0
 800a764:	0035      	movs	r5, r6
 800a766:	2301      	movs	r3, #1
 800a768:	1852      	adds	r2, r2, r1
 800a76a:	e7f1      	b.n	800a750 <_svfiprintf_r+0x194>
 800a76c:	ab07      	add	r3, sp, #28
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	003a      	movs	r2, r7
 800a772:	0021      	movs	r1, r4
 800a774:	4b10      	ldr	r3, [pc, #64]	; (800a7b8 <_svfiprintf_r+0x1fc>)
 800a776:	9803      	ldr	r0, [sp, #12]
 800a778:	f7fd ffae 	bl	80086d8 <_printf_float>
 800a77c:	9004      	str	r0, [sp, #16]
 800a77e:	9b04      	ldr	r3, [sp, #16]
 800a780:	3301      	adds	r3, #1
 800a782:	d1d3      	bne.n	800a72c <_svfiprintf_r+0x170>
 800a784:	89bb      	ldrh	r3, [r7, #12]
 800a786:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a788:	065b      	lsls	r3, r3, #25
 800a78a:	d400      	bmi.n	800a78e <_svfiprintf_r+0x1d2>
 800a78c:	e72d      	b.n	800a5ea <_svfiprintf_r+0x2e>
 800a78e:	2001      	movs	r0, #1
 800a790:	4240      	negs	r0, r0
 800a792:	e72a      	b.n	800a5ea <_svfiprintf_r+0x2e>
 800a794:	ab07      	add	r3, sp, #28
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	003a      	movs	r2, r7
 800a79a:	0021      	movs	r1, r4
 800a79c:	4b06      	ldr	r3, [pc, #24]	; (800a7b8 <_svfiprintf_r+0x1fc>)
 800a79e:	9803      	ldr	r0, [sp, #12]
 800a7a0:	f7fe fa58 	bl	8008c54 <_printf_i>
 800a7a4:	e7ea      	b.n	800a77c <_svfiprintf_r+0x1c0>
 800a7a6:	46c0      	nop			; (mov r8, r8)
 800a7a8:	0800c7cc 	.word	0x0800c7cc
 800a7ac:	0800c7d2 	.word	0x0800c7d2
 800a7b0:	0800c7d6 	.word	0x0800c7d6
 800a7b4:	080086d9 	.word	0x080086d9
 800a7b8:	0800a4f9 	.word	0x0800a4f9

0800a7bc <_sbrk_r>:
 800a7bc:	2300      	movs	r3, #0
 800a7be:	b570      	push	{r4, r5, r6, lr}
 800a7c0:	4d06      	ldr	r5, [pc, #24]	; (800a7dc <_sbrk_r+0x20>)
 800a7c2:	0004      	movs	r4, r0
 800a7c4:	0008      	movs	r0, r1
 800a7c6:	602b      	str	r3, [r5, #0]
 800a7c8:	f7fa f97a 	bl	8004ac0 <_sbrk>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d103      	bne.n	800a7d8 <_sbrk_r+0x1c>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d000      	beq.n	800a7d8 <_sbrk_r+0x1c>
 800a7d6:	6023      	str	r3, [r4, #0]
 800a7d8:	bd70      	pop	{r4, r5, r6, pc}
 800a7da:	46c0      	nop			; (mov r8, r8)
 800a7dc:	20000450 	.word	0x20000450

0800a7e0 <__assert_func>:
 800a7e0:	b530      	push	{r4, r5, lr}
 800a7e2:	0014      	movs	r4, r2
 800a7e4:	001a      	movs	r2, r3
 800a7e6:	4b09      	ldr	r3, [pc, #36]	; (800a80c <__assert_func+0x2c>)
 800a7e8:	0005      	movs	r5, r0
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	b085      	sub	sp, #20
 800a7ee:	68d8      	ldr	r0, [r3, #12]
 800a7f0:	4b07      	ldr	r3, [pc, #28]	; (800a810 <__assert_func+0x30>)
 800a7f2:	2c00      	cmp	r4, #0
 800a7f4:	d101      	bne.n	800a7fa <__assert_func+0x1a>
 800a7f6:	4b07      	ldr	r3, [pc, #28]	; (800a814 <__assert_func+0x34>)
 800a7f8:	001c      	movs	r4, r3
 800a7fa:	9301      	str	r3, [sp, #4]
 800a7fc:	9100      	str	r1, [sp, #0]
 800a7fe:	002b      	movs	r3, r5
 800a800:	4905      	ldr	r1, [pc, #20]	; (800a818 <__assert_func+0x38>)
 800a802:	9402      	str	r4, [sp, #8]
 800a804:	f000 f80a 	bl	800a81c <fiprintf>
 800a808:	f000 fab2 	bl	800ad70 <abort>
 800a80c:	2000000c 	.word	0x2000000c
 800a810:	0800c7dd 	.word	0x0800c7dd
 800a814:	0800c818 	.word	0x0800c818
 800a818:	0800c7ea 	.word	0x0800c7ea

0800a81c <fiprintf>:
 800a81c:	b40e      	push	{r1, r2, r3}
 800a81e:	b503      	push	{r0, r1, lr}
 800a820:	0001      	movs	r1, r0
 800a822:	ab03      	add	r3, sp, #12
 800a824:	4804      	ldr	r0, [pc, #16]	; (800a838 <fiprintf+0x1c>)
 800a826:	cb04      	ldmia	r3!, {r2}
 800a828:	6800      	ldr	r0, [r0, #0]
 800a82a:	9301      	str	r3, [sp, #4]
 800a82c:	f000 f88a 	bl	800a944 <_vfiprintf_r>
 800a830:	b002      	add	sp, #8
 800a832:	bc08      	pop	{r3}
 800a834:	b003      	add	sp, #12
 800a836:	4718      	bx	r3
 800a838:	2000000c 	.word	0x2000000c

0800a83c <__ascii_mbtowc>:
 800a83c:	b082      	sub	sp, #8
 800a83e:	2900      	cmp	r1, #0
 800a840:	d100      	bne.n	800a844 <__ascii_mbtowc+0x8>
 800a842:	a901      	add	r1, sp, #4
 800a844:	1e10      	subs	r0, r2, #0
 800a846:	d006      	beq.n	800a856 <__ascii_mbtowc+0x1a>
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d006      	beq.n	800a85a <__ascii_mbtowc+0x1e>
 800a84c:	7813      	ldrb	r3, [r2, #0]
 800a84e:	600b      	str	r3, [r1, #0]
 800a850:	7810      	ldrb	r0, [r2, #0]
 800a852:	1e43      	subs	r3, r0, #1
 800a854:	4198      	sbcs	r0, r3
 800a856:	b002      	add	sp, #8
 800a858:	4770      	bx	lr
 800a85a:	2002      	movs	r0, #2
 800a85c:	4240      	negs	r0, r0
 800a85e:	e7fa      	b.n	800a856 <__ascii_mbtowc+0x1a>

0800a860 <memmove>:
 800a860:	b510      	push	{r4, lr}
 800a862:	4288      	cmp	r0, r1
 800a864:	d902      	bls.n	800a86c <memmove+0xc>
 800a866:	188b      	adds	r3, r1, r2
 800a868:	4298      	cmp	r0, r3
 800a86a:	d303      	bcc.n	800a874 <memmove+0x14>
 800a86c:	2300      	movs	r3, #0
 800a86e:	e007      	b.n	800a880 <memmove+0x20>
 800a870:	5c8b      	ldrb	r3, [r1, r2]
 800a872:	5483      	strb	r3, [r0, r2]
 800a874:	3a01      	subs	r2, #1
 800a876:	d2fb      	bcs.n	800a870 <memmove+0x10>
 800a878:	bd10      	pop	{r4, pc}
 800a87a:	5ccc      	ldrb	r4, [r1, r3]
 800a87c:	54c4      	strb	r4, [r0, r3]
 800a87e:	3301      	adds	r3, #1
 800a880:	429a      	cmp	r2, r3
 800a882:	d1fa      	bne.n	800a87a <memmove+0x1a>
 800a884:	e7f8      	b.n	800a878 <memmove+0x18>
	...

0800a888 <__malloc_lock>:
 800a888:	b510      	push	{r4, lr}
 800a88a:	4802      	ldr	r0, [pc, #8]	; (800a894 <__malloc_lock+0xc>)
 800a88c:	f000 fc47 	bl	800b11e <__retarget_lock_acquire_recursive>
 800a890:	bd10      	pop	{r4, pc}
 800a892:	46c0      	nop			; (mov r8, r8)
 800a894:	20000458 	.word	0x20000458

0800a898 <__malloc_unlock>:
 800a898:	b510      	push	{r4, lr}
 800a89a:	4802      	ldr	r0, [pc, #8]	; (800a8a4 <__malloc_unlock+0xc>)
 800a89c:	f000 fc40 	bl	800b120 <__retarget_lock_release_recursive>
 800a8a0:	bd10      	pop	{r4, pc}
 800a8a2:	46c0      	nop			; (mov r8, r8)
 800a8a4:	20000458 	.word	0x20000458

0800a8a8 <_realloc_r>:
 800a8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8aa:	0007      	movs	r7, r0
 800a8ac:	000d      	movs	r5, r1
 800a8ae:	0016      	movs	r6, r2
 800a8b0:	2900      	cmp	r1, #0
 800a8b2:	d105      	bne.n	800a8c0 <_realloc_r+0x18>
 800a8b4:	0011      	movs	r1, r2
 800a8b6:	f7ff fdc1 	bl	800a43c <_malloc_r>
 800a8ba:	0004      	movs	r4, r0
 800a8bc:	0020      	movs	r0, r4
 800a8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8c0:	2a00      	cmp	r2, #0
 800a8c2:	d103      	bne.n	800a8cc <_realloc_r+0x24>
 800a8c4:	f7ff fd70 	bl	800a3a8 <_free_r>
 800a8c8:	0034      	movs	r4, r6
 800a8ca:	e7f7      	b.n	800a8bc <_realloc_r+0x14>
 800a8cc:	f000 fc96 	bl	800b1fc <_malloc_usable_size_r>
 800a8d0:	002c      	movs	r4, r5
 800a8d2:	42b0      	cmp	r0, r6
 800a8d4:	d2f2      	bcs.n	800a8bc <_realloc_r+0x14>
 800a8d6:	0031      	movs	r1, r6
 800a8d8:	0038      	movs	r0, r7
 800a8da:	f7ff fdaf 	bl	800a43c <_malloc_r>
 800a8de:	1e04      	subs	r4, r0, #0
 800a8e0:	d0ec      	beq.n	800a8bc <_realloc_r+0x14>
 800a8e2:	0029      	movs	r1, r5
 800a8e4:	0032      	movs	r2, r6
 800a8e6:	f7ff f9aa 	bl	8009c3e <memcpy>
 800a8ea:	0029      	movs	r1, r5
 800a8ec:	0038      	movs	r0, r7
 800a8ee:	f7ff fd5b 	bl	800a3a8 <_free_r>
 800a8f2:	e7e3      	b.n	800a8bc <_realloc_r+0x14>

0800a8f4 <__sfputc_r>:
 800a8f4:	6893      	ldr	r3, [r2, #8]
 800a8f6:	b510      	push	{r4, lr}
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	6093      	str	r3, [r2, #8]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	da04      	bge.n	800a90a <__sfputc_r+0x16>
 800a900:	6994      	ldr	r4, [r2, #24]
 800a902:	42a3      	cmp	r3, r4
 800a904:	db07      	blt.n	800a916 <__sfputc_r+0x22>
 800a906:	290a      	cmp	r1, #10
 800a908:	d005      	beq.n	800a916 <__sfputc_r+0x22>
 800a90a:	6813      	ldr	r3, [r2, #0]
 800a90c:	1c58      	adds	r0, r3, #1
 800a90e:	6010      	str	r0, [r2, #0]
 800a910:	7019      	strb	r1, [r3, #0]
 800a912:	0008      	movs	r0, r1
 800a914:	bd10      	pop	{r4, pc}
 800a916:	f000 f94f 	bl	800abb8 <__swbuf_r>
 800a91a:	0001      	movs	r1, r0
 800a91c:	e7f9      	b.n	800a912 <__sfputc_r+0x1e>

0800a91e <__sfputs_r>:
 800a91e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a920:	0006      	movs	r6, r0
 800a922:	000f      	movs	r7, r1
 800a924:	0014      	movs	r4, r2
 800a926:	18d5      	adds	r5, r2, r3
 800a928:	42ac      	cmp	r4, r5
 800a92a:	d101      	bne.n	800a930 <__sfputs_r+0x12>
 800a92c:	2000      	movs	r0, #0
 800a92e:	e007      	b.n	800a940 <__sfputs_r+0x22>
 800a930:	7821      	ldrb	r1, [r4, #0]
 800a932:	003a      	movs	r2, r7
 800a934:	0030      	movs	r0, r6
 800a936:	f7ff ffdd 	bl	800a8f4 <__sfputc_r>
 800a93a:	3401      	adds	r4, #1
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d1f3      	bne.n	800a928 <__sfputs_r+0xa>
 800a940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a944 <_vfiprintf_r>:
 800a944:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a946:	b0a1      	sub	sp, #132	; 0x84
 800a948:	0006      	movs	r6, r0
 800a94a:	000c      	movs	r4, r1
 800a94c:	001f      	movs	r7, r3
 800a94e:	9203      	str	r2, [sp, #12]
 800a950:	2800      	cmp	r0, #0
 800a952:	d004      	beq.n	800a95e <_vfiprintf_r+0x1a>
 800a954:	6983      	ldr	r3, [r0, #24]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <_vfiprintf_r+0x1a>
 800a95a:	f000 fb3f 	bl	800afdc <__sinit>
 800a95e:	4b8e      	ldr	r3, [pc, #568]	; (800ab98 <_vfiprintf_r+0x254>)
 800a960:	429c      	cmp	r4, r3
 800a962:	d11c      	bne.n	800a99e <_vfiprintf_r+0x5a>
 800a964:	6874      	ldr	r4, [r6, #4]
 800a966:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a968:	07db      	lsls	r3, r3, #31
 800a96a:	d405      	bmi.n	800a978 <_vfiprintf_r+0x34>
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	059b      	lsls	r3, r3, #22
 800a970:	d402      	bmi.n	800a978 <_vfiprintf_r+0x34>
 800a972:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a974:	f000 fbd3 	bl	800b11e <__retarget_lock_acquire_recursive>
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	071b      	lsls	r3, r3, #28
 800a97c:	d502      	bpl.n	800a984 <_vfiprintf_r+0x40>
 800a97e:	6923      	ldr	r3, [r4, #16]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d11d      	bne.n	800a9c0 <_vfiprintf_r+0x7c>
 800a984:	0021      	movs	r1, r4
 800a986:	0030      	movs	r0, r6
 800a988:	f000 f97a 	bl	800ac80 <__swsetup_r>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	d017      	beq.n	800a9c0 <_vfiprintf_r+0x7c>
 800a990:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a992:	07db      	lsls	r3, r3, #31
 800a994:	d50d      	bpl.n	800a9b2 <_vfiprintf_r+0x6e>
 800a996:	2001      	movs	r0, #1
 800a998:	4240      	negs	r0, r0
 800a99a:	b021      	add	sp, #132	; 0x84
 800a99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a99e:	4b7f      	ldr	r3, [pc, #508]	; (800ab9c <_vfiprintf_r+0x258>)
 800a9a0:	429c      	cmp	r4, r3
 800a9a2:	d101      	bne.n	800a9a8 <_vfiprintf_r+0x64>
 800a9a4:	68b4      	ldr	r4, [r6, #8]
 800a9a6:	e7de      	b.n	800a966 <_vfiprintf_r+0x22>
 800a9a8:	4b7d      	ldr	r3, [pc, #500]	; (800aba0 <_vfiprintf_r+0x25c>)
 800a9aa:	429c      	cmp	r4, r3
 800a9ac:	d1db      	bne.n	800a966 <_vfiprintf_r+0x22>
 800a9ae:	68f4      	ldr	r4, [r6, #12]
 800a9b0:	e7d9      	b.n	800a966 <_vfiprintf_r+0x22>
 800a9b2:	89a3      	ldrh	r3, [r4, #12]
 800a9b4:	059b      	lsls	r3, r3, #22
 800a9b6:	d4ee      	bmi.n	800a996 <_vfiprintf_r+0x52>
 800a9b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ba:	f000 fbb1 	bl	800b120 <__retarget_lock_release_recursive>
 800a9be:	e7ea      	b.n	800a996 <_vfiprintf_r+0x52>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	ad08      	add	r5, sp, #32
 800a9c4:	616b      	str	r3, [r5, #20]
 800a9c6:	3320      	adds	r3, #32
 800a9c8:	766b      	strb	r3, [r5, #25]
 800a9ca:	3310      	adds	r3, #16
 800a9cc:	76ab      	strb	r3, [r5, #26]
 800a9ce:	9707      	str	r7, [sp, #28]
 800a9d0:	9f03      	ldr	r7, [sp, #12]
 800a9d2:	783b      	ldrb	r3, [r7, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d001      	beq.n	800a9dc <_vfiprintf_r+0x98>
 800a9d8:	2b25      	cmp	r3, #37	; 0x25
 800a9da:	d14e      	bne.n	800aa7a <_vfiprintf_r+0x136>
 800a9dc:	9b03      	ldr	r3, [sp, #12]
 800a9de:	1afb      	subs	r3, r7, r3
 800a9e0:	9305      	str	r3, [sp, #20]
 800a9e2:	9b03      	ldr	r3, [sp, #12]
 800a9e4:	429f      	cmp	r7, r3
 800a9e6:	d00d      	beq.n	800aa04 <_vfiprintf_r+0xc0>
 800a9e8:	9b05      	ldr	r3, [sp, #20]
 800a9ea:	0021      	movs	r1, r4
 800a9ec:	0030      	movs	r0, r6
 800a9ee:	9a03      	ldr	r2, [sp, #12]
 800a9f0:	f7ff ff95 	bl	800a91e <__sfputs_r>
 800a9f4:	1c43      	adds	r3, r0, #1
 800a9f6:	d100      	bne.n	800a9fa <_vfiprintf_r+0xb6>
 800a9f8:	e0b5      	b.n	800ab66 <_vfiprintf_r+0x222>
 800a9fa:	696a      	ldr	r2, [r5, #20]
 800a9fc:	9b05      	ldr	r3, [sp, #20]
 800a9fe:	4694      	mov	ip, r2
 800aa00:	4463      	add	r3, ip
 800aa02:	616b      	str	r3, [r5, #20]
 800aa04:	783b      	ldrb	r3, [r7, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d100      	bne.n	800aa0c <_vfiprintf_r+0xc8>
 800aa0a:	e0ac      	b.n	800ab66 <_vfiprintf_r+0x222>
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	1c7b      	adds	r3, r7, #1
 800aa10:	9303      	str	r3, [sp, #12]
 800aa12:	2300      	movs	r3, #0
 800aa14:	4252      	negs	r2, r2
 800aa16:	606a      	str	r2, [r5, #4]
 800aa18:	a904      	add	r1, sp, #16
 800aa1a:	3254      	adds	r2, #84	; 0x54
 800aa1c:	1852      	adds	r2, r2, r1
 800aa1e:	602b      	str	r3, [r5, #0]
 800aa20:	60eb      	str	r3, [r5, #12]
 800aa22:	60ab      	str	r3, [r5, #8]
 800aa24:	7013      	strb	r3, [r2, #0]
 800aa26:	65ab      	str	r3, [r5, #88]	; 0x58
 800aa28:	9b03      	ldr	r3, [sp, #12]
 800aa2a:	2205      	movs	r2, #5
 800aa2c:	7819      	ldrb	r1, [r3, #0]
 800aa2e:	485d      	ldr	r0, [pc, #372]	; (800aba4 <_vfiprintf_r+0x260>)
 800aa30:	f7ff f8fa 	bl	8009c28 <memchr>
 800aa34:	9b03      	ldr	r3, [sp, #12]
 800aa36:	1c5f      	adds	r7, r3, #1
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	d120      	bne.n	800aa7e <_vfiprintf_r+0x13a>
 800aa3c:	682a      	ldr	r2, [r5, #0]
 800aa3e:	06d3      	lsls	r3, r2, #27
 800aa40:	d504      	bpl.n	800aa4c <_vfiprintf_r+0x108>
 800aa42:	2353      	movs	r3, #83	; 0x53
 800aa44:	a904      	add	r1, sp, #16
 800aa46:	185b      	adds	r3, r3, r1
 800aa48:	2120      	movs	r1, #32
 800aa4a:	7019      	strb	r1, [r3, #0]
 800aa4c:	0713      	lsls	r3, r2, #28
 800aa4e:	d504      	bpl.n	800aa5a <_vfiprintf_r+0x116>
 800aa50:	2353      	movs	r3, #83	; 0x53
 800aa52:	a904      	add	r1, sp, #16
 800aa54:	185b      	adds	r3, r3, r1
 800aa56:	212b      	movs	r1, #43	; 0x2b
 800aa58:	7019      	strb	r1, [r3, #0]
 800aa5a:	9b03      	ldr	r3, [sp, #12]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa60:	d016      	beq.n	800aa90 <_vfiprintf_r+0x14c>
 800aa62:	2100      	movs	r1, #0
 800aa64:	68eb      	ldr	r3, [r5, #12]
 800aa66:	9f03      	ldr	r7, [sp, #12]
 800aa68:	783a      	ldrb	r2, [r7, #0]
 800aa6a:	1c78      	adds	r0, r7, #1
 800aa6c:	3a30      	subs	r2, #48	; 0x30
 800aa6e:	4684      	mov	ip, r0
 800aa70:	2a09      	cmp	r2, #9
 800aa72:	d94f      	bls.n	800ab14 <_vfiprintf_r+0x1d0>
 800aa74:	2900      	cmp	r1, #0
 800aa76:	d111      	bne.n	800aa9c <_vfiprintf_r+0x158>
 800aa78:	e017      	b.n	800aaaa <_vfiprintf_r+0x166>
 800aa7a:	3701      	adds	r7, #1
 800aa7c:	e7a9      	b.n	800a9d2 <_vfiprintf_r+0x8e>
 800aa7e:	4b49      	ldr	r3, [pc, #292]	; (800aba4 <_vfiprintf_r+0x260>)
 800aa80:	682a      	ldr	r2, [r5, #0]
 800aa82:	1ac0      	subs	r0, r0, r3
 800aa84:	2301      	movs	r3, #1
 800aa86:	4083      	lsls	r3, r0
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	602b      	str	r3, [r5, #0]
 800aa8c:	9703      	str	r7, [sp, #12]
 800aa8e:	e7cb      	b.n	800aa28 <_vfiprintf_r+0xe4>
 800aa90:	9b07      	ldr	r3, [sp, #28]
 800aa92:	1d19      	adds	r1, r3, #4
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	9107      	str	r1, [sp, #28]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	db01      	blt.n	800aaa0 <_vfiprintf_r+0x15c>
 800aa9c:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa9e:	e004      	b.n	800aaaa <_vfiprintf_r+0x166>
 800aaa0:	425b      	negs	r3, r3
 800aaa2:	60eb      	str	r3, [r5, #12]
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	602b      	str	r3, [r5, #0]
 800aaaa:	783b      	ldrb	r3, [r7, #0]
 800aaac:	2b2e      	cmp	r3, #46	; 0x2e
 800aaae:	d10a      	bne.n	800aac6 <_vfiprintf_r+0x182>
 800aab0:	787b      	ldrb	r3, [r7, #1]
 800aab2:	2b2a      	cmp	r3, #42	; 0x2a
 800aab4:	d137      	bne.n	800ab26 <_vfiprintf_r+0x1e2>
 800aab6:	9b07      	ldr	r3, [sp, #28]
 800aab8:	3702      	adds	r7, #2
 800aaba:	1d1a      	adds	r2, r3, #4
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	9207      	str	r2, [sp, #28]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	db2d      	blt.n	800ab20 <_vfiprintf_r+0x1dc>
 800aac4:	9309      	str	r3, [sp, #36]	; 0x24
 800aac6:	2203      	movs	r2, #3
 800aac8:	7839      	ldrb	r1, [r7, #0]
 800aaca:	4837      	ldr	r0, [pc, #220]	; (800aba8 <_vfiprintf_r+0x264>)
 800aacc:	f7ff f8ac 	bl	8009c28 <memchr>
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d007      	beq.n	800aae4 <_vfiprintf_r+0x1a0>
 800aad4:	4b34      	ldr	r3, [pc, #208]	; (800aba8 <_vfiprintf_r+0x264>)
 800aad6:	682a      	ldr	r2, [r5, #0]
 800aad8:	1ac0      	subs	r0, r0, r3
 800aada:	2340      	movs	r3, #64	; 0x40
 800aadc:	4083      	lsls	r3, r0
 800aade:	4313      	orrs	r3, r2
 800aae0:	3701      	adds	r7, #1
 800aae2:	602b      	str	r3, [r5, #0]
 800aae4:	7839      	ldrb	r1, [r7, #0]
 800aae6:	1c7b      	adds	r3, r7, #1
 800aae8:	2206      	movs	r2, #6
 800aaea:	4830      	ldr	r0, [pc, #192]	; (800abac <_vfiprintf_r+0x268>)
 800aaec:	9303      	str	r3, [sp, #12]
 800aaee:	7629      	strb	r1, [r5, #24]
 800aaf0:	f7ff f89a 	bl	8009c28 <memchr>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d045      	beq.n	800ab84 <_vfiprintf_r+0x240>
 800aaf8:	4b2d      	ldr	r3, [pc, #180]	; (800abb0 <_vfiprintf_r+0x26c>)
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d127      	bne.n	800ab4e <_vfiprintf_r+0x20a>
 800aafe:	2207      	movs	r2, #7
 800ab00:	9b07      	ldr	r3, [sp, #28]
 800ab02:	3307      	adds	r3, #7
 800ab04:	4393      	bics	r3, r2
 800ab06:	3308      	adds	r3, #8
 800ab08:	9307      	str	r3, [sp, #28]
 800ab0a:	696b      	ldr	r3, [r5, #20]
 800ab0c:	9a04      	ldr	r2, [sp, #16]
 800ab0e:	189b      	adds	r3, r3, r2
 800ab10:	616b      	str	r3, [r5, #20]
 800ab12:	e75d      	b.n	800a9d0 <_vfiprintf_r+0x8c>
 800ab14:	210a      	movs	r1, #10
 800ab16:	434b      	muls	r3, r1
 800ab18:	4667      	mov	r7, ip
 800ab1a:	189b      	adds	r3, r3, r2
 800ab1c:	3909      	subs	r1, #9
 800ab1e:	e7a3      	b.n	800aa68 <_vfiprintf_r+0x124>
 800ab20:	2301      	movs	r3, #1
 800ab22:	425b      	negs	r3, r3
 800ab24:	e7ce      	b.n	800aac4 <_vfiprintf_r+0x180>
 800ab26:	2300      	movs	r3, #0
 800ab28:	001a      	movs	r2, r3
 800ab2a:	3701      	adds	r7, #1
 800ab2c:	606b      	str	r3, [r5, #4]
 800ab2e:	7839      	ldrb	r1, [r7, #0]
 800ab30:	1c78      	adds	r0, r7, #1
 800ab32:	3930      	subs	r1, #48	; 0x30
 800ab34:	4684      	mov	ip, r0
 800ab36:	2909      	cmp	r1, #9
 800ab38:	d903      	bls.n	800ab42 <_vfiprintf_r+0x1fe>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d0c3      	beq.n	800aac6 <_vfiprintf_r+0x182>
 800ab3e:	9209      	str	r2, [sp, #36]	; 0x24
 800ab40:	e7c1      	b.n	800aac6 <_vfiprintf_r+0x182>
 800ab42:	230a      	movs	r3, #10
 800ab44:	435a      	muls	r2, r3
 800ab46:	4667      	mov	r7, ip
 800ab48:	1852      	adds	r2, r2, r1
 800ab4a:	3b09      	subs	r3, #9
 800ab4c:	e7ef      	b.n	800ab2e <_vfiprintf_r+0x1ea>
 800ab4e:	ab07      	add	r3, sp, #28
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	0022      	movs	r2, r4
 800ab54:	0029      	movs	r1, r5
 800ab56:	0030      	movs	r0, r6
 800ab58:	4b16      	ldr	r3, [pc, #88]	; (800abb4 <_vfiprintf_r+0x270>)
 800ab5a:	f7fd fdbd 	bl	80086d8 <_printf_float>
 800ab5e:	9004      	str	r0, [sp, #16]
 800ab60:	9b04      	ldr	r3, [sp, #16]
 800ab62:	3301      	adds	r3, #1
 800ab64:	d1d1      	bne.n	800ab0a <_vfiprintf_r+0x1c6>
 800ab66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab68:	07db      	lsls	r3, r3, #31
 800ab6a:	d405      	bmi.n	800ab78 <_vfiprintf_r+0x234>
 800ab6c:	89a3      	ldrh	r3, [r4, #12]
 800ab6e:	059b      	lsls	r3, r3, #22
 800ab70:	d402      	bmi.n	800ab78 <_vfiprintf_r+0x234>
 800ab72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab74:	f000 fad4 	bl	800b120 <__retarget_lock_release_recursive>
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	065b      	lsls	r3, r3, #25
 800ab7c:	d500      	bpl.n	800ab80 <_vfiprintf_r+0x23c>
 800ab7e:	e70a      	b.n	800a996 <_vfiprintf_r+0x52>
 800ab80:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ab82:	e70a      	b.n	800a99a <_vfiprintf_r+0x56>
 800ab84:	ab07      	add	r3, sp, #28
 800ab86:	9300      	str	r3, [sp, #0]
 800ab88:	0022      	movs	r2, r4
 800ab8a:	0029      	movs	r1, r5
 800ab8c:	0030      	movs	r0, r6
 800ab8e:	4b09      	ldr	r3, [pc, #36]	; (800abb4 <_vfiprintf_r+0x270>)
 800ab90:	f7fe f860 	bl	8008c54 <_printf_i>
 800ab94:	e7e3      	b.n	800ab5e <_vfiprintf_r+0x21a>
 800ab96:	46c0      	nop			; (mov r8, r8)
 800ab98:	0800c944 	.word	0x0800c944
 800ab9c:	0800c964 	.word	0x0800c964
 800aba0:	0800c924 	.word	0x0800c924
 800aba4:	0800c7cc 	.word	0x0800c7cc
 800aba8:	0800c7d2 	.word	0x0800c7d2
 800abac:	0800c7d6 	.word	0x0800c7d6
 800abb0:	080086d9 	.word	0x080086d9
 800abb4:	0800a91f 	.word	0x0800a91f

0800abb8 <__swbuf_r>:
 800abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abba:	0005      	movs	r5, r0
 800abbc:	000e      	movs	r6, r1
 800abbe:	0014      	movs	r4, r2
 800abc0:	2800      	cmp	r0, #0
 800abc2:	d004      	beq.n	800abce <__swbuf_r+0x16>
 800abc4:	6983      	ldr	r3, [r0, #24]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d101      	bne.n	800abce <__swbuf_r+0x16>
 800abca:	f000 fa07 	bl	800afdc <__sinit>
 800abce:	4b22      	ldr	r3, [pc, #136]	; (800ac58 <__swbuf_r+0xa0>)
 800abd0:	429c      	cmp	r4, r3
 800abd2:	d12e      	bne.n	800ac32 <__swbuf_r+0x7a>
 800abd4:	686c      	ldr	r4, [r5, #4]
 800abd6:	69a3      	ldr	r3, [r4, #24]
 800abd8:	60a3      	str	r3, [r4, #8]
 800abda:	89a3      	ldrh	r3, [r4, #12]
 800abdc:	071b      	lsls	r3, r3, #28
 800abde:	d532      	bpl.n	800ac46 <__swbuf_r+0x8e>
 800abe0:	6923      	ldr	r3, [r4, #16]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d02f      	beq.n	800ac46 <__swbuf_r+0x8e>
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	6922      	ldr	r2, [r4, #16]
 800abea:	b2f7      	uxtb	r7, r6
 800abec:	1a98      	subs	r0, r3, r2
 800abee:	6963      	ldr	r3, [r4, #20]
 800abf0:	b2f6      	uxtb	r6, r6
 800abf2:	4283      	cmp	r3, r0
 800abf4:	dc05      	bgt.n	800ac02 <__swbuf_r+0x4a>
 800abf6:	0021      	movs	r1, r4
 800abf8:	0028      	movs	r0, r5
 800abfa:	f000 f94d 	bl	800ae98 <_fflush_r>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	d127      	bne.n	800ac52 <__swbuf_r+0x9a>
 800ac02:	68a3      	ldr	r3, [r4, #8]
 800ac04:	3001      	adds	r0, #1
 800ac06:	3b01      	subs	r3, #1
 800ac08:	60a3      	str	r3, [r4, #8]
 800ac0a:	6823      	ldr	r3, [r4, #0]
 800ac0c:	1c5a      	adds	r2, r3, #1
 800ac0e:	6022      	str	r2, [r4, #0]
 800ac10:	701f      	strb	r7, [r3, #0]
 800ac12:	6963      	ldr	r3, [r4, #20]
 800ac14:	4283      	cmp	r3, r0
 800ac16:	d004      	beq.n	800ac22 <__swbuf_r+0x6a>
 800ac18:	89a3      	ldrh	r3, [r4, #12]
 800ac1a:	07db      	lsls	r3, r3, #31
 800ac1c:	d507      	bpl.n	800ac2e <__swbuf_r+0x76>
 800ac1e:	2e0a      	cmp	r6, #10
 800ac20:	d105      	bne.n	800ac2e <__swbuf_r+0x76>
 800ac22:	0021      	movs	r1, r4
 800ac24:	0028      	movs	r0, r5
 800ac26:	f000 f937 	bl	800ae98 <_fflush_r>
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d111      	bne.n	800ac52 <__swbuf_r+0x9a>
 800ac2e:	0030      	movs	r0, r6
 800ac30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac32:	4b0a      	ldr	r3, [pc, #40]	; (800ac5c <__swbuf_r+0xa4>)
 800ac34:	429c      	cmp	r4, r3
 800ac36:	d101      	bne.n	800ac3c <__swbuf_r+0x84>
 800ac38:	68ac      	ldr	r4, [r5, #8]
 800ac3a:	e7cc      	b.n	800abd6 <__swbuf_r+0x1e>
 800ac3c:	4b08      	ldr	r3, [pc, #32]	; (800ac60 <__swbuf_r+0xa8>)
 800ac3e:	429c      	cmp	r4, r3
 800ac40:	d1c9      	bne.n	800abd6 <__swbuf_r+0x1e>
 800ac42:	68ec      	ldr	r4, [r5, #12]
 800ac44:	e7c7      	b.n	800abd6 <__swbuf_r+0x1e>
 800ac46:	0021      	movs	r1, r4
 800ac48:	0028      	movs	r0, r5
 800ac4a:	f000 f819 	bl	800ac80 <__swsetup_r>
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	d0c9      	beq.n	800abe6 <__swbuf_r+0x2e>
 800ac52:	2601      	movs	r6, #1
 800ac54:	4276      	negs	r6, r6
 800ac56:	e7ea      	b.n	800ac2e <__swbuf_r+0x76>
 800ac58:	0800c944 	.word	0x0800c944
 800ac5c:	0800c964 	.word	0x0800c964
 800ac60:	0800c924 	.word	0x0800c924

0800ac64 <__ascii_wctomb>:
 800ac64:	0003      	movs	r3, r0
 800ac66:	1e08      	subs	r0, r1, #0
 800ac68:	d005      	beq.n	800ac76 <__ascii_wctomb+0x12>
 800ac6a:	2aff      	cmp	r2, #255	; 0xff
 800ac6c:	d904      	bls.n	800ac78 <__ascii_wctomb+0x14>
 800ac6e:	228a      	movs	r2, #138	; 0x8a
 800ac70:	2001      	movs	r0, #1
 800ac72:	601a      	str	r2, [r3, #0]
 800ac74:	4240      	negs	r0, r0
 800ac76:	4770      	bx	lr
 800ac78:	2001      	movs	r0, #1
 800ac7a:	700a      	strb	r2, [r1, #0]
 800ac7c:	e7fb      	b.n	800ac76 <__ascii_wctomb+0x12>
	...

0800ac80 <__swsetup_r>:
 800ac80:	4b37      	ldr	r3, [pc, #220]	; (800ad60 <__swsetup_r+0xe0>)
 800ac82:	b570      	push	{r4, r5, r6, lr}
 800ac84:	681d      	ldr	r5, [r3, #0]
 800ac86:	0006      	movs	r6, r0
 800ac88:	000c      	movs	r4, r1
 800ac8a:	2d00      	cmp	r5, #0
 800ac8c:	d005      	beq.n	800ac9a <__swsetup_r+0x1a>
 800ac8e:	69ab      	ldr	r3, [r5, #24]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d102      	bne.n	800ac9a <__swsetup_r+0x1a>
 800ac94:	0028      	movs	r0, r5
 800ac96:	f000 f9a1 	bl	800afdc <__sinit>
 800ac9a:	4b32      	ldr	r3, [pc, #200]	; (800ad64 <__swsetup_r+0xe4>)
 800ac9c:	429c      	cmp	r4, r3
 800ac9e:	d10f      	bne.n	800acc0 <__swsetup_r+0x40>
 800aca0:	686c      	ldr	r4, [r5, #4]
 800aca2:	230c      	movs	r3, #12
 800aca4:	5ee2      	ldrsh	r2, [r4, r3]
 800aca6:	b293      	uxth	r3, r2
 800aca8:	0711      	lsls	r1, r2, #28
 800acaa:	d42d      	bmi.n	800ad08 <__swsetup_r+0x88>
 800acac:	06d9      	lsls	r1, r3, #27
 800acae:	d411      	bmi.n	800acd4 <__swsetup_r+0x54>
 800acb0:	2309      	movs	r3, #9
 800acb2:	2001      	movs	r0, #1
 800acb4:	6033      	str	r3, [r6, #0]
 800acb6:	3337      	adds	r3, #55	; 0x37
 800acb8:	4313      	orrs	r3, r2
 800acba:	81a3      	strh	r3, [r4, #12]
 800acbc:	4240      	negs	r0, r0
 800acbe:	bd70      	pop	{r4, r5, r6, pc}
 800acc0:	4b29      	ldr	r3, [pc, #164]	; (800ad68 <__swsetup_r+0xe8>)
 800acc2:	429c      	cmp	r4, r3
 800acc4:	d101      	bne.n	800acca <__swsetup_r+0x4a>
 800acc6:	68ac      	ldr	r4, [r5, #8]
 800acc8:	e7eb      	b.n	800aca2 <__swsetup_r+0x22>
 800acca:	4b28      	ldr	r3, [pc, #160]	; (800ad6c <__swsetup_r+0xec>)
 800accc:	429c      	cmp	r4, r3
 800acce:	d1e8      	bne.n	800aca2 <__swsetup_r+0x22>
 800acd0:	68ec      	ldr	r4, [r5, #12]
 800acd2:	e7e6      	b.n	800aca2 <__swsetup_r+0x22>
 800acd4:	075b      	lsls	r3, r3, #29
 800acd6:	d513      	bpl.n	800ad00 <__swsetup_r+0x80>
 800acd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acda:	2900      	cmp	r1, #0
 800acdc:	d008      	beq.n	800acf0 <__swsetup_r+0x70>
 800acde:	0023      	movs	r3, r4
 800ace0:	3344      	adds	r3, #68	; 0x44
 800ace2:	4299      	cmp	r1, r3
 800ace4:	d002      	beq.n	800acec <__swsetup_r+0x6c>
 800ace6:	0030      	movs	r0, r6
 800ace8:	f7ff fb5e 	bl	800a3a8 <_free_r>
 800acec:	2300      	movs	r3, #0
 800acee:	6363      	str	r3, [r4, #52]	; 0x34
 800acf0:	2224      	movs	r2, #36	; 0x24
 800acf2:	89a3      	ldrh	r3, [r4, #12]
 800acf4:	4393      	bics	r3, r2
 800acf6:	81a3      	strh	r3, [r4, #12]
 800acf8:	2300      	movs	r3, #0
 800acfa:	6063      	str	r3, [r4, #4]
 800acfc:	6923      	ldr	r3, [r4, #16]
 800acfe:	6023      	str	r3, [r4, #0]
 800ad00:	2308      	movs	r3, #8
 800ad02:	89a2      	ldrh	r2, [r4, #12]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	81a3      	strh	r3, [r4, #12]
 800ad08:	6923      	ldr	r3, [r4, #16]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10b      	bne.n	800ad26 <__swsetup_r+0xa6>
 800ad0e:	21a0      	movs	r1, #160	; 0xa0
 800ad10:	2280      	movs	r2, #128	; 0x80
 800ad12:	89a3      	ldrh	r3, [r4, #12]
 800ad14:	0089      	lsls	r1, r1, #2
 800ad16:	0092      	lsls	r2, r2, #2
 800ad18:	400b      	ands	r3, r1
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d003      	beq.n	800ad26 <__swsetup_r+0xa6>
 800ad1e:	0021      	movs	r1, r4
 800ad20:	0030      	movs	r0, r6
 800ad22:	f000 fa27 	bl	800b174 <__smakebuf_r>
 800ad26:	220c      	movs	r2, #12
 800ad28:	5ea3      	ldrsh	r3, [r4, r2]
 800ad2a:	2001      	movs	r0, #1
 800ad2c:	001a      	movs	r2, r3
 800ad2e:	b299      	uxth	r1, r3
 800ad30:	4002      	ands	r2, r0
 800ad32:	4203      	tst	r3, r0
 800ad34:	d00f      	beq.n	800ad56 <__swsetup_r+0xd6>
 800ad36:	2200      	movs	r2, #0
 800ad38:	60a2      	str	r2, [r4, #8]
 800ad3a:	6962      	ldr	r2, [r4, #20]
 800ad3c:	4252      	negs	r2, r2
 800ad3e:	61a2      	str	r2, [r4, #24]
 800ad40:	2000      	movs	r0, #0
 800ad42:	6922      	ldr	r2, [r4, #16]
 800ad44:	4282      	cmp	r2, r0
 800ad46:	d1ba      	bne.n	800acbe <__swsetup_r+0x3e>
 800ad48:	060a      	lsls	r2, r1, #24
 800ad4a:	d5b8      	bpl.n	800acbe <__swsetup_r+0x3e>
 800ad4c:	2240      	movs	r2, #64	; 0x40
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	81a3      	strh	r3, [r4, #12]
 800ad52:	3801      	subs	r0, #1
 800ad54:	e7b3      	b.n	800acbe <__swsetup_r+0x3e>
 800ad56:	0788      	lsls	r0, r1, #30
 800ad58:	d400      	bmi.n	800ad5c <__swsetup_r+0xdc>
 800ad5a:	6962      	ldr	r2, [r4, #20]
 800ad5c:	60a2      	str	r2, [r4, #8]
 800ad5e:	e7ef      	b.n	800ad40 <__swsetup_r+0xc0>
 800ad60:	2000000c 	.word	0x2000000c
 800ad64:	0800c944 	.word	0x0800c944
 800ad68:	0800c964 	.word	0x0800c964
 800ad6c:	0800c924 	.word	0x0800c924

0800ad70 <abort>:
 800ad70:	2006      	movs	r0, #6
 800ad72:	b510      	push	{r4, lr}
 800ad74:	f000 fa74 	bl	800b260 <raise>
 800ad78:	2001      	movs	r0, #1
 800ad7a:	f7f9 fe30 	bl	80049de <_exit>
	...

0800ad80 <__sflush_r>:
 800ad80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad82:	898b      	ldrh	r3, [r1, #12]
 800ad84:	0005      	movs	r5, r0
 800ad86:	000c      	movs	r4, r1
 800ad88:	071a      	lsls	r2, r3, #28
 800ad8a:	d45f      	bmi.n	800ae4c <__sflush_r+0xcc>
 800ad8c:	684a      	ldr	r2, [r1, #4]
 800ad8e:	2a00      	cmp	r2, #0
 800ad90:	dc04      	bgt.n	800ad9c <__sflush_r+0x1c>
 800ad92:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ad94:	2a00      	cmp	r2, #0
 800ad96:	dc01      	bgt.n	800ad9c <__sflush_r+0x1c>
 800ad98:	2000      	movs	r0, #0
 800ad9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad9c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ad9e:	2f00      	cmp	r7, #0
 800ada0:	d0fa      	beq.n	800ad98 <__sflush_r+0x18>
 800ada2:	2200      	movs	r2, #0
 800ada4:	2180      	movs	r1, #128	; 0x80
 800ada6:	682e      	ldr	r6, [r5, #0]
 800ada8:	602a      	str	r2, [r5, #0]
 800adaa:	001a      	movs	r2, r3
 800adac:	0149      	lsls	r1, r1, #5
 800adae:	400a      	ands	r2, r1
 800adb0:	420b      	tst	r3, r1
 800adb2:	d034      	beq.n	800ae1e <__sflush_r+0x9e>
 800adb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adb6:	89a3      	ldrh	r3, [r4, #12]
 800adb8:	075b      	lsls	r3, r3, #29
 800adba:	d506      	bpl.n	800adca <__sflush_r+0x4a>
 800adbc:	6863      	ldr	r3, [r4, #4]
 800adbe:	1ac0      	subs	r0, r0, r3
 800adc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d001      	beq.n	800adca <__sflush_r+0x4a>
 800adc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adc8:	1ac0      	subs	r0, r0, r3
 800adca:	0002      	movs	r2, r0
 800adcc:	6a21      	ldr	r1, [r4, #32]
 800adce:	2300      	movs	r3, #0
 800add0:	0028      	movs	r0, r5
 800add2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800add4:	47b8      	blx	r7
 800add6:	89a1      	ldrh	r1, [r4, #12]
 800add8:	1c43      	adds	r3, r0, #1
 800adda:	d106      	bne.n	800adea <__sflush_r+0x6a>
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	2b1d      	cmp	r3, #29
 800ade0:	d831      	bhi.n	800ae46 <__sflush_r+0xc6>
 800ade2:	4a2c      	ldr	r2, [pc, #176]	; (800ae94 <__sflush_r+0x114>)
 800ade4:	40da      	lsrs	r2, r3
 800ade6:	07d3      	lsls	r3, r2, #31
 800ade8:	d52d      	bpl.n	800ae46 <__sflush_r+0xc6>
 800adea:	2300      	movs	r3, #0
 800adec:	6063      	str	r3, [r4, #4]
 800adee:	6923      	ldr	r3, [r4, #16]
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	04cb      	lsls	r3, r1, #19
 800adf4:	d505      	bpl.n	800ae02 <__sflush_r+0x82>
 800adf6:	1c43      	adds	r3, r0, #1
 800adf8:	d102      	bne.n	800ae00 <__sflush_r+0x80>
 800adfa:	682b      	ldr	r3, [r5, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d100      	bne.n	800ae02 <__sflush_r+0x82>
 800ae00:	6560      	str	r0, [r4, #84]	; 0x54
 800ae02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae04:	602e      	str	r6, [r5, #0]
 800ae06:	2900      	cmp	r1, #0
 800ae08:	d0c6      	beq.n	800ad98 <__sflush_r+0x18>
 800ae0a:	0023      	movs	r3, r4
 800ae0c:	3344      	adds	r3, #68	; 0x44
 800ae0e:	4299      	cmp	r1, r3
 800ae10:	d002      	beq.n	800ae18 <__sflush_r+0x98>
 800ae12:	0028      	movs	r0, r5
 800ae14:	f7ff fac8 	bl	800a3a8 <_free_r>
 800ae18:	2000      	movs	r0, #0
 800ae1a:	6360      	str	r0, [r4, #52]	; 0x34
 800ae1c:	e7bd      	b.n	800ad9a <__sflush_r+0x1a>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	0028      	movs	r0, r5
 800ae22:	6a21      	ldr	r1, [r4, #32]
 800ae24:	47b8      	blx	r7
 800ae26:	1c43      	adds	r3, r0, #1
 800ae28:	d1c5      	bne.n	800adb6 <__sflush_r+0x36>
 800ae2a:	682b      	ldr	r3, [r5, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d0c2      	beq.n	800adb6 <__sflush_r+0x36>
 800ae30:	2b1d      	cmp	r3, #29
 800ae32:	d001      	beq.n	800ae38 <__sflush_r+0xb8>
 800ae34:	2b16      	cmp	r3, #22
 800ae36:	d101      	bne.n	800ae3c <__sflush_r+0xbc>
 800ae38:	602e      	str	r6, [r5, #0]
 800ae3a:	e7ad      	b.n	800ad98 <__sflush_r+0x18>
 800ae3c:	2340      	movs	r3, #64	; 0x40
 800ae3e:	89a2      	ldrh	r2, [r4, #12]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	81a3      	strh	r3, [r4, #12]
 800ae44:	e7a9      	b.n	800ad9a <__sflush_r+0x1a>
 800ae46:	2340      	movs	r3, #64	; 0x40
 800ae48:	430b      	orrs	r3, r1
 800ae4a:	e7fa      	b.n	800ae42 <__sflush_r+0xc2>
 800ae4c:	690f      	ldr	r7, [r1, #16]
 800ae4e:	2f00      	cmp	r7, #0
 800ae50:	d0a2      	beq.n	800ad98 <__sflush_r+0x18>
 800ae52:	680a      	ldr	r2, [r1, #0]
 800ae54:	600f      	str	r7, [r1, #0]
 800ae56:	1bd2      	subs	r2, r2, r7
 800ae58:	9201      	str	r2, [sp, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	079b      	lsls	r3, r3, #30
 800ae5e:	d100      	bne.n	800ae62 <__sflush_r+0xe2>
 800ae60:	694a      	ldr	r2, [r1, #20]
 800ae62:	60a2      	str	r2, [r4, #8]
 800ae64:	9b01      	ldr	r3, [sp, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	dc00      	bgt.n	800ae6c <__sflush_r+0xec>
 800ae6a:	e795      	b.n	800ad98 <__sflush_r+0x18>
 800ae6c:	003a      	movs	r2, r7
 800ae6e:	0028      	movs	r0, r5
 800ae70:	9b01      	ldr	r3, [sp, #4]
 800ae72:	6a21      	ldr	r1, [r4, #32]
 800ae74:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae76:	47b0      	blx	r6
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	dc06      	bgt.n	800ae8a <__sflush_r+0x10a>
 800ae7c:	2340      	movs	r3, #64	; 0x40
 800ae7e:	2001      	movs	r0, #1
 800ae80:	89a2      	ldrh	r2, [r4, #12]
 800ae82:	4240      	negs	r0, r0
 800ae84:	4313      	orrs	r3, r2
 800ae86:	81a3      	strh	r3, [r4, #12]
 800ae88:	e787      	b.n	800ad9a <__sflush_r+0x1a>
 800ae8a:	9b01      	ldr	r3, [sp, #4]
 800ae8c:	183f      	adds	r7, r7, r0
 800ae8e:	1a1b      	subs	r3, r3, r0
 800ae90:	9301      	str	r3, [sp, #4]
 800ae92:	e7e7      	b.n	800ae64 <__sflush_r+0xe4>
 800ae94:	20400001 	.word	0x20400001

0800ae98 <_fflush_r>:
 800ae98:	690b      	ldr	r3, [r1, #16]
 800ae9a:	b570      	push	{r4, r5, r6, lr}
 800ae9c:	0005      	movs	r5, r0
 800ae9e:	000c      	movs	r4, r1
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d102      	bne.n	800aeaa <_fflush_r+0x12>
 800aea4:	2500      	movs	r5, #0
 800aea6:	0028      	movs	r0, r5
 800aea8:	bd70      	pop	{r4, r5, r6, pc}
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d004      	beq.n	800aeb8 <_fflush_r+0x20>
 800aeae:	6983      	ldr	r3, [r0, #24]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d101      	bne.n	800aeb8 <_fflush_r+0x20>
 800aeb4:	f000 f892 	bl	800afdc <__sinit>
 800aeb8:	4b14      	ldr	r3, [pc, #80]	; (800af0c <_fflush_r+0x74>)
 800aeba:	429c      	cmp	r4, r3
 800aebc:	d11b      	bne.n	800aef6 <_fflush_r+0x5e>
 800aebe:	686c      	ldr	r4, [r5, #4]
 800aec0:	220c      	movs	r2, #12
 800aec2:	5ea3      	ldrsh	r3, [r4, r2]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d0ed      	beq.n	800aea4 <_fflush_r+0xc>
 800aec8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aeca:	07d2      	lsls	r2, r2, #31
 800aecc:	d404      	bmi.n	800aed8 <_fflush_r+0x40>
 800aece:	059b      	lsls	r3, r3, #22
 800aed0:	d402      	bmi.n	800aed8 <_fflush_r+0x40>
 800aed2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aed4:	f000 f923 	bl	800b11e <__retarget_lock_acquire_recursive>
 800aed8:	0028      	movs	r0, r5
 800aeda:	0021      	movs	r1, r4
 800aedc:	f7ff ff50 	bl	800ad80 <__sflush_r>
 800aee0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aee2:	0005      	movs	r5, r0
 800aee4:	07db      	lsls	r3, r3, #31
 800aee6:	d4de      	bmi.n	800aea6 <_fflush_r+0xe>
 800aee8:	89a3      	ldrh	r3, [r4, #12]
 800aeea:	059b      	lsls	r3, r3, #22
 800aeec:	d4db      	bmi.n	800aea6 <_fflush_r+0xe>
 800aeee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aef0:	f000 f916 	bl	800b120 <__retarget_lock_release_recursive>
 800aef4:	e7d7      	b.n	800aea6 <_fflush_r+0xe>
 800aef6:	4b06      	ldr	r3, [pc, #24]	; (800af10 <_fflush_r+0x78>)
 800aef8:	429c      	cmp	r4, r3
 800aefa:	d101      	bne.n	800af00 <_fflush_r+0x68>
 800aefc:	68ac      	ldr	r4, [r5, #8]
 800aefe:	e7df      	b.n	800aec0 <_fflush_r+0x28>
 800af00:	4b04      	ldr	r3, [pc, #16]	; (800af14 <_fflush_r+0x7c>)
 800af02:	429c      	cmp	r4, r3
 800af04:	d1dc      	bne.n	800aec0 <_fflush_r+0x28>
 800af06:	68ec      	ldr	r4, [r5, #12]
 800af08:	e7da      	b.n	800aec0 <_fflush_r+0x28>
 800af0a:	46c0      	nop			; (mov r8, r8)
 800af0c:	0800c944 	.word	0x0800c944
 800af10:	0800c964 	.word	0x0800c964
 800af14:	0800c924 	.word	0x0800c924

0800af18 <std>:
 800af18:	2300      	movs	r3, #0
 800af1a:	b510      	push	{r4, lr}
 800af1c:	0004      	movs	r4, r0
 800af1e:	6003      	str	r3, [r0, #0]
 800af20:	6043      	str	r3, [r0, #4]
 800af22:	6083      	str	r3, [r0, #8]
 800af24:	8181      	strh	r1, [r0, #12]
 800af26:	6643      	str	r3, [r0, #100]	; 0x64
 800af28:	0019      	movs	r1, r3
 800af2a:	81c2      	strh	r2, [r0, #14]
 800af2c:	6103      	str	r3, [r0, #16]
 800af2e:	6143      	str	r3, [r0, #20]
 800af30:	6183      	str	r3, [r0, #24]
 800af32:	2208      	movs	r2, #8
 800af34:	305c      	adds	r0, #92	; 0x5c
 800af36:	f7fd fb1d 	bl	8008574 <memset>
 800af3a:	4b05      	ldr	r3, [pc, #20]	; (800af50 <std+0x38>)
 800af3c:	6263      	str	r3, [r4, #36]	; 0x24
 800af3e:	4b05      	ldr	r3, [pc, #20]	; (800af54 <std+0x3c>)
 800af40:	6224      	str	r4, [r4, #32]
 800af42:	62a3      	str	r3, [r4, #40]	; 0x28
 800af44:	4b04      	ldr	r3, [pc, #16]	; (800af58 <std+0x40>)
 800af46:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af48:	4b04      	ldr	r3, [pc, #16]	; (800af5c <std+0x44>)
 800af4a:	6323      	str	r3, [r4, #48]	; 0x30
 800af4c:	bd10      	pop	{r4, pc}
 800af4e:	46c0      	nop			; (mov r8, r8)
 800af50:	0800b2a1 	.word	0x0800b2a1
 800af54:	0800b2c9 	.word	0x0800b2c9
 800af58:	0800b301 	.word	0x0800b301
 800af5c:	0800b32d 	.word	0x0800b32d

0800af60 <_cleanup_r>:
 800af60:	b510      	push	{r4, lr}
 800af62:	4902      	ldr	r1, [pc, #8]	; (800af6c <_cleanup_r+0xc>)
 800af64:	f000 f8ba 	bl	800b0dc <_fwalk_reent>
 800af68:	bd10      	pop	{r4, pc}
 800af6a:	46c0      	nop			; (mov r8, r8)
 800af6c:	0800ae99 	.word	0x0800ae99

0800af70 <__sfmoreglue>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	2568      	movs	r5, #104	; 0x68
 800af74:	1e4a      	subs	r2, r1, #1
 800af76:	4355      	muls	r5, r2
 800af78:	000e      	movs	r6, r1
 800af7a:	0029      	movs	r1, r5
 800af7c:	3174      	adds	r1, #116	; 0x74
 800af7e:	f7ff fa5d 	bl	800a43c <_malloc_r>
 800af82:	1e04      	subs	r4, r0, #0
 800af84:	d008      	beq.n	800af98 <__sfmoreglue+0x28>
 800af86:	2100      	movs	r1, #0
 800af88:	002a      	movs	r2, r5
 800af8a:	6001      	str	r1, [r0, #0]
 800af8c:	6046      	str	r6, [r0, #4]
 800af8e:	300c      	adds	r0, #12
 800af90:	60a0      	str	r0, [r4, #8]
 800af92:	3268      	adds	r2, #104	; 0x68
 800af94:	f7fd faee 	bl	8008574 <memset>
 800af98:	0020      	movs	r0, r4
 800af9a:	bd70      	pop	{r4, r5, r6, pc}

0800af9c <__sfp_lock_acquire>:
 800af9c:	b510      	push	{r4, lr}
 800af9e:	4802      	ldr	r0, [pc, #8]	; (800afa8 <__sfp_lock_acquire+0xc>)
 800afa0:	f000 f8bd 	bl	800b11e <__retarget_lock_acquire_recursive>
 800afa4:	bd10      	pop	{r4, pc}
 800afa6:	46c0      	nop			; (mov r8, r8)
 800afa8:	2000045c 	.word	0x2000045c

0800afac <__sfp_lock_release>:
 800afac:	b510      	push	{r4, lr}
 800afae:	4802      	ldr	r0, [pc, #8]	; (800afb8 <__sfp_lock_release+0xc>)
 800afb0:	f000 f8b6 	bl	800b120 <__retarget_lock_release_recursive>
 800afb4:	bd10      	pop	{r4, pc}
 800afb6:	46c0      	nop			; (mov r8, r8)
 800afb8:	2000045c 	.word	0x2000045c

0800afbc <__sinit_lock_acquire>:
 800afbc:	b510      	push	{r4, lr}
 800afbe:	4802      	ldr	r0, [pc, #8]	; (800afc8 <__sinit_lock_acquire+0xc>)
 800afc0:	f000 f8ad 	bl	800b11e <__retarget_lock_acquire_recursive>
 800afc4:	bd10      	pop	{r4, pc}
 800afc6:	46c0      	nop			; (mov r8, r8)
 800afc8:	20000457 	.word	0x20000457

0800afcc <__sinit_lock_release>:
 800afcc:	b510      	push	{r4, lr}
 800afce:	4802      	ldr	r0, [pc, #8]	; (800afd8 <__sinit_lock_release+0xc>)
 800afd0:	f000 f8a6 	bl	800b120 <__retarget_lock_release_recursive>
 800afd4:	bd10      	pop	{r4, pc}
 800afd6:	46c0      	nop			; (mov r8, r8)
 800afd8:	20000457 	.word	0x20000457

0800afdc <__sinit>:
 800afdc:	b513      	push	{r0, r1, r4, lr}
 800afde:	0004      	movs	r4, r0
 800afe0:	f7ff ffec 	bl	800afbc <__sinit_lock_acquire>
 800afe4:	69a3      	ldr	r3, [r4, #24]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d002      	beq.n	800aff0 <__sinit+0x14>
 800afea:	f7ff ffef 	bl	800afcc <__sinit_lock_release>
 800afee:	bd13      	pop	{r0, r1, r4, pc}
 800aff0:	64a3      	str	r3, [r4, #72]	; 0x48
 800aff2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800aff4:	6523      	str	r3, [r4, #80]	; 0x50
 800aff6:	4b13      	ldr	r3, [pc, #76]	; (800b044 <__sinit+0x68>)
 800aff8:	4a13      	ldr	r2, [pc, #76]	; (800b048 <__sinit+0x6c>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	62a2      	str	r2, [r4, #40]	; 0x28
 800affe:	9301      	str	r3, [sp, #4]
 800b000:	42a3      	cmp	r3, r4
 800b002:	d101      	bne.n	800b008 <__sinit+0x2c>
 800b004:	2301      	movs	r3, #1
 800b006:	61a3      	str	r3, [r4, #24]
 800b008:	0020      	movs	r0, r4
 800b00a:	f000 f81f 	bl	800b04c <__sfp>
 800b00e:	6060      	str	r0, [r4, #4]
 800b010:	0020      	movs	r0, r4
 800b012:	f000 f81b 	bl	800b04c <__sfp>
 800b016:	60a0      	str	r0, [r4, #8]
 800b018:	0020      	movs	r0, r4
 800b01a:	f000 f817 	bl	800b04c <__sfp>
 800b01e:	2200      	movs	r2, #0
 800b020:	2104      	movs	r1, #4
 800b022:	60e0      	str	r0, [r4, #12]
 800b024:	6860      	ldr	r0, [r4, #4]
 800b026:	f7ff ff77 	bl	800af18 <std>
 800b02a:	2201      	movs	r2, #1
 800b02c:	2109      	movs	r1, #9
 800b02e:	68a0      	ldr	r0, [r4, #8]
 800b030:	f7ff ff72 	bl	800af18 <std>
 800b034:	2202      	movs	r2, #2
 800b036:	2112      	movs	r1, #18
 800b038:	68e0      	ldr	r0, [r4, #12]
 800b03a:	f7ff ff6d 	bl	800af18 <std>
 800b03e:	2301      	movs	r3, #1
 800b040:	61a3      	str	r3, [r4, #24]
 800b042:	e7d2      	b.n	800afea <__sinit+0xe>
 800b044:	0800c5a0 	.word	0x0800c5a0
 800b048:	0800af61 	.word	0x0800af61

0800b04c <__sfp>:
 800b04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04e:	0007      	movs	r7, r0
 800b050:	f7ff ffa4 	bl	800af9c <__sfp_lock_acquire>
 800b054:	4b1f      	ldr	r3, [pc, #124]	; (800b0d4 <__sfp+0x88>)
 800b056:	681e      	ldr	r6, [r3, #0]
 800b058:	69b3      	ldr	r3, [r6, #24]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d102      	bne.n	800b064 <__sfp+0x18>
 800b05e:	0030      	movs	r0, r6
 800b060:	f7ff ffbc 	bl	800afdc <__sinit>
 800b064:	3648      	adds	r6, #72	; 0x48
 800b066:	68b4      	ldr	r4, [r6, #8]
 800b068:	6873      	ldr	r3, [r6, #4]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	d504      	bpl.n	800b078 <__sfp+0x2c>
 800b06e:	6833      	ldr	r3, [r6, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d022      	beq.n	800b0ba <__sfp+0x6e>
 800b074:	6836      	ldr	r6, [r6, #0]
 800b076:	e7f6      	b.n	800b066 <__sfp+0x1a>
 800b078:	220c      	movs	r2, #12
 800b07a:	5ea5      	ldrsh	r5, [r4, r2]
 800b07c:	2d00      	cmp	r5, #0
 800b07e:	d11a      	bne.n	800b0b6 <__sfp+0x6a>
 800b080:	0020      	movs	r0, r4
 800b082:	4b15      	ldr	r3, [pc, #84]	; (800b0d8 <__sfp+0x8c>)
 800b084:	3058      	adds	r0, #88	; 0x58
 800b086:	60e3      	str	r3, [r4, #12]
 800b088:	6665      	str	r5, [r4, #100]	; 0x64
 800b08a:	f000 f847 	bl	800b11c <__retarget_lock_init_recursive>
 800b08e:	f7ff ff8d 	bl	800afac <__sfp_lock_release>
 800b092:	0020      	movs	r0, r4
 800b094:	2208      	movs	r2, #8
 800b096:	0029      	movs	r1, r5
 800b098:	6025      	str	r5, [r4, #0]
 800b09a:	60a5      	str	r5, [r4, #8]
 800b09c:	6065      	str	r5, [r4, #4]
 800b09e:	6125      	str	r5, [r4, #16]
 800b0a0:	6165      	str	r5, [r4, #20]
 800b0a2:	61a5      	str	r5, [r4, #24]
 800b0a4:	305c      	adds	r0, #92	; 0x5c
 800b0a6:	f7fd fa65 	bl	8008574 <memset>
 800b0aa:	6365      	str	r5, [r4, #52]	; 0x34
 800b0ac:	63a5      	str	r5, [r4, #56]	; 0x38
 800b0ae:	64a5      	str	r5, [r4, #72]	; 0x48
 800b0b0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b0b2:	0020      	movs	r0, r4
 800b0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b6:	3468      	adds	r4, #104	; 0x68
 800b0b8:	e7d7      	b.n	800b06a <__sfp+0x1e>
 800b0ba:	2104      	movs	r1, #4
 800b0bc:	0038      	movs	r0, r7
 800b0be:	f7ff ff57 	bl	800af70 <__sfmoreglue>
 800b0c2:	1e04      	subs	r4, r0, #0
 800b0c4:	6030      	str	r0, [r6, #0]
 800b0c6:	d1d5      	bne.n	800b074 <__sfp+0x28>
 800b0c8:	f7ff ff70 	bl	800afac <__sfp_lock_release>
 800b0cc:	230c      	movs	r3, #12
 800b0ce:	603b      	str	r3, [r7, #0]
 800b0d0:	e7ef      	b.n	800b0b2 <__sfp+0x66>
 800b0d2:	46c0      	nop			; (mov r8, r8)
 800b0d4:	0800c5a0 	.word	0x0800c5a0
 800b0d8:	ffff0001 	.word	0xffff0001

0800b0dc <_fwalk_reent>:
 800b0dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0de:	0004      	movs	r4, r0
 800b0e0:	0006      	movs	r6, r0
 800b0e2:	2700      	movs	r7, #0
 800b0e4:	9101      	str	r1, [sp, #4]
 800b0e6:	3448      	adds	r4, #72	; 0x48
 800b0e8:	6863      	ldr	r3, [r4, #4]
 800b0ea:	68a5      	ldr	r5, [r4, #8]
 800b0ec:	9300      	str	r3, [sp, #0]
 800b0ee:	9b00      	ldr	r3, [sp, #0]
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	d504      	bpl.n	800b100 <_fwalk_reent+0x24>
 800b0f6:	6824      	ldr	r4, [r4, #0]
 800b0f8:	2c00      	cmp	r4, #0
 800b0fa:	d1f5      	bne.n	800b0e8 <_fwalk_reent+0xc>
 800b0fc:	0038      	movs	r0, r7
 800b0fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b100:	89ab      	ldrh	r3, [r5, #12]
 800b102:	2b01      	cmp	r3, #1
 800b104:	d908      	bls.n	800b118 <_fwalk_reent+0x3c>
 800b106:	220e      	movs	r2, #14
 800b108:	5eab      	ldrsh	r3, [r5, r2]
 800b10a:	3301      	adds	r3, #1
 800b10c:	d004      	beq.n	800b118 <_fwalk_reent+0x3c>
 800b10e:	0029      	movs	r1, r5
 800b110:	0030      	movs	r0, r6
 800b112:	9b01      	ldr	r3, [sp, #4]
 800b114:	4798      	blx	r3
 800b116:	4307      	orrs	r7, r0
 800b118:	3568      	adds	r5, #104	; 0x68
 800b11a:	e7e8      	b.n	800b0ee <_fwalk_reent+0x12>

0800b11c <__retarget_lock_init_recursive>:
 800b11c:	4770      	bx	lr

0800b11e <__retarget_lock_acquire_recursive>:
 800b11e:	4770      	bx	lr

0800b120 <__retarget_lock_release_recursive>:
 800b120:	4770      	bx	lr
	...

0800b124 <__swhatbuf_r>:
 800b124:	b570      	push	{r4, r5, r6, lr}
 800b126:	000e      	movs	r6, r1
 800b128:	001d      	movs	r5, r3
 800b12a:	230e      	movs	r3, #14
 800b12c:	5ec9      	ldrsh	r1, [r1, r3]
 800b12e:	0014      	movs	r4, r2
 800b130:	b096      	sub	sp, #88	; 0x58
 800b132:	2900      	cmp	r1, #0
 800b134:	da07      	bge.n	800b146 <__swhatbuf_r+0x22>
 800b136:	2300      	movs	r3, #0
 800b138:	602b      	str	r3, [r5, #0]
 800b13a:	89b3      	ldrh	r3, [r6, #12]
 800b13c:	061b      	lsls	r3, r3, #24
 800b13e:	d411      	bmi.n	800b164 <__swhatbuf_r+0x40>
 800b140:	2380      	movs	r3, #128	; 0x80
 800b142:	00db      	lsls	r3, r3, #3
 800b144:	e00f      	b.n	800b166 <__swhatbuf_r+0x42>
 800b146:	466a      	mov	r2, sp
 800b148:	f000 f91c 	bl	800b384 <_fstat_r>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	dbf2      	blt.n	800b136 <__swhatbuf_r+0x12>
 800b150:	23f0      	movs	r3, #240	; 0xf0
 800b152:	9901      	ldr	r1, [sp, #4]
 800b154:	021b      	lsls	r3, r3, #8
 800b156:	4019      	ands	r1, r3
 800b158:	4b05      	ldr	r3, [pc, #20]	; (800b170 <__swhatbuf_r+0x4c>)
 800b15a:	18c9      	adds	r1, r1, r3
 800b15c:	424b      	negs	r3, r1
 800b15e:	4159      	adcs	r1, r3
 800b160:	6029      	str	r1, [r5, #0]
 800b162:	e7ed      	b.n	800b140 <__swhatbuf_r+0x1c>
 800b164:	2340      	movs	r3, #64	; 0x40
 800b166:	2000      	movs	r0, #0
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	b016      	add	sp, #88	; 0x58
 800b16c:	bd70      	pop	{r4, r5, r6, pc}
 800b16e:	46c0      	nop			; (mov r8, r8)
 800b170:	ffffe000 	.word	0xffffe000

0800b174 <__smakebuf_r>:
 800b174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b176:	2602      	movs	r6, #2
 800b178:	898b      	ldrh	r3, [r1, #12]
 800b17a:	0005      	movs	r5, r0
 800b17c:	000c      	movs	r4, r1
 800b17e:	4233      	tst	r3, r6
 800b180:	d006      	beq.n	800b190 <__smakebuf_r+0x1c>
 800b182:	0023      	movs	r3, r4
 800b184:	3347      	adds	r3, #71	; 0x47
 800b186:	6023      	str	r3, [r4, #0]
 800b188:	6123      	str	r3, [r4, #16]
 800b18a:	2301      	movs	r3, #1
 800b18c:	6163      	str	r3, [r4, #20]
 800b18e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b190:	466a      	mov	r2, sp
 800b192:	ab01      	add	r3, sp, #4
 800b194:	f7ff ffc6 	bl	800b124 <__swhatbuf_r>
 800b198:	9900      	ldr	r1, [sp, #0]
 800b19a:	0007      	movs	r7, r0
 800b19c:	0028      	movs	r0, r5
 800b19e:	f7ff f94d 	bl	800a43c <_malloc_r>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d108      	bne.n	800b1b8 <__smakebuf_r+0x44>
 800b1a6:	220c      	movs	r2, #12
 800b1a8:	5ea3      	ldrsh	r3, [r4, r2]
 800b1aa:	059a      	lsls	r2, r3, #22
 800b1ac:	d4ef      	bmi.n	800b18e <__smakebuf_r+0x1a>
 800b1ae:	2203      	movs	r2, #3
 800b1b0:	4393      	bics	r3, r2
 800b1b2:	431e      	orrs	r6, r3
 800b1b4:	81a6      	strh	r6, [r4, #12]
 800b1b6:	e7e4      	b.n	800b182 <__smakebuf_r+0xe>
 800b1b8:	4b0f      	ldr	r3, [pc, #60]	; (800b1f8 <__smakebuf_r+0x84>)
 800b1ba:	62ab      	str	r3, [r5, #40]	; 0x28
 800b1bc:	2380      	movs	r3, #128	; 0x80
 800b1be:	89a2      	ldrh	r2, [r4, #12]
 800b1c0:	6020      	str	r0, [r4, #0]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	81a3      	strh	r3, [r4, #12]
 800b1c6:	9b00      	ldr	r3, [sp, #0]
 800b1c8:	6120      	str	r0, [r4, #16]
 800b1ca:	6163      	str	r3, [r4, #20]
 800b1cc:	9b01      	ldr	r3, [sp, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00d      	beq.n	800b1ee <__smakebuf_r+0x7a>
 800b1d2:	0028      	movs	r0, r5
 800b1d4:	230e      	movs	r3, #14
 800b1d6:	5ee1      	ldrsh	r1, [r4, r3]
 800b1d8:	f000 f8e6 	bl	800b3a8 <_isatty_r>
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	d006      	beq.n	800b1ee <__smakebuf_r+0x7a>
 800b1e0:	2203      	movs	r2, #3
 800b1e2:	89a3      	ldrh	r3, [r4, #12]
 800b1e4:	4393      	bics	r3, r2
 800b1e6:	001a      	movs	r2, r3
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	81a3      	strh	r3, [r4, #12]
 800b1ee:	89a0      	ldrh	r0, [r4, #12]
 800b1f0:	4307      	orrs	r7, r0
 800b1f2:	81a7      	strh	r7, [r4, #12]
 800b1f4:	e7cb      	b.n	800b18e <__smakebuf_r+0x1a>
 800b1f6:	46c0      	nop			; (mov r8, r8)
 800b1f8:	0800af61 	.word	0x0800af61

0800b1fc <_malloc_usable_size_r>:
 800b1fc:	1f0b      	subs	r3, r1, #4
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	1f18      	subs	r0, r3, #4
 800b202:	2b00      	cmp	r3, #0
 800b204:	da01      	bge.n	800b20a <_malloc_usable_size_r+0xe>
 800b206:	580b      	ldr	r3, [r1, r0]
 800b208:	18c0      	adds	r0, r0, r3
 800b20a:	4770      	bx	lr

0800b20c <_raise_r>:
 800b20c:	b570      	push	{r4, r5, r6, lr}
 800b20e:	0004      	movs	r4, r0
 800b210:	000d      	movs	r5, r1
 800b212:	291f      	cmp	r1, #31
 800b214:	d904      	bls.n	800b220 <_raise_r+0x14>
 800b216:	2316      	movs	r3, #22
 800b218:	6003      	str	r3, [r0, #0]
 800b21a:	2001      	movs	r0, #1
 800b21c:	4240      	negs	r0, r0
 800b21e:	bd70      	pop	{r4, r5, r6, pc}
 800b220:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b222:	2b00      	cmp	r3, #0
 800b224:	d004      	beq.n	800b230 <_raise_r+0x24>
 800b226:	008a      	lsls	r2, r1, #2
 800b228:	189b      	adds	r3, r3, r2
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	2a00      	cmp	r2, #0
 800b22e:	d108      	bne.n	800b242 <_raise_r+0x36>
 800b230:	0020      	movs	r0, r4
 800b232:	f000 f831 	bl	800b298 <_getpid_r>
 800b236:	002a      	movs	r2, r5
 800b238:	0001      	movs	r1, r0
 800b23a:	0020      	movs	r0, r4
 800b23c:	f000 f81a 	bl	800b274 <_kill_r>
 800b240:	e7ed      	b.n	800b21e <_raise_r+0x12>
 800b242:	2000      	movs	r0, #0
 800b244:	2a01      	cmp	r2, #1
 800b246:	d0ea      	beq.n	800b21e <_raise_r+0x12>
 800b248:	1c51      	adds	r1, r2, #1
 800b24a:	d103      	bne.n	800b254 <_raise_r+0x48>
 800b24c:	2316      	movs	r3, #22
 800b24e:	3001      	adds	r0, #1
 800b250:	6023      	str	r3, [r4, #0]
 800b252:	e7e4      	b.n	800b21e <_raise_r+0x12>
 800b254:	2400      	movs	r4, #0
 800b256:	0028      	movs	r0, r5
 800b258:	601c      	str	r4, [r3, #0]
 800b25a:	4790      	blx	r2
 800b25c:	0020      	movs	r0, r4
 800b25e:	e7de      	b.n	800b21e <_raise_r+0x12>

0800b260 <raise>:
 800b260:	b510      	push	{r4, lr}
 800b262:	4b03      	ldr	r3, [pc, #12]	; (800b270 <raise+0x10>)
 800b264:	0001      	movs	r1, r0
 800b266:	6818      	ldr	r0, [r3, #0]
 800b268:	f7ff ffd0 	bl	800b20c <_raise_r>
 800b26c:	bd10      	pop	{r4, pc}
 800b26e:	46c0      	nop			; (mov r8, r8)
 800b270:	2000000c 	.word	0x2000000c

0800b274 <_kill_r>:
 800b274:	2300      	movs	r3, #0
 800b276:	b570      	push	{r4, r5, r6, lr}
 800b278:	4d06      	ldr	r5, [pc, #24]	; (800b294 <_kill_r+0x20>)
 800b27a:	0004      	movs	r4, r0
 800b27c:	0008      	movs	r0, r1
 800b27e:	0011      	movs	r1, r2
 800b280:	602b      	str	r3, [r5, #0]
 800b282:	f7f9 fb9c 	bl	80049be <_kill>
 800b286:	1c43      	adds	r3, r0, #1
 800b288:	d103      	bne.n	800b292 <_kill_r+0x1e>
 800b28a:	682b      	ldr	r3, [r5, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d000      	beq.n	800b292 <_kill_r+0x1e>
 800b290:	6023      	str	r3, [r4, #0]
 800b292:	bd70      	pop	{r4, r5, r6, pc}
 800b294:	20000450 	.word	0x20000450

0800b298 <_getpid_r>:
 800b298:	b510      	push	{r4, lr}
 800b29a:	f7f9 fb8a 	bl	80049b2 <_getpid>
 800b29e:	bd10      	pop	{r4, pc}

0800b2a0 <__sread>:
 800b2a0:	b570      	push	{r4, r5, r6, lr}
 800b2a2:	000c      	movs	r4, r1
 800b2a4:	250e      	movs	r5, #14
 800b2a6:	5f49      	ldrsh	r1, [r1, r5]
 800b2a8:	f000 f8a4 	bl	800b3f4 <_read_r>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	db03      	blt.n	800b2b8 <__sread+0x18>
 800b2b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b2b2:	181b      	adds	r3, r3, r0
 800b2b4:	6563      	str	r3, [r4, #84]	; 0x54
 800b2b6:	bd70      	pop	{r4, r5, r6, pc}
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	4a02      	ldr	r2, [pc, #8]	; (800b2c4 <__sread+0x24>)
 800b2bc:	4013      	ands	r3, r2
 800b2be:	81a3      	strh	r3, [r4, #12]
 800b2c0:	e7f9      	b.n	800b2b6 <__sread+0x16>
 800b2c2:	46c0      	nop			; (mov r8, r8)
 800b2c4:	ffffefff 	.word	0xffffefff

0800b2c8 <__swrite>:
 800b2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ca:	001f      	movs	r7, r3
 800b2cc:	898b      	ldrh	r3, [r1, #12]
 800b2ce:	0005      	movs	r5, r0
 800b2d0:	000c      	movs	r4, r1
 800b2d2:	0016      	movs	r6, r2
 800b2d4:	05db      	lsls	r3, r3, #23
 800b2d6:	d505      	bpl.n	800b2e4 <__swrite+0x1c>
 800b2d8:	230e      	movs	r3, #14
 800b2da:	5ec9      	ldrsh	r1, [r1, r3]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	2302      	movs	r3, #2
 800b2e0:	f000 f874 	bl	800b3cc <_lseek_r>
 800b2e4:	89a3      	ldrh	r3, [r4, #12]
 800b2e6:	4a05      	ldr	r2, [pc, #20]	; (800b2fc <__swrite+0x34>)
 800b2e8:	0028      	movs	r0, r5
 800b2ea:	4013      	ands	r3, r2
 800b2ec:	81a3      	strh	r3, [r4, #12]
 800b2ee:	0032      	movs	r2, r6
 800b2f0:	230e      	movs	r3, #14
 800b2f2:	5ee1      	ldrsh	r1, [r4, r3]
 800b2f4:	003b      	movs	r3, r7
 800b2f6:	f000 f81f 	bl	800b338 <_write_r>
 800b2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2fc:	ffffefff 	.word	0xffffefff

0800b300 <__sseek>:
 800b300:	b570      	push	{r4, r5, r6, lr}
 800b302:	000c      	movs	r4, r1
 800b304:	250e      	movs	r5, #14
 800b306:	5f49      	ldrsh	r1, [r1, r5]
 800b308:	f000 f860 	bl	800b3cc <_lseek_r>
 800b30c:	89a3      	ldrh	r3, [r4, #12]
 800b30e:	1c42      	adds	r2, r0, #1
 800b310:	d103      	bne.n	800b31a <__sseek+0x1a>
 800b312:	4a05      	ldr	r2, [pc, #20]	; (800b328 <__sseek+0x28>)
 800b314:	4013      	ands	r3, r2
 800b316:	81a3      	strh	r3, [r4, #12]
 800b318:	bd70      	pop	{r4, r5, r6, pc}
 800b31a:	2280      	movs	r2, #128	; 0x80
 800b31c:	0152      	lsls	r2, r2, #5
 800b31e:	4313      	orrs	r3, r2
 800b320:	81a3      	strh	r3, [r4, #12]
 800b322:	6560      	str	r0, [r4, #84]	; 0x54
 800b324:	e7f8      	b.n	800b318 <__sseek+0x18>
 800b326:	46c0      	nop			; (mov r8, r8)
 800b328:	ffffefff 	.word	0xffffefff

0800b32c <__sclose>:
 800b32c:	b510      	push	{r4, lr}
 800b32e:	230e      	movs	r3, #14
 800b330:	5ec9      	ldrsh	r1, [r1, r3]
 800b332:	f000 f815 	bl	800b360 <_close_r>
 800b336:	bd10      	pop	{r4, pc}

0800b338 <_write_r>:
 800b338:	b570      	push	{r4, r5, r6, lr}
 800b33a:	0004      	movs	r4, r0
 800b33c:	0008      	movs	r0, r1
 800b33e:	0011      	movs	r1, r2
 800b340:	001a      	movs	r2, r3
 800b342:	2300      	movs	r3, #0
 800b344:	4d05      	ldr	r5, [pc, #20]	; (800b35c <_write_r+0x24>)
 800b346:	602b      	str	r3, [r5, #0]
 800b348:	f7f9 fb72 	bl	8004a30 <_write>
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	d103      	bne.n	800b358 <_write_r+0x20>
 800b350:	682b      	ldr	r3, [r5, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d000      	beq.n	800b358 <_write_r+0x20>
 800b356:	6023      	str	r3, [r4, #0]
 800b358:	bd70      	pop	{r4, r5, r6, pc}
 800b35a:	46c0      	nop			; (mov r8, r8)
 800b35c:	20000450 	.word	0x20000450

0800b360 <_close_r>:
 800b360:	2300      	movs	r3, #0
 800b362:	b570      	push	{r4, r5, r6, lr}
 800b364:	4d06      	ldr	r5, [pc, #24]	; (800b380 <_close_r+0x20>)
 800b366:	0004      	movs	r4, r0
 800b368:	0008      	movs	r0, r1
 800b36a:	602b      	str	r3, [r5, #0]
 800b36c:	f7f9 fb7c 	bl	8004a68 <_close>
 800b370:	1c43      	adds	r3, r0, #1
 800b372:	d103      	bne.n	800b37c <_close_r+0x1c>
 800b374:	682b      	ldr	r3, [r5, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d000      	beq.n	800b37c <_close_r+0x1c>
 800b37a:	6023      	str	r3, [r4, #0]
 800b37c:	bd70      	pop	{r4, r5, r6, pc}
 800b37e:	46c0      	nop			; (mov r8, r8)
 800b380:	20000450 	.word	0x20000450

0800b384 <_fstat_r>:
 800b384:	2300      	movs	r3, #0
 800b386:	b570      	push	{r4, r5, r6, lr}
 800b388:	4d06      	ldr	r5, [pc, #24]	; (800b3a4 <_fstat_r+0x20>)
 800b38a:	0004      	movs	r4, r0
 800b38c:	0008      	movs	r0, r1
 800b38e:	0011      	movs	r1, r2
 800b390:	602b      	str	r3, [r5, #0]
 800b392:	f7f9 fb73 	bl	8004a7c <_fstat>
 800b396:	1c43      	adds	r3, r0, #1
 800b398:	d103      	bne.n	800b3a2 <_fstat_r+0x1e>
 800b39a:	682b      	ldr	r3, [r5, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d000      	beq.n	800b3a2 <_fstat_r+0x1e>
 800b3a0:	6023      	str	r3, [r4, #0]
 800b3a2:	bd70      	pop	{r4, r5, r6, pc}
 800b3a4:	20000450 	.word	0x20000450

0800b3a8 <_isatty_r>:
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	b570      	push	{r4, r5, r6, lr}
 800b3ac:	4d06      	ldr	r5, [pc, #24]	; (800b3c8 <_isatty_r+0x20>)
 800b3ae:	0004      	movs	r4, r0
 800b3b0:	0008      	movs	r0, r1
 800b3b2:	602b      	str	r3, [r5, #0]
 800b3b4:	f7f9 fb70 	bl	8004a98 <_isatty>
 800b3b8:	1c43      	adds	r3, r0, #1
 800b3ba:	d103      	bne.n	800b3c4 <_isatty_r+0x1c>
 800b3bc:	682b      	ldr	r3, [r5, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d000      	beq.n	800b3c4 <_isatty_r+0x1c>
 800b3c2:	6023      	str	r3, [r4, #0]
 800b3c4:	bd70      	pop	{r4, r5, r6, pc}
 800b3c6:	46c0      	nop			; (mov r8, r8)
 800b3c8:	20000450 	.word	0x20000450

0800b3cc <_lseek_r>:
 800b3cc:	b570      	push	{r4, r5, r6, lr}
 800b3ce:	0004      	movs	r4, r0
 800b3d0:	0008      	movs	r0, r1
 800b3d2:	0011      	movs	r1, r2
 800b3d4:	001a      	movs	r2, r3
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	4d05      	ldr	r5, [pc, #20]	; (800b3f0 <_lseek_r+0x24>)
 800b3da:	602b      	str	r3, [r5, #0]
 800b3dc:	f7f9 fb65 	bl	8004aaa <_lseek>
 800b3e0:	1c43      	adds	r3, r0, #1
 800b3e2:	d103      	bne.n	800b3ec <_lseek_r+0x20>
 800b3e4:	682b      	ldr	r3, [r5, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d000      	beq.n	800b3ec <_lseek_r+0x20>
 800b3ea:	6023      	str	r3, [r4, #0]
 800b3ec:	bd70      	pop	{r4, r5, r6, pc}
 800b3ee:	46c0      	nop			; (mov r8, r8)
 800b3f0:	20000450 	.word	0x20000450

0800b3f4 <_read_r>:
 800b3f4:	b570      	push	{r4, r5, r6, lr}
 800b3f6:	0004      	movs	r4, r0
 800b3f8:	0008      	movs	r0, r1
 800b3fa:	0011      	movs	r1, r2
 800b3fc:	001a      	movs	r2, r3
 800b3fe:	2300      	movs	r3, #0
 800b400:	4d05      	ldr	r5, [pc, #20]	; (800b418 <_read_r+0x24>)
 800b402:	602b      	str	r3, [r5, #0]
 800b404:	f7f9 faf7 	bl	80049f6 <_read>
 800b408:	1c43      	adds	r3, r0, #1
 800b40a:	d103      	bne.n	800b414 <_read_r+0x20>
 800b40c:	682b      	ldr	r3, [r5, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d000      	beq.n	800b414 <_read_r+0x20>
 800b412:	6023      	str	r3, [r4, #0]
 800b414:	bd70      	pop	{r4, r5, r6, pc}
 800b416:	46c0      	nop			; (mov r8, r8)
 800b418:	20000450 	.word	0x20000450

0800b41c <pow>:
 800b41c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b41e:	001d      	movs	r5, r3
 800b420:	0014      	movs	r4, r2
 800b422:	9000      	str	r0, [sp, #0]
 800b424:	9101      	str	r1, [sp, #4]
 800b426:	f000 f8b1 	bl	800b58c <__ieee754_pow>
 800b42a:	4b54      	ldr	r3, [pc, #336]	; (800b57c <pow+0x160>)
 800b42c:	0006      	movs	r6, r0
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	000f      	movs	r7, r1
 800b432:	b25b      	sxtb	r3, r3
 800b434:	3301      	adds	r3, #1
 800b436:	d018      	beq.n	800b46a <pow+0x4e>
 800b438:	0022      	movs	r2, r4
 800b43a:	002b      	movs	r3, r5
 800b43c:	0020      	movs	r0, r4
 800b43e:	0029      	movs	r1, r5
 800b440:	f7f7 fb16 	bl	8002a70 <__aeabi_dcmpun>
 800b444:	2800      	cmp	r0, #0
 800b446:	d110      	bne.n	800b46a <pow+0x4e>
 800b448:	9a00      	ldr	r2, [sp, #0]
 800b44a:	9b01      	ldr	r3, [sp, #4]
 800b44c:	0010      	movs	r0, r2
 800b44e:	0019      	movs	r1, r3
 800b450:	f7f7 fb0e 	bl	8002a70 <__aeabi_dcmpun>
 800b454:	2200      	movs	r2, #0
 800b456:	2300      	movs	r3, #0
 800b458:	2800      	cmp	r0, #0
 800b45a:	d00a      	beq.n	800b472 <pow+0x56>
 800b45c:	0020      	movs	r0, r4
 800b45e:	0029      	movs	r1, r5
 800b460:	f7f4 fff4 	bl	800044c <__aeabi_dcmpeq>
 800b464:	2800      	cmp	r0, #0
 800b466:	d000      	beq.n	800b46a <pow+0x4e>
 800b468:	e084      	b.n	800b574 <pow+0x158>
 800b46a:	0030      	movs	r0, r6
 800b46c:	0039      	movs	r1, r7
 800b46e:	b003      	add	sp, #12
 800b470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b472:	9800      	ldr	r0, [sp, #0]
 800b474:	9901      	ldr	r1, [sp, #4]
 800b476:	f7f4 ffe9 	bl	800044c <__aeabi_dcmpeq>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d01c      	beq.n	800b4b8 <pow+0x9c>
 800b47e:	2200      	movs	r2, #0
 800b480:	2300      	movs	r3, #0
 800b482:	0020      	movs	r0, r4
 800b484:	0029      	movs	r1, r5
 800b486:	f7f4 ffe1 	bl	800044c <__aeabi_dcmpeq>
 800b48a:	2800      	cmp	r0, #0
 800b48c:	d172      	bne.n	800b574 <pow+0x158>
 800b48e:	0020      	movs	r0, r4
 800b490:	0029      	movs	r1, r5
 800b492:	f000 fe33 	bl	800c0fc <finite>
 800b496:	2800      	cmp	r0, #0
 800b498:	d0e7      	beq.n	800b46a <pow+0x4e>
 800b49a:	2200      	movs	r2, #0
 800b49c:	2300      	movs	r3, #0
 800b49e:	0020      	movs	r0, r4
 800b4a0:	0029      	movs	r1, r5
 800b4a2:	f7f4 ffd9 	bl	8000458 <__aeabi_dcmplt>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d0df      	beq.n	800b46a <pow+0x4e>
 800b4aa:	f7fd f839 	bl	8008520 <__errno>
 800b4ae:	2321      	movs	r3, #33	; 0x21
 800b4b0:	2600      	movs	r6, #0
 800b4b2:	6003      	str	r3, [r0, #0]
 800b4b4:	4f32      	ldr	r7, [pc, #200]	; (800b580 <pow+0x164>)
 800b4b6:	e7d8      	b.n	800b46a <pow+0x4e>
 800b4b8:	0030      	movs	r0, r6
 800b4ba:	0039      	movs	r1, r7
 800b4bc:	f000 fe1e 	bl	800c0fc <finite>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d139      	bne.n	800b538 <pow+0x11c>
 800b4c4:	9800      	ldr	r0, [sp, #0]
 800b4c6:	9901      	ldr	r1, [sp, #4]
 800b4c8:	f000 fe18 	bl	800c0fc <finite>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d033      	beq.n	800b538 <pow+0x11c>
 800b4d0:	0020      	movs	r0, r4
 800b4d2:	0029      	movs	r1, r5
 800b4d4:	f000 fe12 	bl	800c0fc <finite>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d02d      	beq.n	800b538 <pow+0x11c>
 800b4dc:	0032      	movs	r2, r6
 800b4de:	003b      	movs	r3, r7
 800b4e0:	0030      	movs	r0, r6
 800b4e2:	0039      	movs	r1, r7
 800b4e4:	f7f7 fac4 	bl	8002a70 <__aeabi_dcmpun>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d00c      	beq.n	800b506 <pow+0xea>
 800b4ec:	f7fd f818 	bl	8008520 <__errno>
 800b4f0:	2321      	movs	r3, #33	; 0x21
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	6003      	str	r3, [r0, #0]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	0010      	movs	r0, r2
 800b4fa:	0019      	movs	r1, r3
 800b4fc:	f7f6 f8b4 	bl	8001668 <__aeabi_ddiv>
 800b500:	0006      	movs	r6, r0
 800b502:	000f      	movs	r7, r1
 800b504:	e7b1      	b.n	800b46a <pow+0x4e>
 800b506:	f7fd f80b 	bl	8008520 <__errno>
 800b50a:	2322      	movs	r3, #34	; 0x22
 800b50c:	2200      	movs	r2, #0
 800b50e:	6003      	str	r3, [r0, #0]
 800b510:	2300      	movs	r3, #0
 800b512:	9800      	ldr	r0, [sp, #0]
 800b514:	9901      	ldr	r1, [sp, #4]
 800b516:	f7f4 ff9f 	bl	8000458 <__aeabi_dcmplt>
 800b51a:	2600      	movs	r6, #0
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d009      	beq.n	800b534 <pow+0x118>
 800b520:	0020      	movs	r0, r4
 800b522:	0029      	movs	r1, r5
 800b524:	f000 fdf8 	bl	800c118 <rint>
 800b528:	0022      	movs	r2, r4
 800b52a:	002b      	movs	r3, r5
 800b52c:	f7f4 ff8e 	bl	800044c <__aeabi_dcmpeq>
 800b530:	2800      	cmp	r0, #0
 800b532:	d0bf      	beq.n	800b4b4 <pow+0x98>
 800b534:	4f13      	ldr	r7, [pc, #76]	; (800b584 <pow+0x168>)
 800b536:	e798      	b.n	800b46a <pow+0x4e>
 800b538:	2200      	movs	r2, #0
 800b53a:	2300      	movs	r3, #0
 800b53c:	0030      	movs	r0, r6
 800b53e:	0039      	movs	r1, r7
 800b540:	f7f4 ff84 	bl	800044c <__aeabi_dcmpeq>
 800b544:	2800      	cmp	r0, #0
 800b546:	d100      	bne.n	800b54a <pow+0x12e>
 800b548:	e78f      	b.n	800b46a <pow+0x4e>
 800b54a:	9800      	ldr	r0, [sp, #0]
 800b54c:	9901      	ldr	r1, [sp, #4]
 800b54e:	f000 fdd5 	bl	800c0fc <finite>
 800b552:	2800      	cmp	r0, #0
 800b554:	d100      	bne.n	800b558 <pow+0x13c>
 800b556:	e788      	b.n	800b46a <pow+0x4e>
 800b558:	0020      	movs	r0, r4
 800b55a:	0029      	movs	r1, r5
 800b55c:	f000 fdce 	bl	800c0fc <finite>
 800b560:	2800      	cmp	r0, #0
 800b562:	d100      	bne.n	800b566 <pow+0x14a>
 800b564:	e781      	b.n	800b46a <pow+0x4e>
 800b566:	f7fc ffdb 	bl	8008520 <__errno>
 800b56a:	2322      	movs	r3, #34	; 0x22
 800b56c:	2600      	movs	r6, #0
 800b56e:	2700      	movs	r7, #0
 800b570:	6003      	str	r3, [r0, #0]
 800b572:	e77a      	b.n	800b46a <pow+0x4e>
 800b574:	2600      	movs	r6, #0
 800b576:	4f04      	ldr	r7, [pc, #16]	; (800b588 <pow+0x16c>)
 800b578:	e777      	b.n	800b46a <pow+0x4e>
 800b57a:	46c0      	nop			; (mov r8, r8)
 800b57c:	200001dc 	.word	0x200001dc
 800b580:	fff00000 	.word	0xfff00000
 800b584:	7ff00000 	.word	0x7ff00000
 800b588:	3ff00000 	.word	0x3ff00000

0800b58c <__ieee754_pow>:
 800b58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b58e:	b095      	sub	sp, #84	; 0x54
 800b590:	9202      	str	r2, [sp, #8]
 800b592:	9303      	str	r3, [sp, #12]
 800b594:	9b03      	ldr	r3, [sp, #12]
 800b596:	9a03      	ldr	r2, [sp, #12]
 800b598:	9304      	str	r3, [sp, #16]
 800b59a:	9b02      	ldr	r3, [sp, #8]
 800b59c:	0055      	lsls	r5, r2, #1
 800b59e:	001a      	movs	r2, r3
 800b5a0:	086d      	lsrs	r5, r5, #1
 800b5a2:	0007      	movs	r7, r0
 800b5a4:	000e      	movs	r6, r1
 800b5a6:	432a      	orrs	r2, r5
 800b5a8:	d101      	bne.n	800b5ae <__ieee754_pow+0x22>
 800b5aa:	f000 fcb6 	bl	800bf1a <__ieee754_pow+0x98e>
 800b5ae:	4a82      	ldr	r2, [pc, #520]	; (800b7b8 <__ieee754_pow+0x22c>)
 800b5b0:	004c      	lsls	r4, r1, #1
 800b5b2:	9108      	str	r1, [sp, #32]
 800b5b4:	9000      	str	r0, [sp, #0]
 800b5b6:	0864      	lsrs	r4, r4, #1
 800b5b8:	4294      	cmp	r4, r2
 800b5ba:	dc0d      	bgt.n	800b5d8 <__ieee754_pow+0x4c>
 800b5bc:	d104      	bne.n	800b5c8 <__ieee754_pow+0x3c>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d110      	bne.n	800b5e4 <__ieee754_pow+0x58>
 800b5c2:	42a5      	cmp	r5, r4
 800b5c4:	dd03      	ble.n	800b5ce <__ieee754_pow+0x42>
 800b5c6:	e00d      	b.n	800b5e4 <__ieee754_pow+0x58>
 800b5c8:	4a7b      	ldr	r2, [pc, #492]	; (800b7b8 <__ieee754_pow+0x22c>)
 800b5ca:	4295      	cmp	r5, r2
 800b5cc:	dc04      	bgt.n	800b5d8 <__ieee754_pow+0x4c>
 800b5ce:	4a7a      	ldr	r2, [pc, #488]	; (800b7b8 <__ieee754_pow+0x22c>)
 800b5d0:	4295      	cmp	r5, r2
 800b5d2:	d10d      	bne.n	800b5f0 <__ieee754_pow+0x64>
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d00b      	beq.n	800b5f0 <__ieee754_pow+0x64>
 800b5d8:	4b78      	ldr	r3, [pc, #480]	; (800b7bc <__ieee754_pow+0x230>)
 800b5da:	18e4      	adds	r4, r4, r3
 800b5dc:	4327      	orrs	r7, r4
 800b5de:	d101      	bne.n	800b5e4 <__ieee754_pow+0x58>
 800b5e0:	f000 fc9b 	bl	800bf1a <__ieee754_pow+0x98e>
 800b5e4:	4876      	ldr	r0, [pc, #472]	; (800b7c0 <__ieee754_pow+0x234>)
 800b5e6:	f000 fd91 	bl	800c10c <nan>
 800b5ea:	9000      	str	r0, [sp, #0]
 800b5ec:	9101      	str	r1, [sp, #4]
 800b5ee:	e092      	b.n	800b716 <__ieee754_pow+0x18a>
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	9206      	str	r2, [sp, #24]
 800b5f4:	2e00      	cmp	r6, #0
 800b5f6:	da69      	bge.n	800b6cc <__ieee754_pow+0x140>
 800b5f8:	4a72      	ldr	r2, [pc, #456]	; (800b7c4 <__ieee754_pow+0x238>)
 800b5fa:	4295      	cmp	r5, r2
 800b5fc:	dc64      	bgt.n	800b6c8 <__ieee754_pow+0x13c>
 800b5fe:	4a72      	ldr	r2, [pc, #456]	; (800b7c8 <__ieee754_pow+0x23c>)
 800b600:	4295      	cmp	r5, r2
 800b602:	dd11      	ble.n	800b628 <__ieee754_pow+0x9c>
 800b604:	4971      	ldr	r1, [pc, #452]	; (800b7cc <__ieee754_pow+0x240>)
 800b606:	152a      	asrs	r2, r5, #20
 800b608:	1852      	adds	r2, r2, r1
 800b60a:	2a14      	cmp	r2, #20
 800b60c:	dd3c      	ble.n	800b688 <__ieee754_pow+0xfc>
 800b60e:	2134      	movs	r1, #52	; 0x34
 800b610:	1a8a      	subs	r2, r1, r2
 800b612:	9902      	ldr	r1, [sp, #8]
 800b614:	40d1      	lsrs	r1, r2
 800b616:	0008      	movs	r0, r1
 800b618:	4090      	lsls	r0, r2
 800b61a:	4298      	cmp	r0, r3
 800b61c:	d104      	bne.n	800b628 <__ieee754_pow+0x9c>
 800b61e:	2201      	movs	r2, #1
 800b620:	4011      	ands	r1, r2
 800b622:	1892      	adds	r2, r2, r2
 800b624:	1a52      	subs	r2, r2, r1
 800b626:	9206      	str	r2, [sp, #24]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d03c      	beq.n	800b6a6 <__ieee754_pow+0x11a>
 800b62c:	0038      	movs	r0, r7
 800b62e:	0031      	movs	r1, r6
 800b630:	f000 fd60 	bl	800c0f4 <fabs>
 800b634:	9000      	str	r0, [sp, #0]
 800b636:	9101      	str	r1, [sp, #4]
 800b638:	2f00      	cmp	r7, #0
 800b63a:	d000      	beq.n	800b63e <__ieee754_pow+0xb2>
 800b63c:	e094      	b.n	800b768 <__ieee754_pow+0x1dc>
 800b63e:	2c00      	cmp	r4, #0
 800b640:	d005      	beq.n	800b64e <__ieee754_pow+0xc2>
 800b642:	4a63      	ldr	r2, [pc, #396]	; (800b7d0 <__ieee754_pow+0x244>)
 800b644:	00b3      	lsls	r3, r6, #2
 800b646:	089b      	lsrs	r3, r3, #2
 800b648:	4293      	cmp	r3, r2
 800b64a:	d000      	beq.n	800b64e <__ieee754_pow+0xc2>
 800b64c:	e08c      	b.n	800b768 <__ieee754_pow+0x1dc>
 800b64e:	9b04      	ldr	r3, [sp, #16]
 800b650:	2b00      	cmp	r3, #0
 800b652:	da07      	bge.n	800b664 <__ieee754_pow+0xd8>
 800b654:	9a00      	ldr	r2, [sp, #0]
 800b656:	9b01      	ldr	r3, [sp, #4]
 800b658:	2000      	movs	r0, #0
 800b65a:	495d      	ldr	r1, [pc, #372]	; (800b7d0 <__ieee754_pow+0x244>)
 800b65c:	f7f6 f804 	bl	8001668 <__aeabi_ddiv>
 800b660:	9000      	str	r0, [sp, #0]
 800b662:	9101      	str	r1, [sp, #4]
 800b664:	9b08      	ldr	r3, [sp, #32]
 800b666:	2b00      	cmp	r3, #0
 800b668:	da55      	bge.n	800b716 <__ieee754_pow+0x18a>
 800b66a:	4b54      	ldr	r3, [pc, #336]	; (800b7bc <__ieee754_pow+0x230>)
 800b66c:	18e4      	adds	r4, r4, r3
 800b66e:	9b06      	ldr	r3, [sp, #24]
 800b670:	431c      	orrs	r4, r3
 800b672:	d000      	beq.n	800b676 <__ieee754_pow+0xea>
 800b674:	e06c      	b.n	800b750 <__ieee754_pow+0x1c4>
 800b676:	9a00      	ldr	r2, [sp, #0]
 800b678:	9b01      	ldr	r3, [sp, #4]
 800b67a:	0010      	movs	r0, r2
 800b67c:	0019      	movs	r1, r3
 800b67e:	f7f6 fe65 	bl	800234c <__aeabi_dsub>
 800b682:	0002      	movs	r2, r0
 800b684:	000b      	movs	r3, r1
 800b686:	e01c      	b.n	800b6c2 <__ieee754_pow+0x136>
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1cf      	bne.n	800b62c <__ieee754_pow+0xa0>
 800b68c:	3314      	adds	r3, #20
 800b68e:	1a9a      	subs	r2, r3, r2
 800b690:	002b      	movs	r3, r5
 800b692:	4113      	asrs	r3, r2
 800b694:	0019      	movs	r1, r3
 800b696:	4091      	lsls	r1, r2
 800b698:	42a9      	cmp	r1, r5
 800b69a:	d104      	bne.n	800b6a6 <__ieee754_pow+0x11a>
 800b69c:	2201      	movs	r2, #1
 800b69e:	4013      	ands	r3, r2
 800b6a0:	1892      	adds	r2, r2, r2
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	9306      	str	r3, [sp, #24]
 800b6a6:	4b4a      	ldr	r3, [pc, #296]	; (800b7d0 <__ieee754_pow+0x244>)
 800b6a8:	429d      	cmp	r5, r3
 800b6aa:	d138      	bne.n	800b71e <__ieee754_pow+0x192>
 800b6ac:	0038      	movs	r0, r7
 800b6ae:	0031      	movs	r1, r6
 800b6b0:	9b04      	ldr	r3, [sp, #16]
 800b6b2:	9000      	str	r0, [sp, #0]
 800b6b4:	9101      	str	r1, [sp, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	da2d      	bge.n	800b716 <__ieee754_pow+0x18a>
 800b6ba:	003a      	movs	r2, r7
 800b6bc:	0033      	movs	r3, r6
 800b6be:	2000      	movs	r0, #0
 800b6c0:	4943      	ldr	r1, [pc, #268]	; (800b7d0 <__ieee754_pow+0x244>)
 800b6c2:	f7f5 ffd1 	bl	8001668 <__aeabi_ddiv>
 800b6c6:	e790      	b.n	800b5ea <__ieee754_pow+0x5e>
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	9206      	str	r2, [sp, #24]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d1ad      	bne.n	800b62c <__ieee754_pow+0xa0>
 800b6d0:	4b39      	ldr	r3, [pc, #228]	; (800b7b8 <__ieee754_pow+0x22c>)
 800b6d2:	429d      	cmp	r5, r3
 800b6d4:	d1e7      	bne.n	800b6a6 <__ieee754_pow+0x11a>
 800b6d6:	4b39      	ldr	r3, [pc, #228]	; (800b7bc <__ieee754_pow+0x230>)
 800b6d8:	18e3      	adds	r3, r4, r3
 800b6da:	431f      	orrs	r7, r3
 800b6dc:	d101      	bne.n	800b6e2 <__ieee754_pow+0x156>
 800b6de:	f000 fc1c 	bl	800bf1a <__ieee754_pow+0x98e>
 800b6e2:	4b39      	ldr	r3, [pc, #228]	; (800b7c8 <__ieee754_pow+0x23c>)
 800b6e4:	429c      	cmp	r4, r3
 800b6e6:	dd0b      	ble.n	800b700 <__ieee754_pow+0x174>
 800b6e8:	9b02      	ldr	r3, [sp, #8]
 800b6ea:	9c03      	ldr	r4, [sp, #12]
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	9401      	str	r4, [sp, #4]
 800b6f0:	9b04      	ldr	r3, [sp, #16]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	da0f      	bge.n	800b716 <__ieee754_pow+0x18a>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	2400      	movs	r4, #0
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	9401      	str	r4, [sp, #4]
 800b6fe:	e00a      	b.n	800b716 <__ieee754_pow+0x18a>
 800b700:	9b04      	ldr	r3, [sp, #16]
 800b702:	2b00      	cmp	r3, #0
 800b704:	daf7      	bge.n	800b6f6 <__ieee754_pow+0x16a>
 800b706:	2280      	movs	r2, #128	; 0x80
 800b708:	0612      	lsls	r2, r2, #24
 800b70a:	4694      	mov	ip, r2
 800b70c:	9b02      	ldr	r3, [sp, #8]
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	9b03      	ldr	r3, [sp, #12]
 800b712:	4463      	add	r3, ip
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	9800      	ldr	r0, [sp, #0]
 800b718:	9901      	ldr	r1, [sp, #4]
 800b71a:	b015      	add	sp, #84	; 0x54
 800b71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b71e:	2380      	movs	r3, #128	; 0x80
 800b720:	9a04      	ldr	r2, [sp, #16]
 800b722:	05db      	lsls	r3, r3, #23
 800b724:	429a      	cmp	r2, r3
 800b726:	d106      	bne.n	800b736 <__ieee754_pow+0x1aa>
 800b728:	003a      	movs	r2, r7
 800b72a:	0033      	movs	r3, r6
 800b72c:	0038      	movs	r0, r7
 800b72e:	0031      	movs	r1, r6
 800b730:	f7f6 fba0 	bl	8001e74 <__aeabi_dmul>
 800b734:	e759      	b.n	800b5ea <__ieee754_pow+0x5e>
 800b736:	4b27      	ldr	r3, [pc, #156]	; (800b7d4 <__ieee754_pow+0x248>)
 800b738:	9a04      	ldr	r2, [sp, #16]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d000      	beq.n	800b740 <__ieee754_pow+0x1b4>
 800b73e:	e775      	b.n	800b62c <__ieee754_pow+0xa0>
 800b740:	2e00      	cmp	r6, #0
 800b742:	da00      	bge.n	800b746 <__ieee754_pow+0x1ba>
 800b744:	e772      	b.n	800b62c <__ieee754_pow+0xa0>
 800b746:	0038      	movs	r0, r7
 800b748:	0031      	movs	r1, r6
 800b74a:	f000 fc1f 	bl	800bf8c <__ieee754_sqrt>
 800b74e:	e74c      	b.n	800b5ea <__ieee754_pow+0x5e>
 800b750:	9b06      	ldr	r3, [sp, #24]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d1df      	bne.n	800b716 <__ieee754_pow+0x18a>
 800b756:	9800      	ldr	r0, [sp, #0]
 800b758:	2180      	movs	r1, #128	; 0x80
 800b75a:	0002      	movs	r2, r0
 800b75c:	9801      	ldr	r0, [sp, #4]
 800b75e:	0609      	lsls	r1, r1, #24
 800b760:	1843      	adds	r3, r0, r1
 800b762:	9200      	str	r2, [sp, #0]
 800b764:	9301      	str	r3, [sp, #4]
 800b766:	e7d6      	b.n	800b716 <__ieee754_pow+0x18a>
 800b768:	0ff3      	lsrs	r3, r6, #31
 800b76a:	3b01      	subs	r3, #1
 800b76c:	9310      	str	r3, [sp, #64]	; 0x40
 800b76e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b770:	9b06      	ldr	r3, [sp, #24]
 800b772:	4313      	orrs	r3, r2
 800b774:	d104      	bne.n	800b780 <__ieee754_pow+0x1f4>
 800b776:	003a      	movs	r2, r7
 800b778:	0033      	movs	r3, r6
 800b77a:	0038      	movs	r0, r7
 800b77c:	0031      	movs	r1, r6
 800b77e:	e77e      	b.n	800b67e <__ieee754_pow+0xf2>
 800b780:	4b15      	ldr	r3, [pc, #84]	; (800b7d8 <__ieee754_pow+0x24c>)
 800b782:	429d      	cmp	r5, r3
 800b784:	dc00      	bgt.n	800b788 <__ieee754_pow+0x1fc>
 800b786:	e0f5      	b.n	800b974 <__ieee754_pow+0x3e8>
 800b788:	4b14      	ldr	r3, [pc, #80]	; (800b7dc <__ieee754_pow+0x250>)
 800b78a:	429d      	cmp	r5, r3
 800b78c:	dd0a      	ble.n	800b7a4 <__ieee754_pow+0x218>
 800b78e:	4b0e      	ldr	r3, [pc, #56]	; (800b7c8 <__ieee754_pow+0x23c>)
 800b790:	429c      	cmp	r4, r3
 800b792:	dc0d      	bgt.n	800b7b0 <__ieee754_pow+0x224>
 800b794:	9b04      	ldr	r3, [sp, #16]
 800b796:	2b00      	cmp	r3, #0
 800b798:	daad      	bge.n	800b6f6 <__ieee754_pow+0x16a>
 800b79a:	4a11      	ldr	r2, [pc, #68]	; (800b7e0 <__ieee754_pow+0x254>)
 800b79c:	4b11      	ldr	r3, [pc, #68]	; (800b7e4 <__ieee754_pow+0x258>)
 800b79e:	0010      	movs	r0, r2
 800b7a0:	0019      	movs	r1, r3
 800b7a2:	e7c5      	b.n	800b730 <__ieee754_pow+0x1a4>
 800b7a4:	4b10      	ldr	r3, [pc, #64]	; (800b7e8 <__ieee754_pow+0x25c>)
 800b7a6:	429c      	cmp	r4, r3
 800b7a8:	ddf4      	ble.n	800b794 <__ieee754_pow+0x208>
 800b7aa:	4b09      	ldr	r3, [pc, #36]	; (800b7d0 <__ieee754_pow+0x244>)
 800b7ac:	429c      	cmp	r4, r3
 800b7ae:	dd1d      	ble.n	800b7ec <__ieee754_pow+0x260>
 800b7b0:	9b04      	ldr	r3, [sp, #16]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	dcf1      	bgt.n	800b79a <__ieee754_pow+0x20e>
 800b7b6:	e79e      	b.n	800b6f6 <__ieee754_pow+0x16a>
 800b7b8:	7ff00000 	.word	0x7ff00000
 800b7bc:	c0100000 	.word	0xc0100000
 800b7c0:	0800c818 	.word	0x0800c818
 800b7c4:	433fffff 	.word	0x433fffff
 800b7c8:	3fefffff 	.word	0x3fefffff
 800b7cc:	fffffc01 	.word	0xfffffc01
 800b7d0:	3ff00000 	.word	0x3ff00000
 800b7d4:	3fe00000 	.word	0x3fe00000
 800b7d8:	41e00000 	.word	0x41e00000
 800b7dc:	43f00000 	.word	0x43f00000
 800b7e0:	8800759c 	.word	0x8800759c
 800b7e4:	7e37e43c 	.word	0x7e37e43c
 800b7e8:	3feffffe 	.word	0x3feffffe
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	9800      	ldr	r0, [sp, #0]
 800b7f0:	9901      	ldr	r1, [sp, #4]
 800b7f2:	4b52      	ldr	r3, [pc, #328]	; (800b93c <__ieee754_pow+0x3b0>)
 800b7f4:	f7f6 fdaa 	bl	800234c <__aeabi_dsub>
 800b7f8:	22c0      	movs	r2, #192	; 0xc0
 800b7fa:	4b51      	ldr	r3, [pc, #324]	; (800b940 <__ieee754_pow+0x3b4>)
 800b7fc:	05d2      	lsls	r2, r2, #23
 800b7fe:	0004      	movs	r4, r0
 800b800:	000d      	movs	r5, r1
 800b802:	f7f6 fb37 	bl	8001e74 <__aeabi_dmul>
 800b806:	4a4f      	ldr	r2, [pc, #316]	; (800b944 <__ieee754_pow+0x3b8>)
 800b808:	9000      	str	r0, [sp, #0]
 800b80a:	9101      	str	r1, [sp, #4]
 800b80c:	4b4e      	ldr	r3, [pc, #312]	; (800b948 <__ieee754_pow+0x3bc>)
 800b80e:	0020      	movs	r0, r4
 800b810:	0029      	movs	r1, r5
 800b812:	f7f6 fb2f 	bl	8001e74 <__aeabi_dmul>
 800b816:	2200      	movs	r2, #0
 800b818:	9004      	str	r0, [sp, #16]
 800b81a:	9105      	str	r1, [sp, #20]
 800b81c:	4b4b      	ldr	r3, [pc, #300]	; (800b94c <__ieee754_pow+0x3c0>)
 800b81e:	0020      	movs	r0, r4
 800b820:	0029      	movs	r1, r5
 800b822:	f7f6 fb27 	bl	8001e74 <__aeabi_dmul>
 800b826:	0002      	movs	r2, r0
 800b828:	000b      	movs	r3, r1
 800b82a:	4849      	ldr	r0, [pc, #292]	; (800b950 <__ieee754_pow+0x3c4>)
 800b82c:	4949      	ldr	r1, [pc, #292]	; (800b954 <__ieee754_pow+0x3c8>)
 800b82e:	f7f6 fd8d 	bl	800234c <__aeabi_dsub>
 800b832:	0022      	movs	r2, r4
 800b834:	002b      	movs	r3, r5
 800b836:	f7f6 fb1d 	bl	8001e74 <__aeabi_dmul>
 800b83a:	0002      	movs	r2, r0
 800b83c:	000b      	movs	r3, r1
 800b83e:	2000      	movs	r0, #0
 800b840:	4945      	ldr	r1, [pc, #276]	; (800b958 <__ieee754_pow+0x3cc>)
 800b842:	f7f6 fd83 	bl	800234c <__aeabi_dsub>
 800b846:	0022      	movs	r2, r4
 800b848:	0006      	movs	r6, r0
 800b84a:	000f      	movs	r7, r1
 800b84c:	002b      	movs	r3, r5
 800b84e:	0020      	movs	r0, r4
 800b850:	0029      	movs	r1, r5
 800b852:	f7f6 fb0f 	bl	8001e74 <__aeabi_dmul>
 800b856:	0002      	movs	r2, r0
 800b858:	000b      	movs	r3, r1
 800b85a:	0030      	movs	r0, r6
 800b85c:	0039      	movs	r1, r7
 800b85e:	f7f6 fb09 	bl	8001e74 <__aeabi_dmul>
 800b862:	4a3e      	ldr	r2, [pc, #248]	; (800b95c <__ieee754_pow+0x3d0>)
 800b864:	4b36      	ldr	r3, [pc, #216]	; (800b940 <__ieee754_pow+0x3b4>)
 800b866:	f7f6 fb05 	bl	8001e74 <__aeabi_dmul>
 800b86a:	0002      	movs	r2, r0
 800b86c:	000b      	movs	r3, r1
 800b86e:	9804      	ldr	r0, [sp, #16]
 800b870:	9905      	ldr	r1, [sp, #20]
 800b872:	f7f6 fd6b 	bl	800234c <__aeabi_dsub>
 800b876:	0002      	movs	r2, r0
 800b878:	000b      	movs	r3, r1
 800b87a:	0004      	movs	r4, r0
 800b87c:	000d      	movs	r5, r1
 800b87e:	9800      	ldr	r0, [sp, #0]
 800b880:	9901      	ldr	r1, [sp, #4]
 800b882:	f7f5 fb87 	bl	8000f94 <__aeabi_dadd>
 800b886:	9a00      	ldr	r2, [sp, #0]
 800b888:	9b01      	ldr	r3, [sp, #4]
 800b88a:	2000      	movs	r0, #0
 800b88c:	000f      	movs	r7, r1
 800b88e:	0006      	movs	r6, r0
 800b890:	f7f6 fd5c 	bl	800234c <__aeabi_dsub>
 800b894:	0002      	movs	r2, r0
 800b896:	000b      	movs	r3, r1
 800b898:	0020      	movs	r0, r4
 800b89a:	0029      	movs	r1, r5
 800b89c:	f7f6 fd56 	bl	800234c <__aeabi_dsub>
 800b8a0:	9b06      	ldr	r3, [sp, #24]
 800b8a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	9004      	str	r0, [sp, #16]
 800b8a8:	9105      	str	r1, [sp, #20]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	d000      	beq.n	800b8b0 <__ieee754_pow+0x324>
 800b8ae:	e1e0      	b.n	800bc72 <__ieee754_pow+0x6e6>
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	4c2b      	ldr	r4, [pc, #172]	; (800b960 <__ieee754_pow+0x3d4>)
 800b8b4:	9300      	str	r3, [sp, #0]
 800b8b6:	9401      	str	r4, [sp, #4]
 800b8b8:	9c02      	ldr	r4, [sp, #8]
 800b8ba:	9d03      	ldr	r5, [sp, #12]
 800b8bc:	9802      	ldr	r0, [sp, #8]
 800b8be:	9903      	ldr	r1, [sp, #12]
 800b8c0:	2400      	movs	r4, #0
 800b8c2:	002b      	movs	r3, r5
 800b8c4:	0022      	movs	r2, r4
 800b8c6:	f7f6 fd41 	bl	800234c <__aeabi_dsub>
 800b8ca:	0032      	movs	r2, r6
 800b8cc:	003b      	movs	r3, r7
 800b8ce:	f7f6 fad1 	bl	8001e74 <__aeabi_dmul>
 800b8d2:	9a02      	ldr	r2, [sp, #8]
 800b8d4:	9b03      	ldr	r3, [sp, #12]
 800b8d6:	9006      	str	r0, [sp, #24]
 800b8d8:	9107      	str	r1, [sp, #28]
 800b8da:	9804      	ldr	r0, [sp, #16]
 800b8dc:	9905      	ldr	r1, [sp, #20]
 800b8de:	f7f6 fac9 	bl	8001e74 <__aeabi_dmul>
 800b8e2:	0002      	movs	r2, r0
 800b8e4:	000b      	movs	r3, r1
 800b8e6:	9806      	ldr	r0, [sp, #24]
 800b8e8:	9907      	ldr	r1, [sp, #28]
 800b8ea:	f7f5 fb53 	bl	8000f94 <__aeabi_dadd>
 800b8ee:	0022      	movs	r2, r4
 800b8f0:	002b      	movs	r3, r5
 800b8f2:	9004      	str	r0, [sp, #16]
 800b8f4:	9105      	str	r1, [sp, #20]
 800b8f6:	0030      	movs	r0, r6
 800b8f8:	0039      	movs	r1, r7
 800b8fa:	f7f6 fabb 	bl	8001e74 <__aeabi_dmul>
 800b8fe:	0006      	movs	r6, r0
 800b900:	000f      	movs	r7, r1
 800b902:	000b      	movs	r3, r1
 800b904:	0002      	movs	r2, r0
 800b906:	9804      	ldr	r0, [sp, #16]
 800b908:	9905      	ldr	r1, [sp, #20]
 800b90a:	9606      	str	r6, [sp, #24]
 800b90c:	9707      	str	r7, [sp, #28]
 800b90e:	f7f5 fb41 	bl	8000f94 <__aeabi_dadd>
 800b912:	4b14      	ldr	r3, [pc, #80]	; (800b964 <__ieee754_pow+0x3d8>)
 800b914:	0005      	movs	r5, r0
 800b916:	000c      	movs	r4, r1
 800b918:	9108      	str	r1, [sp, #32]
 800b91a:	4299      	cmp	r1, r3
 800b91c:	dc00      	bgt.n	800b920 <__ieee754_pow+0x394>
 800b91e:	e2da      	b.n	800bed6 <__ieee754_pow+0x94a>
 800b920:	4b11      	ldr	r3, [pc, #68]	; (800b968 <__ieee754_pow+0x3dc>)
 800b922:	18cb      	adds	r3, r1, r3
 800b924:	4303      	orrs	r3, r0
 800b926:	d100      	bne.n	800b92a <__ieee754_pow+0x39e>
 800b928:	e1dc      	b.n	800bce4 <__ieee754_pow+0x758>
 800b92a:	9800      	ldr	r0, [sp, #0]
 800b92c:	9901      	ldr	r1, [sp, #4]
 800b92e:	4a0f      	ldr	r2, [pc, #60]	; (800b96c <__ieee754_pow+0x3e0>)
 800b930:	4b0f      	ldr	r3, [pc, #60]	; (800b970 <__ieee754_pow+0x3e4>)
 800b932:	f7f6 fa9f 	bl	8001e74 <__aeabi_dmul>
 800b936:	4a0d      	ldr	r2, [pc, #52]	; (800b96c <__ieee754_pow+0x3e0>)
 800b938:	4b0d      	ldr	r3, [pc, #52]	; (800b970 <__ieee754_pow+0x3e4>)
 800b93a:	e6f9      	b.n	800b730 <__ieee754_pow+0x1a4>
 800b93c:	3ff00000 	.word	0x3ff00000
 800b940:	3ff71547 	.word	0x3ff71547
 800b944:	f85ddf44 	.word	0xf85ddf44
 800b948:	3e54ae0b 	.word	0x3e54ae0b
 800b94c:	3fd00000 	.word	0x3fd00000
 800b950:	55555555 	.word	0x55555555
 800b954:	3fd55555 	.word	0x3fd55555
 800b958:	3fe00000 	.word	0x3fe00000
 800b95c:	652b82fe 	.word	0x652b82fe
 800b960:	bff00000 	.word	0xbff00000
 800b964:	408fffff 	.word	0x408fffff
 800b968:	bf700000 	.word	0xbf700000
 800b96c:	8800759c 	.word	0x8800759c
 800b970:	7e37e43c 	.word	0x7e37e43c
 800b974:	4bc0      	ldr	r3, [pc, #768]	; (800bc78 <__ieee754_pow+0x6ec>)
 800b976:	2200      	movs	r2, #0
 800b978:	4233      	tst	r3, r6
 800b97a:	d10a      	bne.n	800b992 <__ieee754_pow+0x406>
 800b97c:	9800      	ldr	r0, [sp, #0]
 800b97e:	9901      	ldr	r1, [sp, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	4bbe      	ldr	r3, [pc, #760]	; (800bc7c <__ieee754_pow+0x6f0>)
 800b984:	f7f6 fa76 	bl	8001e74 <__aeabi_dmul>
 800b988:	2235      	movs	r2, #53	; 0x35
 800b98a:	9000      	str	r0, [sp, #0]
 800b98c:	9101      	str	r1, [sp, #4]
 800b98e:	9c01      	ldr	r4, [sp, #4]
 800b990:	4252      	negs	r2, r2
 800b992:	49bb      	ldr	r1, [pc, #748]	; (800bc80 <__ieee754_pow+0x6f4>)
 800b994:	1523      	asrs	r3, r4, #20
 800b996:	185b      	adds	r3, r3, r1
 800b998:	189b      	adds	r3, r3, r2
 800b99a:	0324      	lsls	r4, r4, #12
 800b99c:	4db9      	ldr	r5, [pc, #740]	; (800bc84 <__ieee754_pow+0x6f8>)
 800b99e:	930d      	str	r3, [sp, #52]	; 0x34
 800b9a0:	4bb9      	ldr	r3, [pc, #740]	; (800bc88 <__ieee754_pow+0x6fc>)
 800b9a2:	0b22      	lsrs	r2, r4, #12
 800b9a4:	4315      	orrs	r5, r2
 800b9a6:	2400      	movs	r4, #0
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	dd09      	ble.n	800b9c0 <__ieee754_pow+0x434>
 800b9ac:	4bb7      	ldr	r3, [pc, #732]	; (800bc8c <__ieee754_pow+0x700>)
 800b9ae:	3401      	adds	r4, #1
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	dd05      	ble.n	800b9c0 <__ieee754_pow+0x434>
 800b9b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9b6:	191b      	adds	r3, r3, r4
 800b9b8:	2400      	movs	r4, #0
 800b9ba:	930d      	str	r3, [sp, #52]	; 0x34
 800b9bc:	4bb4      	ldr	r3, [pc, #720]	; (800bc90 <__ieee754_pow+0x704>)
 800b9be:	18ed      	adds	r5, r5, r3
 800b9c0:	9800      	ldr	r0, [sp, #0]
 800b9c2:	9901      	ldr	r1, [sp, #4]
 800b9c4:	0029      	movs	r1, r5
 800b9c6:	00e3      	lsls	r3, r4, #3
 800b9c8:	9311      	str	r3, [sp, #68]	; 0x44
 800b9ca:	4bb2      	ldr	r3, [pc, #712]	; (800bc94 <__ieee754_pow+0x708>)
 800b9cc:	00e2      	lsls	r2, r4, #3
 800b9ce:	189b      	adds	r3, r3, r2
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	900e      	str	r0, [sp, #56]	; 0x38
 800b9d6:	910f      	str	r1, [sp, #60]	; 0x3c
 800b9d8:	920a      	str	r2, [sp, #40]	; 0x28
 800b9da:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9dc:	f7f6 fcb6 	bl	800234c <__aeabi_dsub>
 800b9e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9e4:	0006      	movs	r6, r0
 800b9e6:	000f      	movs	r7, r1
 800b9e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b9ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b9ec:	f7f5 fad2 	bl	8000f94 <__aeabi_dadd>
 800b9f0:	0002      	movs	r2, r0
 800b9f2:	000b      	movs	r3, r1
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	49a3      	ldr	r1, [pc, #652]	; (800bc84 <__ieee754_pow+0x6f8>)
 800b9f8:	f7f5 fe36 	bl	8001668 <__aeabi_ddiv>
 800b9fc:	0002      	movs	r2, r0
 800b9fe:	000b      	movs	r3, r1
 800ba00:	9012      	str	r0, [sp, #72]	; 0x48
 800ba02:	9113      	str	r1, [sp, #76]	; 0x4c
 800ba04:	0030      	movs	r0, r6
 800ba06:	0039      	movs	r1, r7
 800ba08:	f7f6 fa34 	bl	8001e74 <__aeabi_dmul>
 800ba0c:	9008      	str	r0, [sp, #32]
 800ba0e:	9109      	str	r1, [sp, #36]	; 0x24
 800ba10:	9a08      	ldr	r2, [sp, #32]
 800ba12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba14:	2180      	movs	r1, #128	; 0x80
 800ba16:	9204      	str	r2, [sp, #16]
 800ba18:	9305      	str	r3, [sp, #20]
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	0589      	lsls	r1, r1, #22
 800ba1e:	106d      	asrs	r5, r5, #1
 800ba20:	430d      	orrs	r5, r1
 800ba22:	2180      	movs	r1, #128	; 0x80
 800ba24:	9304      	str	r3, [sp, #16]
 800ba26:	9a04      	ldr	r2, [sp, #16]
 800ba28:	9b05      	ldr	r3, [sp, #20]
 800ba2a:	9200      	str	r2, [sp, #0]
 800ba2c:	9301      	str	r3, [sp, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	0309      	lsls	r1, r1, #12
 800ba32:	186d      	adds	r5, r5, r1
 800ba34:	04a1      	lsls	r1, r4, #18
 800ba36:	186b      	adds	r3, r5, r1
 800ba38:	9800      	ldr	r0, [sp, #0]
 800ba3a:	9901      	ldr	r1, [sp, #4]
 800ba3c:	0014      	movs	r4, r2
 800ba3e:	001d      	movs	r5, r3
 800ba40:	f7f6 fa18 	bl	8001e74 <__aeabi_dmul>
 800ba44:	0002      	movs	r2, r0
 800ba46:	000b      	movs	r3, r1
 800ba48:	0030      	movs	r0, r6
 800ba4a:	0039      	movs	r1, r7
 800ba4c:	f7f6 fc7e 	bl	800234c <__aeabi_dsub>
 800ba50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba54:	0006      	movs	r6, r0
 800ba56:	000f      	movs	r7, r1
 800ba58:	0020      	movs	r0, r4
 800ba5a:	0029      	movs	r1, r5
 800ba5c:	f7f6 fc76 	bl	800234c <__aeabi_dsub>
 800ba60:	0002      	movs	r2, r0
 800ba62:	000b      	movs	r3, r1
 800ba64:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ba66:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ba68:	f7f6 fc70 	bl	800234c <__aeabi_dsub>
 800ba6c:	9a00      	ldr	r2, [sp, #0]
 800ba6e:	9b01      	ldr	r3, [sp, #4]
 800ba70:	f7f6 fa00 	bl	8001e74 <__aeabi_dmul>
 800ba74:	0002      	movs	r2, r0
 800ba76:	000b      	movs	r3, r1
 800ba78:	0030      	movs	r0, r6
 800ba7a:	0039      	movs	r1, r7
 800ba7c:	f7f6 fc66 	bl	800234c <__aeabi_dsub>
 800ba80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ba82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba84:	f7f6 f9f6 	bl	8001e74 <__aeabi_dmul>
 800ba88:	9a08      	ldr	r2, [sp, #32]
 800ba8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba8c:	900a      	str	r0, [sp, #40]	; 0x28
 800ba8e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ba90:	0010      	movs	r0, r2
 800ba92:	0019      	movs	r1, r3
 800ba94:	f7f6 f9ee 	bl	8001e74 <__aeabi_dmul>
 800ba98:	0006      	movs	r6, r0
 800ba9a:	000f      	movs	r7, r1
 800ba9c:	4a7e      	ldr	r2, [pc, #504]	; (800bc98 <__ieee754_pow+0x70c>)
 800ba9e:	4b7f      	ldr	r3, [pc, #508]	; (800bc9c <__ieee754_pow+0x710>)
 800baa0:	f7f6 f9e8 	bl	8001e74 <__aeabi_dmul>
 800baa4:	4a7e      	ldr	r2, [pc, #504]	; (800bca0 <__ieee754_pow+0x714>)
 800baa6:	4b7f      	ldr	r3, [pc, #508]	; (800bca4 <__ieee754_pow+0x718>)
 800baa8:	f7f5 fa74 	bl	8000f94 <__aeabi_dadd>
 800baac:	0032      	movs	r2, r6
 800baae:	003b      	movs	r3, r7
 800bab0:	f7f6 f9e0 	bl	8001e74 <__aeabi_dmul>
 800bab4:	4a7c      	ldr	r2, [pc, #496]	; (800bca8 <__ieee754_pow+0x71c>)
 800bab6:	4b7d      	ldr	r3, [pc, #500]	; (800bcac <__ieee754_pow+0x720>)
 800bab8:	f7f5 fa6c 	bl	8000f94 <__aeabi_dadd>
 800babc:	0032      	movs	r2, r6
 800babe:	003b      	movs	r3, r7
 800bac0:	f7f6 f9d8 	bl	8001e74 <__aeabi_dmul>
 800bac4:	4a7a      	ldr	r2, [pc, #488]	; (800bcb0 <__ieee754_pow+0x724>)
 800bac6:	4b7b      	ldr	r3, [pc, #492]	; (800bcb4 <__ieee754_pow+0x728>)
 800bac8:	f7f5 fa64 	bl	8000f94 <__aeabi_dadd>
 800bacc:	0032      	movs	r2, r6
 800bace:	003b      	movs	r3, r7
 800bad0:	f7f6 f9d0 	bl	8001e74 <__aeabi_dmul>
 800bad4:	4a78      	ldr	r2, [pc, #480]	; (800bcb8 <__ieee754_pow+0x72c>)
 800bad6:	4b79      	ldr	r3, [pc, #484]	; (800bcbc <__ieee754_pow+0x730>)
 800bad8:	f7f5 fa5c 	bl	8000f94 <__aeabi_dadd>
 800badc:	0032      	movs	r2, r6
 800bade:	003b      	movs	r3, r7
 800bae0:	f7f6 f9c8 	bl	8001e74 <__aeabi_dmul>
 800bae4:	4a76      	ldr	r2, [pc, #472]	; (800bcc0 <__ieee754_pow+0x734>)
 800bae6:	4b77      	ldr	r3, [pc, #476]	; (800bcc4 <__ieee754_pow+0x738>)
 800bae8:	f7f5 fa54 	bl	8000f94 <__aeabi_dadd>
 800baec:	0032      	movs	r2, r6
 800baee:	0004      	movs	r4, r0
 800baf0:	000d      	movs	r5, r1
 800baf2:	003b      	movs	r3, r7
 800baf4:	0030      	movs	r0, r6
 800baf6:	0039      	movs	r1, r7
 800baf8:	f7f6 f9bc 	bl	8001e74 <__aeabi_dmul>
 800bafc:	0002      	movs	r2, r0
 800bafe:	000b      	movs	r3, r1
 800bb00:	0020      	movs	r0, r4
 800bb02:	0029      	movs	r1, r5
 800bb04:	f7f6 f9b6 	bl	8001e74 <__aeabi_dmul>
 800bb08:	9a00      	ldr	r2, [sp, #0]
 800bb0a:	9b01      	ldr	r3, [sp, #4]
 800bb0c:	0004      	movs	r4, r0
 800bb0e:	000d      	movs	r5, r1
 800bb10:	9808      	ldr	r0, [sp, #32]
 800bb12:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb14:	f7f5 fa3e 	bl	8000f94 <__aeabi_dadd>
 800bb18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb1c:	f7f6 f9aa 	bl	8001e74 <__aeabi_dmul>
 800bb20:	0022      	movs	r2, r4
 800bb22:	002b      	movs	r3, r5
 800bb24:	f7f5 fa36 	bl	8000f94 <__aeabi_dadd>
 800bb28:	9a00      	ldr	r2, [sp, #0]
 800bb2a:	9b01      	ldr	r3, [sp, #4]
 800bb2c:	900e      	str	r0, [sp, #56]	; 0x38
 800bb2e:	910f      	str	r1, [sp, #60]	; 0x3c
 800bb30:	0010      	movs	r0, r2
 800bb32:	0019      	movs	r1, r3
 800bb34:	f7f6 f99e 	bl	8001e74 <__aeabi_dmul>
 800bb38:	2200      	movs	r2, #0
 800bb3a:	4b63      	ldr	r3, [pc, #396]	; (800bcc8 <__ieee754_pow+0x73c>)
 800bb3c:	0004      	movs	r4, r0
 800bb3e:	000d      	movs	r5, r1
 800bb40:	f7f5 fa28 	bl	8000f94 <__aeabi_dadd>
 800bb44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb48:	f7f5 fa24 	bl	8000f94 <__aeabi_dadd>
 800bb4c:	9e04      	ldr	r6, [sp, #16]
 800bb4e:	000f      	movs	r7, r1
 800bb50:	0032      	movs	r2, r6
 800bb52:	000b      	movs	r3, r1
 800bb54:	9800      	ldr	r0, [sp, #0]
 800bb56:	9901      	ldr	r1, [sp, #4]
 800bb58:	f7f6 f98c 	bl	8001e74 <__aeabi_dmul>
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	9000      	str	r0, [sp, #0]
 800bb60:	9101      	str	r1, [sp, #4]
 800bb62:	4b59      	ldr	r3, [pc, #356]	; (800bcc8 <__ieee754_pow+0x73c>)
 800bb64:	0030      	movs	r0, r6
 800bb66:	0039      	movs	r1, r7
 800bb68:	f7f6 fbf0 	bl	800234c <__aeabi_dsub>
 800bb6c:	0022      	movs	r2, r4
 800bb6e:	002b      	movs	r3, r5
 800bb70:	f7f6 fbec 	bl	800234c <__aeabi_dsub>
 800bb74:	0002      	movs	r2, r0
 800bb76:	000b      	movs	r3, r1
 800bb78:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bb7a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bb7c:	f7f6 fbe6 	bl	800234c <__aeabi_dsub>
 800bb80:	9a08      	ldr	r2, [sp, #32]
 800bb82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb84:	f7f6 f976 	bl	8001e74 <__aeabi_dmul>
 800bb88:	0032      	movs	r2, r6
 800bb8a:	0004      	movs	r4, r0
 800bb8c:	000d      	movs	r5, r1
 800bb8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bb90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb92:	003b      	movs	r3, r7
 800bb94:	f7f6 f96e 	bl	8001e74 <__aeabi_dmul>
 800bb98:	0002      	movs	r2, r0
 800bb9a:	000b      	movs	r3, r1
 800bb9c:	0020      	movs	r0, r4
 800bb9e:	0029      	movs	r1, r5
 800bba0:	f7f5 f9f8 	bl	8000f94 <__aeabi_dadd>
 800bba4:	0004      	movs	r4, r0
 800bba6:	000d      	movs	r5, r1
 800bba8:	0002      	movs	r2, r0
 800bbaa:	000b      	movs	r3, r1
 800bbac:	9800      	ldr	r0, [sp, #0]
 800bbae:	9901      	ldr	r1, [sp, #4]
 800bbb0:	f7f5 f9f0 	bl	8000f94 <__aeabi_dadd>
 800bbb4:	22e0      	movs	r2, #224	; 0xe0
 800bbb6:	9e04      	ldr	r6, [sp, #16]
 800bbb8:	4b44      	ldr	r3, [pc, #272]	; (800bccc <__ieee754_pow+0x740>)
 800bbba:	0030      	movs	r0, r6
 800bbbc:	0612      	lsls	r2, r2, #24
 800bbbe:	000f      	movs	r7, r1
 800bbc0:	f7f6 f958 	bl	8001e74 <__aeabi_dmul>
 800bbc4:	9008      	str	r0, [sp, #32]
 800bbc6:	9109      	str	r1, [sp, #36]	; 0x24
 800bbc8:	9a00      	ldr	r2, [sp, #0]
 800bbca:	9b01      	ldr	r3, [sp, #4]
 800bbcc:	0030      	movs	r0, r6
 800bbce:	0039      	movs	r1, r7
 800bbd0:	f7f6 fbbc 	bl	800234c <__aeabi_dsub>
 800bbd4:	0002      	movs	r2, r0
 800bbd6:	000b      	movs	r3, r1
 800bbd8:	0020      	movs	r0, r4
 800bbda:	0029      	movs	r1, r5
 800bbdc:	f7f6 fbb6 	bl	800234c <__aeabi_dsub>
 800bbe0:	4a3b      	ldr	r2, [pc, #236]	; (800bcd0 <__ieee754_pow+0x744>)
 800bbe2:	4b3a      	ldr	r3, [pc, #232]	; (800bccc <__ieee754_pow+0x740>)
 800bbe4:	f7f6 f946 	bl	8001e74 <__aeabi_dmul>
 800bbe8:	4a3a      	ldr	r2, [pc, #232]	; (800bcd4 <__ieee754_pow+0x748>)
 800bbea:	0004      	movs	r4, r0
 800bbec:	000d      	movs	r5, r1
 800bbee:	0030      	movs	r0, r6
 800bbf0:	0039      	movs	r1, r7
 800bbf2:	4b39      	ldr	r3, [pc, #228]	; (800bcd8 <__ieee754_pow+0x74c>)
 800bbf4:	f7f6 f93e 	bl	8001e74 <__aeabi_dmul>
 800bbf8:	0002      	movs	r2, r0
 800bbfa:	000b      	movs	r3, r1
 800bbfc:	0020      	movs	r0, r4
 800bbfe:	0029      	movs	r1, r5
 800bc00:	f7f5 f9c8 	bl	8000f94 <__aeabi_dadd>
 800bc04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc06:	4b35      	ldr	r3, [pc, #212]	; (800bcdc <__ieee754_pow+0x750>)
 800bc08:	189b      	adds	r3, r3, r2
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	f7f5 f9c1 	bl	8000f94 <__aeabi_dadd>
 800bc12:	900a      	str	r0, [sp, #40]	; 0x28
 800bc14:	910b      	str	r1, [sp, #44]	; 0x2c
 800bc16:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bc18:	f7f6 ff7e 	bl	8002b18 <__aeabi_i2d>
 800bc1c:	0004      	movs	r4, r0
 800bc1e:	000d      	movs	r5, r1
 800bc20:	9808      	ldr	r0, [sp, #32]
 800bc22:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc26:	4b2e      	ldr	r3, [pc, #184]	; (800bce0 <__ieee754_pow+0x754>)
 800bc28:	189b      	adds	r3, r3, r2
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	9200      	str	r2, [sp, #0]
 800bc30:	9301      	str	r3, [sp, #4]
 800bc32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc36:	f7f5 f9ad 	bl	8000f94 <__aeabi_dadd>
 800bc3a:	9a00      	ldr	r2, [sp, #0]
 800bc3c:	9b01      	ldr	r3, [sp, #4]
 800bc3e:	f7f5 f9a9 	bl	8000f94 <__aeabi_dadd>
 800bc42:	0022      	movs	r2, r4
 800bc44:	002b      	movs	r3, r5
 800bc46:	f7f5 f9a5 	bl	8000f94 <__aeabi_dadd>
 800bc4a:	9804      	ldr	r0, [sp, #16]
 800bc4c:	0022      	movs	r2, r4
 800bc4e:	002b      	movs	r3, r5
 800bc50:	0006      	movs	r6, r0
 800bc52:	000f      	movs	r7, r1
 800bc54:	f7f6 fb7a 	bl	800234c <__aeabi_dsub>
 800bc58:	9a00      	ldr	r2, [sp, #0]
 800bc5a:	9b01      	ldr	r3, [sp, #4]
 800bc5c:	f7f6 fb76 	bl	800234c <__aeabi_dsub>
 800bc60:	9a08      	ldr	r2, [sp, #32]
 800bc62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc64:	f7f6 fb72 	bl	800234c <__aeabi_dsub>
 800bc68:	0002      	movs	r2, r0
 800bc6a:	000b      	movs	r3, r1
 800bc6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bc6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc70:	e614      	b.n	800b89c <__ieee754_pow+0x310>
 800bc72:	2300      	movs	r3, #0
 800bc74:	4c03      	ldr	r4, [pc, #12]	; (800bc84 <__ieee754_pow+0x6f8>)
 800bc76:	e61d      	b.n	800b8b4 <__ieee754_pow+0x328>
 800bc78:	7ff00000 	.word	0x7ff00000
 800bc7c:	43400000 	.word	0x43400000
 800bc80:	fffffc01 	.word	0xfffffc01
 800bc84:	3ff00000 	.word	0x3ff00000
 800bc88:	0003988e 	.word	0x0003988e
 800bc8c:	000bb679 	.word	0x000bb679
 800bc90:	fff00000 	.word	0xfff00000
 800bc94:	0800c988 	.word	0x0800c988
 800bc98:	4a454eef 	.word	0x4a454eef
 800bc9c:	3fca7e28 	.word	0x3fca7e28
 800bca0:	93c9db65 	.word	0x93c9db65
 800bca4:	3fcd864a 	.word	0x3fcd864a
 800bca8:	a91d4101 	.word	0xa91d4101
 800bcac:	3fd17460 	.word	0x3fd17460
 800bcb0:	518f264d 	.word	0x518f264d
 800bcb4:	3fd55555 	.word	0x3fd55555
 800bcb8:	db6fabff 	.word	0xdb6fabff
 800bcbc:	3fdb6db6 	.word	0x3fdb6db6
 800bcc0:	33333303 	.word	0x33333303
 800bcc4:	3fe33333 	.word	0x3fe33333
 800bcc8:	40080000 	.word	0x40080000
 800bccc:	3feec709 	.word	0x3feec709
 800bcd0:	dc3a03fd 	.word	0xdc3a03fd
 800bcd4:	145b01f5 	.word	0x145b01f5
 800bcd8:	be3e2fe0 	.word	0xbe3e2fe0
 800bcdc:	0800c9a8 	.word	0x0800c9a8
 800bce0:	0800c998 	.word	0x0800c998
 800bce4:	4a8f      	ldr	r2, [pc, #572]	; (800bf24 <__ieee754_pow+0x998>)
 800bce6:	4b90      	ldr	r3, [pc, #576]	; (800bf28 <__ieee754_pow+0x99c>)
 800bce8:	9804      	ldr	r0, [sp, #16]
 800bcea:	9905      	ldr	r1, [sp, #20]
 800bcec:	f7f5 f952 	bl	8000f94 <__aeabi_dadd>
 800bcf0:	0032      	movs	r2, r6
 800bcf2:	9002      	str	r0, [sp, #8]
 800bcf4:	9103      	str	r1, [sp, #12]
 800bcf6:	003b      	movs	r3, r7
 800bcf8:	0028      	movs	r0, r5
 800bcfa:	0021      	movs	r1, r4
 800bcfc:	f7f6 fb26 	bl	800234c <__aeabi_dsub>
 800bd00:	0002      	movs	r2, r0
 800bd02:	000b      	movs	r3, r1
 800bd04:	9802      	ldr	r0, [sp, #8]
 800bd06:	9903      	ldr	r1, [sp, #12]
 800bd08:	f7f4 fbba 	bl	8000480 <__aeabi_dcmpgt>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d000      	beq.n	800bd12 <__ieee754_pow+0x786>
 800bd10:	e60b      	b.n	800b92a <__ieee754_pow+0x39e>
 800bd12:	2100      	movs	r1, #0
 800bd14:	4a85      	ldr	r2, [pc, #532]	; (800bf2c <__ieee754_pow+0x9a0>)
 800bd16:	0063      	lsls	r3, r4, #1
 800bd18:	085b      	lsrs	r3, r3, #1
 800bd1a:	9102      	str	r1, [sp, #8]
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	dd25      	ble.n	800bd6c <__ieee754_pow+0x7e0>
 800bd20:	4a83      	ldr	r2, [pc, #524]	; (800bf30 <__ieee754_pow+0x9a4>)
 800bd22:	151b      	asrs	r3, r3, #20
 800bd24:	189b      	adds	r3, r3, r2
 800bd26:	2280      	movs	r2, #128	; 0x80
 800bd28:	0352      	lsls	r2, r2, #13
 800bd2a:	4694      	mov	ip, r2
 800bd2c:	411a      	asrs	r2, r3
 800bd2e:	1914      	adds	r4, r2, r4
 800bd30:	4b80      	ldr	r3, [pc, #512]	; (800bf34 <__ieee754_pow+0x9a8>)
 800bd32:	0060      	lsls	r0, r4, #1
 800bd34:	4d80      	ldr	r5, [pc, #512]	; (800bf38 <__ieee754_pow+0x9ac>)
 800bd36:	0d40      	lsrs	r0, r0, #21
 800bd38:	18c0      	adds	r0, r0, r3
 800bd3a:	4105      	asrs	r5, r0
 800bd3c:	0021      	movs	r1, r4
 800bd3e:	43a9      	bics	r1, r5
 800bd40:	000b      	movs	r3, r1
 800bd42:	4661      	mov	r1, ip
 800bd44:	0324      	lsls	r4, r4, #12
 800bd46:	0b24      	lsrs	r4, r4, #12
 800bd48:	4321      	orrs	r1, r4
 800bd4a:	2414      	movs	r4, #20
 800bd4c:	1a20      	subs	r0, r4, r0
 800bd4e:	4101      	asrs	r1, r0
 800bd50:	9102      	str	r1, [sp, #8]
 800bd52:	9908      	ldr	r1, [sp, #32]
 800bd54:	2200      	movs	r2, #0
 800bd56:	2900      	cmp	r1, #0
 800bd58:	da02      	bge.n	800bd60 <__ieee754_pow+0x7d4>
 800bd5a:	9902      	ldr	r1, [sp, #8]
 800bd5c:	4249      	negs	r1, r1
 800bd5e:	9102      	str	r1, [sp, #8]
 800bd60:	0030      	movs	r0, r6
 800bd62:	0039      	movs	r1, r7
 800bd64:	f7f6 faf2 	bl	800234c <__aeabi_dsub>
 800bd68:	9006      	str	r0, [sp, #24]
 800bd6a:	9107      	str	r1, [sp, #28]
 800bd6c:	9a04      	ldr	r2, [sp, #16]
 800bd6e:	9b05      	ldr	r3, [sp, #20]
 800bd70:	9806      	ldr	r0, [sp, #24]
 800bd72:	9907      	ldr	r1, [sp, #28]
 800bd74:	2600      	movs	r6, #0
 800bd76:	f7f5 f90d 	bl	8000f94 <__aeabi_dadd>
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	0030      	movs	r0, r6
 800bd7e:	4b6f      	ldr	r3, [pc, #444]	; (800bf3c <__ieee754_pow+0x9b0>)
 800bd80:	000f      	movs	r7, r1
 800bd82:	f7f6 f877 	bl	8001e74 <__aeabi_dmul>
 800bd86:	9a06      	ldr	r2, [sp, #24]
 800bd88:	9b07      	ldr	r3, [sp, #28]
 800bd8a:	9008      	str	r0, [sp, #32]
 800bd8c:	9109      	str	r1, [sp, #36]	; 0x24
 800bd8e:	0030      	movs	r0, r6
 800bd90:	0039      	movs	r1, r7
 800bd92:	f7f6 fadb 	bl	800234c <__aeabi_dsub>
 800bd96:	0002      	movs	r2, r0
 800bd98:	000b      	movs	r3, r1
 800bd9a:	9804      	ldr	r0, [sp, #16]
 800bd9c:	9905      	ldr	r1, [sp, #20]
 800bd9e:	f7f6 fad5 	bl	800234c <__aeabi_dsub>
 800bda2:	4a67      	ldr	r2, [pc, #412]	; (800bf40 <__ieee754_pow+0x9b4>)
 800bda4:	4b67      	ldr	r3, [pc, #412]	; (800bf44 <__ieee754_pow+0x9b8>)
 800bda6:	f7f6 f865 	bl	8001e74 <__aeabi_dmul>
 800bdaa:	4a67      	ldr	r2, [pc, #412]	; (800bf48 <__ieee754_pow+0x9bc>)
 800bdac:	0004      	movs	r4, r0
 800bdae:	000d      	movs	r5, r1
 800bdb0:	0030      	movs	r0, r6
 800bdb2:	0039      	movs	r1, r7
 800bdb4:	4b65      	ldr	r3, [pc, #404]	; (800bf4c <__ieee754_pow+0x9c0>)
 800bdb6:	f7f6 f85d 	bl	8001e74 <__aeabi_dmul>
 800bdba:	0002      	movs	r2, r0
 800bdbc:	000b      	movs	r3, r1
 800bdbe:	0020      	movs	r0, r4
 800bdc0:	0029      	movs	r1, r5
 800bdc2:	f7f5 f8e7 	bl	8000f94 <__aeabi_dadd>
 800bdc6:	0004      	movs	r4, r0
 800bdc8:	000d      	movs	r5, r1
 800bdca:	0002      	movs	r2, r0
 800bdcc:	000b      	movs	r3, r1
 800bdce:	9808      	ldr	r0, [sp, #32]
 800bdd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bdd2:	f7f5 f8df 	bl	8000f94 <__aeabi_dadd>
 800bdd6:	9a08      	ldr	r2, [sp, #32]
 800bdd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdda:	0006      	movs	r6, r0
 800bddc:	000f      	movs	r7, r1
 800bdde:	f7f6 fab5 	bl	800234c <__aeabi_dsub>
 800bde2:	0002      	movs	r2, r0
 800bde4:	000b      	movs	r3, r1
 800bde6:	0020      	movs	r0, r4
 800bde8:	0029      	movs	r1, r5
 800bdea:	f7f6 faaf 	bl	800234c <__aeabi_dsub>
 800bdee:	0032      	movs	r2, r6
 800bdf0:	9004      	str	r0, [sp, #16]
 800bdf2:	9105      	str	r1, [sp, #20]
 800bdf4:	003b      	movs	r3, r7
 800bdf6:	0030      	movs	r0, r6
 800bdf8:	0039      	movs	r1, r7
 800bdfa:	f7f6 f83b 	bl	8001e74 <__aeabi_dmul>
 800bdfe:	0004      	movs	r4, r0
 800be00:	000d      	movs	r5, r1
 800be02:	4a53      	ldr	r2, [pc, #332]	; (800bf50 <__ieee754_pow+0x9c4>)
 800be04:	4b53      	ldr	r3, [pc, #332]	; (800bf54 <__ieee754_pow+0x9c8>)
 800be06:	f7f6 f835 	bl	8001e74 <__aeabi_dmul>
 800be0a:	4a53      	ldr	r2, [pc, #332]	; (800bf58 <__ieee754_pow+0x9cc>)
 800be0c:	4b53      	ldr	r3, [pc, #332]	; (800bf5c <__ieee754_pow+0x9d0>)
 800be0e:	f7f6 fa9d 	bl	800234c <__aeabi_dsub>
 800be12:	0022      	movs	r2, r4
 800be14:	002b      	movs	r3, r5
 800be16:	f7f6 f82d 	bl	8001e74 <__aeabi_dmul>
 800be1a:	4a51      	ldr	r2, [pc, #324]	; (800bf60 <__ieee754_pow+0x9d4>)
 800be1c:	4b51      	ldr	r3, [pc, #324]	; (800bf64 <__ieee754_pow+0x9d8>)
 800be1e:	f7f5 f8b9 	bl	8000f94 <__aeabi_dadd>
 800be22:	0022      	movs	r2, r4
 800be24:	002b      	movs	r3, r5
 800be26:	f7f6 f825 	bl	8001e74 <__aeabi_dmul>
 800be2a:	4a4f      	ldr	r2, [pc, #316]	; (800bf68 <__ieee754_pow+0x9dc>)
 800be2c:	4b4f      	ldr	r3, [pc, #316]	; (800bf6c <__ieee754_pow+0x9e0>)
 800be2e:	f7f6 fa8d 	bl	800234c <__aeabi_dsub>
 800be32:	0022      	movs	r2, r4
 800be34:	002b      	movs	r3, r5
 800be36:	f7f6 f81d 	bl	8001e74 <__aeabi_dmul>
 800be3a:	4a4d      	ldr	r2, [pc, #308]	; (800bf70 <__ieee754_pow+0x9e4>)
 800be3c:	4b4d      	ldr	r3, [pc, #308]	; (800bf74 <__ieee754_pow+0x9e8>)
 800be3e:	f7f5 f8a9 	bl	8000f94 <__aeabi_dadd>
 800be42:	0022      	movs	r2, r4
 800be44:	002b      	movs	r3, r5
 800be46:	f7f6 f815 	bl	8001e74 <__aeabi_dmul>
 800be4a:	0002      	movs	r2, r0
 800be4c:	000b      	movs	r3, r1
 800be4e:	0030      	movs	r0, r6
 800be50:	0039      	movs	r1, r7
 800be52:	f7f6 fa7b 	bl	800234c <__aeabi_dsub>
 800be56:	0004      	movs	r4, r0
 800be58:	000d      	movs	r5, r1
 800be5a:	0002      	movs	r2, r0
 800be5c:	000b      	movs	r3, r1
 800be5e:	0030      	movs	r0, r6
 800be60:	0039      	movs	r1, r7
 800be62:	f7f6 f807 	bl	8001e74 <__aeabi_dmul>
 800be66:	2380      	movs	r3, #128	; 0x80
 800be68:	9006      	str	r0, [sp, #24]
 800be6a:	9107      	str	r1, [sp, #28]
 800be6c:	2200      	movs	r2, #0
 800be6e:	0020      	movs	r0, r4
 800be70:	0029      	movs	r1, r5
 800be72:	05db      	lsls	r3, r3, #23
 800be74:	f7f6 fa6a 	bl	800234c <__aeabi_dsub>
 800be78:	0002      	movs	r2, r0
 800be7a:	000b      	movs	r3, r1
 800be7c:	9806      	ldr	r0, [sp, #24]
 800be7e:	9907      	ldr	r1, [sp, #28]
 800be80:	f7f5 fbf2 	bl	8001668 <__aeabi_ddiv>
 800be84:	9a04      	ldr	r2, [sp, #16]
 800be86:	9b05      	ldr	r3, [sp, #20]
 800be88:	0004      	movs	r4, r0
 800be8a:	000d      	movs	r5, r1
 800be8c:	0030      	movs	r0, r6
 800be8e:	0039      	movs	r1, r7
 800be90:	f7f5 fff0 	bl	8001e74 <__aeabi_dmul>
 800be94:	9a04      	ldr	r2, [sp, #16]
 800be96:	9b05      	ldr	r3, [sp, #20]
 800be98:	f7f5 f87c 	bl	8000f94 <__aeabi_dadd>
 800be9c:	0002      	movs	r2, r0
 800be9e:	000b      	movs	r3, r1
 800bea0:	0020      	movs	r0, r4
 800bea2:	0029      	movs	r1, r5
 800bea4:	f7f6 fa52 	bl	800234c <__aeabi_dsub>
 800bea8:	0032      	movs	r2, r6
 800beaa:	003b      	movs	r3, r7
 800beac:	f7f6 fa4e 	bl	800234c <__aeabi_dsub>
 800beb0:	0002      	movs	r2, r0
 800beb2:	000b      	movs	r3, r1
 800beb4:	2000      	movs	r0, #0
 800beb6:	4930      	ldr	r1, [pc, #192]	; (800bf78 <__ieee754_pow+0x9ec>)
 800beb8:	f7f6 fa48 	bl	800234c <__aeabi_dsub>
 800bebc:	9b02      	ldr	r3, [sp, #8]
 800bebe:	051b      	lsls	r3, r3, #20
 800bec0:	185b      	adds	r3, r3, r1
 800bec2:	151a      	asrs	r2, r3, #20
 800bec4:	2a00      	cmp	r2, #0
 800bec6:	dc26      	bgt.n	800bf16 <__ieee754_pow+0x98a>
 800bec8:	9a02      	ldr	r2, [sp, #8]
 800beca:	f000 f9ad 	bl	800c228 <scalbn>
 800bece:	9a00      	ldr	r2, [sp, #0]
 800bed0:	9b01      	ldr	r3, [sp, #4]
 800bed2:	f7ff fc2d 	bl	800b730 <__ieee754_pow+0x1a4>
 800bed6:	4a29      	ldr	r2, [pc, #164]	; (800bf7c <__ieee754_pow+0x9f0>)
 800bed8:	004b      	lsls	r3, r1, #1
 800beda:	085b      	lsrs	r3, r3, #1
 800bedc:	4293      	cmp	r3, r2
 800bede:	dc00      	bgt.n	800bee2 <__ieee754_pow+0x956>
 800bee0:	e717      	b.n	800bd12 <__ieee754_pow+0x786>
 800bee2:	4b27      	ldr	r3, [pc, #156]	; (800bf80 <__ieee754_pow+0x9f4>)
 800bee4:	18cb      	adds	r3, r1, r3
 800bee6:	4303      	orrs	r3, r0
 800bee8:	d009      	beq.n	800befe <__ieee754_pow+0x972>
 800beea:	9800      	ldr	r0, [sp, #0]
 800beec:	9901      	ldr	r1, [sp, #4]
 800beee:	4a25      	ldr	r2, [pc, #148]	; (800bf84 <__ieee754_pow+0x9f8>)
 800bef0:	4b25      	ldr	r3, [pc, #148]	; (800bf88 <__ieee754_pow+0x9fc>)
 800bef2:	f7f5 ffbf 	bl	8001e74 <__aeabi_dmul>
 800bef6:	4a23      	ldr	r2, [pc, #140]	; (800bf84 <__ieee754_pow+0x9f8>)
 800bef8:	4b23      	ldr	r3, [pc, #140]	; (800bf88 <__ieee754_pow+0x9fc>)
 800befa:	f7ff fc19 	bl	800b730 <__ieee754_pow+0x1a4>
 800befe:	0032      	movs	r2, r6
 800bf00:	003b      	movs	r3, r7
 800bf02:	f7f6 fa23 	bl	800234c <__aeabi_dsub>
 800bf06:	9a04      	ldr	r2, [sp, #16]
 800bf08:	9b05      	ldr	r3, [sp, #20]
 800bf0a:	f7f4 fac3 	bl	8000494 <__aeabi_dcmpge>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	d100      	bne.n	800bf14 <__ieee754_pow+0x988>
 800bf12:	e6fe      	b.n	800bd12 <__ieee754_pow+0x786>
 800bf14:	e7e9      	b.n	800beea <__ieee754_pow+0x95e>
 800bf16:	0019      	movs	r1, r3
 800bf18:	e7d9      	b.n	800bece <__ieee754_pow+0x942>
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	4c16      	ldr	r4, [pc, #88]	; (800bf78 <__ieee754_pow+0x9ec>)
 800bf1e:	f7ff fbec 	bl	800b6fa <__ieee754_pow+0x16e>
 800bf22:	46c0      	nop			; (mov r8, r8)
 800bf24:	652b82fe 	.word	0x652b82fe
 800bf28:	3c971547 	.word	0x3c971547
 800bf2c:	3fe00000 	.word	0x3fe00000
 800bf30:	fffffc02 	.word	0xfffffc02
 800bf34:	fffffc01 	.word	0xfffffc01
 800bf38:	000fffff 	.word	0x000fffff
 800bf3c:	3fe62e43 	.word	0x3fe62e43
 800bf40:	fefa39ef 	.word	0xfefa39ef
 800bf44:	3fe62e42 	.word	0x3fe62e42
 800bf48:	0ca86c39 	.word	0x0ca86c39
 800bf4c:	be205c61 	.word	0xbe205c61
 800bf50:	72bea4d0 	.word	0x72bea4d0
 800bf54:	3e663769 	.word	0x3e663769
 800bf58:	c5d26bf1 	.word	0xc5d26bf1
 800bf5c:	3ebbbd41 	.word	0x3ebbbd41
 800bf60:	af25de2c 	.word	0xaf25de2c
 800bf64:	3f11566a 	.word	0x3f11566a
 800bf68:	16bebd93 	.word	0x16bebd93
 800bf6c:	3f66c16c 	.word	0x3f66c16c
 800bf70:	5555553e 	.word	0x5555553e
 800bf74:	3fc55555 	.word	0x3fc55555
 800bf78:	3ff00000 	.word	0x3ff00000
 800bf7c:	4090cbff 	.word	0x4090cbff
 800bf80:	3f6f3400 	.word	0x3f6f3400
 800bf84:	c2f8f359 	.word	0xc2f8f359
 800bf88:	01a56e1f 	.word	0x01a56e1f

0800bf8c <__ieee754_sqrt>:
 800bf8c:	4b56      	ldr	r3, [pc, #344]	; (800c0e8 <__ieee754_sqrt+0x15c>)
 800bf8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf90:	0002      	movs	r2, r0
 800bf92:	0005      	movs	r5, r0
 800bf94:	0018      	movs	r0, r3
 800bf96:	000c      	movs	r4, r1
 800bf98:	b085      	sub	sp, #20
 800bf9a:	4008      	ands	r0, r1
 800bf9c:	4298      	cmp	r0, r3
 800bf9e:	d10f      	bne.n	800bfc0 <__ieee754_sqrt+0x34>
 800bfa0:	000b      	movs	r3, r1
 800bfa2:	0028      	movs	r0, r5
 800bfa4:	f7f5 ff66 	bl	8001e74 <__aeabi_dmul>
 800bfa8:	0002      	movs	r2, r0
 800bfaa:	000b      	movs	r3, r1
 800bfac:	0028      	movs	r0, r5
 800bfae:	0021      	movs	r1, r4
 800bfb0:	f7f4 fff0 	bl	8000f94 <__aeabi_dadd>
 800bfb4:	0005      	movs	r5, r0
 800bfb6:	000c      	movs	r4, r1
 800bfb8:	0028      	movs	r0, r5
 800bfba:	0021      	movs	r1, r4
 800bfbc:	b005      	add	sp, #20
 800bfbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfc0:	2900      	cmp	r1, #0
 800bfc2:	dc10      	bgt.n	800bfe6 <__ieee754_sqrt+0x5a>
 800bfc4:	004b      	lsls	r3, r1, #1
 800bfc6:	085b      	lsrs	r3, r3, #1
 800bfc8:	432b      	orrs	r3, r5
 800bfca:	d0f5      	beq.n	800bfb8 <__ieee754_sqrt+0x2c>
 800bfcc:	2000      	movs	r0, #0
 800bfce:	4281      	cmp	r1, r0
 800bfd0:	d100      	bne.n	800bfd4 <__ieee754_sqrt+0x48>
 800bfd2:	e080      	b.n	800c0d6 <__ieee754_sqrt+0x14a>
 800bfd4:	000b      	movs	r3, r1
 800bfd6:	0028      	movs	r0, r5
 800bfd8:	f7f6 f9b8 	bl	800234c <__aeabi_dsub>
 800bfdc:	0002      	movs	r2, r0
 800bfde:	000b      	movs	r3, r1
 800bfe0:	f7f5 fb42 	bl	8001668 <__aeabi_ddiv>
 800bfe4:	e7e6      	b.n	800bfb4 <__ieee754_sqrt+0x28>
 800bfe6:	1508      	asrs	r0, r1, #20
 800bfe8:	d075      	beq.n	800c0d6 <__ieee754_sqrt+0x14a>
 800bfea:	4b40      	ldr	r3, [pc, #256]	; (800c0ec <__ieee754_sqrt+0x160>)
 800bfec:	0309      	lsls	r1, r1, #12
 800bfee:	18c4      	adds	r4, r0, r3
 800bff0:	2380      	movs	r3, #128	; 0x80
 800bff2:	0b09      	lsrs	r1, r1, #12
 800bff4:	035b      	lsls	r3, r3, #13
 800bff6:	4319      	orrs	r1, r3
 800bff8:	07c3      	lsls	r3, r0, #31
 800bffa:	d403      	bmi.n	800c004 <__ieee754_sqrt+0x78>
 800bffc:	0fd3      	lsrs	r3, r2, #31
 800bffe:	0049      	lsls	r1, r1, #1
 800c000:	18c9      	adds	r1, r1, r3
 800c002:	0052      	lsls	r2, r2, #1
 800c004:	1063      	asrs	r3, r4, #1
 800c006:	2400      	movs	r4, #0
 800c008:	0049      	lsls	r1, r1, #1
 800c00a:	9303      	str	r3, [sp, #12]
 800c00c:	0fd3      	lsrs	r3, r2, #31
 800c00e:	18cb      	adds	r3, r1, r3
 800c010:	2180      	movs	r1, #128	; 0x80
 800c012:	2516      	movs	r5, #22
 800c014:	0020      	movs	r0, r4
 800c016:	0052      	lsls	r2, r2, #1
 800c018:	0389      	lsls	r1, r1, #14
 800c01a:	1846      	adds	r6, r0, r1
 800c01c:	429e      	cmp	r6, r3
 800c01e:	dc02      	bgt.n	800c026 <__ieee754_sqrt+0x9a>
 800c020:	1870      	adds	r0, r6, r1
 800c022:	1b9b      	subs	r3, r3, r6
 800c024:	1864      	adds	r4, r4, r1
 800c026:	0fd6      	lsrs	r6, r2, #31
 800c028:	005b      	lsls	r3, r3, #1
 800c02a:	3d01      	subs	r5, #1
 800c02c:	18f3      	adds	r3, r6, r3
 800c02e:	0052      	lsls	r2, r2, #1
 800c030:	0849      	lsrs	r1, r1, #1
 800c032:	2d00      	cmp	r5, #0
 800c034:	d1f1      	bne.n	800c01a <__ieee754_sqrt+0x8e>
 800c036:	2620      	movs	r6, #32
 800c038:	2780      	movs	r7, #128	; 0x80
 800c03a:	0029      	movs	r1, r5
 800c03c:	9601      	str	r6, [sp, #4]
 800c03e:	063f      	lsls	r7, r7, #24
 800c040:	197e      	adds	r6, r7, r5
 800c042:	46b4      	mov	ip, r6
 800c044:	4283      	cmp	r3, r0
 800c046:	dc02      	bgt.n	800c04e <__ieee754_sqrt+0xc2>
 800c048:	d114      	bne.n	800c074 <__ieee754_sqrt+0xe8>
 800c04a:	4296      	cmp	r6, r2
 800c04c:	d812      	bhi.n	800c074 <__ieee754_sqrt+0xe8>
 800c04e:	4665      	mov	r5, ip
 800c050:	4666      	mov	r6, ip
 800c052:	19ed      	adds	r5, r5, r7
 800c054:	9002      	str	r0, [sp, #8]
 800c056:	2e00      	cmp	r6, #0
 800c058:	da03      	bge.n	800c062 <__ieee754_sqrt+0xd6>
 800c05a:	43ee      	mvns	r6, r5
 800c05c:	0ff6      	lsrs	r6, r6, #31
 800c05e:	1986      	adds	r6, r0, r6
 800c060:	9602      	str	r6, [sp, #8]
 800c062:	1a1b      	subs	r3, r3, r0
 800c064:	4562      	cmp	r2, ip
 800c066:	4180      	sbcs	r0, r0
 800c068:	4240      	negs	r0, r0
 800c06a:	1a1b      	subs	r3, r3, r0
 800c06c:	4660      	mov	r0, ip
 800c06e:	1a12      	subs	r2, r2, r0
 800c070:	9802      	ldr	r0, [sp, #8]
 800c072:	19c9      	adds	r1, r1, r7
 800c074:	0fd6      	lsrs	r6, r2, #31
 800c076:	005b      	lsls	r3, r3, #1
 800c078:	18f3      	adds	r3, r6, r3
 800c07a:	9e01      	ldr	r6, [sp, #4]
 800c07c:	0052      	lsls	r2, r2, #1
 800c07e:	3e01      	subs	r6, #1
 800c080:	087f      	lsrs	r7, r7, #1
 800c082:	9601      	str	r6, [sp, #4]
 800c084:	2e00      	cmp	r6, #0
 800c086:	d1db      	bne.n	800c040 <__ieee754_sqrt+0xb4>
 800c088:	4313      	orrs	r3, r2
 800c08a:	d003      	beq.n	800c094 <__ieee754_sqrt+0x108>
 800c08c:	1c4b      	adds	r3, r1, #1
 800c08e:	d127      	bne.n	800c0e0 <__ieee754_sqrt+0x154>
 800c090:	0031      	movs	r1, r6
 800c092:	3401      	adds	r4, #1
 800c094:	4b16      	ldr	r3, [pc, #88]	; (800c0f0 <__ieee754_sqrt+0x164>)
 800c096:	1060      	asrs	r0, r4, #1
 800c098:	18c0      	adds	r0, r0, r3
 800c09a:	0849      	lsrs	r1, r1, #1
 800c09c:	07e3      	lsls	r3, r4, #31
 800c09e:	d502      	bpl.n	800c0a6 <__ieee754_sqrt+0x11a>
 800c0a0:	2380      	movs	r3, #128	; 0x80
 800c0a2:	061b      	lsls	r3, r3, #24
 800c0a4:	4319      	orrs	r1, r3
 800c0a6:	9b03      	ldr	r3, [sp, #12]
 800c0a8:	000d      	movs	r5, r1
 800c0aa:	051c      	lsls	r4, r3, #20
 800c0ac:	1823      	adds	r3, r4, r0
 800c0ae:	001c      	movs	r4, r3
 800c0b0:	e782      	b.n	800bfb8 <__ieee754_sqrt+0x2c>
 800c0b2:	0ad1      	lsrs	r1, r2, #11
 800c0b4:	3b15      	subs	r3, #21
 800c0b6:	0552      	lsls	r2, r2, #21
 800c0b8:	2900      	cmp	r1, #0
 800c0ba:	d0fa      	beq.n	800c0b2 <__ieee754_sqrt+0x126>
 800c0bc:	2480      	movs	r4, #128	; 0x80
 800c0be:	0364      	lsls	r4, r4, #13
 800c0c0:	4221      	tst	r1, r4
 800c0c2:	d00a      	beq.n	800c0da <__ieee754_sqrt+0x14e>
 800c0c4:	2420      	movs	r4, #32
 800c0c6:	0016      	movs	r6, r2
 800c0c8:	1a24      	subs	r4, r4, r0
 800c0ca:	40e6      	lsrs	r6, r4
 800c0cc:	1e45      	subs	r5, r0, #1
 800c0ce:	4082      	lsls	r2, r0
 800c0d0:	4331      	orrs	r1, r6
 800c0d2:	1b58      	subs	r0, r3, r5
 800c0d4:	e789      	b.n	800bfea <__ieee754_sqrt+0x5e>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	e7ee      	b.n	800c0b8 <__ieee754_sqrt+0x12c>
 800c0da:	0049      	lsls	r1, r1, #1
 800c0dc:	3001      	adds	r0, #1
 800c0de:	e7ef      	b.n	800c0c0 <__ieee754_sqrt+0x134>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	3101      	adds	r1, #1
 800c0e4:	4399      	bics	r1, r3
 800c0e6:	e7d5      	b.n	800c094 <__ieee754_sqrt+0x108>
 800c0e8:	7ff00000 	.word	0x7ff00000
 800c0ec:	fffffc01 	.word	0xfffffc01
 800c0f0:	3fe00000 	.word	0x3fe00000

0800c0f4 <fabs>:
 800c0f4:	004b      	lsls	r3, r1, #1
 800c0f6:	0859      	lsrs	r1, r3, #1
 800c0f8:	4770      	bx	lr
	...

0800c0fc <finite>:
 800c0fc:	4b02      	ldr	r3, [pc, #8]	; (800c108 <finite+0xc>)
 800c0fe:	0048      	lsls	r0, r1, #1
 800c100:	0840      	lsrs	r0, r0, #1
 800c102:	18c0      	adds	r0, r0, r3
 800c104:	0fc0      	lsrs	r0, r0, #31
 800c106:	4770      	bx	lr
 800c108:	80100000 	.word	0x80100000

0800c10c <nan>:
 800c10c:	2000      	movs	r0, #0
 800c10e:	4901      	ldr	r1, [pc, #4]	; (800c114 <nan+0x8>)
 800c110:	4770      	bx	lr
 800c112:	46c0      	nop			; (mov r8, r8)
 800c114:	7ff80000 	.word	0x7ff80000

0800c118 <rint>:
 800c118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c11a:	004a      	lsls	r2, r1, #1
 800c11c:	4e3e      	ldr	r6, [pc, #248]	; (800c218 <rint+0x100>)
 800c11e:	0d52      	lsrs	r2, r2, #21
 800c120:	b085      	sub	sp, #20
 800c122:	1996      	adds	r6, r2, r6
 800c124:	000d      	movs	r5, r1
 800c126:	0003      	movs	r3, r0
 800c128:	9101      	str	r1, [sp, #4]
 800c12a:	0fcc      	lsrs	r4, r1, #31
 800c12c:	2e13      	cmp	r6, #19
 800c12e:	dc57      	bgt.n	800c1e0 <rint+0xc8>
 800c130:	2e00      	cmp	r6, #0
 800c132:	da2a      	bge.n	800c18a <rint+0x72>
 800c134:	004a      	lsls	r2, r1, #1
 800c136:	0852      	lsrs	r2, r2, #1
 800c138:	4302      	orrs	r2, r0
 800c13a:	d024      	beq.n	800c186 <rint+0x6e>
 800c13c:	030a      	lsls	r2, r1, #12
 800c13e:	0b12      	lsrs	r2, r2, #12
 800c140:	4302      	orrs	r2, r0
 800c142:	4253      	negs	r3, r2
 800c144:	4313      	orrs	r3, r2
 800c146:	2280      	movs	r2, #128	; 0x80
 800c148:	0c4d      	lsrs	r5, r1, #17
 800c14a:	0312      	lsls	r2, r2, #12
 800c14c:	0b1b      	lsrs	r3, r3, #12
 800c14e:	4013      	ands	r3, r2
 800c150:	046d      	lsls	r5, r5, #17
 800c152:	432b      	orrs	r3, r5
 800c154:	0019      	movs	r1, r3
 800c156:	4b31      	ldr	r3, [pc, #196]	; (800c21c <rint+0x104>)
 800c158:	00e2      	lsls	r2, r4, #3
 800c15a:	189b      	adds	r3, r3, r2
 800c15c:	681e      	ldr	r6, [r3, #0]
 800c15e:	685f      	ldr	r7, [r3, #4]
 800c160:	0002      	movs	r2, r0
 800c162:	000b      	movs	r3, r1
 800c164:	0030      	movs	r0, r6
 800c166:	0039      	movs	r1, r7
 800c168:	f7f4 ff14 	bl	8000f94 <__aeabi_dadd>
 800c16c:	9002      	str	r0, [sp, #8]
 800c16e:	9103      	str	r1, [sp, #12]
 800c170:	9802      	ldr	r0, [sp, #8]
 800c172:	9903      	ldr	r1, [sp, #12]
 800c174:	003b      	movs	r3, r7
 800c176:	0032      	movs	r2, r6
 800c178:	f7f6 f8e8 	bl	800234c <__aeabi_dsub>
 800c17c:	004b      	lsls	r3, r1, #1
 800c17e:	085b      	lsrs	r3, r3, #1
 800c180:	07e4      	lsls	r4, r4, #31
 800c182:	4323      	orrs	r3, r4
 800c184:	0019      	movs	r1, r3
 800c186:	b005      	add	sp, #20
 800c188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c18a:	4a25      	ldr	r2, [pc, #148]	; (800c220 <rint+0x108>)
 800c18c:	4132      	asrs	r2, r6
 800c18e:	0017      	movs	r7, r2
 800c190:	400f      	ands	r7, r1
 800c192:	4307      	orrs	r7, r0
 800c194:	d0f7      	beq.n	800c186 <rint+0x6e>
 800c196:	0852      	lsrs	r2, r2, #1
 800c198:	0011      	movs	r1, r2
 800c19a:	4029      	ands	r1, r5
 800c19c:	430b      	orrs	r3, r1
 800c19e:	d00a      	beq.n	800c1b6 <rint+0x9e>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	2e13      	cmp	r6, #19
 800c1a4:	d101      	bne.n	800c1aa <rint+0x92>
 800c1a6:	2380      	movs	r3, #128	; 0x80
 800c1a8:	061b      	lsls	r3, r3, #24
 800c1aa:	2780      	movs	r7, #128	; 0x80
 800c1ac:	02ff      	lsls	r7, r7, #11
 800c1ae:	4137      	asrs	r7, r6
 800c1b0:	4395      	bics	r5, r2
 800c1b2:	432f      	orrs	r7, r5
 800c1b4:	9701      	str	r7, [sp, #4]
 800c1b6:	9901      	ldr	r1, [sp, #4]
 800c1b8:	001a      	movs	r2, r3
 800c1ba:	000b      	movs	r3, r1
 800c1bc:	4917      	ldr	r1, [pc, #92]	; (800c21c <rint+0x104>)
 800c1be:	00e4      	lsls	r4, r4, #3
 800c1c0:	190c      	adds	r4, r1, r4
 800c1c2:	6865      	ldr	r5, [r4, #4]
 800c1c4:	6824      	ldr	r4, [r4, #0]
 800c1c6:	0020      	movs	r0, r4
 800c1c8:	0029      	movs	r1, r5
 800c1ca:	f7f4 fee3 	bl	8000f94 <__aeabi_dadd>
 800c1ce:	9002      	str	r0, [sp, #8]
 800c1d0:	9103      	str	r1, [sp, #12]
 800c1d2:	9802      	ldr	r0, [sp, #8]
 800c1d4:	9903      	ldr	r1, [sp, #12]
 800c1d6:	0022      	movs	r2, r4
 800c1d8:	002b      	movs	r3, r5
 800c1da:	f7f6 f8b7 	bl	800234c <__aeabi_dsub>
 800c1de:	e7d2      	b.n	800c186 <rint+0x6e>
 800c1e0:	2e33      	cmp	r6, #51	; 0x33
 800c1e2:	dd08      	ble.n	800c1f6 <rint+0xde>
 800c1e4:	2380      	movs	r3, #128	; 0x80
 800c1e6:	00db      	lsls	r3, r3, #3
 800c1e8:	429e      	cmp	r6, r3
 800c1ea:	d1cc      	bne.n	800c186 <rint+0x6e>
 800c1ec:	0002      	movs	r2, r0
 800c1ee:	000b      	movs	r3, r1
 800c1f0:	f7f4 fed0 	bl	8000f94 <__aeabi_dadd>
 800c1f4:	e7c7      	b.n	800c186 <rint+0x6e>
 800c1f6:	2601      	movs	r6, #1
 800c1f8:	4d0a      	ldr	r5, [pc, #40]	; (800c224 <rint+0x10c>)
 800c1fa:	4276      	negs	r6, r6
 800c1fc:	1952      	adds	r2, r2, r5
 800c1fe:	40d6      	lsrs	r6, r2
 800c200:	4206      	tst	r6, r0
 800c202:	d0c0      	beq.n	800c186 <rint+0x6e>
 800c204:	0876      	lsrs	r6, r6, #1
 800c206:	4206      	tst	r6, r0
 800c208:	d0d5      	beq.n	800c1b6 <rint+0x9e>
 800c20a:	2180      	movs	r1, #128	; 0x80
 800c20c:	05c9      	lsls	r1, r1, #23
 800c20e:	4111      	asrs	r1, r2
 800c210:	43b3      	bics	r3, r6
 800c212:	430b      	orrs	r3, r1
 800c214:	e7cf      	b.n	800c1b6 <rint+0x9e>
 800c216:	46c0      	nop			; (mov r8, r8)
 800c218:	fffffc01 	.word	0xfffffc01
 800c21c:	0800c9b8 	.word	0x0800c9b8
 800c220:	000fffff 	.word	0x000fffff
 800c224:	fffffbed 	.word	0xfffffbed

0800c228 <scalbn>:
 800c228:	004b      	lsls	r3, r1, #1
 800c22a:	b570      	push	{r4, r5, r6, lr}
 800c22c:	0d5b      	lsrs	r3, r3, #21
 800c22e:	0014      	movs	r4, r2
 800c230:	000a      	movs	r2, r1
 800c232:	2b00      	cmp	r3, #0
 800c234:	d10d      	bne.n	800c252 <scalbn+0x2a>
 800c236:	004b      	lsls	r3, r1, #1
 800c238:	085b      	lsrs	r3, r3, #1
 800c23a:	4303      	orrs	r3, r0
 800c23c:	d010      	beq.n	800c260 <scalbn+0x38>
 800c23e:	4b27      	ldr	r3, [pc, #156]	; (800c2dc <scalbn+0xb4>)
 800c240:	2200      	movs	r2, #0
 800c242:	f7f5 fe17 	bl	8001e74 <__aeabi_dmul>
 800c246:	4b26      	ldr	r3, [pc, #152]	; (800c2e0 <scalbn+0xb8>)
 800c248:	429c      	cmp	r4, r3
 800c24a:	da0a      	bge.n	800c262 <scalbn+0x3a>
 800c24c:	4a25      	ldr	r2, [pc, #148]	; (800c2e4 <scalbn+0xbc>)
 800c24e:	4b26      	ldr	r3, [pc, #152]	; (800c2e8 <scalbn+0xc0>)
 800c250:	e019      	b.n	800c286 <scalbn+0x5e>
 800c252:	4d26      	ldr	r5, [pc, #152]	; (800c2ec <scalbn+0xc4>)
 800c254:	42ab      	cmp	r3, r5
 800c256:	d108      	bne.n	800c26a <scalbn+0x42>
 800c258:	0002      	movs	r2, r0
 800c25a:	000b      	movs	r3, r1
 800c25c:	f7f4 fe9a 	bl	8000f94 <__aeabi_dadd>
 800c260:	bd70      	pop	{r4, r5, r6, pc}
 800c262:	000a      	movs	r2, r1
 800c264:	004b      	lsls	r3, r1, #1
 800c266:	0d5b      	lsrs	r3, r3, #21
 800c268:	3b36      	subs	r3, #54	; 0x36
 800c26a:	4d21      	ldr	r5, [pc, #132]	; (800c2f0 <scalbn+0xc8>)
 800c26c:	18e3      	adds	r3, r4, r3
 800c26e:	42ab      	cmp	r3, r5
 800c270:	dd0c      	ble.n	800c28c <scalbn+0x64>
 800c272:	4c20      	ldr	r4, [pc, #128]	; (800c2f4 <scalbn+0xcc>)
 800c274:	4d20      	ldr	r5, [pc, #128]	; (800c2f8 <scalbn+0xd0>)
 800c276:	2900      	cmp	r1, #0
 800c278:	da01      	bge.n	800c27e <scalbn+0x56>
 800c27a:	4c1e      	ldr	r4, [pc, #120]	; (800c2f4 <scalbn+0xcc>)
 800c27c:	4d1f      	ldr	r5, [pc, #124]	; (800c2fc <scalbn+0xd4>)
 800c27e:	0020      	movs	r0, r4
 800c280:	0029      	movs	r1, r5
 800c282:	4a1c      	ldr	r2, [pc, #112]	; (800c2f4 <scalbn+0xcc>)
 800c284:	4b1c      	ldr	r3, [pc, #112]	; (800c2f8 <scalbn+0xd0>)
 800c286:	f7f5 fdf5 	bl	8001e74 <__aeabi_dmul>
 800c28a:	e7e9      	b.n	800c260 <scalbn+0x38>
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	dd05      	ble.n	800c29c <scalbn+0x74>
 800c290:	4c1b      	ldr	r4, [pc, #108]	; (800c300 <scalbn+0xd8>)
 800c292:	051b      	lsls	r3, r3, #20
 800c294:	4022      	ands	r2, r4
 800c296:	431a      	orrs	r2, r3
 800c298:	0011      	movs	r1, r2
 800c29a:	e7e1      	b.n	800c260 <scalbn+0x38>
 800c29c:	001d      	movs	r5, r3
 800c29e:	3535      	adds	r5, #53	; 0x35
 800c2a0:	da13      	bge.n	800c2ca <scalbn+0xa2>
 800c2a2:	4a18      	ldr	r2, [pc, #96]	; (800c304 <scalbn+0xdc>)
 800c2a4:	0fcb      	lsrs	r3, r1, #31
 800c2a6:	4294      	cmp	r4, r2
 800c2a8:	dd08      	ble.n	800c2bc <scalbn+0x94>
 800c2aa:	4812      	ldr	r0, [pc, #72]	; (800c2f4 <scalbn+0xcc>)
 800c2ac:	4912      	ldr	r1, [pc, #72]	; (800c2f8 <scalbn+0xd0>)
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d001      	beq.n	800c2b6 <scalbn+0x8e>
 800c2b2:	4810      	ldr	r0, [pc, #64]	; (800c2f4 <scalbn+0xcc>)
 800c2b4:	4911      	ldr	r1, [pc, #68]	; (800c2fc <scalbn+0xd4>)
 800c2b6:	4a0f      	ldr	r2, [pc, #60]	; (800c2f4 <scalbn+0xcc>)
 800c2b8:	4b0f      	ldr	r3, [pc, #60]	; (800c2f8 <scalbn+0xd0>)
 800c2ba:	e7e4      	b.n	800c286 <scalbn+0x5e>
 800c2bc:	4809      	ldr	r0, [pc, #36]	; (800c2e4 <scalbn+0xbc>)
 800c2be:	490a      	ldr	r1, [pc, #40]	; (800c2e8 <scalbn+0xc0>)
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d0c3      	beq.n	800c24c <scalbn+0x24>
 800c2c4:	4807      	ldr	r0, [pc, #28]	; (800c2e4 <scalbn+0xbc>)
 800c2c6:	4910      	ldr	r1, [pc, #64]	; (800c308 <scalbn+0xe0>)
 800c2c8:	e7c0      	b.n	800c24c <scalbn+0x24>
 800c2ca:	4c0d      	ldr	r4, [pc, #52]	; (800c300 <scalbn+0xd8>)
 800c2cc:	3336      	adds	r3, #54	; 0x36
 800c2ce:	4022      	ands	r2, r4
 800c2d0:	051b      	lsls	r3, r3, #20
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	0019      	movs	r1, r3
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	4b0c      	ldr	r3, [pc, #48]	; (800c30c <scalbn+0xe4>)
 800c2da:	e7d4      	b.n	800c286 <scalbn+0x5e>
 800c2dc:	43500000 	.word	0x43500000
 800c2e0:	ffff3cb0 	.word	0xffff3cb0
 800c2e4:	c2f8f359 	.word	0xc2f8f359
 800c2e8:	01a56e1f 	.word	0x01a56e1f
 800c2ec:	000007ff 	.word	0x000007ff
 800c2f0:	000007fe 	.word	0x000007fe
 800c2f4:	8800759c 	.word	0x8800759c
 800c2f8:	7e37e43c 	.word	0x7e37e43c
 800c2fc:	fe37e43c 	.word	0xfe37e43c
 800c300:	800fffff 	.word	0x800fffff
 800c304:	0000c350 	.word	0x0000c350
 800c308:	81a56e1f 	.word	0x81a56e1f
 800c30c:	3c900000 	.word	0x3c900000

0800c310 <_init>:
 800c310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c312:	46c0      	nop			; (mov r8, r8)
 800c314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c316:	bc08      	pop	{r3}
 800c318:	469e      	mov	lr, r3
 800c31a:	4770      	bx	lr

0800c31c <_fini>:
 800c31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c31e:	46c0      	nop			; (mov r8, r8)
 800c320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c322:	bc08      	pop	{r3}
 800c324:	469e      	mov	lr, r3
 800c326:	4770      	bx	lr
