
Code_Chip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c180  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  0800c240  0800c240  0001c240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8c8  0800c8c8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8c8  0800c8c8  0001c8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8d0  0800c8d0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8d0  0800c8d0  0001c8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8d4  0800c8d4  0001c8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c8d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001dc  0800cab4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  0800cab4  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124bc  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ab  00000000  00000000  000326c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00034f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00036000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f18  00000000  00000000  00036f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001461d  00000000  00000000  0004de80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a180  00000000  00000000  0006249d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec61d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005094  00000000  00000000  000ec670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c228 	.word	0x0800c228

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800c228 	.word	0x0800c228

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fcb1 	bl	8001da4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc01 	bl	8001c54 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fca3 	bl	8001da4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc99 	bl	8001da4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc29 	bl	8001cd8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc1f 	bl	8001cd8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f852 	bl	8000580 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 faa3 	bl	8002aa4 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 feec 	bl	8002344 <__aeabi_dsub>
 800056c:	f002 fa9a 	bl	8002aa4 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__udivmoddi4>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	4657      	mov	r7, sl
 8000584:	464e      	mov	r6, r9
 8000586:	4645      	mov	r5, r8
 8000588:	46de      	mov	lr, fp
 800058a:	b5e0      	push	{r5, r6, r7, lr}
 800058c:	0004      	movs	r4, r0
 800058e:	000d      	movs	r5, r1
 8000590:	4692      	mov	sl, r2
 8000592:	4699      	mov	r9, r3
 8000594:	b083      	sub	sp, #12
 8000596:	428b      	cmp	r3, r1
 8000598:	d830      	bhi.n	80005fc <__udivmoddi4+0x7c>
 800059a:	d02d      	beq.n	80005f8 <__udivmoddi4+0x78>
 800059c:	4649      	mov	r1, r9
 800059e:	4650      	mov	r0, sl
 80005a0:	f002 fbfa 	bl	8002d98 <__clzdi2>
 80005a4:	0029      	movs	r1, r5
 80005a6:	0006      	movs	r6, r0
 80005a8:	0020      	movs	r0, r4
 80005aa:	f002 fbf5 	bl	8002d98 <__clzdi2>
 80005ae:	1a33      	subs	r3, r6, r0
 80005b0:	4698      	mov	r8, r3
 80005b2:	3b20      	subs	r3, #32
 80005b4:	469b      	mov	fp, r3
 80005b6:	d433      	bmi.n	8000620 <__udivmoddi4+0xa0>
 80005b8:	465a      	mov	r2, fp
 80005ba:	4653      	mov	r3, sl
 80005bc:	4093      	lsls	r3, r2
 80005be:	4642      	mov	r2, r8
 80005c0:	001f      	movs	r7, r3
 80005c2:	4653      	mov	r3, sl
 80005c4:	4093      	lsls	r3, r2
 80005c6:	001e      	movs	r6, r3
 80005c8:	42af      	cmp	r7, r5
 80005ca:	d83a      	bhi.n	8000642 <__udivmoddi4+0xc2>
 80005cc:	42af      	cmp	r7, r5
 80005ce:	d100      	bne.n	80005d2 <__udivmoddi4+0x52>
 80005d0:	e078      	b.n	80006c4 <__udivmoddi4+0x144>
 80005d2:	465b      	mov	r3, fp
 80005d4:	1ba4      	subs	r4, r4, r6
 80005d6:	41bd      	sbcs	r5, r7
 80005d8:	2b00      	cmp	r3, #0
 80005da:	da00      	bge.n	80005de <__udivmoddi4+0x5e>
 80005dc:	e075      	b.n	80006ca <__udivmoddi4+0x14a>
 80005de:	2200      	movs	r2, #0
 80005e0:	2300      	movs	r3, #0
 80005e2:	9200      	str	r2, [sp, #0]
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2301      	movs	r3, #1
 80005e8:	465a      	mov	r2, fp
 80005ea:	4093      	lsls	r3, r2
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	4642      	mov	r2, r8
 80005f2:	4093      	lsls	r3, r2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	e028      	b.n	800064a <__udivmoddi4+0xca>
 80005f8:	4282      	cmp	r2, r0
 80005fa:	d9cf      	bls.n	800059c <__udivmoddi4+0x1c>
 80005fc:	2200      	movs	r2, #0
 80005fe:	2300      	movs	r3, #0
 8000600:	9200      	str	r2, [sp, #0]
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <__udivmoddi4+0x8e>
 800060a:	601c      	str	r4, [r3, #0]
 800060c:	605d      	str	r5, [r3, #4]
 800060e:	9800      	ldr	r0, [sp, #0]
 8000610:	9901      	ldr	r1, [sp, #4]
 8000612:	b003      	add	sp, #12
 8000614:	bcf0      	pop	{r4, r5, r6, r7}
 8000616:	46bb      	mov	fp, r7
 8000618:	46b2      	mov	sl, r6
 800061a:	46a9      	mov	r9, r5
 800061c:	46a0      	mov	r8, r4
 800061e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000620:	4642      	mov	r2, r8
 8000622:	2320      	movs	r3, #32
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	4652      	mov	r2, sl
 8000628:	40da      	lsrs	r2, r3
 800062a:	4641      	mov	r1, r8
 800062c:	0013      	movs	r3, r2
 800062e:	464a      	mov	r2, r9
 8000630:	408a      	lsls	r2, r1
 8000632:	0017      	movs	r7, r2
 8000634:	4642      	mov	r2, r8
 8000636:	431f      	orrs	r7, r3
 8000638:	4653      	mov	r3, sl
 800063a:	4093      	lsls	r3, r2
 800063c:	001e      	movs	r6, r3
 800063e:	42af      	cmp	r7, r5
 8000640:	d9c4      	bls.n	80005cc <__udivmoddi4+0x4c>
 8000642:	2200      	movs	r2, #0
 8000644:	2300      	movs	r3, #0
 8000646:	9200      	str	r2, [sp, #0]
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	4643      	mov	r3, r8
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0d9      	beq.n	8000604 <__udivmoddi4+0x84>
 8000650:	07fb      	lsls	r3, r7, #31
 8000652:	0872      	lsrs	r2, r6, #1
 8000654:	431a      	orrs	r2, r3
 8000656:	4646      	mov	r6, r8
 8000658:	087b      	lsrs	r3, r7, #1
 800065a:	e00e      	b.n	800067a <__udivmoddi4+0xfa>
 800065c:	42ab      	cmp	r3, r5
 800065e:	d101      	bne.n	8000664 <__udivmoddi4+0xe4>
 8000660:	42a2      	cmp	r2, r4
 8000662:	d80c      	bhi.n	800067e <__udivmoddi4+0xfe>
 8000664:	1aa4      	subs	r4, r4, r2
 8000666:	419d      	sbcs	r5, r3
 8000668:	2001      	movs	r0, #1
 800066a:	1924      	adds	r4, r4, r4
 800066c:	416d      	adcs	r5, r5
 800066e:	2100      	movs	r1, #0
 8000670:	3e01      	subs	r6, #1
 8000672:	1824      	adds	r4, r4, r0
 8000674:	414d      	adcs	r5, r1
 8000676:	2e00      	cmp	r6, #0
 8000678:	d006      	beq.n	8000688 <__udivmoddi4+0x108>
 800067a:	42ab      	cmp	r3, r5
 800067c:	d9ee      	bls.n	800065c <__udivmoddi4+0xdc>
 800067e:	3e01      	subs	r6, #1
 8000680:	1924      	adds	r4, r4, r4
 8000682:	416d      	adcs	r5, r5
 8000684:	2e00      	cmp	r6, #0
 8000686:	d1f8      	bne.n	800067a <__udivmoddi4+0xfa>
 8000688:	9800      	ldr	r0, [sp, #0]
 800068a:	9901      	ldr	r1, [sp, #4]
 800068c:	465b      	mov	r3, fp
 800068e:	1900      	adds	r0, r0, r4
 8000690:	4169      	adcs	r1, r5
 8000692:	2b00      	cmp	r3, #0
 8000694:	db24      	blt.n	80006e0 <__udivmoddi4+0x160>
 8000696:	002b      	movs	r3, r5
 8000698:	465a      	mov	r2, fp
 800069a:	4644      	mov	r4, r8
 800069c:	40d3      	lsrs	r3, r2
 800069e:	002a      	movs	r2, r5
 80006a0:	40e2      	lsrs	r2, r4
 80006a2:	001c      	movs	r4, r3
 80006a4:	465b      	mov	r3, fp
 80006a6:	0015      	movs	r5, r2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db2a      	blt.n	8000702 <__udivmoddi4+0x182>
 80006ac:	0026      	movs	r6, r4
 80006ae:	409e      	lsls	r6, r3
 80006b0:	0033      	movs	r3, r6
 80006b2:	0026      	movs	r6, r4
 80006b4:	4647      	mov	r7, r8
 80006b6:	40be      	lsls	r6, r7
 80006b8:	0032      	movs	r2, r6
 80006ba:	1a80      	subs	r0, r0, r2
 80006bc:	4199      	sbcs	r1, r3
 80006be:	9000      	str	r0, [sp, #0]
 80006c0:	9101      	str	r1, [sp, #4]
 80006c2:	e79f      	b.n	8000604 <__udivmoddi4+0x84>
 80006c4:	42a3      	cmp	r3, r4
 80006c6:	d8bc      	bhi.n	8000642 <__udivmoddi4+0xc2>
 80006c8:	e783      	b.n	80005d2 <__udivmoddi4+0x52>
 80006ca:	4642      	mov	r2, r8
 80006cc:	2320      	movs	r3, #32
 80006ce:	2100      	movs	r1, #0
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	2200      	movs	r2, #0
 80006d4:	9100      	str	r1, [sp, #0]
 80006d6:	9201      	str	r2, [sp, #4]
 80006d8:	2201      	movs	r2, #1
 80006da:	40da      	lsrs	r2, r3
 80006dc:	9201      	str	r2, [sp, #4]
 80006de:	e786      	b.n	80005ee <__udivmoddi4+0x6e>
 80006e0:	4642      	mov	r2, r8
 80006e2:	2320      	movs	r3, #32
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	002a      	movs	r2, r5
 80006e8:	4646      	mov	r6, r8
 80006ea:	409a      	lsls	r2, r3
 80006ec:	0023      	movs	r3, r4
 80006ee:	40f3      	lsrs	r3, r6
 80006f0:	4644      	mov	r4, r8
 80006f2:	4313      	orrs	r3, r2
 80006f4:	002a      	movs	r2, r5
 80006f6:	40e2      	lsrs	r2, r4
 80006f8:	001c      	movs	r4, r3
 80006fa:	465b      	mov	r3, fp
 80006fc:	0015      	movs	r5, r2
 80006fe:	2b00      	cmp	r3, #0
 8000700:	dad4      	bge.n	80006ac <__udivmoddi4+0x12c>
 8000702:	4642      	mov	r2, r8
 8000704:	002f      	movs	r7, r5
 8000706:	2320      	movs	r3, #32
 8000708:	0026      	movs	r6, r4
 800070a:	4097      	lsls	r7, r2
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	40de      	lsrs	r6, r3
 8000710:	003b      	movs	r3, r7
 8000712:	4333      	orrs	r3, r6
 8000714:	e7cd      	b.n	80006b2 <__udivmoddi4+0x132>
 8000716:	46c0      	nop			; (mov r8, r8)

08000718 <__aeabi_fadd>:
 8000718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071a:	46c6      	mov	lr, r8
 800071c:	0243      	lsls	r3, r0, #9
 800071e:	0a5b      	lsrs	r3, r3, #9
 8000720:	024e      	lsls	r6, r1, #9
 8000722:	0045      	lsls	r5, r0, #1
 8000724:	004f      	lsls	r7, r1, #1
 8000726:	00da      	lsls	r2, r3, #3
 8000728:	0fc4      	lsrs	r4, r0, #31
 800072a:	469c      	mov	ip, r3
 800072c:	0a70      	lsrs	r0, r6, #9
 800072e:	4690      	mov	r8, r2
 8000730:	b500      	push	{lr}
 8000732:	0e2d      	lsrs	r5, r5, #24
 8000734:	0e3f      	lsrs	r7, r7, #24
 8000736:	0fc9      	lsrs	r1, r1, #31
 8000738:	09b6      	lsrs	r6, r6, #6
 800073a:	428c      	cmp	r4, r1
 800073c:	d04b      	beq.n	80007d6 <__aeabi_fadd+0xbe>
 800073e:	1bea      	subs	r2, r5, r7
 8000740:	2a00      	cmp	r2, #0
 8000742:	dd36      	ble.n	80007b2 <__aeabi_fadd+0x9a>
 8000744:	2f00      	cmp	r7, #0
 8000746:	d061      	beq.n	800080c <__aeabi_fadd+0xf4>
 8000748:	2dff      	cmp	r5, #255	; 0xff
 800074a:	d100      	bne.n	800074e <__aeabi_fadd+0x36>
 800074c:	e0ad      	b.n	80008aa <__aeabi_fadd+0x192>
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	04db      	lsls	r3, r3, #19
 8000752:	431e      	orrs	r6, r3
 8000754:	2a1b      	cmp	r2, #27
 8000756:	dc00      	bgt.n	800075a <__aeabi_fadd+0x42>
 8000758:	e0d3      	b.n	8000902 <__aeabi_fadd+0x1ea>
 800075a:	2001      	movs	r0, #1
 800075c:	4643      	mov	r3, r8
 800075e:	1a18      	subs	r0, r3, r0
 8000760:	0143      	lsls	r3, r0, #5
 8000762:	d400      	bmi.n	8000766 <__aeabi_fadd+0x4e>
 8000764:	e08c      	b.n	8000880 <__aeabi_fadd+0x168>
 8000766:	0180      	lsls	r0, r0, #6
 8000768:	0987      	lsrs	r7, r0, #6
 800076a:	0038      	movs	r0, r7
 800076c:	f002 faf6 	bl	8002d5c <__clzsi2>
 8000770:	3805      	subs	r0, #5
 8000772:	4087      	lsls	r7, r0
 8000774:	4285      	cmp	r5, r0
 8000776:	dc00      	bgt.n	800077a <__aeabi_fadd+0x62>
 8000778:	e0b6      	b.n	80008e8 <__aeabi_fadd+0x1d0>
 800077a:	1a2d      	subs	r5, r5, r0
 800077c:	48b3      	ldr	r0, [pc, #716]	; (8000a4c <__aeabi_fadd+0x334>)
 800077e:	4038      	ands	r0, r7
 8000780:	0743      	lsls	r3, r0, #29
 8000782:	d004      	beq.n	800078e <__aeabi_fadd+0x76>
 8000784:	230f      	movs	r3, #15
 8000786:	4003      	ands	r3, r0
 8000788:	2b04      	cmp	r3, #4
 800078a:	d000      	beq.n	800078e <__aeabi_fadd+0x76>
 800078c:	3004      	adds	r0, #4
 800078e:	0143      	lsls	r3, r0, #5
 8000790:	d400      	bmi.n	8000794 <__aeabi_fadd+0x7c>
 8000792:	e078      	b.n	8000886 <__aeabi_fadd+0x16e>
 8000794:	1c6a      	adds	r2, r5, #1
 8000796:	2dfe      	cmp	r5, #254	; 0xfe
 8000798:	d065      	beq.n	8000866 <__aeabi_fadd+0x14e>
 800079a:	0180      	lsls	r0, r0, #6
 800079c:	0a43      	lsrs	r3, r0, #9
 800079e:	469c      	mov	ip, r3
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	4663      	mov	r3, ip
 80007a4:	05d0      	lsls	r0, r2, #23
 80007a6:	4318      	orrs	r0, r3
 80007a8:	07e4      	lsls	r4, r4, #31
 80007aa:	4320      	orrs	r0, r4
 80007ac:	bc80      	pop	{r7}
 80007ae:	46b8      	mov	r8, r7
 80007b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b2:	2a00      	cmp	r2, #0
 80007b4:	d035      	beq.n	8000822 <__aeabi_fadd+0x10a>
 80007b6:	1b7a      	subs	r2, r7, r5
 80007b8:	2d00      	cmp	r5, #0
 80007ba:	d000      	beq.n	80007be <__aeabi_fadd+0xa6>
 80007bc:	e0af      	b.n	800091e <__aeabi_fadd+0x206>
 80007be:	4643      	mov	r3, r8
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fadd+0xae>
 80007c4:	e0a7      	b.n	8000916 <__aeabi_fadd+0x1fe>
 80007c6:	1e53      	subs	r3, r2, #1
 80007c8:	2a01      	cmp	r2, #1
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0xb6>
 80007cc:	e12f      	b.n	8000a2e <__aeabi_fadd+0x316>
 80007ce:	2aff      	cmp	r2, #255	; 0xff
 80007d0:	d069      	beq.n	80008a6 <__aeabi_fadd+0x18e>
 80007d2:	001a      	movs	r2, r3
 80007d4:	e0aa      	b.n	800092c <__aeabi_fadd+0x214>
 80007d6:	1be9      	subs	r1, r5, r7
 80007d8:	2900      	cmp	r1, #0
 80007da:	dd70      	ble.n	80008be <__aeabi_fadd+0x1a6>
 80007dc:	2f00      	cmp	r7, #0
 80007de:	d037      	beq.n	8000850 <__aeabi_fadd+0x138>
 80007e0:	2dff      	cmp	r5, #255	; 0xff
 80007e2:	d062      	beq.n	80008aa <__aeabi_fadd+0x192>
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	04db      	lsls	r3, r3, #19
 80007e8:	431e      	orrs	r6, r3
 80007ea:	291b      	cmp	r1, #27
 80007ec:	dc00      	bgt.n	80007f0 <__aeabi_fadd+0xd8>
 80007ee:	e0b0      	b.n	8000952 <__aeabi_fadd+0x23a>
 80007f0:	2001      	movs	r0, #1
 80007f2:	4440      	add	r0, r8
 80007f4:	0143      	lsls	r3, r0, #5
 80007f6:	d543      	bpl.n	8000880 <__aeabi_fadd+0x168>
 80007f8:	3501      	adds	r5, #1
 80007fa:	2dff      	cmp	r5, #255	; 0xff
 80007fc:	d033      	beq.n	8000866 <__aeabi_fadd+0x14e>
 80007fe:	2301      	movs	r3, #1
 8000800:	4a93      	ldr	r2, [pc, #588]	; (8000a50 <__aeabi_fadd+0x338>)
 8000802:	4003      	ands	r3, r0
 8000804:	0840      	lsrs	r0, r0, #1
 8000806:	4010      	ands	r0, r2
 8000808:	4318      	orrs	r0, r3
 800080a:	e7b9      	b.n	8000780 <__aeabi_fadd+0x68>
 800080c:	2e00      	cmp	r6, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fadd+0xfa>
 8000810:	e083      	b.n	800091a <__aeabi_fadd+0x202>
 8000812:	1e51      	subs	r1, r2, #1
 8000814:	2a01      	cmp	r2, #1
 8000816:	d100      	bne.n	800081a <__aeabi_fadd+0x102>
 8000818:	e0d8      	b.n	80009cc <__aeabi_fadd+0x2b4>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d045      	beq.n	80008aa <__aeabi_fadd+0x192>
 800081e:	000a      	movs	r2, r1
 8000820:	e798      	b.n	8000754 <__aeabi_fadd+0x3c>
 8000822:	27fe      	movs	r7, #254	; 0xfe
 8000824:	1c6a      	adds	r2, r5, #1
 8000826:	4217      	tst	r7, r2
 8000828:	d000      	beq.n	800082c <__aeabi_fadd+0x114>
 800082a:	e086      	b.n	800093a <__aeabi_fadd+0x222>
 800082c:	2d00      	cmp	r5, #0
 800082e:	d000      	beq.n	8000832 <__aeabi_fadd+0x11a>
 8000830:	e0b7      	b.n	80009a2 <__aeabi_fadd+0x28a>
 8000832:	4643      	mov	r3, r8
 8000834:	2b00      	cmp	r3, #0
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x122>
 8000838:	e0f3      	b.n	8000a22 <__aeabi_fadd+0x30a>
 800083a:	2200      	movs	r2, #0
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0b0      	beq.n	80007a2 <__aeabi_fadd+0x8a>
 8000840:	1b98      	subs	r0, r3, r6
 8000842:	0143      	lsls	r3, r0, #5
 8000844:	d400      	bmi.n	8000848 <__aeabi_fadd+0x130>
 8000846:	e0fa      	b.n	8000a3e <__aeabi_fadd+0x326>
 8000848:	4643      	mov	r3, r8
 800084a:	000c      	movs	r4, r1
 800084c:	1af0      	subs	r0, r6, r3
 800084e:	e797      	b.n	8000780 <__aeabi_fadd+0x68>
 8000850:	2e00      	cmp	r6, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fadd+0x13e>
 8000854:	e0c8      	b.n	80009e8 <__aeabi_fadd+0x2d0>
 8000856:	1e4a      	subs	r2, r1, #1
 8000858:	2901      	cmp	r1, #1
 800085a:	d100      	bne.n	800085e <__aeabi_fadd+0x146>
 800085c:	e0ae      	b.n	80009bc <__aeabi_fadd+0x2a4>
 800085e:	29ff      	cmp	r1, #255	; 0xff
 8000860:	d023      	beq.n	80008aa <__aeabi_fadd+0x192>
 8000862:	0011      	movs	r1, r2
 8000864:	e7c1      	b.n	80007ea <__aeabi_fadd+0xd2>
 8000866:	2300      	movs	r3, #0
 8000868:	22ff      	movs	r2, #255	; 0xff
 800086a:	469c      	mov	ip, r3
 800086c:	e799      	b.n	80007a2 <__aeabi_fadd+0x8a>
 800086e:	21fe      	movs	r1, #254	; 0xfe
 8000870:	1c6a      	adds	r2, r5, #1
 8000872:	4211      	tst	r1, r2
 8000874:	d077      	beq.n	8000966 <__aeabi_fadd+0x24e>
 8000876:	2aff      	cmp	r2, #255	; 0xff
 8000878:	d0f5      	beq.n	8000866 <__aeabi_fadd+0x14e>
 800087a:	0015      	movs	r5, r2
 800087c:	4446      	add	r6, r8
 800087e:	0870      	lsrs	r0, r6, #1
 8000880:	0743      	lsls	r3, r0, #29
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0x16e>
 8000884:	e77e      	b.n	8000784 <__aeabi_fadd+0x6c>
 8000886:	08c3      	lsrs	r3, r0, #3
 8000888:	2dff      	cmp	r5, #255	; 0xff
 800088a:	d00e      	beq.n	80008aa <__aeabi_fadd+0x192>
 800088c:	025b      	lsls	r3, r3, #9
 800088e:	0a5b      	lsrs	r3, r3, #9
 8000890:	469c      	mov	ip, r3
 8000892:	b2ea      	uxtb	r2, r5
 8000894:	e785      	b.n	80007a2 <__aeabi_fadd+0x8a>
 8000896:	2e00      	cmp	r6, #0
 8000898:	d007      	beq.n	80008aa <__aeabi_fadd+0x192>
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	03d2      	lsls	r2, r2, #15
 800089e:	4213      	tst	r3, r2
 80008a0:	d003      	beq.n	80008aa <__aeabi_fadd+0x192>
 80008a2:	4210      	tst	r0, r2
 80008a4:	d101      	bne.n	80008aa <__aeabi_fadd+0x192>
 80008a6:	000c      	movs	r4, r1
 80008a8:	0003      	movs	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0db      	beq.n	8000866 <__aeabi_fadd+0x14e>
 80008ae:	2080      	movs	r0, #128	; 0x80
 80008b0:	03c0      	lsls	r0, r0, #15
 80008b2:	4318      	orrs	r0, r3
 80008b4:	0240      	lsls	r0, r0, #9
 80008b6:	0a43      	lsrs	r3, r0, #9
 80008b8:	469c      	mov	ip, r3
 80008ba:	22ff      	movs	r2, #255	; 0xff
 80008bc:	e771      	b.n	80007a2 <__aeabi_fadd+0x8a>
 80008be:	2900      	cmp	r1, #0
 80008c0:	d0d5      	beq.n	800086e <__aeabi_fadd+0x156>
 80008c2:	1b7a      	subs	r2, r7, r5
 80008c4:	2d00      	cmp	r5, #0
 80008c6:	d160      	bne.n	800098a <__aeabi_fadd+0x272>
 80008c8:	4643      	mov	r3, r8
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d024      	beq.n	8000918 <__aeabi_fadd+0x200>
 80008ce:	1e53      	subs	r3, r2, #1
 80008d0:	2a01      	cmp	r2, #1
 80008d2:	d073      	beq.n	80009bc <__aeabi_fadd+0x2a4>
 80008d4:	2aff      	cmp	r2, #255	; 0xff
 80008d6:	d0e7      	beq.n	80008a8 <__aeabi_fadd+0x190>
 80008d8:	001a      	movs	r2, r3
 80008da:	2a1b      	cmp	r2, #27
 80008dc:	dc00      	bgt.n	80008e0 <__aeabi_fadd+0x1c8>
 80008de:	e085      	b.n	80009ec <__aeabi_fadd+0x2d4>
 80008e0:	2001      	movs	r0, #1
 80008e2:	003d      	movs	r5, r7
 80008e4:	1980      	adds	r0, r0, r6
 80008e6:	e785      	b.n	80007f4 <__aeabi_fadd+0xdc>
 80008e8:	2320      	movs	r3, #32
 80008ea:	003a      	movs	r2, r7
 80008ec:	1b45      	subs	r5, r0, r5
 80008ee:	0038      	movs	r0, r7
 80008f0:	3501      	adds	r5, #1
 80008f2:	40ea      	lsrs	r2, r5
 80008f4:	1b5d      	subs	r5, r3, r5
 80008f6:	40a8      	lsls	r0, r5
 80008f8:	1e43      	subs	r3, r0, #1
 80008fa:	4198      	sbcs	r0, r3
 80008fc:	2500      	movs	r5, #0
 80008fe:	4310      	orrs	r0, r2
 8000900:	e73e      	b.n	8000780 <__aeabi_fadd+0x68>
 8000902:	2320      	movs	r3, #32
 8000904:	0030      	movs	r0, r6
 8000906:	1a9b      	subs	r3, r3, r2
 8000908:	0031      	movs	r1, r6
 800090a:	4098      	lsls	r0, r3
 800090c:	40d1      	lsrs	r1, r2
 800090e:	1e43      	subs	r3, r0, #1
 8000910:	4198      	sbcs	r0, r3
 8000912:	4308      	orrs	r0, r1
 8000914:	e722      	b.n	800075c <__aeabi_fadd+0x44>
 8000916:	000c      	movs	r4, r1
 8000918:	0003      	movs	r3, r0
 800091a:	0015      	movs	r5, r2
 800091c:	e7b4      	b.n	8000888 <__aeabi_fadd+0x170>
 800091e:	2fff      	cmp	r7, #255	; 0xff
 8000920:	d0c1      	beq.n	80008a6 <__aeabi_fadd+0x18e>
 8000922:	2380      	movs	r3, #128	; 0x80
 8000924:	4640      	mov	r0, r8
 8000926:	04db      	lsls	r3, r3, #19
 8000928:	4318      	orrs	r0, r3
 800092a:	4680      	mov	r8, r0
 800092c:	2a1b      	cmp	r2, #27
 800092e:	dd51      	ble.n	80009d4 <__aeabi_fadd+0x2bc>
 8000930:	2001      	movs	r0, #1
 8000932:	000c      	movs	r4, r1
 8000934:	003d      	movs	r5, r7
 8000936:	1a30      	subs	r0, r6, r0
 8000938:	e712      	b.n	8000760 <__aeabi_fadd+0x48>
 800093a:	4643      	mov	r3, r8
 800093c:	1b9f      	subs	r7, r3, r6
 800093e:	017b      	lsls	r3, r7, #5
 8000940:	d42b      	bmi.n	800099a <__aeabi_fadd+0x282>
 8000942:	2f00      	cmp	r7, #0
 8000944:	d000      	beq.n	8000948 <__aeabi_fadd+0x230>
 8000946:	e710      	b.n	800076a <__aeabi_fadd+0x52>
 8000948:	2300      	movs	r3, #0
 800094a:	2400      	movs	r4, #0
 800094c:	2200      	movs	r2, #0
 800094e:	469c      	mov	ip, r3
 8000950:	e727      	b.n	80007a2 <__aeabi_fadd+0x8a>
 8000952:	2320      	movs	r3, #32
 8000954:	0032      	movs	r2, r6
 8000956:	0030      	movs	r0, r6
 8000958:	40ca      	lsrs	r2, r1
 800095a:	1a59      	subs	r1, r3, r1
 800095c:	4088      	lsls	r0, r1
 800095e:	1e43      	subs	r3, r0, #1
 8000960:	4198      	sbcs	r0, r3
 8000962:	4310      	orrs	r0, r2
 8000964:	e745      	b.n	80007f2 <__aeabi_fadd+0xda>
 8000966:	2d00      	cmp	r5, #0
 8000968:	d14a      	bne.n	8000a00 <__aeabi_fadd+0x2e8>
 800096a:	4643      	mov	r3, r8
 800096c:	2b00      	cmp	r3, #0
 800096e:	d063      	beq.n	8000a38 <__aeabi_fadd+0x320>
 8000970:	2200      	movs	r2, #0
 8000972:	2e00      	cmp	r6, #0
 8000974:	d100      	bne.n	8000978 <__aeabi_fadd+0x260>
 8000976:	e714      	b.n	80007a2 <__aeabi_fadd+0x8a>
 8000978:	0030      	movs	r0, r6
 800097a:	4440      	add	r0, r8
 800097c:	0143      	lsls	r3, r0, #5
 800097e:	d400      	bmi.n	8000982 <__aeabi_fadd+0x26a>
 8000980:	e77e      	b.n	8000880 <__aeabi_fadd+0x168>
 8000982:	4b32      	ldr	r3, [pc, #200]	; (8000a4c <__aeabi_fadd+0x334>)
 8000984:	3501      	adds	r5, #1
 8000986:	4018      	ands	r0, r3
 8000988:	e77a      	b.n	8000880 <__aeabi_fadd+0x168>
 800098a:	2fff      	cmp	r7, #255	; 0xff
 800098c:	d08c      	beq.n	80008a8 <__aeabi_fadd+0x190>
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	4641      	mov	r1, r8
 8000992:	04db      	lsls	r3, r3, #19
 8000994:	4319      	orrs	r1, r3
 8000996:	4688      	mov	r8, r1
 8000998:	e79f      	b.n	80008da <__aeabi_fadd+0x1c2>
 800099a:	4643      	mov	r3, r8
 800099c:	000c      	movs	r4, r1
 800099e:	1af7      	subs	r7, r6, r3
 80009a0:	e6e3      	b.n	800076a <__aeabi_fadd+0x52>
 80009a2:	4642      	mov	r2, r8
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	d000      	beq.n	80009aa <__aeabi_fadd+0x292>
 80009a8:	e775      	b.n	8000896 <__aeabi_fadd+0x17e>
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fadd+0x298>
 80009ae:	e77a      	b.n	80008a6 <__aeabi_fadd+0x18e>
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	03db      	lsls	r3, r3, #15
 80009b4:	2400      	movs	r4, #0
 80009b6:	469c      	mov	ip, r3
 80009b8:	22ff      	movs	r2, #255	; 0xff
 80009ba:	e6f2      	b.n	80007a2 <__aeabi_fadd+0x8a>
 80009bc:	0030      	movs	r0, r6
 80009be:	4440      	add	r0, r8
 80009c0:	2501      	movs	r5, #1
 80009c2:	0143      	lsls	r3, r0, #5
 80009c4:	d400      	bmi.n	80009c8 <__aeabi_fadd+0x2b0>
 80009c6:	e75b      	b.n	8000880 <__aeabi_fadd+0x168>
 80009c8:	2502      	movs	r5, #2
 80009ca:	e718      	b.n	80007fe <__aeabi_fadd+0xe6>
 80009cc:	4643      	mov	r3, r8
 80009ce:	2501      	movs	r5, #1
 80009d0:	1b98      	subs	r0, r3, r6
 80009d2:	e6c5      	b.n	8000760 <__aeabi_fadd+0x48>
 80009d4:	2320      	movs	r3, #32
 80009d6:	4644      	mov	r4, r8
 80009d8:	4640      	mov	r0, r8
 80009da:	40d4      	lsrs	r4, r2
 80009dc:	1a9a      	subs	r2, r3, r2
 80009de:	4090      	lsls	r0, r2
 80009e0:	1e43      	subs	r3, r0, #1
 80009e2:	4198      	sbcs	r0, r3
 80009e4:	4320      	orrs	r0, r4
 80009e6:	e7a4      	b.n	8000932 <__aeabi_fadd+0x21a>
 80009e8:	000d      	movs	r5, r1
 80009ea:	e74d      	b.n	8000888 <__aeabi_fadd+0x170>
 80009ec:	2320      	movs	r3, #32
 80009ee:	4641      	mov	r1, r8
 80009f0:	4640      	mov	r0, r8
 80009f2:	40d1      	lsrs	r1, r2
 80009f4:	1a9a      	subs	r2, r3, r2
 80009f6:	4090      	lsls	r0, r2
 80009f8:	1e43      	subs	r3, r0, #1
 80009fa:	4198      	sbcs	r0, r3
 80009fc:	4308      	orrs	r0, r1
 80009fe:	e770      	b.n	80008e2 <__aeabi_fadd+0x1ca>
 8000a00:	4642      	mov	r2, r8
 8000a02:	2a00      	cmp	r2, #0
 8000a04:	d100      	bne.n	8000a08 <__aeabi_fadd+0x2f0>
 8000a06:	e74f      	b.n	80008a8 <__aeabi_fadd+0x190>
 8000a08:	2e00      	cmp	r6, #0
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_fadd+0x2f6>
 8000a0c:	e74d      	b.n	80008aa <__aeabi_fadd+0x192>
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	03d2      	lsls	r2, r2, #15
 8000a12:	4213      	tst	r3, r2
 8000a14:	d100      	bne.n	8000a18 <__aeabi_fadd+0x300>
 8000a16:	e748      	b.n	80008aa <__aeabi_fadd+0x192>
 8000a18:	4210      	tst	r0, r2
 8000a1a:	d000      	beq.n	8000a1e <__aeabi_fadd+0x306>
 8000a1c:	e745      	b.n	80008aa <__aeabi_fadd+0x192>
 8000a1e:	0003      	movs	r3, r0
 8000a20:	e743      	b.n	80008aa <__aeabi_fadd+0x192>
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d090      	beq.n	8000948 <__aeabi_fadd+0x230>
 8000a26:	000c      	movs	r4, r1
 8000a28:	4684      	mov	ip, r0
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	e6b9      	b.n	80007a2 <__aeabi_fadd+0x8a>
 8000a2e:	4643      	mov	r3, r8
 8000a30:	000c      	movs	r4, r1
 8000a32:	1af0      	subs	r0, r6, r3
 8000a34:	3501      	adds	r5, #1
 8000a36:	e693      	b.n	8000760 <__aeabi_fadd+0x48>
 8000a38:	4684      	mov	ip, r0
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	e6b1      	b.n	80007a2 <__aeabi_fadd+0x8a>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	d000      	beq.n	8000a44 <__aeabi_fadd+0x32c>
 8000a42:	e71d      	b.n	8000880 <__aeabi_fadd+0x168>
 8000a44:	2300      	movs	r3, #0
 8000a46:	2400      	movs	r4, #0
 8000a48:	469c      	mov	ip, r3
 8000a4a:	e6aa      	b.n	80007a2 <__aeabi_fadd+0x8a>
 8000a4c:	fbffffff 	.word	0xfbffffff
 8000a50:	7dffffff 	.word	0x7dffffff

08000a54 <__aeabi_fdiv>:
 8000a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a56:	464f      	mov	r7, r9
 8000a58:	4646      	mov	r6, r8
 8000a5a:	46d6      	mov	lr, sl
 8000a5c:	0245      	lsls	r5, r0, #9
 8000a5e:	b5c0      	push	{r6, r7, lr}
 8000a60:	0047      	lsls	r7, r0, #1
 8000a62:	1c0c      	adds	r4, r1, #0
 8000a64:	0a6d      	lsrs	r5, r5, #9
 8000a66:	0e3f      	lsrs	r7, r7, #24
 8000a68:	0fc6      	lsrs	r6, r0, #31
 8000a6a:	2f00      	cmp	r7, #0
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_fdiv+0x1c>
 8000a6e:	e070      	b.n	8000b52 <__aeabi_fdiv+0xfe>
 8000a70:	2fff      	cmp	r7, #255	; 0xff
 8000a72:	d100      	bne.n	8000a76 <__aeabi_fdiv+0x22>
 8000a74:	e075      	b.n	8000b62 <__aeabi_fdiv+0x10e>
 8000a76:	00eb      	lsls	r3, r5, #3
 8000a78:	2580      	movs	r5, #128	; 0x80
 8000a7a:	04ed      	lsls	r5, r5, #19
 8000a7c:	431d      	orrs	r5, r3
 8000a7e:	2300      	movs	r3, #0
 8000a80:	4699      	mov	r9, r3
 8000a82:	469a      	mov	sl, r3
 8000a84:	3f7f      	subs	r7, #127	; 0x7f
 8000a86:	0260      	lsls	r0, r4, #9
 8000a88:	0a43      	lsrs	r3, r0, #9
 8000a8a:	4698      	mov	r8, r3
 8000a8c:	0063      	lsls	r3, r4, #1
 8000a8e:	0e1b      	lsrs	r3, r3, #24
 8000a90:	0fe4      	lsrs	r4, r4, #31
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d04e      	beq.n	8000b34 <__aeabi_fdiv+0xe0>
 8000a96:	2bff      	cmp	r3, #255	; 0xff
 8000a98:	d046      	beq.n	8000b28 <__aeabi_fdiv+0xd4>
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	00d0      	lsls	r0, r2, #3
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	04d2      	lsls	r2, r2, #19
 8000aa2:	4302      	orrs	r2, r0
 8000aa4:	4690      	mov	r8, r2
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	3b7f      	subs	r3, #127	; 0x7f
 8000aaa:	0031      	movs	r1, r6
 8000aac:	1aff      	subs	r7, r7, r3
 8000aae:	464b      	mov	r3, r9
 8000ab0:	4061      	eors	r1, r4
 8000ab2:	b2c9      	uxtb	r1, r1
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	2b0f      	cmp	r3, #15
 8000ab8:	d900      	bls.n	8000abc <__aeabi_fdiv+0x68>
 8000aba:	e0b5      	b.n	8000c28 <__aeabi_fdiv+0x1d4>
 8000abc:	486e      	ldr	r0, [pc, #440]	; (8000c78 <__aeabi_fdiv+0x224>)
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	58c3      	ldr	r3, [r0, r3]
 8000ac2:	469f      	mov	pc, r3
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	4698      	mov	r8, r3
 8000ac8:	0026      	movs	r6, r4
 8000aca:	4645      	mov	r5, r8
 8000acc:	4692      	mov	sl, r2
 8000ace:	4653      	mov	r3, sl
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_fdiv+0x82>
 8000ad4:	e089      	b.n	8000bea <__aeabi_fdiv+0x196>
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fdiv+0x88>
 8000ada:	e09e      	b.n	8000c1a <__aeabi_fdiv+0x1c6>
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d018      	beq.n	8000b12 <__aeabi_fdiv+0xbe>
 8000ae0:	003b      	movs	r3, r7
 8000ae2:	337f      	adds	r3, #127	; 0x7f
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	dd69      	ble.n	8000bbc <__aeabi_fdiv+0x168>
 8000ae8:	076a      	lsls	r2, r5, #29
 8000aea:	d004      	beq.n	8000af6 <__aeabi_fdiv+0xa2>
 8000aec:	220f      	movs	r2, #15
 8000aee:	402a      	ands	r2, r5
 8000af0:	2a04      	cmp	r2, #4
 8000af2:	d000      	beq.n	8000af6 <__aeabi_fdiv+0xa2>
 8000af4:	3504      	adds	r5, #4
 8000af6:	012a      	lsls	r2, r5, #4
 8000af8:	d503      	bpl.n	8000b02 <__aeabi_fdiv+0xae>
 8000afa:	4b60      	ldr	r3, [pc, #384]	; (8000c7c <__aeabi_fdiv+0x228>)
 8000afc:	401d      	ands	r5, r3
 8000afe:	003b      	movs	r3, r7
 8000b00:	3380      	adds	r3, #128	; 0x80
 8000b02:	2bfe      	cmp	r3, #254	; 0xfe
 8000b04:	dd00      	ble.n	8000b08 <__aeabi_fdiv+0xb4>
 8000b06:	e070      	b.n	8000bea <__aeabi_fdiv+0x196>
 8000b08:	01ad      	lsls	r5, r5, #6
 8000b0a:	0a6d      	lsrs	r5, r5, #9
 8000b0c:	b2d8      	uxtb	r0, r3
 8000b0e:	e002      	b.n	8000b16 <__aeabi_fdiv+0xc2>
 8000b10:	000e      	movs	r6, r1
 8000b12:	2000      	movs	r0, #0
 8000b14:	2500      	movs	r5, #0
 8000b16:	05c0      	lsls	r0, r0, #23
 8000b18:	4328      	orrs	r0, r5
 8000b1a:	07f6      	lsls	r6, r6, #31
 8000b1c:	4330      	orrs	r0, r6
 8000b1e:	bce0      	pop	{r5, r6, r7}
 8000b20:	46ba      	mov	sl, r7
 8000b22:	46b1      	mov	r9, r6
 8000b24:	46a8      	mov	r8, r5
 8000b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b28:	4643      	mov	r3, r8
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d13f      	bne.n	8000bae <__aeabi_fdiv+0x15a>
 8000b2e:	2202      	movs	r2, #2
 8000b30:	3fff      	subs	r7, #255	; 0xff
 8000b32:	e003      	b.n	8000b3c <__aeabi_fdiv+0xe8>
 8000b34:	4643      	mov	r3, r8
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d12d      	bne.n	8000b96 <__aeabi_fdiv+0x142>
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	0031      	movs	r1, r6
 8000b3e:	464b      	mov	r3, r9
 8000b40:	4061      	eors	r1, r4
 8000b42:	b2c9      	uxtb	r1, r1
 8000b44:	4313      	orrs	r3, r2
 8000b46:	2b0f      	cmp	r3, #15
 8000b48:	d834      	bhi.n	8000bb4 <__aeabi_fdiv+0x160>
 8000b4a:	484d      	ldr	r0, [pc, #308]	; (8000c80 <__aeabi_fdiv+0x22c>)
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	58c3      	ldr	r3, [r0, r3]
 8000b50:	469f      	mov	pc, r3
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d113      	bne.n	8000b7e <__aeabi_fdiv+0x12a>
 8000b56:	2304      	movs	r3, #4
 8000b58:	4699      	mov	r9, r3
 8000b5a:	3b03      	subs	r3, #3
 8000b5c:	2700      	movs	r7, #0
 8000b5e:	469a      	mov	sl, r3
 8000b60:	e791      	b.n	8000a86 <__aeabi_fdiv+0x32>
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d105      	bne.n	8000b72 <__aeabi_fdiv+0x11e>
 8000b66:	2308      	movs	r3, #8
 8000b68:	4699      	mov	r9, r3
 8000b6a:	3b06      	subs	r3, #6
 8000b6c:	27ff      	movs	r7, #255	; 0xff
 8000b6e:	469a      	mov	sl, r3
 8000b70:	e789      	b.n	8000a86 <__aeabi_fdiv+0x32>
 8000b72:	230c      	movs	r3, #12
 8000b74:	4699      	mov	r9, r3
 8000b76:	3b09      	subs	r3, #9
 8000b78:	27ff      	movs	r7, #255	; 0xff
 8000b7a:	469a      	mov	sl, r3
 8000b7c:	e783      	b.n	8000a86 <__aeabi_fdiv+0x32>
 8000b7e:	0028      	movs	r0, r5
 8000b80:	f002 f8ec 	bl	8002d5c <__clzsi2>
 8000b84:	2776      	movs	r7, #118	; 0x76
 8000b86:	1f43      	subs	r3, r0, #5
 8000b88:	409d      	lsls	r5, r3
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	427f      	negs	r7, r7
 8000b8e:	4699      	mov	r9, r3
 8000b90:	469a      	mov	sl, r3
 8000b92:	1a3f      	subs	r7, r7, r0
 8000b94:	e777      	b.n	8000a86 <__aeabi_fdiv+0x32>
 8000b96:	4640      	mov	r0, r8
 8000b98:	f002 f8e0 	bl	8002d5c <__clzsi2>
 8000b9c:	4642      	mov	r2, r8
 8000b9e:	1f43      	subs	r3, r0, #5
 8000ba0:	409a      	lsls	r2, r3
 8000ba2:	2376      	movs	r3, #118	; 0x76
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	4690      	mov	r8, r2
 8000ba8:	1a1b      	subs	r3, r3, r0
 8000baa:	2200      	movs	r2, #0
 8000bac:	e77d      	b.n	8000aaa <__aeabi_fdiv+0x56>
 8000bae:	23ff      	movs	r3, #255	; 0xff
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	e77a      	b.n	8000aaa <__aeabi_fdiv+0x56>
 8000bb4:	000e      	movs	r6, r1
 8000bb6:	20ff      	movs	r0, #255	; 0xff
 8000bb8:	2500      	movs	r5, #0
 8000bba:	e7ac      	b.n	8000b16 <__aeabi_fdiv+0xc2>
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	1ac0      	subs	r0, r0, r3
 8000bc0:	281b      	cmp	r0, #27
 8000bc2:	dca6      	bgt.n	8000b12 <__aeabi_fdiv+0xbe>
 8000bc4:	379e      	adds	r7, #158	; 0x9e
 8000bc6:	002a      	movs	r2, r5
 8000bc8:	40bd      	lsls	r5, r7
 8000bca:	40c2      	lsrs	r2, r0
 8000bcc:	1e6b      	subs	r3, r5, #1
 8000bce:	419d      	sbcs	r5, r3
 8000bd0:	4315      	orrs	r5, r2
 8000bd2:	076b      	lsls	r3, r5, #29
 8000bd4:	d004      	beq.n	8000be0 <__aeabi_fdiv+0x18c>
 8000bd6:	230f      	movs	r3, #15
 8000bd8:	402b      	ands	r3, r5
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	d000      	beq.n	8000be0 <__aeabi_fdiv+0x18c>
 8000bde:	3504      	adds	r5, #4
 8000be0:	016b      	lsls	r3, r5, #5
 8000be2:	d544      	bpl.n	8000c6e <__aeabi_fdiv+0x21a>
 8000be4:	2001      	movs	r0, #1
 8000be6:	2500      	movs	r5, #0
 8000be8:	e795      	b.n	8000b16 <__aeabi_fdiv+0xc2>
 8000bea:	20ff      	movs	r0, #255	; 0xff
 8000bec:	2500      	movs	r5, #0
 8000bee:	e792      	b.n	8000b16 <__aeabi_fdiv+0xc2>
 8000bf0:	2580      	movs	r5, #128	; 0x80
 8000bf2:	2600      	movs	r6, #0
 8000bf4:	20ff      	movs	r0, #255	; 0xff
 8000bf6:	03ed      	lsls	r5, r5, #15
 8000bf8:	e78d      	b.n	8000b16 <__aeabi_fdiv+0xc2>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	4698      	mov	r8, r3
 8000bfe:	2080      	movs	r0, #128	; 0x80
 8000c00:	03c0      	lsls	r0, r0, #15
 8000c02:	4205      	tst	r5, r0
 8000c04:	d009      	beq.n	8000c1a <__aeabi_fdiv+0x1c6>
 8000c06:	4643      	mov	r3, r8
 8000c08:	4203      	tst	r3, r0
 8000c0a:	d106      	bne.n	8000c1a <__aeabi_fdiv+0x1c6>
 8000c0c:	4645      	mov	r5, r8
 8000c0e:	4305      	orrs	r5, r0
 8000c10:	026d      	lsls	r5, r5, #9
 8000c12:	0026      	movs	r6, r4
 8000c14:	20ff      	movs	r0, #255	; 0xff
 8000c16:	0a6d      	lsrs	r5, r5, #9
 8000c18:	e77d      	b.n	8000b16 <__aeabi_fdiv+0xc2>
 8000c1a:	2080      	movs	r0, #128	; 0x80
 8000c1c:	03c0      	lsls	r0, r0, #15
 8000c1e:	4305      	orrs	r5, r0
 8000c20:	026d      	lsls	r5, r5, #9
 8000c22:	20ff      	movs	r0, #255	; 0xff
 8000c24:	0a6d      	lsrs	r5, r5, #9
 8000c26:	e776      	b.n	8000b16 <__aeabi_fdiv+0xc2>
 8000c28:	4642      	mov	r2, r8
 8000c2a:	016b      	lsls	r3, r5, #5
 8000c2c:	0150      	lsls	r0, r2, #5
 8000c2e:	4283      	cmp	r3, r0
 8000c30:	d219      	bcs.n	8000c66 <__aeabi_fdiv+0x212>
 8000c32:	221b      	movs	r2, #27
 8000c34:	2500      	movs	r5, #0
 8000c36:	3f01      	subs	r7, #1
 8000c38:	2601      	movs	r6, #1
 8000c3a:	001c      	movs	r4, r3
 8000c3c:	006d      	lsls	r5, r5, #1
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	2c00      	cmp	r4, #0
 8000c42:	db01      	blt.n	8000c48 <__aeabi_fdiv+0x1f4>
 8000c44:	4298      	cmp	r0, r3
 8000c46:	d801      	bhi.n	8000c4c <__aeabi_fdiv+0x1f8>
 8000c48:	1a1b      	subs	r3, r3, r0
 8000c4a:	4335      	orrs	r5, r6
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	d1f3      	bne.n	8000c3a <__aeabi_fdiv+0x1e6>
 8000c52:	1e5a      	subs	r2, r3, #1
 8000c54:	4193      	sbcs	r3, r2
 8000c56:	431d      	orrs	r5, r3
 8000c58:	003b      	movs	r3, r7
 8000c5a:	337f      	adds	r3, #127	; 0x7f
 8000c5c:	000e      	movs	r6, r1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	dd00      	ble.n	8000c64 <__aeabi_fdiv+0x210>
 8000c62:	e741      	b.n	8000ae8 <__aeabi_fdiv+0x94>
 8000c64:	e7aa      	b.n	8000bbc <__aeabi_fdiv+0x168>
 8000c66:	221a      	movs	r2, #26
 8000c68:	2501      	movs	r5, #1
 8000c6a:	1a1b      	subs	r3, r3, r0
 8000c6c:	e7e4      	b.n	8000c38 <__aeabi_fdiv+0x1e4>
 8000c6e:	01ad      	lsls	r5, r5, #6
 8000c70:	2000      	movs	r0, #0
 8000c72:	0a6d      	lsrs	r5, r5, #9
 8000c74:	e74f      	b.n	8000b16 <__aeabi_fdiv+0xc2>
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	0800c310 	.word	0x0800c310
 8000c7c:	f7ffffff 	.word	0xf7ffffff
 8000c80:	0800c350 	.word	0x0800c350

08000c84 <__aeabi_fmul>:
 8000c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c86:	464f      	mov	r7, r9
 8000c88:	4646      	mov	r6, r8
 8000c8a:	46d6      	mov	lr, sl
 8000c8c:	0244      	lsls	r4, r0, #9
 8000c8e:	0045      	lsls	r5, r0, #1
 8000c90:	b5c0      	push	{r6, r7, lr}
 8000c92:	0a64      	lsrs	r4, r4, #9
 8000c94:	1c0f      	adds	r7, r1, #0
 8000c96:	0e2d      	lsrs	r5, r5, #24
 8000c98:	0fc6      	lsrs	r6, r0, #31
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_fmul+0x1c>
 8000c9e:	e08d      	b.n	8000dbc <__aeabi_fmul+0x138>
 8000ca0:	2dff      	cmp	r5, #255	; 0xff
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_fmul+0x22>
 8000ca4:	e092      	b.n	8000dcc <__aeabi_fmul+0x148>
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	2080      	movs	r0, #128	; 0x80
 8000caa:	4699      	mov	r9, r3
 8000cac:	469a      	mov	sl, r3
 8000cae:	00e4      	lsls	r4, r4, #3
 8000cb0:	04c0      	lsls	r0, r0, #19
 8000cb2:	4304      	orrs	r4, r0
 8000cb4:	3d7f      	subs	r5, #127	; 0x7f
 8000cb6:	0278      	lsls	r0, r7, #9
 8000cb8:	0a43      	lsrs	r3, r0, #9
 8000cba:	4698      	mov	r8, r3
 8000cbc:	007b      	lsls	r3, r7, #1
 8000cbe:	0e1b      	lsrs	r3, r3, #24
 8000cc0:	0fff      	lsrs	r7, r7, #31
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_fmul+0x44>
 8000cc6:	e070      	b.n	8000daa <__aeabi_fmul+0x126>
 8000cc8:	2bff      	cmp	r3, #255	; 0xff
 8000cca:	d100      	bne.n	8000cce <__aeabi_fmul+0x4a>
 8000ccc:	e086      	b.n	8000ddc <__aeabi_fmul+0x158>
 8000cce:	4642      	mov	r2, r8
 8000cd0:	00d0      	lsls	r0, r2, #3
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	3b7f      	subs	r3, #127	; 0x7f
 8000cd6:	18ed      	adds	r5, r5, r3
 8000cd8:	2300      	movs	r3, #0
 8000cda:	04d2      	lsls	r2, r2, #19
 8000cdc:	4302      	orrs	r2, r0
 8000cde:	4690      	mov	r8, r2
 8000ce0:	469c      	mov	ip, r3
 8000ce2:	0031      	movs	r1, r6
 8000ce4:	464b      	mov	r3, r9
 8000ce6:	4079      	eors	r1, r7
 8000ce8:	1c68      	adds	r0, r5, #1
 8000cea:	2b0f      	cmp	r3, #15
 8000cec:	d81c      	bhi.n	8000d28 <__aeabi_fmul+0xa4>
 8000cee:	4a76      	ldr	r2, [pc, #472]	; (8000ec8 <__aeabi_fmul+0x244>)
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	58d3      	ldr	r3, [r2, r3]
 8000cf4:	469f      	mov	pc, r3
 8000cf6:	0039      	movs	r1, r7
 8000cf8:	4644      	mov	r4, r8
 8000cfa:	46e2      	mov	sl, ip
 8000cfc:	4653      	mov	r3, sl
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d00f      	beq.n	8000d22 <__aeabi_fmul+0x9e>
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d100      	bne.n	8000d08 <__aeabi_fmul+0x84>
 8000d06:	e0d7      	b.n	8000eb8 <__aeabi_fmul+0x234>
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d137      	bne.n	8000d7c <__aeabi_fmul+0xf8>
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	2400      	movs	r4, #0
 8000d10:	05c0      	lsls	r0, r0, #23
 8000d12:	4320      	orrs	r0, r4
 8000d14:	07c9      	lsls	r1, r1, #31
 8000d16:	4308      	orrs	r0, r1
 8000d18:	bce0      	pop	{r5, r6, r7}
 8000d1a:	46ba      	mov	sl, r7
 8000d1c:	46b1      	mov	r9, r6
 8000d1e:	46a8      	mov	r8, r5
 8000d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d22:	20ff      	movs	r0, #255	; 0xff
 8000d24:	2400      	movs	r4, #0
 8000d26:	e7f3      	b.n	8000d10 <__aeabi_fmul+0x8c>
 8000d28:	0c26      	lsrs	r6, r4, #16
 8000d2a:	0424      	lsls	r4, r4, #16
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	4644      	mov	r4, r8
 8000d30:	0424      	lsls	r4, r4, #16
 8000d32:	0c24      	lsrs	r4, r4, #16
 8000d34:	4643      	mov	r3, r8
 8000d36:	0027      	movs	r7, r4
 8000d38:	0c1b      	lsrs	r3, r3, #16
 8000d3a:	4357      	muls	r7, r2
 8000d3c:	4374      	muls	r4, r6
 8000d3e:	435a      	muls	r2, r3
 8000d40:	435e      	muls	r6, r3
 8000d42:	1912      	adds	r2, r2, r4
 8000d44:	0c3b      	lsrs	r3, r7, #16
 8000d46:	189b      	adds	r3, r3, r2
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d903      	bls.n	8000d54 <__aeabi_fmul+0xd0>
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	0252      	lsls	r2, r2, #9
 8000d50:	4694      	mov	ip, r2
 8000d52:	4466      	add	r6, ip
 8000d54:	043f      	lsls	r7, r7, #16
 8000d56:	041a      	lsls	r2, r3, #16
 8000d58:	0c3f      	lsrs	r7, r7, #16
 8000d5a:	19d2      	adds	r2, r2, r7
 8000d5c:	0194      	lsls	r4, r2, #6
 8000d5e:	1e67      	subs	r7, r4, #1
 8000d60:	41bc      	sbcs	r4, r7
 8000d62:	0c1b      	lsrs	r3, r3, #16
 8000d64:	0e92      	lsrs	r2, r2, #26
 8000d66:	199b      	adds	r3, r3, r6
 8000d68:	4314      	orrs	r4, r2
 8000d6a:	019b      	lsls	r3, r3, #6
 8000d6c:	431c      	orrs	r4, r3
 8000d6e:	011b      	lsls	r3, r3, #4
 8000d70:	d400      	bmi.n	8000d74 <__aeabi_fmul+0xf0>
 8000d72:	e09b      	b.n	8000eac <__aeabi_fmul+0x228>
 8000d74:	2301      	movs	r3, #1
 8000d76:	0862      	lsrs	r2, r4, #1
 8000d78:	401c      	ands	r4, r3
 8000d7a:	4314      	orrs	r4, r2
 8000d7c:	0002      	movs	r2, r0
 8000d7e:	327f      	adds	r2, #127	; 0x7f
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	dd64      	ble.n	8000e4e <__aeabi_fmul+0x1ca>
 8000d84:	0763      	lsls	r3, r4, #29
 8000d86:	d004      	beq.n	8000d92 <__aeabi_fmul+0x10e>
 8000d88:	230f      	movs	r3, #15
 8000d8a:	4023      	ands	r3, r4
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d000      	beq.n	8000d92 <__aeabi_fmul+0x10e>
 8000d90:	3404      	adds	r4, #4
 8000d92:	0123      	lsls	r3, r4, #4
 8000d94:	d503      	bpl.n	8000d9e <__aeabi_fmul+0x11a>
 8000d96:	0002      	movs	r2, r0
 8000d98:	4b4c      	ldr	r3, [pc, #304]	; (8000ecc <__aeabi_fmul+0x248>)
 8000d9a:	3280      	adds	r2, #128	; 0x80
 8000d9c:	401c      	ands	r4, r3
 8000d9e:	2afe      	cmp	r2, #254	; 0xfe
 8000da0:	dcbf      	bgt.n	8000d22 <__aeabi_fmul+0x9e>
 8000da2:	01a4      	lsls	r4, r4, #6
 8000da4:	0a64      	lsrs	r4, r4, #9
 8000da6:	b2d0      	uxtb	r0, r2
 8000da8:	e7b2      	b.n	8000d10 <__aeabi_fmul+0x8c>
 8000daa:	4643      	mov	r3, r8
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d13d      	bne.n	8000e2c <__aeabi_fmul+0x1a8>
 8000db0:	464a      	mov	r2, r9
 8000db2:	3301      	adds	r3, #1
 8000db4:	431a      	orrs	r2, r3
 8000db6:	4691      	mov	r9, r2
 8000db8:	469c      	mov	ip, r3
 8000dba:	e792      	b.n	8000ce2 <__aeabi_fmul+0x5e>
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d129      	bne.n	8000e14 <__aeabi_fmul+0x190>
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b03      	subs	r3, #3
 8000dc6:	2500      	movs	r5, #0
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e774      	b.n	8000cb6 <__aeabi_fmul+0x32>
 8000dcc:	2c00      	cmp	r4, #0
 8000dce:	d11b      	bne.n	8000e08 <__aeabi_fmul+0x184>
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	4699      	mov	r9, r3
 8000dd4:	3b06      	subs	r3, #6
 8000dd6:	25ff      	movs	r5, #255	; 0xff
 8000dd8:	469a      	mov	sl, r3
 8000dda:	e76c      	b.n	8000cb6 <__aeabi_fmul+0x32>
 8000ddc:	4643      	mov	r3, r8
 8000dde:	35ff      	adds	r5, #255	; 0xff
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d10b      	bne.n	8000dfc <__aeabi_fmul+0x178>
 8000de4:	2302      	movs	r3, #2
 8000de6:	464a      	mov	r2, r9
 8000de8:	431a      	orrs	r2, r3
 8000dea:	4691      	mov	r9, r2
 8000dec:	469c      	mov	ip, r3
 8000dee:	e778      	b.n	8000ce2 <__aeabi_fmul+0x5e>
 8000df0:	4653      	mov	r3, sl
 8000df2:	0031      	movs	r1, r6
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d000      	beq.n	8000dfa <__aeabi_fmul+0x176>
 8000df8:	e783      	b.n	8000d02 <__aeabi_fmul+0x7e>
 8000dfa:	e792      	b.n	8000d22 <__aeabi_fmul+0x9e>
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	464a      	mov	r2, r9
 8000e00:	431a      	orrs	r2, r3
 8000e02:	4691      	mov	r9, r2
 8000e04:	469c      	mov	ip, r3
 8000e06:	e76c      	b.n	8000ce2 <__aeabi_fmul+0x5e>
 8000e08:	230c      	movs	r3, #12
 8000e0a:	4699      	mov	r9, r3
 8000e0c:	3b09      	subs	r3, #9
 8000e0e:	25ff      	movs	r5, #255	; 0xff
 8000e10:	469a      	mov	sl, r3
 8000e12:	e750      	b.n	8000cb6 <__aeabi_fmul+0x32>
 8000e14:	0020      	movs	r0, r4
 8000e16:	f001 ffa1 	bl	8002d5c <__clzsi2>
 8000e1a:	2576      	movs	r5, #118	; 0x76
 8000e1c:	1f43      	subs	r3, r0, #5
 8000e1e:	409c      	lsls	r4, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	426d      	negs	r5, r5
 8000e24:	4699      	mov	r9, r3
 8000e26:	469a      	mov	sl, r3
 8000e28:	1a2d      	subs	r5, r5, r0
 8000e2a:	e744      	b.n	8000cb6 <__aeabi_fmul+0x32>
 8000e2c:	4640      	mov	r0, r8
 8000e2e:	f001 ff95 	bl	8002d5c <__clzsi2>
 8000e32:	4642      	mov	r2, r8
 8000e34:	1f43      	subs	r3, r0, #5
 8000e36:	409a      	lsls	r2, r3
 8000e38:	2300      	movs	r3, #0
 8000e3a:	1a2d      	subs	r5, r5, r0
 8000e3c:	4690      	mov	r8, r2
 8000e3e:	469c      	mov	ip, r3
 8000e40:	3d76      	subs	r5, #118	; 0x76
 8000e42:	e74e      	b.n	8000ce2 <__aeabi_fmul+0x5e>
 8000e44:	2480      	movs	r4, #128	; 0x80
 8000e46:	2100      	movs	r1, #0
 8000e48:	20ff      	movs	r0, #255	; 0xff
 8000e4a:	03e4      	lsls	r4, r4, #15
 8000e4c:	e760      	b.n	8000d10 <__aeabi_fmul+0x8c>
 8000e4e:	2301      	movs	r3, #1
 8000e50:	1a9b      	subs	r3, r3, r2
 8000e52:	2b1b      	cmp	r3, #27
 8000e54:	dd00      	ble.n	8000e58 <__aeabi_fmul+0x1d4>
 8000e56:	e759      	b.n	8000d0c <__aeabi_fmul+0x88>
 8000e58:	0022      	movs	r2, r4
 8000e5a:	309e      	adds	r0, #158	; 0x9e
 8000e5c:	40da      	lsrs	r2, r3
 8000e5e:	4084      	lsls	r4, r0
 8000e60:	0013      	movs	r3, r2
 8000e62:	1e62      	subs	r2, r4, #1
 8000e64:	4194      	sbcs	r4, r2
 8000e66:	431c      	orrs	r4, r3
 8000e68:	0763      	lsls	r3, r4, #29
 8000e6a:	d004      	beq.n	8000e76 <__aeabi_fmul+0x1f2>
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	4023      	ands	r3, r4
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d000      	beq.n	8000e76 <__aeabi_fmul+0x1f2>
 8000e74:	3404      	adds	r4, #4
 8000e76:	0163      	lsls	r3, r4, #5
 8000e78:	d51a      	bpl.n	8000eb0 <__aeabi_fmul+0x22c>
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	2400      	movs	r4, #0
 8000e7e:	e747      	b.n	8000d10 <__aeabi_fmul+0x8c>
 8000e80:	2080      	movs	r0, #128	; 0x80
 8000e82:	03c0      	lsls	r0, r0, #15
 8000e84:	4204      	tst	r4, r0
 8000e86:	d009      	beq.n	8000e9c <__aeabi_fmul+0x218>
 8000e88:	4643      	mov	r3, r8
 8000e8a:	4203      	tst	r3, r0
 8000e8c:	d106      	bne.n	8000e9c <__aeabi_fmul+0x218>
 8000e8e:	4644      	mov	r4, r8
 8000e90:	4304      	orrs	r4, r0
 8000e92:	0264      	lsls	r4, r4, #9
 8000e94:	0039      	movs	r1, r7
 8000e96:	20ff      	movs	r0, #255	; 0xff
 8000e98:	0a64      	lsrs	r4, r4, #9
 8000e9a:	e739      	b.n	8000d10 <__aeabi_fmul+0x8c>
 8000e9c:	2080      	movs	r0, #128	; 0x80
 8000e9e:	03c0      	lsls	r0, r0, #15
 8000ea0:	4304      	orrs	r4, r0
 8000ea2:	0264      	lsls	r4, r4, #9
 8000ea4:	0031      	movs	r1, r6
 8000ea6:	20ff      	movs	r0, #255	; 0xff
 8000ea8:	0a64      	lsrs	r4, r4, #9
 8000eaa:	e731      	b.n	8000d10 <__aeabi_fmul+0x8c>
 8000eac:	0028      	movs	r0, r5
 8000eae:	e765      	b.n	8000d7c <__aeabi_fmul+0xf8>
 8000eb0:	01a4      	lsls	r4, r4, #6
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	0a64      	lsrs	r4, r4, #9
 8000eb6:	e72b      	b.n	8000d10 <__aeabi_fmul+0x8c>
 8000eb8:	2080      	movs	r0, #128	; 0x80
 8000eba:	03c0      	lsls	r0, r0, #15
 8000ebc:	4304      	orrs	r4, r0
 8000ebe:	0264      	lsls	r4, r4, #9
 8000ec0:	20ff      	movs	r0, #255	; 0xff
 8000ec2:	0a64      	lsrs	r4, r4, #9
 8000ec4:	e724      	b.n	8000d10 <__aeabi_fmul+0x8c>
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	0800c390 	.word	0x0800c390
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__aeabi_i2f>:
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	d013      	beq.n	8000efe <__aeabi_i2f+0x2e>
 8000ed6:	17c3      	asrs	r3, r0, #31
 8000ed8:	18c6      	adds	r6, r0, r3
 8000eda:	405e      	eors	r6, r3
 8000edc:	0fc4      	lsrs	r4, r0, #31
 8000ede:	0030      	movs	r0, r6
 8000ee0:	f001 ff3c 	bl	8002d5c <__clzsi2>
 8000ee4:	239e      	movs	r3, #158	; 0x9e
 8000ee6:	0005      	movs	r5, r0
 8000ee8:	1a1b      	subs	r3, r3, r0
 8000eea:	2b96      	cmp	r3, #150	; 0x96
 8000eec:	dc0f      	bgt.n	8000f0e <__aeabi_i2f+0x3e>
 8000eee:	2808      	cmp	r0, #8
 8000ef0:	dd01      	ble.n	8000ef6 <__aeabi_i2f+0x26>
 8000ef2:	3d08      	subs	r5, #8
 8000ef4:	40ae      	lsls	r6, r5
 8000ef6:	0276      	lsls	r6, r6, #9
 8000ef8:	0a76      	lsrs	r6, r6, #9
 8000efa:	b2d8      	uxtb	r0, r3
 8000efc:	e002      	b.n	8000f04 <__aeabi_i2f+0x34>
 8000efe:	2400      	movs	r4, #0
 8000f00:	2000      	movs	r0, #0
 8000f02:	2600      	movs	r6, #0
 8000f04:	05c0      	lsls	r0, r0, #23
 8000f06:	4330      	orrs	r0, r6
 8000f08:	07e4      	lsls	r4, r4, #31
 8000f0a:	4320      	orrs	r0, r4
 8000f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f0e:	2b99      	cmp	r3, #153	; 0x99
 8000f10:	dd0c      	ble.n	8000f2c <__aeabi_i2f+0x5c>
 8000f12:	2205      	movs	r2, #5
 8000f14:	0031      	movs	r1, r6
 8000f16:	1a12      	subs	r2, r2, r0
 8000f18:	40d1      	lsrs	r1, r2
 8000f1a:	000a      	movs	r2, r1
 8000f1c:	0001      	movs	r1, r0
 8000f1e:	0030      	movs	r0, r6
 8000f20:	311b      	adds	r1, #27
 8000f22:	4088      	lsls	r0, r1
 8000f24:	1e41      	subs	r1, r0, #1
 8000f26:	4188      	sbcs	r0, r1
 8000f28:	4302      	orrs	r2, r0
 8000f2a:	0016      	movs	r6, r2
 8000f2c:	2d05      	cmp	r5, #5
 8000f2e:	dc12      	bgt.n	8000f56 <__aeabi_i2f+0x86>
 8000f30:	0031      	movs	r1, r6
 8000f32:	4f0d      	ldr	r7, [pc, #52]	; (8000f68 <__aeabi_i2f+0x98>)
 8000f34:	4039      	ands	r1, r7
 8000f36:	0772      	lsls	r2, r6, #29
 8000f38:	d009      	beq.n	8000f4e <__aeabi_i2f+0x7e>
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	4030      	ands	r0, r6
 8000f3e:	2804      	cmp	r0, #4
 8000f40:	d005      	beq.n	8000f4e <__aeabi_i2f+0x7e>
 8000f42:	3104      	adds	r1, #4
 8000f44:	014a      	lsls	r2, r1, #5
 8000f46:	d502      	bpl.n	8000f4e <__aeabi_i2f+0x7e>
 8000f48:	239f      	movs	r3, #159	; 0x9f
 8000f4a:	4039      	ands	r1, r7
 8000f4c:	1b5b      	subs	r3, r3, r5
 8000f4e:	0189      	lsls	r1, r1, #6
 8000f50:	0a4e      	lsrs	r6, r1, #9
 8000f52:	b2d8      	uxtb	r0, r3
 8000f54:	e7d6      	b.n	8000f04 <__aeabi_i2f+0x34>
 8000f56:	1f6a      	subs	r2, r5, #5
 8000f58:	4096      	lsls	r6, r2
 8000f5a:	0031      	movs	r1, r6
 8000f5c:	4f02      	ldr	r7, [pc, #8]	; (8000f68 <__aeabi_i2f+0x98>)
 8000f5e:	4039      	ands	r1, r7
 8000f60:	0772      	lsls	r2, r6, #29
 8000f62:	d0f4      	beq.n	8000f4e <__aeabi_i2f+0x7e>
 8000f64:	e7e9      	b.n	8000f3a <__aeabi_i2f+0x6a>
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	fbffffff 	.word	0xfbffffff

08000f6c <__aeabi_ui2f>:
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	1e05      	subs	r5, r0, #0
 8000f70:	d00e      	beq.n	8000f90 <__aeabi_ui2f+0x24>
 8000f72:	f001 fef3 	bl	8002d5c <__clzsi2>
 8000f76:	239e      	movs	r3, #158	; 0x9e
 8000f78:	0004      	movs	r4, r0
 8000f7a:	1a1b      	subs	r3, r3, r0
 8000f7c:	2b96      	cmp	r3, #150	; 0x96
 8000f7e:	dc0c      	bgt.n	8000f9a <__aeabi_ui2f+0x2e>
 8000f80:	2808      	cmp	r0, #8
 8000f82:	dd01      	ble.n	8000f88 <__aeabi_ui2f+0x1c>
 8000f84:	3c08      	subs	r4, #8
 8000f86:	40a5      	lsls	r5, r4
 8000f88:	026d      	lsls	r5, r5, #9
 8000f8a:	0a6d      	lsrs	r5, r5, #9
 8000f8c:	b2d8      	uxtb	r0, r3
 8000f8e:	e001      	b.n	8000f94 <__aeabi_ui2f+0x28>
 8000f90:	2000      	movs	r0, #0
 8000f92:	2500      	movs	r5, #0
 8000f94:	05c0      	lsls	r0, r0, #23
 8000f96:	4328      	orrs	r0, r5
 8000f98:	bd70      	pop	{r4, r5, r6, pc}
 8000f9a:	2b99      	cmp	r3, #153	; 0x99
 8000f9c:	dd09      	ble.n	8000fb2 <__aeabi_ui2f+0x46>
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	0029      	movs	r1, r5
 8000fa2:	321b      	adds	r2, #27
 8000fa4:	4091      	lsls	r1, r2
 8000fa6:	1e4a      	subs	r2, r1, #1
 8000fa8:	4191      	sbcs	r1, r2
 8000faa:	2205      	movs	r2, #5
 8000fac:	1a12      	subs	r2, r2, r0
 8000fae:	40d5      	lsrs	r5, r2
 8000fb0:	430d      	orrs	r5, r1
 8000fb2:	2c05      	cmp	r4, #5
 8000fb4:	dc12      	bgt.n	8000fdc <__aeabi_ui2f+0x70>
 8000fb6:	0029      	movs	r1, r5
 8000fb8:	4e0c      	ldr	r6, [pc, #48]	; (8000fec <__aeabi_ui2f+0x80>)
 8000fba:	4031      	ands	r1, r6
 8000fbc:	076a      	lsls	r2, r5, #29
 8000fbe:	d009      	beq.n	8000fd4 <__aeabi_ui2f+0x68>
 8000fc0:	200f      	movs	r0, #15
 8000fc2:	4028      	ands	r0, r5
 8000fc4:	2804      	cmp	r0, #4
 8000fc6:	d005      	beq.n	8000fd4 <__aeabi_ui2f+0x68>
 8000fc8:	3104      	adds	r1, #4
 8000fca:	014a      	lsls	r2, r1, #5
 8000fcc:	d502      	bpl.n	8000fd4 <__aeabi_ui2f+0x68>
 8000fce:	239f      	movs	r3, #159	; 0x9f
 8000fd0:	4031      	ands	r1, r6
 8000fd2:	1b1b      	subs	r3, r3, r4
 8000fd4:	0189      	lsls	r1, r1, #6
 8000fd6:	0a4d      	lsrs	r5, r1, #9
 8000fd8:	b2d8      	uxtb	r0, r3
 8000fda:	e7db      	b.n	8000f94 <__aeabi_ui2f+0x28>
 8000fdc:	1f62      	subs	r2, r4, #5
 8000fde:	4095      	lsls	r5, r2
 8000fe0:	0029      	movs	r1, r5
 8000fe2:	4e02      	ldr	r6, [pc, #8]	; (8000fec <__aeabi_ui2f+0x80>)
 8000fe4:	4031      	ands	r1, r6
 8000fe6:	076a      	lsls	r2, r5, #29
 8000fe8:	d0f4      	beq.n	8000fd4 <__aeabi_ui2f+0x68>
 8000fea:	e7e9      	b.n	8000fc0 <__aeabi_ui2f+0x54>
 8000fec:	fbffffff 	.word	0xfbffffff

08000ff0 <__aeabi_dadd>:
 8000ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff2:	464f      	mov	r7, r9
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	000d      	movs	r5, r1
 8000ffa:	0004      	movs	r4, r0
 8000ffc:	b5c0      	push	{r6, r7, lr}
 8000ffe:	001f      	movs	r7, r3
 8001000:	0011      	movs	r1, r2
 8001002:	0328      	lsls	r0, r5, #12
 8001004:	0f62      	lsrs	r2, r4, #29
 8001006:	0a40      	lsrs	r0, r0, #9
 8001008:	4310      	orrs	r0, r2
 800100a:	007a      	lsls	r2, r7, #1
 800100c:	0d52      	lsrs	r2, r2, #21
 800100e:	00e3      	lsls	r3, r4, #3
 8001010:	033c      	lsls	r4, r7, #12
 8001012:	4691      	mov	r9, r2
 8001014:	0a64      	lsrs	r4, r4, #9
 8001016:	0ffa      	lsrs	r2, r7, #31
 8001018:	0f4f      	lsrs	r7, r1, #29
 800101a:	006e      	lsls	r6, r5, #1
 800101c:	4327      	orrs	r7, r4
 800101e:	4692      	mov	sl, r2
 8001020:	46b8      	mov	r8, r7
 8001022:	0d76      	lsrs	r6, r6, #21
 8001024:	0fed      	lsrs	r5, r5, #31
 8001026:	00c9      	lsls	r1, r1, #3
 8001028:	4295      	cmp	r5, r2
 800102a:	d100      	bne.n	800102e <__aeabi_dadd+0x3e>
 800102c:	e099      	b.n	8001162 <__aeabi_dadd+0x172>
 800102e:	464c      	mov	r4, r9
 8001030:	1b34      	subs	r4, r6, r4
 8001032:	46a4      	mov	ip, r4
 8001034:	2c00      	cmp	r4, #0
 8001036:	dc00      	bgt.n	800103a <__aeabi_dadd+0x4a>
 8001038:	e07c      	b.n	8001134 <__aeabi_dadd+0x144>
 800103a:	464a      	mov	r2, r9
 800103c:	2a00      	cmp	r2, #0
 800103e:	d100      	bne.n	8001042 <__aeabi_dadd+0x52>
 8001040:	e0b8      	b.n	80011b4 <__aeabi_dadd+0x1c4>
 8001042:	4ac5      	ldr	r2, [pc, #788]	; (8001358 <__aeabi_dadd+0x368>)
 8001044:	4296      	cmp	r6, r2
 8001046:	d100      	bne.n	800104a <__aeabi_dadd+0x5a>
 8001048:	e11c      	b.n	8001284 <__aeabi_dadd+0x294>
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	003c      	movs	r4, r7
 800104e:	0412      	lsls	r2, r2, #16
 8001050:	4314      	orrs	r4, r2
 8001052:	46a0      	mov	r8, r4
 8001054:	4662      	mov	r2, ip
 8001056:	2a38      	cmp	r2, #56	; 0x38
 8001058:	dd00      	ble.n	800105c <__aeabi_dadd+0x6c>
 800105a:	e161      	b.n	8001320 <__aeabi_dadd+0x330>
 800105c:	2a1f      	cmp	r2, #31
 800105e:	dd00      	ble.n	8001062 <__aeabi_dadd+0x72>
 8001060:	e1cc      	b.n	80013fc <__aeabi_dadd+0x40c>
 8001062:	4664      	mov	r4, ip
 8001064:	2220      	movs	r2, #32
 8001066:	1b12      	subs	r2, r2, r4
 8001068:	4644      	mov	r4, r8
 800106a:	4094      	lsls	r4, r2
 800106c:	000f      	movs	r7, r1
 800106e:	46a1      	mov	r9, r4
 8001070:	4664      	mov	r4, ip
 8001072:	4091      	lsls	r1, r2
 8001074:	40e7      	lsrs	r7, r4
 8001076:	464c      	mov	r4, r9
 8001078:	1e4a      	subs	r2, r1, #1
 800107a:	4191      	sbcs	r1, r2
 800107c:	433c      	orrs	r4, r7
 800107e:	4642      	mov	r2, r8
 8001080:	4321      	orrs	r1, r4
 8001082:	4664      	mov	r4, ip
 8001084:	40e2      	lsrs	r2, r4
 8001086:	1a80      	subs	r0, r0, r2
 8001088:	1a5c      	subs	r4, r3, r1
 800108a:	42a3      	cmp	r3, r4
 800108c:	419b      	sbcs	r3, r3
 800108e:	425f      	negs	r7, r3
 8001090:	1bc7      	subs	r7, r0, r7
 8001092:	023b      	lsls	r3, r7, #8
 8001094:	d400      	bmi.n	8001098 <__aeabi_dadd+0xa8>
 8001096:	e0d0      	b.n	800123a <__aeabi_dadd+0x24a>
 8001098:	027f      	lsls	r7, r7, #9
 800109a:	0a7f      	lsrs	r7, r7, #9
 800109c:	2f00      	cmp	r7, #0
 800109e:	d100      	bne.n	80010a2 <__aeabi_dadd+0xb2>
 80010a0:	e0ff      	b.n	80012a2 <__aeabi_dadd+0x2b2>
 80010a2:	0038      	movs	r0, r7
 80010a4:	f001 fe5a 	bl	8002d5c <__clzsi2>
 80010a8:	0001      	movs	r1, r0
 80010aa:	3908      	subs	r1, #8
 80010ac:	2320      	movs	r3, #32
 80010ae:	0022      	movs	r2, r4
 80010b0:	1a5b      	subs	r3, r3, r1
 80010b2:	408f      	lsls	r7, r1
 80010b4:	40da      	lsrs	r2, r3
 80010b6:	408c      	lsls	r4, r1
 80010b8:	4317      	orrs	r7, r2
 80010ba:	42b1      	cmp	r1, r6
 80010bc:	da00      	bge.n	80010c0 <__aeabi_dadd+0xd0>
 80010be:	e0ff      	b.n	80012c0 <__aeabi_dadd+0x2d0>
 80010c0:	1b89      	subs	r1, r1, r6
 80010c2:	1c4b      	adds	r3, r1, #1
 80010c4:	2b1f      	cmp	r3, #31
 80010c6:	dd00      	ble.n	80010ca <__aeabi_dadd+0xda>
 80010c8:	e0a8      	b.n	800121c <__aeabi_dadd+0x22c>
 80010ca:	2220      	movs	r2, #32
 80010cc:	0039      	movs	r1, r7
 80010ce:	1ad2      	subs	r2, r2, r3
 80010d0:	0020      	movs	r0, r4
 80010d2:	4094      	lsls	r4, r2
 80010d4:	4091      	lsls	r1, r2
 80010d6:	40d8      	lsrs	r0, r3
 80010d8:	1e62      	subs	r2, r4, #1
 80010da:	4194      	sbcs	r4, r2
 80010dc:	40df      	lsrs	r7, r3
 80010de:	2600      	movs	r6, #0
 80010e0:	4301      	orrs	r1, r0
 80010e2:	430c      	orrs	r4, r1
 80010e4:	0763      	lsls	r3, r4, #29
 80010e6:	d009      	beq.n	80010fc <__aeabi_dadd+0x10c>
 80010e8:	230f      	movs	r3, #15
 80010ea:	4023      	ands	r3, r4
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d005      	beq.n	80010fc <__aeabi_dadd+0x10c>
 80010f0:	1d23      	adds	r3, r4, #4
 80010f2:	42a3      	cmp	r3, r4
 80010f4:	41a4      	sbcs	r4, r4
 80010f6:	4264      	negs	r4, r4
 80010f8:	193f      	adds	r7, r7, r4
 80010fa:	001c      	movs	r4, r3
 80010fc:	023b      	lsls	r3, r7, #8
 80010fe:	d400      	bmi.n	8001102 <__aeabi_dadd+0x112>
 8001100:	e09e      	b.n	8001240 <__aeabi_dadd+0x250>
 8001102:	4b95      	ldr	r3, [pc, #596]	; (8001358 <__aeabi_dadd+0x368>)
 8001104:	3601      	adds	r6, #1
 8001106:	429e      	cmp	r6, r3
 8001108:	d100      	bne.n	800110c <__aeabi_dadd+0x11c>
 800110a:	e0b7      	b.n	800127c <__aeabi_dadd+0x28c>
 800110c:	4a93      	ldr	r2, [pc, #588]	; (800135c <__aeabi_dadd+0x36c>)
 800110e:	08e4      	lsrs	r4, r4, #3
 8001110:	4017      	ands	r7, r2
 8001112:	077b      	lsls	r3, r7, #29
 8001114:	0571      	lsls	r1, r6, #21
 8001116:	027f      	lsls	r7, r7, #9
 8001118:	4323      	orrs	r3, r4
 800111a:	0b3f      	lsrs	r7, r7, #12
 800111c:	0d4a      	lsrs	r2, r1, #21
 800111e:	0512      	lsls	r2, r2, #20
 8001120:	433a      	orrs	r2, r7
 8001122:	07ed      	lsls	r5, r5, #31
 8001124:	432a      	orrs	r2, r5
 8001126:	0018      	movs	r0, r3
 8001128:	0011      	movs	r1, r2
 800112a:	bce0      	pop	{r5, r6, r7}
 800112c:	46ba      	mov	sl, r7
 800112e:	46b1      	mov	r9, r6
 8001130:	46a8      	mov	r8, r5
 8001132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001134:	2c00      	cmp	r4, #0
 8001136:	d04b      	beq.n	80011d0 <__aeabi_dadd+0x1e0>
 8001138:	464c      	mov	r4, r9
 800113a:	1ba4      	subs	r4, r4, r6
 800113c:	46a4      	mov	ip, r4
 800113e:	2e00      	cmp	r6, #0
 8001140:	d000      	beq.n	8001144 <__aeabi_dadd+0x154>
 8001142:	e123      	b.n	800138c <__aeabi_dadd+0x39c>
 8001144:	0004      	movs	r4, r0
 8001146:	431c      	orrs	r4, r3
 8001148:	d100      	bne.n	800114c <__aeabi_dadd+0x15c>
 800114a:	e1af      	b.n	80014ac <__aeabi_dadd+0x4bc>
 800114c:	4662      	mov	r2, ip
 800114e:	1e54      	subs	r4, r2, #1
 8001150:	2a01      	cmp	r2, #1
 8001152:	d100      	bne.n	8001156 <__aeabi_dadd+0x166>
 8001154:	e215      	b.n	8001582 <__aeabi_dadd+0x592>
 8001156:	4d80      	ldr	r5, [pc, #512]	; (8001358 <__aeabi_dadd+0x368>)
 8001158:	45ac      	cmp	ip, r5
 800115a:	d100      	bne.n	800115e <__aeabi_dadd+0x16e>
 800115c:	e1c8      	b.n	80014f0 <__aeabi_dadd+0x500>
 800115e:	46a4      	mov	ip, r4
 8001160:	e11b      	b.n	800139a <__aeabi_dadd+0x3aa>
 8001162:	464a      	mov	r2, r9
 8001164:	1ab2      	subs	r2, r6, r2
 8001166:	4694      	mov	ip, r2
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_dadd+0x17e>
 800116c:	e0ac      	b.n	80012c8 <__aeabi_dadd+0x2d8>
 800116e:	464a      	mov	r2, r9
 8001170:	2a00      	cmp	r2, #0
 8001172:	d043      	beq.n	80011fc <__aeabi_dadd+0x20c>
 8001174:	4a78      	ldr	r2, [pc, #480]	; (8001358 <__aeabi_dadd+0x368>)
 8001176:	4296      	cmp	r6, r2
 8001178:	d100      	bne.n	800117c <__aeabi_dadd+0x18c>
 800117a:	e1af      	b.n	80014dc <__aeabi_dadd+0x4ec>
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	003c      	movs	r4, r7
 8001180:	0412      	lsls	r2, r2, #16
 8001182:	4314      	orrs	r4, r2
 8001184:	46a0      	mov	r8, r4
 8001186:	4662      	mov	r2, ip
 8001188:	2a38      	cmp	r2, #56	; 0x38
 800118a:	dc67      	bgt.n	800125c <__aeabi_dadd+0x26c>
 800118c:	2a1f      	cmp	r2, #31
 800118e:	dc00      	bgt.n	8001192 <__aeabi_dadd+0x1a2>
 8001190:	e15f      	b.n	8001452 <__aeabi_dadd+0x462>
 8001192:	4647      	mov	r7, r8
 8001194:	3a20      	subs	r2, #32
 8001196:	40d7      	lsrs	r7, r2
 8001198:	4662      	mov	r2, ip
 800119a:	2a20      	cmp	r2, #32
 800119c:	d005      	beq.n	80011aa <__aeabi_dadd+0x1ba>
 800119e:	4664      	mov	r4, ip
 80011a0:	2240      	movs	r2, #64	; 0x40
 80011a2:	1b12      	subs	r2, r2, r4
 80011a4:	4644      	mov	r4, r8
 80011a6:	4094      	lsls	r4, r2
 80011a8:	4321      	orrs	r1, r4
 80011aa:	1e4a      	subs	r2, r1, #1
 80011ac:	4191      	sbcs	r1, r2
 80011ae:	000c      	movs	r4, r1
 80011b0:	433c      	orrs	r4, r7
 80011b2:	e057      	b.n	8001264 <__aeabi_dadd+0x274>
 80011b4:	003a      	movs	r2, r7
 80011b6:	430a      	orrs	r2, r1
 80011b8:	d100      	bne.n	80011bc <__aeabi_dadd+0x1cc>
 80011ba:	e105      	b.n	80013c8 <__aeabi_dadd+0x3d8>
 80011bc:	0022      	movs	r2, r4
 80011be:	3a01      	subs	r2, #1
 80011c0:	2c01      	cmp	r4, #1
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dadd+0x1d6>
 80011c4:	e182      	b.n	80014cc <__aeabi_dadd+0x4dc>
 80011c6:	4c64      	ldr	r4, [pc, #400]	; (8001358 <__aeabi_dadd+0x368>)
 80011c8:	45a4      	cmp	ip, r4
 80011ca:	d05b      	beq.n	8001284 <__aeabi_dadd+0x294>
 80011cc:	4694      	mov	ip, r2
 80011ce:	e741      	b.n	8001054 <__aeabi_dadd+0x64>
 80011d0:	4c63      	ldr	r4, [pc, #396]	; (8001360 <__aeabi_dadd+0x370>)
 80011d2:	1c77      	adds	r7, r6, #1
 80011d4:	4227      	tst	r7, r4
 80011d6:	d000      	beq.n	80011da <__aeabi_dadd+0x1ea>
 80011d8:	e0c4      	b.n	8001364 <__aeabi_dadd+0x374>
 80011da:	0004      	movs	r4, r0
 80011dc:	431c      	orrs	r4, r3
 80011de:	2e00      	cmp	r6, #0
 80011e0:	d000      	beq.n	80011e4 <__aeabi_dadd+0x1f4>
 80011e2:	e169      	b.n	80014b8 <__aeabi_dadd+0x4c8>
 80011e4:	2c00      	cmp	r4, #0
 80011e6:	d100      	bne.n	80011ea <__aeabi_dadd+0x1fa>
 80011e8:	e1bf      	b.n	800156a <__aeabi_dadd+0x57a>
 80011ea:	4644      	mov	r4, r8
 80011ec:	430c      	orrs	r4, r1
 80011ee:	d000      	beq.n	80011f2 <__aeabi_dadd+0x202>
 80011f0:	e1d0      	b.n	8001594 <__aeabi_dadd+0x5a4>
 80011f2:	0742      	lsls	r2, r0, #29
 80011f4:	08db      	lsrs	r3, r3, #3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	08c0      	lsrs	r0, r0, #3
 80011fa:	e029      	b.n	8001250 <__aeabi_dadd+0x260>
 80011fc:	003a      	movs	r2, r7
 80011fe:	430a      	orrs	r2, r1
 8001200:	d100      	bne.n	8001204 <__aeabi_dadd+0x214>
 8001202:	e170      	b.n	80014e6 <__aeabi_dadd+0x4f6>
 8001204:	4662      	mov	r2, ip
 8001206:	4664      	mov	r4, ip
 8001208:	3a01      	subs	r2, #1
 800120a:	2c01      	cmp	r4, #1
 800120c:	d100      	bne.n	8001210 <__aeabi_dadd+0x220>
 800120e:	e0e0      	b.n	80013d2 <__aeabi_dadd+0x3e2>
 8001210:	4c51      	ldr	r4, [pc, #324]	; (8001358 <__aeabi_dadd+0x368>)
 8001212:	45a4      	cmp	ip, r4
 8001214:	d100      	bne.n	8001218 <__aeabi_dadd+0x228>
 8001216:	e161      	b.n	80014dc <__aeabi_dadd+0x4ec>
 8001218:	4694      	mov	ip, r2
 800121a:	e7b4      	b.n	8001186 <__aeabi_dadd+0x196>
 800121c:	003a      	movs	r2, r7
 800121e:	391f      	subs	r1, #31
 8001220:	40ca      	lsrs	r2, r1
 8001222:	0011      	movs	r1, r2
 8001224:	2b20      	cmp	r3, #32
 8001226:	d003      	beq.n	8001230 <__aeabi_dadd+0x240>
 8001228:	2240      	movs	r2, #64	; 0x40
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	409f      	lsls	r7, r3
 800122e:	433c      	orrs	r4, r7
 8001230:	1e63      	subs	r3, r4, #1
 8001232:	419c      	sbcs	r4, r3
 8001234:	2700      	movs	r7, #0
 8001236:	2600      	movs	r6, #0
 8001238:	430c      	orrs	r4, r1
 800123a:	0763      	lsls	r3, r4, #29
 800123c:	d000      	beq.n	8001240 <__aeabi_dadd+0x250>
 800123e:	e753      	b.n	80010e8 <__aeabi_dadd+0xf8>
 8001240:	46b4      	mov	ip, r6
 8001242:	08e4      	lsrs	r4, r4, #3
 8001244:	077b      	lsls	r3, r7, #29
 8001246:	4323      	orrs	r3, r4
 8001248:	08f8      	lsrs	r0, r7, #3
 800124a:	4a43      	ldr	r2, [pc, #268]	; (8001358 <__aeabi_dadd+0x368>)
 800124c:	4594      	cmp	ip, r2
 800124e:	d01d      	beq.n	800128c <__aeabi_dadd+0x29c>
 8001250:	4662      	mov	r2, ip
 8001252:	0307      	lsls	r7, r0, #12
 8001254:	0552      	lsls	r2, r2, #21
 8001256:	0b3f      	lsrs	r7, r7, #12
 8001258:	0d52      	lsrs	r2, r2, #21
 800125a:	e760      	b.n	800111e <__aeabi_dadd+0x12e>
 800125c:	4644      	mov	r4, r8
 800125e:	430c      	orrs	r4, r1
 8001260:	1e62      	subs	r2, r4, #1
 8001262:	4194      	sbcs	r4, r2
 8001264:	18e4      	adds	r4, r4, r3
 8001266:	429c      	cmp	r4, r3
 8001268:	419b      	sbcs	r3, r3
 800126a:	425f      	negs	r7, r3
 800126c:	183f      	adds	r7, r7, r0
 800126e:	023b      	lsls	r3, r7, #8
 8001270:	d5e3      	bpl.n	800123a <__aeabi_dadd+0x24a>
 8001272:	4b39      	ldr	r3, [pc, #228]	; (8001358 <__aeabi_dadd+0x368>)
 8001274:	3601      	adds	r6, #1
 8001276:	429e      	cmp	r6, r3
 8001278:	d000      	beq.n	800127c <__aeabi_dadd+0x28c>
 800127a:	e0b5      	b.n	80013e8 <__aeabi_dadd+0x3f8>
 800127c:	0032      	movs	r2, r6
 800127e:	2700      	movs	r7, #0
 8001280:	2300      	movs	r3, #0
 8001282:	e74c      	b.n	800111e <__aeabi_dadd+0x12e>
 8001284:	0742      	lsls	r2, r0, #29
 8001286:	08db      	lsrs	r3, r3, #3
 8001288:	4313      	orrs	r3, r2
 800128a:	08c0      	lsrs	r0, r0, #3
 800128c:	001a      	movs	r2, r3
 800128e:	4302      	orrs	r2, r0
 8001290:	d100      	bne.n	8001294 <__aeabi_dadd+0x2a4>
 8001292:	e1e1      	b.n	8001658 <__aeabi_dadd+0x668>
 8001294:	2780      	movs	r7, #128	; 0x80
 8001296:	033f      	lsls	r7, r7, #12
 8001298:	4307      	orrs	r7, r0
 800129a:	033f      	lsls	r7, r7, #12
 800129c:	4a2e      	ldr	r2, [pc, #184]	; (8001358 <__aeabi_dadd+0x368>)
 800129e:	0b3f      	lsrs	r7, r7, #12
 80012a0:	e73d      	b.n	800111e <__aeabi_dadd+0x12e>
 80012a2:	0020      	movs	r0, r4
 80012a4:	f001 fd5a 	bl	8002d5c <__clzsi2>
 80012a8:	0001      	movs	r1, r0
 80012aa:	3118      	adds	r1, #24
 80012ac:	291f      	cmp	r1, #31
 80012ae:	dc00      	bgt.n	80012b2 <__aeabi_dadd+0x2c2>
 80012b0:	e6fc      	b.n	80010ac <__aeabi_dadd+0xbc>
 80012b2:	3808      	subs	r0, #8
 80012b4:	4084      	lsls	r4, r0
 80012b6:	0027      	movs	r7, r4
 80012b8:	2400      	movs	r4, #0
 80012ba:	42b1      	cmp	r1, r6
 80012bc:	db00      	blt.n	80012c0 <__aeabi_dadd+0x2d0>
 80012be:	e6ff      	b.n	80010c0 <__aeabi_dadd+0xd0>
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <__aeabi_dadd+0x36c>)
 80012c2:	1a76      	subs	r6, r6, r1
 80012c4:	4017      	ands	r7, r2
 80012c6:	e70d      	b.n	80010e4 <__aeabi_dadd+0xf4>
 80012c8:	2a00      	cmp	r2, #0
 80012ca:	d02f      	beq.n	800132c <__aeabi_dadd+0x33c>
 80012cc:	464a      	mov	r2, r9
 80012ce:	1b92      	subs	r2, r2, r6
 80012d0:	4694      	mov	ip, r2
 80012d2:	2e00      	cmp	r6, #0
 80012d4:	d100      	bne.n	80012d8 <__aeabi_dadd+0x2e8>
 80012d6:	e0ad      	b.n	8001434 <__aeabi_dadd+0x444>
 80012d8:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <__aeabi_dadd+0x368>)
 80012da:	4591      	cmp	r9, r2
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dadd+0x2f0>
 80012de:	e10f      	b.n	8001500 <__aeabi_dadd+0x510>
 80012e0:	2280      	movs	r2, #128	; 0x80
 80012e2:	0412      	lsls	r2, r2, #16
 80012e4:	4310      	orrs	r0, r2
 80012e6:	4662      	mov	r2, ip
 80012e8:	2a38      	cmp	r2, #56	; 0x38
 80012ea:	dd00      	ble.n	80012ee <__aeabi_dadd+0x2fe>
 80012ec:	e10f      	b.n	800150e <__aeabi_dadd+0x51e>
 80012ee:	2a1f      	cmp	r2, #31
 80012f0:	dd00      	ble.n	80012f4 <__aeabi_dadd+0x304>
 80012f2:	e180      	b.n	80015f6 <__aeabi_dadd+0x606>
 80012f4:	4664      	mov	r4, ip
 80012f6:	2220      	movs	r2, #32
 80012f8:	001e      	movs	r6, r3
 80012fa:	1b12      	subs	r2, r2, r4
 80012fc:	4667      	mov	r7, ip
 80012fe:	0004      	movs	r4, r0
 8001300:	4093      	lsls	r3, r2
 8001302:	4094      	lsls	r4, r2
 8001304:	40fe      	lsrs	r6, r7
 8001306:	1e5a      	subs	r2, r3, #1
 8001308:	4193      	sbcs	r3, r2
 800130a:	40f8      	lsrs	r0, r7
 800130c:	4334      	orrs	r4, r6
 800130e:	431c      	orrs	r4, r3
 8001310:	4480      	add	r8, r0
 8001312:	1864      	adds	r4, r4, r1
 8001314:	428c      	cmp	r4, r1
 8001316:	41bf      	sbcs	r7, r7
 8001318:	427f      	negs	r7, r7
 800131a:	464e      	mov	r6, r9
 800131c:	4447      	add	r7, r8
 800131e:	e7a6      	b.n	800126e <__aeabi_dadd+0x27e>
 8001320:	4642      	mov	r2, r8
 8001322:	430a      	orrs	r2, r1
 8001324:	0011      	movs	r1, r2
 8001326:	1e4a      	subs	r2, r1, #1
 8001328:	4191      	sbcs	r1, r2
 800132a:	e6ad      	b.n	8001088 <__aeabi_dadd+0x98>
 800132c:	4c0c      	ldr	r4, [pc, #48]	; (8001360 <__aeabi_dadd+0x370>)
 800132e:	1c72      	adds	r2, r6, #1
 8001330:	4222      	tst	r2, r4
 8001332:	d000      	beq.n	8001336 <__aeabi_dadd+0x346>
 8001334:	e0a1      	b.n	800147a <__aeabi_dadd+0x48a>
 8001336:	0002      	movs	r2, r0
 8001338:	431a      	orrs	r2, r3
 800133a:	2e00      	cmp	r6, #0
 800133c:	d000      	beq.n	8001340 <__aeabi_dadd+0x350>
 800133e:	e0fa      	b.n	8001536 <__aeabi_dadd+0x546>
 8001340:	2a00      	cmp	r2, #0
 8001342:	d100      	bne.n	8001346 <__aeabi_dadd+0x356>
 8001344:	e145      	b.n	80015d2 <__aeabi_dadd+0x5e2>
 8001346:	003a      	movs	r2, r7
 8001348:	430a      	orrs	r2, r1
 800134a:	d000      	beq.n	800134e <__aeabi_dadd+0x35e>
 800134c:	e146      	b.n	80015dc <__aeabi_dadd+0x5ec>
 800134e:	0742      	lsls	r2, r0, #29
 8001350:	08db      	lsrs	r3, r3, #3
 8001352:	4313      	orrs	r3, r2
 8001354:	08c0      	lsrs	r0, r0, #3
 8001356:	e77b      	b.n	8001250 <__aeabi_dadd+0x260>
 8001358:	000007ff 	.word	0x000007ff
 800135c:	ff7fffff 	.word	0xff7fffff
 8001360:	000007fe 	.word	0x000007fe
 8001364:	4647      	mov	r7, r8
 8001366:	1a5c      	subs	r4, r3, r1
 8001368:	1bc2      	subs	r2, r0, r7
 800136a:	42a3      	cmp	r3, r4
 800136c:	41bf      	sbcs	r7, r7
 800136e:	427f      	negs	r7, r7
 8001370:	46b9      	mov	r9, r7
 8001372:	0017      	movs	r7, r2
 8001374:	464a      	mov	r2, r9
 8001376:	1abf      	subs	r7, r7, r2
 8001378:	023a      	lsls	r2, r7, #8
 800137a:	d500      	bpl.n	800137e <__aeabi_dadd+0x38e>
 800137c:	e08d      	b.n	800149a <__aeabi_dadd+0x4aa>
 800137e:	0023      	movs	r3, r4
 8001380:	433b      	orrs	r3, r7
 8001382:	d000      	beq.n	8001386 <__aeabi_dadd+0x396>
 8001384:	e68a      	b.n	800109c <__aeabi_dadd+0xac>
 8001386:	2000      	movs	r0, #0
 8001388:	2500      	movs	r5, #0
 800138a:	e761      	b.n	8001250 <__aeabi_dadd+0x260>
 800138c:	4cb4      	ldr	r4, [pc, #720]	; (8001660 <__aeabi_dadd+0x670>)
 800138e:	45a1      	cmp	r9, r4
 8001390:	d100      	bne.n	8001394 <__aeabi_dadd+0x3a4>
 8001392:	e0ad      	b.n	80014f0 <__aeabi_dadd+0x500>
 8001394:	2480      	movs	r4, #128	; 0x80
 8001396:	0424      	lsls	r4, r4, #16
 8001398:	4320      	orrs	r0, r4
 800139a:	4664      	mov	r4, ip
 800139c:	2c38      	cmp	r4, #56	; 0x38
 800139e:	dc3d      	bgt.n	800141c <__aeabi_dadd+0x42c>
 80013a0:	4662      	mov	r2, ip
 80013a2:	2c1f      	cmp	r4, #31
 80013a4:	dd00      	ble.n	80013a8 <__aeabi_dadd+0x3b8>
 80013a6:	e0b7      	b.n	8001518 <__aeabi_dadd+0x528>
 80013a8:	2520      	movs	r5, #32
 80013aa:	001e      	movs	r6, r3
 80013ac:	1b2d      	subs	r5, r5, r4
 80013ae:	0004      	movs	r4, r0
 80013b0:	40ab      	lsls	r3, r5
 80013b2:	40ac      	lsls	r4, r5
 80013b4:	40d6      	lsrs	r6, r2
 80013b6:	40d0      	lsrs	r0, r2
 80013b8:	4642      	mov	r2, r8
 80013ba:	1e5d      	subs	r5, r3, #1
 80013bc:	41ab      	sbcs	r3, r5
 80013be:	4334      	orrs	r4, r6
 80013c0:	1a12      	subs	r2, r2, r0
 80013c2:	4690      	mov	r8, r2
 80013c4:	4323      	orrs	r3, r4
 80013c6:	e02c      	b.n	8001422 <__aeabi_dadd+0x432>
 80013c8:	0742      	lsls	r2, r0, #29
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	08c0      	lsrs	r0, r0, #3
 80013d0:	e73b      	b.n	800124a <__aeabi_dadd+0x25a>
 80013d2:	185c      	adds	r4, r3, r1
 80013d4:	429c      	cmp	r4, r3
 80013d6:	419b      	sbcs	r3, r3
 80013d8:	4440      	add	r0, r8
 80013da:	425b      	negs	r3, r3
 80013dc:	18c7      	adds	r7, r0, r3
 80013de:	2601      	movs	r6, #1
 80013e0:	023b      	lsls	r3, r7, #8
 80013e2:	d400      	bmi.n	80013e6 <__aeabi_dadd+0x3f6>
 80013e4:	e729      	b.n	800123a <__aeabi_dadd+0x24a>
 80013e6:	2602      	movs	r6, #2
 80013e8:	4a9e      	ldr	r2, [pc, #632]	; (8001664 <__aeabi_dadd+0x674>)
 80013ea:	0863      	lsrs	r3, r4, #1
 80013ec:	4017      	ands	r7, r2
 80013ee:	2201      	movs	r2, #1
 80013f0:	4014      	ands	r4, r2
 80013f2:	431c      	orrs	r4, r3
 80013f4:	07fb      	lsls	r3, r7, #31
 80013f6:	431c      	orrs	r4, r3
 80013f8:	087f      	lsrs	r7, r7, #1
 80013fa:	e673      	b.n	80010e4 <__aeabi_dadd+0xf4>
 80013fc:	4644      	mov	r4, r8
 80013fe:	3a20      	subs	r2, #32
 8001400:	40d4      	lsrs	r4, r2
 8001402:	4662      	mov	r2, ip
 8001404:	2a20      	cmp	r2, #32
 8001406:	d005      	beq.n	8001414 <__aeabi_dadd+0x424>
 8001408:	4667      	mov	r7, ip
 800140a:	2240      	movs	r2, #64	; 0x40
 800140c:	1bd2      	subs	r2, r2, r7
 800140e:	4647      	mov	r7, r8
 8001410:	4097      	lsls	r7, r2
 8001412:	4339      	orrs	r1, r7
 8001414:	1e4a      	subs	r2, r1, #1
 8001416:	4191      	sbcs	r1, r2
 8001418:	4321      	orrs	r1, r4
 800141a:	e635      	b.n	8001088 <__aeabi_dadd+0x98>
 800141c:	4303      	orrs	r3, r0
 800141e:	1e58      	subs	r0, r3, #1
 8001420:	4183      	sbcs	r3, r0
 8001422:	1acc      	subs	r4, r1, r3
 8001424:	42a1      	cmp	r1, r4
 8001426:	41bf      	sbcs	r7, r7
 8001428:	4643      	mov	r3, r8
 800142a:	427f      	negs	r7, r7
 800142c:	4655      	mov	r5, sl
 800142e:	464e      	mov	r6, r9
 8001430:	1bdf      	subs	r7, r3, r7
 8001432:	e62e      	b.n	8001092 <__aeabi_dadd+0xa2>
 8001434:	0002      	movs	r2, r0
 8001436:	431a      	orrs	r2, r3
 8001438:	d100      	bne.n	800143c <__aeabi_dadd+0x44c>
 800143a:	e0bd      	b.n	80015b8 <__aeabi_dadd+0x5c8>
 800143c:	4662      	mov	r2, ip
 800143e:	4664      	mov	r4, ip
 8001440:	3a01      	subs	r2, #1
 8001442:	2c01      	cmp	r4, #1
 8001444:	d100      	bne.n	8001448 <__aeabi_dadd+0x458>
 8001446:	e0e5      	b.n	8001614 <__aeabi_dadd+0x624>
 8001448:	4c85      	ldr	r4, [pc, #532]	; (8001660 <__aeabi_dadd+0x670>)
 800144a:	45a4      	cmp	ip, r4
 800144c:	d058      	beq.n	8001500 <__aeabi_dadd+0x510>
 800144e:	4694      	mov	ip, r2
 8001450:	e749      	b.n	80012e6 <__aeabi_dadd+0x2f6>
 8001452:	4664      	mov	r4, ip
 8001454:	2220      	movs	r2, #32
 8001456:	1b12      	subs	r2, r2, r4
 8001458:	4644      	mov	r4, r8
 800145a:	4094      	lsls	r4, r2
 800145c:	000f      	movs	r7, r1
 800145e:	46a1      	mov	r9, r4
 8001460:	4664      	mov	r4, ip
 8001462:	4091      	lsls	r1, r2
 8001464:	40e7      	lsrs	r7, r4
 8001466:	464c      	mov	r4, r9
 8001468:	1e4a      	subs	r2, r1, #1
 800146a:	4191      	sbcs	r1, r2
 800146c:	433c      	orrs	r4, r7
 800146e:	4642      	mov	r2, r8
 8001470:	430c      	orrs	r4, r1
 8001472:	4661      	mov	r1, ip
 8001474:	40ca      	lsrs	r2, r1
 8001476:	1880      	adds	r0, r0, r2
 8001478:	e6f4      	b.n	8001264 <__aeabi_dadd+0x274>
 800147a:	4c79      	ldr	r4, [pc, #484]	; (8001660 <__aeabi_dadd+0x670>)
 800147c:	42a2      	cmp	r2, r4
 800147e:	d100      	bne.n	8001482 <__aeabi_dadd+0x492>
 8001480:	e6fd      	b.n	800127e <__aeabi_dadd+0x28e>
 8001482:	1859      	adds	r1, r3, r1
 8001484:	4299      	cmp	r1, r3
 8001486:	419b      	sbcs	r3, r3
 8001488:	4440      	add	r0, r8
 800148a:	425f      	negs	r7, r3
 800148c:	19c7      	adds	r7, r0, r7
 800148e:	07fc      	lsls	r4, r7, #31
 8001490:	0849      	lsrs	r1, r1, #1
 8001492:	0016      	movs	r6, r2
 8001494:	430c      	orrs	r4, r1
 8001496:	087f      	lsrs	r7, r7, #1
 8001498:	e6cf      	b.n	800123a <__aeabi_dadd+0x24a>
 800149a:	1acc      	subs	r4, r1, r3
 800149c:	42a1      	cmp	r1, r4
 800149e:	41bf      	sbcs	r7, r7
 80014a0:	4643      	mov	r3, r8
 80014a2:	427f      	negs	r7, r7
 80014a4:	1a18      	subs	r0, r3, r0
 80014a6:	4655      	mov	r5, sl
 80014a8:	1bc7      	subs	r7, r0, r7
 80014aa:	e5f7      	b.n	800109c <__aeabi_dadd+0xac>
 80014ac:	08c9      	lsrs	r1, r1, #3
 80014ae:	077b      	lsls	r3, r7, #29
 80014b0:	4655      	mov	r5, sl
 80014b2:	430b      	orrs	r3, r1
 80014b4:	08f8      	lsrs	r0, r7, #3
 80014b6:	e6c8      	b.n	800124a <__aeabi_dadd+0x25a>
 80014b8:	2c00      	cmp	r4, #0
 80014ba:	d000      	beq.n	80014be <__aeabi_dadd+0x4ce>
 80014bc:	e081      	b.n	80015c2 <__aeabi_dadd+0x5d2>
 80014be:	4643      	mov	r3, r8
 80014c0:	430b      	orrs	r3, r1
 80014c2:	d115      	bne.n	80014f0 <__aeabi_dadd+0x500>
 80014c4:	2080      	movs	r0, #128	; 0x80
 80014c6:	2500      	movs	r5, #0
 80014c8:	0300      	lsls	r0, r0, #12
 80014ca:	e6e3      	b.n	8001294 <__aeabi_dadd+0x2a4>
 80014cc:	1a5c      	subs	r4, r3, r1
 80014ce:	42a3      	cmp	r3, r4
 80014d0:	419b      	sbcs	r3, r3
 80014d2:	1bc7      	subs	r7, r0, r7
 80014d4:	425b      	negs	r3, r3
 80014d6:	2601      	movs	r6, #1
 80014d8:	1aff      	subs	r7, r7, r3
 80014da:	e5da      	b.n	8001092 <__aeabi_dadd+0xa2>
 80014dc:	0742      	lsls	r2, r0, #29
 80014de:	08db      	lsrs	r3, r3, #3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	08c0      	lsrs	r0, r0, #3
 80014e4:	e6d2      	b.n	800128c <__aeabi_dadd+0x29c>
 80014e6:	0742      	lsls	r2, r0, #29
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	08c0      	lsrs	r0, r0, #3
 80014ee:	e6ac      	b.n	800124a <__aeabi_dadd+0x25a>
 80014f0:	4643      	mov	r3, r8
 80014f2:	4642      	mov	r2, r8
 80014f4:	08c9      	lsrs	r1, r1, #3
 80014f6:	075b      	lsls	r3, r3, #29
 80014f8:	4655      	mov	r5, sl
 80014fa:	430b      	orrs	r3, r1
 80014fc:	08d0      	lsrs	r0, r2, #3
 80014fe:	e6c5      	b.n	800128c <__aeabi_dadd+0x29c>
 8001500:	4643      	mov	r3, r8
 8001502:	4642      	mov	r2, r8
 8001504:	075b      	lsls	r3, r3, #29
 8001506:	08c9      	lsrs	r1, r1, #3
 8001508:	430b      	orrs	r3, r1
 800150a:	08d0      	lsrs	r0, r2, #3
 800150c:	e6be      	b.n	800128c <__aeabi_dadd+0x29c>
 800150e:	4303      	orrs	r3, r0
 8001510:	001c      	movs	r4, r3
 8001512:	1e63      	subs	r3, r4, #1
 8001514:	419c      	sbcs	r4, r3
 8001516:	e6fc      	b.n	8001312 <__aeabi_dadd+0x322>
 8001518:	0002      	movs	r2, r0
 800151a:	3c20      	subs	r4, #32
 800151c:	40e2      	lsrs	r2, r4
 800151e:	0014      	movs	r4, r2
 8001520:	4662      	mov	r2, ip
 8001522:	2a20      	cmp	r2, #32
 8001524:	d003      	beq.n	800152e <__aeabi_dadd+0x53e>
 8001526:	2540      	movs	r5, #64	; 0x40
 8001528:	1aad      	subs	r5, r5, r2
 800152a:	40a8      	lsls	r0, r5
 800152c:	4303      	orrs	r3, r0
 800152e:	1e58      	subs	r0, r3, #1
 8001530:	4183      	sbcs	r3, r0
 8001532:	4323      	orrs	r3, r4
 8001534:	e775      	b.n	8001422 <__aeabi_dadd+0x432>
 8001536:	2a00      	cmp	r2, #0
 8001538:	d0e2      	beq.n	8001500 <__aeabi_dadd+0x510>
 800153a:	003a      	movs	r2, r7
 800153c:	430a      	orrs	r2, r1
 800153e:	d0cd      	beq.n	80014dc <__aeabi_dadd+0x4ec>
 8001540:	0742      	lsls	r2, r0, #29
 8001542:	08db      	lsrs	r3, r3, #3
 8001544:	4313      	orrs	r3, r2
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	08c0      	lsrs	r0, r0, #3
 800154a:	0312      	lsls	r2, r2, #12
 800154c:	4210      	tst	r0, r2
 800154e:	d006      	beq.n	800155e <__aeabi_dadd+0x56e>
 8001550:	08fc      	lsrs	r4, r7, #3
 8001552:	4214      	tst	r4, r2
 8001554:	d103      	bne.n	800155e <__aeabi_dadd+0x56e>
 8001556:	0020      	movs	r0, r4
 8001558:	08cb      	lsrs	r3, r1, #3
 800155a:	077a      	lsls	r2, r7, #29
 800155c:	4313      	orrs	r3, r2
 800155e:	0f5a      	lsrs	r2, r3, #29
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	0752      	lsls	r2, r2, #29
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	4313      	orrs	r3, r2
 8001568:	e690      	b.n	800128c <__aeabi_dadd+0x29c>
 800156a:	4643      	mov	r3, r8
 800156c:	430b      	orrs	r3, r1
 800156e:	d100      	bne.n	8001572 <__aeabi_dadd+0x582>
 8001570:	e709      	b.n	8001386 <__aeabi_dadd+0x396>
 8001572:	4643      	mov	r3, r8
 8001574:	4642      	mov	r2, r8
 8001576:	08c9      	lsrs	r1, r1, #3
 8001578:	075b      	lsls	r3, r3, #29
 800157a:	4655      	mov	r5, sl
 800157c:	430b      	orrs	r3, r1
 800157e:	08d0      	lsrs	r0, r2, #3
 8001580:	e666      	b.n	8001250 <__aeabi_dadd+0x260>
 8001582:	1acc      	subs	r4, r1, r3
 8001584:	42a1      	cmp	r1, r4
 8001586:	4189      	sbcs	r1, r1
 8001588:	1a3f      	subs	r7, r7, r0
 800158a:	4249      	negs	r1, r1
 800158c:	4655      	mov	r5, sl
 800158e:	2601      	movs	r6, #1
 8001590:	1a7f      	subs	r7, r7, r1
 8001592:	e57e      	b.n	8001092 <__aeabi_dadd+0xa2>
 8001594:	4642      	mov	r2, r8
 8001596:	1a5c      	subs	r4, r3, r1
 8001598:	1a87      	subs	r7, r0, r2
 800159a:	42a3      	cmp	r3, r4
 800159c:	4192      	sbcs	r2, r2
 800159e:	4252      	negs	r2, r2
 80015a0:	1abf      	subs	r7, r7, r2
 80015a2:	023a      	lsls	r2, r7, #8
 80015a4:	d53d      	bpl.n	8001622 <__aeabi_dadd+0x632>
 80015a6:	1acc      	subs	r4, r1, r3
 80015a8:	42a1      	cmp	r1, r4
 80015aa:	4189      	sbcs	r1, r1
 80015ac:	4643      	mov	r3, r8
 80015ae:	4249      	negs	r1, r1
 80015b0:	1a1f      	subs	r7, r3, r0
 80015b2:	4655      	mov	r5, sl
 80015b4:	1a7f      	subs	r7, r7, r1
 80015b6:	e595      	b.n	80010e4 <__aeabi_dadd+0xf4>
 80015b8:	077b      	lsls	r3, r7, #29
 80015ba:	08c9      	lsrs	r1, r1, #3
 80015bc:	430b      	orrs	r3, r1
 80015be:	08f8      	lsrs	r0, r7, #3
 80015c0:	e643      	b.n	800124a <__aeabi_dadd+0x25a>
 80015c2:	4644      	mov	r4, r8
 80015c4:	08db      	lsrs	r3, r3, #3
 80015c6:	430c      	orrs	r4, r1
 80015c8:	d130      	bne.n	800162c <__aeabi_dadd+0x63c>
 80015ca:	0742      	lsls	r2, r0, #29
 80015cc:	4313      	orrs	r3, r2
 80015ce:	08c0      	lsrs	r0, r0, #3
 80015d0:	e65c      	b.n	800128c <__aeabi_dadd+0x29c>
 80015d2:	077b      	lsls	r3, r7, #29
 80015d4:	08c9      	lsrs	r1, r1, #3
 80015d6:	430b      	orrs	r3, r1
 80015d8:	08f8      	lsrs	r0, r7, #3
 80015da:	e639      	b.n	8001250 <__aeabi_dadd+0x260>
 80015dc:	185c      	adds	r4, r3, r1
 80015de:	429c      	cmp	r4, r3
 80015e0:	419b      	sbcs	r3, r3
 80015e2:	4440      	add	r0, r8
 80015e4:	425b      	negs	r3, r3
 80015e6:	18c7      	adds	r7, r0, r3
 80015e8:	023b      	lsls	r3, r7, #8
 80015ea:	d400      	bmi.n	80015ee <__aeabi_dadd+0x5fe>
 80015ec:	e625      	b.n	800123a <__aeabi_dadd+0x24a>
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <__aeabi_dadd+0x674>)
 80015f0:	2601      	movs	r6, #1
 80015f2:	401f      	ands	r7, r3
 80015f4:	e621      	b.n	800123a <__aeabi_dadd+0x24a>
 80015f6:	0004      	movs	r4, r0
 80015f8:	3a20      	subs	r2, #32
 80015fa:	40d4      	lsrs	r4, r2
 80015fc:	4662      	mov	r2, ip
 80015fe:	2a20      	cmp	r2, #32
 8001600:	d004      	beq.n	800160c <__aeabi_dadd+0x61c>
 8001602:	2240      	movs	r2, #64	; 0x40
 8001604:	4666      	mov	r6, ip
 8001606:	1b92      	subs	r2, r2, r6
 8001608:	4090      	lsls	r0, r2
 800160a:	4303      	orrs	r3, r0
 800160c:	1e5a      	subs	r2, r3, #1
 800160e:	4193      	sbcs	r3, r2
 8001610:	431c      	orrs	r4, r3
 8001612:	e67e      	b.n	8001312 <__aeabi_dadd+0x322>
 8001614:	185c      	adds	r4, r3, r1
 8001616:	428c      	cmp	r4, r1
 8001618:	4189      	sbcs	r1, r1
 800161a:	4440      	add	r0, r8
 800161c:	4249      	negs	r1, r1
 800161e:	1847      	adds	r7, r0, r1
 8001620:	e6dd      	b.n	80013de <__aeabi_dadd+0x3ee>
 8001622:	0023      	movs	r3, r4
 8001624:	433b      	orrs	r3, r7
 8001626:	d100      	bne.n	800162a <__aeabi_dadd+0x63a>
 8001628:	e6ad      	b.n	8001386 <__aeabi_dadd+0x396>
 800162a:	e606      	b.n	800123a <__aeabi_dadd+0x24a>
 800162c:	0744      	lsls	r4, r0, #29
 800162e:	4323      	orrs	r3, r4
 8001630:	2480      	movs	r4, #128	; 0x80
 8001632:	08c0      	lsrs	r0, r0, #3
 8001634:	0324      	lsls	r4, r4, #12
 8001636:	4220      	tst	r0, r4
 8001638:	d008      	beq.n	800164c <__aeabi_dadd+0x65c>
 800163a:	4642      	mov	r2, r8
 800163c:	08d6      	lsrs	r6, r2, #3
 800163e:	4226      	tst	r6, r4
 8001640:	d104      	bne.n	800164c <__aeabi_dadd+0x65c>
 8001642:	4655      	mov	r5, sl
 8001644:	0030      	movs	r0, r6
 8001646:	08cb      	lsrs	r3, r1, #3
 8001648:	0751      	lsls	r1, r2, #29
 800164a:	430b      	orrs	r3, r1
 800164c:	0f5a      	lsrs	r2, r3, #29
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	08db      	lsrs	r3, r3, #3
 8001652:	0752      	lsls	r2, r2, #29
 8001654:	4313      	orrs	r3, r2
 8001656:	e619      	b.n	800128c <__aeabi_dadd+0x29c>
 8001658:	2300      	movs	r3, #0
 800165a:	4a01      	ldr	r2, [pc, #4]	; (8001660 <__aeabi_dadd+0x670>)
 800165c:	001f      	movs	r7, r3
 800165e:	e55e      	b.n	800111e <__aeabi_dadd+0x12e>
 8001660:	000007ff 	.word	0x000007ff
 8001664:	ff7fffff 	.word	0xff7fffff

08001668 <__aeabi_ddiv>:
 8001668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166a:	4657      	mov	r7, sl
 800166c:	464e      	mov	r6, r9
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	b5e0      	push	{r5, r6, r7, lr}
 8001674:	4681      	mov	r9, r0
 8001676:	0005      	movs	r5, r0
 8001678:	030c      	lsls	r4, r1, #12
 800167a:	0048      	lsls	r0, r1, #1
 800167c:	4692      	mov	sl, r2
 800167e:	001f      	movs	r7, r3
 8001680:	b085      	sub	sp, #20
 8001682:	0b24      	lsrs	r4, r4, #12
 8001684:	0d40      	lsrs	r0, r0, #21
 8001686:	0fce      	lsrs	r6, r1, #31
 8001688:	2800      	cmp	r0, #0
 800168a:	d100      	bne.n	800168e <__aeabi_ddiv+0x26>
 800168c:	e156      	b.n	800193c <__aeabi_ddiv+0x2d4>
 800168e:	4bd4      	ldr	r3, [pc, #848]	; (80019e0 <__aeabi_ddiv+0x378>)
 8001690:	4298      	cmp	r0, r3
 8001692:	d100      	bne.n	8001696 <__aeabi_ddiv+0x2e>
 8001694:	e172      	b.n	800197c <__aeabi_ddiv+0x314>
 8001696:	0f6b      	lsrs	r3, r5, #29
 8001698:	00e4      	lsls	r4, r4, #3
 800169a:	431c      	orrs	r4, r3
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	4323      	orrs	r3, r4
 80016a2:	4698      	mov	r8, r3
 80016a4:	4bcf      	ldr	r3, [pc, #828]	; (80019e4 <__aeabi_ddiv+0x37c>)
 80016a6:	00ed      	lsls	r5, r5, #3
 80016a8:	469b      	mov	fp, r3
 80016aa:	2300      	movs	r3, #0
 80016ac:	4699      	mov	r9, r3
 80016ae:	4483      	add	fp, r0
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	033c      	lsls	r4, r7, #12
 80016b4:	007b      	lsls	r3, r7, #1
 80016b6:	4650      	mov	r0, sl
 80016b8:	0b24      	lsrs	r4, r4, #12
 80016ba:	0d5b      	lsrs	r3, r3, #21
 80016bc:	0fff      	lsrs	r7, r7, #31
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_ddiv+0x5c>
 80016c2:	e11f      	b.n	8001904 <__aeabi_ddiv+0x29c>
 80016c4:	4ac6      	ldr	r2, [pc, #792]	; (80019e0 <__aeabi_ddiv+0x378>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d100      	bne.n	80016cc <__aeabi_ddiv+0x64>
 80016ca:	e162      	b.n	8001992 <__aeabi_ddiv+0x32a>
 80016cc:	49c5      	ldr	r1, [pc, #788]	; (80019e4 <__aeabi_ddiv+0x37c>)
 80016ce:	0f42      	lsrs	r2, r0, #29
 80016d0:	468c      	mov	ip, r1
 80016d2:	00e4      	lsls	r4, r4, #3
 80016d4:	4659      	mov	r1, fp
 80016d6:	4314      	orrs	r4, r2
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	4463      	add	r3, ip
 80016dc:	0412      	lsls	r2, r2, #16
 80016de:	1acb      	subs	r3, r1, r3
 80016e0:	4314      	orrs	r4, r2
 80016e2:	469b      	mov	fp, r3
 80016e4:	00c2      	lsls	r2, r0, #3
 80016e6:	2000      	movs	r0, #0
 80016e8:	0033      	movs	r3, r6
 80016ea:	407b      	eors	r3, r7
 80016ec:	469a      	mov	sl, r3
 80016ee:	464b      	mov	r3, r9
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d827      	bhi.n	8001744 <__aeabi_ddiv+0xdc>
 80016f4:	49bc      	ldr	r1, [pc, #752]	; (80019e8 <__aeabi_ddiv+0x380>)
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	58cb      	ldr	r3, [r1, r3]
 80016fa:	469f      	mov	pc, r3
 80016fc:	46b2      	mov	sl, r6
 80016fe:	9b00      	ldr	r3, [sp, #0]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d016      	beq.n	8001732 <__aeabi_ddiv+0xca>
 8001704:	2b03      	cmp	r3, #3
 8001706:	d100      	bne.n	800170a <__aeabi_ddiv+0xa2>
 8001708:	e28e      	b.n	8001c28 <__aeabi_ddiv+0x5c0>
 800170a:	2b01      	cmp	r3, #1
 800170c:	d000      	beq.n	8001710 <__aeabi_ddiv+0xa8>
 800170e:	e0d9      	b.n	80018c4 <__aeabi_ddiv+0x25c>
 8001710:	2300      	movs	r3, #0
 8001712:	2400      	movs	r4, #0
 8001714:	2500      	movs	r5, #0
 8001716:	4652      	mov	r2, sl
 8001718:	051b      	lsls	r3, r3, #20
 800171a:	4323      	orrs	r3, r4
 800171c:	07d2      	lsls	r2, r2, #31
 800171e:	4313      	orrs	r3, r2
 8001720:	0028      	movs	r0, r5
 8001722:	0019      	movs	r1, r3
 8001724:	b005      	add	sp, #20
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2400      	movs	r4, #0
 8001734:	2500      	movs	r5, #0
 8001736:	4baa      	ldr	r3, [pc, #680]	; (80019e0 <__aeabi_ddiv+0x378>)
 8001738:	e7ed      	b.n	8001716 <__aeabi_ddiv+0xae>
 800173a:	46ba      	mov	sl, r7
 800173c:	46a0      	mov	r8, r4
 800173e:	0015      	movs	r5, r2
 8001740:	9000      	str	r0, [sp, #0]
 8001742:	e7dc      	b.n	80016fe <__aeabi_ddiv+0x96>
 8001744:	4544      	cmp	r4, r8
 8001746:	d200      	bcs.n	800174a <__aeabi_ddiv+0xe2>
 8001748:	e1c7      	b.n	8001ada <__aeabi_ddiv+0x472>
 800174a:	d100      	bne.n	800174e <__aeabi_ddiv+0xe6>
 800174c:	e1c2      	b.n	8001ad4 <__aeabi_ddiv+0x46c>
 800174e:	2301      	movs	r3, #1
 8001750:	425b      	negs	r3, r3
 8001752:	469c      	mov	ip, r3
 8001754:	002e      	movs	r6, r5
 8001756:	4640      	mov	r0, r8
 8001758:	2500      	movs	r5, #0
 800175a:	44e3      	add	fp, ip
 800175c:	0223      	lsls	r3, r4, #8
 800175e:	0e14      	lsrs	r4, r2, #24
 8001760:	431c      	orrs	r4, r3
 8001762:	0c1b      	lsrs	r3, r3, #16
 8001764:	4699      	mov	r9, r3
 8001766:	0423      	lsls	r3, r4, #16
 8001768:	0c1f      	lsrs	r7, r3, #16
 800176a:	0212      	lsls	r2, r2, #8
 800176c:	4649      	mov	r1, r9
 800176e:	9200      	str	r2, [sp, #0]
 8001770:	9701      	str	r7, [sp, #4]
 8001772:	f7fe fd6b 	bl	800024c <__aeabi_uidivmod>
 8001776:	0002      	movs	r2, r0
 8001778:	437a      	muls	r2, r7
 800177a:	040b      	lsls	r3, r1, #16
 800177c:	0c31      	lsrs	r1, r6, #16
 800177e:	4680      	mov	r8, r0
 8001780:	4319      	orrs	r1, r3
 8001782:	428a      	cmp	r2, r1
 8001784:	d907      	bls.n	8001796 <__aeabi_ddiv+0x12e>
 8001786:	2301      	movs	r3, #1
 8001788:	425b      	negs	r3, r3
 800178a:	469c      	mov	ip, r3
 800178c:	1909      	adds	r1, r1, r4
 800178e:	44e0      	add	r8, ip
 8001790:	428c      	cmp	r4, r1
 8001792:	d800      	bhi.n	8001796 <__aeabi_ddiv+0x12e>
 8001794:	e207      	b.n	8001ba6 <__aeabi_ddiv+0x53e>
 8001796:	1a88      	subs	r0, r1, r2
 8001798:	4649      	mov	r1, r9
 800179a:	f7fe fd57 	bl	800024c <__aeabi_uidivmod>
 800179e:	0409      	lsls	r1, r1, #16
 80017a0:	468c      	mov	ip, r1
 80017a2:	0431      	lsls	r1, r6, #16
 80017a4:	4666      	mov	r6, ip
 80017a6:	9a01      	ldr	r2, [sp, #4]
 80017a8:	0c09      	lsrs	r1, r1, #16
 80017aa:	4342      	muls	r2, r0
 80017ac:	0003      	movs	r3, r0
 80017ae:	4331      	orrs	r1, r6
 80017b0:	428a      	cmp	r2, r1
 80017b2:	d904      	bls.n	80017be <__aeabi_ddiv+0x156>
 80017b4:	1909      	adds	r1, r1, r4
 80017b6:	3b01      	subs	r3, #1
 80017b8:	428c      	cmp	r4, r1
 80017ba:	d800      	bhi.n	80017be <__aeabi_ddiv+0x156>
 80017bc:	e1ed      	b.n	8001b9a <__aeabi_ddiv+0x532>
 80017be:	1a88      	subs	r0, r1, r2
 80017c0:	4642      	mov	r2, r8
 80017c2:	0412      	lsls	r2, r2, #16
 80017c4:	431a      	orrs	r2, r3
 80017c6:	4690      	mov	r8, r2
 80017c8:	4641      	mov	r1, r8
 80017ca:	9b00      	ldr	r3, [sp, #0]
 80017cc:	040e      	lsls	r6, r1, #16
 80017ce:	0c1b      	lsrs	r3, r3, #16
 80017d0:	001f      	movs	r7, r3
 80017d2:	9302      	str	r3, [sp, #8]
 80017d4:	9b00      	ldr	r3, [sp, #0]
 80017d6:	0c36      	lsrs	r6, r6, #16
 80017d8:	041b      	lsls	r3, r3, #16
 80017da:	0c19      	lsrs	r1, r3, #16
 80017dc:	000b      	movs	r3, r1
 80017de:	4373      	muls	r3, r6
 80017e0:	0c12      	lsrs	r2, r2, #16
 80017e2:	437e      	muls	r6, r7
 80017e4:	9103      	str	r1, [sp, #12]
 80017e6:	4351      	muls	r1, r2
 80017e8:	437a      	muls	r2, r7
 80017ea:	0c1f      	lsrs	r7, r3, #16
 80017ec:	46bc      	mov	ip, r7
 80017ee:	1876      	adds	r6, r6, r1
 80017f0:	4466      	add	r6, ip
 80017f2:	42b1      	cmp	r1, r6
 80017f4:	d903      	bls.n	80017fe <__aeabi_ddiv+0x196>
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	0249      	lsls	r1, r1, #9
 80017fa:	468c      	mov	ip, r1
 80017fc:	4462      	add	r2, ip
 80017fe:	0c31      	lsrs	r1, r6, #16
 8001800:	188a      	adds	r2, r1, r2
 8001802:	0431      	lsls	r1, r6, #16
 8001804:	041e      	lsls	r6, r3, #16
 8001806:	0c36      	lsrs	r6, r6, #16
 8001808:	198e      	adds	r6, r1, r6
 800180a:	4290      	cmp	r0, r2
 800180c:	d302      	bcc.n	8001814 <__aeabi_ddiv+0x1ac>
 800180e:	d112      	bne.n	8001836 <__aeabi_ddiv+0x1ce>
 8001810:	42b5      	cmp	r5, r6
 8001812:	d210      	bcs.n	8001836 <__aeabi_ddiv+0x1ce>
 8001814:	4643      	mov	r3, r8
 8001816:	1e59      	subs	r1, r3, #1
 8001818:	9b00      	ldr	r3, [sp, #0]
 800181a:	469c      	mov	ip, r3
 800181c:	4465      	add	r5, ip
 800181e:	001f      	movs	r7, r3
 8001820:	429d      	cmp	r5, r3
 8001822:	419b      	sbcs	r3, r3
 8001824:	425b      	negs	r3, r3
 8001826:	191b      	adds	r3, r3, r4
 8001828:	18c0      	adds	r0, r0, r3
 800182a:	4284      	cmp	r4, r0
 800182c:	d200      	bcs.n	8001830 <__aeabi_ddiv+0x1c8>
 800182e:	e1a0      	b.n	8001b72 <__aeabi_ddiv+0x50a>
 8001830:	d100      	bne.n	8001834 <__aeabi_ddiv+0x1cc>
 8001832:	e19b      	b.n	8001b6c <__aeabi_ddiv+0x504>
 8001834:	4688      	mov	r8, r1
 8001836:	1bae      	subs	r6, r5, r6
 8001838:	42b5      	cmp	r5, r6
 800183a:	41ad      	sbcs	r5, r5
 800183c:	1a80      	subs	r0, r0, r2
 800183e:	426d      	negs	r5, r5
 8001840:	1b40      	subs	r0, r0, r5
 8001842:	4284      	cmp	r4, r0
 8001844:	d100      	bne.n	8001848 <__aeabi_ddiv+0x1e0>
 8001846:	e1d5      	b.n	8001bf4 <__aeabi_ddiv+0x58c>
 8001848:	4649      	mov	r1, r9
 800184a:	f7fe fcff 	bl	800024c <__aeabi_uidivmod>
 800184e:	9a01      	ldr	r2, [sp, #4]
 8001850:	040b      	lsls	r3, r1, #16
 8001852:	4342      	muls	r2, r0
 8001854:	0c31      	lsrs	r1, r6, #16
 8001856:	0005      	movs	r5, r0
 8001858:	4319      	orrs	r1, r3
 800185a:	428a      	cmp	r2, r1
 800185c:	d900      	bls.n	8001860 <__aeabi_ddiv+0x1f8>
 800185e:	e16c      	b.n	8001b3a <__aeabi_ddiv+0x4d2>
 8001860:	1a88      	subs	r0, r1, r2
 8001862:	4649      	mov	r1, r9
 8001864:	f7fe fcf2 	bl	800024c <__aeabi_uidivmod>
 8001868:	9a01      	ldr	r2, [sp, #4]
 800186a:	0436      	lsls	r6, r6, #16
 800186c:	4342      	muls	r2, r0
 800186e:	0409      	lsls	r1, r1, #16
 8001870:	0c36      	lsrs	r6, r6, #16
 8001872:	0003      	movs	r3, r0
 8001874:	430e      	orrs	r6, r1
 8001876:	42b2      	cmp	r2, r6
 8001878:	d900      	bls.n	800187c <__aeabi_ddiv+0x214>
 800187a:	e153      	b.n	8001b24 <__aeabi_ddiv+0x4bc>
 800187c:	9803      	ldr	r0, [sp, #12]
 800187e:	1ab6      	subs	r6, r6, r2
 8001880:	0002      	movs	r2, r0
 8001882:	042d      	lsls	r5, r5, #16
 8001884:	431d      	orrs	r5, r3
 8001886:	9f02      	ldr	r7, [sp, #8]
 8001888:	042b      	lsls	r3, r5, #16
 800188a:	0c1b      	lsrs	r3, r3, #16
 800188c:	435a      	muls	r2, r3
 800188e:	437b      	muls	r3, r7
 8001890:	469c      	mov	ip, r3
 8001892:	0c29      	lsrs	r1, r5, #16
 8001894:	4348      	muls	r0, r1
 8001896:	0c13      	lsrs	r3, r2, #16
 8001898:	4484      	add	ip, r0
 800189a:	4463      	add	r3, ip
 800189c:	4379      	muls	r1, r7
 800189e:	4298      	cmp	r0, r3
 80018a0:	d903      	bls.n	80018aa <__aeabi_ddiv+0x242>
 80018a2:	2080      	movs	r0, #128	; 0x80
 80018a4:	0240      	lsls	r0, r0, #9
 80018a6:	4684      	mov	ip, r0
 80018a8:	4461      	add	r1, ip
 80018aa:	0c18      	lsrs	r0, r3, #16
 80018ac:	0412      	lsls	r2, r2, #16
 80018ae:	041b      	lsls	r3, r3, #16
 80018b0:	0c12      	lsrs	r2, r2, #16
 80018b2:	1841      	adds	r1, r0, r1
 80018b4:	189b      	adds	r3, r3, r2
 80018b6:	428e      	cmp	r6, r1
 80018b8:	d200      	bcs.n	80018bc <__aeabi_ddiv+0x254>
 80018ba:	e0ff      	b.n	8001abc <__aeabi_ddiv+0x454>
 80018bc:	d100      	bne.n	80018c0 <__aeabi_ddiv+0x258>
 80018be:	e0fa      	b.n	8001ab6 <__aeabi_ddiv+0x44e>
 80018c0:	2301      	movs	r3, #1
 80018c2:	431d      	orrs	r5, r3
 80018c4:	4a49      	ldr	r2, [pc, #292]	; (80019ec <__aeabi_ddiv+0x384>)
 80018c6:	445a      	add	r2, fp
 80018c8:	2a00      	cmp	r2, #0
 80018ca:	dc00      	bgt.n	80018ce <__aeabi_ddiv+0x266>
 80018cc:	e0aa      	b.n	8001a24 <__aeabi_ddiv+0x3bc>
 80018ce:	076b      	lsls	r3, r5, #29
 80018d0:	d000      	beq.n	80018d4 <__aeabi_ddiv+0x26c>
 80018d2:	e13d      	b.n	8001b50 <__aeabi_ddiv+0x4e8>
 80018d4:	08ed      	lsrs	r5, r5, #3
 80018d6:	4643      	mov	r3, r8
 80018d8:	01db      	lsls	r3, r3, #7
 80018da:	d506      	bpl.n	80018ea <__aeabi_ddiv+0x282>
 80018dc:	4642      	mov	r2, r8
 80018de:	4b44      	ldr	r3, [pc, #272]	; (80019f0 <__aeabi_ddiv+0x388>)
 80018e0:	401a      	ands	r2, r3
 80018e2:	4690      	mov	r8, r2
 80018e4:	2280      	movs	r2, #128	; 0x80
 80018e6:	00d2      	lsls	r2, r2, #3
 80018e8:	445a      	add	r2, fp
 80018ea:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <__aeabi_ddiv+0x38c>)
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dd00      	ble.n	80018f2 <__aeabi_ddiv+0x28a>
 80018f0:	e71f      	b.n	8001732 <__aeabi_ddiv+0xca>
 80018f2:	4643      	mov	r3, r8
 80018f4:	075b      	lsls	r3, r3, #29
 80018f6:	431d      	orrs	r5, r3
 80018f8:	4643      	mov	r3, r8
 80018fa:	0552      	lsls	r2, r2, #21
 80018fc:	025c      	lsls	r4, r3, #9
 80018fe:	0b24      	lsrs	r4, r4, #12
 8001900:	0d53      	lsrs	r3, r2, #21
 8001902:	e708      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001904:	4652      	mov	r2, sl
 8001906:	4322      	orrs	r2, r4
 8001908:	d100      	bne.n	800190c <__aeabi_ddiv+0x2a4>
 800190a:	e07b      	b.n	8001a04 <__aeabi_ddiv+0x39c>
 800190c:	2c00      	cmp	r4, #0
 800190e:	d100      	bne.n	8001912 <__aeabi_ddiv+0x2aa>
 8001910:	e0fa      	b.n	8001b08 <__aeabi_ddiv+0x4a0>
 8001912:	0020      	movs	r0, r4
 8001914:	f001 fa22 	bl	8002d5c <__clzsi2>
 8001918:	0002      	movs	r2, r0
 800191a:	3a0b      	subs	r2, #11
 800191c:	231d      	movs	r3, #29
 800191e:	0001      	movs	r1, r0
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	4652      	mov	r2, sl
 8001924:	3908      	subs	r1, #8
 8001926:	40da      	lsrs	r2, r3
 8001928:	408c      	lsls	r4, r1
 800192a:	4314      	orrs	r4, r2
 800192c:	4652      	mov	r2, sl
 800192e:	408a      	lsls	r2, r1
 8001930:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <__aeabi_ddiv+0x390>)
 8001932:	4458      	add	r0, fp
 8001934:	469b      	mov	fp, r3
 8001936:	4483      	add	fp, r0
 8001938:	2000      	movs	r0, #0
 800193a:	e6d5      	b.n	80016e8 <__aeabi_ddiv+0x80>
 800193c:	464b      	mov	r3, r9
 800193e:	4323      	orrs	r3, r4
 8001940:	4698      	mov	r8, r3
 8001942:	d044      	beq.n	80019ce <__aeabi_ddiv+0x366>
 8001944:	2c00      	cmp	r4, #0
 8001946:	d100      	bne.n	800194a <__aeabi_ddiv+0x2e2>
 8001948:	e0ce      	b.n	8001ae8 <__aeabi_ddiv+0x480>
 800194a:	0020      	movs	r0, r4
 800194c:	f001 fa06 	bl	8002d5c <__clzsi2>
 8001950:	0001      	movs	r1, r0
 8001952:	0002      	movs	r2, r0
 8001954:	390b      	subs	r1, #11
 8001956:	231d      	movs	r3, #29
 8001958:	1a5b      	subs	r3, r3, r1
 800195a:	4649      	mov	r1, r9
 800195c:	0010      	movs	r0, r2
 800195e:	40d9      	lsrs	r1, r3
 8001960:	3808      	subs	r0, #8
 8001962:	4084      	lsls	r4, r0
 8001964:	000b      	movs	r3, r1
 8001966:	464d      	mov	r5, r9
 8001968:	4323      	orrs	r3, r4
 800196a:	4698      	mov	r8, r3
 800196c:	4085      	lsls	r5, r0
 800196e:	4823      	ldr	r0, [pc, #140]	; (80019fc <__aeabi_ddiv+0x394>)
 8001970:	1a83      	subs	r3, r0, r2
 8001972:	469b      	mov	fp, r3
 8001974:	2300      	movs	r3, #0
 8001976:	4699      	mov	r9, r3
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	e69a      	b.n	80016b2 <__aeabi_ddiv+0x4a>
 800197c:	464b      	mov	r3, r9
 800197e:	4323      	orrs	r3, r4
 8001980:	4698      	mov	r8, r3
 8001982:	d11d      	bne.n	80019c0 <__aeabi_ddiv+0x358>
 8001984:	2308      	movs	r3, #8
 8001986:	4699      	mov	r9, r3
 8001988:	3b06      	subs	r3, #6
 800198a:	2500      	movs	r5, #0
 800198c:	4683      	mov	fp, r0
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	e68f      	b.n	80016b2 <__aeabi_ddiv+0x4a>
 8001992:	4652      	mov	r2, sl
 8001994:	4322      	orrs	r2, r4
 8001996:	d109      	bne.n	80019ac <__aeabi_ddiv+0x344>
 8001998:	2302      	movs	r3, #2
 800199a:	4649      	mov	r1, r9
 800199c:	4319      	orrs	r1, r3
 800199e:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <__aeabi_ddiv+0x398>)
 80019a0:	4689      	mov	r9, r1
 80019a2:	469c      	mov	ip, r3
 80019a4:	2400      	movs	r4, #0
 80019a6:	2002      	movs	r0, #2
 80019a8:	44e3      	add	fp, ip
 80019aa:	e69d      	b.n	80016e8 <__aeabi_ddiv+0x80>
 80019ac:	2303      	movs	r3, #3
 80019ae:	464a      	mov	r2, r9
 80019b0:	431a      	orrs	r2, r3
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <__aeabi_ddiv+0x398>)
 80019b4:	4691      	mov	r9, r2
 80019b6:	469c      	mov	ip, r3
 80019b8:	4652      	mov	r2, sl
 80019ba:	2003      	movs	r0, #3
 80019bc:	44e3      	add	fp, ip
 80019be:	e693      	b.n	80016e8 <__aeabi_ddiv+0x80>
 80019c0:	230c      	movs	r3, #12
 80019c2:	4699      	mov	r9, r3
 80019c4:	3b09      	subs	r3, #9
 80019c6:	46a0      	mov	r8, r4
 80019c8:	4683      	mov	fp, r0
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	e671      	b.n	80016b2 <__aeabi_ddiv+0x4a>
 80019ce:	2304      	movs	r3, #4
 80019d0:	4699      	mov	r9, r3
 80019d2:	2300      	movs	r3, #0
 80019d4:	469b      	mov	fp, r3
 80019d6:	3301      	adds	r3, #1
 80019d8:	2500      	movs	r5, #0
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	e669      	b.n	80016b2 <__aeabi_ddiv+0x4a>
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	000007ff 	.word	0x000007ff
 80019e4:	fffffc01 	.word	0xfffffc01
 80019e8:	0800c3d0 	.word	0x0800c3d0
 80019ec:	000003ff 	.word	0x000003ff
 80019f0:	feffffff 	.word	0xfeffffff
 80019f4:	000007fe 	.word	0x000007fe
 80019f8:	000003f3 	.word	0x000003f3
 80019fc:	fffffc0d 	.word	0xfffffc0d
 8001a00:	fffff801 	.word	0xfffff801
 8001a04:	4649      	mov	r1, r9
 8001a06:	2301      	movs	r3, #1
 8001a08:	4319      	orrs	r1, r3
 8001a0a:	4689      	mov	r9, r1
 8001a0c:	2400      	movs	r4, #0
 8001a0e:	2001      	movs	r0, #1
 8001a10:	e66a      	b.n	80016e8 <__aeabi_ddiv+0x80>
 8001a12:	2300      	movs	r3, #0
 8001a14:	2480      	movs	r4, #128	; 0x80
 8001a16:	469a      	mov	sl, r3
 8001a18:	2500      	movs	r5, #0
 8001a1a:	4b8a      	ldr	r3, [pc, #552]	; (8001c44 <__aeabi_ddiv+0x5dc>)
 8001a1c:	0324      	lsls	r4, r4, #12
 8001a1e:	e67a      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001a20:	2501      	movs	r5, #1
 8001a22:	426d      	negs	r5, r5
 8001a24:	2301      	movs	r3, #1
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	2b38      	cmp	r3, #56	; 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_ddiv+0x3c6>
 8001a2c:	e670      	b.n	8001710 <__aeabi_ddiv+0xa8>
 8001a2e:	2b1f      	cmp	r3, #31
 8001a30:	dc00      	bgt.n	8001a34 <__aeabi_ddiv+0x3cc>
 8001a32:	e0bf      	b.n	8001bb4 <__aeabi_ddiv+0x54c>
 8001a34:	211f      	movs	r1, #31
 8001a36:	4249      	negs	r1, r1
 8001a38:	1a8a      	subs	r2, r1, r2
 8001a3a:	4641      	mov	r1, r8
 8001a3c:	40d1      	lsrs	r1, r2
 8001a3e:	000a      	movs	r2, r1
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	d004      	beq.n	8001a4e <__aeabi_ddiv+0x3e6>
 8001a44:	4641      	mov	r1, r8
 8001a46:	4b80      	ldr	r3, [pc, #512]	; (8001c48 <__aeabi_ddiv+0x5e0>)
 8001a48:	445b      	add	r3, fp
 8001a4a:	4099      	lsls	r1, r3
 8001a4c:	430d      	orrs	r5, r1
 8001a4e:	1e6b      	subs	r3, r5, #1
 8001a50:	419d      	sbcs	r5, r3
 8001a52:	2307      	movs	r3, #7
 8001a54:	432a      	orrs	r2, r5
 8001a56:	001d      	movs	r5, r3
 8001a58:	2400      	movs	r4, #0
 8001a5a:	4015      	ands	r5, r2
 8001a5c:	4213      	tst	r3, r2
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_ddiv+0x3fa>
 8001a60:	e0d4      	b.n	8001c0c <__aeabi_ddiv+0x5a4>
 8001a62:	210f      	movs	r1, #15
 8001a64:	2300      	movs	r3, #0
 8001a66:	4011      	ands	r1, r2
 8001a68:	2904      	cmp	r1, #4
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_ddiv+0x406>
 8001a6c:	e0cb      	b.n	8001c06 <__aeabi_ddiv+0x59e>
 8001a6e:	1d11      	adds	r1, r2, #4
 8001a70:	4291      	cmp	r1, r2
 8001a72:	4192      	sbcs	r2, r2
 8001a74:	4252      	negs	r2, r2
 8001a76:	189b      	adds	r3, r3, r2
 8001a78:	000a      	movs	r2, r1
 8001a7a:	0219      	lsls	r1, r3, #8
 8001a7c:	d400      	bmi.n	8001a80 <__aeabi_ddiv+0x418>
 8001a7e:	e0c2      	b.n	8001c06 <__aeabi_ddiv+0x59e>
 8001a80:	2301      	movs	r3, #1
 8001a82:	2400      	movs	r4, #0
 8001a84:	2500      	movs	r5, #0
 8001a86:	e646      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	4641      	mov	r1, r8
 8001a8c:	031b      	lsls	r3, r3, #12
 8001a8e:	4219      	tst	r1, r3
 8001a90:	d008      	beq.n	8001aa4 <__aeabi_ddiv+0x43c>
 8001a92:	421c      	tst	r4, r3
 8001a94:	d106      	bne.n	8001aa4 <__aeabi_ddiv+0x43c>
 8001a96:	431c      	orrs	r4, r3
 8001a98:	0324      	lsls	r4, r4, #12
 8001a9a:	46ba      	mov	sl, r7
 8001a9c:	0015      	movs	r5, r2
 8001a9e:	4b69      	ldr	r3, [pc, #420]	; (8001c44 <__aeabi_ddiv+0x5dc>)
 8001aa0:	0b24      	lsrs	r4, r4, #12
 8001aa2:	e638      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001aa4:	2480      	movs	r4, #128	; 0x80
 8001aa6:	4643      	mov	r3, r8
 8001aa8:	0324      	lsls	r4, r4, #12
 8001aaa:	431c      	orrs	r4, r3
 8001aac:	0324      	lsls	r4, r4, #12
 8001aae:	46b2      	mov	sl, r6
 8001ab0:	4b64      	ldr	r3, [pc, #400]	; (8001c44 <__aeabi_ddiv+0x5dc>)
 8001ab2:	0b24      	lsrs	r4, r4, #12
 8001ab4:	e62f      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d100      	bne.n	8001abc <__aeabi_ddiv+0x454>
 8001aba:	e703      	b.n	80018c4 <__aeabi_ddiv+0x25c>
 8001abc:	19a6      	adds	r6, r4, r6
 8001abe:	1e68      	subs	r0, r5, #1
 8001ac0:	42a6      	cmp	r6, r4
 8001ac2:	d200      	bcs.n	8001ac6 <__aeabi_ddiv+0x45e>
 8001ac4:	e08d      	b.n	8001be2 <__aeabi_ddiv+0x57a>
 8001ac6:	428e      	cmp	r6, r1
 8001ac8:	d200      	bcs.n	8001acc <__aeabi_ddiv+0x464>
 8001aca:	e0a3      	b.n	8001c14 <__aeabi_ddiv+0x5ac>
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_ddiv+0x468>
 8001ace:	e0b3      	b.n	8001c38 <__aeabi_ddiv+0x5d0>
 8001ad0:	0005      	movs	r5, r0
 8001ad2:	e6f5      	b.n	80018c0 <__aeabi_ddiv+0x258>
 8001ad4:	42aa      	cmp	r2, r5
 8001ad6:	d900      	bls.n	8001ada <__aeabi_ddiv+0x472>
 8001ad8:	e639      	b.n	800174e <__aeabi_ddiv+0xe6>
 8001ada:	4643      	mov	r3, r8
 8001adc:	07de      	lsls	r6, r3, #31
 8001ade:	0858      	lsrs	r0, r3, #1
 8001ae0:	086b      	lsrs	r3, r5, #1
 8001ae2:	431e      	orrs	r6, r3
 8001ae4:	07ed      	lsls	r5, r5, #31
 8001ae6:	e639      	b.n	800175c <__aeabi_ddiv+0xf4>
 8001ae8:	4648      	mov	r0, r9
 8001aea:	f001 f937 	bl	8002d5c <__clzsi2>
 8001aee:	0001      	movs	r1, r0
 8001af0:	0002      	movs	r2, r0
 8001af2:	3115      	adds	r1, #21
 8001af4:	3220      	adds	r2, #32
 8001af6:	291c      	cmp	r1, #28
 8001af8:	dc00      	bgt.n	8001afc <__aeabi_ddiv+0x494>
 8001afa:	e72c      	b.n	8001956 <__aeabi_ddiv+0x2ee>
 8001afc:	464b      	mov	r3, r9
 8001afe:	3808      	subs	r0, #8
 8001b00:	4083      	lsls	r3, r0
 8001b02:	2500      	movs	r5, #0
 8001b04:	4698      	mov	r8, r3
 8001b06:	e732      	b.n	800196e <__aeabi_ddiv+0x306>
 8001b08:	f001 f928 	bl	8002d5c <__clzsi2>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	001a      	movs	r2, r3
 8001b10:	3215      	adds	r2, #21
 8001b12:	3020      	adds	r0, #32
 8001b14:	2a1c      	cmp	r2, #28
 8001b16:	dc00      	bgt.n	8001b1a <__aeabi_ddiv+0x4b2>
 8001b18:	e700      	b.n	800191c <__aeabi_ddiv+0x2b4>
 8001b1a:	4654      	mov	r4, sl
 8001b1c:	3b08      	subs	r3, #8
 8001b1e:	2200      	movs	r2, #0
 8001b20:	409c      	lsls	r4, r3
 8001b22:	e705      	b.n	8001930 <__aeabi_ddiv+0x2c8>
 8001b24:	1936      	adds	r6, r6, r4
 8001b26:	3b01      	subs	r3, #1
 8001b28:	42b4      	cmp	r4, r6
 8001b2a:	d900      	bls.n	8001b2e <__aeabi_ddiv+0x4c6>
 8001b2c:	e6a6      	b.n	800187c <__aeabi_ddiv+0x214>
 8001b2e:	42b2      	cmp	r2, r6
 8001b30:	d800      	bhi.n	8001b34 <__aeabi_ddiv+0x4cc>
 8001b32:	e6a3      	b.n	800187c <__aeabi_ddiv+0x214>
 8001b34:	1e83      	subs	r3, r0, #2
 8001b36:	1936      	adds	r6, r6, r4
 8001b38:	e6a0      	b.n	800187c <__aeabi_ddiv+0x214>
 8001b3a:	1909      	adds	r1, r1, r4
 8001b3c:	3d01      	subs	r5, #1
 8001b3e:	428c      	cmp	r4, r1
 8001b40:	d900      	bls.n	8001b44 <__aeabi_ddiv+0x4dc>
 8001b42:	e68d      	b.n	8001860 <__aeabi_ddiv+0x1f8>
 8001b44:	428a      	cmp	r2, r1
 8001b46:	d800      	bhi.n	8001b4a <__aeabi_ddiv+0x4e2>
 8001b48:	e68a      	b.n	8001860 <__aeabi_ddiv+0x1f8>
 8001b4a:	1e85      	subs	r5, r0, #2
 8001b4c:	1909      	adds	r1, r1, r4
 8001b4e:	e687      	b.n	8001860 <__aeabi_ddiv+0x1f8>
 8001b50:	230f      	movs	r3, #15
 8001b52:	402b      	ands	r3, r5
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d100      	bne.n	8001b5a <__aeabi_ddiv+0x4f2>
 8001b58:	e6bc      	b.n	80018d4 <__aeabi_ddiv+0x26c>
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	425b      	negs	r3, r3
 8001b5e:	42ab      	cmp	r3, r5
 8001b60:	419b      	sbcs	r3, r3
 8001b62:	3504      	adds	r5, #4
 8001b64:	425b      	negs	r3, r3
 8001b66:	08ed      	lsrs	r5, r5, #3
 8001b68:	4498      	add	r8, r3
 8001b6a:	e6b4      	b.n	80018d6 <__aeabi_ddiv+0x26e>
 8001b6c:	42af      	cmp	r7, r5
 8001b6e:	d900      	bls.n	8001b72 <__aeabi_ddiv+0x50a>
 8001b70:	e660      	b.n	8001834 <__aeabi_ddiv+0x1cc>
 8001b72:	4282      	cmp	r2, r0
 8001b74:	d804      	bhi.n	8001b80 <__aeabi_ddiv+0x518>
 8001b76:	d000      	beq.n	8001b7a <__aeabi_ddiv+0x512>
 8001b78:	e65c      	b.n	8001834 <__aeabi_ddiv+0x1cc>
 8001b7a:	42ae      	cmp	r6, r5
 8001b7c:	d800      	bhi.n	8001b80 <__aeabi_ddiv+0x518>
 8001b7e:	e659      	b.n	8001834 <__aeabi_ddiv+0x1cc>
 8001b80:	2302      	movs	r3, #2
 8001b82:	425b      	negs	r3, r3
 8001b84:	469c      	mov	ip, r3
 8001b86:	9b00      	ldr	r3, [sp, #0]
 8001b88:	44e0      	add	r8, ip
 8001b8a:	469c      	mov	ip, r3
 8001b8c:	4465      	add	r5, ip
 8001b8e:	429d      	cmp	r5, r3
 8001b90:	419b      	sbcs	r3, r3
 8001b92:	425b      	negs	r3, r3
 8001b94:	191b      	adds	r3, r3, r4
 8001b96:	18c0      	adds	r0, r0, r3
 8001b98:	e64d      	b.n	8001836 <__aeabi_ddiv+0x1ce>
 8001b9a:	428a      	cmp	r2, r1
 8001b9c:	d800      	bhi.n	8001ba0 <__aeabi_ddiv+0x538>
 8001b9e:	e60e      	b.n	80017be <__aeabi_ddiv+0x156>
 8001ba0:	1e83      	subs	r3, r0, #2
 8001ba2:	1909      	adds	r1, r1, r4
 8001ba4:	e60b      	b.n	80017be <__aeabi_ddiv+0x156>
 8001ba6:	428a      	cmp	r2, r1
 8001ba8:	d800      	bhi.n	8001bac <__aeabi_ddiv+0x544>
 8001baa:	e5f4      	b.n	8001796 <__aeabi_ddiv+0x12e>
 8001bac:	1e83      	subs	r3, r0, #2
 8001bae:	4698      	mov	r8, r3
 8001bb0:	1909      	adds	r1, r1, r4
 8001bb2:	e5f0      	b.n	8001796 <__aeabi_ddiv+0x12e>
 8001bb4:	4925      	ldr	r1, [pc, #148]	; (8001c4c <__aeabi_ddiv+0x5e4>)
 8001bb6:	0028      	movs	r0, r5
 8001bb8:	4459      	add	r1, fp
 8001bba:	408d      	lsls	r5, r1
 8001bbc:	4642      	mov	r2, r8
 8001bbe:	408a      	lsls	r2, r1
 8001bc0:	1e69      	subs	r1, r5, #1
 8001bc2:	418d      	sbcs	r5, r1
 8001bc4:	4641      	mov	r1, r8
 8001bc6:	40d8      	lsrs	r0, r3
 8001bc8:	40d9      	lsrs	r1, r3
 8001bca:	4302      	orrs	r2, r0
 8001bcc:	432a      	orrs	r2, r5
 8001bce:	000b      	movs	r3, r1
 8001bd0:	0751      	lsls	r1, r2, #29
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_ddiv+0x56e>
 8001bd4:	e751      	b.n	8001a7a <__aeabi_ddiv+0x412>
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	4011      	ands	r1, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d000      	beq.n	8001be0 <__aeabi_ddiv+0x578>
 8001bde:	e746      	b.n	8001a6e <__aeabi_ddiv+0x406>
 8001be0:	e74b      	b.n	8001a7a <__aeabi_ddiv+0x412>
 8001be2:	0005      	movs	r5, r0
 8001be4:	428e      	cmp	r6, r1
 8001be6:	d000      	beq.n	8001bea <__aeabi_ddiv+0x582>
 8001be8:	e66a      	b.n	80018c0 <__aeabi_ddiv+0x258>
 8001bea:	9a00      	ldr	r2, [sp, #0]
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d000      	beq.n	8001bf2 <__aeabi_ddiv+0x58a>
 8001bf0:	e666      	b.n	80018c0 <__aeabi_ddiv+0x258>
 8001bf2:	e667      	b.n	80018c4 <__aeabi_ddiv+0x25c>
 8001bf4:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <__aeabi_ddiv+0x5e8>)
 8001bf6:	445a      	add	r2, fp
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	dc00      	bgt.n	8001bfe <__aeabi_ddiv+0x596>
 8001bfc:	e710      	b.n	8001a20 <__aeabi_ddiv+0x3b8>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	2500      	movs	r5, #0
 8001c02:	4498      	add	r8, r3
 8001c04:	e667      	b.n	80018d6 <__aeabi_ddiv+0x26e>
 8001c06:	075d      	lsls	r5, r3, #29
 8001c08:	025b      	lsls	r3, r3, #9
 8001c0a:	0b1c      	lsrs	r4, r3, #12
 8001c0c:	08d2      	lsrs	r2, r2, #3
 8001c0e:	2300      	movs	r3, #0
 8001c10:	4315      	orrs	r5, r2
 8001c12:	e580      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001c14:	9800      	ldr	r0, [sp, #0]
 8001c16:	3d02      	subs	r5, #2
 8001c18:	0042      	lsls	r2, r0, #1
 8001c1a:	4282      	cmp	r2, r0
 8001c1c:	41bf      	sbcs	r7, r7
 8001c1e:	427f      	negs	r7, r7
 8001c20:	193c      	adds	r4, r7, r4
 8001c22:	1936      	adds	r6, r6, r4
 8001c24:	9200      	str	r2, [sp, #0]
 8001c26:	e7dd      	b.n	8001be4 <__aeabi_ddiv+0x57c>
 8001c28:	2480      	movs	r4, #128	; 0x80
 8001c2a:	4643      	mov	r3, r8
 8001c2c:	0324      	lsls	r4, r4, #12
 8001c2e:	431c      	orrs	r4, r3
 8001c30:	0324      	lsls	r4, r4, #12
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <__aeabi_ddiv+0x5dc>)
 8001c34:	0b24      	lsrs	r4, r4, #12
 8001c36:	e56e      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001c38:	9a00      	ldr	r2, [sp, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d3ea      	bcc.n	8001c14 <__aeabi_ddiv+0x5ac>
 8001c3e:	0005      	movs	r5, r0
 8001c40:	e7d3      	b.n	8001bea <__aeabi_ddiv+0x582>
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	000007ff 	.word	0x000007ff
 8001c48:	0000043e 	.word	0x0000043e
 8001c4c:	0000041e 	.word	0x0000041e
 8001c50:	000003ff 	.word	0x000003ff

08001c54 <__eqdf2>:
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c56:	464e      	mov	r6, r9
 8001c58:	4645      	mov	r5, r8
 8001c5a:	46de      	mov	lr, fp
 8001c5c:	4657      	mov	r7, sl
 8001c5e:	4690      	mov	r8, r2
 8001c60:	b5e0      	push	{r5, r6, r7, lr}
 8001c62:	0017      	movs	r7, r2
 8001c64:	031a      	lsls	r2, r3, #12
 8001c66:	0b12      	lsrs	r2, r2, #12
 8001c68:	0005      	movs	r5, r0
 8001c6a:	4684      	mov	ip, r0
 8001c6c:	4819      	ldr	r0, [pc, #100]	; (8001cd4 <__eqdf2+0x80>)
 8001c6e:	030e      	lsls	r6, r1, #12
 8001c70:	004c      	lsls	r4, r1, #1
 8001c72:	4691      	mov	r9, r2
 8001c74:	005a      	lsls	r2, r3, #1
 8001c76:	0fdb      	lsrs	r3, r3, #31
 8001c78:	469b      	mov	fp, r3
 8001c7a:	0b36      	lsrs	r6, r6, #12
 8001c7c:	0d64      	lsrs	r4, r4, #21
 8001c7e:	0fc9      	lsrs	r1, r1, #31
 8001c80:	0d52      	lsrs	r2, r2, #21
 8001c82:	4284      	cmp	r4, r0
 8001c84:	d019      	beq.n	8001cba <__eqdf2+0x66>
 8001c86:	4282      	cmp	r2, r0
 8001c88:	d010      	beq.n	8001cac <__eqdf2+0x58>
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	4294      	cmp	r4, r2
 8001c8e:	d10e      	bne.n	8001cae <__eqdf2+0x5a>
 8001c90:	454e      	cmp	r6, r9
 8001c92:	d10c      	bne.n	8001cae <__eqdf2+0x5a>
 8001c94:	2001      	movs	r0, #1
 8001c96:	45c4      	cmp	ip, r8
 8001c98:	d109      	bne.n	8001cae <__eqdf2+0x5a>
 8001c9a:	4559      	cmp	r1, fp
 8001c9c:	d017      	beq.n	8001cce <__eqdf2+0x7a>
 8001c9e:	2c00      	cmp	r4, #0
 8001ca0:	d105      	bne.n	8001cae <__eqdf2+0x5a>
 8001ca2:	0030      	movs	r0, r6
 8001ca4:	4328      	orrs	r0, r5
 8001ca6:	1e43      	subs	r3, r0, #1
 8001ca8:	4198      	sbcs	r0, r3
 8001caa:	e000      	b.n	8001cae <__eqdf2+0x5a>
 8001cac:	2001      	movs	r0, #1
 8001cae:	bcf0      	pop	{r4, r5, r6, r7}
 8001cb0:	46bb      	mov	fp, r7
 8001cb2:	46b2      	mov	sl, r6
 8001cb4:	46a9      	mov	r9, r5
 8001cb6:	46a0      	mov	r8, r4
 8001cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cba:	0033      	movs	r3, r6
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	432b      	orrs	r3, r5
 8001cc0:	d1f5      	bne.n	8001cae <__eqdf2+0x5a>
 8001cc2:	42a2      	cmp	r2, r4
 8001cc4:	d1f3      	bne.n	8001cae <__eqdf2+0x5a>
 8001cc6:	464b      	mov	r3, r9
 8001cc8:	433b      	orrs	r3, r7
 8001cca:	d1f0      	bne.n	8001cae <__eqdf2+0x5a>
 8001ccc:	e7e2      	b.n	8001c94 <__eqdf2+0x40>
 8001cce:	2000      	movs	r0, #0
 8001cd0:	e7ed      	b.n	8001cae <__eqdf2+0x5a>
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	000007ff 	.word	0x000007ff

08001cd8 <__gedf2>:
 8001cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cda:	4647      	mov	r7, r8
 8001cdc:	46ce      	mov	lr, r9
 8001cde:	0004      	movs	r4, r0
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	0016      	movs	r6, r2
 8001ce4:	031b      	lsls	r3, r3, #12
 8001ce6:	0b1b      	lsrs	r3, r3, #12
 8001ce8:	4d2d      	ldr	r5, [pc, #180]	; (8001da0 <__gedf2+0xc8>)
 8001cea:	004a      	lsls	r2, r1, #1
 8001cec:	4699      	mov	r9, r3
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	0043      	lsls	r3, r0, #1
 8001cf2:	030f      	lsls	r7, r1, #12
 8001cf4:	46a4      	mov	ip, r4
 8001cf6:	46b0      	mov	r8, r6
 8001cf8:	0b3f      	lsrs	r7, r7, #12
 8001cfa:	0d52      	lsrs	r2, r2, #21
 8001cfc:	0fc9      	lsrs	r1, r1, #31
 8001cfe:	0d5b      	lsrs	r3, r3, #21
 8001d00:	0fc0      	lsrs	r0, r0, #31
 8001d02:	42aa      	cmp	r2, r5
 8001d04:	d021      	beq.n	8001d4a <__gedf2+0x72>
 8001d06:	42ab      	cmp	r3, r5
 8001d08:	d013      	beq.n	8001d32 <__gedf2+0x5a>
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	d122      	bne.n	8001d54 <__gedf2+0x7c>
 8001d0e:	433c      	orrs	r4, r7
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <__gedf2+0x42>
 8001d14:	464d      	mov	r5, r9
 8001d16:	432e      	orrs	r6, r5
 8001d18:	d022      	beq.n	8001d60 <__gedf2+0x88>
 8001d1a:	2c00      	cmp	r4, #0
 8001d1c:	d010      	beq.n	8001d40 <__gedf2+0x68>
 8001d1e:	4281      	cmp	r1, r0
 8001d20:	d022      	beq.n	8001d68 <__gedf2+0x90>
 8001d22:	2002      	movs	r0, #2
 8001d24:	3901      	subs	r1, #1
 8001d26:	4008      	ands	r0, r1
 8001d28:	3801      	subs	r0, #1
 8001d2a:	bcc0      	pop	{r6, r7}
 8001d2c:	46b9      	mov	r9, r7
 8001d2e:	46b0      	mov	r8, r6
 8001d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d32:	464d      	mov	r5, r9
 8001d34:	432e      	orrs	r6, r5
 8001d36:	d129      	bne.n	8001d8c <__gedf2+0xb4>
 8001d38:	2a00      	cmp	r2, #0
 8001d3a:	d1f0      	bne.n	8001d1e <__gedf2+0x46>
 8001d3c:	433c      	orrs	r4, r7
 8001d3e:	d1ee      	bne.n	8001d1e <__gedf2+0x46>
 8001d40:	2800      	cmp	r0, #0
 8001d42:	d1f2      	bne.n	8001d2a <__gedf2+0x52>
 8001d44:	2001      	movs	r0, #1
 8001d46:	4240      	negs	r0, r0
 8001d48:	e7ef      	b.n	8001d2a <__gedf2+0x52>
 8001d4a:	003d      	movs	r5, r7
 8001d4c:	4325      	orrs	r5, r4
 8001d4e:	d11d      	bne.n	8001d8c <__gedf2+0xb4>
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d0ee      	beq.n	8001d32 <__gedf2+0x5a>
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1e2      	bne.n	8001d1e <__gedf2+0x46>
 8001d58:	464c      	mov	r4, r9
 8001d5a:	4326      	orrs	r6, r4
 8001d5c:	d1df      	bne.n	8001d1e <__gedf2+0x46>
 8001d5e:	e7e0      	b.n	8001d22 <__gedf2+0x4a>
 8001d60:	2000      	movs	r0, #0
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	d0e1      	beq.n	8001d2a <__gedf2+0x52>
 8001d66:	e7dc      	b.n	8001d22 <__gedf2+0x4a>
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dc0a      	bgt.n	8001d82 <__gedf2+0xaa>
 8001d6c:	dbe8      	blt.n	8001d40 <__gedf2+0x68>
 8001d6e:	454f      	cmp	r7, r9
 8001d70:	d8d7      	bhi.n	8001d22 <__gedf2+0x4a>
 8001d72:	d00e      	beq.n	8001d92 <__gedf2+0xba>
 8001d74:	2000      	movs	r0, #0
 8001d76:	454f      	cmp	r7, r9
 8001d78:	d2d7      	bcs.n	8001d2a <__gedf2+0x52>
 8001d7a:	2900      	cmp	r1, #0
 8001d7c:	d0e2      	beq.n	8001d44 <__gedf2+0x6c>
 8001d7e:	0008      	movs	r0, r1
 8001d80:	e7d3      	b.n	8001d2a <__gedf2+0x52>
 8001d82:	4243      	negs	r3, r0
 8001d84:	4158      	adcs	r0, r3
 8001d86:	0040      	lsls	r0, r0, #1
 8001d88:	3801      	subs	r0, #1
 8001d8a:	e7ce      	b.n	8001d2a <__gedf2+0x52>
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	4240      	negs	r0, r0
 8001d90:	e7cb      	b.n	8001d2a <__gedf2+0x52>
 8001d92:	45c4      	cmp	ip, r8
 8001d94:	d8c5      	bhi.n	8001d22 <__gedf2+0x4a>
 8001d96:	2000      	movs	r0, #0
 8001d98:	45c4      	cmp	ip, r8
 8001d9a:	d2c6      	bcs.n	8001d2a <__gedf2+0x52>
 8001d9c:	e7ed      	b.n	8001d7a <__gedf2+0xa2>
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	000007ff 	.word	0x000007ff

08001da4 <__ledf2>:
 8001da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da6:	4647      	mov	r7, r8
 8001da8:	46ce      	mov	lr, r9
 8001daa:	0004      	movs	r4, r0
 8001dac:	0018      	movs	r0, r3
 8001dae:	0016      	movs	r6, r2
 8001db0:	031b      	lsls	r3, r3, #12
 8001db2:	0b1b      	lsrs	r3, r3, #12
 8001db4:	4d2c      	ldr	r5, [pc, #176]	; (8001e68 <__ledf2+0xc4>)
 8001db6:	004a      	lsls	r2, r1, #1
 8001db8:	4699      	mov	r9, r3
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	0043      	lsls	r3, r0, #1
 8001dbe:	030f      	lsls	r7, r1, #12
 8001dc0:	46a4      	mov	ip, r4
 8001dc2:	46b0      	mov	r8, r6
 8001dc4:	0b3f      	lsrs	r7, r7, #12
 8001dc6:	0d52      	lsrs	r2, r2, #21
 8001dc8:	0fc9      	lsrs	r1, r1, #31
 8001dca:	0d5b      	lsrs	r3, r3, #21
 8001dcc:	0fc0      	lsrs	r0, r0, #31
 8001dce:	42aa      	cmp	r2, r5
 8001dd0:	d00d      	beq.n	8001dee <__ledf2+0x4a>
 8001dd2:	42ab      	cmp	r3, r5
 8001dd4:	d010      	beq.n	8001df8 <__ledf2+0x54>
 8001dd6:	2a00      	cmp	r2, #0
 8001dd8:	d127      	bne.n	8001e2a <__ledf2+0x86>
 8001dda:	433c      	orrs	r4, r7
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d111      	bne.n	8001e04 <__ledf2+0x60>
 8001de0:	464d      	mov	r5, r9
 8001de2:	432e      	orrs	r6, r5
 8001de4:	d10e      	bne.n	8001e04 <__ledf2+0x60>
 8001de6:	2000      	movs	r0, #0
 8001de8:	2c00      	cmp	r4, #0
 8001dea:	d015      	beq.n	8001e18 <__ledf2+0x74>
 8001dec:	e00e      	b.n	8001e0c <__ledf2+0x68>
 8001dee:	003d      	movs	r5, r7
 8001df0:	4325      	orrs	r5, r4
 8001df2:	d110      	bne.n	8001e16 <__ledf2+0x72>
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d118      	bne.n	8001e2a <__ledf2+0x86>
 8001df8:	464d      	mov	r5, r9
 8001dfa:	432e      	orrs	r6, r5
 8001dfc:	d10b      	bne.n	8001e16 <__ledf2+0x72>
 8001dfe:	2a00      	cmp	r2, #0
 8001e00:	d102      	bne.n	8001e08 <__ledf2+0x64>
 8001e02:	433c      	orrs	r4, r7
 8001e04:	2c00      	cmp	r4, #0
 8001e06:	d00b      	beq.n	8001e20 <__ledf2+0x7c>
 8001e08:	4281      	cmp	r1, r0
 8001e0a:	d014      	beq.n	8001e36 <__ledf2+0x92>
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	3901      	subs	r1, #1
 8001e10:	4008      	ands	r0, r1
 8001e12:	3801      	subs	r0, #1
 8001e14:	e000      	b.n	8001e18 <__ledf2+0x74>
 8001e16:	2002      	movs	r0, #2
 8001e18:	bcc0      	pop	{r6, r7}
 8001e1a:	46b9      	mov	r9, r7
 8001e1c:	46b0      	mov	r8, r6
 8001e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d1f9      	bne.n	8001e18 <__ledf2+0x74>
 8001e24:	2001      	movs	r0, #1
 8001e26:	4240      	negs	r0, r0
 8001e28:	e7f6      	b.n	8001e18 <__ledf2+0x74>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ec      	bne.n	8001e08 <__ledf2+0x64>
 8001e2e:	464c      	mov	r4, r9
 8001e30:	4326      	orrs	r6, r4
 8001e32:	d1e9      	bne.n	8001e08 <__ledf2+0x64>
 8001e34:	e7ea      	b.n	8001e0c <__ledf2+0x68>
 8001e36:	429a      	cmp	r2, r3
 8001e38:	dd04      	ble.n	8001e44 <__ledf2+0xa0>
 8001e3a:	4243      	negs	r3, r0
 8001e3c:	4158      	adcs	r0, r3
 8001e3e:	0040      	lsls	r0, r0, #1
 8001e40:	3801      	subs	r0, #1
 8001e42:	e7e9      	b.n	8001e18 <__ledf2+0x74>
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dbeb      	blt.n	8001e20 <__ledf2+0x7c>
 8001e48:	454f      	cmp	r7, r9
 8001e4a:	d8df      	bhi.n	8001e0c <__ledf2+0x68>
 8001e4c:	d006      	beq.n	8001e5c <__ledf2+0xb8>
 8001e4e:	2000      	movs	r0, #0
 8001e50:	454f      	cmp	r7, r9
 8001e52:	d2e1      	bcs.n	8001e18 <__ledf2+0x74>
 8001e54:	2900      	cmp	r1, #0
 8001e56:	d0e5      	beq.n	8001e24 <__ledf2+0x80>
 8001e58:	0008      	movs	r0, r1
 8001e5a:	e7dd      	b.n	8001e18 <__ledf2+0x74>
 8001e5c:	45c4      	cmp	ip, r8
 8001e5e:	d8d5      	bhi.n	8001e0c <__ledf2+0x68>
 8001e60:	2000      	movs	r0, #0
 8001e62:	45c4      	cmp	ip, r8
 8001e64:	d2d8      	bcs.n	8001e18 <__ledf2+0x74>
 8001e66:	e7f5      	b.n	8001e54 <__ledf2+0xb0>
 8001e68:	000007ff 	.word	0x000007ff

08001e6c <__aeabi_dmul>:
 8001e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e6e:	4657      	mov	r7, sl
 8001e70:	464e      	mov	r6, r9
 8001e72:	4645      	mov	r5, r8
 8001e74:	46de      	mov	lr, fp
 8001e76:	b5e0      	push	{r5, r6, r7, lr}
 8001e78:	4698      	mov	r8, r3
 8001e7a:	030c      	lsls	r4, r1, #12
 8001e7c:	004b      	lsls	r3, r1, #1
 8001e7e:	0006      	movs	r6, r0
 8001e80:	4692      	mov	sl, r2
 8001e82:	b087      	sub	sp, #28
 8001e84:	0b24      	lsrs	r4, r4, #12
 8001e86:	0d5b      	lsrs	r3, r3, #21
 8001e88:	0fcf      	lsrs	r7, r1, #31
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x24>
 8001e8e:	e15c      	b.n	800214a <__aeabi_dmul+0x2de>
 8001e90:	4ad9      	ldr	r2, [pc, #868]	; (80021f8 <__aeabi_dmul+0x38c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x2c>
 8001e96:	e175      	b.n	8002184 <__aeabi_dmul+0x318>
 8001e98:	0f42      	lsrs	r2, r0, #29
 8001e9a:	00e4      	lsls	r4, r4, #3
 8001e9c:	4314      	orrs	r4, r2
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	0412      	lsls	r2, r2, #16
 8001ea2:	4314      	orrs	r4, r2
 8001ea4:	4ad5      	ldr	r2, [pc, #852]	; (80021fc <__aeabi_dmul+0x390>)
 8001ea6:	00c5      	lsls	r5, r0, #3
 8001ea8:	4694      	mov	ip, r2
 8001eaa:	4463      	add	r3, ip
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	4699      	mov	r9, r3
 8001eb2:	469b      	mov	fp, r3
 8001eb4:	4643      	mov	r3, r8
 8001eb6:	4642      	mov	r2, r8
 8001eb8:	031e      	lsls	r6, r3, #12
 8001eba:	0fd2      	lsrs	r2, r2, #31
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4650      	mov	r0, sl
 8001ec0:	4690      	mov	r8, r2
 8001ec2:	0b36      	lsrs	r6, r6, #12
 8001ec4:	0d5b      	lsrs	r3, r3, #21
 8001ec6:	d100      	bne.n	8001eca <__aeabi_dmul+0x5e>
 8001ec8:	e120      	b.n	800210c <__aeabi_dmul+0x2a0>
 8001eca:	4acb      	ldr	r2, [pc, #812]	; (80021f8 <__aeabi_dmul+0x38c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_dmul+0x66>
 8001ed0:	e162      	b.n	8002198 <__aeabi_dmul+0x32c>
 8001ed2:	49ca      	ldr	r1, [pc, #808]	; (80021fc <__aeabi_dmul+0x390>)
 8001ed4:	0f42      	lsrs	r2, r0, #29
 8001ed6:	468c      	mov	ip, r1
 8001ed8:	9900      	ldr	r1, [sp, #0]
 8001eda:	4463      	add	r3, ip
 8001edc:	00f6      	lsls	r6, r6, #3
 8001ede:	468c      	mov	ip, r1
 8001ee0:	4316      	orrs	r6, r2
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	449c      	add	ip, r3
 8001ee6:	0412      	lsls	r2, r2, #16
 8001ee8:	4663      	mov	r3, ip
 8001eea:	4316      	orrs	r6, r2
 8001eec:	00c2      	lsls	r2, r0, #3
 8001eee:	2000      	movs	r0, #0
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	9900      	ldr	r1, [sp, #0]
 8001ef4:	4643      	mov	r3, r8
 8001ef6:	3101      	adds	r1, #1
 8001ef8:	468c      	mov	ip, r1
 8001efa:	4649      	mov	r1, r9
 8001efc:	407b      	eors	r3, r7
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	290f      	cmp	r1, #15
 8001f02:	d826      	bhi.n	8001f52 <__aeabi_dmul+0xe6>
 8001f04:	4bbe      	ldr	r3, [pc, #760]	; (8002200 <__aeabi_dmul+0x394>)
 8001f06:	0089      	lsls	r1, r1, #2
 8001f08:	5859      	ldr	r1, [r3, r1]
 8001f0a:	468f      	mov	pc, r1
 8001f0c:	4643      	mov	r3, r8
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	0034      	movs	r4, r6
 8001f12:	0015      	movs	r5, r2
 8001f14:	4683      	mov	fp, r0
 8001f16:	465b      	mov	r3, fp
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d016      	beq.n	8001f4a <__aeabi_dmul+0xde>
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_dmul+0xb6>
 8001f20:	e203      	b.n	800232a <__aeabi_dmul+0x4be>
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dmul+0xbc>
 8001f26:	e0cd      	b.n	80020c4 <__aeabi_dmul+0x258>
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2400      	movs	r4, #0
 8001f2c:	2500      	movs	r5, #0
 8001f2e:	9b01      	ldr	r3, [sp, #4]
 8001f30:	0512      	lsls	r2, r2, #20
 8001f32:	4322      	orrs	r2, r4
 8001f34:	07db      	lsls	r3, r3, #31
 8001f36:	431a      	orrs	r2, r3
 8001f38:	0028      	movs	r0, r5
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	b007      	add	sp, #28
 8001f3e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f40:	46bb      	mov	fp, r7
 8001f42:	46b2      	mov	sl, r6
 8001f44:	46a9      	mov	r9, r5
 8001f46:	46a0      	mov	r8, r4
 8001f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f4a:	2400      	movs	r4, #0
 8001f4c:	2500      	movs	r5, #0
 8001f4e:	4aaa      	ldr	r2, [pc, #680]	; (80021f8 <__aeabi_dmul+0x38c>)
 8001f50:	e7ed      	b.n	8001f2e <__aeabi_dmul+0xc2>
 8001f52:	0c28      	lsrs	r0, r5, #16
 8001f54:	042d      	lsls	r5, r5, #16
 8001f56:	0c2d      	lsrs	r5, r5, #16
 8001f58:	002b      	movs	r3, r5
 8001f5a:	0c11      	lsrs	r1, r2, #16
 8001f5c:	0412      	lsls	r2, r2, #16
 8001f5e:	0c12      	lsrs	r2, r2, #16
 8001f60:	4353      	muls	r3, r2
 8001f62:	4698      	mov	r8, r3
 8001f64:	0013      	movs	r3, r2
 8001f66:	002f      	movs	r7, r5
 8001f68:	4343      	muls	r3, r0
 8001f6a:	4699      	mov	r9, r3
 8001f6c:	434f      	muls	r7, r1
 8001f6e:	444f      	add	r7, r9
 8001f70:	46bb      	mov	fp, r7
 8001f72:	4647      	mov	r7, r8
 8001f74:	000b      	movs	r3, r1
 8001f76:	0c3f      	lsrs	r7, r7, #16
 8001f78:	46ba      	mov	sl, r7
 8001f7a:	4343      	muls	r3, r0
 8001f7c:	44da      	add	sl, fp
 8001f7e:	9302      	str	r3, [sp, #8]
 8001f80:	45d1      	cmp	r9, sl
 8001f82:	d904      	bls.n	8001f8e <__aeabi_dmul+0x122>
 8001f84:	2780      	movs	r7, #128	; 0x80
 8001f86:	027f      	lsls	r7, r7, #9
 8001f88:	46b9      	mov	r9, r7
 8001f8a:	444b      	add	r3, r9
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	4653      	mov	r3, sl
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	469b      	mov	fp, r3
 8001f94:	4653      	mov	r3, sl
 8001f96:	041f      	lsls	r7, r3, #16
 8001f98:	4643      	mov	r3, r8
 8001f9a:	041b      	lsls	r3, r3, #16
 8001f9c:	0c1b      	lsrs	r3, r3, #16
 8001f9e:	4698      	mov	r8, r3
 8001fa0:	003b      	movs	r3, r7
 8001fa2:	4443      	add	r3, r8
 8001fa4:	9304      	str	r3, [sp, #16]
 8001fa6:	0c33      	lsrs	r3, r6, #16
 8001fa8:	0436      	lsls	r6, r6, #16
 8001faa:	0c36      	lsrs	r6, r6, #16
 8001fac:	4698      	mov	r8, r3
 8001fae:	0033      	movs	r3, r6
 8001fb0:	4343      	muls	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	4643      	mov	r3, r8
 8001fb6:	4343      	muls	r3, r0
 8001fb8:	002f      	movs	r7, r5
 8001fba:	469a      	mov	sl, r3
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	4377      	muls	r7, r6
 8001fc0:	435d      	muls	r5, r3
 8001fc2:	0c38      	lsrs	r0, r7, #16
 8001fc4:	444d      	add	r5, r9
 8001fc6:	1945      	adds	r5, r0, r5
 8001fc8:	45a9      	cmp	r9, r5
 8001fca:	d903      	bls.n	8001fd4 <__aeabi_dmul+0x168>
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	025b      	lsls	r3, r3, #9
 8001fd0:	4699      	mov	r9, r3
 8001fd2:	44ca      	add	sl, r9
 8001fd4:	043f      	lsls	r7, r7, #16
 8001fd6:	0c28      	lsrs	r0, r5, #16
 8001fd8:	0c3f      	lsrs	r7, r7, #16
 8001fda:	042d      	lsls	r5, r5, #16
 8001fdc:	19ed      	adds	r5, r5, r7
 8001fde:	0c27      	lsrs	r7, r4, #16
 8001fe0:	0424      	lsls	r4, r4, #16
 8001fe2:	0c24      	lsrs	r4, r4, #16
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	0020      	movs	r0, r4
 8001fe8:	4350      	muls	r0, r2
 8001fea:	437a      	muls	r2, r7
 8001fec:	4691      	mov	r9, r2
 8001fee:	003a      	movs	r2, r7
 8001ff0:	4453      	add	r3, sl
 8001ff2:	9305      	str	r3, [sp, #20]
 8001ff4:	0c03      	lsrs	r3, r0, #16
 8001ff6:	469a      	mov	sl, r3
 8001ff8:	434a      	muls	r2, r1
 8001ffa:	4361      	muls	r1, r4
 8001ffc:	4449      	add	r1, r9
 8001ffe:	4451      	add	r1, sl
 8002000:	44ab      	add	fp, r5
 8002002:	4589      	cmp	r9, r1
 8002004:	d903      	bls.n	800200e <__aeabi_dmul+0x1a2>
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	025b      	lsls	r3, r3, #9
 800200a:	4699      	mov	r9, r3
 800200c:	444a      	add	r2, r9
 800200e:	0400      	lsls	r0, r0, #16
 8002010:	0c0b      	lsrs	r3, r1, #16
 8002012:	0c00      	lsrs	r0, r0, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	1809      	adds	r1, r1, r0
 8002018:	0020      	movs	r0, r4
 800201a:	4699      	mov	r9, r3
 800201c:	4643      	mov	r3, r8
 800201e:	4370      	muls	r0, r6
 8002020:	435c      	muls	r4, r3
 8002022:	437e      	muls	r6, r7
 8002024:	435f      	muls	r7, r3
 8002026:	0c03      	lsrs	r3, r0, #16
 8002028:	4698      	mov	r8, r3
 800202a:	19a4      	adds	r4, r4, r6
 800202c:	4444      	add	r4, r8
 800202e:	444a      	add	r2, r9
 8002030:	9703      	str	r7, [sp, #12]
 8002032:	42a6      	cmp	r6, r4
 8002034:	d904      	bls.n	8002040 <__aeabi_dmul+0x1d4>
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	025b      	lsls	r3, r3, #9
 800203a:	4698      	mov	r8, r3
 800203c:	4447      	add	r7, r8
 800203e:	9703      	str	r7, [sp, #12]
 8002040:	0423      	lsls	r3, r4, #16
 8002042:	9e02      	ldr	r6, [sp, #8]
 8002044:	469a      	mov	sl, r3
 8002046:	9b05      	ldr	r3, [sp, #20]
 8002048:	445e      	add	r6, fp
 800204a:	4698      	mov	r8, r3
 800204c:	42ae      	cmp	r6, r5
 800204e:	41ad      	sbcs	r5, r5
 8002050:	1876      	adds	r6, r6, r1
 8002052:	428e      	cmp	r6, r1
 8002054:	4189      	sbcs	r1, r1
 8002056:	0400      	lsls	r0, r0, #16
 8002058:	0c00      	lsrs	r0, r0, #16
 800205a:	4450      	add	r0, sl
 800205c:	4440      	add	r0, r8
 800205e:	426d      	negs	r5, r5
 8002060:	1947      	adds	r7, r0, r5
 8002062:	46b8      	mov	r8, r7
 8002064:	4693      	mov	fp, r2
 8002066:	4249      	negs	r1, r1
 8002068:	4689      	mov	r9, r1
 800206a:	44c3      	add	fp, r8
 800206c:	44d9      	add	r9, fp
 800206e:	4298      	cmp	r0, r3
 8002070:	4180      	sbcs	r0, r0
 8002072:	45a8      	cmp	r8, r5
 8002074:	41ad      	sbcs	r5, r5
 8002076:	4593      	cmp	fp, r2
 8002078:	4192      	sbcs	r2, r2
 800207a:	4589      	cmp	r9, r1
 800207c:	4189      	sbcs	r1, r1
 800207e:	426d      	negs	r5, r5
 8002080:	4240      	negs	r0, r0
 8002082:	4328      	orrs	r0, r5
 8002084:	0c24      	lsrs	r4, r4, #16
 8002086:	4252      	negs	r2, r2
 8002088:	4249      	negs	r1, r1
 800208a:	430a      	orrs	r2, r1
 800208c:	9b03      	ldr	r3, [sp, #12]
 800208e:	1900      	adds	r0, r0, r4
 8002090:	1880      	adds	r0, r0, r2
 8002092:	18c7      	adds	r7, r0, r3
 8002094:	464b      	mov	r3, r9
 8002096:	0ddc      	lsrs	r4, r3, #23
 8002098:	9b04      	ldr	r3, [sp, #16]
 800209a:	0275      	lsls	r5, r6, #9
 800209c:	431d      	orrs	r5, r3
 800209e:	1e6a      	subs	r2, r5, #1
 80020a0:	4195      	sbcs	r5, r2
 80020a2:	464b      	mov	r3, r9
 80020a4:	0df6      	lsrs	r6, r6, #23
 80020a6:	027f      	lsls	r7, r7, #9
 80020a8:	4335      	orrs	r5, r6
 80020aa:	025a      	lsls	r2, r3, #9
 80020ac:	433c      	orrs	r4, r7
 80020ae:	4315      	orrs	r5, r2
 80020b0:	01fb      	lsls	r3, r7, #7
 80020b2:	d400      	bmi.n	80020b6 <__aeabi_dmul+0x24a>
 80020b4:	e11c      	b.n	80022f0 <__aeabi_dmul+0x484>
 80020b6:	2101      	movs	r1, #1
 80020b8:	086a      	lsrs	r2, r5, #1
 80020ba:	400d      	ands	r5, r1
 80020bc:	4315      	orrs	r5, r2
 80020be:	07e2      	lsls	r2, r4, #31
 80020c0:	4315      	orrs	r5, r2
 80020c2:	0864      	lsrs	r4, r4, #1
 80020c4:	494f      	ldr	r1, [pc, #316]	; (8002204 <__aeabi_dmul+0x398>)
 80020c6:	4461      	add	r1, ip
 80020c8:	2900      	cmp	r1, #0
 80020ca:	dc00      	bgt.n	80020ce <__aeabi_dmul+0x262>
 80020cc:	e0b0      	b.n	8002230 <__aeabi_dmul+0x3c4>
 80020ce:	076b      	lsls	r3, r5, #29
 80020d0:	d009      	beq.n	80020e6 <__aeabi_dmul+0x27a>
 80020d2:	220f      	movs	r2, #15
 80020d4:	402a      	ands	r2, r5
 80020d6:	2a04      	cmp	r2, #4
 80020d8:	d005      	beq.n	80020e6 <__aeabi_dmul+0x27a>
 80020da:	1d2a      	adds	r2, r5, #4
 80020dc:	42aa      	cmp	r2, r5
 80020de:	41ad      	sbcs	r5, r5
 80020e0:	426d      	negs	r5, r5
 80020e2:	1964      	adds	r4, r4, r5
 80020e4:	0015      	movs	r5, r2
 80020e6:	01e3      	lsls	r3, r4, #7
 80020e8:	d504      	bpl.n	80020f4 <__aeabi_dmul+0x288>
 80020ea:	2180      	movs	r1, #128	; 0x80
 80020ec:	4a46      	ldr	r2, [pc, #280]	; (8002208 <__aeabi_dmul+0x39c>)
 80020ee:	00c9      	lsls	r1, r1, #3
 80020f0:	4014      	ands	r4, r2
 80020f2:	4461      	add	r1, ip
 80020f4:	4a45      	ldr	r2, [pc, #276]	; (800220c <__aeabi_dmul+0x3a0>)
 80020f6:	4291      	cmp	r1, r2
 80020f8:	dd00      	ble.n	80020fc <__aeabi_dmul+0x290>
 80020fa:	e726      	b.n	8001f4a <__aeabi_dmul+0xde>
 80020fc:	0762      	lsls	r2, r4, #29
 80020fe:	08ed      	lsrs	r5, r5, #3
 8002100:	0264      	lsls	r4, r4, #9
 8002102:	0549      	lsls	r1, r1, #21
 8002104:	4315      	orrs	r5, r2
 8002106:	0b24      	lsrs	r4, r4, #12
 8002108:	0d4a      	lsrs	r2, r1, #21
 800210a:	e710      	b.n	8001f2e <__aeabi_dmul+0xc2>
 800210c:	4652      	mov	r2, sl
 800210e:	4332      	orrs	r2, r6
 8002110:	d100      	bne.n	8002114 <__aeabi_dmul+0x2a8>
 8002112:	e07f      	b.n	8002214 <__aeabi_dmul+0x3a8>
 8002114:	2e00      	cmp	r6, #0
 8002116:	d100      	bne.n	800211a <__aeabi_dmul+0x2ae>
 8002118:	e0dc      	b.n	80022d4 <__aeabi_dmul+0x468>
 800211a:	0030      	movs	r0, r6
 800211c:	f000 fe1e 	bl	8002d5c <__clzsi2>
 8002120:	0002      	movs	r2, r0
 8002122:	3a0b      	subs	r2, #11
 8002124:	231d      	movs	r3, #29
 8002126:	0001      	movs	r1, r0
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	4652      	mov	r2, sl
 800212c:	3908      	subs	r1, #8
 800212e:	40da      	lsrs	r2, r3
 8002130:	408e      	lsls	r6, r1
 8002132:	4316      	orrs	r6, r2
 8002134:	4652      	mov	r2, sl
 8002136:	408a      	lsls	r2, r1
 8002138:	9b00      	ldr	r3, [sp, #0]
 800213a:	4935      	ldr	r1, [pc, #212]	; (8002210 <__aeabi_dmul+0x3a4>)
 800213c:	1a18      	subs	r0, r3, r0
 800213e:	0003      	movs	r3, r0
 8002140:	468c      	mov	ip, r1
 8002142:	4463      	add	r3, ip
 8002144:	2000      	movs	r0, #0
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	e6d3      	b.n	8001ef2 <__aeabi_dmul+0x86>
 800214a:	0025      	movs	r5, r4
 800214c:	4305      	orrs	r5, r0
 800214e:	d04a      	beq.n	80021e6 <__aeabi_dmul+0x37a>
 8002150:	2c00      	cmp	r4, #0
 8002152:	d100      	bne.n	8002156 <__aeabi_dmul+0x2ea>
 8002154:	e0b0      	b.n	80022b8 <__aeabi_dmul+0x44c>
 8002156:	0020      	movs	r0, r4
 8002158:	f000 fe00 	bl	8002d5c <__clzsi2>
 800215c:	0001      	movs	r1, r0
 800215e:	0002      	movs	r2, r0
 8002160:	390b      	subs	r1, #11
 8002162:	231d      	movs	r3, #29
 8002164:	0010      	movs	r0, r2
 8002166:	1a5b      	subs	r3, r3, r1
 8002168:	0031      	movs	r1, r6
 800216a:	0035      	movs	r5, r6
 800216c:	3808      	subs	r0, #8
 800216e:	4084      	lsls	r4, r0
 8002170:	40d9      	lsrs	r1, r3
 8002172:	4085      	lsls	r5, r0
 8002174:	430c      	orrs	r4, r1
 8002176:	4826      	ldr	r0, [pc, #152]	; (8002210 <__aeabi_dmul+0x3a4>)
 8002178:	1a83      	subs	r3, r0, r2
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2300      	movs	r3, #0
 800217e:	4699      	mov	r9, r3
 8002180:	469b      	mov	fp, r3
 8002182:	e697      	b.n	8001eb4 <__aeabi_dmul+0x48>
 8002184:	0005      	movs	r5, r0
 8002186:	4325      	orrs	r5, r4
 8002188:	d126      	bne.n	80021d8 <__aeabi_dmul+0x36c>
 800218a:	2208      	movs	r2, #8
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2302      	movs	r3, #2
 8002190:	2400      	movs	r4, #0
 8002192:	4691      	mov	r9, r2
 8002194:	469b      	mov	fp, r3
 8002196:	e68d      	b.n	8001eb4 <__aeabi_dmul+0x48>
 8002198:	4652      	mov	r2, sl
 800219a:	9b00      	ldr	r3, [sp, #0]
 800219c:	4332      	orrs	r2, r6
 800219e:	d110      	bne.n	80021c2 <__aeabi_dmul+0x356>
 80021a0:	4915      	ldr	r1, [pc, #84]	; (80021f8 <__aeabi_dmul+0x38c>)
 80021a2:	2600      	movs	r6, #0
 80021a4:	468c      	mov	ip, r1
 80021a6:	4463      	add	r3, ip
 80021a8:	4649      	mov	r1, r9
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2302      	movs	r3, #2
 80021ae:	4319      	orrs	r1, r3
 80021b0:	4689      	mov	r9, r1
 80021b2:	2002      	movs	r0, #2
 80021b4:	e69d      	b.n	8001ef2 <__aeabi_dmul+0x86>
 80021b6:	465b      	mov	r3, fp
 80021b8:	9701      	str	r7, [sp, #4]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d000      	beq.n	80021c0 <__aeabi_dmul+0x354>
 80021be:	e6ad      	b.n	8001f1c <__aeabi_dmul+0xb0>
 80021c0:	e6c3      	b.n	8001f4a <__aeabi_dmul+0xde>
 80021c2:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <__aeabi_dmul+0x38c>)
 80021c4:	2003      	movs	r0, #3
 80021c6:	4694      	mov	ip, r2
 80021c8:	4463      	add	r3, ip
 80021ca:	464a      	mov	r2, r9
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2303      	movs	r3, #3
 80021d0:	431a      	orrs	r2, r3
 80021d2:	4691      	mov	r9, r2
 80021d4:	4652      	mov	r2, sl
 80021d6:	e68c      	b.n	8001ef2 <__aeabi_dmul+0x86>
 80021d8:	220c      	movs	r2, #12
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2303      	movs	r3, #3
 80021de:	0005      	movs	r5, r0
 80021e0:	4691      	mov	r9, r2
 80021e2:	469b      	mov	fp, r3
 80021e4:	e666      	b.n	8001eb4 <__aeabi_dmul+0x48>
 80021e6:	2304      	movs	r3, #4
 80021e8:	4699      	mov	r9, r3
 80021ea:	2300      	movs	r3, #0
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	3301      	adds	r3, #1
 80021f0:	2400      	movs	r4, #0
 80021f2:	469b      	mov	fp, r3
 80021f4:	e65e      	b.n	8001eb4 <__aeabi_dmul+0x48>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	000007ff 	.word	0x000007ff
 80021fc:	fffffc01 	.word	0xfffffc01
 8002200:	0800c410 	.word	0x0800c410
 8002204:	000003ff 	.word	0x000003ff
 8002208:	feffffff 	.word	0xfeffffff
 800220c:	000007fe 	.word	0x000007fe
 8002210:	fffffc0d 	.word	0xfffffc0d
 8002214:	4649      	mov	r1, r9
 8002216:	2301      	movs	r3, #1
 8002218:	4319      	orrs	r1, r3
 800221a:	4689      	mov	r9, r1
 800221c:	2600      	movs	r6, #0
 800221e:	2001      	movs	r0, #1
 8002220:	e667      	b.n	8001ef2 <__aeabi_dmul+0x86>
 8002222:	2300      	movs	r3, #0
 8002224:	2480      	movs	r4, #128	; 0x80
 8002226:	2500      	movs	r5, #0
 8002228:	4a43      	ldr	r2, [pc, #268]	; (8002338 <__aeabi_dmul+0x4cc>)
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	0324      	lsls	r4, r4, #12
 800222e:	e67e      	b.n	8001f2e <__aeabi_dmul+0xc2>
 8002230:	2001      	movs	r0, #1
 8002232:	1a40      	subs	r0, r0, r1
 8002234:	2838      	cmp	r0, #56	; 0x38
 8002236:	dd00      	ble.n	800223a <__aeabi_dmul+0x3ce>
 8002238:	e676      	b.n	8001f28 <__aeabi_dmul+0xbc>
 800223a:	281f      	cmp	r0, #31
 800223c:	dd5b      	ble.n	80022f6 <__aeabi_dmul+0x48a>
 800223e:	221f      	movs	r2, #31
 8002240:	0023      	movs	r3, r4
 8002242:	4252      	negs	r2, r2
 8002244:	1a51      	subs	r1, r2, r1
 8002246:	40cb      	lsrs	r3, r1
 8002248:	0019      	movs	r1, r3
 800224a:	2820      	cmp	r0, #32
 800224c:	d003      	beq.n	8002256 <__aeabi_dmul+0x3ea>
 800224e:	4a3b      	ldr	r2, [pc, #236]	; (800233c <__aeabi_dmul+0x4d0>)
 8002250:	4462      	add	r2, ip
 8002252:	4094      	lsls	r4, r2
 8002254:	4325      	orrs	r5, r4
 8002256:	1e6a      	subs	r2, r5, #1
 8002258:	4195      	sbcs	r5, r2
 800225a:	002a      	movs	r2, r5
 800225c:	430a      	orrs	r2, r1
 800225e:	2107      	movs	r1, #7
 8002260:	000d      	movs	r5, r1
 8002262:	2400      	movs	r4, #0
 8002264:	4015      	ands	r5, r2
 8002266:	4211      	tst	r1, r2
 8002268:	d05b      	beq.n	8002322 <__aeabi_dmul+0x4b6>
 800226a:	210f      	movs	r1, #15
 800226c:	2400      	movs	r4, #0
 800226e:	4011      	ands	r1, r2
 8002270:	2904      	cmp	r1, #4
 8002272:	d053      	beq.n	800231c <__aeabi_dmul+0x4b0>
 8002274:	1d11      	adds	r1, r2, #4
 8002276:	4291      	cmp	r1, r2
 8002278:	4192      	sbcs	r2, r2
 800227a:	4252      	negs	r2, r2
 800227c:	18a4      	adds	r4, r4, r2
 800227e:	000a      	movs	r2, r1
 8002280:	0223      	lsls	r3, r4, #8
 8002282:	d54b      	bpl.n	800231c <__aeabi_dmul+0x4b0>
 8002284:	2201      	movs	r2, #1
 8002286:	2400      	movs	r4, #0
 8002288:	2500      	movs	r5, #0
 800228a:	e650      	b.n	8001f2e <__aeabi_dmul+0xc2>
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	031b      	lsls	r3, r3, #12
 8002290:	421c      	tst	r4, r3
 8002292:	d009      	beq.n	80022a8 <__aeabi_dmul+0x43c>
 8002294:	421e      	tst	r6, r3
 8002296:	d107      	bne.n	80022a8 <__aeabi_dmul+0x43c>
 8002298:	4333      	orrs	r3, r6
 800229a:	031c      	lsls	r4, r3, #12
 800229c:	4643      	mov	r3, r8
 800229e:	0015      	movs	r5, r2
 80022a0:	0b24      	lsrs	r4, r4, #12
 80022a2:	4a25      	ldr	r2, [pc, #148]	; (8002338 <__aeabi_dmul+0x4cc>)
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	e642      	b.n	8001f2e <__aeabi_dmul+0xc2>
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	0312      	lsls	r2, r2, #12
 80022ac:	4314      	orrs	r4, r2
 80022ae:	0324      	lsls	r4, r4, #12
 80022b0:	4a21      	ldr	r2, [pc, #132]	; (8002338 <__aeabi_dmul+0x4cc>)
 80022b2:	0b24      	lsrs	r4, r4, #12
 80022b4:	9701      	str	r7, [sp, #4]
 80022b6:	e63a      	b.n	8001f2e <__aeabi_dmul+0xc2>
 80022b8:	f000 fd50 	bl	8002d5c <__clzsi2>
 80022bc:	0001      	movs	r1, r0
 80022be:	0002      	movs	r2, r0
 80022c0:	3115      	adds	r1, #21
 80022c2:	3220      	adds	r2, #32
 80022c4:	291c      	cmp	r1, #28
 80022c6:	dc00      	bgt.n	80022ca <__aeabi_dmul+0x45e>
 80022c8:	e74b      	b.n	8002162 <__aeabi_dmul+0x2f6>
 80022ca:	0034      	movs	r4, r6
 80022cc:	3808      	subs	r0, #8
 80022ce:	2500      	movs	r5, #0
 80022d0:	4084      	lsls	r4, r0
 80022d2:	e750      	b.n	8002176 <__aeabi_dmul+0x30a>
 80022d4:	f000 fd42 	bl	8002d5c <__clzsi2>
 80022d8:	0003      	movs	r3, r0
 80022da:	001a      	movs	r2, r3
 80022dc:	3215      	adds	r2, #21
 80022de:	3020      	adds	r0, #32
 80022e0:	2a1c      	cmp	r2, #28
 80022e2:	dc00      	bgt.n	80022e6 <__aeabi_dmul+0x47a>
 80022e4:	e71e      	b.n	8002124 <__aeabi_dmul+0x2b8>
 80022e6:	4656      	mov	r6, sl
 80022e8:	3b08      	subs	r3, #8
 80022ea:	2200      	movs	r2, #0
 80022ec:	409e      	lsls	r6, r3
 80022ee:	e723      	b.n	8002138 <__aeabi_dmul+0x2cc>
 80022f0:	9b00      	ldr	r3, [sp, #0]
 80022f2:	469c      	mov	ip, r3
 80022f4:	e6e6      	b.n	80020c4 <__aeabi_dmul+0x258>
 80022f6:	4912      	ldr	r1, [pc, #72]	; (8002340 <__aeabi_dmul+0x4d4>)
 80022f8:	0022      	movs	r2, r4
 80022fa:	4461      	add	r1, ip
 80022fc:	002e      	movs	r6, r5
 80022fe:	408d      	lsls	r5, r1
 8002300:	408a      	lsls	r2, r1
 8002302:	40c6      	lsrs	r6, r0
 8002304:	1e69      	subs	r1, r5, #1
 8002306:	418d      	sbcs	r5, r1
 8002308:	4332      	orrs	r2, r6
 800230a:	432a      	orrs	r2, r5
 800230c:	40c4      	lsrs	r4, r0
 800230e:	0753      	lsls	r3, r2, #29
 8002310:	d0b6      	beq.n	8002280 <__aeabi_dmul+0x414>
 8002312:	210f      	movs	r1, #15
 8002314:	4011      	ands	r1, r2
 8002316:	2904      	cmp	r1, #4
 8002318:	d1ac      	bne.n	8002274 <__aeabi_dmul+0x408>
 800231a:	e7b1      	b.n	8002280 <__aeabi_dmul+0x414>
 800231c:	0765      	lsls	r5, r4, #29
 800231e:	0264      	lsls	r4, r4, #9
 8002320:	0b24      	lsrs	r4, r4, #12
 8002322:	08d2      	lsrs	r2, r2, #3
 8002324:	4315      	orrs	r5, r2
 8002326:	2200      	movs	r2, #0
 8002328:	e601      	b.n	8001f2e <__aeabi_dmul+0xc2>
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	0312      	lsls	r2, r2, #12
 800232e:	4314      	orrs	r4, r2
 8002330:	0324      	lsls	r4, r4, #12
 8002332:	4a01      	ldr	r2, [pc, #4]	; (8002338 <__aeabi_dmul+0x4cc>)
 8002334:	0b24      	lsrs	r4, r4, #12
 8002336:	e5fa      	b.n	8001f2e <__aeabi_dmul+0xc2>
 8002338:	000007ff 	.word	0x000007ff
 800233c:	0000043e 	.word	0x0000043e
 8002340:	0000041e 	.word	0x0000041e

08002344 <__aeabi_dsub>:
 8002344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002346:	4657      	mov	r7, sl
 8002348:	464e      	mov	r6, r9
 800234a:	4645      	mov	r5, r8
 800234c:	46de      	mov	lr, fp
 800234e:	b5e0      	push	{r5, r6, r7, lr}
 8002350:	001e      	movs	r6, r3
 8002352:	0017      	movs	r7, r2
 8002354:	004a      	lsls	r2, r1, #1
 8002356:	030b      	lsls	r3, r1, #12
 8002358:	0d52      	lsrs	r2, r2, #21
 800235a:	0a5b      	lsrs	r3, r3, #9
 800235c:	4690      	mov	r8, r2
 800235e:	0f42      	lsrs	r2, r0, #29
 8002360:	431a      	orrs	r2, r3
 8002362:	0fcd      	lsrs	r5, r1, #31
 8002364:	4ccd      	ldr	r4, [pc, #820]	; (800269c <__aeabi_dsub+0x358>)
 8002366:	0331      	lsls	r1, r6, #12
 8002368:	00c3      	lsls	r3, r0, #3
 800236a:	4694      	mov	ip, r2
 800236c:	0070      	lsls	r0, r6, #1
 800236e:	0f7a      	lsrs	r2, r7, #29
 8002370:	0a49      	lsrs	r1, r1, #9
 8002372:	00ff      	lsls	r7, r7, #3
 8002374:	469a      	mov	sl, r3
 8002376:	46b9      	mov	r9, r7
 8002378:	0d40      	lsrs	r0, r0, #21
 800237a:	0ff6      	lsrs	r6, r6, #31
 800237c:	4311      	orrs	r1, r2
 800237e:	42a0      	cmp	r0, r4
 8002380:	d100      	bne.n	8002384 <__aeabi_dsub+0x40>
 8002382:	e0b1      	b.n	80024e8 <__aeabi_dsub+0x1a4>
 8002384:	2201      	movs	r2, #1
 8002386:	4056      	eors	r6, r2
 8002388:	46b3      	mov	fp, r6
 800238a:	42b5      	cmp	r5, r6
 800238c:	d100      	bne.n	8002390 <__aeabi_dsub+0x4c>
 800238e:	e088      	b.n	80024a2 <__aeabi_dsub+0x15e>
 8002390:	4642      	mov	r2, r8
 8002392:	1a12      	subs	r2, r2, r0
 8002394:	2a00      	cmp	r2, #0
 8002396:	dc00      	bgt.n	800239a <__aeabi_dsub+0x56>
 8002398:	e0ae      	b.n	80024f8 <__aeabi_dsub+0x1b4>
 800239a:	2800      	cmp	r0, #0
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x5c>
 800239e:	e0c1      	b.n	8002524 <__aeabi_dsub+0x1e0>
 80023a0:	48be      	ldr	r0, [pc, #760]	; (800269c <__aeabi_dsub+0x358>)
 80023a2:	4580      	cmp	r8, r0
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x64>
 80023a6:	e151      	b.n	800264c <__aeabi_dsub+0x308>
 80023a8:	2080      	movs	r0, #128	; 0x80
 80023aa:	0400      	lsls	r0, r0, #16
 80023ac:	4301      	orrs	r1, r0
 80023ae:	2a38      	cmp	r2, #56	; 0x38
 80023b0:	dd00      	ble.n	80023b4 <__aeabi_dsub+0x70>
 80023b2:	e17b      	b.n	80026ac <__aeabi_dsub+0x368>
 80023b4:	2a1f      	cmp	r2, #31
 80023b6:	dd00      	ble.n	80023ba <__aeabi_dsub+0x76>
 80023b8:	e1ee      	b.n	8002798 <__aeabi_dsub+0x454>
 80023ba:	2020      	movs	r0, #32
 80023bc:	003e      	movs	r6, r7
 80023be:	1a80      	subs	r0, r0, r2
 80023c0:	000c      	movs	r4, r1
 80023c2:	40d6      	lsrs	r6, r2
 80023c4:	40d1      	lsrs	r1, r2
 80023c6:	4087      	lsls	r7, r0
 80023c8:	4662      	mov	r2, ip
 80023ca:	4084      	lsls	r4, r0
 80023cc:	1a52      	subs	r2, r2, r1
 80023ce:	1e78      	subs	r0, r7, #1
 80023d0:	4187      	sbcs	r7, r0
 80023d2:	4694      	mov	ip, r2
 80023d4:	4334      	orrs	r4, r6
 80023d6:	4327      	orrs	r7, r4
 80023d8:	1bdc      	subs	r4, r3, r7
 80023da:	42a3      	cmp	r3, r4
 80023dc:	419b      	sbcs	r3, r3
 80023de:	4662      	mov	r2, ip
 80023e0:	425b      	negs	r3, r3
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	4699      	mov	r9, r3
 80023e6:	464b      	mov	r3, r9
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	d400      	bmi.n	80023ee <__aeabi_dsub+0xaa>
 80023ec:	e118      	b.n	8002620 <__aeabi_dsub+0x2dc>
 80023ee:	464b      	mov	r3, r9
 80023f0:	0258      	lsls	r0, r3, #9
 80023f2:	0a43      	lsrs	r3, r0, #9
 80023f4:	4699      	mov	r9, r3
 80023f6:	464b      	mov	r3, r9
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d100      	bne.n	80023fe <__aeabi_dsub+0xba>
 80023fc:	e137      	b.n	800266e <__aeabi_dsub+0x32a>
 80023fe:	4648      	mov	r0, r9
 8002400:	f000 fcac 	bl	8002d5c <__clzsi2>
 8002404:	0001      	movs	r1, r0
 8002406:	3908      	subs	r1, #8
 8002408:	2320      	movs	r3, #32
 800240a:	0022      	movs	r2, r4
 800240c:	4648      	mov	r0, r9
 800240e:	1a5b      	subs	r3, r3, r1
 8002410:	40da      	lsrs	r2, r3
 8002412:	4088      	lsls	r0, r1
 8002414:	408c      	lsls	r4, r1
 8002416:	4643      	mov	r3, r8
 8002418:	4310      	orrs	r0, r2
 800241a:	4588      	cmp	r8, r1
 800241c:	dd00      	ble.n	8002420 <__aeabi_dsub+0xdc>
 800241e:	e136      	b.n	800268e <__aeabi_dsub+0x34a>
 8002420:	1ac9      	subs	r1, r1, r3
 8002422:	1c4b      	adds	r3, r1, #1
 8002424:	2b1f      	cmp	r3, #31
 8002426:	dd00      	ble.n	800242a <__aeabi_dsub+0xe6>
 8002428:	e0ea      	b.n	8002600 <__aeabi_dsub+0x2bc>
 800242a:	2220      	movs	r2, #32
 800242c:	0026      	movs	r6, r4
 800242e:	1ad2      	subs	r2, r2, r3
 8002430:	0001      	movs	r1, r0
 8002432:	4094      	lsls	r4, r2
 8002434:	40de      	lsrs	r6, r3
 8002436:	40d8      	lsrs	r0, r3
 8002438:	2300      	movs	r3, #0
 800243a:	4091      	lsls	r1, r2
 800243c:	1e62      	subs	r2, r4, #1
 800243e:	4194      	sbcs	r4, r2
 8002440:	4681      	mov	r9, r0
 8002442:	4698      	mov	r8, r3
 8002444:	4331      	orrs	r1, r6
 8002446:	430c      	orrs	r4, r1
 8002448:	0763      	lsls	r3, r4, #29
 800244a:	d009      	beq.n	8002460 <__aeabi_dsub+0x11c>
 800244c:	230f      	movs	r3, #15
 800244e:	4023      	ands	r3, r4
 8002450:	2b04      	cmp	r3, #4
 8002452:	d005      	beq.n	8002460 <__aeabi_dsub+0x11c>
 8002454:	1d23      	adds	r3, r4, #4
 8002456:	42a3      	cmp	r3, r4
 8002458:	41a4      	sbcs	r4, r4
 800245a:	4264      	negs	r4, r4
 800245c:	44a1      	add	r9, r4
 800245e:	001c      	movs	r4, r3
 8002460:	464b      	mov	r3, r9
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	d400      	bmi.n	8002468 <__aeabi_dsub+0x124>
 8002466:	e0de      	b.n	8002626 <__aeabi_dsub+0x2e2>
 8002468:	4641      	mov	r1, r8
 800246a:	4b8c      	ldr	r3, [pc, #560]	; (800269c <__aeabi_dsub+0x358>)
 800246c:	3101      	adds	r1, #1
 800246e:	4299      	cmp	r1, r3
 8002470:	d100      	bne.n	8002474 <__aeabi_dsub+0x130>
 8002472:	e0e7      	b.n	8002644 <__aeabi_dsub+0x300>
 8002474:	464b      	mov	r3, r9
 8002476:	488a      	ldr	r0, [pc, #552]	; (80026a0 <__aeabi_dsub+0x35c>)
 8002478:	08e4      	lsrs	r4, r4, #3
 800247a:	4003      	ands	r3, r0
 800247c:	0018      	movs	r0, r3
 800247e:	0549      	lsls	r1, r1, #21
 8002480:	075b      	lsls	r3, r3, #29
 8002482:	0240      	lsls	r0, r0, #9
 8002484:	4323      	orrs	r3, r4
 8002486:	0d4a      	lsrs	r2, r1, #21
 8002488:	0b04      	lsrs	r4, r0, #12
 800248a:	0512      	lsls	r2, r2, #20
 800248c:	07ed      	lsls	r5, r5, #31
 800248e:	4322      	orrs	r2, r4
 8002490:	432a      	orrs	r2, r5
 8002492:	0018      	movs	r0, r3
 8002494:	0011      	movs	r1, r2
 8002496:	bcf0      	pop	{r4, r5, r6, r7}
 8002498:	46bb      	mov	fp, r7
 800249a:	46b2      	mov	sl, r6
 800249c:	46a9      	mov	r9, r5
 800249e:	46a0      	mov	r8, r4
 80024a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024a2:	4642      	mov	r2, r8
 80024a4:	1a12      	subs	r2, r2, r0
 80024a6:	2a00      	cmp	r2, #0
 80024a8:	dd52      	ble.n	8002550 <__aeabi_dsub+0x20c>
 80024aa:	2800      	cmp	r0, #0
 80024ac:	d100      	bne.n	80024b0 <__aeabi_dsub+0x16c>
 80024ae:	e09c      	b.n	80025ea <__aeabi_dsub+0x2a6>
 80024b0:	45a0      	cmp	r8, r4
 80024b2:	d100      	bne.n	80024b6 <__aeabi_dsub+0x172>
 80024b4:	e0ca      	b.n	800264c <__aeabi_dsub+0x308>
 80024b6:	2080      	movs	r0, #128	; 0x80
 80024b8:	0400      	lsls	r0, r0, #16
 80024ba:	4301      	orrs	r1, r0
 80024bc:	2a38      	cmp	r2, #56	; 0x38
 80024be:	dd00      	ble.n	80024c2 <__aeabi_dsub+0x17e>
 80024c0:	e149      	b.n	8002756 <__aeabi_dsub+0x412>
 80024c2:	2a1f      	cmp	r2, #31
 80024c4:	dc00      	bgt.n	80024c8 <__aeabi_dsub+0x184>
 80024c6:	e197      	b.n	80027f8 <__aeabi_dsub+0x4b4>
 80024c8:	0010      	movs	r0, r2
 80024ca:	000e      	movs	r6, r1
 80024cc:	3820      	subs	r0, #32
 80024ce:	40c6      	lsrs	r6, r0
 80024d0:	2a20      	cmp	r2, #32
 80024d2:	d004      	beq.n	80024de <__aeabi_dsub+0x19a>
 80024d4:	2040      	movs	r0, #64	; 0x40
 80024d6:	1a82      	subs	r2, r0, r2
 80024d8:	4091      	lsls	r1, r2
 80024da:	430f      	orrs	r7, r1
 80024dc:	46b9      	mov	r9, r7
 80024de:	464c      	mov	r4, r9
 80024e0:	1e62      	subs	r2, r4, #1
 80024e2:	4194      	sbcs	r4, r2
 80024e4:	4334      	orrs	r4, r6
 80024e6:	e13a      	b.n	800275e <__aeabi_dsub+0x41a>
 80024e8:	000a      	movs	r2, r1
 80024ea:	433a      	orrs	r2, r7
 80024ec:	d028      	beq.n	8002540 <__aeabi_dsub+0x1fc>
 80024ee:	46b3      	mov	fp, r6
 80024f0:	42b5      	cmp	r5, r6
 80024f2:	d02b      	beq.n	800254c <__aeabi_dsub+0x208>
 80024f4:	4a6b      	ldr	r2, [pc, #428]	; (80026a4 <__aeabi_dsub+0x360>)
 80024f6:	4442      	add	r2, r8
 80024f8:	2a00      	cmp	r2, #0
 80024fa:	d05d      	beq.n	80025b8 <__aeabi_dsub+0x274>
 80024fc:	4642      	mov	r2, r8
 80024fe:	4644      	mov	r4, r8
 8002500:	1a82      	subs	r2, r0, r2
 8002502:	2c00      	cmp	r4, #0
 8002504:	d000      	beq.n	8002508 <__aeabi_dsub+0x1c4>
 8002506:	e0f5      	b.n	80026f4 <__aeabi_dsub+0x3b0>
 8002508:	4665      	mov	r5, ip
 800250a:	431d      	orrs	r5, r3
 800250c:	d100      	bne.n	8002510 <__aeabi_dsub+0x1cc>
 800250e:	e19c      	b.n	800284a <__aeabi_dsub+0x506>
 8002510:	1e55      	subs	r5, r2, #1
 8002512:	2a01      	cmp	r2, #1
 8002514:	d100      	bne.n	8002518 <__aeabi_dsub+0x1d4>
 8002516:	e1fb      	b.n	8002910 <__aeabi_dsub+0x5cc>
 8002518:	4c60      	ldr	r4, [pc, #384]	; (800269c <__aeabi_dsub+0x358>)
 800251a:	42a2      	cmp	r2, r4
 800251c:	d100      	bne.n	8002520 <__aeabi_dsub+0x1dc>
 800251e:	e1bd      	b.n	800289c <__aeabi_dsub+0x558>
 8002520:	002a      	movs	r2, r5
 8002522:	e0f0      	b.n	8002706 <__aeabi_dsub+0x3c2>
 8002524:	0008      	movs	r0, r1
 8002526:	4338      	orrs	r0, r7
 8002528:	d100      	bne.n	800252c <__aeabi_dsub+0x1e8>
 800252a:	e0c3      	b.n	80026b4 <__aeabi_dsub+0x370>
 800252c:	1e50      	subs	r0, r2, #1
 800252e:	2a01      	cmp	r2, #1
 8002530:	d100      	bne.n	8002534 <__aeabi_dsub+0x1f0>
 8002532:	e1a8      	b.n	8002886 <__aeabi_dsub+0x542>
 8002534:	4c59      	ldr	r4, [pc, #356]	; (800269c <__aeabi_dsub+0x358>)
 8002536:	42a2      	cmp	r2, r4
 8002538:	d100      	bne.n	800253c <__aeabi_dsub+0x1f8>
 800253a:	e087      	b.n	800264c <__aeabi_dsub+0x308>
 800253c:	0002      	movs	r2, r0
 800253e:	e736      	b.n	80023ae <__aeabi_dsub+0x6a>
 8002540:	2201      	movs	r2, #1
 8002542:	4056      	eors	r6, r2
 8002544:	46b3      	mov	fp, r6
 8002546:	42b5      	cmp	r5, r6
 8002548:	d000      	beq.n	800254c <__aeabi_dsub+0x208>
 800254a:	e721      	b.n	8002390 <__aeabi_dsub+0x4c>
 800254c:	4a55      	ldr	r2, [pc, #340]	; (80026a4 <__aeabi_dsub+0x360>)
 800254e:	4442      	add	r2, r8
 8002550:	2a00      	cmp	r2, #0
 8002552:	d100      	bne.n	8002556 <__aeabi_dsub+0x212>
 8002554:	e0b5      	b.n	80026c2 <__aeabi_dsub+0x37e>
 8002556:	4642      	mov	r2, r8
 8002558:	4644      	mov	r4, r8
 800255a:	1a82      	subs	r2, r0, r2
 800255c:	2c00      	cmp	r4, #0
 800255e:	d100      	bne.n	8002562 <__aeabi_dsub+0x21e>
 8002560:	e138      	b.n	80027d4 <__aeabi_dsub+0x490>
 8002562:	4e4e      	ldr	r6, [pc, #312]	; (800269c <__aeabi_dsub+0x358>)
 8002564:	42b0      	cmp	r0, r6
 8002566:	d100      	bne.n	800256a <__aeabi_dsub+0x226>
 8002568:	e1de      	b.n	8002928 <__aeabi_dsub+0x5e4>
 800256a:	2680      	movs	r6, #128	; 0x80
 800256c:	4664      	mov	r4, ip
 800256e:	0436      	lsls	r6, r6, #16
 8002570:	4334      	orrs	r4, r6
 8002572:	46a4      	mov	ip, r4
 8002574:	2a38      	cmp	r2, #56	; 0x38
 8002576:	dd00      	ble.n	800257a <__aeabi_dsub+0x236>
 8002578:	e196      	b.n	80028a8 <__aeabi_dsub+0x564>
 800257a:	2a1f      	cmp	r2, #31
 800257c:	dd00      	ble.n	8002580 <__aeabi_dsub+0x23c>
 800257e:	e224      	b.n	80029ca <__aeabi_dsub+0x686>
 8002580:	2620      	movs	r6, #32
 8002582:	1ab4      	subs	r4, r6, r2
 8002584:	46a2      	mov	sl, r4
 8002586:	4664      	mov	r4, ip
 8002588:	4656      	mov	r6, sl
 800258a:	40b4      	lsls	r4, r6
 800258c:	46a1      	mov	r9, r4
 800258e:	001c      	movs	r4, r3
 8002590:	464e      	mov	r6, r9
 8002592:	40d4      	lsrs	r4, r2
 8002594:	4326      	orrs	r6, r4
 8002596:	0034      	movs	r4, r6
 8002598:	4656      	mov	r6, sl
 800259a:	40b3      	lsls	r3, r6
 800259c:	1e5e      	subs	r6, r3, #1
 800259e:	41b3      	sbcs	r3, r6
 80025a0:	431c      	orrs	r4, r3
 80025a2:	4663      	mov	r3, ip
 80025a4:	40d3      	lsrs	r3, r2
 80025a6:	18c9      	adds	r1, r1, r3
 80025a8:	19e4      	adds	r4, r4, r7
 80025aa:	42bc      	cmp	r4, r7
 80025ac:	41bf      	sbcs	r7, r7
 80025ae:	427f      	negs	r7, r7
 80025b0:	46b9      	mov	r9, r7
 80025b2:	4680      	mov	r8, r0
 80025b4:	4489      	add	r9, r1
 80025b6:	e0d8      	b.n	800276a <__aeabi_dsub+0x426>
 80025b8:	4640      	mov	r0, r8
 80025ba:	4c3b      	ldr	r4, [pc, #236]	; (80026a8 <__aeabi_dsub+0x364>)
 80025bc:	3001      	adds	r0, #1
 80025be:	4220      	tst	r0, r4
 80025c0:	d000      	beq.n	80025c4 <__aeabi_dsub+0x280>
 80025c2:	e0b4      	b.n	800272e <__aeabi_dsub+0x3ea>
 80025c4:	4640      	mov	r0, r8
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d000      	beq.n	80025cc <__aeabi_dsub+0x288>
 80025ca:	e144      	b.n	8002856 <__aeabi_dsub+0x512>
 80025cc:	4660      	mov	r0, ip
 80025ce:	4318      	orrs	r0, r3
 80025d0:	d100      	bne.n	80025d4 <__aeabi_dsub+0x290>
 80025d2:	e190      	b.n	80028f6 <__aeabi_dsub+0x5b2>
 80025d4:	0008      	movs	r0, r1
 80025d6:	4338      	orrs	r0, r7
 80025d8:	d000      	beq.n	80025dc <__aeabi_dsub+0x298>
 80025da:	e1aa      	b.n	8002932 <__aeabi_dsub+0x5ee>
 80025dc:	4661      	mov	r1, ip
 80025de:	08db      	lsrs	r3, r3, #3
 80025e0:	0749      	lsls	r1, r1, #29
 80025e2:	430b      	orrs	r3, r1
 80025e4:	4661      	mov	r1, ip
 80025e6:	08cc      	lsrs	r4, r1, #3
 80025e8:	e027      	b.n	800263a <__aeabi_dsub+0x2f6>
 80025ea:	0008      	movs	r0, r1
 80025ec:	4338      	orrs	r0, r7
 80025ee:	d061      	beq.n	80026b4 <__aeabi_dsub+0x370>
 80025f0:	1e50      	subs	r0, r2, #1
 80025f2:	2a01      	cmp	r2, #1
 80025f4:	d100      	bne.n	80025f8 <__aeabi_dsub+0x2b4>
 80025f6:	e139      	b.n	800286c <__aeabi_dsub+0x528>
 80025f8:	42a2      	cmp	r2, r4
 80025fa:	d027      	beq.n	800264c <__aeabi_dsub+0x308>
 80025fc:	0002      	movs	r2, r0
 80025fe:	e75d      	b.n	80024bc <__aeabi_dsub+0x178>
 8002600:	0002      	movs	r2, r0
 8002602:	391f      	subs	r1, #31
 8002604:	40ca      	lsrs	r2, r1
 8002606:	0011      	movs	r1, r2
 8002608:	2b20      	cmp	r3, #32
 800260a:	d003      	beq.n	8002614 <__aeabi_dsub+0x2d0>
 800260c:	2240      	movs	r2, #64	; 0x40
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	4098      	lsls	r0, r3
 8002612:	4304      	orrs	r4, r0
 8002614:	1e63      	subs	r3, r4, #1
 8002616:	419c      	sbcs	r4, r3
 8002618:	2300      	movs	r3, #0
 800261a:	4699      	mov	r9, r3
 800261c:	4698      	mov	r8, r3
 800261e:	430c      	orrs	r4, r1
 8002620:	0763      	lsls	r3, r4, #29
 8002622:	d000      	beq.n	8002626 <__aeabi_dsub+0x2e2>
 8002624:	e712      	b.n	800244c <__aeabi_dsub+0x108>
 8002626:	464b      	mov	r3, r9
 8002628:	464a      	mov	r2, r9
 800262a:	08e4      	lsrs	r4, r4, #3
 800262c:	075b      	lsls	r3, r3, #29
 800262e:	4323      	orrs	r3, r4
 8002630:	08d4      	lsrs	r4, r2, #3
 8002632:	4642      	mov	r2, r8
 8002634:	4919      	ldr	r1, [pc, #100]	; (800269c <__aeabi_dsub+0x358>)
 8002636:	428a      	cmp	r2, r1
 8002638:	d00e      	beq.n	8002658 <__aeabi_dsub+0x314>
 800263a:	0324      	lsls	r4, r4, #12
 800263c:	0552      	lsls	r2, r2, #21
 800263e:	0b24      	lsrs	r4, r4, #12
 8002640:	0d52      	lsrs	r2, r2, #21
 8002642:	e722      	b.n	800248a <__aeabi_dsub+0x146>
 8002644:	000a      	movs	r2, r1
 8002646:	2400      	movs	r4, #0
 8002648:	2300      	movs	r3, #0
 800264a:	e71e      	b.n	800248a <__aeabi_dsub+0x146>
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	4662      	mov	r2, ip
 8002650:	0752      	lsls	r2, r2, #29
 8002652:	4313      	orrs	r3, r2
 8002654:	4662      	mov	r2, ip
 8002656:	08d4      	lsrs	r4, r2, #3
 8002658:	001a      	movs	r2, r3
 800265a:	4322      	orrs	r2, r4
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x31c>
 800265e:	e1fc      	b.n	8002a5a <__aeabi_dsub+0x716>
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	0312      	lsls	r2, r2, #12
 8002664:	4314      	orrs	r4, r2
 8002666:	0324      	lsls	r4, r4, #12
 8002668:	4a0c      	ldr	r2, [pc, #48]	; (800269c <__aeabi_dsub+0x358>)
 800266a:	0b24      	lsrs	r4, r4, #12
 800266c:	e70d      	b.n	800248a <__aeabi_dsub+0x146>
 800266e:	0020      	movs	r0, r4
 8002670:	f000 fb74 	bl	8002d5c <__clzsi2>
 8002674:	0001      	movs	r1, r0
 8002676:	3118      	adds	r1, #24
 8002678:	291f      	cmp	r1, #31
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x33a>
 800267c:	e6c4      	b.n	8002408 <__aeabi_dsub+0xc4>
 800267e:	3808      	subs	r0, #8
 8002680:	4084      	lsls	r4, r0
 8002682:	4643      	mov	r3, r8
 8002684:	0020      	movs	r0, r4
 8002686:	2400      	movs	r4, #0
 8002688:	4588      	cmp	r8, r1
 800268a:	dc00      	bgt.n	800268e <__aeabi_dsub+0x34a>
 800268c:	e6c8      	b.n	8002420 <__aeabi_dsub+0xdc>
 800268e:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <__aeabi_dsub+0x35c>)
 8002690:	1a5b      	subs	r3, r3, r1
 8002692:	4010      	ands	r0, r2
 8002694:	4698      	mov	r8, r3
 8002696:	4681      	mov	r9, r0
 8002698:	e6d6      	b.n	8002448 <__aeabi_dsub+0x104>
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	000007ff 	.word	0x000007ff
 80026a0:	ff7fffff 	.word	0xff7fffff
 80026a4:	fffff801 	.word	0xfffff801
 80026a8:	000007fe 	.word	0x000007fe
 80026ac:	430f      	orrs	r7, r1
 80026ae:	1e7a      	subs	r2, r7, #1
 80026b0:	4197      	sbcs	r7, r2
 80026b2:	e691      	b.n	80023d8 <__aeabi_dsub+0x94>
 80026b4:	4661      	mov	r1, ip
 80026b6:	08db      	lsrs	r3, r3, #3
 80026b8:	0749      	lsls	r1, r1, #29
 80026ba:	430b      	orrs	r3, r1
 80026bc:	4661      	mov	r1, ip
 80026be:	08cc      	lsrs	r4, r1, #3
 80026c0:	e7b8      	b.n	8002634 <__aeabi_dsub+0x2f0>
 80026c2:	4640      	mov	r0, r8
 80026c4:	4cd3      	ldr	r4, [pc, #844]	; (8002a14 <__aeabi_dsub+0x6d0>)
 80026c6:	3001      	adds	r0, #1
 80026c8:	4220      	tst	r0, r4
 80026ca:	d000      	beq.n	80026ce <__aeabi_dsub+0x38a>
 80026cc:	e0a2      	b.n	8002814 <__aeabi_dsub+0x4d0>
 80026ce:	4640      	mov	r0, r8
 80026d0:	2800      	cmp	r0, #0
 80026d2:	d000      	beq.n	80026d6 <__aeabi_dsub+0x392>
 80026d4:	e101      	b.n	80028da <__aeabi_dsub+0x596>
 80026d6:	4660      	mov	r0, ip
 80026d8:	4318      	orrs	r0, r3
 80026da:	d100      	bne.n	80026de <__aeabi_dsub+0x39a>
 80026dc:	e15e      	b.n	800299c <__aeabi_dsub+0x658>
 80026de:	0008      	movs	r0, r1
 80026e0:	4338      	orrs	r0, r7
 80026e2:	d000      	beq.n	80026e6 <__aeabi_dsub+0x3a2>
 80026e4:	e15f      	b.n	80029a6 <__aeabi_dsub+0x662>
 80026e6:	4661      	mov	r1, ip
 80026e8:	08db      	lsrs	r3, r3, #3
 80026ea:	0749      	lsls	r1, r1, #29
 80026ec:	430b      	orrs	r3, r1
 80026ee:	4661      	mov	r1, ip
 80026f0:	08cc      	lsrs	r4, r1, #3
 80026f2:	e7a2      	b.n	800263a <__aeabi_dsub+0x2f6>
 80026f4:	4dc8      	ldr	r5, [pc, #800]	; (8002a18 <__aeabi_dsub+0x6d4>)
 80026f6:	42a8      	cmp	r0, r5
 80026f8:	d100      	bne.n	80026fc <__aeabi_dsub+0x3b8>
 80026fa:	e0cf      	b.n	800289c <__aeabi_dsub+0x558>
 80026fc:	2580      	movs	r5, #128	; 0x80
 80026fe:	4664      	mov	r4, ip
 8002700:	042d      	lsls	r5, r5, #16
 8002702:	432c      	orrs	r4, r5
 8002704:	46a4      	mov	ip, r4
 8002706:	2a38      	cmp	r2, #56	; 0x38
 8002708:	dc56      	bgt.n	80027b8 <__aeabi_dsub+0x474>
 800270a:	2a1f      	cmp	r2, #31
 800270c:	dd00      	ble.n	8002710 <__aeabi_dsub+0x3cc>
 800270e:	e0d1      	b.n	80028b4 <__aeabi_dsub+0x570>
 8002710:	2520      	movs	r5, #32
 8002712:	001e      	movs	r6, r3
 8002714:	1aad      	subs	r5, r5, r2
 8002716:	4664      	mov	r4, ip
 8002718:	40ab      	lsls	r3, r5
 800271a:	40ac      	lsls	r4, r5
 800271c:	40d6      	lsrs	r6, r2
 800271e:	1e5d      	subs	r5, r3, #1
 8002720:	41ab      	sbcs	r3, r5
 8002722:	4334      	orrs	r4, r6
 8002724:	4323      	orrs	r3, r4
 8002726:	4664      	mov	r4, ip
 8002728:	40d4      	lsrs	r4, r2
 800272a:	1b09      	subs	r1, r1, r4
 800272c:	e049      	b.n	80027c2 <__aeabi_dsub+0x47e>
 800272e:	4660      	mov	r0, ip
 8002730:	1bdc      	subs	r4, r3, r7
 8002732:	1a46      	subs	r6, r0, r1
 8002734:	42a3      	cmp	r3, r4
 8002736:	4180      	sbcs	r0, r0
 8002738:	4240      	negs	r0, r0
 800273a:	4681      	mov	r9, r0
 800273c:	0030      	movs	r0, r6
 800273e:	464e      	mov	r6, r9
 8002740:	1b80      	subs	r0, r0, r6
 8002742:	4681      	mov	r9, r0
 8002744:	0200      	lsls	r0, r0, #8
 8002746:	d476      	bmi.n	8002836 <__aeabi_dsub+0x4f2>
 8002748:	464b      	mov	r3, r9
 800274a:	4323      	orrs	r3, r4
 800274c:	d000      	beq.n	8002750 <__aeabi_dsub+0x40c>
 800274e:	e652      	b.n	80023f6 <__aeabi_dsub+0xb2>
 8002750:	2400      	movs	r4, #0
 8002752:	2500      	movs	r5, #0
 8002754:	e771      	b.n	800263a <__aeabi_dsub+0x2f6>
 8002756:	4339      	orrs	r1, r7
 8002758:	000c      	movs	r4, r1
 800275a:	1e62      	subs	r2, r4, #1
 800275c:	4194      	sbcs	r4, r2
 800275e:	18e4      	adds	r4, r4, r3
 8002760:	429c      	cmp	r4, r3
 8002762:	419b      	sbcs	r3, r3
 8002764:	425b      	negs	r3, r3
 8002766:	4463      	add	r3, ip
 8002768:	4699      	mov	r9, r3
 800276a:	464b      	mov	r3, r9
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	d400      	bmi.n	8002772 <__aeabi_dsub+0x42e>
 8002770:	e756      	b.n	8002620 <__aeabi_dsub+0x2dc>
 8002772:	2301      	movs	r3, #1
 8002774:	469c      	mov	ip, r3
 8002776:	4ba8      	ldr	r3, [pc, #672]	; (8002a18 <__aeabi_dsub+0x6d4>)
 8002778:	44e0      	add	r8, ip
 800277a:	4598      	cmp	r8, r3
 800277c:	d038      	beq.n	80027f0 <__aeabi_dsub+0x4ac>
 800277e:	464b      	mov	r3, r9
 8002780:	48a6      	ldr	r0, [pc, #664]	; (8002a1c <__aeabi_dsub+0x6d8>)
 8002782:	2201      	movs	r2, #1
 8002784:	4003      	ands	r3, r0
 8002786:	0018      	movs	r0, r3
 8002788:	0863      	lsrs	r3, r4, #1
 800278a:	4014      	ands	r4, r2
 800278c:	431c      	orrs	r4, r3
 800278e:	07c3      	lsls	r3, r0, #31
 8002790:	431c      	orrs	r4, r3
 8002792:	0843      	lsrs	r3, r0, #1
 8002794:	4699      	mov	r9, r3
 8002796:	e657      	b.n	8002448 <__aeabi_dsub+0x104>
 8002798:	0010      	movs	r0, r2
 800279a:	000e      	movs	r6, r1
 800279c:	3820      	subs	r0, #32
 800279e:	40c6      	lsrs	r6, r0
 80027a0:	2a20      	cmp	r2, #32
 80027a2:	d004      	beq.n	80027ae <__aeabi_dsub+0x46a>
 80027a4:	2040      	movs	r0, #64	; 0x40
 80027a6:	1a82      	subs	r2, r0, r2
 80027a8:	4091      	lsls	r1, r2
 80027aa:	430f      	orrs	r7, r1
 80027ac:	46b9      	mov	r9, r7
 80027ae:	464f      	mov	r7, r9
 80027b0:	1e7a      	subs	r2, r7, #1
 80027b2:	4197      	sbcs	r7, r2
 80027b4:	4337      	orrs	r7, r6
 80027b6:	e60f      	b.n	80023d8 <__aeabi_dsub+0x94>
 80027b8:	4662      	mov	r2, ip
 80027ba:	431a      	orrs	r2, r3
 80027bc:	0013      	movs	r3, r2
 80027be:	1e5a      	subs	r2, r3, #1
 80027c0:	4193      	sbcs	r3, r2
 80027c2:	1afc      	subs	r4, r7, r3
 80027c4:	42a7      	cmp	r7, r4
 80027c6:	41bf      	sbcs	r7, r7
 80027c8:	427f      	negs	r7, r7
 80027ca:	1bcb      	subs	r3, r1, r7
 80027cc:	4699      	mov	r9, r3
 80027ce:	465d      	mov	r5, fp
 80027d0:	4680      	mov	r8, r0
 80027d2:	e608      	b.n	80023e6 <__aeabi_dsub+0xa2>
 80027d4:	4666      	mov	r6, ip
 80027d6:	431e      	orrs	r6, r3
 80027d8:	d100      	bne.n	80027dc <__aeabi_dsub+0x498>
 80027da:	e0be      	b.n	800295a <__aeabi_dsub+0x616>
 80027dc:	1e56      	subs	r6, r2, #1
 80027de:	2a01      	cmp	r2, #1
 80027e0:	d100      	bne.n	80027e4 <__aeabi_dsub+0x4a0>
 80027e2:	e109      	b.n	80029f8 <__aeabi_dsub+0x6b4>
 80027e4:	4c8c      	ldr	r4, [pc, #560]	; (8002a18 <__aeabi_dsub+0x6d4>)
 80027e6:	42a2      	cmp	r2, r4
 80027e8:	d100      	bne.n	80027ec <__aeabi_dsub+0x4a8>
 80027ea:	e119      	b.n	8002a20 <__aeabi_dsub+0x6dc>
 80027ec:	0032      	movs	r2, r6
 80027ee:	e6c1      	b.n	8002574 <__aeabi_dsub+0x230>
 80027f0:	4642      	mov	r2, r8
 80027f2:	2400      	movs	r4, #0
 80027f4:	2300      	movs	r3, #0
 80027f6:	e648      	b.n	800248a <__aeabi_dsub+0x146>
 80027f8:	2020      	movs	r0, #32
 80027fa:	000c      	movs	r4, r1
 80027fc:	1a80      	subs	r0, r0, r2
 80027fe:	003e      	movs	r6, r7
 8002800:	4087      	lsls	r7, r0
 8002802:	4084      	lsls	r4, r0
 8002804:	40d6      	lsrs	r6, r2
 8002806:	1e78      	subs	r0, r7, #1
 8002808:	4187      	sbcs	r7, r0
 800280a:	40d1      	lsrs	r1, r2
 800280c:	4334      	orrs	r4, r6
 800280e:	433c      	orrs	r4, r7
 8002810:	448c      	add	ip, r1
 8002812:	e7a4      	b.n	800275e <__aeabi_dsub+0x41a>
 8002814:	4a80      	ldr	r2, [pc, #512]	; (8002a18 <__aeabi_dsub+0x6d4>)
 8002816:	4290      	cmp	r0, r2
 8002818:	d100      	bne.n	800281c <__aeabi_dsub+0x4d8>
 800281a:	e0e9      	b.n	80029f0 <__aeabi_dsub+0x6ac>
 800281c:	19df      	adds	r7, r3, r7
 800281e:	429f      	cmp	r7, r3
 8002820:	419b      	sbcs	r3, r3
 8002822:	4461      	add	r1, ip
 8002824:	425b      	negs	r3, r3
 8002826:	18c9      	adds	r1, r1, r3
 8002828:	07cc      	lsls	r4, r1, #31
 800282a:	087f      	lsrs	r7, r7, #1
 800282c:	084b      	lsrs	r3, r1, #1
 800282e:	4699      	mov	r9, r3
 8002830:	4680      	mov	r8, r0
 8002832:	433c      	orrs	r4, r7
 8002834:	e6f4      	b.n	8002620 <__aeabi_dsub+0x2dc>
 8002836:	1afc      	subs	r4, r7, r3
 8002838:	42a7      	cmp	r7, r4
 800283a:	41bf      	sbcs	r7, r7
 800283c:	4663      	mov	r3, ip
 800283e:	427f      	negs	r7, r7
 8002840:	1ac9      	subs	r1, r1, r3
 8002842:	1bcb      	subs	r3, r1, r7
 8002844:	4699      	mov	r9, r3
 8002846:	465d      	mov	r5, fp
 8002848:	e5d5      	b.n	80023f6 <__aeabi_dsub+0xb2>
 800284a:	08ff      	lsrs	r7, r7, #3
 800284c:	074b      	lsls	r3, r1, #29
 800284e:	465d      	mov	r5, fp
 8002850:	433b      	orrs	r3, r7
 8002852:	08cc      	lsrs	r4, r1, #3
 8002854:	e6ee      	b.n	8002634 <__aeabi_dsub+0x2f0>
 8002856:	4662      	mov	r2, ip
 8002858:	431a      	orrs	r2, r3
 800285a:	d000      	beq.n	800285e <__aeabi_dsub+0x51a>
 800285c:	e082      	b.n	8002964 <__aeabi_dsub+0x620>
 800285e:	000b      	movs	r3, r1
 8002860:	433b      	orrs	r3, r7
 8002862:	d11b      	bne.n	800289c <__aeabi_dsub+0x558>
 8002864:	2480      	movs	r4, #128	; 0x80
 8002866:	2500      	movs	r5, #0
 8002868:	0324      	lsls	r4, r4, #12
 800286a:	e6f9      	b.n	8002660 <__aeabi_dsub+0x31c>
 800286c:	19dc      	adds	r4, r3, r7
 800286e:	429c      	cmp	r4, r3
 8002870:	419b      	sbcs	r3, r3
 8002872:	4461      	add	r1, ip
 8002874:	4689      	mov	r9, r1
 8002876:	425b      	negs	r3, r3
 8002878:	4499      	add	r9, r3
 800287a:	464b      	mov	r3, r9
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	d444      	bmi.n	800290a <__aeabi_dsub+0x5c6>
 8002880:	2301      	movs	r3, #1
 8002882:	4698      	mov	r8, r3
 8002884:	e6cc      	b.n	8002620 <__aeabi_dsub+0x2dc>
 8002886:	1bdc      	subs	r4, r3, r7
 8002888:	4662      	mov	r2, ip
 800288a:	42a3      	cmp	r3, r4
 800288c:	419b      	sbcs	r3, r3
 800288e:	1a51      	subs	r1, r2, r1
 8002890:	425b      	negs	r3, r3
 8002892:	1acb      	subs	r3, r1, r3
 8002894:	4699      	mov	r9, r3
 8002896:	2301      	movs	r3, #1
 8002898:	4698      	mov	r8, r3
 800289a:	e5a4      	b.n	80023e6 <__aeabi_dsub+0xa2>
 800289c:	08ff      	lsrs	r7, r7, #3
 800289e:	074b      	lsls	r3, r1, #29
 80028a0:	465d      	mov	r5, fp
 80028a2:	433b      	orrs	r3, r7
 80028a4:	08cc      	lsrs	r4, r1, #3
 80028a6:	e6d7      	b.n	8002658 <__aeabi_dsub+0x314>
 80028a8:	4662      	mov	r2, ip
 80028aa:	431a      	orrs	r2, r3
 80028ac:	0014      	movs	r4, r2
 80028ae:	1e63      	subs	r3, r4, #1
 80028b0:	419c      	sbcs	r4, r3
 80028b2:	e679      	b.n	80025a8 <__aeabi_dsub+0x264>
 80028b4:	0015      	movs	r5, r2
 80028b6:	4664      	mov	r4, ip
 80028b8:	3d20      	subs	r5, #32
 80028ba:	40ec      	lsrs	r4, r5
 80028bc:	46a0      	mov	r8, r4
 80028be:	2a20      	cmp	r2, #32
 80028c0:	d005      	beq.n	80028ce <__aeabi_dsub+0x58a>
 80028c2:	2540      	movs	r5, #64	; 0x40
 80028c4:	4664      	mov	r4, ip
 80028c6:	1aaa      	subs	r2, r5, r2
 80028c8:	4094      	lsls	r4, r2
 80028ca:	4323      	orrs	r3, r4
 80028cc:	469a      	mov	sl, r3
 80028ce:	4654      	mov	r4, sl
 80028d0:	1e63      	subs	r3, r4, #1
 80028d2:	419c      	sbcs	r4, r3
 80028d4:	4643      	mov	r3, r8
 80028d6:	4323      	orrs	r3, r4
 80028d8:	e773      	b.n	80027c2 <__aeabi_dsub+0x47e>
 80028da:	4662      	mov	r2, ip
 80028dc:	431a      	orrs	r2, r3
 80028de:	d023      	beq.n	8002928 <__aeabi_dsub+0x5e4>
 80028e0:	000a      	movs	r2, r1
 80028e2:	433a      	orrs	r2, r7
 80028e4:	d000      	beq.n	80028e8 <__aeabi_dsub+0x5a4>
 80028e6:	e0a0      	b.n	8002a2a <__aeabi_dsub+0x6e6>
 80028e8:	4662      	mov	r2, ip
 80028ea:	08db      	lsrs	r3, r3, #3
 80028ec:	0752      	lsls	r2, r2, #29
 80028ee:	4313      	orrs	r3, r2
 80028f0:	4662      	mov	r2, ip
 80028f2:	08d4      	lsrs	r4, r2, #3
 80028f4:	e6b0      	b.n	8002658 <__aeabi_dsub+0x314>
 80028f6:	000b      	movs	r3, r1
 80028f8:	433b      	orrs	r3, r7
 80028fa:	d100      	bne.n	80028fe <__aeabi_dsub+0x5ba>
 80028fc:	e728      	b.n	8002750 <__aeabi_dsub+0x40c>
 80028fe:	08ff      	lsrs	r7, r7, #3
 8002900:	074b      	lsls	r3, r1, #29
 8002902:	465d      	mov	r5, fp
 8002904:	433b      	orrs	r3, r7
 8002906:	08cc      	lsrs	r4, r1, #3
 8002908:	e697      	b.n	800263a <__aeabi_dsub+0x2f6>
 800290a:	2302      	movs	r3, #2
 800290c:	4698      	mov	r8, r3
 800290e:	e736      	b.n	800277e <__aeabi_dsub+0x43a>
 8002910:	1afc      	subs	r4, r7, r3
 8002912:	42a7      	cmp	r7, r4
 8002914:	41bf      	sbcs	r7, r7
 8002916:	4663      	mov	r3, ip
 8002918:	427f      	negs	r7, r7
 800291a:	1ac9      	subs	r1, r1, r3
 800291c:	1bcb      	subs	r3, r1, r7
 800291e:	4699      	mov	r9, r3
 8002920:	2301      	movs	r3, #1
 8002922:	465d      	mov	r5, fp
 8002924:	4698      	mov	r8, r3
 8002926:	e55e      	b.n	80023e6 <__aeabi_dsub+0xa2>
 8002928:	074b      	lsls	r3, r1, #29
 800292a:	08ff      	lsrs	r7, r7, #3
 800292c:	433b      	orrs	r3, r7
 800292e:	08cc      	lsrs	r4, r1, #3
 8002930:	e692      	b.n	8002658 <__aeabi_dsub+0x314>
 8002932:	1bdc      	subs	r4, r3, r7
 8002934:	4660      	mov	r0, ip
 8002936:	42a3      	cmp	r3, r4
 8002938:	41b6      	sbcs	r6, r6
 800293a:	1a40      	subs	r0, r0, r1
 800293c:	4276      	negs	r6, r6
 800293e:	1b80      	subs	r0, r0, r6
 8002940:	4681      	mov	r9, r0
 8002942:	0200      	lsls	r0, r0, #8
 8002944:	d560      	bpl.n	8002a08 <__aeabi_dsub+0x6c4>
 8002946:	1afc      	subs	r4, r7, r3
 8002948:	42a7      	cmp	r7, r4
 800294a:	41bf      	sbcs	r7, r7
 800294c:	4663      	mov	r3, ip
 800294e:	427f      	negs	r7, r7
 8002950:	1ac9      	subs	r1, r1, r3
 8002952:	1bcb      	subs	r3, r1, r7
 8002954:	4699      	mov	r9, r3
 8002956:	465d      	mov	r5, fp
 8002958:	e576      	b.n	8002448 <__aeabi_dsub+0x104>
 800295a:	08ff      	lsrs	r7, r7, #3
 800295c:	074b      	lsls	r3, r1, #29
 800295e:	433b      	orrs	r3, r7
 8002960:	08cc      	lsrs	r4, r1, #3
 8002962:	e667      	b.n	8002634 <__aeabi_dsub+0x2f0>
 8002964:	000a      	movs	r2, r1
 8002966:	08db      	lsrs	r3, r3, #3
 8002968:	433a      	orrs	r2, r7
 800296a:	d100      	bne.n	800296e <__aeabi_dsub+0x62a>
 800296c:	e66f      	b.n	800264e <__aeabi_dsub+0x30a>
 800296e:	4662      	mov	r2, ip
 8002970:	0752      	lsls	r2, r2, #29
 8002972:	4313      	orrs	r3, r2
 8002974:	4662      	mov	r2, ip
 8002976:	08d4      	lsrs	r4, r2, #3
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	0312      	lsls	r2, r2, #12
 800297c:	4214      	tst	r4, r2
 800297e:	d007      	beq.n	8002990 <__aeabi_dsub+0x64c>
 8002980:	08c8      	lsrs	r0, r1, #3
 8002982:	4210      	tst	r0, r2
 8002984:	d104      	bne.n	8002990 <__aeabi_dsub+0x64c>
 8002986:	465d      	mov	r5, fp
 8002988:	0004      	movs	r4, r0
 800298a:	08fb      	lsrs	r3, r7, #3
 800298c:	0749      	lsls	r1, r1, #29
 800298e:	430b      	orrs	r3, r1
 8002990:	0f5a      	lsrs	r2, r3, #29
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	08db      	lsrs	r3, r3, #3
 8002996:	0752      	lsls	r2, r2, #29
 8002998:	4313      	orrs	r3, r2
 800299a:	e65d      	b.n	8002658 <__aeabi_dsub+0x314>
 800299c:	074b      	lsls	r3, r1, #29
 800299e:	08ff      	lsrs	r7, r7, #3
 80029a0:	433b      	orrs	r3, r7
 80029a2:	08cc      	lsrs	r4, r1, #3
 80029a4:	e649      	b.n	800263a <__aeabi_dsub+0x2f6>
 80029a6:	19dc      	adds	r4, r3, r7
 80029a8:	429c      	cmp	r4, r3
 80029aa:	419b      	sbcs	r3, r3
 80029ac:	4461      	add	r1, ip
 80029ae:	4689      	mov	r9, r1
 80029b0:	425b      	negs	r3, r3
 80029b2:	4499      	add	r9, r3
 80029b4:	464b      	mov	r3, r9
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	d400      	bmi.n	80029bc <__aeabi_dsub+0x678>
 80029ba:	e631      	b.n	8002620 <__aeabi_dsub+0x2dc>
 80029bc:	464a      	mov	r2, r9
 80029be:	4b17      	ldr	r3, [pc, #92]	; (8002a1c <__aeabi_dsub+0x6d8>)
 80029c0:	401a      	ands	r2, r3
 80029c2:	2301      	movs	r3, #1
 80029c4:	4691      	mov	r9, r2
 80029c6:	4698      	mov	r8, r3
 80029c8:	e62a      	b.n	8002620 <__aeabi_dsub+0x2dc>
 80029ca:	0016      	movs	r6, r2
 80029cc:	4664      	mov	r4, ip
 80029ce:	3e20      	subs	r6, #32
 80029d0:	40f4      	lsrs	r4, r6
 80029d2:	46a0      	mov	r8, r4
 80029d4:	2a20      	cmp	r2, #32
 80029d6:	d005      	beq.n	80029e4 <__aeabi_dsub+0x6a0>
 80029d8:	2640      	movs	r6, #64	; 0x40
 80029da:	4664      	mov	r4, ip
 80029dc:	1ab2      	subs	r2, r6, r2
 80029de:	4094      	lsls	r4, r2
 80029e0:	4323      	orrs	r3, r4
 80029e2:	469a      	mov	sl, r3
 80029e4:	4654      	mov	r4, sl
 80029e6:	1e63      	subs	r3, r4, #1
 80029e8:	419c      	sbcs	r4, r3
 80029ea:	4643      	mov	r3, r8
 80029ec:	431c      	orrs	r4, r3
 80029ee:	e5db      	b.n	80025a8 <__aeabi_dsub+0x264>
 80029f0:	0002      	movs	r2, r0
 80029f2:	2400      	movs	r4, #0
 80029f4:	2300      	movs	r3, #0
 80029f6:	e548      	b.n	800248a <__aeabi_dsub+0x146>
 80029f8:	19dc      	adds	r4, r3, r7
 80029fa:	42bc      	cmp	r4, r7
 80029fc:	41bf      	sbcs	r7, r7
 80029fe:	4461      	add	r1, ip
 8002a00:	4689      	mov	r9, r1
 8002a02:	427f      	negs	r7, r7
 8002a04:	44b9      	add	r9, r7
 8002a06:	e738      	b.n	800287a <__aeabi_dsub+0x536>
 8002a08:	464b      	mov	r3, r9
 8002a0a:	4323      	orrs	r3, r4
 8002a0c:	d100      	bne.n	8002a10 <__aeabi_dsub+0x6cc>
 8002a0e:	e69f      	b.n	8002750 <__aeabi_dsub+0x40c>
 8002a10:	e606      	b.n	8002620 <__aeabi_dsub+0x2dc>
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	000007fe 	.word	0x000007fe
 8002a18:	000007ff 	.word	0x000007ff
 8002a1c:	ff7fffff 	.word	0xff7fffff
 8002a20:	08ff      	lsrs	r7, r7, #3
 8002a22:	074b      	lsls	r3, r1, #29
 8002a24:	433b      	orrs	r3, r7
 8002a26:	08cc      	lsrs	r4, r1, #3
 8002a28:	e616      	b.n	8002658 <__aeabi_dsub+0x314>
 8002a2a:	4662      	mov	r2, ip
 8002a2c:	08db      	lsrs	r3, r3, #3
 8002a2e:	0752      	lsls	r2, r2, #29
 8002a30:	4313      	orrs	r3, r2
 8002a32:	4662      	mov	r2, ip
 8002a34:	08d4      	lsrs	r4, r2, #3
 8002a36:	2280      	movs	r2, #128	; 0x80
 8002a38:	0312      	lsls	r2, r2, #12
 8002a3a:	4214      	tst	r4, r2
 8002a3c:	d007      	beq.n	8002a4e <__aeabi_dsub+0x70a>
 8002a3e:	08c8      	lsrs	r0, r1, #3
 8002a40:	4210      	tst	r0, r2
 8002a42:	d104      	bne.n	8002a4e <__aeabi_dsub+0x70a>
 8002a44:	465d      	mov	r5, fp
 8002a46:	0004      	movs	r4, r0
 8002a48:	08fb      	lsrs	r3, r7, #3
 8002a4a:	0749      	lsls	r1, r1, #29
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	0f5a      	lsrs	r2, r3, #29
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	0752      	lsls	r2, r2, #29
 8002a54:	08db      	lsrs	r3, r3, #3
 8002a56:	4313      	orrs	r3, r2
 8002a58:	e5fe      	b.n	8002658 <__aeabi_dsub+0x314>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	4a01      	ldr	r2, [pc, #4]	; (8002a64 <__aeabi_dsub+0x720>)
 8002a5e:	001c      	movs	r4, r3
 8002a60:	e513      	b.n	800248a <__aeabi_dsub+0x146>
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	000007ff 	.word	0x000007ff

08002a68 <__aeabi_dcmpun>:
 8002a68:	b570      	push	{r4, r5, r6, lr}
 8002a6a:	0005      	movs	r5, r0
 8002a6c:	480c      	ldr	r0, [pc, #48]	; (8002aa0 <__aeabi_dcmpun+0x38>)
 8002a6e:	031c      	lsls	r4, r3, #12
 8002a70:	0016      	movs	r6, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	030a      	lsls	r2, r1, #12
 8002a76:	0049      	lsls	r1, r1, #1
 8002a78:	0b12      	lsrs	r2, r2, #12
 8002a7a:	0d49      	lsrs	r1, r1, #21
 8002a7c:	0b24      	lsrs	r4, r4, #12
 8002a7e:	0d5b      	lsrs	r3, r3, #21
 8002a80:	4281      	cmp	r1, r0
 8002a82:	d008      	beq.n	8002a96 <__aeabi_dcmpun+0x2e>
 8002a84:	4a06      	ldr	r2, [pc, #24]	; (8002aa0 <__aeabi_dcmpun+0x38>)
 8002a86:	2000      	movs	r0, #0
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d103      	bne.n	8002a94 <__aeabi_dcmpun+0x2c>
 8002a8c:	0020      	movs	r0, r4
 8002a8e:	4330      	orrs	r0, r6
 8002a90:	1e43      	subs	r3, r0, #1
 8002a92:	4198      	sbcs	r0, r3
 8002a94:	bd70      	pop	{r4, r5, r6, pc}
 8002a96:	2001      	movs	r0, #1
 8002a98:	432a      	orrs	r2, r5
 8002a9a:	d1fb      	bne.n	8002a94 <__aeabi_dcmpun+0x2c>
 8002a9c:	e7f2      	b.n	8002a84 <__aeabi_dcmpun+0x1c>
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	000007ff 	.word	0x000007ff

08002aa4 <__aeabi_d2iz>:
 8002aa4:	000a      	movs	r2, r1
 8002aa6:	b530      	push	{r4, r5, lr}
 8002aa8:	4c13      	ldr	r4, [pc, #76]	; (8002af8 <__aeabi_d2iz+0x54>)
 8002aaa:	0053      	lsls	r3, r2, #1
 8002aac:	0309      	lsls	r1, r1, #12
 8002aae:	0005      	movs	r5, r0
 8002ab0:	0b09      	lsrs	r1, r1, #12
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	0d5b      	lsrs	r3, r3, #21
 8002ab6:	0fd2      	lsrs	r2, r2, #31
 8002ab8:	42a3      	cmp	r3, r4
 8002aba:	dd04      	ble.n	8002ac6 <__aeabi_d2iz+0x22>
 8002abc:	480f      	ldr	r0, [pc, #60]	; (8002afc <__aeabi_d2iz+0x58>)
 8002abe:	4283      	cmp	r3, r0
 8002ac0:	dd02      	ble.n	8002ac8 <__aeabi_d2iz+0x24>
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <__aeabi_d2iz+0x5c>)
 8002ac4:	18d0      	adds	r0, r2, r3
 8002ac6:	bd30      	pop	{r4, r5, pc}
 8002ac8:	2080      	movs	r0, #128	; 0x80
 8002aca:	0340      	lsls	r0, r0, #13
 8002acc:	4301      	orrs	r1, r0
 8002ace:	480d      	ldr	r0, [pc, #52]	; (8002b04 <__aeabi_d2iz+0x60>)
 8002ad0:	1ac0      	subs	r0, r0, r3
 8002ad2:	281f      	cmp	r0, #31
 8002ad4:	dd08      	ble.n	8002ae8 <__aeabi_d2iz+0x44>
 8002ad6:	480c      	ldr	r0, [pc, #48]	; (8002b08 <__aeabi_d2iz+0x64>)
 8002ad8:	1ac3      	subs	r3, r0, r3
 8002ada:	40d9      	lsrs	r1, r3
 8002adc:	000b      	movs	r3, r1
 8002ade:	4258      	negs	r0, r3
 8002ae0:	2a00      	cmp	r2, #0
 8002ae2:	d1f0      	bne.n	8002ac6 <__aeabi_d2iz+0x22>
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	e7ee      	b.n	8002ac6 <__aeabi_d2iz+0x22>
 8002ae8:	4c08      	ldr	r4, [pc, #32]	; (8002b0c <__aeabi_d2iz+0x68>)
 8002aea:	40c5      	lsrs	r5, r0
 8002aec:	46a4      	mov	ip, r4
 8002aee:	4463      	add	r3, ip
 8002af0:	4099      	lsls	r1, r3
 8002af2:	000b      	movs	r3, r1
 8002af4:	432b      	orrs	r3, r5
 8002af6:	e7f2      	b.n	8002ade <__aeabi_d2iz+0x3a>
 8002af8:	000003fe 	.word	0x000003fe
 8002afc:	0000041d 	.word	0x0000041d
 8002b00:	7fffffff 	.word	0x7fffffff
 8002b04:	00000433 	.word	0x00000433
 8002b08:	00000413 	.word	0x00000413
 8002b0c:	fffffbed 	.word	0xfffffbed

08002b10 <__aeabi_i2d>:
 8002b10:	b570      	push	{r4, r5, r6, lr}
 8002b12:	2800      	cmp	r0, #0
 8002b14:	d016      	beq.n	8002b44 <__aeabi_i2d+0x34>
 8002b16:	17c3      	asrs	r3, r0, #31
 8002b18:	18c5      	adds	r5, r0, r3
 8002b1a:	405d      	eors	r5, r3
 8002b1c:	0fc4      	lsrs	r4, r0, #31
 8002b1e:	0028      	movs	r0, r5
 8002b20:	f000 f91c 	bl	8002d5c <__clzsi2>
 8002b24:	4a11      	ldr	r2, [pc, #68]	; (8002b6c <__aeabi_i2d+0x5c>)
 8002b26:	1a12      	subs	r2, r2, r0
 8002b28:	280a      	cmp	r0, #10
 8002b2a:	dc16      	bgt.n	8002b5a <__aeabi_i2d+0x4a>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	002e      	movs	r6, r5
 8002b30:	3315      	adds	r3, #21
 8002b32:	409e      	lsls	r6, r3
 8002b34:	230b      	movs	r3, #11
 8002b36:	1a18      	subs	r0, r3, r0
 8002b38:	40c5      	lsrs	r5, r0
 8002b3a:	0552      	lsls	r2, r2, #21
 8002b3c:	032d      	lsls	r5, r5, #12
 8002b3e:	0b2d      	lsrs	r5, r5, #12
 8002b40:	0d53      	lsrs	r3, r2, #21
 8002b42:	e003      	b.n	8002b4c <__aeabi_i2d+0x3c>
 8002b44:	2400      	movs	r4, #0
 8002b46:	2300      	movs	r3, #0
 8002b48:	2500      	movs	r5, #0
 8002b4a:	2600      	movs	r6, #0
 8002b4c:	051b      	lsls	r3, r3, #20
 8002b4e:	432b      	orrs	r3, r5
 8002b50:	07e4      	lsls	r4, r4, #31
 8002b52:	4323      	orrs	r3, r4
 8002b54:	0030      	movs	r0, r6
 8002b56:	0019      	movs	r1, r3
 8002b58:	bd70      	pop	{r4, r5, r6, pc}
 8002b5a:	380b      	subs	r0, #11
 8002b5c:	4085      	lsls	r5, r0
 8002b5e:	0552      	lsls	r2, r2, #21
 8002b60:	032d      	lsls	r5, r5, #12
 8002b62:	2600      	movs	r6, #0
 8002b64:	0b2d      	lsrs	r5, r5, #12
 8002b66:	0d53      	lsrs	r3, r2, #21
 8002b68:	e7f0      	b.n	8002b4c <__aeabi_i2d+0x3c>
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	0000041e 	.word	0x0000041e

08002b70 <__aeabi_ui2d>:
 8002b70:	b510      	push	{r4, lr}
 8002b72:	1e04      	subs	r4, r0, #0
 8002b74:	d010      	beq.n	8002b98 <__aeabi_ui2d+0x28>
 8002b76:	f000 f8f1 	bl	8002d5c <__clzsi2>
 8002b7a:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <__aeabi_ui2d+0x48>)
 8002b7c:	1a1b      	subs	r3, r3, r0
 8002b7e:	280a      	cmp	r0, #10
 8002b80:	dc11      	bgt.n	8002ba6 <__aeabi_ui2d+0x36>
 8002b82:	220b      	movs	r2, #11
 8002b84:	0021      	movs	r1, r4
 8002b86:	1a12      	subs	r2, r2, r0
 8002b88:	40d1      	lsrs	r1, r2
 8002b8a:	3015      	adds	r0, #21
 8002b8c:	030a      	lsls	r2, r1, #12
 8002b8e:	055b      	lsls	r3, r3, #21
 8002b90:	4084      	lsls	r4, r0
 8002b92:	0b12      	lsrs	r2, r2, #12
 8002b94:	0d5b      	lsrs	r3, r3, #21
 8002b96:	e001      	b.n	8002b9c <__aeabi_ui2d+0x2c>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	051b      	lsls	r3, r3, #20
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	0020      	movs	r0, r4
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	bd10      	pop	{r4, pc}
 8002ba6:	0022      	movs	r2, r4
 8002ba8:	380b      	subs	r0, #11
 8002baa:	4082      	lsls	r2, r0
 8002bac:	055b      	lsls	r3, r3, #21
 8002bae:	0312      	lsls	r2, r2, #12
 8002bb0:	2400      	movs	r4, #0
 8002bb2:	0b12      	lsrs	r2, r2, #12
 8002bb4:	0d5b      	lsrs	r3, r3, #21
 8002bb6:	e7f1      	b.n	8002b9c <__aeabi_ui2d+0x2c>
 8002bb8:	0000041e 	.word	0x0000041e

08002bbc <__aeabi_f2d>:
 8002bbc:	b570      	push	{r4, r5, r6, lr}
 8002bbe:	0043      	lsls	r3, r0, #1
 8002bc0:	0246      	lsls	r6, r0, #9
 8002bc2:	0fc4      	lsrs	r4, r0, #31
 8002bc4:	20fe      	movs	r0, #254	; 0xfe
 8002bc6:	0e1b      	lsrs	r3, r3, #24
 8002bc8:	1c59      	adds	r1, r3, #1
 8002bca:	0a75      	lsrs	r5, r6, #9
 8002bcc:	4208      	tst	r0, r1
 8002bce:	d00c      	beq.n	8002bea <__aeabi_f2d+0x2e>
 8002bd0:	22e0      	movs	r2, #224	; 0xe0
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	4694      	mov	ip, r2
 8002bd6:	076d      	lsls	r5, r5, #29
 8002bd8:	0b36      	lsrs	r6, r6, #12
 8002bda:	4463      	add	r3, ip
 8002bdc:	051b      	lsls	r3, r3, #20
 8002bde:	4333      	orrs	r3, r6
 8002be0:	07e4      	lsls	r4, r4, #31
 8002be2:	4323      	orrs	r3, r4
 8002be4:	0028      	movs	r0, r5
 8002be6:	0019      	movs	r1, r3
 8002be8:	bd70      	pop	{r4, r5, r6, pc}
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d114      	bne.n	8002c18 <__aeabi_f2d+0x5c>
 8002bee:	2d00      	cmp	r5, #0
 8002bf0:	d01b      	beq.n	8002c2a <__aeabi_f2d+0x6e>
 8002bf2:	0028      	movs	r0, r5
 8002bf4:	f000 f8b2 	bl	8002d5c <__clzsi2>
 8002bf8:	280a      	cmp	r0, #10
 8002bfa:	dc1c      	bgt.n	8002c36 <__aeabi_f2d+0x7a>
 8002bfc:	230b      	movs	r3, #11
 8002bfe:	002e      	movs	r6, r5
 8002c00:	1a1b      	subs	r3, r3, r0
 8002c02:	40de      	lsrs	r6, r3
 8002c04:	0003      	movs	r3, r0
 8002c06:	3315      	adds	r3, #21
 8002c08:	409d      	lsls	r5, r3
 8002c0a:	4a0e      	ldr	r2, [pc, #56]	; (8002c44 <__aeabi_f2d+0x88>)
 8002c0c:	0336      	lsls	r6, r6, #12
 8002c0e:	1a12      	subs	r2, r2, r0
 8002c10:	0552      	lsls	r2, r2, #21
 8002c12:	0b36      	lsrs	r6, r6, #12
 8002c14:	0d53      	lsrs	r3, r2, #21
 8002c16:	e7e1      	b.n	8002bdc <__aeabi_f2d+0x20>
 8002c18:	2d00      	cmp	r5, #0
 8002c1a:	d009      	beq.n	8002c30 <__aeabi_f2d+0x74>
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	0b36      	lsrs	r6, r6, #12
 8002c20:	0312      	lsls	r2, r2, #12
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <__aeabi_f2d+0x8c>)
 8002c24:	076d      	lsls	r5, r5, #29
 8002c26:	4316      	orrs	r6, r2
 8002c28:	e7d8      	b.n	8002bdc <__aeabi_f2d+0x20>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2600      	movs	r6, #0
 8002c2e:	e7d5      	b.n	8002bdc <__aeabi_f2d+0x20>
 8002c30:	2600      	movs	r6, #0
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <__aeabi_f2d+0x8c>)
 8002c34:	e7d2      	b.n	8002bdc <__aeabi_f2d+0x20>
 8002c36:	0003      	movs	r3, r0
 8002c38:	3b0b      	subs	r3, #11
 8002c3a:	409d      	lsls	r5, r3
 8002c3c:	002e      	movs	r6, r5
 8002c3e:	2500      	movs	r5, #0
 8002c40:	e7e3      	b.n	8002c0a <__aeabi_f2d+0x4e>
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	00000389 	.word	0x00000389
 8002c48:	000007ff 	.word	0x000007ff

08002c4c <__aeabi_d2f>:
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	004b      	lsls	r3, r1, #1
 8002c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c52:	0d5b      	lsrs	r3, r3, #21
 8002c54:	030c      	lsls	r4, r1, #12
 8002c56:	4e3d      	ldr	r6, [pc, #244]	; (8002d4c <__aeabi_d2f+0x100>)
 8002c58:	0a64      	lsrs	r4, r4, #9
 8002c5a:	0f40      	lsrs	r0, r0, #29
 8002c5c:	1c5f      	adds	r7, r3, #1
 8002c5e:	0fc9      	lsrs	r1, r1, #31
 8002c60:	4304      	orrs	r4, r0
 8002c62:	00d5      	lsls	r5, r2, #3
 8002c64:	4237      	tst	r7, r6
 8002c66:	d00a      	beq.n	8002c7e <__aeabi_d2f+0x32>
 8002c68:	4839      	ldr	r0, [pc, #228]	; (8002d50 <__aeabi_d2f+0x104>)
 8002c6a:	181e      	adds	r6, r3, r0
 8002c6c:	2efe      	cmp	r6, #254	; 0xfe
 8002c6e:	dd16      	ble.n	8002c9e <__aeabi_d2f+0x52>
 8002c70:	20ff      	movs	r0, #255	; 0xff
 8002c72:	2400      	movs	r4, #0
 8002c74:	05c0      	lsls	r0, r0, #23
 8002c76:	4320      	orrs	r0, r4
 8002c78:	07c9      	lsls	r1, r1, #31
 8002c7a:	4308      	orrs	r0, r1
 8002c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <__aeabi_d2f+0x44>
 8002c82:	432c      	orrs	r4, r5
 8002c84:	d026      	beq.n	8002cd4 <__aeabi_d2f+0x88>
 8002c86:	2205      	movs	r2, #5
 8002c88:	0192      	lsls	r2, r2, #6
 8002c8a:	0a54      	lsrs	r4, r2, #9
 8002c8c:	b2d8      	uxtb	r0, r3
 8002c8e:	e7f1      	b.n	8002c74 <__aeabi_d2f+0x28>
 8002c90:	4325      	orrs	r5, r4
 8002c92:	d0ed      	beq.n	8002c70 <__aeabi_d2f+0x24>
 8002c94:	2080      	movs	r0, #128	; 0x80
 8002c96:	03c0      	lsls	r0, r0, #15
 8002c98:	4304      	orrs	r4, r0
 8002c9a:	20ff      	movs	r0, #255	; 0xff
 8002c9c:	e7ea      	b.n	8002c74 <__aeabi_d2f+0x28>
 8002c9e:	2e00      	cmp	r6, #0
 8002ca0:	dd1b      	ble.n	8002cda <__aeabi_d2f+0x8e>
 8002ca2:	0192      	lsls	r2, r2, #6
 8002ca4:	1e53      	subs	r3, r2, #1
 8002ca6:	419a      	sbcs	r2, r3
 8002ca8:	00e4      	lsls	r4, r4, #3
 8002caa:	0f6d      	lsrs	r5, r5, #29
 8002cac:	4322      	orrs	r2, r4
 8002cae:	432a      	orrs	r2, r5
 8002cb0:	0753      	lsls	r3, r2, #29
 8002cb2:	d048      	beq.n	8002d46 <__aeabi_d2f+0xfa>
 8002cb4:	230f      	movs	r3, #15
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d000      	beq.n	8002cbe <__aeabi_d2f+0x72>
 8002cbc:	3204      	adds	r2, #4
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	04db      	lsls	r3, r3, #19
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d03f      	beq.n	8002d46 <__aeabi_d2f+0xfa>
 8002cc6:	1c70      	adds	r0, r6, #1
 8002cc8:	2efe      	cmp	r6, #254	; 0xfe
 8002cca:	d0d1      	beq.n	8002c70 <__aeabi_d2f+0x24>
 8002ccc:	0192      	lsls	r2, r2, #6
 8002cce:	0a54      	lsrs	r4, r2, #9
 8002cd0:	b2c0      	uxtb	r0, r0
 8002cd2:	e7cf      	b.n	8002c74 <__aeabi_d2f+0x28>
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	2400      	movs	r4, #0
 8002cd8:	e7cc      	b.n	8002c74 <__aeabi_d2f+0x28>
 8002cda:	0032      	movs	r2, r6
 8002cdc:	3217      	adds	r2, #23
 8002cde:	db22      	blt.n	8002d26 <__aeabi_d2f+0xda>
 8002ce0:	2080      	movs	r0, #128	; 0x80
 8002ce2:	0400      	lsls	r0, r0, #16
 8002ce4:	4320      	orrs	r0, r4
 8002ce6:	241e      	movs	r4, #30
 8002ce8:	1ba4      	subs	r4, r4, r6
 8002cea:	2c1f      	cmp	r4, #31
 8002cec:	dd1d      	ble.n	8002d2a <__aeabi_d2f+0xde>
 8002cee:	2202      	movs	r2, #2
 8002cf0:	4252      	negs	r2, r2
 8002cf2:	1b96      	subs	r6, r2, r6
 8002cf4:	0002      	movs	r2, r0
 8002cf6:	40f2      	lsrs	r2, r6
 8002cf8:	0016      	movs	r6, r2
 8002cfa:	2c20      	cmp	r4, #32
 8002cfc:	d004      	beq.n	8002d08 <__aeabi_d2f+0xbc>
 8002cfe:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <__aeabi_d2f+0x108>)
 8002d00:	4694      	mov	ip, r2
 8002d02:	4463      	add	r3, ip
 8002d04:	4098      	lsls	r0, r3
 8002d06:	4305      	orrs	r5, r0
 8002d08:	002a      	movs	r2, r5
 8002d0a:	1e53      	subs	r3, r2, #1
 8002d0c:	419a      	sbcs	r2, r3
 8002d0e:	4332      	orrs	r2, r6
 8002d10:	2600      	movs	r6, #0
 8002d12:	0753      	lsls	r3, r2, #29
 8002d14:	d1ce      	bne.n	8002cb4 <__aeabi_d2f+0x68>
 8002d16:	2480      	movs	r4, #128	; 0x80
 8002d18:	0013      	movs	r3, r2
 8002d1a:	04e4      	lsls	r4, r4, #19
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	4023      	ands	r3, r4
 8002d20:	4222      	tst	r2, r4
 8002d22:	d1d3      	bne.n	8002ccc <__aeabi_d2f+0x80>
 8002d24:	e7b0      	b.n	8002c88 <__aeabi_d2f+0x3c>
 8002d26:	2300      	movs	r3, #0
 8002d28:	e7ad      	b.n	8002c86 <__aeabi_d2f+0x3a>
 8002d2a:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <__aeabi_d2f+0x10c>)
 8002d2c:	4694      	mov	ip, r2
 8002d2e:	002a      	movs	r2, r5
 8002d30:	40e2      	lsrs	r2, r4
 8002d32:	0014      	movs	r4, r2
 8002d34:	002a      	movs	r2, r5
 8002d36:	4463      	add	r3, ip
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	4098      	lsls	r0, r3
 8002d3c:	1e55      	subs	r5, r2, #1
 8002d3e:	41aa      	sbcs	r2, r5
 8002d40:	4302      	orrs	r2, r0
 8002d42:	4322      	orrs	r2, r4
 8002d44:	e7e4      	b.n	8002d10 <__aeabi_d2f+0xc4>
 8002d46:	0033      	movs	r3, r6
 8002d48:	e79e      	b.n	8002c88 <__aeabi_d2f+0x3c>
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	000007fe 	.word	0x000007fe
 8002d50:	fffffc80 	.word	0xfffffc80
 8002d54:	fffffca2 	.word	0xfffffca2
 8002d58:	fffffc82 	.word	0xfffffc82

08002d5c <__clzsi2>:
 8002d5c:	211c      	movs	r1, #28
 8002d5e:	2301      	movs	r3, #1
 8002d60:	041b      	lsls	r3, r3, #16
 8002d62:	4298      	cmp	r0, r3
 8002d64:	d301      	bcc.n	8002d6a <__clzsi2+0xe>
 8002d66:	0c00      	lsrs	r0, r0, #16
 8002d68:	3910      	subs	r1, #16
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	4298      	cmp	r0, r3
 8002d6e:	d301      	bcc.n	8002d74 <__clzsi2+0x18>
 8002d70:	0a00      	lsrs	r0, r0, #8
 8002d72:	3908      	subs	r1, #8
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	4298      	cmp	r0, r3
 8002d78:	d301      	bcc.n	8002d7e <__clzsi2+0x22>
 8002d7a:	0900      	lsrs	r0, r0, #4
 8002d7c:	3904      	subs	r1, #4
 8002d7e:	a202      	add	r2, pc, #8	; (adr r2, 8002d88 <__clzsi2+0x2c>)
 8002d80:	5c10      	ldrb	r0, [r2, r0]
 8002d82:	1840      	adds	r0, r0, r1
 8002d84:	4770      	bx	lr
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	02020304 	.word	0x02020304
 8002d8c:	01010101 	.word	0x01010101
	...

08002d98 <__clzdi2>:
 8002d98:	b510      	push	{r4, lr}
 8002d9a:	2900      	cmp	r1, #0
 8002d9c:	d103      	bne.n	8002da6 <__clzdi2+0xe>
 8002d9e:	f7ff ffdd 	bl	8002d5c <__clzsi2>
 8002da2:	3020      	adds	r0, #32
 8002da4:	e002      	b.n	8002dac <__clzdi2+0x14>
 8002da6:	0008      	movs	r0, r1
 8002da8:	f7ff ffd8 	bl	8002d5c <__clzsi2>
 8002dac:	bd10      	pop	{r4, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)

08002db0 <dataCalibration>:
long B6 = 0;
unsigned long B7 = 0;
long Pressure = 0;
long TE = 0;

void dataCalibration() {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af04      	add	r7, sp, #16
	uint8_t dataCalibration[22] = {0};
 8002db6:	003b      	movs	r3, r7
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	2212      	movs	r2, #18
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f005 fbb0 	bl	8008528 <memset>
	uint16_t startCalibration = 0xAA;
 8002dc8:	2116      	movs	r1, #22
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	22aa      	movs	r2, #170	; 0xaa
 8002dce:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, 0xEE, startCalibration, 1, dataCalibration, 22, HAL_MAX_DELAY);
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	881a      	ldrh	r2, [r3, #0]
 8002dd4:	4845      	ldr	r0, [pc, #276]	; (8002eec <dataCalibration+0x13c>)
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	425b      	negs	r3, r3
 8002dda:	9302      	str	r3, [sp, #8]
 8002ddc:	2316      	movs	r3, #22
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	003b      	movs	r3, r7
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	2301      	movs	r3, #1
 8002de6:	21ee      	movs	r1, #238	; 0xee
 8002de8:	f002 ff0a 	bl	8005c00 <HAL_I2C_Mem_Read>
	AC1 = ((dataCalibration[0] << 8) | dataCalibration[1]);
 8002dec:	003b      	movs	r3, r7
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	b21a      	sxth	r2, r3
 8002df4:	003b      	movs	r3, r7
 8002df6:	785b      	ldrb	r3, [r3, #1]
 8002df8:	b21b      	sxth	r3, r3
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	b21a      	sxth	r2, r3
 8002dfe:	4b3c      	ldr	r3, [pc, #240]	; (8002ef0 <dataCalibration+0x140>)
 8002e00:	801a      	strh	r2, [r3, #0]
	AC2 = ((dataCalibration[2] << 8) | dataCalibration[3]);
 8002e02:	003b      	movs	r3, r7
 8002e04:	789b      	ldrb	r3, [r3, #2]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	b21a      	sxth	r2, r3
 8002e0a:	003b      	movs	r3, r7
 8002e0c:	78db      	ldrb	r3, [r3, #3]
 8002e0e:	b21b      	sxth	r3, r3
 8002e10:	4313      	orrs	r3, r2
 8002e12:	b21a      	sxth	r2, r3
 8002e14:	4b37      	ldr	r3, [pc, #220]	; (8002ef4 <dataCalibration+0x144>)
 8002e16:	801a      	strh	r2, [r3, #0]
	AC3 = ((dataCalibration[4] << 8) | dataCalibration[5]);
 8002e18:	003b      	movs	r3, r7
 8002e1a:	791b      	ldrb	r3, [r3, #4]
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	b21a      	sxth	r2, r3
 8002e20:	003b      	movs	r3, r7
 8002e22:	795b      	ldrb	r3, [r3, #5]
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	4313      	orrs	r3, r2
 8002e28:	b21a      	sxth	r2, r3
 8002e2a:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <dataCalibration+0x148>)
 8002e2c:	801a      	strh	r2, [r3, #0]
	AC4 = ((dataCalibration[6] << 8) | dataCalibration[7]);
 8002e2e:	003b      	movs	r3, r7
 8002e30:	799b      	ldrb	r3, [r3, #6]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	b21a      	sxth	r2, r3
 8002e36:	003b      	movs	r3, r7
 8002e38:	79db      	ldrb	r3, [r3, #7]
 8002e3a:	b21b      	sxth	r3, r3
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	b21b      	sxth	r3, r3
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	4b2e      	ldr	r3, [pc, #184]	; (8002efc <dataCalibration+0x14c>)
 8002e44:	801a      	strh	r2, [r3, #0]
	AC5 = ((dataCalibration[8] << 8) | dataCalibration[9]);
 8002e46:	003b      	movs	r3, r7
 8002e48:	7a1b      	ldrb	r3, [r3, #8]
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	b21a      	sxth	r2, r3
 8002e4e:	003b      	movs	r3, r7
 8002e50:	7a5b      	ldrb	r3, [r3, #9]
 8002e52:	b21b      	sxth	r3, r3
 8002e54:	4313      	orrs	r3, r2
 8002e56:	b21b      	sxth	r3, r3
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <dataCalibration+0x150>)
 8002e5c:	801a      	strh	r2, [r3, #0]
	AC6 = ((dataCalibration[10] << 8) | dataCalibration[11]);
 8002e5e:	003b      	movs	r3, r7
 8002e60:	7a9b      	ldrb	r3, [r3, #10]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	003b      	movs	r3, r7
 8002e68:	7adb      	ldrb	r3, [r3, #11]
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <dataCalibration+0x154>)
 8002e74:	801a      	strh	r2, [r3, #0]
	B1 = ((dataCalibration[12] << 8) | dataCalibration[13]);
 8002e76:	003b      	movs	r3, r7
 8002e78:	7b1b      	ldrb	r3, [r3, #12]
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	b21a      	sxth	r2, r3
 8002e7e:	003b      	movs	r3, r7
 8002e80:	7b5b      	ldrb	r3, [r3, #13]
 8002e82:	b21b      	sxth	r3, r3
 8002e84:	4313      	orrs	r3, r2
 8002e86:	b21a      	sxth	r2, r3
 8002e88:	4b1f      	ldr	r3, [pc, #124]	; (8002f08 <dataCalibration+0x158>)
 8002e8a:	801a      	strh	r2, [r3, #0]
	B2 = ((dataCalibration[14] << 8) | dataCalibration[15]);
 8002e8c:	003b      	movs	r3, r7
 8002e8e:	7b9b      	ldrb	r3, [r3, #14]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	b21a      	sxth	r2, r3
 8002e94:	003b      	movs	r3, r7
 8002e96:	7bdb      	ldrb	r3, [r3, #15]
 8002e98:	b21b      	sxth	r3, r3
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	b21a      	sxth	r2, r3
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <dataCalibration+0x15c>)
 8002ea0:	801a      	strh	r2, [r3, #0]
	MB = ((dataCalibration[16] << 8) | dataCalibration[17]);
 8002ea2:	003b      	movs	r3, r7
 8002ea4:	7c1b      	ldrb	r3, [r3, #16]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	b21a      	sxth	r2, r3
 8002eaa:	003b      	movs	r3, r7
 8002eac:	7c5b      	ldrb	r3, [r3, #17]
 8002eae:	b21b      	sxth	r3, r3
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	b21a      	sxth	r2, r3
 8002eb4:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <dataCalibration+0x160>)
 8002eb6:	801a      	strh	r2, [r3, #0]
	MC = ((dataCalibration[18] << 8) | dataCalibration[19]);
 8002eb8:	003b      	movs	r3, r7
 8002eba:	7c9b      	ldrb	r3, [r3, #18]
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	b21a      	sxth	r2, r3
 8002ec0:	003b      	movs	r3, r7
 8002ec2:	7cdb      	ldrb	r3, [r3, #19]
 8002ec4:	b21b      	sxth	r3, r3
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	b21a      	sxth	r2, r3
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <dataCalibration+0x164>)
 8002ecc:	801a      	strh	r2, [r3, #0]
	MD = ((dataCalibration[20] << 8) | dataCalibration[21]);
 8002ece:	003b      	movs	r3, r7
 8002ed0:	7d1b      	ldrb	r3, [r3, #20]
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	b21a      	sxth	r2, r3
 8002ed6:	003b      	movs	r3, r7
 8002ed8:	7d5b      	ldrb	r3, [r3, #21]
 8002eda:	b21b      	sxth	r3, r3
 8002edc:	4313      	orrs	r3, r2
 8002ede:	b21a      	sxth	r2, r3
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <dataCalibration+0x168>)
 8002ee2:	801a      	strh	r2, [r3, #0]
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b006      	add	sp, #24
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	200002a0 	.word	0x200002a0
 8002ef0:	200001f8 	.word	0x200001f8
 8002ef4:	200001fa 	.word	0x200001fa
 8002ef8:	200001fc 	.word	0x200001fc
 8002efc:	200001fe 	.word	0x200001fe
 8002f00:	20000200 	.word	0x20000200
 8002f04:	20000202 	.word	0x20000202
 8002f08:	20000204 	.word	0x20000204
 8002f0c:	20000206 	.word	0x20000206
 8002f10:	20000208 	.word	0x20000208
 8002f14:	2000020a 	.word	0x2000020a
 8002f18:	2000020c 	.word	0x2000020c

08002f1c <utemp>:

uint16_t utemp() {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 8002f22:	1dfb      	adds	r3, r7, #7
 8002f24:	222e      	movs	r2, #46	; 0x2e
 8002f26:	701a      	strb	r2, [r3, #0]
	uint8_t rawtemp[2] = {0};
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, 0xEE, 0xF4, 1, &data, 1, 1000);
 8002f2e:	4815      	ldr	r0, [pc, #84]	; (8002f84 <utemp+0x68>)
 8002f30:	23fa      	movs	r3, #250	; 0xfa
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	9302      	str	r3, [sp, #8]
 8002f36:	2301      	movs	r3, #1
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	1dfb      	adds	r3, r7, #7
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	2301      	movs	r3, #1
 8002f40:	22f4      	movs	r2, #244	; 0xf4
 8002f42:	21ee      	movs	r1, #238	; 0xee
 8002f44:	f002 fd2e 	bl	80059a4 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8002f48:	2005      	movs	r0, #5
 8002f4a:	f001 fe87 	bl	8004c5c <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, 0xEE, 0xF6, 1, rawtemp, 2, 1000);
 8002f4e:	480d      	ldr	r0, [pc, #52]	; (8002f84 <utemp+0x68>)
 8002f50:	23fa      	movs	r3, #250	; 0xfa
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	9302      	str	r3, [sp, #8]
 8002f56:	2302      	movs	r3, #2
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	2301      	movs	r3, #1
 8002f60:	22f6      	movs	r2, #246	; 0xf6
 8002f62:	21ee      	movs	r1, #238	; 0xee
 8002f64:	f002 fe4c 	bl	8005c00 <HAL_I2C_Mem_Read>
	return (rawtemp[0] << 8) + rawtemp[1];
 8002f68:	1d3b      	adds	r3, r7, #4
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	785b      	ldrb	r3, [r3, #1]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	18d3      	adds	r3, r2, r3
 8002f7a:	b29b      	uxth	r3, r3
}
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	200002a0 	.word	0x200002a0

08002f88 <getTemp>:

uint16_t getTemp() {
 8002f88:	b5b0      	push	{r4, r5, r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
	UT = utemp();
 8002f8c:	f7ff ffc6 	bl	8002f1c <utemp>
 8002f90:	0003      	movs	r3, r0
 8002f92:	001a      	movs	r2, r3
 8002f94:	4b3c      	ldr	r3, [pc, #240]	; (8003088 <getTemp+0x100>)
 8002f96:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8002f98:	4b3b      	ldr	r3, [pc, #236]	; (8003088 <getTemp+0x100>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a3b      	ldr	r2, [pc, #236]	; (800308c <getTemp+0x104>)
 8002f9e:	8812      	ldrh	r2, [r2, #0]
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f7ff fdb4 	bl	8002b10 <__aeabi_i2d>
 8002fa8:	0004      	movs	r4, r0
 8002faa:	000d      	movs	r5, r1
 8002fac:	4b38      	ldr	r3, [pc, #224]	; (8003090 <getTemp+0x108>)
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7ff fdad 	bl	8002b10 <__aeabi_i2d>
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	4b36      	ldr	r3, [pc, #216]	; (8003094 <getTemp+0x10c>)
 8002fba:	f7fe fb55 	bl	8001668 <__aeabi_ddiv>
 8002fbe:	0002      	movs	r2, r0
 8002fc0:	000b      	movs	r3, r1
 8002fc2:	0020      	movs	r0, r4
 8002fc4:	0029      	movs	r1, r5
 8002fc6:	f7fe ff51 	bl	8001e6c <__aeabi_dmul>
 8002fca:	0002      	movs	r2, r0
 8002fcc:	000b      	movs	r3, r1
 8002fce:	0010      	movs	r0, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	f7ff fd67 	bl	8002aa4 <__aeabi_d2iz>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <getTemp+0x110>)
 8002fda:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8002fdc:	4b2f      	ldr	r3, [pc, #188]	; (800309c <getTemp+0x114>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	5e9b      	ldrsh	r3, [r3, r2]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7ff fd94 	bl	8002b10 <__aeabi_i2d>
 8002fe8:	2200      	movs	r2, #0
 8002fea:	4b2d      	ldr	r3, [pc, #180]	; (80030a0 <getTemp+0x118>)
 8002fec:	f7fe ff3e 	bl	8001e6c <__aeabi_dmul>
 8002ff0:	0002      	movs	r2, r0
 8002ff2:	000b      	movs	r3, r1
 8002ff4:	0014      	movs	r4, r2
 8002ff6:	001d      	movs	r5, r3
 8002ff8:	4b2a      	ldr	r3, [pc, #168]	; (80030a4 <getTemp+0x11c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	5e9b      	ldrsh	r3, [r3, r2]
 8002ffe:	001a      	movs	r2, r3
 8003000:	4b25      	ldr	r3, [pc, #148]	; (8003098 <getTemp+0x110>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	18d3      	adds	r3, r2, r3
 8003006:	0018      	movs	r0, r3
 8003008:	f7ff fd82 	bl	8002b10 <__aeabi_i2d>
 800300c:	0002      	movs	r2, r0
 800300e:	000b      	movs	r3, r1
 8003010:	0020      	movs	r0, r4
 8003012:	0029      	movs	r1, r5
 8003014:	f7fe fb28 	bl	8001668 <__aeabi_ddiv>
 8003018:	0002      	movs	r2, r0
 800301a:	000b      	movs	r3, r1
 800301c:	0010      	movs	r0, r2
 800301e:	0019      	movs	r1, r3
 8003020:	f7ff fd40 	bl	8002aa4 <__aeabi_d2iz>
 8003024:	0002      	movs	r2, r0
 8003026:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <getTemp+0x120>)
 8003028:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <getTemp+0x110>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <getTemp+0x120>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	18d2      	adds	r2, r2, r3
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <getTemp+0x124>)
 8003036:	601a      	str	r2, [r3, #0]
	TE = (B5+8)/(pow(2,4));
 8003038:	4b1c      	ldr	r3, [pc, #112]	; (80030ac <getTemp+0x124>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3308      	adds	r3, #8
 800303e:	0018      	movs	r0, r3
 8003040:	f7ff fd66 	bl	8002b10 <__aeabi_i2d>
 8003044:	2200      	movs	r2, #0
 8003046:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <getTemp+0x128>)
 8003048:	f7fe fb0e 	bl	8001668 <__aeabi_ddiv>
 800304c:	0002      	movs	r2, r0
 800304e:	000b      	movs	r3, r1
 8003050:	0010      	movs	r0, r2
 8003052:	0019      	movs	r1, r3
 8003054:	f7ff fd26 	bl	8002aa4 <__aeabi_d2iz>
 8003058:	0002      	movs	r2, r0
 800305a:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <getTemp+0x12c>)
 800305c:	601a      	str	r2, [r3, #0]
	return TE/10.0;
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <getTemp+0x12c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	0018      	movs	r0, r3
 8003064:	f7ff fd54 	bl	8002b10 <__aeabi_i2d>
 8003068:	2200      	movs	r2, #0
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <getTemp+0x130>)
 800306c:	f7fe fafc 	bl	8001668 <__aeabi_ddiv>
 8003070:	0002      	movs	r2, r0
 8003072:	000b      	movs	r3, r1
 8003074:	0010      	movs	r0, r2
 8003076:	0019      	movs	r1, r3
 8003078:	f7fd fa64 	bl	8000544 <__aeabi_d2uiz>
 800307c:	0003      	movs	r3, r0
 800307e:	b29b      	uxth	r3, r3
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	bdb0      	pop	{r4, r5, r7, pc}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	20000210 	.word	0x20000210
 800308c:	20000202 	.word	0x20000202
 8003090:	20000200 	.word	0x20000200
 8003094:	40e00000 	.word	0x40e00000
 8003098:	2000021c 	.word	0x2000021c
 800309c:	2000020a 	.word	0x2000020a
 80030a0:	40a00000 	.word	0x40a00000
 80030a4:	2000020c 	.word	0x2000020c
 80030a8:	20000220 	.word	0x20000220
 80030ac:	2000022c 	.word	0x2000022c
 80030b0:	40300000 	.word	0x40300000
 80030b4:	20000240 	.word	0x20000240
 80030b8:	40240000 	.word	0x40240000

080030bc <upress>:

uint32_t upress(int s) {
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af04      	add	r7, sp, #16
 80030c2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x34 + (s << 6);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	019b      	lsls	r3, r3, #6
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	3334      	adds	r3, #52	; 0x34
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	240f      	movs	r4, #15
 80030d2:	193b      	adds	r3, r7, r4
 80030d4:	701a      	strb	r2, [r3, #0]
	uint8_t rawpress[3] = {0};
 80030d6:	230c      	movs	r3, #12
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	4a2c      	ldr	r2, [pc, #176]	; (800318c <upress+0xd0>)
 80030dc:	8812      	ldrh	r2, [r2, #0]
 80030de:	801a      	strh	r2, [r3, #0]
 80030e0:	2202      	movs	r2, #2
 80030e2:	2100      	movs	r1, #0
 80030e4:	5499      	strb	r1, [r3, r2]
	HAL_I2C_Mem_Write(&hi2c1, 0xEE, 0xF4, 1, &data, 1, 1000);
 80030e6:	482a      	ldr	r0, [pc, #168]	; (8003190 <upress+0xd4>)
 80030e8:	23fa      	movs	r3, #250	; 0xfa
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	9302      	str	r3, [sp, #8]
 80030ee:	2301      	movs	r3, #1
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	193b      	adds	r3, r7, r4
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	2301      	movs	r3, #1
 80030f8:	22f4      	movs	r2, #244	; 0xf4
 80030fa:	21ee      	movs	r1, #238	; 0xee
 80030fc:	f002 fc52 	bl	80059a4 <HAL_I2C_Mem_Write>
	switch(s) {
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d01b      	beq.n	800313e <upress+0x82>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b03      	cmp	r3, #3
 800310a:	dc1c      	bgt.n	8003146 <upress+0x8a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d011      	beq.n	8003136 <upress+0x7a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b02      	cmp	r3, #2
 8003116:	dc16      	bgt.n	8003146 <upress+0x8a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <upress+0x6a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d004      	beq.n	800312e <upress+0x72>
 8003124:	e00f      	b.n	8003146 <upress+0x8a>
	case(0):
			HAL_Delay(5);
 8003126:	2005      	movs	r0, #5
 8003128:	f001 fd98 	bl	8004c5c <HAL_Delay>
	break;
 800312c:	e00b      	b.n	8003146 <upress+0x8a>
	case(1):
			HAL_Delay(8);
 800312e:	2008      	movs	r0, #8
 8003130:	f001 fd94 	bl	8004c5c <HAL_Delay>
	break;
 8003134:	e007      	b.n	8003146 <upress+0x8a>
	case(2):
			HAL_Delay(14);
 8003136:	200e      	movs	r0, #14
 8003138:	f001 fd90 	bl	8004c5c <HAL_Delay>
	break;
 800313c:	e003      	b.n	8003146 <upress+0x8a>
	case(3):
			HAL_Delay(26);
 800313e:	201a      	movs	r0, #26
 8003140:	f001 fd8c 	bl	8004c5c <HAL_Delay>
	break;
 8003144:	46c0      	nop			; (mov r8, r8)
	}
	HAL_I2C_Mem_Read(&hi2c1, 0xEE, 0xF6, 1, rawpress, 3, 1000);
 8003146:	4812      	ldr	r0, [pc, #72]	; (8003190 <upress+0xd4>)
 8003148:	23fa      	movs	r3, #250	; 0xfa
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	9302      	str	r3, [sp, #8]
 800314e:	2303      	movs	r3, #3
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	240c      	movs	r4, #12
 8003154:	193b      	adds	r3, r7, r4
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2301      	movs	r3, #1
 800315a:	22f6      	movs	r2, #246	; 0xf6
 800315c:	21ee      	movs	r1, #238	; 0xee
 800315e:	f002 fd4f 	bl	8005c00 <HAL_I2C_Mem_Read>
	return (((rawpress[0] << 16) + (rawpress[1] << 8) + rawpress[2]) >> (8-s));
 8003162:	0021      	movs	r1, r4
 8003164:	187b      	adds	r3, r7, r1
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	041a      	lsls	r2, r3, #16
 800316a:	187b      	adds	r3, r7, r1
 800316c:	785b      	ldrb	r3, [r3, #1]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	18d3      	adds	r3, r2, r3
 8003172:	187a      	adds	r2, r7, r1
 8003174:	7892      	ldrb	r2, [r2, #2]
 8003176:	189a      	adds	r2, r3, r2
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2108      	movs	r1, #8
 800317c:	1acb      	subs	r3, r1, r3
 800317e:	411a      	asrs	r2, r3
 8003180:	0013      	movs	r3, r2
}
 8003182:	0018      	movs	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	b005      	add	sp, #20
 8003188:	bd90      	pop	{r4, r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	0800c240 	.word	0x0800c240
 8003190:	200002a0 	.word	0x200002a0

08003194 <getPressure>:

float getPressure(int s) {
 8003194:	b5b0      	push	{r4, r5, r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	UP = upress(s);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	0018      	movs	r0, r3
 80031a0:	f7ff ff8c 	bl	80030bc <upress>
 80031a4:	0003      	movs	r3, r0
 80031a6:	001a      	movs	r2, r3
 80031a8:	4bea      	ldr	r3, [pc, #936]	; (8003554 <getPressure+0x3c0>)
 80031aa:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80031ac:	4bea      	ldr	r3, [pc, #936]	; (8003558 <getPressure+0x3c4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4aea      	ldr	r2, [pc, #936]	; (800355c <getPressure+0x3c8>)
 80031b2:	8812      	ldrh	r2, [r2, #0]
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	0018      	movs	r0, r3
 80031b8:	f7ff fcaa 	bl	8002b10 <__aeabi_i2d>
 80031bc:	0004      	movs	r4, r0
 80031be:	000d      	movs	r5, r1
 80031c0:	4be7      	ldr	r3, [pc, #924]	; (8003560 <getPressure+0x3cc>)
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7ff fca3 	bl	8002b10 <__aeabi_i2d>
 80031ca:	2200      	movs	r2, #0
 80031cc:	4be5      	ldr	r3, [pc, #916]	; (8003564 <getPressure+0x3d0>)
 80031ce:	f7fe fa4b 	bl	8001668 <__aeabi_ddiv>
 80031d2:	0002      	movs	r2, r0
 80031d4:	000b      	movs	r3, r1
 80031d6:	0020      	movs	r0, r4
 80031d8:	0029      	movs	r1, r5
 80031da:	f7fe fe47 	bl	8001e6c <__aeabi_dmul>
 80031de:	0002      	movs	r2, r0
 80031e0:	000b      	movs	r3, r1
 80031e2:	0010      	movs	r0, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	f7ff fc5d 	bl	8002aa4 <__aeabi_d2iz>
 80031ea:	0002      	movs	r2, r0
 80031ec:	4bde      	ldr	r3, [pc, #888]	; (8003568 <getPressure+0x3d4>)
 80031ee:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80031f0:	4bde      	ldr	r3, [pc, #888]	; (800356c <getPressure+0x3d8>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	5e9b      	ldrsh	r3, [r3, r2]
 80031f6:	0018      	movs	r0, r3
 80031f8:	f7ff fc8a 	bl	8002b10 <__aeabi_i2d>
 80031fc:	2200      	movs	r2, #0
 80031fe:	4bdc      	ldr	r3, [pc, #880]	; (8003570 <getPressure+0x3dc>)
 8003200:	f7fe fe34 	bl	8001e6c <__aeabi_dmul>
 8003204:	0002      	movs	r2, r0
 8003206:	000b      	movs	r3, r1
 8003208:	0014      	movs	r4, r2
 800320a:	001d      	movs	r5, r3
 800320c:	4bd9      	ldr	r3, [pc, #868]	; (8003574 <getPressure+0x3e0>)
 800320e:	2200      	movs	r2, #0
 8003210:	5e9b      	ldrsh	r3, [r3, r2]
 8003212:	001a      	movs	r2, r3
 8003214:	4bd4      	ldr	r3, [pc, #848]	; (8003568 <getPressure+0x3d4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	18d3      	adds	r3, r2, r3
 800321a:	0018      	movs	r0, r3
 800321c:	f7ff fc78 	bl	8002b10 <__aeabi_i2d>
 8003220:	0002      	movs	r2, r0
 8003222:	000b      	movs	r3, r1
 8003224:	0020      	movs	r0, r4
 8003226:	0029      	movs	r1, r5
 8003228:	f7fe fa1e 	bl	8001668 <__aeabi_ddiv>
 800322c:	0002      	movs	r2, r0
 800322e:	000b      	movs	r3, r1
 8003230:	0010      	movs	r0, r2
 8003232:	0019      	movs	r1, r3
 8003234:	f7ff fc36 	bl	8002aa4 <__aeabi_d2iz>
 8003238:	0002      	movs	r2, r0
 800323a:	4bcf      	ldr	r3, [pc, #828]	; (8003578 <getPressure+0x3e4>)
 800323c:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 800323e:	4bca      	ldr	r3, [pc, #808]	; (8003568 <getPressure+0x3d4>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4bcd      	ldr	r3, [pc, #820]	; (8003578 <getPressure+0x3e4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	18d2      	adds	r2, r2, r3
 8003248:	4bcc      	ldr	r3, [pc, #816]	; (800357c <getPressure+0x3e8>)
 800324a:	601a      	str	r2, [r3, #0]
	B6 = B5-4000;
 800324c:	4bcb      	ldr	r3, [pc, #812]	; (800357c <getPressure+0x3e8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4acb      	ldr	r2, [pc, #812]	; (8003580 <getPressure+0x3ec>)
 8003252:	189a      	adds	r2, r3, r2
 8003254:	4bcb      	ldr	r3, [pc, #812]	; (8003584 <getPressure+0x3f0>)
 8003256:	601a      	str	r2, [r3, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8003258:	4bcb      	ldr	r3, [pc, #812]	; (8003588 <getPressure+0x3f4>)
 800325a:	2200      	movs	r2, #0
 800325c:	5e9b      	ldrsh	r3, [r3, r2]
 800325e:	0018      	movs	r0, r3
 8003260:	f7ff fc56 	bl	8002b10 <__aeabi_i2d>
 8003264:	0004      	movs	r4, r0
 8003266:	000d      	movs	r5, r1
 8003268:	4bc6      	ldr	r3, [pc, #792]	; (8003584 <getPressure+0x3f0>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4bc5      	ldr	r3, [pc, #788]	; (8003584 <getPressure+0x3f0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4353      	muls	r3, r2
 8003272:	0018      	movs	r0, r3
 8003274:	f7ff fc4c 	bl	8002b10 <__aeabi_i2d>
 8003278:	2200      	movs	r2, #0
 800327a:	4bc4      	ldr	r3, [pc, #784]	; (800358c <getPressure+0x3f8>)
 800327c:	f7fe f9f4 	bl	8001668 <__aeabi_ddiv>
 8003280:	0002      	movs	r2, r0
 8003282:	000b      	movs	r3, r1
 8003284:	0020      	movs	r0, r4
 8003286:	0029      	movs	r1, r5
 8003288:	f7fe fdf0 	bl	8001e6c <__aeabi_dmul>
 800328c:	0002      	movs	r2, r0
 800328e:	000b      	movs	r3, r1
 8003290:	0010      	movs	r0, r2
 8003292:	0019      	movs	r1, r3
 8003294:	2200      	movs	r2, #0
 8003296:	4bb6      	ldr	r3, [pc, #728]	; (8003570 <getPressure+0x3dc>)
 8003298:	f7fe f9e6 	bl	8001668 <__aeabi_ddiv>
 800329c:	0002      	movs	r2, r0
 800329e:	000b      	movs	r3, r1
 80032a0:	0010      	movs	r0, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	f7ff fbfe 	bl	8002aa4 <__aeabi_d2iz>
 80032a8:	0002      	movs	r2, r0
 80032aa:	4baf      	ldr	r3, [pc, #700]	; (8003568 <getPressure+0x3d4>)
 80032ac:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(pow(2,11));
 80032ae:	4bb8      	ldr	r3, [pc, #736]	; (8003590 <getPressure+0x3fc>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	5e9b      	ldrsh	r3, [r3, r2]
 80032b4:	001a      	movs	r2, r3
 80032b6:	4bb3      	ldr	r3, [pc, #716]	; (8003584 <getPressure+0x3f0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4353      	muls	r3, r2
 80032bc:	0018      	movs	r0, r3
 80032be:	f7ff fc27 	bl	8002b10 <__aeabi_i2d>
 80032c2:	2200      	movs	r2, #0
 80032c4:	4baa      	ldr	r3, [pc, #680]	; (8003570 <getPressure+0x3dc>)
 80032c6:	f7fe f9cf 	bl	8001668 <__aeabi_ddiv>
 80032ca:	0002      	movs	r2, r0
 80032cc:	000b      	movs	r3, r1
 80032ce:	0010      	movs	r0, r2
 80032d0:	0019      	movs	r1, r3
 80032d2:	f7ff fbe7 	bl	8002aa4 <__aeabi_d2iz>
 80032d6:	0002      	movs	r2, r0
 80032d8:	4ba7      	ldr	r3, [pc, #668]	; (8003578 <getPressure+0x3e4>)
 80032da:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 80032dc:	4ba2      	ldr	r3, [pc, #648]	; (8003568 <getPressure+0x3d4>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4ba5      	ldr	r3, [pc, #660]	; (8003578 <getPressure+0x3e4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	18d2      	adds	r2, r2, r3
 80032e6:	4bab      	ldr	r3, [pc, #684]	; (8003594 <getPressure+0x400>)
 80032e8:	601a      	str	r2, [r3, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80032ea:	4bab      	ldr	r3, [pc, #684]	; (8003598 <getPressure+0x404>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	5e9b      	ldrsh	r3, [r3, r2]
 80032f0:	009a      	lsls	r2, r3, #2
 80032f2:	4ba8      	ldr	r3, [pc, #672]	; (8003594 <getPressure+0x400>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	18d3      	adds	r3, r2, r3
 80032f8:	4aa8      	ldr	r2, [pc, #672]	; (800359c <getPressure+0x408>)
 80032fa:	2100      	movs	r1, #0
 80032fc:	5e52      	ldrsh	r2, [r2, r1]
 80032fe:	4093      	lsls	r3, r2
 8003300:	3302      	adds	r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	da00      	bge.n	8003308 <getPressure+0x174>
 8003306:	3303      	adds	r3, #3
 8003308:	109b      	asrs	r3, r3, #2
 800330a:	001a      	movs	r2, r3
 800330c:	4ba4      	ldr	r3, [pc, #656]	; (80035a0 <getPressure+0x40c>)
 800330e:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8003310:	4ba4      	ldr	r3, [pc, #656]	; (80035a4 <getPressure+0x410>)
 8003312:	2200      	movs	r2, #0
 8003314:	5e9b      	ldrsh	r3, [r3, r2]
 8003316:	001a      	movs	r2, r3
 8003318:	4b9a      	ldr	r3, [pc, #616]	; (8003584 <getPressure+0x3f0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4353      	muls	r3, r2
 800331e:	0018      	movs	r0, r3
 8003320:	f7ff fbf6 	bl	8002b10 <__aeabi_i2d>
 8003324:	2200      	movs	r2, #0
 8003326:	4ba0      	ldr	r3, [pc, #640]	; (80035a8 <getPressure+0x414>)
 8003328:	f7fe f99e 	bl	8001668 <__aeabi_ddiv>
 800332c:	0002      	movs	r2, r0
 800332e:	000b      	movs	r3, r1
 8003330:	0010      	movs	r0, r2
 8003332:	0019      	movs	r1, r3
 8003334:	f7ff fbb6 	bl	8002aa4 <__aeabi_d2iz>
 8003338:	0002      	movs	r2, r0
 800333a:	4b8b      	ldr	r3, [pc, #556]	; (8003568 <getPressure+0x3d4>)
 800333c:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 800333e:	4b9b      	ldr	r3, [pc, #620]	; (80035ac <getPressure+0x418>)
 8003340:	2200      	movs	r2, #0
 8003342:	5e9b      	ldrsh	r3, [r3, r2]
 8003344:	0018      	movs	r0, r3
 8003346:	f7ff fbe3 	bl	8002b10 <__aeabi_i2d>
 800334a:	0004      	movs	r4, r0
 800334c:	000d      	movs	r5, r1
 800334e:	4b8d      	ldr	r3, [pc, #564]	; (8003584 <getPressure+0x3f0>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4b8c      	ldr	r3, [pc, #560]	; (8003584 <getPressure+0x3f0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4353      	muls	r3, r2
 8003358:	0018      	movs	r0, r3
 800335a:	f7ff fbd9 	bl	8002b10 <__aeabi_i2d>
 800335e:	2200      	movs	r2, #0
 8003360:	4b8a      	ldr	r3, [pc, #552]	; (800358c <getPressure+0x3f8>)
 8003362:	f7fe f981 	bl	8001668 <__aeabi_ddiv>
 8003366:	0002      	movs	r2, r0
 8003368:	000b      	movs	r3, r1
 800336a:	0020      	movs	r0, r4
 800336c:	0029      	movs	r1, r5
 800336e:	f7fe fd7d 	bl	8001e6c <__aeabi_dmul>
 8003372:	0002      	movs	r2, r0
 8003374:	000b      	movs	r3, r1
 8003376:	0010      	movs	r0, r2
 8003378:	0019      	movs	r1, r3
 800337a:	2200      	movs	r2, #0
 800337c:	4b8c      	ldr	r3, [pc, #560]	; (80035b0 <getPressure+0x41c>)
 800337e:	f7fe f973 	bl	8001668 <__aeabi_ddiv>
 8003382:	0002      	movs	r2, r0
 8003384:	000b      	movs	r3, r1
 8003386:	0010      	movs	r0, r2
 8003388:	0019      	movs	r1, r3
 800338a:	f7ff fb8b 	bl	8002aa4 <__aeabi_d2iz>
 800338e:	0002      	movs	r2, r0
 8003390:	4b79      	ldr	r3, [pc, #484]	; (8003578 <getPressure+0x3e4>)
 8003392:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8003394:	4b74      	ldr	r3, [pc, #464]	; (8003568 <getPressure+0x3d4>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b77      	ldr	r3, [pc, #476]	; (8003578 <getPressure+0x3e4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	18d3      	adds	r3, r2, r3
 800339e:	3302      	adds	r3, #2
 80033a0:	0018      	movs	r0, r3
 80033a2:	f7ff fbb5 	bl	8002b10 <__aeabi_i2d>
 80033a6:	2200      	movs	r2, #0
 80033a8:	4b82      	ldr	r3, [pc, #520]	; (80035b4 <getPressure+0x420>)
 80033aa:	f7fe f95d 	bl	8001668 <__aeabi_ddiv>
 80033ae:	0002      	movs	r2, r0
 80033b0:	000b      	movs	r3, r1
 80033b2:	0010      	movs	r0, r2
 80033b4:	0019      	movs	r1, r3
 80033b6:	f7ff fb75 	bl	8002aa4 <__aeabi_d2iz>
 80033ba:	0002      	movs	r2, r0
 80033bc:	4b75      	ldr	r3, [pc, #468]	; (8003594 <getPressure+0x400>)
 80033be:	601a      	str	r2, [r3, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80033c0:	4b7d      	ldr	r3, [pc, #500]	; (80035b8 <getPressure+0x424>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	001a      	movs	r2, r3
 80033c6:	4b73      	ldr	r3, [pc, #460]	; (8003594 <getPressure+0x400>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	0209      	lsls	r1, r1, #8
 80033ce:	468c      	mov	ip, r1
 80033d0:	4463      	add	r3, ip
 80033d2:	4353      	muls	r3, r2
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7ff fbcb 	bl	8002b70 <__aeabi_ui2d>
 80033da:	2200      	movs	r2, #0
 80033dc:	4b61      	ldr	r3, [pc, #388]	; (8003564 <getPressure+0x3d0>)
 80033de:	f7fe f943 	bl	8001668 <__aeabi_ddiv>
 80033e2:	0002      	movs	r2, r0
 80033e4:	000b      	movs	r3, r1
 80033e6:	0010      	movs	r0, r2
 80033e8:	0019      	movs	r1, r3
 80033ea:	f7fd f8ab 	bl	8000544 <__aeabi_d2uiz>
 80033ee:	0002      	movs	r2, r0
 80033f0:	4b72      	ldr	r3, [pc, #456]	; (80035bc <getPressure+0x428>)
 80033f2:	601a      	str	r2, [r3, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>s);
 80033f4:	4b57      	ldr	r3, [pc, #348]	; (8003554 <getPressure+0x3c0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	001a      	movs	r2, r3
 80033fa:	4b69      	ldr	r3, [pc, #420]	; (80035a0 <getPressure+0x40c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	496f      	ldr	r1, [pc, #444]	; (80035c0 <getPressure+0x42c>)
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4111      	asrs	r1, r2
 8003406:	000a      	movs	r2, r1
 8003408:	435a      	muls	r2, r3
 800340a:	4b6e      	ldr	r3, [pc, #440]	; (80035c4 <getPressure+0x430>)
 800340c:	601a      	str	r2, [r3, #0]
	if(B7 < 0x80000000) {
 800340e:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <getPressure+0x430>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	db0d      	blt.n	8003432 <getPressure+0x29e>
		Pressure = (B7*2) / B4;
 8003416:	4b6b      	ldr	r3, [pc, #428]	; (80035c4 <getPressure+0x430>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	005a      	lsls	r2, r3, #1
 800341c:	4b67      	ldr	r3, [pc, #412]	; (80035bc <getPressure+0x428>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	0019      	movs	r1, r3
 8003422:	0010      	movs	r0, r2
 8003424:	f7fc fe8c 	bl	8000140 <__udivsi3>
 8003428:	0003      	movs	r3, r0
 800342a:	001a      	movs	r2, r3
 800342c:	4b66      	ldr	r3, [pc, #408]	; (80035c8 <getPressure+0x434>)
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e00c      	b.n	800344c <getPressure+0x2b8>
	} else {
		Pressure = (B7/B4)*2;
 8003432:	4b64      	ldr	r3, [pc, #400]	; (80035c4 <getPressure+0x430>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4b61      	ldr	r3, [pc, #388]	; (80035bc <getPressure+0x428>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	0019      	movs	r1, r3
 800343c:	0010      	movs	r0, r2
 800343e:	f7fc fe7f 	bl	8000140 <__udivsi3>
 8003442:	0003      	movs	r3, r0
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	001a      	movs	r2, r3
 8003448:	4b5f      	ldr	r3, [pc, #380]	; (80035c8 <getPressure+0x434>)
 800344a:	601a      	str	r2, [r3, #0]
	}
	X1 = (Pressure/(pow(2,8)))*(Pressure/(pow(2,8)));
 800344c:	4b5e      	ldr	r3, [pc, #376]	; (80035c8 <getPressure+0x434>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0018      	movs	r0, r3
 8003452:	f7ff fb5d 	bl	8002b10 <__aeabi_i2d>
 8003456:	2200      	movs	r2, #0
 8003458:	4b5c      	ldr	r3, [pc, #368]	; (80035cc <getPressure+0x438>)
 800345a:	f7fe f905 	bl	8001668 <__aeabi_ddiv>
 800345e:	0002      	movs	r2, r0
 8003460:	000b      	movs	r3, r1
 8003462:	0014      	movs	r4, r2
 8003464:	001d      	movs	r5, r3
 8003466:	4b58      	ldr	r3, [pc, #352]	; (80035c8 <getPressure+0x434>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	0018      	movs	r0, r3
 800346c:	f7ff fb50 	bl	8002b10 <__aeabi_i2d>
 8003470:	2200      	movs	r2, #0
 8003472:	4b56      	ldr	r3, [pc, #344]	; (80035cc <getPressure+0x438>)
 8003474:	f7fe f8f8 	bl	8001668 <__aeabi_ddiv>
 8003478:	0002      	movs	r2, r0
 800347a:	000b      	movs	r3, r1
 800347c:	0020      	movs	r0, r4
 800347e:	0029      	movs	r1, r5
 8003480:	f7fe fcf4 	bl	8001e6c <__aeabi_dmul>
 8003484:	0002      	movs	r2, r0
 8003486:	000b      	movs	r3, r1
 8003488:	0010      	movs	r0, r2
 800348a:	0019      	movs	r1, r3
 800348c:	f7ff fb0a 	bl	8002aa4 <__aeabi_d2iz>
 8003490:	0002      	movs	r2, r0
 8003492:	4b35      	ldr	r3, [pc, #212]	; (8003568 <getPressure+0x3d4>)
 8003494:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(pow(2,16));
 8003496:	4b34      	ldr	r3, [pc, #208]	; (8003568 <getPressure+0x3d4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a4d      	ldr	r2, [pc, #308]	; (80035d0 <getPressure+0x43c>)
 800349c:	4353      	muls	r3, r2
 800349e:	0018      	movs	r0, r3
 80034a0:	f7ff fb36 	bl	8002b10 <__aeabi_i2d>
 80034a4:	2200      	movs	r2, #0
 80034a6:	4b42      	ldr	r3, [pc, #264]	; (80035b0 <getPressure+0x41c>)
 80034a8:	f7fe f8de 	bl	8001668 <__aeabi_ddiv>
 80034ac:	0002      	movs	r2, r0
 80034ae:	000b      	movs	r3, r1
 80034b0:	0010      	movs	r0, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	f7ff faf6 	bl	8002aa4 <__aeabi_d2iz>
 80034b8:	0002      	movs	r2, r0
 80034ba:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <getPressure+0x3d4>)
 80034bc:	601a      	str	r2, [r3, #0]
	X2 = (-7357*Pressure)/(pow(2,16));
 80034be:	4b42      	ldr	r3, [pc, #264]	; (80035c8 <getPressure+0x434>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	0013      	movs	r3, r2
 80034c4:	015b      	lsls	r3, r3, #5
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	00da      	lsls	r2, r3, #3
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	425b      	negs	r3, r3
 80034d6:	0018      	movs	r0, r3
 80034d8:	f7ff fb1a 	bl	8002b10 <__aeabi_i2d>
 80034dc:	2200      	movs	r2, #0
 80034de:	4b34      	ldr	r3, [pc, #208]	; (80035b0 <getPressure+0x41c>)
 80034e0:	f7fe f8c2 	bl	8001668 <__aeabi_ddiv>
 80034e4:	0002      	movs	r2, r0
 80034e6:	000b      	movs	r3, r1
 80034e8:	0010      	movs	r0, r2
 80034ea:	0019      	movs	r1, r3
 80034ec:	f7ff fada 	bl	8002aa4 <__aeabi_d2iz>
 80034f0:	0002      	movs	r2, r0
 80034f2:	4b21      	ldr	r3, [pc, #132]	; (8003578 <getPressure+0x3e4>)
 80034f4:	601a      	str	r2, [r3, #0]
	Pressure = Pressure + (X1+X2+3791)/(pow(2,4));
 80034f6:	4b34      	ldr	r3, [pc, #208]	; (80035c8 <getPressure+0x434>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7ff fb08 	bl	8002b10 <__aeabi_i2d>
 8003500:	0004      	movs	r4, r0
 8003502:	000d      	movs	r5, r1
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <getPressure+0x3d4>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4b1b      	ldr	r3, [pc, #108]	; (8003578 <getPressure+0x3e4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	18d3      	adds	r3, r2, r3
 800350e:	4a31      	ldr	r2, [pc, #196]	; (80035d4 <getPressure+0x440>)
 8003510:	4694      	mov	ip, r2
 8003512:	4463      	add	r3, ip
 8003514:	0018      	movs	r0, r3
 8003516:	f7ff fafb 	bl	8002b10 <__aeabi_i2d>
 800351a:	2200      	movs	r2, #0
 800351c:	4b2e      	ldr	r3, [pc, #184]	; (80035d8 <getPressure+0x444>)
 800351e:	f7fe f8a3 	bl	8001668 <__aeabi_ddiv>
 8003522:	0002      	movs	r2, r0
 8003524:	000b      	movs	r3, r1
 8003526:	0020      	movs	r0, r4
 8003528:	0029      	movs	r1, r5
 800352a:	f7fd fd61 	bl	8000ff0 <__aeabi_dadd>
 800352e:	0002      	movs	r2, r0
 8003530:	000b      	movs	r3, r1
 8003532:	0010      	movs	r0, r2
 8003534:	0019      	movs	r1, r3
 8003536:	f7ff fab5 	bl	8002aa4 <__aeabi_d2iz>
 800353a:	0002      	movs	r2, r0
 800353c:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <getPressure+0x434>)
 800353e:	601a      	str	r2, [r3, #0]
	return Pressure;
 8003540:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <getPressure+0x434>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0018      	movs	r0, r3
 8003546:	f7fd fcc3 	bl	8000ed0 <__aeabi_i2f>
 800354a:	1c03      	adds	r3, r0, #0
}
 800354c:	1c18      	adds	r0, r3, #0
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bdb0      	pop	{r4, r5, r7, pc}
 8003554:	20000218 	.word	0x20000218
 8003558:	20000210 	.word	0x20000210
 800355c:	20000202 	.word	0x20000202
 8003560:	20000200 	.word	0x20000200
 8003564:	40e00000 	.word	0x40e00000
 8003568:	2000021c 	.word	0x2000021c
 800356c:	2000020a 	.word	0x2000020a
 8003570:	40a00000 	.word	0x40a00000
 8003574:	2000020c 	.word	0x2000020c
 8003578:	20000220 	.word	0x20000220
 800357c:	2000022c 	.word	0x2000022c
 8003580:	fffff060 	.word	0xfffff060
 8003584:	20000234 	.word	0x20000234
 8003588:	20000206 	.word	0x20000206
 800358c:	40b00000 	.word	0x40b00000
 8003590:	200001fa 	.word	0x200001fa
 8003594:	20000224 	.word	0x20000224
 8003598:	200001f8 	.word	0x200001f8
 800359c:	20000214 	.word	0x20000214
 80035a0:	20000228 	.word	0x20000228
 80035a4:	200001fc 	.word	0x200001fc
 80035a8:	40c00000 	.word	0x40c00000
 80035ac:	20000204 	.word	0x20000204
 80035b0:	40f00000 	.word	0x40f00000
 80035b4:	40100000 	.word	0x40100000
 80035b8:	200001fe 	.word	0x200001fe
 80035bc:	20000230 	.word	0x20000230
 80035c0:	0000c350 	.word	0x0000c350
 80035c4:	20000238 	.word	0x20000238
 80035c8:	2000023c 	.word	0x2000023c
 80035cc:	40700000 	.word	0x40700000
 80035d0:	00000bde 	.word	0x00000bde
 80035d4:	00000ecf 	.word	0x00000ecf
 80035d8:	40300000 	.word	0x40300000

080035dc <getAlt>:

float getAlt(int s) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	getPressure(s);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7ff fdd4 	bl	8003194 <getPressure>
	return 44330*(1-(pow((Pressure/(float)101325), 0.19029495718)));
 80035ec:	4b15      	ldr	r3, [pc, #84]	; (8003644 <getAlt+0x68>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7fd fc6d 	bl	8000ed0 <__aeabi_i2f>
 80035f6:	1c03      	adds	r3, r0, #0
 80035f8:	4913      	ldr	r1, [pc, #76]	; (8003648 <getAlt+0x6c>)
 80035fa:	1c18      	adds	r0, r3, #0
 80035fc:	f7fd fa2a 	bl	8000a54 <__aeabi_fdiv>
 8003600:	1c03      	adds	r3, r0, #0
 8003602:	1c18      	adds	r0, r3, #0
 8003604:	f7ff fada 	bl	8002bbc <__aeabi_f2d>
 8003608:	4a10      	ldr	r2, [pc, #64]	; (800364c <getAlt+0x70>)
 800360a:	4b11      	ldr	r3, [pc, #68]	; (8003650 <getAlt+0x74>)
 800360c:	f007 ff2e 	bl	800b46c <pow>
 8003610:	0002      	movs	r2, r0
 8003612:	000b      	movs	r3, r1
 8003614:	2000      	movs	r0, #0
 8003616:	490f      	ldr	r1, [pc, #60]	; (8003654 <getAlt+0x78>)
 8003618:	f7fe fe94 	bl	8002344 <__aeabi_dsub>
 800361c:	0002      	movs	r2, r0
 800361e:	000b      	movs	r3, r1
 8003620:	0010      	movs	r0, r2
 8003622:	0019      	movs	r1, r3
 8003624:	2200      	movs	r2, #0
 8003626:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <getAlt+0x7c>)
 8003628:	f7fe fc20 	bl	8001e6c <__aeabi_dmul>
 800362c:	0002      	movs	r2, r0
 800362e:	000b      	movs	r3, r1
 8003630:	0010      	movs	r0, r2
 8003632:	0019      	movs	r1, r3
 8003634:	f7ff fb0a 	bl	8002c4c <__aeabi_d2f>
 8003638:	1c03      	adds	r3, r0, #0
}
 800363a:	1c18      	adds	r0, r3, #0
 800363c:	46bd      	mov	sp, r7
 800363e:	b002      	add	sp, #8
 8003640:	bd80      	pop	{r7, pc}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	2000023c 	.word	0x2000023c
 8003648:	47c5e680 	.word	0x47c5e680
 800364c:	ccd745e4 	.word	0xccd745e4
 8003650:	3fc85b95 	.word	0x3fc85b95
 8003654:	3ff00000 	.word	0x3ff00000
 8003658:	40e5a540 	.word	0x40e5a540

0800365c <setOut>:
 *      Author: Michael
 */

#include "delay.h"

void setOut(GPIO_TypeDef* GPIOx) { //set gpio output mode
 800365c:	b590      	push	{r4, r7, lr}
 800365e:	b089      	sub	sp, #36	; 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003664:	240c      	movs	r4, #12
 8003666:	193b      	adds	r3, r7, r4
 8003668:	0018      	movs	r0, r3
 800366a:	2314      	movs	r3, #20
 800366c:	001a      	movs	r2, r3
 800366e:	2100      	movs	r1, #0
 8003670:	f004 ff5a 	bl	8008528 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003674:	193b      	adds	r3, r7, r4
 8003676:	2202      	movs	r2, #2
 8003678:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367a:	193b      	adds	r3, r7, r4
 800367c:	2201      	movs	r2, #1
 800367e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003680:	193b      	adds	r3, r7, r4
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003686:	193a      	adds	r2, r7, r4
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	0011      	movs	r1, r2
 800368c:	0018      	movs	r0, r3
 800368e:	f001 ff3b 	bl	8005508 <HAL_GPIO_Init>
}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	46bd      	mov	sp, r7
 8003696:	b009      	add	sp, #36	; 0x24
 8003698:	bd90      	pop	{r4, r7, pc}

0800369a <setIn>:

void setIn(GPIO_TypeDef* GPIOx) { //set gpio input mode
 800369a:	b590      	push	{r4, r7, lr}
 800369c:	b089      	sub	sp, #36	; 0x24
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a2:	240c      	movs	r4, #12
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	0018      	movs	r0, r3
 80036a8:	2314      	movs	r3, #20
 80036aa:	001a      	movs	r2, r3
 80036ac:	2100      	movs	r1, #0
 80036ae:	f004 ff3b 	bl	8008528 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036b2:	193b      	adds	r3, r7, r4
 80036b4:	2202      	movs	r2, #2
 80036b6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036b8:	193b      	adds	r3, r7, r4
 80036ba:	2200      	movs	r2, #0
 80036bc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036be:	193b      	adds	r3, r7, r4
 80036c0:	2201      	movs	r2, #1
 80036c2:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80036c4:	193a      	adds	r2, r7, r4
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0011      	movs	r1, r2
 80036ca:	0018      	movs	r0, r3
 80036cc:	f001 ff1c 	bl	8005508 <HAL_GPIO_Init>
}
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b009      	add	sp, #36	; 0x24
 80036d6:	bd90      	pop	{r4, r7, pc}

080036d8 <sensorInit>:

#define PC GPIOC

void sensorInit() {
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
	setOut(PC); //set output mode
 80036dc:	4b12      	ldr	r3, [pc, #72]	; (8003728 <sensorInit+0x50>)
 80036de:	0018      	movs	r0, r3
 80036e0:	f7ff ffbc 	bl	800365c <setOut>
	HAL_GPIO_WritePin(PC, GPIO_PIN_1, 1);
 80036e4:	4b10      	ldr	r3, [pc, #64]	; (8003728 <sensorInit+0x50>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	2102      	movs	r1, #2
 80036ea:	0018      	movs	r0, r3
 80036ec:	f002 f8a7 	bl	800583e <HAL_GPIO_WritePin>
	//HAL_Delay(200);
	HAL_Delay(200); //wait two seconds before doing anything. just keep the pin high
 80036f0:	20c8      	movs	r0, #200	; 0xc8
 80036f2:	f001 fab3 	bl	8004c5c <HAL_Delay>
	HAL_GPIO_WritePin(PC, GPIO_PIN_1, 0);
 80036f6:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <sensorInit+0x50>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	2102      	movs	r1, #2
 80036fc:	0018      	movs	r0, r3
 80036fe:	f002 f89e 	bl	800583e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8003702:	2005      	movs	r0, #5
 8003704:	f001 faaa 	bl	8004c5c <HAL_Delay>
	//delay(5000); //5ms. wait 5 miliseconds
	HAL_GPIO_WritePin(PC, GPIO_PIN_1, 1);
 8003708:	4b07      	ldr	r3, [pc, #28]	; (8003728 <sensorInit+0x50>)
 800370a:	2201      	movs	r2, #1
 800370c:	2102      	movs	r1, #2
 800370e:	0018      	movs	r0, r3
 8003710:	f002 f895 	bl	800583e <HAL_GPIO_WritePin>
	delay(20); //wait 20 microseconds
 8003714:	2014      	movs	r0, #20
 8003716:	f000 f98b 	bl	8003a30 <delay>
	setIn(PC); //set input to read the sensor response in next function
 800371a:	4b03      	ldr	r3, [pc, #12]	; (8003728 <sensorInit+0x50>)
 800371c:	0018      	movs	r0, r3
 800371e:	f7ff ffbc 	bl	800369a <setIn>
}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	50000800 	.word	0x50000800

0800372c <sensorVerify>:

uint8_t sensorVerify() {
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
	//setIn(PA);
	uint8_t r = 0;
 8003732:	1dfb      	adds	r3, r7, #7
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
	delay(40);
 8003738:	2028      	movs	r0, #40	; 0x28
 800373a:	f000 f979 	bl	8003a30 <delay>
	if(HAL_GPIO_ReadPin(PC, GPIO_PIN_1) == GPIO_PIN_RESET) {  //if the pin is low
 800373e:	4b13      	ldr	r3, [pc, #76]	; (800378c <sensorVerify+0x60>)
 8003740:	2102      	movs	r1, #2
 8003742:	0018      	movs	r0, r3
 8003744:	f002 f85e 	bl	8005804 <HAL_GPIO_ReadPin>
 8003748:	1e03      	subs	r3, r0, #0
 800374a:	d110      	bne.n	800376e <sensorVerify+0x42>
		delay(80);
 800374c:	2050      	movs	r0, #80	; 0x50
 800374e:	f000 f96f 	bl	8003a30 <delay>
		if((HAL_GPIO_ReadPin(PC, GPIO_PIN_1))) { //if the pin is high
 8003752:	4b0e      	ldr	r3, [pc, #56]	; (800378c <sensorVerify+0x60>)
 8003754:	2102      	movs	r1, #2
 8003756:	0018      	movs	r0, r3
 8003758:	f002 f854 	bl	8005804 <HAL_GPIO_ReadPin>
 800375c:	1e03      	subs	r3, r0, #0
 800375e:	d003      	beq.n	8003768 <sensorVerify+0x3c>
			r = 1;
 8003760:	1dfb      	adds	r3, r7, #7
 8003762:	2201      	movs	r2, #1
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	e002      	b.n	800376e <sensorVerify+0x42>
		} else {
			r = -1;
 8003768:	1dfb      	adds	r3, r7, #7
 800376a:	22ff      	movs	r2, #255	; 0xff
 800376c:	701a      	strb	r2, [r3, #0]
		}
	}
	while((HAL_GPIO_ReadPin(PC, GPIO_PIN_1)));
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <sensorVerify+0x60>)
 8003772:	2102      	movs	r1, #2
 8003774:	0018      	movs	r0, r3
 8003776:	f002 f845 	bl	8005804 <HAL_GPIO_ReadPin>
 800377a:	1e03      	subs	r3, r0, #0
 800377c:	d1f8      	bne.n	8003770 <sensorVerify+0x44>
	//sensor does not send back response?
	//r = 0 indicates that the pin is always high and never pulls down.
	return r;
 800377e:	1dfb      	adds	r3, r7, #7
 8003780:	781b      	ldrb	r3, [r3, #0]
}
 8003782:	0018      	movs	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	b002      	add	sp, #8
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	50000800 	.word	0x50000800

08003790 <sensorRead>:

uint8_t sensorRead() {
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for(j = 0; j < 8; j++) {
 8003796:	1dbb      	adds	r3, r7, #6
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]
 800379c:	e03f      	b.n	800381e <sensorRead+0x8e>
		while(!(HAL_GPIO_ReadPin(PC, GPIO_PIN_1)));
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	4b24      	ldr	r3, [pc, #144]	; (8003834 <sensorRead+0xa4>)
 80037a2:	2102      	movs	r1, #2
 80037a4:	0018      	movs	r0, r3
 80037a6:	f002 f82d 	bl	8005804 <HAL_GPIO_ReadPin>
 80037aa:	1e03      	subs	r3, r0, #0
 80037ac:	d0f8      	beq.n	80037a0 <sensorRead+0x10>
		delay(40);
 80037ae:	2028      	movs	r0, #40	; 0x28
 80037b0:	f000 f93e 	bl	8003a30 <delay>
		if(!(HAL_GPIO_ReadPin(PC, GPIO_PIN_1))) {
 80037b4:	4b1f      	ldr	r3, [pc, #124]	; (8003834 <sensorRead+0xa4>)
 80037b6:	2102      	movs	r1, #2
 80037b8:	0018      	movs	r0, r3
 80037ba:	f002 f823 	bl	8005804 <HAL_GPIO_ReadPin>
 80037be:	1e03      	subs	r3, r0, #0
 80037c0:	d111      	bne.n	80037e6 <sensorRead+0x56>
			i &= ~(1<<(7-j));
 80037c2:	1dbb      	adds	r3, r7, #6
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2207      	movs	r2, #7
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2201      	movs	r2, #1
 80037cc:	409a      	lsls	r2, r3
 80037ce:	0013      	movs	r3, r2
 80037d0:	b25b      	sxtb	r3, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	b25b      	sxtb	r3, r3
 80037d6:	1dfa      	adds	r2, r7, #7
 80037d8:	7812      	ldrb	r2, [r2, #0]
 80037da:	b252      	sxtb	r2, r2
 80037dc:	4013      	ands	r3, r2
 80037de:	b25a      	sxtb	r2, r3
 80037e0:	1dfb      	adds	r3, r7, #7
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e00e      	b.n	8003804 <sensorRead+0x74>
		} else {
			i |= (1<<(7-j));
 80037e6:	1dbb      	adds	r3, r7, #6
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2207      	movs	r2, #7
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2201      	movs	r2, #1
 80037f0:	409a      	lsls	r2, r3
 80037f2:	0013      	movs	r3, r2
 80037f4:	b25a      	sxtb	r2, r3
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	b25b      	sxtb	r3, r3
 80037fc:	4313      	orrs	r3, r2
 80037fe:	b25a      	sxtb	r2, r3
 8003800:	1dfb      	adds	r3, r7, #7
 8003802:	701a      	strb	r2, [r3, #0]
		}
		while((HAL_GPIO_ReadPin(PC, GPIO_PIN_1)));
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <sensorRead+0xa4>)
 8003808:	2102      	movs	r1, #2
 800380a:	0018      	movs	r0, r3
 800380c:	f001 fffa 	bl	8005804 <HAL_GPIO_ReadPin>
 8003810:	1e03      	subs	r3, r0, #0
 8003812:	d1f8      	bne.n	8003806 <sensorRead+0x76>
	for(j = 0; j < 8; j++) {
 8003814:	1dbb      	adds	r3, r7, #6
 8003816:	781a      	ldrb	r2, [r3, #0]
 8003818:	1dbb      	adds	r3, r7, #6
 800381a:	3201      	adds	r2, #1
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	1dbb      	adds	r3, r7, #6
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b07      	cmp	r3, #7
 8003824:	d9bb      	bls.n	800379e <sensorRead+0xe>
	}
	return i;
 8003826:	1dfb      	adds	r3, r7, #7
 8003828:	781b      	ldrb	r3, [r3, #0]
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	50000800 	.word	0x50000800

08003838 <setOutDS>:
 */

#include "delay.h"
#define PC GPIOC

void setOutDS(GPIO_TypeDef* GPIOx) { //set gpio output mode
 8003838:	b590      	push	{r4, r7, lr}
 800383a:	b089      	sub	sp, #36	; 0x24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003840:	240c      	movs	r4, #12
 8003842:	193b      	adds	r3, r7, r4
 8003844:	0018      	movs	r0, r3
 8003846:	2314      	movs	r3, #20
 8003848:	001a      	movs	r2, r3
 800384a:	2100      	movs	r1, #0
 800384c:	f004 fe6c 	bl	8008528 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003850:	193b      	adds	r3, r7, r4
 8003852:	2204      	movs	r2, #4
 8003854:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003856:	193b      	adds	r3, r7, r4
 8003858:	2201      	movs	r2, #1
 800385a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385c:	193b      	adds	r3, r7, r4
 800385e:	2200      	movs	r2, #0
 8003860:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003862:	193a      	adds	r2, r7, r4
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	0011      	movs	r1, r2
 8003868:	0018      	movs	r0, r3
 800386a:	f001 fe4d 	bl	8005508 <HAL_GPIO_Init>
}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	b009      	add	sp, #36	; 0x24
 8003874:	bd90      	pop	{r4, r7, pc}

08003876 <setInDS>:

void setInDS(GPIO_TypeDef* GPIOx) { //set gpio input mode
 8003876:	b590      	push	{r4, r7, lr}
 8003878:	b089      	sub	sp, #36	; 0x24
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800387e:	240c      	movs	r4, #12
 8003880:	193b      	adds	r3, r7, r4
 8003882:	0018      	movs	r0, r3
 8003884:	2314      	movs	r3, #20
 8003886:	001a      	movs	r2, r3
 8003888:	2100      	movs	r1, #0
 800388a:	f004 fe4d 	bl	8008528 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800388e:	193b      	adds	r3, r7, r4
 8003890:	2204      	movs	r2, #4
 8003892:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003894:	193b      	adds	r3, r7, r4
 8003896:	2200      	movs	r2, #0
 8003898:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800389a:	193b      	adds	r3, r7, r4
 800389c:	2201      	movs	r2, #1
 800389e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80038a0:	193a      	adds	r2, r7, r4
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	0011      	movs	r1, r2
 80038a6:	0018      	movs	r0, r3
 80038a8:	f001 fe2e 	bl	8005508 <HAL_GPIO_Init>
}
 80038ac:	46c0      	nop			; (mov r8, r8)
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b009      	add	sp, #36	; 0x24
 80038b2:	bd90      	pop	{r4, r7, pc}

080038b4 <dsInit>:

uint8_t dsInit() {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
	uint8_t r = 0;
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]
	setOutDS(PC);
 80038c0:	4b15      	ldr	r3, [pc, #84]	; (8003918 <dsInit+0x64>)
 80038c2:	0018      	movs	r0, r3
 80038c4:	f7ff ffb8 	bl	8003838 <setOutDS>
	HAL_GPIO_WritePin(PC, GPIO_PIN_2, 0);
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <dsInit+0x64>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	2104      	movs	r1, #4
 80038ce:	0018      	movs	r0, r3
 80038d0:	f001 ffb5 	bl	800583e <HAL_GPIO_WritePin>
	delay(50);
 80038d4:	2032      	movs	r0, #50	; 0x32
 80038d6:	f000 f8ab 	bl	8003a30 <delay>
	//delay(480);
	setInDS(PC);
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <dsInit+0x64>)
 80038dc:	0018      	movs	r0, r3
 80038de:	f7ff ffca 	bl	8003876 <setInDS>
	delay(50);
 80038e2:	2032      	movs	r0, #50	; 0x32
 80038e4:	f000 f8a4 	bl	8003a30 <delay>
	//delay(80);
	if(!(HAL_GPIO_ReadPin(PC, GPIO_PIN_2))) {
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <dsInit+0x64>)
 80038ea:	2104      	movs	r1, #4
 80038ec:	0018      	movs	r0, r3
 80038ee:	f001 ff89 	bl	8005804 <HAL_GPIO_ReadPin>
 80038f2:	1e03      	subs	r3, r0, #0
 80038f4:	d103      	bne.n	80038fe <dsInit+0x4a>
		r = 1;
 80038f6:	1dfb      	adds	r3, r7, #7
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	e002      	b.n	8003904 <dsInit+0x50>
	} else {
		r = -1;
 80038fe:	1dfb      	adds	r3, r7, #7
 8003900:	22ff      	movs	r2, #255	; 0xff
 8003902:	701a      	strb	r2, [r3, #0]
	}
	delay(50);
 8003904:	2032      	movs	r0, #50	; 0x32
 8003906:	f000 f893 	bl	8003a30 <delay>
	//delay(400);
	return r;
 800390a:	1dfb      	adds	r3, r7, #7
 800390c:	781b      	ldrb	r3, [r3, #0]
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b002      	add	sp, #8
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	50000800 	.word	0x50000800

0800391c <dsWrite>:

void dsWrite(uint8_t data) {
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	0002      	movs	r2, r0
 8003924:	1dfb      	adds	r3, r7, #7
 8003926:	701a      	strb	r2, [r3, #0]
	setOutDS(PC);
 8003928:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <dsWrite+0x8c>)
 800392a:	0018      	movs	r0, r3
 800392c:	f7ff ff84 	bl	8003838 <setOutDS>
	for(int i = 0; i < 8; i++) {
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	e030      	b.n	8003998 <dsWrite+0x7c>
		if((data & (1 << i)) != 0) {
 8003936:	1dfb      	adds	r3, r7, #7
 8003938:	781a      	ldrb	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	411a      	asrs	r2, r3
 800393e:	0013      	movs	r3, r2
 8003940:	2201      	movs	r2, #1
 8003942:	4013      	ands	r3, r2
 8003944:	d014      	beq.n	8003970 <dsWrite+0x54>
			setOutDS(PC);
 8003946:	4b18      	ldr	r3, [pc, #96]	; (80039a8 <dsWrite+0x8c>)
 8003948:	0018      	movs	r0, r3
 800394a:	f7ff ff75 	bl	8003838 <setOutDS>
			HAL_GPIO_WritePin(PC, GPIO_PIN_2, 0);
 800394e:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <dsWrite+0x8c>)
 8003950:	2200      	movs	r2, #0
 8003952:	2104      	movs	r1, #4
 8003954:	0018      	movs	r0, r3
 8003956:	f001 ff72 	bl	800583e <HAL_GPIO_WritePin>
			delay(1);
 800395a:	2001      	movs	r0, #1
 800395c:	f000 f868 	bl	8003a30 <delay>
			setInDS(PC);
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <dsWrite+0x8c>)
 8003962:	0018      	movs	r0, r3
 8003964:	f7ff ff87 	bl	8003876 <setInDS>
			delay(50);
 8003968:	2032      	movs	r0, #50	; 0x32
 800396a:	f000 f861 	bl	8003a30 <delay>
 800396e:	e010      	b.n	8003992 <dsWrite+0x76>
		} else {
			setOutDS(PC);
 8003970:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <dsWrite+0x8c>)
 8003972:	0018      	movs	r0, r3
 8003974:	f7ff ff60 	bl	8003838 <setOutDS>
			HAL_GPIO_WritePin(PC, GPIO_PIN_2, 0);
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <dsWrite+0x8c>)
 800397a:	2200      	movs	r2, #0
 800397c:	2104      	movs	r1, #4
 800397e:	0018      	movs	r0, r3
 8003980:	f001 ff5d 	bl	800583e <HAL_GPIO_WritePin>
			delay(50);
 8003984:	2032      	movs	r0, #50	; 0x32
 8003986:	f000 f853 	bl	8003a30 <delay>
			setInDS(PC);
 800398a:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <dsWrite+0x8c>)
 800398c:	0018      	movs	r0, r3
 800398e:	f7ff ff72 	bl	8003876 <setInDS>
	for(int i = 0; i < 8; i++) {
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	3301      	adds	r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b07      	cmp	r3, #7
 800399c:	ddcb      	ble.n	8003936 <dsWrite+0x1a>
		}
	}
}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b004      	add	sp, #16
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	50000800 	.word	0x50000800

080039ac <dsRead>:

uint8_t dsRead() {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
	uint8_t v = 0;
 80039b2:	1dfb      	adds	r3, r7, #7
 80039b4:	2200      	movs	r2, #0
 80039b6:	701a      	strb	r2, [r3, #0]
	setInDS(PC);
 80039b8:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <dsRead+0x80>)
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7ff ff5b 	bl	8003876 <setInDS>
	for(int i = 0; i < 8; i++) {
 80039c0:	2300      	movs	r3, #0
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	e029      	b.n	8003a1a <dsRead+0x6e>
		setOutDS(PC);
 80039c6:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <dsRead+0x80>)
 80039c8:	0018      	movs	r0, r3
 80039ca:	f7ff ff35 	bl	8003838 <setOutDS>
		HAL_GPIO_WritePin(PC, GPIO_PIN_2, 0);
 80039ce:	4b17      	ldr	r3, [pc, #92]	; (8003a2c <dsRead+0x80>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	2104      	movs	r1, #4
 80039d4:	0018      	movs	r0, r3
 80039d6:	f001 ff32 	bl	800583e <HAL_GPIO_WritePin>
		delay(2);
 80039da:	2002      	movs	r0, #2
 80039dc:	f000 f828 	bl	8003a30 <delay>
		setInDS(PC);
 80039e0:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <dsRead+0x80>)
 80039e2:	0018      	movs	r0, r3
 80039e4:	f7ff ff47 	bl	8003876 <setInDS>
		if(HAL_GPIO_ReadPin(PC, GPIO_PIN_2)) {
 80039e8:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <dsRead+0x80>)
 80039ea:	2104      	movs	r1, #4
 80039ec:	0018      	movs	r0, r3
 80039ee:	f001 ff09 	bl	8005804 <HAL_GPIO_ReadPin>
 80039f2:	1e03      	subs	r3, r0, #0
 80039f4:	d00b      	beq.n	8003a0e <dsRead+0x62>
			v |= 1 << i;
 80039f6:	2201      	movs	r2, #1
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	409a      	lsls	r2, r3
 80039fc:	0013      	movs	r3, r2
 80039fe:	b25a      	sxtb	r2, r3
 8003a00:	1dfb      	adds	r3, r7, #7
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	b25b      	sxtb	r3, r3
 8003a06:	4313      	orrs	r3, r2
 8003a08:	b25a      	sxtb	r2, r3
 8003a0a:	1dfb      	adds	r3, r7, #7
 8003a0c:	701a      	strb	r2, [r3, #0]
		}
		delay(60);
 8003a0e:	203c      	movs	r0, #60	; 0x3c
 8003a10:	f000 f80e 	bl	8003a30 <delay>
	for(int i = 0; i < 8; i++) {
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	3301      	adds	r3, #1
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b07      	cmp	r3, #7
 8003a1e:	ddd2      	ble.n	80039c6 <dsRead+0x1a>
	}
	return v;
 8003a20:	1dfb      	adds	r3, r7, #7
 8003a22:	781b      	ldrb	r3, [r3, #0]
}
 8003a24:	0018      	movs	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	50000800 	.word	0x50000800

08003a30 <delay>:
 */

#include "stm32l0xx_hal.h"
extern TIM_HandleTypeDef htim2;

void delay(uint16_t time) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	0002      	movs	r2, r0
 8003a38:	1dbb      	adds	r3, r7, #6
 8003a3a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003a3c:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <delay+0x30>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2200      	movs	r2, #0
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim2)) < time);
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <delay+0x30>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a4c:	1dbb      	adds	r3, r7, #6
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d3f8      	bcc.n	8003a46 <delay+0x16>
}
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b002      	add	sp, #8
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	200002ec 	.word	0x200002ec

08003a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a66:	4cfd      	ldr	r4, [pc, #1012]	; (8003e5c <main+0x3f8>)
 8003a68:	44a5      	add	sp, r4
 8003a6a:	af00      	add	r7, sp, #0
	//
	//
	//
	//----------------------------------------------------variables
	//-------------------------------------GPS
	uint8_t buf[71] = "";
 8003a6c:	2392      	movs	r3, #146	; 0x92
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	18fb      	adds	r3, r7, r3
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	3304      	adds	r3, #4
 8003a78:	2243      	movs	r2, #67	; 0x43
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f004 fd53 	bl	8008528 <memset>
	uint8_t msg0[32] = "\n\rFUll NMEA String: ";
 8003a82:	238a      	movs	r3, #138	; 0x8a
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	18f9      	adds	r1, r7, r3
 8003a88:	4af5      	ldr	r2, [pc, #980]	; (8003e60 <main+0x3fc>)
 8003a8a:	000b      	movs	r3, r1
 8003a8c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003a8e:	c331      	stmia	r3!, {r0, r4, r5}
 8003a90:	ca11      	ldmia	r2!, {r0, r4}
 8003a92:	c311      	stmia	r3!, {r0, r4}
 8003a94:	7812      	ldrb	r2, [r2, #0]
 8003a96:	701a      	strb	r2, [r3, #0]
 8003a98:	2315      	movs	r3, #21
 8003a9a:	18cb      	adds	r3, r1, r3
 8003a9c:	220b      	movs	r2, #11
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f004 fd41 	bl	8008528 <memset>
	uint8_t msg1[32] = "\n\rLongitude: ";
 8003aa6:	2382      	movs	r3, #130	; 0x82
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	18f9      	adds	r1, r7, r3
 8003aac:	4aed      	ldr	r2, [pc, #948]	; (8003e64 <main+0x400>)
 8003aae:	000b      	movs	r3, r1
 8003ab0:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003ab2:	c331      	stmia	r3!, {r0, r4, r5}
 8003ab4:	8812      	ldrh	r2, [r2, #0]
 8003ab6:	801a      	strh	r2, [r3, #0]
 8003ab8:	230e      	movs	r3, #14
 8003aba:	18cb      	adds	r3, r1, r3
 8003abc:	2212      	movs	r2, #18
 8003abe:	2100      	movs	r1, #0
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f004 fd31 	bl	8008528 <memset>
	uint8_t msg2[32] = "\n\rLatitude: ";
 8003ac6:	23f4      	movs	r3, #244	; 0xf4
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	18f9      	adds	r1, r7, r3
 8003acc:	4ae6      	ldr	r2, [pc, #920]	; (8003e68 <main+0x404>)
 8003ace:	000b      	movs	r3, r1
 8003ad0:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003ad2:	c331      	stmia	r3!, {r0, r4, r5}
 8003ad4:	7812      	ldrb	r2, [r2, #0]
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	230d      	movs	r3, #13
 8003ada:	18cb      	adds	r3, r1, r3
 8003adc:	2213      	movs	r2, #19
 8003ade:	2100      	movs	r1, #0
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f004 fd21 	bl	8008528 <memset>
	uint8_t command[45] = "PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"; //For GGA and RMC information only
 8003ae6:	25dc      	movs	r5, #220	; 0xdc
 8003ae8:	006d      	lsls	r5, r5, #1
 8003aea:	197b      	adds	r3, r7, r5
 8003aec:	4adf      	ldr	r2, [pc, #892]	; (8003e6c <main+0x408>)
 8003aee:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003af0:	c313      	stmia	r3!, {r0, r1, r4}
 8003af2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003af4:	c313      	stmia	r3!, {r0, r1, r4}
 8003af6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003af8:	c313      	stmia	r3!, {r0, r1, r4}
 8003afa:	ca03      	ldmia	r2!, {r0, r1}
 8003afc:	c303      	stmia	r3!, {r0, r1}
 8003afe:	7812      	ldrb	r2, [r2, #0]
 8003b00:	701a      	strb	r2, [r3, #0]
	float BMP_TempC, BMP_Alt, BMP_Pressure;
	char BMP180_PressBuffer[50];
	char BMP180_AltBuffer[50];
	char BMP180_TempBuffer[50];
	//-------------------------------------DHT22
	float DHT_TempC = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	2286      	movs	r2, #134	; 0x86
 8003b06:	0052      	lsls	r2, r2, #1
 8003b08:	18ba      	adds	r2, r7, r2
 8003b0a:	6013      	str	r3, [r2, #0]
	float DHT_Hum = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2284      	movs	r2, #132	; 0x84
 8003b10:	0052      	lsls	r2, r2, #1
 8003b12:	18ba      	adds	r2, r7, r2
 8003b14:	6013      	str	r3, [r2, #0]
	uint8_t thp[] = {0, 0, 0, 0, 0};			//t1, t2, h1, h2, p
 8003b16:	4bd6      	ldr	r3, [pc, #856]	; (8003e70 <main+0x40c>)
 8003b18:	20a6      	movs	r0, #166	; 0xa6
 8003b1a:	0080      	lsls	r0, r0, #2
 8003b1c:	181b      	adds	r3, r3, r0
 8003b1e:	19db      	adds	r3, r3, r7
 8003b20:	4ad4      	ldr	r2, [pc, #848]	; (8003e74 <main+0x410>)
 8003b22:	6811      	ldr	r1, [r2, #0]
 8003b24:	6019      	str	r1, [r3, #0]
 8003b26:	7912      	ldrb	r2, [r2, #4]
 8003b28:	711a      	strb	r2, [r3, #4]
	uint16_t temphumsum[] = {0, 0, 0};			//temp, hum, sum
 8003b2a:	4bd3      	ldr	r3, [pc, #844]	; (8003e78 <main+0x414>)
 8003b2c:	0001      	movs	r1, r0
 8003b2e:	185b      	adds	r3, r3, r1
 8003b30:	19db      	adds	r3, r3, r7
 8003b32:	2200      	movs	r2, #0
 8003b34:	801a      	strh	r2, [r3, #0]
 8003b36:	4bd0      	ldr	r3, [pc, #832]	; (8003e78 <main+0x414>)
 8003b38:	185b      	adds	r3, r3, r1
 8003b3a:	19db      	adds	r3, r3, r7
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	805a      	strh	r2, [r3, #2]
 8003b40:	4bcd      	ldr	r3, [pc, #820]	; (8003e78 <main+0x414>)
 8003b42:	185b      	adds	r3, r3, r1
 8003b44:	19db      	adds	r3, r3, r7
 8003b46:	2200      	movs	r2, #0
 8003b48:	809a      	strh	r2, [r3, #4]
	char DHT22_TempBuffer[50];
	char DHT22_HumBuffer[50];
	//-------------------------------------DS18B20
	uint8_t DS18B20_tempArr[] = {0, 0};
 8003b4a:	4bcc      	ldr	r3, [pc, #816]	; (8003e7c <main+0x418>)
 8003b4c:	185b      	adds	r3, r3, r1
 8003b4e:	19db      	adds	r3, r3, r7
 8003b50:	2200      	movs	r2, #0
 8003b52:	801a      	strh	r2, [r3, #0]
	uint16_t DS18B20_T;
	float internalTemp = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	2284      	movs	r2, #132	; 0x84
 8003b58:	18ba      	adds	r2, r7, r2
 8003b5a:	6013      	str	r3, [r2, #0]
	char DS18B20_TempBuffer[50];
	//-------------------------------------LDR
	uint16_t light = 0;
 8003b5c:	4bc8      	ldr	r3, [pc, #800]	; (8003e80 <main+0x41c>)
 8003b5e:	185b      	adds	r3, r3, r1
 8003b60:	19db      	adds	r3, r3, r7
 8003b62:	2200      	movs	r2, #0
 8003b64:	801a      	strh	r2, [r3, #0]
	float voltage;
	//char voltBuffer[50];
	ADC_ChannelConfTypeDef sConfig = {0};
 8003b66:	4bc7      	ldr	r3, [pc, #796]	; (8003e84 <main+0x420>)
 8003b68:	000c      	movs	r4, r1
 8003b6a:	185b      	adds	r3, r3, r1
 8003b6c:	19db      	adds	r3, r3, r7
 8003b6e:	0018      	movs	r0, r3
 8003b70:	2308      	movs	r3, #8
 8003b72:	001a      	movs	r2, r3
 8003b74:	2100      	movs	r1, #0
 8003b76:	f004 fcd7 	bl	8008528 <memset>
	sConfig.Channel = ADC_CHANNEL_0;
 8003b7a:	4bc2      	ldr	r3, [pc, #776]	; (8003e84 <main+0x420>)
 8003b7c:	191b      	adds	r3, r3, r4
 8003b7e:	19db      	adds	r3, r3, r7
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8003b84:	4bbf      	ldr	r3, [pc, #764]	; (8003e84 <main+0x420>)
 8003b86:	191b      	adds	r3, r3, r4
 8003b88:	19db      	adds	r3, r3, r7
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	605a      	str	r2, [r3, #4]
	//-------------------------------------moisture
	uint16_t  moisture = 0;
 8003b8e:	4bbe      	ldr	r3, [pc, #760]	; (8003e88 <main+0x424>)
 8003b90:	191b      	adds	r3, r3, r4
 8003b92:	19db      	adds	r3, r3, r7
 8003b94:	2200      	movs	r2, #0
 8003b96:	801a      	strh	r2, [r3, #0]
	char moistbuffer[50];
	ADC_ChannelConfTypeDef sConfig2 = {13};
 8003b98:	4bbc      	ldr	r3, [pc, #752]	; (8003e8c <main+0x428>)
 8003b9a:	191b      	adds	r3, r3, r4
 8003b9c:	19db      	adds	r3, r3, r7
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	001a      	movs	r2, r3
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	f004 fcbf 	bl	8008528 <memset>
 8003baa:	4bb8      	ldr	r3, [pc, #736]	; (8003e8c <main+0x428>)
 8003bac:	191b      	adds	r3, r3, r4
 8003bae:	19db      	adds	r3, r3, r7
 8003bb0:	220d      	movs	r2, #13
 8003bb2:	601a      	str	r2, [r3, #0]
	sConfig2.Channel = ADC_CHANNEL_13;
 8003bb4:	4bb5      	ldr	r3, [pc, #724]	; (8003e8c <main+0x428>)
 8003bb6:	191b      	adds	r3, r3, r4
 8003bb8:	19db      	adds	r3, r3, r7
 8003bba:	4ab5      	ldr	r2, [pc, #724]	; (8003e90 <main+0x42c>)
 8003bbc:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003bbe:	f000 ffdd 	bl	8004b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
	SystemClock_Config();
 8003bc2:	f000 f9cb 	bl	8003f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_TIM2_Init();
 8003bc6:	f000 faf1 	bl	80041ac <MX_TIM2_Init>
	MX_GPIO_Init();
 8003bca:	f000 fba3 	bl	8004314 <MX_GPIO_Init>
	MX_I2C1_Init();
 8003bce:	f000 faad 	bl	800412c <MX_I2C1_Init>
	MX_ADC_Init();
 8003bd2:	f000 fa39 	bl	8004048 <MX_ADC_Init>
	MX_USART1_UART_Init();
 8003bd6:	f000 fb3d 	bl	8004254 <MX_USART1_UART_Init>
	MX_USART4_UART_Init();
 8003bda:	f000 fb6b 	bl	80042b4 <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8003bde:	4bad      	ldr	r3, [pc, #692]	; (8003e94 <main+0x430>)
 8003be0:	0018      	movs	r0, r3
 8003be2:	f003 fbb9 	bl	8007358 <HAL_TIM_Base_Start>
	dataCalibration();
 8003be6:	f7ff f8e3 	bl	8002db0 <dataCalibration>
  	HAL_UART_Transmit(&huart1, command, 45, 4000);
 8003bea:	23fa      	movs	r3, #250	; 0xfa
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1979      	adds	r1, r7, r5
 8003bf0:	48a9      	ldr	r0, [pc, #676]	; (8003e98 <main+0x434>)
 8003bf2:	222d      	movs	r2, #45	; 0x2d
 8003bf4:	f003 fe78 	bl	80078e8 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //---------------------------------------GPS
	  strcpy((char*)buf, "");
 8003bf8:	2492      	movs	r4, #146	; 0x92
 8003bfa:	00a4      	lsls	r4, r4, #2
 8003bfc:	193b      	adds	r3, r7, r4
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive(&huart1, buf, 71, 4000);
 8003c02:	23fa      	movs	r3, #250	; 0xfa
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	1939      	adds	r1, r7, r4
 8003c08:	48a3      	ldr	r0, [pc, #652]	; (8003e98 <main+0x434>)
 8003c0a:	2247      	movs	r2, #71	; 0x47
 8003c0c:	f003 ff14 	bl	8007a38 <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart1, msg0, 32, 1000);
 8003c10:	23fa      	movs	r3, #250	; 0xfa
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	228a      	movs	r2, #138	; 0x8a
 8003c16:	0092      	lsls	r2, r2, #2
 8003c18:	18b9      	adds	r1, r7, r2
 8003c1a:	489f      	ldr	r0, [pc, #636]	; (8003e98 <main+0x434>)
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f003 fe63 	bl	80078e8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, buf, 71, 4000);
 8003c22:	23fa      	movs	r3, #250	; 0xfa
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	1939      	adds	r1, r7, r4
 8003c28:	489b      	ldr	r0, [pc, #620]	; (8003e98 <main+0x434>)
 8003c2a:	2247      	movs	r2, #71	; 0x47
 8003c2c:	f003 fe5c 	bl	80078e8 <HAL_UART_Transmit>

	  char* LongT = (char*) buf;
 8003c30:	0022      	movs	r2, r4
 8003c32:	193b      	adds	r3, r7, r4
 8003c34:	24a5      	movs	r4, #165	; 0xa5
 8003c36:	00a4      	lsls	r4, r4, #2
 8003c38:	1939      	adds	r1, r7, r4
 8003c3a:	600b      	str	r3, [r1, #0]
	  LongT = LongT + 18;
 8003c3c:	193b      	adds	r3, r7, r4
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3312      	adds	r3, #18
 8003c42:	1939      	adds	r1, r7, r4
 8003c44:	600b      	str	r3, [r1, #0]
	  char* LatT = (char*) buf;
 8003c46:	18bb      	adds	r3, r7, r2
 8003c48:	25a4      	movs	r5, #164	; 0xa4
 8003c4a:	00ad      	lsls	r5, r5, #2
 8003c4c:	197a      	adds	r2, r7, r5
 8003c4e:	6013      	str	r3, [r2, #0]
	  LatT = LatT + 30;
 8003c50:	197b      	adds	r3, r7, r5
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	331e      	adds	r3, #30
 8003c56:	197a      	adds	r2, r7, r5
 8003c58:	6013      	str	r3, [r2, #0]

	  HAL_UART_Transmit(&huart1, msg1, 32, 1000);
 8003c5a:	23fa      	movs	r3, #250	; 0xfa
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	2282      	movs	r2, #130	; 0x82
 8003c60:	0092      	lsls	r2, r2, #2
 8003c62:	18b9      	adds	r1, r7, r2
 8003c64:	488c      	ldr	r0, [pc, #560]	; (8003e98 <main+0x434>)
 8003c66:	2220      	movs	r2, #32
 8003c68:	f003 fe3e 	bl	80078e8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, LongT, 11, 1000);
 8003c6c:	23fa      	movs	r3, #250	; 0xfa
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	193a      	adds	r2, r7, r4
 8003c72:	6811      	ldr	r1, [r2, #0]
 8003c74:	4888      	ldr	r0, [pc, #544]	; (8003e98 <main+0x434>)
 8003c76:	220b      	movs	r2, #11
 8003c78:	f003 fe36 	bl	80078e8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, msg2, 32, 1000);
 8003c7c:	23fa      	movs	r3, #250	; 0xfa
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	22f4      	movs	r2, #244	; 0xf4
 8003c82:	0052      	lsls	r2, r2, #1
 8003c84:	18b9      	adds	r1, r7, r2
 8003c86:	4884      	ldr	r0, [pc, #528]	; (8003e98 <main+0x434>)
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f003 fe2d 	bl	80078e8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, LatT, 12, 1000);
 8003c8e:	23fa      	movs	r3, #250	; 0xfa
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	197a      	adds	r2, r7, r5
 8003c94:	6811      	ldr	r1, [r2, #0]
 8003c96:	4880      	ldr	r0, [pc, #512]	; (8003e98 <main+0x434>)
 8003c98:	220c      	movs	r2, #12
 8003c9a:	f003 fe25 	bl	80078e8 <HAL_UART_Transmit>

	  //------------------------------------------------------------BMP180
	  get_BMP180Readings(&BMP_TempC, &BMP_Pressure, &BMP_Alt);
 8003c9e:	26d8      	movs	r6, #216	; 0xd8
 8003ca0:	0076      	lsls	r6, r6, #1
 8003ca2:	19ba      	adds	r2, r7, r6
 8003ca4:	25d6      	movs	r5, #214	; 0xd6
 8003ca6:	006d      	lsls	r5, r5, #1
 8003ca8:	1979      	adds	r1, r7, r5
 8003caa:	23da      	movs	r3, #218	; 0xda
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f000 fb7f 	bl	80043b4 <get_BMP180Readings>
	  //------------------------------------------------------------DHT22
	  get_DHT22Readings(&DHT_TempC, &DHT_Hum, thp, temphumsum);
 8003cb6:	22f8      	movs	r2, #248	; 0xf8
 8003cb8:	18bb      	adds	r3, r7, r2
 8003cba:	1c7a      	adds	r2, r7, #1
 8003cbc:	32ff      	adds	r2, #255	; 0xff
 8003cbe:	2184      	movs	r1, #132	; 0x84
 8003cc0:	0049      	lsls	r1, r1, #1
 8003cc2:	1879      	adds	r1, r7, r1
 8003cc4:	2086      	movs	r0, #134	; 0x86
 8003cc6:	0040      	lsls	r0, r0, #1
 8003cc8:	1838      	adds	r0, r7, r0
 8003cca:	f000 fb93 	bl	80043f4 <get_DHT22Readings>
	  //------------------------------------------------------------DS18B20
	  get_DS18B20Readings(&thp[4], DS18B20_tempArr, &DS18B20_T, &internalTemp);
 8003cce:	2284      	movs	r2, #132	; 0x84
 8003cd0:	18bc      	adds	r4, r7, r2
 8003cd2:	238a      	movs	r3, #138	; 0x8a
 8003cd4:	18fa      	adds	r2, r7, r3
 8003cd6:	238c      	movs	r3, #140	; 0x8c
 8003cd8:	18f9      	adds	r1, r7, r3
 8003cda:	1c7b      	adds	r3, r7, #1
 8003cdc:	33ff      	adds	r3, #255	; 0xff
 8003cde:	1d18      	adds	r0, r3, #4
 8003ce0:	0023      	movs	r3, r4
 8003ce2:	f000 fc1b 	bl	800451c <get_DS18B20Readings>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
	  light = HAL_ADC_GetValue(&hadc);
	  voltage = 3.3 * light;
	  voltage = voltage / 4095;*/

	  get_LDRReadings(&sConfig, &voltage, &light);
 8003ce6:	244e      	movs	r4, #78	; 0x4e
 8003ce8:	193a      	adds	r2, r7, r4
 8003cea:	2448      	movs	r4, #72	; 0x48
 8003cec:	1939      	adds	r1, r7, r4
 8003cee:	2440      	movs	r4, #64	; 0x40
 8003cf0:	193b      	adds	r3, r7, r4
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f000 fc84 	bl	8004600 <get_LDRReadings>
	  //-----------------------------------------------------------moisture
	  get_moistureReadings(&sConfig2, &moisture);
 8003cf8:	243e      	movs	r4, #62	; 0x3e
 8003cfa:	193a      	adds	r2, r7, r4
 8003cfc:	1d3b      	adds	r3, r7, #4
 8003cfe:	0011      	movs	r1, r2
 8003d00:	0018      	movs	r0, r3
 8003d02:	f000 fcc9 	bl	8004698 <get_moistureReadings>

	  //------------------------------------------------------------------float to string
	  sprintf(BMP180_PressBuffer, "%.1f", BMP_Pressure);
 8003d06:	197c      	adds	r4, r7, r5
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	1c18      	adds	r0, r3, #0
 8003d0c:	f7fe ff56 	bl	8002bbc <__aeabi_f2d>
 8003d10:	0002      	movs	r2, r0
 8003d12:	000b      	movs	r3, r1
 8003d14:	4961      	ldr	r1, [pc, #388]	; (8003e9c <main+0x438>)
 8003d16:	25bc      	movs	r5, #188	; 0xbc
 8003d18:	006d      	lsls	r5, r5, #1
 8003d1a:	1978      	adds	r0, r7, r5
 8003d1c:	f005 f87a 	bl	8008e14 <siprintf>
	  sprintf(BMP180_AltBuffer, "%.1f", BMP_Alt);
 8003d20:	19bc      	adds	r4, r7, r6
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	1c18      	adds	r0, r3, #0
 8003d26:	f7fe ff49 	bl	8002bbc <__aeabi_f2d>
 8003d2a:	0002      	movs	r2, r0
 8003d2c:	000b      	movs	r3, r1
 8003d2e:	495b      	ldr	r1, [pc, #364]	; (8003e9c <main+0x438>)
 8003d30:	26a2      	movs	r6, #162	; 0xa2
 8003d32:	0076      	lsls	r6, r6, #1
 8003d34:	19b8      	adds	r0, r7, r6
 8003d36:	f005 f86d 	bl	8008e14 <siprintf>
	  sprintf(BMP180_TempBuffer, "%.1f", BMP_TempC);
 8003d3a:	23da      	movs	r3, #218	; 0xda
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	1c18      	adds	r0, r3, #0
 8003d44:	f7fe ff3a 	bl	8002bbc <__aeabi_f2d>
 8003d48:	0002      	movs	r2, r0
 8003d4a:	000b      	movs	r3, r1
 8003d4c:	4953      	ldr	r1, [pc, #332]	; (8003e9c <main+0x438>)
 8003d4e:	2488      	movs	r4, #136	; 0x88
 8003d50:	0064      	lsls	r4, r4, #1
 8003d52:	1938      	adds	r0, r7, r4
 8003d54:	f005 f85e 	bl	8008e14 <siprintf>
	  sprintf(DHT22_TempBuffer, "%.1f", DHT_TempC);
 8003d58:	2086      	movs	r0, #134	; 0x86
 8003d5a:	0040      	lsls	r0, r0, #1
 8003d5c:	183b      	adds	r3, r7, r0
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	1c18      	adds	r0, r3, #0
 8003d62:	f7fe ff2b 	bl	8002bbc <__aeabi_f2d>
 8003d66:	0002      	movs	r2, r0
 8003d68:	000b      	movs	r3, r1
 8003d6a:	494c      	ldr	r1, [pc, #304]	; (8003e9c <main+0x438>)
 8003d6c:	24c4      	movs	r4, #196	; 0xc4
 8003d6e:	1938      	adds	r0, r7, r4
 8003d70:	f005 f850 	bl	8008e14 <siprintf>
	  sprintf(DHT22_HumBuffer, "%.1f", DHT_Hum);
 8003d74:	2184      	movs	r1, #132	; 0x84
 8003d76:	0049      	lsls	r1, r1, #1
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	1c18      	adds	r0, r3, #0
 8003d7e:	f7fe ff1d 	bl	8002bbc <__aeabi_f2d>
 8003d82:	0002      	movs	r2, r0
 8003d84:	000b      	movs	r3, r1
 8003d86:	4945      	ldr	r1, [pc, #276]	; (8003e9c <main+0x438>)
 8003d88:	2090      	movs	r0, #144	; 0x90
 8003d8a:	1838      	adds	r0, r7, r0
 8003d8c:	f005 f842 	bl	8008e14 <siprintf>
	  sprintf(DS18B20_TempBuffer, "%.1f", internalTemp);
 8003d90:	2284      	movs	r2, #132	; 0x84
 8003d92:	18bb      	adds	r3, r7, r2
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	1c18      	adds	r0, r3, #0
 8003d98:	f7fe ff10 	bl	8002bbc <__aeabi_f2d>
 8003d9c:	0002      	movs	r2, r0
 8003d9e:	000b      	movs	r3, r1
 8003da0:	493e      	ldr	r1, [pc, #248]	; (8003e9c <main+0x438>)
 8003da2:	2050      	movs	r0, #80	; 0x50
 8003da4:	1838      	adds	r0, r7, r0
 8003da6:	f005 f835 	bl	8008e14 <siprintf>
	  sprintf(moistbuffer, "%hu\r\n", moisture);
 8003daa:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <main+0x424>)
 8003dac:	22a6      	movs	r2, #166	; 0xa6
 8003dae:	0092      	lsls	r2, r2, #2
 8003db0:	189b      	adds	r3, r3, r2
 8003db2:	19db      	adds	r3, r3, r7
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	001a      	movs	r2, r3
 8003db8:	4939      	ldr	r1, [pc, #228]	; (8003ea0 <main+0x43c>)
 8003dba:	230c      	movs	r3, #12
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f005 f828 	bl	8008e14 <siprintf>
	  //BMP180 - pres -> P
	  //Moisture -> M
	  //close -> #

	  //-----------------------------------------------------------------------------message frame - head
	  HAL_UART_Transmit(&huart4, (uint8_t*)"@", strlen("@"), HAL_MAX_DELAY);
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	425b      	negs	r3, r3
 8003dc8:	4936      	ldr	r1, [pc, #216]	; (8003ea4 <main+0x440>)
 8003dca:	4837      	ldr	r0, [pc, #220]	; (8003ea8 <main+0x444>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f003 fd8b 	bl	80078e8 <HAL_UART_Transmit>
	  //-------------------------------------------------------------------------------------hardcoded ID
	  HAL_UART_Transmit(&huart4, (uint8_t*)"N1", strlen("@"), HAL_MAX_DELAY);
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	425b      	negs	r3, r3
 8003dd6:	4935      	ldr	r1, [pc, #212]	; (8003eac <main+0x448>)
 8003dd8:	4833      	ldr	r0, [pc, #204]	; (8003ea8 <main+0x444>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f003 fd84 	bl	80078e8 <HAL_UART_Transmit>
	  //--------------------------------------------------------------------------------------------DHT22
	  //------------------------------------------------------------------------------temp
	  HAL_UART_Transmit(&huart4, (uint8_t*)DHT22_TempBuffer, strlen(DHT22_TempBuffer), HAL_MAX_DELAY);
 8003de0:	193b      	adds	r3, r7, r4
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7fc f990 	bl	8000108 <strlen>
 8003de8:	0003      	movs	r3, r0
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	2301      	movs	r3, #1
 8003dee:	425b      	negs	r3, r3
 8003df0:	1939      	adds	r1, r7, r4
 8003df2:	482d      	ldr	r0, [pc, #180]	; (8003ea8 <main+0x444>)
 8003df4:	f003 fd78 	bl	80078e8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t*)"T", strlen("T"), HAL_MAX_DELAY);
 8003df8:	2301      	movs	r3, #1
 8003dfa:	425b      	negs	r3, r3
 8003dfc:	492c      	ldr	r1, [pc, #176]	; (8003eb0 <main+0x44c>)
 8003dfe:	482a      	ldr	r0, [pc, #168]	; (8003ea8 <main+0x444>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	f003 fd71 	bl	80078e8 <HAL_UART_Transmit>
	  //-----------------------------------------------------------------------------humidity
	  HAL_UART_Transmit(&huart4, (uint8_t*)DHT22_HumBuffer, strlen(DHT22_HumBuffer), HAL_MAX_DELAY);
 8003e06:	2090      	movs	r0, #144	; 0x90
 8003e08:	183b      	adds	r3, r7, r0
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f7fc f97c 	bl	8000108 <strlen>
 8003e10:	0003      	movs	r3, r0
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	2301      	movs	r3, #1
 8003e16:	425b      	negs	r3, r3
 8003e18:	2090      	movs	r0, #144	; 0x90
 8003e1a:	1839      	adds	r1, r7, r0
 8003e1c:	4822      	ldr	r0, [pc, #136]	; (8003ea8 <main+0x444>)
 8003e1e:	f003 fd63 	bl	80078e8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t*)"H", strlen("H"), HAL_MAX_DELAY);
 8003e22:	2301      	movs	r3, #1
 8003e24:	425b      	negs	r3, r3
 8003e26:	4923      	ldr	r1, [pc, #140]	; (8003eb4 <main+0x450>)
 8003e28:	481f      	ldr	r0, [pc, #124]	; (8003ea8 <main+0x444>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f003 fd5c 	bl	80078e8 <HAL_UART_Transmit>
	  //------------------------------------------------------------------------------------------DS18B20
	  HAL_UART_Transmit(&huart4, (uint8_t*)DS18B20_TempBuffer, strlen(DHT22_TempBuffer), HAL_MAX_DELAY);
 8003e30:	193b      	adds	r3, r7, r4
 8003e32:	0018      	movs	r0, r3
 8003e34:	f7fc f968 	bl	8000108 <strlen>
 8003e38:	0003      	movs	r3, r0
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	425b      	negs	r3, r3
 8003e40:	2050      	movs	r0, #80	; 0x50
 8003e42:	1839      	adds	r1, r7, r0
 8003e44:	4818      	ldr	r0, [pc, #96]	; (8003ea8 <main+0x444>)
 8003e46:	f003 fd4f 	bl	80078e8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t*)"S", strlen("S"), HAL_MAX_DELAY);
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	425b      	negs	r3, r3
 8003e4e:	491a      	ldr	r1, [pc, #104]	; (8003eb8 <main+0x454>)
 8003e50:	4815      	ldr	r0, [pc, #84]	; (8003ea8 <main+0x444>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	f003 fd48 	bl	80078e8 <HAL_UART_Transmit>
	  //------------------------------------------------------------------------------------------BMP180
	  //-----------------------------------------altitude
	  HAL_UART_Transmit(&huart4, (uint8_t*)BMP180_AltBuffer, strlen(BMP180_AltBuffer), HAL_MAX_DELAY);
 8003e58:	19bb      	adds	r3, r7, r6
 8003e5a:	e02f      	b.n	8003ebc <main+0x458>
 8003e5c:	fffffd64 	.word	0xfffffd64
 8003e60:	0800c278 	.word	0x0800c278
 8003e64:	0800c298 	.word	0x0800c298
 8003e68:	0800c2b8 	.word	0x0800c2b8
 8003e6c:	0800c2d8 	.word	0x0800c2d8
 8003e70:	fffffe68 	.word	0xfffffe68
 8003e74:	0800c308 	.word	0x0800c308
 8003e78:	fffffe60 	.word	0xfffffe60
 8003e7c:	fffffdf4 	.word	0xfffffdf4
 8003e80:	fffffdb6 	.word	0xfffffdb6
 8003e84:	fffffda8 	.word	0xfffffda8
 8003e88:	fffffda6 	.word	0xfffffda6
 8003e8c:	fffffd6c 	.word	0xfffffd6c
 8003e90:	34002000 	.word	0x34002000
 8003e94:	200002ec 	.word	0x200002ec
 8003e98:	2000032c 	.word	0x2000032c
 8003e9c:	0800c244 	.word	0x0800c244
 8003ea0:	0800c24c 	.word	0x0800c24c
 8003ea4:	0800c254 	.word	0x0800c254
 8003ea8:	200003b0 	.word	0x200003b0
 8003eac:	0800c258 	.word	0x0800c258
 8003eb0:	0800c25c 	.word	0x0800c25c
 8003eb4:	0800c260 	.word	0x0800c260
 8003eb8:	0800c264 	.word	0x0800c264
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f7fc f923 	bl	8000108 <strlen>
 8003ec2:	0003      	movs	r3, r0
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	425b      	negs	r3, r3
 8003eca:	19b9      	adds	r1, r7, r6
 8003ecc:	481e      	ldr	r0, [pc, #120]	; (8003f48 <main+0x4e4>)
 8003ece:	f003 fd0b 	bl	80078e8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t*)"A", strlen("A"), HAL_MAX_DELAY);
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	425b      	negs	r3, r3
 8003ed6:	491d      	ldr	r1, [pc, #116]	; (8003f4c <main+0x4e8>)
 8003ed8:	481b      	ldr	r0, [pc, #108]	; (8003f48 <main+0x4e4>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	f003 fd04 	bl	80078e8 <HAL_UART_Transmit>
	  //-----------------------------------------pressure
	  HAL_UART_Transmit(&huart4, (uint8_t*)BMP180_PressBuffer, strlen(BMP180_PressBuffer), HAL_MAX_DELAY);
 8003ee0:	197b      	adds	r3, r7, r5
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f7fc f910 	bl	8000108 <strlen>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	2301      	movs	r3, #1
 8003eee:	425b      	negs	r3, r3
 8003ef0:	1979      	adds	r1, r7, r5
 8003ef2:	4815      	ldr	r0, [pc, #84]	; (8003f48 <main+0x4e4>)
 8003ef4:	f003 fcf8 	bl	80078e8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t*)"P", strlen("P"), HAL_MAX_DELAY);
 8003ef8:	2301      	movs	r3, #1
 8003efa:	425b      	negs	r3, r3
 8003efc:	4914      	ldr	r1, [pc, #80]	; (8003f50 <main+0x4ec>)
 8003efe:	4812      	ldr	r0, [pc, #72]	; (8003f48 <main+0x4e4>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	f003 fcf1 	bl	80078e8 <HAL_UART_Transmit>
	  //------------------------------------------------------------------------------------------moisture
	  HAL_UART_Transmit(&huart4, (uint8_t*)moistbuffer, strlen(moistbuffer), HAL_MAX_DELAY);
 8003f06:	240c      	movs	r4, #12
 8003f08:	193b      	adds	r3, r7, r4
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f7fc f8fc 	bl	8000108 <strlen>
 8003f10:	0003      	movs	r3, r0
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	2301      	movs	r3, #1
 8003f16:	425b      	negs	r3, r3
 8003f18:	1939      	adds	r1, r7, r4
 8003f1a:	480b      	ldr	r0, [pc, #44]	; (8003f48 <main+0x4e4>)
 8003f1c:	f003 fce4 	bl	80078e8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t*)"M", strlen("M"), HAL_MAX_DELAY);
 8003f20:	2301      	movs	r3, #1
 8003f22:	425b      	negs	r3, r3
 8003f24:	490b      	ldr	r1, [pc, #44]	; (8003f54 <main+0x4f0>)
 8003f26:	4808      	ldr	r0, [pc, #32]	; (8003f48 <main+0x4e4>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f003 fcdd 	bl	80078e8 <HAL_UART_Transmit>
	  //-------------------------------------------------------------------------------message frame - tail
	  HAL_UART_Transmit(&huart4, (uint8_t*)"#", strlen("#"), HAL_MAX_DELAY);
 8003f2e:	2301      	movs	r3, #1
 8003f30:	425b      	negs	r3, r3
 8003f32:	4909      	ldr	r1, [pc, #36]	; (8003f58 <main+0x4f4>)
 8003f34:	4804      	ldr	r0, [pc, #16]	; (8003f48 <main+0x4e4>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	f003 fcd6 	bl	80078e8 <HAL_UART_Transmit>


	  HAL_Delay(500);
 8003f3c:	23fa      	movs	r3, #250	; 0xfa
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	0018      	movs	r0, r3
 8003f42:	f000 fe8b 	bl	8004c5c <HAL_Delay>
  {
 8003f46:	e657      	b.n	8003bf8 <main+0x194>
 8003f48:	200003b0 	.word	0x200003b0
 8003f4c:	0800c268 	.word	0x0800c268
 8003f50:	0800c26c 	.word	0x0800c26c
 8003f54:	0800c270 	.word	0x0800c270
 8003f58:	0800c274 	.word	0x0800c274

08003f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f5c:	b590      	push	{r4, r7, lr}
 8003f5e:	b09d      	sub	sp, #116	; 0x74
 8003f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f62:	2438      	movs	r4, #56	; 0x38
 8003f64:	193b      	adds	r3, r7, r4
 8003f66:	0018      	movs	r0, r3
 8003f68:	2338      	movs	r3, #56	; 0x38
 8003f6a:	001a      	movs	r2, r3
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	f004 fadb 	bl	8008528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f72:	2324      	movs	r3, #36	; 0x24
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	0018      	movs	r0, r3
 8003f78:	2314      	movs	r3, #20
 8003f7a:	001a      	movs	r2, r3
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	f004 fad3 	bl	8008528 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f82:	003b      	movs	r3, r7
 8003f84:	0018      	movs	r0, r3
 8003f86:	2324      	movs	r3, #36	; 0x24
 8003f88:	001a      	movs	r2, r3
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	f004 facc 	bl	8008528 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f90:	4b2b      	ldr	r3, [pc, #172]	; (8004040 <SystemClock_Config+0xe4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a2b      	ldr	r2, [pc, #172]	; (8004044 <SystemClock_Config+0xe8>)
 8003f96:	401a      	ands	r2, r3
 8003f98:	4b29      	ldr	r3, [pc, #164]	; (8004040 <SystemClock_Config+0xe4>)
 8003f9a:	2180      	movs	r1, #128	; 0x80
 8003f9c:	0109      	lsls	r1, r1, #4
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003fa2:	0021      	movs	r1, r4
 8003fa4:	187b      	adds	r3, r7, r1
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003faa:	187b      	adds	r3, r7, r1
 8003fac:	2201      	movs	r2, #1
 8003fae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003fb0:	187b      	adds	r3, r7, r1
 8003fb2:	2210      	movs	r2, #16
 8003fb4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fb6:	187b      	adds	r3, r7, r1
 8003fb8:	2202      	movs	r2, #2
 8003fba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003fbc:	187b      	adds	r3, r7, r1
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003fc2:	187b      	adds	r3, r7, r1
 8003fc4:	2280      	movs	r2, #128	; 0x80
 8003fc6:	02d2      	lsls	r2, r2, #11
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003fca:	187b      	adds	r3, r7, r1
 8003fcc:	2280      	movs	r2, #128	; 0x80
 8003fce:	03d2      	lsls	r2, r2, #15
 8003fd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fd2:	187b      	adds	r3, r7, r1
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f002 fa31 	bl	800643c <HAL_RCC_OscConfig>
 8003fda:	1e03      	subs	r3, r0, #0
 8003fdc:	d001      	beq.n	8003fe2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003fde:	f000 fb83 	bl	80046e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fe2:	2124      	movs	r1, #36	; 0x24
 8003fe4:	187b      	adds	r3, r7, r1
 8003fe6:	220f      	movs	r2, #15
 8003fe8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fea:	187b      	adds	r3, r7, r1
 8003fec:	2203      	movs	r2, #3
 8003fee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ff0:	187b      	adds	r3, r7, r1
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ff6:	187b      	adds	r3, r7, r1
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ffc:	187b      	adds	r3, r7, r1
 8003ffe:	2200      	movs	r2, #0
 8004000:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004002:	187b      	adds	r3, r7, r1
 8004004:	2101      	movs	r1, #1
 8004006:	0018      	movs	r0, r3
 8004008:	f002 fdec 	bl	8006be4 <HAL_RCC_ClockConfig>
 800400c:	1e03      	subs	r3, r0, #0
 800400e:	d001      	beq.n	8004014 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8004010:	f000 fb6a 	bl	80046e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8004014:	003b      	movs	r3, r7
 8004016:	2209      	movs	r2, #9
 8004018:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800401a:	003b      	movs	r3, r7
 800401c:	2200      	movs	r2, #0
 800401e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004020:	003b      	movs	r3, r7
 8004022:	2200      	movs	r2, #0
 8004024:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004026:	003b      	movs	r3, r7
 8004028:	0018      	movs	r0, r3
 800402a:	f002 ffff 	bl	800702c <HAL_RCCEx_PeriphCLKConfig>
 800402e:	1e03      	subs	r3, r0, #0
 8004030:	d001      	beq.n	8004036 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8004032:	f000 fb59 	bl	80046e8 <Error_Handler>
  }
}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	46bd      	mov	sp, r7
 800403a:	b01d      	add	sp, #116	; 0x74
 800403c:	bd90      	pop	{r4, r7, pc}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	40007000 	.word	0x40007000
 8004044:	ffffe7ff 	.word	0xffffe7ff

08004048 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800404e:	003b      	movs	r3, r7
 8004050:	0018      	movs	r0, r3
 8004052:	2308      	movs	r3, #8
 8004054:	001a      	movs	r2, r3
 8004056:	2100      	movs	r1, #0
 8004058:	f004 fa66 	bl	8008528 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800405c:	4b30      	ldr	r3, [pc, #192]	; (8004120 <MX_ADC_Init+0xd8>)
 800405e:	4a31      	ldr	r2, [pc, #196]	; (8004124 <MX_ADC_Init+0xdc>)
 8004060:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8004062:	4b2f      	ldr	r3, [pc, #188]	; (8004120 <MX_ADC_Init+0xd8>)
 8004064:	2200      	movs	r2, #0
 8004066:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004068:	4b2d      	ldr	r3, [pc, #180]	; (8004120 <MX_ADC_Init+0xd8>)
 800406a:	2280      	movs	r2, #128	; 0x80
 800406c:	05d2      	lsls	r2, r2, #23
 800406e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004070:	4b2b      	ldr	r3, [pc, #172]	; (8004120 <MX_ADC_Init+0xd8>)
 8004072:	2200      	movs	r2, #0
 8004074:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004076:	4b2a      	ldr	r3, [pc, #168]	; (8004120 <MX_ADC_Init+0xd8>)
 8004078:	2200      	movs	r2, #0
 800407a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800407c:	4b28      	ldr	r3, [pc, #160]	; (8004120 <MX_ADC_Init+0xd8>)
 800407e:	2201      	movs	r2, #1
 8004080:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004082:	4b27      	ldr	r3, [pc, #156]	; (8004120 <MX_ADC_Init+0xd8>)
 8004084:	2200      	movs	r2, #0
 8004086:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004088:	4b25      	ldr	r3, [pc, #148]	; (8004120 <MX_ADC_Init+0xd8>)
 800408a:	2220      	movs	r2, #32
 800408c:	2100      	movs	r1, #0
 800408e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004090:	4b23      	ldr	r3, [pc, #140]	; (8004120 <MX_ADC_Init+0xd8>)
 8004092:	2221      	movs	r2, #33	; 0x21
 8004094:	2100      	movs	r1, #0
 8004096:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004098:	4b21      	ldr	r3, [pc, #132]	; (8004120 <MX_ADC_Init+0xd8>)
 800409a:	2200      	movs	r2, #0
 800409c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800409e:	4b20      	ldr	r3, [pc, #128]	; (8004120 <MX_ADC_Init+0xd8>)
 80040a0:	22c2      	movs	r2, #194	; 0xc2
 80040a2:	32ff      	adds	r2, #255	; 0xff
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80040a6:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <MX_ADC_Init+0xd8>)
 80040a8:	222c      	movs	r2, #44	; 0x2c
 80040aa:	2100      	movs	r1, #0
 80040ac:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040ae:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <MX_ADC_Init+0xd8>)
 80040b0:	2204      	movs	r2, #4
 80040b2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80040b4:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <MX_ADC_Init+0xd8>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80040ba:	4b19      	ldr	r3, [pc, #100]	; (8004120 <MX_ADC_Init+0xd8>)
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80040c0:	4b17      	ldr	r3, [pc, #92]	; (8004120 <MX_ADC_Init+0xd8>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80040c6:	4b16      	ldr	r3, [pc, #88]	; (8004120 <MX_ADC_Init+0xd8>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80040cc:	4b14      	ldr	r3, [pc, #80]	; (8004120 <MX_ADC_Init+0xd8>)
 80040ce:	0018      	movs	r0, r3
 80040d0:	f000 fde8 	bl	8004ca4 <HAL_ADC_Init>
 80040d4:	1e03      	subs	r3, r0, #0
 80040d6:	d001      	beq.n	80040dc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80040d8:	f000 fb06 	bl	80046e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80040dc:	003b      	movs	r3, r7
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80040e2:	003b      	movs	r3, r7
 80040e4:	2280      	movs	r2, #128	; 0x80
 80040e6:	0152      	lsls	r2, r2, #5
 80040e8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80040ea:	003a      	movs	r2, r7
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <MX_ADC_Init+0xd8>)
 80040ee:	0011      	movs	r1, r2
 80040f0:	0018      	movs	r0, r3
 80040f2:	f001 f847 	bl	8005184 <HAL_ADC_ConfigChannel>
 80040f6:	1e03      	subs	r3, r0, #0
 80040f8:	d001      	beq.n	80040fe <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80040fa:	f000 faf5 	bl	80046e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80040fe:	003b      	movs	r3, r7
 8004100:	4a09      	ldr	r2, [pc, #36]	; (8004128 <MX_ADC_Init+0xe0>)
 8004102:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004104:	003a      	movs	r2, r7
 8004106:	4b06      	ldr	r3, [pc, #24]	; (8004120 <MX_ADC_Init+0xd8>)
 8004108:	0011      	movs	r1, r2
 800410a:	0018      	movs	r0, r3
 800410c:	f001 f83a 	bl	8005184 <HAL_ADC_ConfigChannel>
 8004110:	1e03      	subs	r3, r0, #0
 8004112:	d001      	beq.n	8004118 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8004114:	f000 fae8 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004118:	46c0      	nop			; (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	b002      	add	sp, #8
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20000244 	.word	0x20000244
 8004124:	40012400 	.word	0x40012400
 8004128:	34002000 	.word	0x34002000

0800412c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004130:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <MX_I2C1_Init+0x74>)
 8004132:	4a1c      	ldr	r2, [pc, #112]	; (80041a4 <MX_I2C1_Init+0x78>)
 8004134:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8004136:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <MX_I2C1_Init+0x74>)
 8004138:	4a1b      	ldr	r2, [pc, #108]	; (80041a8 <MX_I2C1_Init+0x7c>)
 800413a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800413c:	4b18      	ldr	r3, [pc, #96]	; (80041a0 <MX_I2C1_Init+0x74>)
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004142:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <MX_I2C1_Init+0x74>)
 8004144:	2201      	movs	r2, #1
 8004146:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004148:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <MX_I2C1_Init+0x74>)
 800414a:	2200      	movs	r2, #0
 800414c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800414e:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <MX_I2C1_Init+0x74>)
 8004150:	2200      	movs	r2, #0
 8004152:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004154:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <MX_I2C1_Init+0x74>)
 8004156:	2200      	movs	r2, #0
 8004158:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <MX_I2C1_Init+0x74>)
 800415c:	2200      	movs	r2, #0
 800415e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <MX_I2C1_Init+0x74>)
 8004162:	2200      	movs	r2, #0
 8004164:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004166:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <MX_I2C1_Init+0x74>)
 8004168:	0018      	movs	r0, r3
 800416a:	f001 fb85 	bl	8005878 <HAL_I2C_Init>
 800416e:	1e03      	subs	r3, r0, #0
 8004170:	d001      	beq.n	8004176 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004172:	f000 fab9 	bl	80046e8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <MX_I2C1_Init+0x74>)
 8004178:	2100      	movs	r1, #0
 800417a:	0018      	movs	r0, r3
 800417c:	f002 f8c6 	bl	800630c <HAL_I2CEx_ConfigAnalogFilter>
 8004180:	1e03      	subs	r3, r0, #0
 8004182:	d001      	beq.n	8004188 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004184:	f000 fab0 	bl	80046e8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <MX_I2C1_Init+0x74>)
 800418a:	2100      	movs	r1, #0
 800418c:	0018      	movs	r0, r3
 800418e:	f002 f909 	bl	80063a4 <HAL_I2CEx_ConfigDigitalFilter>
 8004192:	1e03      	subs	r3, r0, #0
 8004194:	d001      	beq.n	800419a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004196:	f000 faa7 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	200002a0 	.word	0x200002a0
 80041a4:	40005400 	.word	0x40005400
 80041a8:	00707cbb 	.word	0x00707cbb

080041ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041b2:	2308      	movs	r3, #8
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	0018      	movs	r0, r3
 80041b8:	2310      	movs	r3, #16
 80041ba:	001a      	movs	r2, r3
 80041bc:	2100      	movs	r1, #0
 80041be:	f004 f9b3 	bl	8008528 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041c2:	003b      	movs	r3, r7
 80041c4:	0018      	movs	r0, r3
 80041c6:	2308      	movs	r3, #8
 80041c8:	001a      	movs	r2, r3
 80041ca:	2100      	movs	r1, #0
 80041cc:	f004 f9ac 	bl	8008528 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041d0:	4b1e      	ldr	r3, [pc, #120]	; (800424c <MX_TIM2_Init+0xa0>)
 80041d2:	2280      	movs	r2, #128	; 0x80
 80041d4:	05d2      	lsls	r2, r2, #23
 80041d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24;
 80041d8:	4b1c      	ldr	r3, [pc, #112]	; (800424c <MX_TIM2_Init+0xa0>)
 80041da:	2218      	movs	r2, #24
 80041dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041de:	4b1b      	ldr	r3, [pc, #108]	; (800424c <MX_TIM2_Init+0xa0>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80041e4:	4b19      	ldr	r3, [pc, #100]	; (800424c <MX_TIM2_Init+0xa0>)
 80041e6:	4a1a      	ldr	r2, [pc, #104]	; (8004250 <MX_TIM2_Init+0xa4>)
 80041e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041ea:	4b18      	ldr	r3, [pc, #96]	; (800424c <MX_TIM2_Init+0xa0>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041f0:	4b16      	ldr	r3, [pc, #88]	; (800424c <MX_TIM2_Init+0xa0>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <MX_TIM2_Init+0xa0>)
 80041f8:	0018      	movs	r0, r3
 80041fa:	f003 f86d 	bl	80072d8 <HAL_TIM_Base_Init>
 80041fe:	1e03      	subs	r3, r0, #0
 8004200:	d001      	beq.n	8004206 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8004202:	f000 fa71 	bl	80046e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004206:	2108      	movs	r1, #8
 8004208:	187b      	adds	r3, r7, r1
 800420a:	2280      	movs	r2, #128	; 0x80
 800420c:	0152      	lsls	r2, r2, #5
 800420e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004210:	187a      	adds	r2, r7, r1
 8004212:	4b0e      	ldr	r3, [pc, #56]	; (800424c <MX_TIM2_Init+0xa0>)
 8004214:	0011      	movs	r1, r2
 8004216:	0018      	movs	r0, r3
 8004218:	f003 f8e8 	bl	80073ec <HAL_TIM_ConfigClockSource>
 800421c:	1e03      	subs	r3, r0, #0
 800421e:	d001      	beq.n	8004224 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8004220:	f000 fa62 	bl	80046e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004224:	003b      	movs	r3, r7
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800422a:	003b      	movs	r3, r7
 800422c:	2200      	movs	r2, #0
 800422e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004230:	003a      	movs	r2, r7
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <MX_TIM2_Init+0xa0>)
 8004234:	0011      	movs	r1, r2
 8004236:	0018      	movs	r0, r3
 8004238:	f003 faa4 	bl	8007784 <HAL_TIMEx_MasterConfigSynchronization>
 800423c:	1e03      	subs	r3, r0, #0
 800423e:	d001      	beq.n	8004244 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8004240:	f000 fa52 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b006      	add	sp, #24
 800424a:	bd80      	pop	{r7, pc}
 800424c:	200002ec 	.word	0x200002ec
 8004250:	0000ffff 	.word	0x0000ffff

08004254 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004258:	4b14      	ldr	r3, [pc, #80]	; (80042ac <MX_USART1_UART_Init+0x58>)
 800425a:	4a15      	ldr	r2, [pc, #84]	; (80042b0 <MX_USART1_UART_Init+0x5c>)
 800425c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800425e:	4b13      	ldr	r3, [pc, #76]	; (80042ac <MX_USART1_UART_Init+0x58>)
 8004260:	2296      	movs	r2, #150	; 0x96
 8004262:	0192      	lsls	r2, r2, #6
 8004264:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004266:	4b11      	ldr	r3, [pc, #68]	; (80042ac <MX_USART1_UART_Init+0x58>)
 8004268:	2200      	movs	r2, #0
 800426a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <MX_USART1_UART_Init+0x58>)
 800426e:	2200      	movs	r2, #0
 8004270:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004272:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <MX_USART1_UART_Init+0x58>)
 8004274:	2200      	movs	r2, #0
 8004276:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <MX_USART1_UART_Init+0x58>)
 800427a:	220c      	movs	r2, #12
 800427c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800427e:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <MX_USART1_UART_Init+0x58>)
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004284:	4b09      	ldr	r3, [pc, #36]	; (80042ac <MX_USART1_UART_Init+0x58>)
 8004286:	2200      	movs	r2, #0
 8004288:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800428a:	4b08      	ldr	r3, [pc, #32]	; (80042ac <MX_USART1_UART_Init+0x58>)
 800428c:	2200      	movs	r2, #0
 800428e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004290:	4b06      	ldr	r3, [pc, #24]	; (80042ac <MX_USART1_UART_Init+0x58>)
 8004292:	2200      	movs	r2, #0
 8004294:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <MX_USART1_UART_Init+0x58>)
 8004298:	0018      	movs	r0, r3
 800429a:	f003 fad1 	bl	8007840 <HAL_UART_Init>
 800429e:	1e03      	subs	r3, r0, #0
 80042a0:	d001      	beq.n	80042a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80042a2:	f000 fa21 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	2000032c 	.word	0x2000032c
 80042b0:	40013800 	.word	0x40013800

080042b4 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80042b8:	4b14      	ldr	r3, [pc, #80]	; (800430c <MX_USART4_UART_Init+0x58>)
 80042ba:	4a15      	ldr	r2, [pc, #84]	; (8004310 <MX_USART4_UART_Init+0x5c>)
 80042bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <MX_USART4_UART_Init+0x58>)
 80042c0:	2296      	movs	r2, #150	; 0x96
 80042c2:	0192      	lsls	r2, r2, #6
 80042c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <MX_USART4_UART_Init+0x58>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <MX_USART4_UART_Init+0x58>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80042d2:	4b0e      	ldr	r3, [pc, #56]	; (800430c <MX_USART4_UART_Init+0x58>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <MX_USART4_UART_Init+0x58>)
 80042da:	220c      	movs	r2, #12
 80042dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042de:	4b0b      	ldr	r3, [pc, #44]	; (800430c <MX_USART4_UART_Init+0x58>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80042e4:	4b09      	ldr	r3, [pc, #36]	; (800430c <MX_USART4_UART_Init+0x58>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <MX_USART4_UART_Init+0x58>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <MX_USART4_UART_Init+0x58>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <MX_USART4_UART_Init+0x58>)
 80042f8:	0018      	movs	r0, r3
 80042fa:	f003 faa1 	bl	8007840 <HAL_UART_Init>
 80042fe:	1e03      	subs	r3, r0, #0
 8004300:	d001      	beq.n	8004306 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8004302:	f000 f9f1 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	200003b0 	.word	0x200003b0
 8004310:	40004c00 	.word	0x40004c00

08004314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b089      	sub	sp, #36	; 0x24
 8004318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800431a:	240c      	movs	r4, #12
 800431c:	193b      	adds	r3, r7, r4
 800431e:	0018      	movs	r0, r3
 8004320:	2314      	movs	r3, #20
 8004322:	001a      	movs	r2, r3
 8004324:	2100      	movs	r1, #0
 8004326:	f004 f8ff 	bl	8008528 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800432a:	4b20      	ldr	r3, [pc, #128]	; (80043ac <MX_GPIO_Init+0x98>)
 800432c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432e:	4b1f      	ldr	r3, [pc, #124]	; (80043ac <MX_GPIO_Init+0x98>)
 8004330:	2104      	movs	r1, #4
 8004332:	430a      	orrs	r2, r1
 8004334:	62da      	str	r2, [r3, #44]	; 0x2c
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <MX_GPIO_Init+0x98>)
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	2204      	movs	r2, #4
 800433c:	4013      	ands	r3, r2
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004342:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <MX_GPIO_Init+0x98>)
 8004344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004346:	4b19      	ldr	r3, [pc, #100]	; (80043ac <MX_GPIO_Init+0x98>)
 8004348:	2101      	movs	r1, #1
 800434a:	430a      	orrs	r2, r1
 800434c:	62da      	str	r2, [r3, #44]	; 0x2c
 800434e:	4b17      	ldr	r3, [pc, #92]	; (80043ac <MX_GPIO_Init+0x98>)
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	2201      	movs	r2, #1
 8004354:	4013      	ands	r3, r2
 8004356:	607b      	str	r3, [r7, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800435a:	4b14      	ldr	r3, [pc, #80]	; (80043ac <MX_GPIO_Init+0x98>)
 800435c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435e:	4b13      	ldr	r3, [pc, #76]	; (80043ac <MX_GPIO_Init+0x98>)
 8004360:	2102      	movs	r1, #2
 8004362:	430a      	orrs	r2, r1
 8004364:	62da      	str	r2, [r3, #44]	; 0x2c
 8004366:	4b11      	ldr	r3, [pc, #68]	; (80043ac <MX_GPIO_Init+0x98>)
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	2202      	movs	r2, #2
 800436c:	4013      	ands	r3, r2
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8004372:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <MX_GPIO_Init+0x9c>)
 8004374:	2200      	movs	r2, #0
 8004376:	2106      	movs	r1, #6
 8004378:	0018      	movs	r0, r3
 800437a:	f001 fa60 	bl	800583e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800437e:	0021      	movs	r1, r4
 8004380:	187b      	adds	r3, r7, r1
 8004382:	2206      	movs	r2, #6
 8004384:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004386:	187b      	adds	r3, r7, r1
 8004388:	2201      	movs	r2, #1
 800438a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438c:	187b      	adds	r3, r7, r1
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004392:	187b      	adds	r3, r7, r1
 8004394:	2200      	movs	r2, #0
 8004396:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004398:	187b      	adds	r3, r7, r1
 800439a:	4a05      	ldr	r2, [pc, #20]	; (80043b0 <MX_GPIO_Init+0x9c>)
 800439c:	0019      	movs	r1, r3
 800439e:	0010      	movs	r0, r2
 80043a0:	f001 f8b2 	bl	8005508 <HAL_GPIO_Init>

}
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b009      	add	sp, #36	; 0x24
 80043aa:	bd90      	pop	{r4, r7, pc}
 80043ac:	40021000 	.word	0x40021000
 80043b0:	50000800 	.word	0x50000800

080043b4 <get_BMP180Readings>:

/* USER CODE BEGIN 4 */
void get_BMP180Readings(float *tempPtr, float *pressurePtr, float *altPtr){
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]

	  *tempPtr = getTemp(); 						//Get Temperature
 80043c0:	f7fe fde2 	bl	8002f88 <getTemp>
 80043c4:	0003      	movs	r3, r0
 80043c6:	0018      	movs	r0, r3
 80043c8:	f7fc fdd0 	bl	8000f6c <__aeabi_ui2f>
 80043cc:	1c02      	adds	r2, r0, #0
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	601a      	str	r2, [r3, #0]
	  //BMP_TempF = ((BMP_TempC * 9) / 5) + 32; 	//Convert to F
	  *pressurePtr = getPressure(0); 				//Get Pressure
 80043d2:	2000      	movs	r0, #0
 80043d4:	f7fe fede 	bl	8003194 <getPressure>
 80043d8:	1c02      	adds	r2, r0, #0
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	601a      	str	r2, [r3, #0]
	  *altPtr = getAlt(0); 							//Get Altitude
 80043de:	2000      	movs	r0, #0
 80043e0:	f7ff f8fc 	bl	80035dc <getAlt>
 80043e4:	1c02      	adds	r2, r0, #0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]
}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b004      	add	sp, #16
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <get_DHT22Readings>:
void get_DHT22Readings(float *tempPtr, float *humPtr, uint8_t *u8Arr, uint16_t *u16Arr){
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]

	  sensorInit();
 8004402:	f7ff f969 	bl	80036d8 <sensorInit>
	  u8Arr[4] = sensorVerify();
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	1d1c      	adds	r4, r3, #4
 800440a:	f7ff f98f 	bl	800372c <sensorVerify>
 800440e:	0003      	movs	r3, r0
 8004410:	7023      	strb	r3, [r4, #0]
	  if(u8Arr[4]) {
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3304      	adds	r3, #4
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d075      	beq.n	8004508 <get_DHT22Readings+0x114>
	  	  u8Arr[2] = sensorRead(); 						//Read Lower 8 Humidity
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	1c9c      	adds	r4, r3, #2
 8004420:	f7ff f9b6 	bl	8003790 <sensorRead>
 8004424:	0003      	movs	r3, r0
 8004426:	7023      	strb	r3, [r4, #0]
	  	  u8Arr[3] = sensorRead(); 						//Read Upper 8 Humidity
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	1cdc      	adds	r4, r3, #3
 800442c:	f7ff f9b0 	bl	8003790 <sensorRead>
 8004430:	0003      	movs	r3, r0
 8004432:	7023      	strb	r3, [r4, #0]
	  	  u8Arr[0] = sensorRead(); 						//Read Lower 8 Temperature
 8004434:	f7ff f9ac 	bl	8003790 <sensorRead>
 8004438:	0003      	movs	r3, r0
 800443a:	001a      	movs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	701a      	strb	r2, [r3, #0]
	  	  u8Arr[1] = sensorRead(); 						//Read Upper 8 Temperature
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	1c5c      	adds	r4, r3, #1
 8004444:	f7ff f9a4 	bl	8003790 <sensorRead>
 8004448:	0003      	movs	r3, r0
 800444a:	7023      	strb	r3, [r4, #0]
	  	  u16Arr[2] = sensorRead(); 					//Read Checksum
 800444c:	f7ff f9a0 	bl	8003790 <sensorRead>
 8004450:	0003      	movs	r3, r0
 8004452:	001a      	movs	r2, r3
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	3304      	adds	r3, #4
 8004458:	b292      	uxth	r2, r2
 800445a:	801a      	strh	r2, [r3, #0]

	  	  u16Arr[0] = ((u8Arr[0] << 8) | u8Arr[1]); 	//Assemble Temperature
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	b21a      	sxth	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3301      	adds	r3, #1
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	b21b      	sxth	r3, r3
 800446c:	4313      	orrs	r3, r2
 800446e:	b21b      	sxth	r3, r3
 8004470:	b29a      	uxth	r2, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	801a      	strh	r2, [r3, #0]
	  	  u16Arr[1] = ((u8Arr[2] << 8 | u8Arr[3])); 	//Assemble Humidity
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3302      	adds	r3, #2
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	b21a      	sxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3303      	adds	r3, #3
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	b21b      	sxth	r3, r3
 8004488:	4313      	orrs	r3, r2
 800448a:	b21a      	sxth	r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	3302      	adds	r3, #2
 8004490:	b292      	uxth	r2, r2
 8004492:	801a      	strh	r2, [r3, #0]

	  	  *tempPtr = (float) (u16Arr[0]/10.0);			//Get Temperature
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	0018      	movs	r0, r3
 800449a:	f7fe fb39 	bl	8002b10 <__aeabi_i2d>
 800449e:	2200      	movs	r2, #0
 80044a0:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <get_DHT22Readings+0x11c>)
 80044a2:	f7fd f8e1 	bl	8001668 <__aeabi_ddiv>
 80044a6:	0002      	movs	r2, r0
 80044a8:	000b      	movs	r3, r1
 80044aa:	0010      	movs	r0, r2
 80044ac:	0019      	movs	r1, r3
 80044ae:	f7fe fbcd 	bl	8002c4c <__aeabi_d2f>
 80044b2:	1c02      	adds	r2, r0, #0
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	601a      	str	r2, [r3, #0]
	   	  *tempPtr = ((*tempPtr * 9) / 5) + 32; 		//Convert from Celsius
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4915      	ldr	r1, [pc, #84]	; (8004514 <get_DHT22Readings+0x120>)
 80044be:	1c18      	adds	r0, r3, #0
 80044c0:	f7fc fbe0 	bl	8000c84 <__aeabi_fmul>
 80044c4:	1c03      	adds	r3, r0, #0
 80044c6:	4914      	ldr	r1, [pc, #80]	; (8004518 <get_DHT22Readings+0x124>)
 80044c8:	1c18      	adds	r0, r3, #0
 80044ca:	f7fc fac3 	bl	8000a54 <__aeabi_fdiv>
 80044ce:	1c03      	adds	r3, r0, #0
 80044d0:	2184      	movs	r1, #132	; 0x84
 80044d2:	05c9      	lsls	r1, r1, #23
 80044d4:	1c18      	adds	r0, r3, #0
 80044d6:	f7fc f91f 	bl	8000718 <__aeabi_fadd>
 80044da:	1c03      	adds	r3, r0, #0
 80044dc:	1c1a      	adds	r2, r3, #0
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	601a      	str	r2, [r3, #0]
	   	  *humPtr = (float) (u16Arr[1]/10.0); 			//Get Humidity
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	3302      	adds	r3, #2
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	0018      	movs	r0, r3
 80044ea:	f7fe fb11 	bl	8002b10 <__aeabi_i2d>
 80044ee:	2200      	movs	r2, #0
 80044f0:	4b07      	ldr	r3, [pc, #28]	; (8004510 <get_DHT22Readings+0x11c>)
 80044f2:	f7fd f8b9 	bl	8001668 <__aeabi_ddiv>
 80044f6:	0002      	movs	r2, r0
 80044f8:	000b      	movs	r3, r1
 80044fa:	0010      	movs	r0, r2
 80044fc:	0019      	movs	r1, r3
 80044fe:	f7fe fba5 	bl	8002c4c <__aeabi_d2f>
 8004502:	1c02      	adds	r2, r0, #0
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	601a      	str	r2, [r3, #0]
	   	  }
}
 8004508:	46c0      	nop			; (mov r8, r8)
 800450a:	46bd      	mov	sp, r7
 800450c:	b005      	add	sp, #20
 800450e:	bd90      	pop	{r4, r7, pc}
 8004510:	40240000 	.word	0x40240000
 8004514:	41100000 	.word	0x41100000
 8004518:	40a00000 	.word	0x40a00000

0800451c <get_DS18B20Readings>:
void get_DS18B20Readings(uint8_t *statusPtr, uint8_t *u8Arr, uint16_t *u16Ptr, float *floatPtr){
 800451c:	b590      	push	{r4, r7, lr}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]

	  *statusPtr = dsInit(); 							//Initialize the DS18B20
 800452a:	f7ff f9c3 	bl	80038b4 <dsInit>
 800452e:	0003      	movs	r3, r0
 8004530:	001a      	movs	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	701a      	strb	r2, [r3, #0]
	  if(*statusPtr) {
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d008      	beq.n	8004550 <get_DS18B20Readings+0x34>
		  HAL_Delay(1);
 800453e:	2001      	movs	r0, #1
 8004540:	f000 fb8c 	bl	8004c5c <HAL_Delay>
		  dsWrite(0xCC); 								//Skip ROM Command
 8004544:	20cc      	movs	r0, #204	; 0xcc
 8004546:	f7ff f9e9 	bl	800391c <dsWrite>
		  dsWrite(0x44);								//Convert Temperature
 800454a:	2044      	movs	r0, #68	; 0x44
 800454c:	f7ff f9e6 	bl	800391c <dsWrite>
	  }
	  *statusPtr = dsInit(); 							//Initialize DS18B20 Again
 8004550:	f7ff f9b0 	bl	80038b4 <dsInit>
 8004554:	0003      	movs	r3, r0
 8004556:	001a      	movs	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	701a      	strb	r2, [r3, #0]
	  if(*statusPtr) {
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d045      	beq.n	80045f0 <get_DS18B20Readings+0xd4>
		  HAL_Delay(1);
 8004564:	2001      	movs	r0, #1
 8004566:	f000 fb79 	bl	8004c5c <HAL_Delay>
		  dsWrite(0xCC); 								//Skip ROM Command
 800456a:	20cc      	movs	r0, #204	; 0xcc
 800456c:	f7ff f9d6 	bl	800391c <dsWrite>
		  dsWrite(0xBE); 								//Read Scratchpad
 8004570:	20be      	movs	r0, #190	; 0xbe
 8004572:	f7ff f9d3 	bl	800391c <dsWrite>
		  u8Arr[0] = dsRead(); 							//Read Lower 8
 8004576:	f7ff fa19 	bl	80039ac <dsRead>
 800457a:	0003      	movs	r3, r0
 800457c:	001a      	movs	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	701a      	strb	r2, [r3, #0]
		  u8Arr[1] = dsRead(); 							//Read Upper 8
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	1c5c      	adds	r4, r3, #1
 8004586:	f7ff fa11 	bl	80039ac <dsRead>
 800458a:	0003      	movs	r3, r0
 800458c:	7023      	strb	r3, [r4, #0]

		  *u16Ptr = (u8Arr[1] << 8) | u8Arr[0]; 		//Combine
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	3301      	adds	r3, #1
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	b21a      	sxth	r2, r3
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	b21b      	sxth	r3, r3
 800459e:	4313      	orrs	r3, r2
 80045a0:	b21b      	sxth	r3, r3
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	801a      	strh	r2, [r3, #0]
		  *floatPtr = (float) *u16Ptr/16; 				//Get Temperature
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	0018      	movs	r0, r3
 80045ae:	f7fc fcdd 	bl	8000f6c <__aeabi_ui2f>
 80045b2:	1c03      	adds	r3, r0, #0
 80045b4:	2183      	movs	r1, #131	; 0x83
 80045b6:	05c9      	lsls	r1, r1, #23
 80045b8:	1c18      	adds	r0, r3, #0
 80045ba:	f7fc fa4b 	bl	8000a54 <__aeabi_fdiv>
 80045be:	1c03      	adds	r3, r0, #0
 80045c0:	1c1a      	adds	r2, r3, #0
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	601a      	str	r2, [r3, #0]
		  *floatPtr = ((*floatPtr * 9) / 5) + 32; 		//Convert to F
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	490b      	ldr	r1, [pc, #44]	; (80045f8 <get_DS18B20Readings+0xdc>)
 80045cc:	1c18      	adds	r0, r3, #0
 80045ce:	f7fc fb59 	bl	8000c84 <__aeabi_fmul>
 80045d2:	1c03      	adds	r3, r0, #0
 80045d4:	4909      	ldr	r1, [pc, #36]	; (80045fc <get_DS18B20Readings+0xe0>)
 80045d6:	1c18      	adds	r0, r3, #0
 80045d8:	f7fc fa3c 	bl	8000a54 <__aeabi_fdiv>
 80045dc:	1c03      	adds	r3, r0, #0
 80045de:	2184      	movs	r1, #132	; 0x84
 80045e0:	05c9      	lsls	r1, r1, #23
 80045e2:	1c18      	adds	r0, r3, #0
 80045e4:	f7fc f898 	bl	8000718 <__aeabi_fadd>
 80045e8:	1c03      	adds	r3, r0, #0
 80045ea:	1c1a      	adds	r2, r3, #0
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	601a      	str	r2, [r3, #0]
	  }
}
 80045f0:	46c0      	nop			; (mov r8, r8)
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b005      	add	sp, #20
 80045f6:	bd90      	pop	{r4, r7, pc}
 80045f8:	41100000 	.word	0x41100000
 80045fc:	40a00000 	.word	0x40a00000

08004600 <get_LDRReadings>:
void get_LDRReadings(ADC_ChannelConfTypeDef *ADC_configPtr, float *voltagePtr, uint16_t *lightPtr){
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]

	  if(HAL_ADC_ConfigChannel(&hadc, ADC_configPtr) != HAL_OK) {
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4b1e      	ldr	r3, [pc, #120]	; (8004688 <get_LDRReadings+0x88>)
 8004610:	0011      	movs	r1, r2
 8004612:	0018      	movs	r0, r3
 8004614:	f000 fdb6 	bl	8005184 <HAL_ADC_ConfigChannel>
 8004618:	1e03      	subs	r3, r0, #0
 800461a:	d001      	beq.n	8004620 <get_LDRReadings+0x20>
		  Error_Handler();
 800461c:	f000 f864 	bl	80046e8 <Error_Handler>
	  }
	  HAL_ADC_Start(&hadc); 									//Start Light ADC
 8004620:	4b19      	ldr	r3, [pc, #100]	; (8004688 <get_LDRReadings+0x88>)
 8004622:	0018      	movs	r0, r3
 8004624:	f000 fcb2 	bl	8004f8c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8004628:	2301      	movs	r3, #1
 800462a:	425a      	negs	r2, r3
 800462c:	4b16      	ldr	r3, [pc, #88]	; (8004688 <get_LDRReadings+0x88>)
 800462e:	0011      	movs	r1, r2
 8004630:	0018      	movs	r0, r3
 8004632:	f000 fcff 	bl	8005034 <HAL_ADC_PollForConversion>
	  *lightPtr = HAL_ADC_GetValue(&hadc);
 8004636:	4b14      	ldr	r3, [pc, #80]	; (8004688 <get_LDRReadings+0x88>)
 8004638:	0018      	movs	r0, r3
 800463a:	f000 fd97 	bl	800516c <HAL_ADC_GetValue>
 800463e:	0003      	movs	r3, r0
 8004640:	b29a      	uxth	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	801a      	strh	r2, [r3, #0]
	  *voltagePtr = 3.3 * (*lightPtr);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	0018      	movs	r0, r3
 800464c:	f7fe fa60 	bl	8002b10 <__aeabi_i2d>
 8004650:	4a0e      	ldr	r2, [pc, #56]	; (800468c <get_LDRReadings+0x8c>)
 8004652:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <get_LDRReadings+0x90>)
 8004654:	f7fd fc0a 	bl	8001e6c <__aeabi_dmul>
 8004658:	0002      	movs	r2, r0
 800465a:	000b      	movs	r3, r1
 800465c:	0010      	movs	r0, r2
 800465e:	0019      	movs	r1, r3
 8004660:	f7fe faf4 	bl	8002c4c <__aeabi_d2f>
 8004664:	1c02      	adds	r2, r0, #0
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	601a      	str	r2, [r3, #0]
	  *voltagePtr = *voltagePtr / 4095;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4909      	ldr	r1, [pc, #36]	; (8004694 <get_LDRReadings+0x94>)
 8004670:	1c18      	adds	r0, r3, #0
 8004672:	f7fc f9ef 	bl	8000a54 <__aeabi_fdiv>
 8004676:	1c03      	adds	r3, r0, #0
 8004678:	1c1a      	adds	r2, r3, #0
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	601a      	str	r2, [r3, #0]
}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	46bd      	mov	sp, r7
 8004682:	b004      	add	sp, #16
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	20000244 	.word	0x20000244
 800468c:	66666666 	.word	0x66666666
 8004690:	400a6666 	.word	0x400a6666
 8004694:	457ff000 	.word	0x457ff000

08004698 <get_moistureReadings>:
void get_moistureReadings(ADC_ChannelConfTypeDef *ADC_configPtr, uint16_t *moisturePtr){
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]

	  //ADC_configPtr->Channel = ADC_CHANNEL_13;
	  if(HAL_ADC_ConfigChannel(&hadc, ADC_configPtr) != HAL_OK) {
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <get_moistureReadings+0x4c>)
 80046a6:	0011      	movs	r1, r2
 80046a8:	0018      	movs	r0, r3
 80046aa:	f000 fd6b 	bl	8005184 <HAL_ADC_ConfigChannel>
 80046ae:	1e03      	subs	r3, r0, #0
 80046b0:	d001      	beq.n	80046b6 <get_moistureReadings+0x1e>
		  Error_Handler();
 80046b2:	f000 f819 	bl	80046e8 <Error_Handler>
	  }
	  HAL_ADC_Start(&hadc); 									//Start Soil ADC
 80046b6:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <get_moistureReadings+0x4c>)
 80046b8:	0018      	movs	r0, r3
 80046ba:	f000 fc67 	bl	8004f8c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80046be:	2301      	movs	r3, #1
 80046c0:	425a      	negs	r2, r3
 80046c2:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <get_moistureReadings+0x4c>)
 80046c4:	0011      	movs	r1, r2
 80046c6:	0018      	movs	r0, r3
 80046c8:	f000 fcb4 	bl	8005034 <HAL_ADC_PollForConversion>
	  *moisturePtr = HAL_ADC_GetValue(&hadc);
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <get_moistureReadings+0x4c>)
 80046ce:	0018      	movs	r0, r3
 80046d0:	f000 fd4c 	bl	800516c <HAL_ADC_GetValue>
 80046d4:	0003      	movs	r3, r0
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	801a      	strh	r2, [r3, #0]
}
 80046dc:	46c0      	nop			; (mov r8, r8)
 80046de:	46bd      	mov	sp, r7
 80046e0:	b002      	add	sp, #8
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20000244 	.word	0x20000244

080046e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046ec:	b672      	cpsid	i
}
 80046ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046f0:	e7fe      	b.n	80046f0 <Error_Handler+0x8>
	...

080046f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046f8:	4b07      	ldr	r3, [pc, #28]	; (8004718 <HAL_MspInit+0x24>)
 80046fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046fc:	4b06      	ldr	r3, [pc, #24]	; (8004718 <HAL_MspInit+0x24>)
 80046fe:	2101      	movs	r1, #1
 8004700:	430a      	orrs	r2, r1
 8004702:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004704:	4b04      	ldr	r3, [pc, #16]	; (8004718 <HAL_MspInit+0x24>)
 8004706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <HAL_MspInit+0x24>)
 800470a:	2180      	movs	r1, #128	; 0x80
 800470c:	0549      	lsls	r1, r1, #21
 800470e:	430a      	orrs	r2, r1
 8004710:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40021000 	.word	0x40021000

0800471c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b08b      	sub	sp, #44	; 0x2c
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004724:	2414      	movs	r4, #20
 8004726:	193b      	adds	r3, r7, r4
 8004728:	0018      	movs	r0, r3
 800472a:	2314      	movs	r3, #20
 800472c:	001a      	movs	r2, r3
 800472e:	2100      	movs	r1, #0
 8004730:	f003 fefa 	bl	8008528 <memset>
  if(hadc->Instance==ADC1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a22      	ldr	r2, [pc, #136]	; (80047c4 <HAL_ADC_MspInit+0xa8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d13e      	bne.n	80047bc <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800473e:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <HAL_ADC_MspInit+0xac>)
 8004740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004742:	4b21      	ldr	r3, [pc, #132]	; (80047c8 <HAL_ADC_MspInit+0xac>)
 8004744:	2180      	movs	r1, #128	; 0x80
 8004746:	0089      	lsls	r1, r1, #2
 8004748:	430a      	orrs	r2, r1
 800474a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800474c:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <HAL_ADC_MspInit+0xac>)
 800474e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004750:	4b1d      	ldr	r3, [pc, #116]	; (80047c8 <HAL_ADC_MspInit+0xac>)
 8004752:	2104      	movs	r1, #4
 8004754:	430a      	orrs	r2, r1
 8004756:	62da      	str	r2, [r3, #44]	; 0x2c
 8004758:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <HAL_ADC_MspInit+0xac>)
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	2204      	movs	r2, #4
 800475e:	4013      	ands	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004764:	4b18      	ldr	r3, [pc, #96]	; (80047c8 <HAL_ADC_MspInit+0xac>)
 8004766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004768:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <HAL_ADC_MspInit+0xac>)
 800476a:	2101      	movs	r1, #1
 800476c:	430a      	orrs	r2, r1
 800476e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004770:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <HAL_ADC_MspInit+0xac>)
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	2201      	movs	r2, #1
 8004776:	4013      	ands	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC3     ------> ADC_IN13
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800477c:	193b      	adds	r3, r7, r4
 800477e:	2208      	movs	r2, #8
 8004780:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004782:	193b      	adds	r3, r7, r4
 8004784:	2203      	movs	r2, #3
 8004786:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004788:	193b      	adds	r3, r7, r4
 800478a:	2200      	movs	r2, #0
 800478c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800478e:	193b      	adds	r3, r7, r4
 8004790:	4a0e      	ldr	r2, [pc, #56]	; (80047cc <HAL_ADC_MspInit+0xb0>)
 8004792:	0019      	movs	r1, r3
 8004794:	0010      	movs	r0, r2
 8004796:	f000 feb7 	bl	8005508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800479a:	0021      	movs	r1, r4
 800479c:	187b      	adds	r3, r7, r1
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047a2:	187b      	adds	r3, r7, r1
 80047a4:	2203      	movs	r2, #3
 80047a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a8:	187b      	adds	r3, r7, r1
 80047aa:	2200      	movs	r2, #0
 80047ac:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ae:	187a      	adds	r2, r7, r1
 80047b0:	23a0      	movs	r3, #160	; 0xa0
 80047b2:	05db      	lsls	r3, r3, #23
 80047b4:	0011      	movs	r1, r2
 80047b6:	0018      	movs	r0, r3
 80047b8:	f000 fea6 	bl	8005508 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80047bc:	46c0      	nop			; (mov r8, r8)
 80047be:	46bd      	mov	sp, r7
 80047c0:	b00b      	add	sp, #44	; 0x2c
 80047c2:	bd90      	pop	{r4, r7, pc}
 80047c4:	40012400 	.word	0x40012400
 80047c8:	40021000 	.word	0x40021000
 80047cc:	50000800 	.word	0x50000800

080047d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80047d0:	b590      	push	{r4, r7, lr}
 80047d2:	b089      	sub	sp, #36	; 0x24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d8:	240c      	movs	r4, #12
 80047da:	193b      	adds	r3, r7, r4
 80047dc:	0018      	movs	r0, r3
 80047de:	2314      	movs	r3, #20
 80047e0:	001a      	movs	r2, r3
 80047e2:	2100      	movs	r1, #0
 80047e4:	f003 fea0 	bl	8008528 <memset>
  if(hi2c->Instance==I2C1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a17      	ldr	r2, [pc, #92]	; (800484c <HAL_I2C_MspInit+0x7c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d128      	bne.n	8004844 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047f2:	4b17      	ldr	r3, [pc, #92]	; (8004850 <HAL_I2C_MspInit+0x80>)
 80047f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f6:	4b16      	ldr	r3, [pc, #88]	; (8004850 <HAL_I2C_MspInit+0x80>)
 80047f8:	2102      	movs	r1, #2
 80047fa:	430a      	orrs	r2, r1
 80047fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80047fe:	4b14      	ldr	r3, [pc, #80]	; (8004850 <HAL_I2C_MspInit+0x80>)
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	2202      	movs	r2, #2
 8004804:	4013      	ands	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800480a:	0021      	movs	r1, r4
 800480c:	187b      	adds	r3, r7, r1
 800480e:	22c0      	movs	r2, #192	; 0xc0
 8004810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004812:	187b      	adds	r3, r7, r1
 8004814:	2212      	movs	r2, #18
 8004816:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004818:	187b      	adds	r3, r7, r1
 800481a:	2200      	movs	r2, #0
 800481c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800481e:	187b      	adds	r3, r7, r1
 8004820:	2203      	movs	r2, #3
 8004822:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004824:	187b      	adds	r3, r7, r1
 8004826:	2201      	movs	r2, #1
 8004828:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800482a:	187b      	adds	r3, r7, r1
 800482c:	4a09      	ldr	r2, [pc, #36]	; (8004854 <HAL_I2C_MspInit+0x84>)
 800482e:	0019      	movs	r1, r3
 8004830:	0010      	movs	r0, r2
 8004832:	f000 fe69 	bl	8005508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004836:	4b06      	ldr	r3, [pc, #24]	; (8004850 <HAL_I2C_MspInit+0x80>)
 8004838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800483a:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_I2C_MspInit+0x80>)
 800483c:	2180      	movs	r1, #128	; 0x80
 800483e:	0389      	lsls	r1, r1, #14
 8004840:	430a      	orrs	r2, r1
 8004842:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004844:	46c0      	nop			; (mov r8, r8)
 8004846:	46bd      	mov	sp, r7
 8004848:	b009      	add	sp, #36	; 0x24
 800484a:	bd90      	pop	{r4, r7, pc}
 800484c:	40005400 	.word	0x40005400
 8004850:	40021000 	.word	0x40021000
 8004854:	50000400 	.word	0x50000400

08004858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	2380      	movs	r3, #128	; 0x80
 8004866:	05db      	lsls	r3, r3, #23
 8004868:	429a      	cmp	r2, r3
 800486a:	d105      	bne.n	8004878 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800486c:	4b04      	ldr	r3, [pc, #16]	; (8004880 <HAL_TIM_Base_MspInit+0x28>)
 800486e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004870:	4b03      	ldr	r3, [pc, #12]	; (8004880 <HAL_TIM_Base_MspInit+0x28>)
 8004872:	2101      	movs	r1, #1
 8004874:	430a      	orrs	r2, r1
 8004876:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	b002      	add	sp, #8
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40021000 	.word	0x40021000

08004884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004884:	b590      	push	{r4, r7, lr}
 8004886:	b08b      	sub	sp, #44	; 0x2c
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800488c:	2414      	movs	r4, #20
 800488e:	193b      	adds	r3, r7, r4
 8004890:	0018      	movs	r0, r3
 8004892:	2314      	movs	r3, #20
 8004894:	001a      	movs	r2, r3
 8004896:	2100      	movs	r1, #0
 8004898:	f003 fe46 	bl	8008528 <memset>
  if(huart->Instance==USART1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a30      	ldr	r2, [pc, #192]	; (8004964 <HAL_UART_MspInit+0xe0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d12b      	bne.n	80048fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048a6:	4b30      	ldr	r3, [pc, #192]	; (8004968 <HAL_UART_MspInit+0xe4>)
 80048a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048aa:	4b2f      	ldr	r3, [pc, #188]	; (8004968 <HAL_UART_MspInit+0xe4>)
 80048ac:	2180      	movs	r1, #128	; 0x80
 80048ae:	01c9      	lsls	r1, r1, #7
 80048b0:	430a      	orrs	r2, r1
 80048b2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b4:	4b2c      	ldr	r3, [pc, #176]	; (8004968 <HAL_UART_MspInit+0xe4>)
 80048b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b8:	4b2b      	ldr	r3, [pc, #172]	; (8004968 <HAL_UART_MspInit+0xe4>)
 80048ba:	2101      	movs	r1, #1
 80048bc:	430a      	orrs	r2, r1
 80048be:	62da      	str	r2, [r3, #44]	; 0x2c
 80048c0:	4b29      	ldr	r3, [pc, #164]	; (8004968 <HAL_UART_MspInit+0xe4>)
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	2201      	movs	r2, #1
 80048c6:	4013      	ands	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80048cc:	193b      	adds	r3, r7, r4
 80048ce:	22c0      	movs	r2, #192	; 0xc0
 80048d0:	00d2      	lsls	r2, r2, #3
 80048d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d4:	0021      	movs	r1, r4
 80048d6:	187b      	adds	r3, r7, r1
 80048d8:	2202      	movs	r2, #2
 80048da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048dc:	187b      	adds	r3, r7, r1
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e2:	187b      	adds	r3, r7, r1
 80048e4:	2203      	movs	r2, #3
 80048e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80048e8:	187b      	adds	r3, r7, r1
 80048ea:	2204      	movs	r2, #4
 80048ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ee:	187a      	adds	r2, r7, r1
 80048f0:	23a0      	movs	r3, #160	; 0xa0
 80048f2:	05db      	lsls	r3, r3, #23
 80048f4:	0011      	movs	r1, r2
 80048f6:	0018      	movs	r0, r3
 80048f8:	f000 fe06 	bl	8005508 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 80048fc:	e02e      	b.n	800495c <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART4)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a1a      	ldr	r2, [pc, #104]	; (800496c <HAL_UART_MspInit+0xe8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d129      	bne.n	800495c <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART4_CLK_ENABLE();
 8004908:	4b17      	ldr	r3, [pc, #92]	; (8004968 <HAL_UART_MspInit+0xe4>)
 800490a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800490c:	4b16      	ldr	r3, [pc, #88]	; (8004968 <HAL_UART_MspInit+0xe4>)
 800490e:	2180      	movs	r1, #128	; 0x80
 8004910:	0309      	lsls	r1, r1, #12
 8004912:	430a      	orrs	r2, r1
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004916:	4b14      	ldr	r3, [pc, #80]	; (8004968 <HAL_UART_MspInit+0xe4>)
 8004918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491a:	4b13      	ldr	r3, [pc, #76]	; (8004968 <HAL_UART_MspInit+0xe4>)
 800491c:	2104      	movs	r1, #4
 800491e:	430a      	orrs	r2, r1
 8004920:	62da      	str	r2, [r3, #44]	; 0x2c
 8004922:	4b11      	ldr	r3, [pc, #68]	; (8004968 <HAL_UART_MspInit+0xe4>)
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	2204      	movs	r2, #4
 8004928:	4013      	ands	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800492e:	2114      	movs	r1, #20
 8004930:	187b      	adds	r3, r7, r1
 8004932:	22c0      	movs	r2, #192	; 0xc0
 8004934:	0112      	lsls	r2, r2, #4
 8004936:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004938:	187b      	adds	r3, r7, r1
 800493a:	2202      	movs	r2, #2
 800493c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493e:	187b      	adds	r3, r7, r1
 8004940:	2200      	movs	r2, #0
 8004942:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004944:	187b      	adds	r3, r7, r1
 8004946:	2203      	movs	r2, #3
 8004948:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800494a:	187b      	adds	r3, r7, r1
 800494c:	2206      	movs	r2, #6
 800494e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004950:	187b      	adds	r3, r7, r1
 8004952:	4a07      	ldr	r2, [pc, #28]	; (8004970 <HAL_UART_MspInit+0xec>)
 8004954:	0019      	movs	r1, r3
 8004956:	0010      	movs	r0, r2
 8004958:	f000 fdd6 	bl	8005508 <HAL_GPIO_Init>
}
 800495c:	46c0      	nop			; (mov r8, r8)
 800495e:	46bd      	mov	sp, r7
 8004960:	b00b      	add	sp, #44	; 0x2c
 8004962:	bd90      	pop	{r4, r7, pc}
 8004964:	40013800 	.word	0x40013800
 8004968:	40021000 	.word	0x40021000
 800496c:	40004c00 	.word	0x40004c00
 8004970:	50000800 	.word	0x50000800

08004974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004978:	e7fe      	b.n	8004978 <NMI_Handler+0x4>

0800497a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800497e:	e7fe      	b.n	800497e <HardFault_Handler+0x4>

08004980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004984:	46c0      	nop			; (mov r8, r8)
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004998:	f000 f944 	bl	8004c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800499c:	46c0      	nop			; (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	af00      	add	r7, sp, #0
	return 1;
 80049a6:	2301      	movs	r3, #1
}
 80049a8:	0018      	movs	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <_kill>:

int _kill(int pid, int sig)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80049b8:	f003 fd8c 	bl	80084d4 <__errno>
 80049bc:	0003      	movs	r3, r0
 80049be:	2216      	movs	r2, #22
 80049c0:	601a      	str	r2, [r3, #0]
	return -1;
 80049c2:	2301      	movs	r3, #1
 80049c4:	425b      	negs	r3, r3
}
 80049c6:	0018      	movs	r0, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b002      	add	sp, #8
 80049cc:	bd80      	pop	{r7, pc}

080049ce <_exit>:

void _exit (int status)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80049d6:	2301      	movs	r3, #1
 80049d8:	425a      	negs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	0011      	movs	r1, r2
 80049de:	0018      	movs	r0, r3
 80049e0:	f7ff ffe5 	bl	80049ae <_kill>
	while (1) {}		/* Make sure we hang here */
 80049e4:	e7fe      	b.n	80049e4 <_exit+0x16>

080049e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b086      	sub	sp, #24
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	e00a      	b.n	8004a0e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80049f8:	e000      	b.n	80049fc <_read+0x16>
 80049fa:	bf00      	nop
 80049fc:	0001      	movs	r1, r0
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	60ba      	str	r2, [r7, #8]
 8004a04:	b2ca      	uxtb	r2, r1
 8004a06:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	dbf0      	blt.n	80049f8 <_read+0x12>
	}

return len;
 8004a16:	687b      	ldr	r3, [r7, #4]
}
 8004a18:	0018      	movs	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b006      	add	sp, #24
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	e009      	b.n	8004a46 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	60ba      	str	r2, [r7, #8]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	e000      	b.n	8004a40 <_write+0x20>
 8004a3e:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	3301      	adds	r3, #1
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	dbf1      	blt.n	8004a32 <_write+0x12>
	}
	return len;
 8004a4e:	687b      	ldr	r3, [r7, #4]
}
 8004a50:	0018      	movs	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	b006      	add	sp, #24
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <_close>:

int _close(int file)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	return -1;
 8004a60:	2301      	movs	r3, #1
 8004a62:	425b      	negs	r3, r3
}
 8004a64:	0018      	movs	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b002      	add	sp, #8
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2280      	movs	r2, #128	; 0x80
 8004a7a:	0192      	lsls	r2, r2, #6
 8004a7c:	605a      	str	r2, [r3, #4]
	return 0;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	0018      	movs	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	b002      	add	sp, #8
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <_isatty>:

int _isatty(int file)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	return 1;
 8004a90:	2301      	movs	r3, #1
}
 8004a92:	0018      	movs	r0, r3
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b002      	add	sp, #8
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	60f8      	str	r0, [r7, #12]
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	607a      	str	r2, [r7, #4]
	return 0;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	b004      	add	sp, #16
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ab8:	4a14      	ldr	r2, [pc, #80]	; (8004b0c <_sbrk+0x5c>)
 8004aba:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <_sbrk+0x60>)
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ac4:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <_sbrk+0x64>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004acc:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <_sbrk+0x64>)
 8004ace:	4a12      	ldr	r2, [pc, #72]	; (8004b18 <_sbrk+0x68>)
 8004ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ad2:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <_sbrk+0x64>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	18d3      	adds	r3, r2, r3
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d207      	bcs.n	8004af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ae0:	f003 fcf8 	bl	80084d4 <__errno>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	220c      	movs	r2, #12
 8004ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004aea:	2301      	movs	r3, #1
 8004aec:	425b      	negs	r3, r3
 8004aee:	e009      	b.n	8004b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004af0:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <_sbrk+0x64>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004af6:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <_sbrk+0x64>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	18d2      	adds	r2, r2, r3
 8004afe:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <_sbrk+0x64>)
 8004b00:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004b02:	68fb      	ldr	r3, [r7, #12]
}
 8004b04:	0018      	movs	r0, r3
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b006      	add	sp, #24
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20005000 	.word	0x20005000
 8004b10:	00000400 	.word	0x00000400
 8004b14:	20000434 	.word	0x20000434
 8004b18:	20000450 	.word	0x20000450

08004b1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b20:	46c0      	nop			; (mov r8, r8)
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004b28:	480d      	ldr	r0, [pc, #52]	; (8004b60 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004b2a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b2c:	480d      	ldr	r0, [pc, #52]	; (8004b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8004b2e:	490e      	ldr	r1, [pc, #56]	; (8004b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b30:	4a0e      	ldr	r2, [pc, #56]	; (8004b6c <LoopForever+0xe>)
  movs r3, #0
 8004b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b34:	e002      	b.n	8004b3c <LoopCopyDataInit>

08004b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b3a:	3304      	adds	r3, #4

08004b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b40:	d3f9      	bcc.n	8004b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b42:	4a0b      	ldr	r2, [pc, #44]	; (8004b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b44:	4c0b      	ldr	r4, [pc, #44]	; (8004b74 <LoopForever+0x16>)
  movs r3, #0
 8004b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b48:	e001      	b.n	8004b4e <LoopFillZerobss>

08004b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b4c:	3204      	adds	r2, #4

08004b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b50:	d3fb      	bcc.n	8004b4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004b52:	f7ff ffe3 	bl	8004b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b56:	f003 fcc3 	bl	80084e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b5a:	f7fe ff83 	bl	8003a64 <main>

08004b5e <LoopForever>:

LoopForever:
    b LoopForever
 8004b5e:	e7fe      	b.n	8004b5e <LoopForever>
   ldr   r0, =_estack
 8004b60:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b68:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004b6c:	0800c8d8 	.word	0x0800c8d8
  ldr r2, =_sbss
 8004b70:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8004b74:	2000044c 	.word	0x2000044c

08004b78 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b78:	e7fe      	b.n	8004b78 <ADC1_COMP_IRQHandler>
	...

08004b7c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b82:	1dfb      	adds	r3, r7, #7
 8004b84:	2200      	movs	r2, #0
 8004b86:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004b88:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <HAL_Init+0x3c>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <HAL_Init+0x3c>)
 8004b8e:	2140      	movs	r1, #64	; 0x40
 8004b90:	430a      	orrs	r2, r1
 8004b92:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b94:	2003      	movs	r0, #3
 8004b96:	f000 f811 	bl	8004bbc <HAL_InitTick>
 8004b9a:	1e03      	subs	r3, r0, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004b9e:	1dfb      	adds	r3, r7, #7
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	701a      	strb	r2, [r3, #0]
 8004ba4:	e001      	b.n	8004baa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004ba6:	f7ff fda5 	bl	80046f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004baa:	1dfb      	adds	r3, r7, #7
 8004bac:	781b      	ldrb	r3, [r3, #0]
}
 8004bae:	0018      	movs	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b002      	add	sp, #8
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	40022000 	.word	0x40022000

08004bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bbc:	b590      	push	{r4, r7, lr}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bc4:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <HAL_InitTick+0x5c>)
 8004bc6:	681c      	ldr	r4, [r3, #0]
 8004bc8:	4b14      	ldr	r3, [pc, #80]	; (8004c1c <HAL_InitTick+0x60>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	0019      	movs	r1, r3
 8004bce:	23fa      	movs	r3, #250	; 0xfa
 8004bd0:	0098      	lsls	r0, r3, #2
 8004bd2:	f7fb fab5 	bl	8000140 <__udivsi3>
 8004bd6:	0003      	movs	r3, r0
 8004bd8:	0019      	movs	r1, r3
 8004bda:	0020      	movs	r0, r4
 8004bdc:	f7fb fab0 	bl	8000140 <__udivsi3>
 8004be0:	0003      	movs	r3, r0
 8004be2:	0018      	movs	r0, r3
 8004be4:	f000 fc83 	bl	80054ee <HAL_SYSTICK_Config>
 8004be8:	1e03      	subs	r3, r0, #0
 8004bea:	d001      	beq.n	8004bf0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e00f      	b.n	8004c10 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d80b      	bhi.n	8004c0e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	425b      	negs	r3, r3
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f000 fc60 	bl	80054c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c04:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_InitTick+0x64>)
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e000      	b.n	8004c10 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
}
 8004c10:	0018      	movs	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b003      	add	sp, #12
 8004c16:	bd90      	pop	{r4, r7, pc}
 8004c18:	20000000 	.word	0x20000000
 8004c1c:	20000008 	.word	0x20000008
 8004c20:	20000004 	.word	0x20000004

08004c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_IncTick+0x1c>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	001a      	movs	r2, r3
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_IncTick+0x20>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	18d2      	adds	r2, r2, r3
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <HAL_IncTick+0x20>)
 8004c36:	601a      	str	r2, [r3, #0]
}
 8004c38:	46c0      	nop			; (mov r8, r8)
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	20000008 	.word	0x20000008
 8004c44:	20000438 	.word	0x20000438

08004c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c4c:	4b02      	ldr	r3, [pc, #8]	; (8004c58 <HAL_GetTick+0x10>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
}
 8004c50:	0018      	movs	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	20000438 	.word	0x20000438

08004c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c64:	f7ff fff0 	bl	8004c48 <HAL_GetTick>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3301      	adds	r3, #1
 8004c74:	d005      	beq.n	8004c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <HAL_Delay+0x44>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	001a      	movs	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	f7ff ffe0 	bl	8004c48 <HAL_GetTick>
 8004c88:	0002      	movs	r2, r0
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d8f7      	bhi.n	8004c84 <HAL_Delay+0x28>
  {
  }
}
 8004c94:	46c0      	nop			; (mov r8, r8)
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b004      	add	sp, #16
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	20000008 	.word	0x20000008

08004ca4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e159      	b.n	8004f6a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2250      	movs	r2, #80	; 0x50
 8004cc8:	2100      	movs	r1, #0
 8004cca:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f7ff fd24 	bl	800471c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	2210      	movs	r2, #16
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d005      	beq.n	8004cec <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004cea:	d00b      	beq.n	8004d04 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf0:	2210      	movs	r2, #16
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2250      	movs	r2, #80	; 0x50
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e132      	b.n	8004f6a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d08:	4a9a      	ldr	r2, [pc, #616]	; (8004f74 <HAL_ADC_Init+0x2d0>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d108      	bne.n	8004d34 <HAL_ADC_Init+0x90>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <HAL_ADC_Init+0x90>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <HAL_ADC_Init+0x92>
 8004d34:	2300      	movs	r3, #0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d149      	bne.n	8004dce <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	23c0      	movs	r3, #192	; 0xc0
 8004d40:	061b      	lsls	r3, r3, #24
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d00b      	beq.n	8004d5e <HAL_ADC_Init+0xba>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	05db      	lsls	r3, r3, #23
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d005      	beq.n	8004d5e <HAL_ADC_Init+0xba>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	2380      	movs	r3, #128	; 0x80
 8004d58:	061b      	lsls	r3, r3, #24
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d111      	bne.n	8004d82 <HAL_ADC_Init+0xde>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	0092      	lsls	r2, r2, #2
 8004d6a:	0892      	lsrs	r2, r2, #2
 8004d6c:	611a      	str	r2, [r3, #16]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6919      	ldr	r1, [r3, #16]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	611a      	str	r2, [r3, #16]
 8004d80:	e014      	b.n	8004dac <HAL_ADC_Init+0x108>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	691a      	ldr	r2, [r3, #16]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	0092      	lsls	r2, r2, #2
 8004d8e:	0892      	lsrs	r2, r2, #2
 8004d90:	611a      	str	r2, [r3, #16]
 8004d92:	4b79      	ldr	r3, [pc, #484]	; (8004f78 <HAL_ADC_Init+0x2d4>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b78      	ldr	r3, [pc, #480]	; (8004f78 <HAL_ADC_Init+0x2d4>)
 8004d98:	4978      	ldr	r1, [pc, #480]	; (8004f7c <HAL_ADC_Init+0x2d8>)
 8004d9a:	400a      	ands	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	4b76      	ldr	r3, [pc, #472]	; (8004f78 <HAL_ADC_Init+0x2d4>)
 8004da0:	6819      	ldr	r1, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	4b74      	ldr	r3, [pc, #464]	; (8004f78 <HAL_ADC_Init+0x2d4>)
 8004da8:	430a      	orrs	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2118      	movs	r1, #24
 8004db8:	438a      	bics	r2, r1
 8004dba:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68d9      	ldr	r1, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004dce:	4b6a      	ldr	r3, [pc, #424]	; (8004f78 <HAL_ADC_Init+0x2d4>)
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4b69      	ldr	r3, [pc, #420]	; (8004f78 <HAL_ADC_Init+0x2d4>)
 8004dd4:	496a      	ldr	r1, [pc, #424]	; (8004f80 <HAL_ADC_Init+0x2dc>)
 8004dd6:	400a      	ands	r2, r1
 8004dd8:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8004dda:	4b67      	ldr	r3, [pc, #412]	; (8004f78 <HAL_ADC_Init+0x2d4>)
 8004ddc:	6819      	ldr	r1, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	065a      	lsls	r2, r3, #25
 8004de4:	4b64      	ldr	r3, [pc, #400]	; (8004f78 <HAL_ADC_Init+0x2d4>)
 8004de6:	430a      	orrs	r2, r1
 8004de8:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	2380      	movs	r3, #128	; 0x80
 8004df2:	055b      	lsls	r3, r3, #21
 8004df4:	4013      	ands	r3, r2
 8004df6:	d108      	bne.n	8004e0a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2180      	movs	r1, #128	; 0x80
 8004e04:	0549      	lsls	r1, r1, #21
 8004e06:	430a      	orrs	r2, r1
 8004e08:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	495b      	ldr	r1, [pc, #364]	; (8004f84 <HAL_ADC_Init+0x2e0>)
 8004e16:	400a      	ands	r2, r1
 8004e18:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68d9      	ldr	r1, [r3, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d101      	bne.n	8004e30 <HAL_ADC_Init+0x18c>
 8004e2c:	2304      	movs	r3, #4
 8004e2e:	e000      	b.n	8004e32 <HAL_ADC_Init+0x18e>
 8004e30:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004e32:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2020      	movs	r0, #32
 8004e38:	5c1b      	ldrb	r3, [r3, r0]
 8004e3a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004e3c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	202c      	movs	r0, #44	; 0x2c
 8004e42:	5c1b      	ldrb	r3, [r3, r0]
 8004e44:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004e46:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004e4c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004e54:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004e5c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e6a:	23c2      	movs	r3, #194	; 0xc2
 8004e6c:	33ff      	adds	r3, #255	; 0xff
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d00b      	beq.n	8004e8a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68d9      	ldr	r1, [r3, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2221      	movs	r2, #33	; 0x21
 8004e8e:	5c9b      	ldrb	r3, [r3, r2]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d11a      	bne.n	8004eca <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	5c9b      	ldrb	r3, [r3, r2]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2180      	movs	r1, #128	; 0x80
 8004eaa:	0249      	lsls	r1, r1, #9
 8004eac:	430a      	orrs	r2, r1
 8004eae:	60da      	str	r2, [r3, #12]
 8004eb0:	e00b      	b.n	8004eca <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d11f      	bne.n	8004f12 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	492a      	ldr	r1, [pc, #168]	; (8004f88 <HAL_ADC_Init+0x2e4>)
 8004ede:	400a      	ands	r2, r1
 8004ee0:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6919      	ldr	r1, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004ef0:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8004ef6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	611a      	str	r2, [r3, #16]
 8004f10:	e00e      	b.n	8004f30 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d107      	bne.n	8004f30 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	438a      	bics	r2, r1
 8004f2e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2107      	movs	r1, #7
 8004f3c:	438a      	bics	r2, r1
 8004f3e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6959      	ldr	r1, [r3, #20]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	4393      	bics	r3, r2
 8004f60:	2201      	movs	r2, #1
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	b002      	add	sp, #8
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	fffffefd 	.word	0xfffffefd
 8004f78:	40012708 	.word	0x40012708
 8004f7c:	ffc3ffff 	.word	0xffc3ffff
 8004f80:	fdffffff 	.word	0xfdffffff
 8004f84:	fffe0219 	.word	0xfffe0219
 8004f88:	fffffc03 	.word	0xfffffc03

08004f8c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004f8c:	b590      	push	{r4, r7, lr}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f94:	230f      	movs	r3, #15
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	2200      	movs	r2, #0
 8004f9a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d138      	bne.n	800501a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2250      	movs	r2, #80	; 0x50
 8004fac:	5c9b      	ldrb	r3, [r3, r2]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <HAL_ADC_Start+0x2a>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e038      	b.n	8005028 <HAL_ADC_Start+0x9c>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2250      	movs	r2, #80	; 0x50
 8004fba:	2101      	movs	r1, #1
 8004fbc:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d007      	beq.n	8004fd6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004fc6:	230f      	movs	r3, #15
 8004fc8:	18fc      	adds	r4, r7, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f000 f95f 	bl	8005290 <ADC_Enable>
 8004fd2:	0003      	movs	r3, r0
 8004fd4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004fd6:	230f      	movs	r3, #15
 8004fd8:	18fb      	adds	r3, r7, r3
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d120      	bne.n	8005022 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe4:	4a12      	ldr	r2, [pc, #72]	; (8005030 <HAL_ADC_Start+0xa4>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2280      	movs	r2, #128	; 0x80
 8004fea:	0052      	lsls	r2, r2, #1
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2250      	movs	r2, #80	; 0x50
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	221c      	movs	r2, #28
 8005006:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2104      	movs	r1, #4
 8005014:	430a      	orrs	r2, r1
 8005016:	609a      	str	r2, [r3, #8]
 8005018:	e003      	b.n	8005022 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800501a:	230f      	movs	r3, #15
 800501c:	18fb      	adds	r3, r7, r3
 800501e:	2202      	movs	r2, #2
 8005020:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005022:	230f      	movs	r3, #15
 8005024:	18fb      	adds	r3, r7, r3
 8005026:	781b      	ldrb	r3, [r3, #0]
}
 8005028:	0018      	movs	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	b005      	add	sp, #20
 800502e:	bd90      	pop	{r4, r7, pc}
 8005030:	fffff0fe 	.word	0xfffff0fe

08005034 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	2b08      	cmp	r3, #8
 800504c:	d102      	bne.n	8005054 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800504e:	2308      	movs	r3, #8
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e014      	b.n	800507e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	4013      	ands	r3, r2
 800505e:	2b01      	cmp	r3, #1
 8005060:	d10b      	bne.n	800507a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	2220      	movs	r2, #32
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2250      	movs	r2, #80	; 0x50
 8005072:	2100      	movs	r1, #0
 8005074:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e072      	b.n	8005160 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800507a:	230c      	movs	r3, #12
 800507c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800507e:	f7ff fde3 	bl	8004c48 <HAL_GetTick>
 8005082:	0003      	movs	r3, r0
 8005084:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005086:	e01f      	b.n	80050c8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	3301      	adds	r3, #1
 800508c:	d01c      	beq.n	80050c8 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d007      	beq.n	80050a4 <HAL_ADC_PollForConversion+0x70>
 8005094:	f7ff fdd8 	bl	8004c48 <HAL_GetTick>
 8005098:	0002      	movs	r2, r0
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d211      	bcs.n	80050c8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4013      	ands	r3, r2
 80050ae:	d10b      	bne.n	80050c8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b4:	2204      	movs	r2, #4
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2250      	movs	r2, #80	; 0x50
 80050c0:	2100      	movs	r1, #0
 80050c2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e04b      	b.n	8005160 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4013      	ands	r3, r2
 80050d2:	d0d9      	beq.n	8005088 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d8:	2280      	movs	r2, #128	; 0x80
 80050da:	0092      	lsls	r2, r2, #2
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	23c0      	movs	r3, #192	; 0xc0
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	4013      	ands	r3, r2
 80050ee:	d12e      	bne.n	800514e <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d129      	bne.n	800514e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2208      	movs	r2, #8
 8005102:	4013      	ands	r3, r2
 8005104:	2b08      	cmp	r3, #8
 8005106:	d122      	bne.n	800514e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	2204      	movs	r2, #4
 8005110:	4013      	ands	r3, r2
 8005112:	d110      	bne.n	8005136 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	210c      	movs	r1, #12
 8005120:	438a      	bics	r2, r1
 8005122:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005128:	4a0f      	ldr	r2, [pc, #60]	; (8005168 <HAL_ADC_PollForConversion+0x134>)
 800512a:	4013      	ands	r3, r2
 800512c:	2201      	movs	r2, #1
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	655a      	str	r2, [r3, #84]	; 0x54
 8005134:	e00b      	b.n	800514e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	2220      	movs	r2, #32
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005146:	2201      	movs	r2, #1
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d103      	bne.n	800515e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	220c      	movs	r2, #12
 800515c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	0018      	movs	r0, r3
 8005162:	46bd      	mov	sp, r7
 8005164:	b004      	add	sp, #16
 8005166:	bd80      	pop	{r7, pc}
 8005168:	fffffefe 	.word	0xfffffefe

0800516c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800517a:	0018      	movs	r0, r3
 800517c:	46bd      	mov	sp, r7
 800517e:	b002      	add	sp, #8
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2250      	movs	r2, #80	; 0x50
 8005192:	5c9b      	ldrb	r3, [r3, r2]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d101      	bne.n	800519c <HAL_ADC_ConfigChannel+0x18>
 8005198:	2302      	movs	r3, #2
 800519a:	e06c      	b.n	8005276 <HAL_ADC_ConfigChannel+0xf2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2250      	movs	r2, #80	; 0x50
 80051a0:	2101      	movs	r1, #1
 80051a2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2204      	movs	r2, #4
 80051ac:	4013      	ands	r3, r2
 80051ae:	d00b      	beq.n	80051c8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b4:	2220      	movs	r2, #32
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2250      	movs	r2, #80	; 0x50
 80051c0:	2100      	movs	r1, #0
 80051c2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e056      	b.n	8005276 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	4a2c      	ldr	r2, [pc, #176]	; (8005280 <HAL_ADC_ConfigChannel+0xfc>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d028      	beq.n	8005224 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	035b      	lsls	r3, r3, #13
 80051de:	0b5a      	lsrs	r2, r3, #13
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	2380      	movs	r3, #128	; 0x80
 80051ee:	02db      	lsls	r3, r3, #11
 80051f0:	4013      	ands	r3, r2
 80051f2:	d009      	beq.n	8005208 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80051f4:	4b23      	ldr	r3, [pc, #140]	; (8005284 <HAL_ADC_ConfigChannel+0x100>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	4b22      	ldr	r3, [pc, #136]	; (8005284 <HAL_ADC_ConfigChannel+0x100>)
 80051fa:	2180      	movs	r1, #128	; 0x80
 80051fc:	0409      	lsls	r1, r1, #16
 80051fe:	430a      	orrs	r2, r1
 8005200:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8005202:	200a      	movs	r0, #10
 8005204:	f000 f8ac 	bl	8005360 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	2380      	movs	r3, #128	; 0x80
 800520e:	029b      	lsls	r3, r3, #10
 8005210:	4013      	ands	r3, r2
 8005212:	d02b      	beq.n	800526c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8005214:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <HAL_ADC_ConfigChannel+0x100>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b1a      	ldr	r3, [pc, #104]	; (8005284 <HAL_ADC_ConfigChannel+0x100>)
 800521a:	2180      	movs	r1, #128	; 0x80
 800521c:	03c9      	lsls	r1, r1, #15
 800521e:	430a      	orrs	r2, r1
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	e023      	b.n	800526c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	035b      	lsls	r3, r3, #13
 8005230:	0b5b      	lsrs	r3, r3, #13
 8005232:	43d9      	mvns	r1, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	400a      	ands	r2, r1
 800523a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	02db      	lsls	r3, r3, #11
 8005244:	4013      	ands	r3, r2
 8005246:	d005      	beq.n	8005254 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8005248:	4b0e      	ldr	r3, [pc, #56]	; (8005284 <HAL_ADC_ConfigChannel+0x100>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	4b0d      	ldr	r3, [pc, #52]	; (8005284 <HAL_ADC_ConfigChannel+0x100>)
 800524e:	490e      	ldr	r1, [pc, #56]	; (8005288 <HAL_ADC_ConfigChannel+0x104>)
 8005250:	400a      	ands	r2, r1
 8005252:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	029b      	lsls	r3, r3, #10
 800525c:	4013      	ands	r3, r2
 800525e:	d005      	beq.n	800526c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8005260:	4b08      	ldr	r3, [pc, #32]	; (8005284 <HAL_ADC_ConfigChannel+0x100>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4b07      	ldr	r3, [pc, #28]	; (8005284 <HAL_ADC_ConfigChannel+0x100>)
 8005266:	4909      	ldr	r1, [pc, #36]	; (800528c <HAL_ADC_ConfigChannel+0x108>)
 8005268:	400a      	ands	r2, r1
 800526a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2250      	movs	r2, #80	; 0x50
 8005270:	2100      	movs	r1, #0
 8005272:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	0018      	movs	r0, r3
 8005278:	46bd      	mov	sp, r7
 800527a:	b002      	add	sp, #8
 800527c:	bd80      	pop	{r7, pc}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	00001001 	.word	0x00001001
 8005284:	40012708 	.word	0x40012708
 8005288:	ff7fffff 	.word	0xff7fffff
 800528c:	ffbfffff 	.word	0xffbfffff

08005290 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	2203      	movs	r2, #3
 80052a4:	4013      	ands	r3, r2
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d108      	bne.n	80052bc <ADC_Enable+0x2c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2201      	movs	r2, #1
 80052b2:	4013      	ands	r3, r2
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <ADC_Enable+0x2c>
 80052b8:	2301      	movs	r3, #1
 80052ba:	e000      	b.n	80052be <ADC_Enable+0x2e>
 80052bc:	2300      	movs	r3, #0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d146      	bne.n	8005350 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	4a24      	ldr	r2, [pc, #144]	; (800535c <ADC_Enable+0xcc>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	d00d      	beq.n	80052ea <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d2:	2210      	movs	r2, #16
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052de:	2201      	movs	r2, #1
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e033      	b.n	8005352 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2101      	movs	r1, #1
 80052f6:	430a      	orrs	r2, r1
 80052f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80052fa:	2001      	movs	r0, #1
 80052fc:	f000 f830 	bl	8005360 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8005300:	f7ff fca2 	bl	8004c48 <HAL_GetTick>
 8005304:	0003      	movs	r3, r0
 8005306:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005308:	e01b      	b.n	8005342 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800530a:	f7ff fc9d 	bl	8004c48 <HAL_GetTick>
 800530e:	0002      	movs	r2, r0
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b0a      	cmp	r3, #10
 8005316:	d914      	bls.n	8005342 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2201      	movs	r2, #1
 8005320:	4013      	ands	r3, r2
 8005322:	2b01      	cmp	r3, #1
 8005324:	d00d      	beq.n	8005342 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532a:	2210      	movs	r2, #16
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005336:	2201      	movs	r2, #1
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e007      	b.n	8005352 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2201      	movs	r2, #1
 800534a:	4013      	ands	r3, r2
 800534c:	2b01      	cmp	r3, #1
 800534e:	d1dc      	bne.n	800530a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	0018      	movs	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	b004      	add	sp, #16
 8005358:	bd80      	pop	{r7, pc}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	80000017 	.word	0x80000017

08005360 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <ADC_DelayMicroSecond+0x38>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	490b      	ldr	r1, [pc, #44]	; (800539c <ADC_DelayMicroSecond+0x3c>)
 800536e:	0018      	movs	r0, r3
 8005370:	f7fa fee6 	bl	8000140 <__udivsi3>
 8005374:	0003      	movs	r3, r0
 8005376:	001a      	movs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4353      	muls	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800537e:	e002      	b.n	8005386 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	3b01      	subs	r3, #1
 8005384:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1f9      	bne.n	8005380 <ADC_DelayMicroSecond+0x20>
  } 
}
 800538c:	46c0      	nop			; (mov r8, r8)
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	46bd      	mov	sp, r7
 8005392:	b004      	add	sp, #16
 8005394:	bd80      	pop	{r7, pc}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	20000000 	.word	0x20000000
 800539c:	000f4240 	.word	0x000f4240

080053a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053a0:	b590      	push	{r4, r7, lr}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	0002      	movs	r2, r0
 80053a8:	6039      	str	r1, [r7, #0]
 80053aa:	1dfb      	adds	r3, r7, #7
 80053ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80053ae:	1dfb      	adds	r3, r7, #7
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b7f      	cmp	r3, #127	; 0x7f
 80053b4:	d828      	bhi.n	8005408 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053b6:	4a2f      	ldr	r2, [pc, #188]	; (8005474 <__NVIC_SetPriority+0xd4>)
 80053b8:	1dfb      	adds	r3, r7, #7
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	b25b      	sxtb	r3, r3
 80053be:	089b      	lsrs	r3, r3, #2
 80053c0:	33c0      	adds	r3, #192	; 0xc0
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	589b      	ldr	r3, [r3, r2]
 80053c6:	1dfa      	adds	r2, r7, #7
 80053c8:	7812      	ldrb	r2, [r2, #0]
 80053ca:	0011      	movs	r1, r2
 80053cc:	2203      	movs	r2, #3
 80053ce:	400a      	ands	r2, r1
 80053d0:	00d2      	lsls	r2, r2, #3
 80053d2:	21ff      	movs	r1, #255	; 0xff
 80053d4:	4091      	lsls	r1, r2
 80053d6:	000a      	movs	r2, r1
 80053d8:	43d2      	mvns	r2, r2
 80053da:	401a      	ands	r2, r3
 80053dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	019b      	lsls	r3, r3, #6
 80053e2:	22ff      	movs	r2, #255	; 0xff
 80053e4:	401a      	ands	r2, r3
 80053e6:	1dfb      	adds	r3, r7, #7
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	0018      	movs	r0, r3
 80053ec:	2303      	movs	r3, #3
 80053ee:	4003      	ands	r3, r0
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053f4:	481f      	ldr	r0, [pc, #124]	; (8005474 <__NVIC_SetPriority+0xd4>)
 80053f6:	1dfb      	adds	r3, r7, #7
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	b25b      	sxtb	r3, r3
 80053fc:	089b      	lsrs	r3, r3, #2
 80053fe:	430a      	orrs	r2, r1
 8005400:	33c0      	adds	r3, #192	; 0xc0
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005406:	e031      	b.n	800546c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005408:	4a1b      	ldr	r2, [pc, #108]	; (8005478 <__NVIC_SetPriority+0xd8>)
 800540a:	1dfb      	adds	r3, r7, #7
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	0019      	movs	r1, r3
 8005410:	230f      	movs	r3, #15
 8005412:	400b      	ands	r3, r1
 8005414:	3b08      	subs	r3, #8
 8005416:	089b      	lsrs	r3, r3, #2
 8005418:	3306      	adds	r3, #6
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	18d3      	adds	r3, r2, r3
 800541e:	3304      	adds	r3, #4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	1dfa      	adds	r2, r7, #7
 8005424:	7812      	ldrb	r2, [r2, #0]
 8005426:	0011      	movs	r1, r2
 8005428:	2203      	movs	r2, #3
 800542a:	400a      	ands	r2, r1
 800542c:	00d2      	lsls	r2, r2, #3
 800542e:	21ff      	movs	r1, #255	; 0xff
 8005430:	4091      	lsls	r1, r2
 8005432:	000a      	movs	r2, r1
 8005434:	43d2      	mvns	r2, r2
 8005436:	401a      	ands	r2, r3
 8005438:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	019b      	lsls	r3, r3, #6
 800543e:	22ff      	movs	r2, #255	; 0xff
 8005440:	401a      	ands	r2, r3
 8005442:	1dfb      	adds	r3, r7, #7
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	0018      	movs	r0, r3
 8005448:	2303      	movs	r3, #3
 800544a:	4003      	ands	r3, r0
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005450:	4809      	ldr	r0, [pc, #36]	; (8005478 <__NVIC_SetPriority+0xd8>)
 8005452:	1dfb      	adds	r3, r7, #7
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	001c      	movs	r4, r3
 8005458:	230f      	movs	r3, #15
 800545a:	4023      	ands	r3, r4
 800545c:	3b08      	subs	r3, #8
 800545e:	089b      	lsrs	r3, r3, #2
 8005460:	430a      	orrs	r2, r1
 8005462:	3306      	adds	r3, #6
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	18c3      	adds	r3, r0, r3
 8005468:	3304      	adds	r3, #4
 800546a:	601a      	str	r2, [r3, #0]
}
 800546c:	46c0      	nop			; (mov r8, r8)
 800546e:	46bd      	mov	sp, r7
 8005470:	b003      	add	sp, #12
 8005472:	bd90      	pop	{r4, r7, pc}
 8005474:	e000e100 	.word	0xe000e100
 8005478:	e000ed00 	.word	0xe000ed00

0800547c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	1e5a      	subs	r2, r3, #1
 8005488:	2380      	movs	r3, #128	; 0x80
 800548a:	045b      	lsls	r3, r3, #17
 800548c:	429a      	cmp	r2, r3
 800548e:	d301      	bcc.n	8005494 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005490:	2301      	movs	r3, #1
 8005492:	e010      	b.n	80054b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005494:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <SysTick_Config+0x44>)
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	3a01      	subs	r2, #1
 800549a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800549c:	2301      	movs	r3, #1
 800549e:	425b      	negs	r3, r3
 80054a0:	2103      	movs	r1, #3
 80054a2:	0018      	movs	r0, r3
 80054a4:	f7ff ff7c 	bl	80053a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <SysTick_Config+0x44>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054ae:	4b04      	ldr	r3, [pc, #16]	; (80054c0 <SysTick_Config+0x44>)
 80054b0:	2207      	movs	r2, #7
 80054b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	0018      	movs	r0, r3
 80054b8:	46bd      	mov	sp, r7
 80054ba:	b002      	add	sp, #8
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	e000e010 	.word	0xe000e010

080054c4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	607a      	str	r2, [r7, #4]
 80054ce:	210f      	movs	r1, #15
 80054d0:	187b      	adds	r3, r7, r1
 80054d2:	1c02      	adds	r2, r0, #0
 80054d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	187b      	adds	r3, r7, r1
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	b25b      	sxtb	r3, r3
 80054de:	0011      	movs	r1, r2
 80054e0:	0018      	movs	r0, r3
 80054e2:	f7ff ff5d 	bl	80053a0 <__NVIC_SetPriority>
}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	46bd      	mov	sp, r7
 80054ea:	b004      	add	sp, #16
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	0018      	movs	r0, r3
 80054fa:	f7ff ffbf 	bl	800547c <SysTick_Config>
 80054fe:	0003      	movs	r3, r0
}
 8005500:	0018      	movs	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	b002      	add	sp, #8
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800551a:	2300      	movs	r3, #0
 800551c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800551e:	e155      	b.n	80057cc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2101      	movs	r1, #1
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4091      	lsls	r1, r2
 800552a:	000a      	movs	r2, r1
 800552c:	4013      	ands	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d100      	bne.n	8005538 <HAL_GPIO_Init+0x30>
 8005536:	e146      	b.n	80057c6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2203      	movs	r2, #3
 800553e:	4013      	ands	r3, r2
 8005540:	2b01      	cmp	r3, #1
 8005542:	d005      	beq.n	8005550 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2203      	movs	r2, #3
 800554a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800554c:	2b02      	cmp	r3, #2
 800554e:	d130      	bne.n	80055b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	2203      	movs	r2, #3
 800555c:	409a      	lsls	r2, r3
 800555e:	0013      	movs	r3, r2
 8005560:	43da      	mvns	r2, r3
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4013      	ands	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	409a      	lsls	r2, r3
 8005572:	0013      	movs	r3, r2
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005586:	2201      	movs	r2, #1
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	409a      	lsls	r2, r3
 800558c:	0013      	movs	r3, r2
 800558e:	43da      	mvns	r2, r3
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4013      	ands	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	091b      	lsrs	r3, r3, #4
 800559c:	2201      	movs	r2, #1
 800559e:	401a      	ands	r2, r3
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	409a      	lsls	r2, r3
 80055a4:	0013      	movs	r3, r2
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2203      	movs	r2, #3
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d017      	beq.n	80055ee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	2203      	movs	r2, #3
 80055ca:	409a      	lsls	r2, r3
 80055cc:	0013      	movs	r3, r2
 80055ce:	43da      	mvns	r2, r3
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	4013      	ands	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	409a      	lsls	r2, r3
 80055e0:	0013      	movs	r3, r2
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2203      	movs	r2, #3
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d123      	bne.n	8005642 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	08da      	lsrs	r2, r3, #3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3208      	adds	r2, #8
 8005602:	0092      	lsls	r2, r2, #2
 8005604:	58d3      	ldr	r3, [r2, r3]
 8005606:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2207      	movs	r2, #7
 800560c:	4013      	ands	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	220f      	movs	r2, #15
 8005612:	409a      	lsls	r2, r3
 8005614:	0013      	movs	r3, r2
 8005616:	43da      	mvns	r2, r3
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	4013      	ands	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2107      	movs	r1, #7
 8005626:	400b      	ands	r3, r1
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	409a      	lsls	r2, r3
 800562c:	0013      	movs	r3, r2
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	08da      	lsrs	r2, r3, #3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3208      	adds	r2, #8
 800563c:	0092      	lsls	r2, r2, #2
 800563e:	6939      	ldr	r1, [r7, #16]
 8005640:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	2203      	movs	r2, #3
 800564e:	409a      	lsls	r2, r3
 8005650:	0013      	movs	r3, r2
 8005652:	43da      	mvns	r2, r3
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4013      	ands	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2203      	movs	r2, #3
 8005660:	401a      	ands	r2, r3
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	409a      	lsls	r2, r3
 8005668:	0013      	movs	r3, r2
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	23c0      	movs	r3, #192	; 0xc0
 800567c:	029b      	lsls	r3, r3, #10
 800567e:	4013      	ands	r3, r2
 8005680:	d100      	bne.n	8005684 <HAL_GPIO_Init+0x17c>
 8005682:	e0a0      	b.n	80057c6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005684:	4b57      	ldr	r3, [pc, #348]	; (80057e4 <HAL_GPIO_Init+0x2dc>)
 8005686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005688:	4b56      	ldr	r3, [pc, #344]	; (80057e4 <HAL_GPIO_Init+0x2dc>)
 800568a:	2101      	movs	r1, #1
 800568c:	430a      	orrs	r2, r1
 800568e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8005690:	4a55      	ldr	r2, [pc, #340]	; (80057e8 <HAL_GPIO_Init+0x2e0>)
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	089b      	lsrs	r3, r3, #2
 8005696:	3302      	adds	r3, #2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	589b      	ldr	r3, [r3, r2]
 800569c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2203      	movs	r2, #3
 80056a2:	4013      	ands	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	220f      	movs	r2, #15
 80056a8:	409a      	lsls	r2, r3
 80056aa:	0013      	movs	r3, r2
 80056ac:	43da      	mvns	r2, r3
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	4013      	ands	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	23a0      	movs	r3, #160	; 0xa0
 80056b8:	05db      	lsls	r3, r3, #23
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d01f      	beq.n	80056fe <HAL_GPIO_Init+0x1f6>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a4a      	ldr	r2, [pc, #296]	; (80057ec <HAL_GPIO_Init+0x2e4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d019      	beq.n	80056fa <HAL_GPIO_Init+0x1f2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a49      	ldr	r2, [pc, #292]	; (80057f0 <HAL_GPIO_Init+0x2e8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <HAL_GPIO_Init+0x1ee>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a48      	ldr	r2, [pc, #288]	; (80057f4 <HAL_GPIO_Init+0x2ec>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00d      	beq.n	80056f2 <HAL_GPIO_Init+0x1ea>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a47      	ldr	r2, [pc, #284]	; (80057f8 <HAL_GPIO_Init+0x2f0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d007      	beq.n	80056ee <HAL_GPIO_Init+0x1e6>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a46      	ldr	r2, [pc, #280]	; (80057fc <HAL_GPIO_Init+0x2f4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d101      	bne.n	80056ea <HAL_GPIO_Init+0x1e2>
 80056e6:	2305      	movs	r3, #5
 80056e8:	e00a      	b.n	8005700 <HAL_GPIO_Init+0x1f8>
 80056ea:	2306      	movs	r3, #6
 80056ec:	e008      	b.n	8005700 <HAL_GPIO_Init+0x1f8>
 80056ee:	2304      	movs	r3, #4
 80056f0:	e006      	b.n	8005700 <HAL_GPIO_Init+0x1f8>
 80056f2:	2303      	movs	r3, #3
 80056f4:	e004      	b.n	8005700 <HAL_GPIO_Init+0x1f8>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e002      	b.n	8005700 <HAL_GPIO_Init+0x1f8>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <HAL_GPIO_Init+0x1f8>
 80056fe:	2300      	movs	r3, #0
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	2103      	movs	r1, #3
 8005704:	400a      	ands	r2, r1
 8005706:	0092      	lsls	r2, r2, #2
 8005708:	4093      	lsls	r3, r2
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005710:	4935      	ldr	r1, [pc, #212]	; (80057e8 <HAL_GPIO_Init+0x2e0>)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	089b      	lsrs	r3, r3, #2
 8005716:	3302      	adds	r3, #2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800571e:	4b38      	ldr	r3, [pc, #224]	; (8005800 <HAL_GPIO_Init+0x2f8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	43da      	mvns	r2, r3
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4013      	ands	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	2380      	movs	r3, #128	; 0x80
 8005734:	025b      	lsls	r3, r3, #9
 8005736:	4013      	ands	r3, r2
 8005738:	d003      	beq.n	8005742 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005742:	4b2f      	ldr	r3, [pc, #188]	; (8005800 <HAL_GPIO_Init+0x2f8>)
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005748:	4b2d      	ldr	r3, [pc, #180]	; (8005800 <HAL_GPIO_Init+0x2f8>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	43da      	mvns	r2, r3
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4013      	ands	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	2380      	movs	r3, #128	; 0x80
 800575e:	029b      	lsls	r3, r3, #10
 8005760:	4013      	ands	r3, r2
 8005762:	d003      	beq.n	800576c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800576c:	4b24      	ldr	r3, [pc, #144]	; (8005800 <HAL_GPIO_Init+0x2f8>)
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005772:	4b23      	ldr	r3, [pc, #140]	; (8005800 <HAL_GPIO_Init+0x2f8>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	43da      	mvns	r2, r3
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	4013      	ands	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	2380      	movs	r3, #128	; 0x80
 8005788:	035b      	lsls	r3, r3, #13
 800578a:	4013      	ands	r3, r2
 800578c:	d003      	beq.n	8005796 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005796:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <HAL_GPIO_Init+0x2f8>)
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800579c:	4b18      	ldr	r3, [pc, #96]	; (8005800 <HAL_GPIO_Init+0x2f8>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	43da      	mvns	r2, r3
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4013      	ands	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	2380      	movs	r3, #128	; 0x80
 80057b2:	039b      	lsls	r3, r3, #14
 80057b4:	4013      	ands	r3, r2
 80057b6:	d003      	beq.n	80057c0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80057c0:	4b0f      	ldr	r3, [pc, #60]	; (8005800 <HAL_GPIO_Init+0x2f8>)
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	3301      	adds	r3, #1
 80057ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	40da      	lsrs	r2, r3
 80057d4:	1e13      	subs	r3, r2, #0
 80057d6:	d000      	beq.n	80057da <HAL_GPIO_Init+0x2d2>
 80057d8:	e6a2      	b.n	8005520 <HAL_GPIO_Init+0x18>
  }
}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	46c0      	nop			; (mov r8, r8)
 80057de:	46bd      	mov	sp, r7
 80057e0:	b006      	add	sp, #24
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40021000 	.word	0x40021000
 80057e8:	40010000 	.word	0x40010000
 80057ec:	50000400 	.word	0x50000400
 80057f0:	50000800 	.word	0x50000800
 80057f4:	50000c00 	.word	0x50000c00
 80057f8:	50001000 	.word	0x50001000
 80057fc:	50001c00 	.word	0x50001c00
 8005800:	40010400 	.word	0x40010400

08005804 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	000a      	movs	r2, r1
 800580e:	1cbb      	adds	r3, r7, #2
 8005810:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	1cba      	adds	r2, r7, #2
 8005818:	8812      	ldrh	r2, [r2, #0]
 800581a:	4013      	ands	r3, r2
 800581c:	d004      	beq.n	8005828 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800581e:	230f      	movs	r3, #15
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	2201      	movs	r2, #1
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	e003      	b.n	8005830 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005828:	230f      	movs	r3, #15
 800582a:	18fb      	adds	r3, r7, r3
 800582c:	2200      	movs	r2, #0
 800582e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005830:	230f      	movs	r3, #15
 8005832:	18fb      	adds	r3, r7, r3
 8005834:	781b      	ldrb	r3, [r3, #0]
}
 8005836:	0018      	movs	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	b004      	add	sp, #16
 800583c:	bd80      	pop	{r7, pc}

0800583e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	0008      	movs	r0, r1
 8005848:	0011      	movs	r1, r2
 800584a:	1cbb      	adds	r3, r7, #2
 800584c:	1c02      	adds	r2, r0, #0
 800584e:	801a      	strh	r2, [r3, #0]
 8005850:	1c7b      	adds	r3, r7, #1
 8005852:	1c0a      	adds	r2, r1, #0
 8005854:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005856:	1c7b      	adds	r3, r7, #1
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d004      	beq.n	8005868 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800585e:	1cbb      	adds	r3, r7, #2
 8005860:	881a      	ldrh	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005866:	e003      	b.n	8005870 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005868:	1cbb      	adds	r3, r7, #2
 800586a:	881a      	ldrh	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005870:	46c0      	nop			; (mov r8, r8)
 8005872:	46bd      	mov	sp, r7
 8005874:	b002      	add	sp, #8
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e082      	b.n	8005990 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2241      	movs	r2, #65	; 0x41
 800588e:	5c9b      	ldrb	r3, [r3, r2]
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d107      	bne.n	80058a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2240      	movs	r2, #64	; 0x40
 800589a:	2100      	movs	r1, #0
 800589c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	0018      	movs	r0, r3
 80058a2:	f7fe ff95 	bl	80047d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2241      	movs	r2, #65	; 0x41
 80058aa:	2124      	movs	r1, #36	; 0x24
 80058ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2101      	movs	r1, #1
 80058ba:	438a      	bics	r2, r1
 80058bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4934      	ldr	r1, [pc, #208]	; (8005998 <HAL_I2C_Init+0x120>)
 80058c8:	400a      	ands	r2, r1
 80058ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4931      	ldr	r1, [pc, #196]	; (800599c <HAL_I2C_Init+0x124>)
 80058d8:	400a      	ands	r2, r1
 80058da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d108      	bne.n	80058f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2180      	movs	r1, #128	; 0x80
 80058ee:	0209      	lsls	r1, r1, #8
 80058f0:	430a      	orrs	r2, r1
 80058f2:	609a      	str	r2, [r3, #8]
 80058f4:	e007      	b.n	8005906 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2184      	movs	r1, #132	; 0x84
 8005900:	0209      	lsls	r1, r1, #8
 8005902:	430a      	orrs	r2, r1
 8005904:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	2b02      	cmp	r3, #2
 800590c:	d104      	bne.n	8005918 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2280      	movs	r2, #128	; 0x80
 8005914:	0112      	lsls	r2, r2, #4
 8005916:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	491f      	ldr	r1, [pc, #124]	; (80059a0 <HAL_I2C_Init+0x128>)
 8005924:	430a      	orrs	r2, r1
 8005926:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	491a      	ldr	r1, [pc, #104]	; (800599c <HAL_I2C_Init+0x124>)
 8005934:	400a      	ands	r2, r1
 8005936:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	431a      	orrs	r2, r3
 8005942:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69d9      	ldr	r1, [r3, #28]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1a      	ldr	r2, [r3, #32]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2101      	movs	r1, #1
 800596e:	430a      	orrs	r2, r1
 8005970:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2241      	movs	r2, #65	; 0x41
 800597c:	2120      	movs	r1, #32
 800597e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2242      	movs	r2, #66	; 0x42
 800598a:	2100      	movs	r1, #0
 800598c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	0018      	movs	r0, r3
 8005992:	46bd      	mov	sp, r7
 8005994:	b002      	add	sp, #8
 8005996:	bd80      	pop	{r7, pc}
 8005998:	f0ffffff 	.word	0xf0ffffff
 800599c:	ffff7fff 	.word	0xffff7fff
 80059a0:	02008000 	.word	0x02008000

080059a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a4:	b590      	push	{r4, r7, lr}
 80059a6:	b089      	sub	sp, #36	; 0x24
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	000c      	movs	r4, r1
 80059ae:	0010      	movs	r0, r2
 80059b0:	0019      	movs	r1, r3
 80059b2:	230a      	movs	r3, #10
 80059b4:	18fb      	adds	r3, r7, r3
 80059b6:	1c22      	adds	r2, r4, #0
 80059b8:	801a      	strh	r2, [r3, #0]
 80059ba:	2308      	movs	r3, #8
 80059bc:	18fb      	adds	r3, r7, r3
 80059be:	1c02      	adds	r2, r0, #0
 80059c0:	801a      	strh	r2, [r3, #0]
 80059c2:	1dbb      	adds	r3, r7, #6
 80059c4:	1c0a      	adds	r2, r1, #0
 80059c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2241      	movs	r2, #65	; 0x41
 80059cc:	5c9b      	ldrb	r3, [r3, r2]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	d000      	beq.n	80059d6 <HAL_I2C_Mem_Write+0x32>
 80059d4:	e10c      	b.n	8005bf0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d004      	beq.n	80059e6 <HAL_I2C_Mem_Write+0x42>
 80059dc:	232c      	movs	r3, #44	; 0x2c
 80059de:	18fb      	adds	r3, r7, r3
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d105      	bne.n	80059f2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2280      	movs	r2, #128	; 0x80
 80059ea:	0092      	lsls	r2, r2, #2
 80059ec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e0ff      	b.n	8005bf2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2240      	movs	r2, #64	; 0x40
 80059f6:	5c9b      	ldrb	r3, [r3, r2]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_I2C_Mem_Write+0x5c>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e0f8      	b.n	8005bf2 <HAL_I2C_Mem_Write+0x24e>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2240      	movs	r2, #64	; 0x40
 8005a04:	2101      	movs	r1, #1
 8005a06:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a08:	f7ff f91e 	bl	8004c48 <HAL_GetTick>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a10:	2380      	movs	r3, #128	; 0x80
 8005a12:	0219      	lsls	r1, r3, #8
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	2319      	movs	r3, #25
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f000 fb0b 	bl	8006038 <I2C_WaitOnFlagUntilTimeout>
 8005a22:	1e03      	subs	r3, r0, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e0e3      	b.n	8005bf2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2241      	movs	r2, #65	; 0x41
 8005a2e:	2121      	movs	r1, #33	; 0x21
 8005a30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2242      	movs	r2, #66	; 0x42
 8005a36:	2140      	movs	r1, #64	; 0x40
 8005a38:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	222c      	movs	r2, #44	; 0x2c
 8005a4a:	18ba      	adds	r2, r7, r2
 8005a4c:	8812      	ldrh	r2, [r2, #0]
 8005a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a56:	1dbb      	adds	r3, r7, #6
 8005a58:	881c      	ldrh	r4, [r3, #0]
 8005a5a:	2308      	movs	r3, #8
 8005a5c:	18fb      	adds	r3, r7, r3
 8005a5e:	881a      	ldrh	r2, [r3, #0]
 8005a60:	230a      	movs	r3, #10
 8005a62:	18fb      	adds	r3, r7, r3
 8005a64:	8819      	ldrh	r1, [r3, #0]
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	0023      	movs	r3, r4
 8005a72:	f000 f9f9 	bl	8005e68 <I2C_RequestMemoryWrite>
 8005a76:	1e03      	subs	r3, r0, #0
 8005a78:	d005      	beq.n	8005a86 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2240      	movs	r2, #64	; 0x40
 8005a7e:	2100      	movs	r1, #0
 8005a80:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e0b5      	b.n	8005bf2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	2bff      	cmp	r3, #255	; 0xff
 8005a8e:	d911      	bls.n	8005ab4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	22ff      	movs	r2, #255	; 0xff
 8005a94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	2380      	movs	r3, #128	; 0x80
 8005a9e:	045c      	lsls	r4, r3, #17
 8005aa0:	230a      	movs	r3, #10
 8005aa2:	18fb      	adds	r3, r7, r3
 8005aa4:	8819      	ldrh	r1, [r3, #0]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	0023      	movs	r3, r4
 8005aae:	f000 fbf7 	bl	80062a0 <I2C_TransferConfig>
 8005ab2:	e012      	b.n	8005ada <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	2380      	movs	r3, #128	; 0x80
 8005ac6:	049c      	lsls	r4, r3, #18
 8005ac8:	230a      	movs	r3, #10
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	8819      	ldrh	r1, [r3, #0]
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	0023      	movs	r3, r4
 8005ad6:	f000 fbe3 	bl	80062a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f000 fae8 	bl	80060b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ae6:	1e03      	subs	r3, r0, #0
 8005ae8:	d001      	beq.n	8005aee <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e081      	b.n	8005bf2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	781a      	ldrb	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d03a      	beq.n	8005b9e <HAL_I2C_Mem_Write+0x1fa>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d136      	bne.n	8005b9e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	0013      	movs	r3, r2
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2180      	movs	r1, #128	; 0x80
 8005b3e:	f000 fa7b 	bl	8006038 <I2C_WaitOnFlagUntilTimeout>
 8005b42:	1e03      	subs	r3, r0, #0
 8005b44:	d001      	beq.n	8005b4a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e053      	b.n	8005bf2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2bff      	cmp	r3, #255	; 0xff
 8005b52:	d911      	bls.n	8005b78 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	22ff      	movs	r2, #255	; 0xff
 8005b58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	2380      	movs	r3, #128	; 0x80
 8005b62:	045c      	lsls	r4, r3, #17
 8005b64:	230a      	movs	r3, #10
 8005b66:	18fb      	adds	r3, r7, r3
 8005b68:	8819      	ldrh	r1, [r3, #0]
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	0023      	movs	r3, r4
 8005b72:	f000 fb95 	bl	80062a0 <I2C_TransferConfig>
 8005b76:	e012      	b.n	8005b9e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	049c      	lsls	r4, r3, #18
 8005b8c:	230a      	movs	r3, #10
 8005b8e:	18fb      	adds	r3, r7, r3
 8005b90:	8819      	ldrh	r1, [r3, #0]
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	2300      	movs	r3, #0
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	0023      	movs	r3, r4
 8005b9a:	f000 fb81 	bl	80062a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d198      	bne.n	8005ada <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	0018      	movs	r0, r3
 8005bb0:	f000 fac0 	bl	8006134 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bb4:	1e03      	subs	r3, r0, #0
 8005bb6:	d001      	beq.n	8005bbc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e01a      	b.n	8005bf2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	490b      	ldr	r1, [pc, #44]	; (8005bfc <HAL_I2C_Mem_Write+0x258>)
 8005bd0:	400a      	ands	r2, r1
 8005bd2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2241      	movs	r2, #65	; 0x41
 8005bd8:	2120      	movs	r1, #32
 8005bda:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2242      	movs	r2, #66	; 0x42
 8005be0:	2100      	movs	r1, #0
 8005be2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2240      	movs	r2, #64	; 0x40
 8005be8:	2100      	movs	r1, #0
 8005bea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	e000      	b.n	8005bf2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005bf0:	2302      	movs	r3, #2
  }
}
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	b007      	add	sp, #28
 8005bf8:	bd90      	pop	{r4, r7, pc}
 8005bfa:	46c0      	nop			; (mov r8, r8)
 8005bfc:	fe00e800 	.word	0xfe00e800

08005c00 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c00:	b590      	push	{r4, r7, lr}
 8005c02:	b089      	sub	sp, #36	; 0x24
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	000c      	movs	r4, r1
 8005c0a:	0010      	movs	r0, r2
 8005c0c:	0019      	movs	r1, r3
 8005c0e:	230a      	movs	r3, #10
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	1c22      	adds	r2, r4, #0
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	2308      	movs	r3, #8
 8005c18:	18fb      	adds	r3, r7, r3
 8005c1a:	1c02      	adds	r2, r0, #0
 8005c1c:	801a      	strh	r2, [r3, #0]
 8005c1e:	1dbb      	adds	r3, r7, #6
 8005c20:	1c0a      	adds	r2, r1, #0
 8005c22:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2241      	movs	r2, #65	; 0x41
 8005c28:	5c9b      	ldrb	r3, [r3, r2]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d000      	beq.n	8005c32 <HAL_I2C_Mem_Read+0x32>
 8005c30:	e110      	b.n	8005e54 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d004      	beq.n	8005c42 <HAL_I2C_Mem_Read+0x42>
 8005c38:	232c      	movs	r3, #44	; 0x2c
 8005c3a:	18fb      	adds	r3, r7, r3
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d105      	bne.n	8005c4e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2280      	movs	r2, #128	; 0x80
 8005c46:	0092      	lsls	r2, r2, #2
 8005c48:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e103      	b.n	8005e56 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2240      	movs	r2, #64	; 0x40
 8005c52:	5c9b      	ldrb	r3, [r3, r2]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <HAL_I2C_Mem_Read+0x5c>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e0fc      	b.n	8005e56 <HAL_I2C_Mem_Read+0x256>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2240      	movs	r2, #64	; 0x40
 8005c60:	2101      	movs	r1, #1
 8005c62:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c64:	f7fe fff0 	bl	8004c48 <HAL_GetTick>
 8005c68:	0003      	movs	r3, r0
 8005c6a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c6c:	2380      	movs	r3, #128	; 0x80
 8005c6e:	0219      	lsls	r1, r3, #8
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	2319      	movs	r3, #25
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f000 f9dd 	bl	8006038 <I2C_WaitOnFlagUntilTimeout>
 8005c7e:	1e03      	subs	r3, r0, #0
 8005c80:	d001      	beq.n	8005c86 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e0e7      	b.n	8005e56 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2241      	movs	r2, #65	; 0x41
 8005c8a:	2122      	movs	r1, #34	; 0x22
 8005c8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2242      	movs	r2, #66	; 0x42
 8005c92:	2140      	movs	r1, #64	; 0x40
 8005c94:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	222c      	movs	r2, #44	; 0x2c
 8005ca6:	18ba      	adds	r2, r7, r2
 8005ca8:	8812      	ldrh	r2, [r2, #0]
 8005caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cb2:	1dbb      	adds	r3, r7, #6
 8005cb4:	881c      	ldrh	r4, [r3, #0]
 8005cb6:	2308      	movs	r3, #8
 8005cb8:	18fb      	adds	r3, r7, r3
 8005cba:	881a      	ldrh	r2, [r3, #0]
 8005cbc:	230a      	movs	r3, #10
 8005cbe:	18fb      	adds	r3, r7, r3
 8005cc0:	8819      	ldrh	r1, [r3, #0]
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	0023      	movs	r3, r4
 8005cce:	f000 f92f 	bl	8005f30 <I2C_RequestMemoryRead>
 8005cd2:	1e03      	subs	r3, r0, #0
 8005cd4:	d005      	beq.n	8005ce2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2240      	movs	r2, #64	; 0x40
 8005cda:	2100      	movs	r1, #0
 8005cdc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e0b9      	b.n	8005e56 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2bff      	cmp	r3, #255	; 0xff
 8005cea:	d911      	bls.n	8005d10 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	22ff      	movs	r2, #255	; 0xff
 8005cf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	2380      	movs	r3, #128	; 0x80
 8005cfa:	045c      	lsls	r4, r3, #17
 8005cfc:	230a      	movs	r3, #10
 8005cfe:	18fb      	adds	r3, r7, r3
 8005d00:	8819      	ldrh	r1, [r3, #0]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	4b56      	ldr	r3, [pc, #344]	; (8005e60 <HAL_I2C_Mem_Read+0x260>)
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	0023      	movs	r3, r4
 8005d0a:	f000 fac9 	bl	80062a0 <I2C_TransferConfig>
 8005d0e:	e012      	b.n	8005d36 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	2380      	movs	r3, #128	; 0x80
 8005d22:	049c      	lsls	r4, r3, #18
 8005d24:	230a      	movs	r3, #10
 8005d26:	18fb      	adds	r3, r7, r3
 8005d28:	8819      	ldrh	r1, [r3, #0]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	4b4c      	ldr	r3, [pc, #304]	; (8005e60 <HAL_I2C_Mem_Read+0x260>)
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	0023      	movs	r3, r4
 8005d32:	f000 fab5 	bl	80062a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	0013      	movs	r3, r2
 8005d40:	2200      	movs	r2, #0
 8005d42:	2104      	movs	r1, #4
 8005d44:	f000 f978 	bl	8006038 <I2C_WaitOnFlagUntilTimeout>
 8005d48:	1e03      	subs	r3, r0, #0
 8005d4a:	d001      	beq.n	8005d50 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e082      	b.n	8005e56 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d03a      	beq.n	8005e02 <HAL_I2C_Mem_Read+0x202>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d136      	bne.n	8005e02 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	0013      	movs	r3, r2
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2180      	movs	r1, #128	; 0x80
 8005da2:	f000 f949 	bl	8006038 <I2C_WaitOnFlagUntilTimeout>
 8005da6:	1e03      	subs	r3, r0, #0
 8005da8:	d001      	beq.n	8005dae <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e053      	b.n	8005e56 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2bff      	cmp	r3, #255	; 0xff
 8005db6:	d911      	bls.n	8005ddc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	22ff      	movs	r2, #255	; 0xff
 8005dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	2380      	movs	r3, #128	; 0x80
 8005dc6:	045c      	lsls	r4, r3, #17
 8005dc8:	230a      	movs	r3, #10
 8005dca:	18fb      	adds	r3, r7, r3
 8005dcc:	8819      	ldrh	r1, [r3, #0]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	0023      	movs	r3, r4
 8005dd6:	f000 fa63 	bl	80062a0 <I2C_TransferConfig>
 8005dda:	e012      	b.n	8005e02 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	2380      	movs	r3, #128	; 0x80
 8005dee:	049c      	lsls	r4, r3, #18
 8005df0:	230a      	movs	r3, #10
 8005df2:	18fb      	adds	r3, r7, r3
 8005df4:	8819      	ldrh	r1, [r3, #0]
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	0023      	movs	r3, r4
 8005dfe:	f000 fa4f 	bl	80062a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d194      	bne.n	8005d36 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	0018      	movs	r0, r3
 8005e14:	f000 f98e 	bl	8006134 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e18:	1e03      	subs	r3, r0, #0
 8005e1a:	d001      	beq.n	8005e20 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e01a      	b.n	8005e56 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2220      	movs	r2, #32
 8005e26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	490c      	ldr	r1, [pc, #48]	; (8005e64 <HAL_I2C_Mem_Read+0x264>)
 8005e34:	400a      	ands	r2, r1
 8005e36:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2241      	movs	r2, #65	; 0x41
 8005e3c:	2120      	movs	r1, #32
 8005e3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2242      	movs	r2, #66	; 0x42
 8005e44:	2100      	movs	r1, #0
 8005e46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2240      	movs	r2, #64	; 0x40
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	e000      	b.n	8005e56 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005e54:	2302      	movs	r3, #2
  }
}
 8005e56:	0018      	movs	r0, r3
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	b007      	add	sp, #28
 8005e5c:	bd90      	pop	{r4, r7, pc}
 8005e5e:	46c0      	nop			; (mov r8, r8)
 8005e60:	80002400 	.word	0x80002400
 8005e64:	fe00e800 	.word	0xfe00e800

08005e68 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005e68:	b5b0      	push	{r4, r5, r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	000c      	movs	r4, r1
 8005e72:	0010      	movs	r0, r2
 8005e74:	0019      	movs	r1, r3
 8005e76:	250a      	movs	r5, #10
 8005e78:	197b      	adds	r3, r7, r5
 8005e7a:	1c22      	adds	r2, r4, #0
 8005e7c:	801a      	strh	r2, [r3, #0]
 8005e7e:	2308      	movs	r3, #8
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	1c02      	adds	r2, r0, #0
 8005e84:	801a      	strh	r2, [r3, #0]
 8005e86:	1dbb      	adds	r3, r7, #6
 8005e88:	1c0a      	adds	r2, r1, #0
 8005e8a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005e8c:	1dbb      	adds	r3, r7, #6
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	2380      	movs	r3, #128	; 0x80
 8005e94:	045c      	lsls	r4, r3, #17
 8005e96:	197b      	adds	r3, r7, r5
 8005e98:	8819      	ldrh	r1, [r3, #0]
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	4b23      	ldr	r3, [pc, #140]	; (8005f2c <I2C_RequestMemoryWrite+0xc4>)
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	0023      	movs	r3, r4
 8005ea2:	f000 f9fd 	bl	80062a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea8:	6a39      	ldr	r1, [r7, #32]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	0018      	movs	r0, r3
 8005eae:	f000 f902 	bl	80060b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005eb2:	1e03      	subs	r3, r0, #0
 8005eb4:	d001      	beq.n	8005eba <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e033      	b.n	8005f22 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eba:	1dbb      	adds	r3, r7, #6
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d107      	bne.n	8005ed2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ec2:	2308      	movs	r3, #8
 8005ec4:	18fb      	adds	r3, r7, r3
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	629a      	str	r2, [r3, #40]	; 0x28
 8005ed0:	e019      	b.n	8005f06 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ed2:	2308      	movs	r3, #8
 8005ed4:	18fb      	adds	r3, r7, r3
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	0a1b      	lsrs	r3, r3, #8
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee6:	6a39      	ldr	r1, [r7, #32]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	0018      	movs	r0, r3
 8005eec:	f000 f8e3 	bl	80060b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ef0:	1e03      	subs	r3, r0, #0
 8005ef2:	d001      	beq.n	8005ef8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e014      	b.n	8005f22 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ef8:	2308      	movs	r3, #8
 8005efa:	18fb      	adds	r3, r7, r3
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005f06:	6a3a      	ldr	r2, [r7, #32]
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	0013      	movs	r3, r2
 8005f10:	2200      	movs	r2, #0
 8005f12:	2180      	movs	r1, #128	; 0x80
 8005f14:	f000 f890 	bl	8006038 <I2C_WaitOnFlagUntilTimeout>
 8005f18:	1e03      	subs	r3, r0, #0
 8005f1a:	d001      	beq.n	8005f20 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e000      	b.n	8005f22 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	0018      	movs	r0, r3
 8005f24:	46bd      	mov	sp, r7
 8005f26:	b004      	add	sp, #16
 8005f28:	bdb0      	pop	{r4, r5, r7, pc}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	80002000 	.word	0x80002000

08005f30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005f30:	b5b0      	push	{r4, r5, r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af02      	add	r7, sp, #8
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	000c      	movs	r4, r1
 8005f3a:	0010      	movs	r0, r2
 8005f3c:	0019      	movs	r1, r3
 8005f3e:	250a      	movs	r5, #10
 8005f40:	197b      	adds	r3, r7, r5
 8005f42:	1c22      	adds	r2, r4, #0
 8005f44:	801a      	strh	r2, [r3, #0]
 8005f46:	2308      	movs	r3, #8
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	1c02      	adds	r2, r0, #0
 8005f4c:	801a      	strh	r2, [r3, #0]
 8005f4e:	1dbb      	adds	r3, r7, #6
 8005f50:	1c0a      	adds	r2, r1, #0
 8005f52:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005f54:	1dbb      	adds	r3, r7, #6
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	197b      	adds	r3, r7, r5
 8005f5c:	8819      	ldrh	r1, [r3, #0]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	4b23      	ldr	r3, [pc, #140]	; (8005ff0 <I2C_RequestMemoryRead+0xc0>)
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	2300      	movs	r3, #0
 8005f66:	f000 f99b 	bl	80062a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6c:	6a39      	ldr	r1, [r7, #32]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	0018      	movs	r0, r3
 8005f72:	f000 f8a0 	bl	80060b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f76:	1e03      	subs	r3, r0, #0
 8005f78:	d001      	beq.n	8005f7e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e033      	b.n	8005fe6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f7e:	1dbb      	adds	r3, r7, #6
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d107      	bne.n	8005f96 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f86:	2308      	movs	r3, #8
 8005f88:	18fb      	adds	r3, r7, r3
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	629a      	str	r2, [r3, #40]	; 0x28
 8005f94:	e019      	b.n	8005fca <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005f96:	2308      	movs	r3, #8
 8005f98:	18fb      	adds	r3, r7, r3
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	0a1b      	lsrs	r3, r3, #8
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005faa:	6a39      	ldr	r1, [r7, #32]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f000 f881 	bl	80060b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005fb4:	1e03      	subs	r3, r0, #0
 8005fb6:	d001      	beq.n	8005fbc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e014      	b.n	8005fe6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fbc:	2308      	movs	r3, #8
 8005fbe:	18fb      	adds	r3, r7, r3
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005fca:	6a3a      	ldr	r2, [r7, #32]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	0013      	movs	r3, r2
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2140      	movs	r1, #64	; 0x40
 8005fd8:	f000 f82e 	bl	8006038 <I2C_WaitOnFlagUntilTimeout>
 8005fdc:	1e03      	subs	r3, r0, #0
 8005fde:	d001      	beq.n	8005fe4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	b004      	add	sp, #16
 8005fec:	bdb0      	pop	{r4, r5, r7, pc}
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	80002000 	.word	0x80002000

08005ff4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	2202      	movs	r2, #2
 8006004:	4013      	ands	r3, r2
 8006006:	2b02      	cmp	r3, #2
 8006008:	d103      	bne.n	8006012 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2200      	movs	r2, #0
 8006010:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	2201      	movs	r2, #1
 800601a:	4013      	ands	r3, r2
 800601c:	2b01      	cmp	r3, #1
 800601e:	d007      	beq.n	8006030 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699a      	ldr	r2, [r3, #24]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2101      	movs	r1, #1
 800602c:	430a      	orrs	r2, r1
 800602e:	619a      	str	r2, [r3, #24]
  }
}
 8006030:	46c0      	nop			; (mov r8, r8)
 8006032:	46bd      	mov	sp, r7
 8006034:	b002      	add	sp, #8
 8006036:	bd80      	pop	{r7, pc}

08006038 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	1dfb      	adds	r3, r7, #7
 8006046:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006048:	e021      	b.n	800608e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	3301      	adds	r3, #1
 800604e:	d01e      	beq.n	800608e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006050:	f7fe fdfa 	bl	8004c48 <HAL_GetTick>
 8006054:	0002      	movs	r2, r0
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	429a      	cmp	r2, r3
 800605e:	d302      	bcc.n	8006066 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d113      	bne.n	800608e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606a:	2220      	movs	r2, #32
 800606c:	431a      	orrs	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2241      	movs	r2, #65	; 0x41
 8006076:	2120      	movs	r1, #32
 8006078:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2242      	movs	r2, #66	; 0x42
 800607e:	2100      	movs	r1, #0
 8006080:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2240      	movs	r2, #64	; 0x40
 8006086:	2100      	movs	r1, #0
 8006088:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e00f      	b.n	80060ae <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	4013      	ands	r3, r2
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	425a      	negs	r2, r3
 800609e:	4153      	adcs	r3, r2
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	001a      	movs	r2, r3
 80060a4:	1dfb      	adds	r3, r7, #7
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d0ce      	beq.n	800604a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	0018      	movs	r0, r3
 80060b0:	46bd      	mov	sp, r7
 80060b2:	b004      	add	sp, #16
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060c2:	e02b      	b.n	800611c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	68b9      	ldr	r1, [r7, #8]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	0018      	movs	r0, r3
 80060cc:	f000 f86e 	bl	80061ac <I2C_IsAcknowledgeFailed>
 80060d0:	1e03      	subs	r3, r0, #0
 80060d2:	d001      	beq.n	80060d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e029      	b.n	800612c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	3301      	adds	r3, #1
 80060dc:	d01e      	beq.n	800611c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060de:	f7fe fdb3 	bl	8004c48 <HAL_GetTick>
 80060e2:	0002      	movs	r2, r0
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d302      	bcc.n	80060f4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d113      	bne.n	800611c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f8:	2220      	movs	r2, #32
 80060fa:	431a      	orrs	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2241      	movs	r2, #65	; 0x41
 8006104:	2120      	movs	r1, #32
 8006106:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2242      	movs	r2, #66	; 0x42
 800610c:	2100      	movs	r1, #0
 800610e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2240      	movs	r2, #64	; 0x40
 8006114:	2100      	movs	r1, #0
 8006116:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e007      	b.n	800612c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	2202      	movs	r2, #2
 8006124:	4013      	ands	r3, r2
 8006126:	2b02      	cmp	r3, #2
 8006128:	d1cc      	bne.n	80060c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	0018      	movs	r0, r3
 800612e:	46bd      	mov	sp, r7
 8006130:	b004      	add	sp, #16
 8006132:	bd80      	pop	{r7, pc}

08006134 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006140:	e028      	b.n	8006194 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	68b9      	ldr	r1, [r7, #8]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	0018      	movs	r0, r3
 800614a:	f000 f82f 	bl	80061ac <I2C_IsAcknowledgeFailed>
 800614e:	1e03      	subs	r3, r0, #0
 8006150:	d001      	beq.n	8006156 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e026      	b.n	80061a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006156:	f7fe fd77 	bl	8004c48 <HAL_GetTick>
 800615a:	0002      	movs	r2, r0
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	429a      	cmp	r2, r3
 8006164:	d302      	bcc.n	800616c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d113      	bne.n	8006194 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006170:	2220      	movs	r2, #32
 8006172:	431a      	orrs	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2241      	movs	r2, #65	; 0x41
 800617c:	2120      	movs	r1, #32
 800617e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2242      	movs	r2, #66	; 0x42
 8006184:	2100      	movs	r1, #0
 8006186:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2240      	movs	r2, #64	; 0x40
 800618c:	2100      	movs	r1, #0
 800618e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e007      	b.n	80061a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	2220      	movs	r2, #32
 800619c:	4013      	ands	r3, r2
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d1cf      	bne.n	8006142 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	0018      	movs	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	b004      	add	sp, #16
 80061aa:	bd80      	pop	{r7, pc}

080061ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	2210      	movs	r2, #16
 80061c0:	4013      	ands	r3, r2
 80061c2:	2b10      	cmp	r3, #16
 80061c4:	d164      	bne.n	8006290 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	2380      	movs	r3, #128	; 0x80
 80061ce:	049b      	lsls	r3, r3, #18
 80061d0:	401a      	ands	r2, r3
 80061d2:	2380      	movs	r3, #128	; 0x80
 80061d4:	049b      	lsls	r3, r3, #18
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d02b      	beq.n	8006232 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2180      	movs	r1, #128	; 0x80
 80061e6:	01c9      	lsls	r1, r1, #7
 80061e8:	430a      	orrs	r2, r1
 80061ea:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061ec:	e021      	b.n	8006232 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	3301      	adds	r3, #1
 80061f2:	d01e      	beq.n	8006232 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f4:	f7fe fd28 	bl	8004c48 <HAL_GetTick>
 80061f8:	0002      	movs	r2, r0
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	429a      	cmp	r2, r3
 8006202:	d302      	bcc.n	800620a <I2C_IsAcknowledgeFailed+0x5e>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d113      	bne.n	8006232 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620e:	2220      	movs	r2, #32
 8006210:	431a      	orrs	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2241      	movs	r2, #65	; 0x41
 800621a:	2120      	movs	r1, #32
 800621c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2242      	movs	r2, #66	; 0x42
 8006222:	2100      	movs	r1, #0
 8006224:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2240      	movs	r2, #64	; 0x40
 800622a:	2100      	movs	r1, #0
 800622c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e02f      	b.n	8006292 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	2220      	movs	r2, #32
 800623a:	4013      	ands	r3, r2
 800623c:	2b20      	cmp	r3, #32
 800623e:	d1d6      	bne.n	80061ee <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2210      	movs	r2, #16
 8006246:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2220      	movs	r2, #32
 800624e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	0018      	movs	r0, r3
 8006254:	f7ff fece 	bl	8005ff4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	490e      	ldr	r1, [pc, #56]	; (800629c <I2C_IsAcknowledgeFailed+0xf0>)
 8006264:	400a      	ands	r2, r1
 8006266:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626c:	2204      	movs	r2, #4
 800626e:	431a      	orrs	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2241      	movs	r2, #65	; 0x41
 8006278:	2120      	movs	r1, #32
 800627a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2242      	movs	r2, #66	; 0x42
 8006280:	2100      	movs	r1, #0
 8006282:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2240      	movs	r2, #64	; 0x40
 8006288:	2100      	movs	r1, #0
 800628a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e000      	b.n	8006292 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	0018      	movs	r0, r3
 8006294:	46bd      	mov	sp, r7
 8006296:	b004      	add	sp, #16
 8006298:	bd80      	pop	{r7, pc}
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	fe00e800 	.word	0xfe00e800

080062a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80062a0:	b590      	push	{r4, r7, lr}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	0008      	movs	r0, r1
 80062aa:	0011      	movs	r1, r2
 80062ac:	607b      	str	r3, [r7, #4]
 80062ae:	240a      	movs	r4, #10
 80062b0:	193b      	adds	r3, r7, r4
 80062b2:	1c02      	adds	r2, r0, #0
 80062b4:	801a      	strh	r2, [r3, #0]
 80062b6:	2009      	movs	r0, #9
 80062b8:	183b      	adds	r3, r7, r0
 80062ba:	1c0a      	adds	r2, r1, #0
 80062bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	6a3a      	ldr	r2, [r7, #32]
 80062c6:	0d51      	lsrs	r1, r2, #21
 80062c8:	2280      	movs	r2, #128	; 0x80
 80062ca:	00d2      	lsls	r2, r2, #3
 80062cc:	400a      	ands	r2, r1
 80062ce:	490e      	ldr	r1, [pc, #56]	; (8006308 <I2C_TransferConfig+0x68>)
 80062d0:	430a      	orrs	r2, r1
 80062d2:	43d2      	mvns	r2, r2
 80062d4:	401a      	ands	r2, r3
 80062d6:	0011      	movs	r1, r2
 80062d8:	193b      	adds	r3, r7, r4
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	059b      	lsls	r3, r3, #22
 80062de:	0d9a      	lsrs	r2, r3, #22
 80062e0:	183b      	adds	r3, r7, r0
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	0418      	lsls	r0, r3, #16
 80062e6:	23ff      	movs	r3, #255	; 0xff
 80062e8:	041b      	lsls	r3, r3, #16
 80062ea:	4003      	ands	r3, r0
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	431a      	orrs	r2, r3
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	431a      	orrs	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80062fe:	46c0      	nop			; (mov r8, r8)
 8006300:	46bd      	mov	sp, r7
 8006302:	b005      	add	sp, #20
 8006304:	bd90      	pop	{r4, r7, pc}
 8006306:	46c0      	nop			; (mov r8, r8)
 8006308:	03ff63ff 	.word	0x03ff63ff

0800630c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2241      	movs	r2, #65	; 0x41
 800631a:	5c9b      	ldrb	r3, [r3, r2]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b20      	cmp	r3, #32
 8006320:	d138      	bne.n	8006394 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2240      	movs	r2, #64	; 0x40
 8006326:	5c9b      	ldrb	r3, [r3, r2]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800632c:	2302      	movs	r3, #2
 800632e:	e032      	b.n	8006396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2240      	movs	r2, #64	; 0x40
 8006334:	2101      	movs	r1, #1
 8006336:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2241      	movs	r2, #65	; 0x41
 800633c:	2124      	movs	r1, #36	; 0x24
 800633e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2101      	movs	r1, #1
 800634c:	438a      	bics	r2, r1
 800634e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4911      	ldr	r1, [pc, #68]	; (80063a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800635c:	400a      	ands	r2, r1
 800635e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6819      	ldr	r1, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2101      	movs	r1, #1
 800637c:	430a      	orrs	r2, r1
 800637e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2241      	movs	r2, #65	; 0x41
 8006384:	2120      	movs	r1, #32
 8006386:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2240      	movs	r2, #64	; 0x40
 800638c:	2100      	movs	r1, #0
 800638e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	e000      	b.n	8006396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006394:	2302      	movs	r3, #2
  }
}
 8006396:	0018      	movs	r0, r3
 8006398:	46bd      	mov	sp, r7
 800639a:	b002      	add	sp, #8
 800639c:	bd80      	pop	{r7, pc}
 800639e:	46c0      	nop			; (mov r8, r8)
 80063a0:	ffffefff 	.word	0xffffefff

080063a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2241      	movs	r2, #65	; 0x41
 80063b2:	5c9b      	ldrb	r3, [r3, r2]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d139      	bne.n	800642e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2240      	movs	r2, #64	; 0x40
 80063be:	5c9b      	ldrb	r3, [r3, r2]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e033      	b.n	8006430 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2240      	movs	r2, #64	; 0x40
 80063cc:	2101      	movs	r1, #1
 80063ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2241      	movs	r2, #65	; 0x41
 80063d4:	2124      	movs	r1, #36	; 0x24
 80063d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2101      	movs	r1, #1
 80063e4:	438a      	bics	r2, r1
 80063e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a11      	ldr	r2, [pc, #68]	; (8006438 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2101      	movs	r1, #1
 8006416:	430a      	orrs	r2, r1
 8006418:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2241      	movs	r2, #65	; 0x41
 800641e:	2120      	movs	r1, #32
 8006420:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2240      	movs	r2, #64	; 0x40
 8006426:	2100      	movs	r1, #0
 8006428:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	e000      	b.n	8006430 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800642e:	2302      	movs	r3, #2
  }
}
 8006430:	0018      	movs	r0, r3
 8006432:	46bd      	mov	sp, r7
 8006434:	b004      	add	sp, #16
 8006436:	bd80      	pop	{r7, pc}
 8006438:	fffff0ff 	.word	0xfffff0ff

0800643c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800643c:	b5b0      	push	{r4, r5, r7, lr}
 800643e:	b08a      	sub	sp, #40	; 0x28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d102      	bne.n	8006450 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	f000 fbbf 	bl	8006bce <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006450:	4bc9      	ldr	r3, [pc, #804]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	220c      	movs	r2, #12
 8006456:	4013      	ands	r3, r2
 8006458:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800645a:	4bc7      	ldr	r3, [pc, #796]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	2380      	movs	r3, #128	; 0x80
 8006460:	025b      	lsls	r3, r3, #9
 8006462:	4013      	ands	r3, r2
 8006464:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2201      	movs	r2, #1
 800646c:	4013      	ands	r3, r2
 800646e:	d100      	bne.n	8006472 <HAL_RCC_OscConfig+0x36>
 8006470:	e07e      	b.n	8006570 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	2b08      	cmp	r3, #8
 8006476:	d007      	beq.n	8006488 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	2b0c      	cmp	r3, #12
 800647c:	d112      	bne.n	80064a4 <HAL_RCC_OscConfig+0x68>
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	2380      	movs	r3, #128	; 0x80
 8006482:	025b      	lsls	r3, r3, #9
 8006484:	429a      	cmp	r2, r3
 8006486:	d10d      	bne.n	80064a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006488:	4bbb      	ldr	r3, [pc, #748]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	2380      	movs	r3, #128	; 0x80
 800648e:	029b      	lsls	r3, r3, #10
 8006490:	4013      	ands	r3, r2
 8006492:	d100      	bne.n	8006496 <HAL_RCC_OscConfig+0x5a>
 8006494:	e06b      	b.n	800656e <HAL_RCC_OscConfig+0x132>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d167      	bne.n	800656e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f000 fb95 	bl	8006bce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	2380      	movs	r3, #128	; 0x80
 80064aa:	025b      	lsls	r3, r3, #9
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d107      	bne.n	80064c0 <HAL_RCC_OscConfig+0x84>
 80064b0:	4bb1      	ldr	r3, [pc, #708]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	4bb0      	ldr	r3, [pc, #704]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80064b6:	2180      	movs	r1, #128	; 0x80
 80064b8:	0249      	lsls	r1, r1, #9
 80064ba:	430a      	orrs	r2, r1
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	e027      	b.n	8006510 <HAL_RCC_OscConfig+0xd4>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	23a0      	movs	r3, #160	; 0xa0
 80064c6:	02db      	lsls	r3, r3, #11
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d10e      	bne.n	80064ea <HAL_RCC_OscConfig+0xae>
 80064cc:	4baa      	ldr	r3, [pc, #680]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	4ba9      	ldr	r3, [pc, #676]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80064d2:	2180      	movs	r1, #128	; 0x80
 80064d4:	02c9      	lsls	r1, r1, #11
 80064d6:	430a      	orrs	r2, r1
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	4ba7      	ldr	r3, [pc, #668]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4ba6      	ldr	r3, [pc, #664]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80064e0:	2180      	movs	r1, #128	; 0x80
 80064e2:	0249      	lsls	r1, r1, #9
 80064e4:	430a      	orrs	r2, r1
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	e012      	b.n	8006510 <HAL_RCC_OscConfig+0xd4>
 80064ea:	4ba3      	ldr	r3, [pc, #652]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	4ba2      	ldr	r3, [pc, #648]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80064f0:	49a2      	ldr	r1, [pc, #648]	; (800677c <HAL_RCC_OscConfig+0x340>)
 80064f2:	400a      	ands	r2, r1
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	4ba0      	ldr	r3, [pc, #640]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	2380      	movs	r3, #128	; 0x80
 80064fc:	025b      	lsls	r3, r3, #9
 80064fe:	4013      	ands	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4b9c      	ldr	r3, [pc, #624]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	4b9b      	ldr	r3, [pc, #620]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 800650a:	499d      	ldr	r1, [pc, #628]	; (8006780 <HAL_RCC_OscConfig+0x344>)
 800650c:	400a      	ands	r2, r1
 800650e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d015      	beq.n	8006544 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006518:	f7fe fb96 	bl	8004c48 <HAL_GetTick>
 800651c:	0003      	movs	r3, r0
 800651e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006520:	e009      	b.n	8006536 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006522:	f7fe fb91 	bl	8004c48 <HAL_GetTick>
 8006526:	0002      	movs	r2, r0
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b64      	cmp	r3, #100	; 0x64
 800652e:	d902      	bls.n	8006536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	f000 fb4c 	bl	8006bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006536:	4b90      	ldr	r3, [pc, #576]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	2380      	movs	r3, #128	; 0x80
 800653c:	029b      	lsls	r3, r3, #10
 800653e:	4013      	ands	r3, r2
 8006540:	d0ef      	beq.n	8006522 <HAL_RCC_OscConfig+0xe6>
 8006542:	e015      	b.n	8006570 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006544:	f7fe fb80 	bl	8004c48 <HAL_GetTick>
 8006548:	0003      	movs	r3, r0
 800654a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800654c:	e008      	b.n	8006560 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800654e:	f7fe fb7b 	bl	8004c48 <HAL_GetTick>
 8006552:	0002      	movs	r2, r0
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	2b64      	cmp	r3, #100	; 0x64
 800655a:	d901      	bls.n	8006560 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e336      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006560:	4b85      	ldr	r3, [pc, #532]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	2380      	movs	r3, #128	; 0x80
 8006566:	029b      	lsls	r3, r3, #10
 8006568:	4013      	ands	r3, r2
 800656a:	d1f0      	bne.n	800654e <HAL_RCC_OscConfig+0x112>
 800656c:	e000      	b.n	8006570 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800656e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2202      	movs	r2, #2
 8006576:	4013      	ands	r3, r2
 8006578:	d100      	bne.n	800657c <HAL_RCC_OscConfig+0x140>
 800657a:	e099      	b.n	80066b0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	2220      	movs	r2, #32
 8006586:	4013      	ands	r3, r2
 8006588:	d009      	beq.n	800659e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800658a:	4b7b      	ldr	r3, [pc, #492]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	4b7a      	ldr	r3, [pc, #488]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 8006590:	2120      	movs	r1, #32
 8006592:	430a      	orrs	r2, r1
 8006594:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	2220      	movs	r2, #32
 800659a:	4393      	bics	r3, r2
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d005      	beq.n	80065b0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	2b0c      	cmp	r3, #12
 80065a8:	d13e      	bne.n	8006628 <HAL_RCC_OscConfig+0x1ec>
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d13b      	bne.n	8006628 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80065b0:	4b71      	ldr	r3, [pc, #452]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2204      	movs	r2, #4
 80065b6:	4013      	ands	r3, r2
 80065b8:	d004      	beq.n	80065c4 <HAL_RCC_OscConfig+0x188>
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e304      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065c4:	4b6c      	ldr	r3, [pc, #432]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	4a6e      	ldr	r2, [pc, #440]	; (8006784 <HAL_RCC_OscConfig+0x348>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	0019      	movs	r1, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	021a      	lsls	r2, r3, #8
 80065d4:	4b68      	ldr	r3, [pc, #416]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80065da:	4b67      	ldr	r3, [pc, #412]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2209      	movs	r2, #9
 80065e0:	4393      	bics	r3, r2
 80065e2:	0019      	movs	r1, r3
 80065e4:	4b64      	ldr	r3, [pc, #400]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80065e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e8:	430a      	orrs	r2, r1
 80065ea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065ec:	f000 fc42 	bl	8006e74 <HAL_RCC_GetSysClockFreq>
 80065f0:	0001      	movs	r1, r0
 80065f2:	4b61      	ldr	r3, [pc, #388]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	091b      	lsrs	r3, r3, #4
 80065f8:	220f      	movs	r2, #15
 80065fa:	4013      	ands	r3, r2
 80065fc:	4a62      	ldr	r2, [pc, #392]	; (8006788 <HAL_RCC_OscConfig+0x34c>)
 80065fe:	5cd3      	ldrb	r3, [r2, r3]
 8006600:	000a      	movs	r2, r1
 8006602:	40da      	lsrs	r2, r3
 8006604:	4b61      	ldr	r3, [pc, #388]	; (800678c <HAL_RCC_OscConfig+0x350>)
 8006606:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006608:	4b61      	ldr	r3, [pc, #388]	; (8006790 <HAL_RCC_OscConfig+0x354>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2513      	movs	r5, #19
 800660e:	197c      	adds	r4, r7, r5
 8006610:	0018      	movs	r0, r3
 8006612:	f7fe fad3 	bl	8004bbc <HAL_InitTick>
 8006616:	0003      	movs	r3, r0
 8006618:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800661a:	197b      	adds	r3, r7, r5
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d046      	beq.n	80066b0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8006622:	197b      	adds	r3, r7, r5
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	e2d2      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	2b00      	cmp	r3, #0
 800662c:	d027      	beq.n	800667e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800662e:	4b52      	ldr	r3, [pc, #328]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2209      	movs	r2, #9
 8006634:	4393      	bics	r3, r2
 8006636:	0019      	movs	r1, r3
 8006638:	4b4f      	ldr	r3, [pc, #316]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 800663a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663c:	430a      	orrs	r2, r1
 800663e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006640:	f7fe fb02 	bl	8004c48 <HAL_GetTick>
 8006644:	0003      	movs	r3, r0
 8006646:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006648:	e008      	b.n	800665c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800664a:	f7fe fafd 	bl	8004c48 <HAL_GetTick>
 800664e:	0002      	movs	r2, r0
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d901      	bls.n	800665c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e2b8      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800665c:	4b46      	ldr	r3, [pc, #280]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2204      	movs	r2, #4
 8006662:	4013      	ands	r3, r2
 8006664:	d0f1      	beq.n	800664a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006666:	4b44      	ldr	r3, [pc, #272]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	4a46      	ldr	r2, [pc, #280]	; (8006784 <HAL_RCC_OscConfig+0x348>)
 800666c:	4013      	ands	r3, r2
 800666e:	0019      	movs	r1, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	021a      	lsls	r2, r3, #8
 8006676:	4b40      	ldr	r3, [pc, #256]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 8006678:	430a      	orrs	r2, r1
 800667a:	605a      	str	r2, [r3, #4]
 800667c:	e018      	b.n	80066b0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800667e:	4b3e      	ldr	r3, [pc, #248]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	4b3d      	ldr	r3, [pc, #244]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 8006684:	2101      	movs	r1, #1
 8006686:	438a      	bics	r2, r1
 8006688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668a:	f7fe fadd 	bl	8004c48 <HAL_GetTick>
 800668e:	0003      	movs	r3, r0
 8006690:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006694:	f7fe fad8 	bl	8004c48 <HAL_GetTick>
 8006698:	0002      	movs	r2, r0
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e293      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066a6:	4b34      	ldr	r3, [pc, #208]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2204      	movs	r2, #4
 80066ac:	4013      	ands	r3, r2
 80066ae:	d1f1      	bne.n	8006694 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2210      	movs	r2, #16
 80066b6:	4013      	ands	r3, r2
 80066b8:	d100      	bne.n	80066bc <HAL_RCC_OscConfig+0x280>
 80066ba:	e0a2      	b.n	8006802 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d140      	bne.n	8006744 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80066c2:	4b2d      	ldr	r3, [pc, #180]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	2380      	movs	r3, #128	; 0x80
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4013      	ands	r3, r2
 80066cc:	d005      	beq.n	80066da <HAL_RCC_OscConfig+0x29e>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e279      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066da:	4b27      	ldr	r3, [pc, #156]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	4a2d      	ldr	r2, [pc, #180]	; (8006794 <HAL_RCC_OscConfig+0x358>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	0019      	movs	r1, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066e8:	4b23      	ldr	r3, [pc, #140]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066ee:	4b22      	ldr	r3, [pc, #136]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	021b      	lsls	r3, r3, #8
 80066f4:	0a19      	lsrs	r1, r3, #8
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	061a      	lsls	r2, r3, #24
 80066fc:	4b1e      	ldr	r3, [pc, #120]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	0b5b      	lsrs	r3, r3, #13
 8006708:	3301      	adds	r3, #1
 800670a:	2280      	movs	r2, #128	; 0x80
 800670c:	0212      	lsls	r2, r2, #8
 800670e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006710:	4b19      	ldr	r3, [pc, #100]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	091b      	lsrs	r3, r3, #4
 8006716:	210f      	movs	r1, #15
 8006718:	400b      	ands	r3, r1
 800671a:	491b      	ldr	r1, [pc, #108]	; (8006788 <HAL_RCC_OscConfig+0x34c>)
 800671c:	5ccb      	ldrb	r3, [r1, r3]
 800671e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006720:	4b1a      	ldr	r3, [pc, #104]	; (800678c <HAL_RCC_OscConfig+0x350>)
 8006722:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006724:	4b1a      	ldr	r3, [pc, #104]	; (8006790 <HAL_RCC_OscConfig+0x354>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2513      	movs	r5, #19
 800672a:	197c      	adds	r4, r7, r5
 800672c:	0018      	movs	r0, r3
 800672e:	f7fe fa45 	bl	8004bbc <HAL_InitTick>
 8006732:	0003      	movs	r3, r0
 8006734:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006736:	197b      	adds	r3, r7, r5
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d061      	beq.n	8006802 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800673e:	197b      	adds	r3, r7, r5
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	e244      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d040      	beq.n	80067ce <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800674c:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	4b09      	ldr	r3, [pc, #36]	; (8006778 <HAL_RCC_OscConfig+0x33c>)
 8006752:	2180      	movs	r1, #128	; 0x80
 8006754:	0049      	lsls	r1, r1, #1
 8006756:	430a      	orrs	r2, r1
 8006758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800675a:	f7fe fa75 	bl	8004c48 <HAL_GetTick>
 800675e:	0003      	movs	r3, r0
 8006760:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006762:	e019      	b.n	8006798 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006764:	f7fe fa70 	bl	8004c48 <HAL_GetTick>
 8006768:	0002      	movs	r2, r0
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d912      	bls.n	8006798 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e22b      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
 8006776:	46c0      	nop			; (mov r8, r8)
 8006778:	40021000 	.word	0x40021000
 800677c:	fffeffff 	.word	0xfffeffff
 8006780:	fffbffff 	.word	0xfffbffff
 8006784:	ffffe0ff 	.word	0xffffe0ff
 8006788:	0800c450 	.word	0x0800c450
 800678c:	20000000 	.word	0x20000000
 8006790:	20000004 	.word	0x20000004
 8006794:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006798:	4bca      	ldr	r3, [pc, #808]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	2380      	movs	r3, #128	; 0x80
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4013      	ands	r3, r2
 80067a2:	d0df      	beq.n	8006764 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067a4:	4bc7      	ldr	r3, [pc, #796]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	4ac7      	ldr	r2, [pc, #796]	; (8006ac8 <HAL_RCC_OscConfig+0x68c>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	0019      	movs	r1, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067b2:	4bc4      	ldr	r3, [pc, #784]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 80067b4:	430a      	orrs	r2, r1
 80067b6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067b8:	4bc2      	ldr	r3, [pc, #776]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	021b      	lsls	r3, r3, #8
 80067be:	0a19      	lsrs	r1, r3, #8
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	061a      	lsls	r2, r3, #24
 80067c6:	4bbf      	ldr	r3, [pc, #764]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 80067c8:	430a      	orrs	r2, r1
 80067ca:	605a      	str	r2, [r3, #4]
 80067cc:	e019      	b.n	8006802 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80067ce:	4bbd      	ldr	r3, [pc, #756]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	4bbc      	ldr	r3, [pc, #752]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 80067d4:	49bd      	ldr	r1, [pc, #756]	; (8006acc <HAL_RCC_OscConfig+0x690>)
 80067d6:	400a      	ands	r2, r1
 80067d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067da:	f7fe fa35 	bl	8004c48 <HAL_GetTick>
 80067de:	0003      	movs	r3, r0
 80067e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067e4:	f7fe fa30 	bl	8004c48 <HAL_GetTick>
 80067e8:	0002      	movs	r2, r0
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e1eb      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80067f6:	4bb3      	ldr	r3, [pc, #716]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	2380      	movs	r3, #128	; 0x80
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4013      	ands	r3, r2
 8006800:	d1f0      	bne.n	80067e4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2208      	movs	r2, #8
 8006808:	4013      	ands	r3, r2
 800680a:	d036      	beq.n	800687a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d019      	beq.n	8006848 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006814:	4bab      	ldr	r3, [pc, #684]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006816:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006818:	4baa      	ldr	r3, [pc, #680]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 800681a:	2101      	movs	r1, #1
 800681c:	430a      	orrs	r2, r1
 800681e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006820:	f7fe fa12 	bl	8004c48 <HAL_GetTick>
 8006824:	0003      	movs	r3, r0
 8006826:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800682a:	f7fe fa0d 	bl	8004c48 <HAL_GetTick>
 800682e:	0002      	movs	r2, r0
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e1c8      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800683c:	4ba1      	ldr	r3, [pc, #644]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 800683e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006840:	2202      	movs	r2, #2
 8006842:	4013      	ands	r3, r2
 8006844:	d0f1      	beq.n	800682a <HAL_RCC_OscConfig+0x3ee>
 8006846:	e018      	b.n	800687a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006848:	4b9e      	ldr	r3, [pc, #632]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 800684a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800684c:	4b9d      	ldr	r3, [pc, #628]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 800684e:	2101      	movs	r1, #1
 8006850:	438a      	bics	r2, r1
 8006852:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006854:	f7fe f9f8 	bl	8004c48 <HAL_GetTick>
 8006858:	0003      	movs	r3, r0
 800685a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800685e:	f7fe f9f3 	bl	8004c48 <HAL_GetTick>
 8006862:	0002      	movs	r2, r0
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e1ae      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006870:	4b94      	ldr	r3, [pc, #592]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006874:	2202      	movs	r2, #2
 8006876:	4013      	ands	r3, r2
 8006878:	d1f1      	bne.n	800685e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2204      	movs	r2, #4
 8006880:	4013      	ands	r3, r2
 8006882:	d100      	bne.n	8006886 <HAL_RCC_OscConfig+0x44a>
 8006884:	e0ae      	b.n	80069e4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006886:	2023      	movs	r0, #35	; 0x23
 8006888:	183b      	adds	r3, r7, r0
 800688a:	2200      	movs	r2, #0
 800688c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800688e:	4b8d      	ldr	r3, [pc, #564]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006892:	2380      	movs	r3, #128	; 0x80
 8006894:	055b      	lsls	r3, r3, #21
 8006896:	4013      	ands	r3, r2
 8006898:	d109      	bne.n	80068ae <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800689a:	4b8a      	ldr	r3, [pc, #552]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 800689c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800689e:	4b89      	ldr	r3, [pc, #548]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 80068a0:	2180      	movs	r1, #128	; 0x80
 80068a2:	0549      	lsls	r1, r1, #21
 80068a4:	430a      	orrs	r2, r1
 80068a6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80068a8:	183b      	adds	r3, r7, r0
 80068aa:	2201      	movs	r2, #1
 80068ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068ae:	4b88      	ldr	r3, [pc, #544]	; (8006ad0 <HAL_RCC_OscConfig+0x694>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	2380      	movs	r3, #128	; 0x80
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	4013      	ands	r3, r2
 80068b8:	d11a      	bne.n	80068f0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068ba:	4b85      	ldr	r3, [pc, #532]	; (8006ad0 <HAL_RCC_OscConfig+0x694>)
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	4b84      	ldr	r3, [pc, #528]	; (8006ad0 <HAL_RCC_OscConfig+0x694>)
 80068c0:	2180      	movs	r1, #128	; 0x80
 80068c2:	0049      	lsls	r1, r1, #1
 80068c4:	430a      	orrs	r2, r1
 80068c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068c8:	f7fe f9be 	bl	8004c48 <HAL_GetTick>
 80068cc:	0003      	movs	r3, r0
 80068ce:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068d0:	e008      	b.n	80068e4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068d2:	f7fe f9b9 	bl	8004c48 <HAL_GetTick>
 80068d6:	0002      	movs	r2, r0
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b64      	cmp	r3, #100	; 0x64
 80068de:	d901      	bls.n	80068e4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e174      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068e4:	4b7a      	ldr	r3, [pc, #488]	; (8006ad0 <HAL_RCC_OscConfig+0x694>)
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	2380      	movs	r3, #128	; 0x80
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	4013      	ands	r3, r2
 80068ee:	d0f0      	beq.n	80068d2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	2380      	movs	r3, #128	; 0x80
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d107      	bne.n	800690c <HAL_RCC_OscConfig+0x4d0>
 80068fc:	4b71      	ldr	r3, [pc, #452]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 80068fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006900:	4b70      	ldr	r3, [pc, #448]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006902:	2180      	movs	r1, #128	; 0x80
 8006904:	0049      	lsls	r1, r1, #1
 8006906:	430a      	orrs	r2, r1
 8006908:	651a      	str	r2, [r3, #80]	; 0x50
 800690a:	e031      	b.n	8006970 <HAL_RCC_OscConfig+0x534>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10c      	bne.n	800692e <HAL_RCC_OscConfig+0x4f2>
 8006914:	4b6b      	ldr	r3, [pc, #428]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006916:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006918:	4b6a      	ldr	r3, [pc, #424]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 800691a:	496c      	ldr	r1, [pc, #432]	; (8006acc <HAL_RCC_OscConfig+0x690>)
 800691c:	400a      	ands	r2, r1
 800691e:	651a      	str	r2, [r3, #80]	; 0x50
 8006920:	4b68      	ldr	r3, [pc, #416]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006922:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006924:	4b67      	ldr	r3, [pc, #412]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006926:	496b      	ldr	r1, [pc, #428]	; (8006ad4 <HAL_RCC_OscConfig+0x698>)
 8006928:	400a      	ands	r2, r1
 800692a:	651a      	str	r2, [r3, #80]	; 0x50
 800692c:	e020      	b.n	8006970 <HAL_RCC_OscConfig+0x534>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	689a      	ldr	r2, [r3, #8]
 8006932:	23a0      	movs	r3, #160	; 0xa0
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	429a      	cmp	r2, r3
 8006938:	d10e      	bne.n	8006958 <HAL_RCC_OscConfig+0x51c>
 800693a:	4b62      	ldr	r3, [pc, #392]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 800693c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800693e:	4b61      	ldr	r3, [pc, #388]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006940:	2180      	movs	r1, #128	; 0x80
 8006942:	00c9      	lsls	r1, r1, #3
 8006944:	430a      	orrs	r2, r1
 8006946:	651a      	str	r2, [r3, #80]	; 0x50
 8006948:	4b5e      	ldr	r3, [pc, #376]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 800694a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800694c:	4b5d      	ldr	r3, [pc, #372]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 800694e:	2180      	movs	r1, #128	; 0x80
 8006950:	0049      	lsls	r1, r1, #1
 8006952:	430a      	orrs	r2, r1
 8006954:	651a      	str	r2, [r3, #80]	; 0x50
 8006956:	e00b      	b.n	8006970 <HAL_RCC_OscConfig+0x534>
 8006958:	4b5a      	ldr	r3, [pc, #360]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 800695a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800695c:	4b59      	ldr	r3, [pc, #356]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 800695e:	495b      	ldr	r1, [pc, #364]	; (8006acc <HAL_RCC_OscConfig+0x690>)
 8006960:	400a      	ands	r2, r1
 8006962:	651a      	str	r2, [r3, #80]	; 0x50
 8006964:	4b57      	ldr	r3, [pc, #348]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006966:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006968:	4b56      	ldr	r3, [pc, #344]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 800696a:	495a      	ldr	r1, [pc, #360]	; (8006ad4 <HAL_RCC_OscConfig+0x698>)
 800696c:	400a      	ands	r2, r1
 800696e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d015      	beq.n	80069a4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006978:	f7fe f966 	bl	8004c48 <HAL_GetTick>
 800697c:	0003      	movs	r3, r0
 800697e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006980:	e009      	b.n	8006996 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006982:	f7fe f961 	bl	8004c48 <HAL_GetTick>
 8006986:	0002      	movs	r2, r0
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	4a52      	ldr	r2, [pc, #328]	; (8006ad8 <HAL_RCC_OscConfig+0x69c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e11b      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006996:	4b4b      	ldr	r3, [pc, #300]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800699a:	2380      	movs	r3, #128	; 0x80
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4013      	ands	r3, r2
 80069a0:	d0ef      	beq.n	8006982 <HAL_RCC_OscConfig+0x546>
 80069a2:	e014      	b.n	80069ce <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069a4:	f7fe f950 	bl	8004c48 <HAL_GetTick>
 80069a8:	0003      	movs	r3, r0
 80069aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069ac:	e009      	b.n	80069c2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069ae:	f7fe f94b 	bl	8004c48 <HAL_GetTick>
 80069b2:	0002      	movs	r2, r0
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	4a47      	ldr	r2, [pc, #284]	; (8006ad8 <HAL_RCC_OscConfig+0x69c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e105      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069c2:	4b40      	ldr	r3, [pc, #256]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 80069c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069c6:	2380      	movs	r3, #128	; 0x80
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4013      	ands	r3, r2
 80069cc:	d1ef      	bne.n	80069ae <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80069ce:	2323      	movs	r3, #35	; 0x23
 80069d0:	18fb      	adds	r3, r7, r3
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d105      	bne.n	80069e4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069d8:	4b3a      	ldr	r3, [pc, #232]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 80069da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069dc:	4b39      	ldr	r3, [pc, #228]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 80069de:	493f      	ldr	r1, [pc, #252]	; (8006adc <HAL_RCC_OscConfig+0x6a0>)
 80069e0:	400a      	ands	r2, r1
 80069e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2220      	movs	r2, #32
 80069ea:	4013      	ands	r3, r2
 80069ec:	d049      	beq.n	8006a82 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d026      	beq.n	8006a44 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80069f6:	4b33      	ldr	r3, [pc, #204]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	4b32      	ldr	r3, [pc, #200]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 80069fc:	2101      	movs	r1, #1
 80069fe:	430a      	orrs	r2, r1
 8006a00:	609a      	str	r2, [r3, #8]
 8006a02:	4b30      	ldr	r3, [pc, #192]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a06:	4b2f      	ldr	r3, [pc, #188]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006a08:	2101      	movs	r1, #1
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8006a0e:	4b34      	ldr	r3, [pc, #208]	; (8006ae0 <HAL_RCC_OscConfig+0x6a4>)
 8006a10:	6a1a      	ldr	r2, [r3, #32]
 8006a12:	4b33      	ldr	r3, [pc, #204]	; (8006ae0 <HAL_RCC_OscConfig+0x6a4>)
 8006a14:	2180      	movs	r1, #128	; 0x80
 8006a16:	0189      	lsls	r1, r1, #6
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a1c:	f7fe f914 	bl	8004c48 <HAL_GetTick>
 8006a20:	0003      	movs	r3, r0
 8006a22:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a24:	e008      	b.n	8006a38 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a26:	f7fe f90f 	bl	8004c48 <HAL_GetTick>
 8006a2a:	0002      	movs	r2, r0
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e0ca      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a38:	4b22      	ldr	r3, [pc, #136]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	4013      	ands	r3, r2
 8006a40:	d0f1      	beq.n	8006a26 <HAL_RCC_OscConfig+0x5ea>
 8006a42:	e01e      	b.n	8006a82 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006a44:	4b1f      	ldr	r3, [pc, #124]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	438a      	bics	r2, r1
 8006a4e:	609a      	str	r2, [r3, #8]
 8006a50:	4b23      	ldr	r3, [pc, #140]	; (8006ae0 <HAL_RCC_OscConfig+0x6a4>)
 8006a52:	6a1a      	ldr	r2, [r3, #32]
 8006a54:	4b22      	ldr	r3, [pc, #136]	; (8006ae0 <HAL_RCC_OscConfig+0x6a4>)
 8006a56:	4923      	ldr	r1, [pc, #140]	; (8006ae4 <HAL_RCC_OscConfig+0x6a8>)
 8006a58:	400a      	ands	r2, r1
 8006a5a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a5c:	f7fe f8f4 	bl	8004c48 <HAL_GetTick>
 8006a60:	0003      	movs	r3, r0
 8006a62:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a64:	e008      	b.n	8006a78 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a66:	f7fe f8ef 	bl	8004c48 <HAL_GetTick>
 8006a6a:	0002      	movs	r2, r0
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d901      	bls.n	8006a78 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e0aa      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a78:	4b12      	ldr	r3, [pc, #72]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	4013      	ands	r3, r2
 8006a80:	d1f1      	bne.n	8006a66 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d100      	bne.n	8006a8c <HAL_RCC_OscConfig+0x650>
 8006a8a:	e09f      	b.n	8006bcc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	2b0c      	cmp	r3, #12
 8006a90:	d100      	bne.n	8006a94 <HAL_RCC_OscConfig+0x658>
 8006a92:	e078      	b.n	8006b86 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d159      	bne.n	8006b50 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a9c:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	4b08      	ldr	r3, [pc, #32]	; (8006ac4 <HAL_RCC_OscConfig+0x688>)
 8006aa2:	4911      	ldr	r1, [pc, #68]	; (8006ae8 <HAL_RCC_OscConfig+0x6ac>)
 8006aa4:	400a      	ands	r2, r1
 8006aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa8:	f7fe f8ce 	bl	8004c48 <HAL_GetTick>
 8006aac:	0003      	movs	r3, r0
 8006aae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006ab0:	e01c      	b.n	8006aec <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ab2:	f7fe f8c9 	bl	8004c48 <HAL_GetTick>
 8006ab6:	0002      	movs	r2, r0
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d915      	bls.n	8006aec <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e084      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
 8006ac4:	40021000 	.word	0x40021000
 8006ac8:	ffff1fff 	.word	0xffff1fff
 8006acc:	fffffeff 	.word	0xfffffeff
 8006ad0:	40007000 	.word	0x40007000
 8006ad4:	fffffbff 	.word	0xfffffbff
 8006ad8:	00001388 	.word	0x00001388
 8006adc:	efffffff 	.word	0xefffffff
 8006ae0:	40010000 	.word	0x40010000
 8006ae4:	ffffdfff 	.word	0xffffdfff
 8006ae8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006aec:	4b3a      	ldr	r3, [pc, #232]	; (8006bd8 <HAL_RCC_OscConfig+0x79c>)
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	2380      	movs	r3, #128	; 0x80
 8006af2:	049b      	lsls	r3, r3, #18
 8006af4:	4013      	ands	r3, r2
 8006af6:	d1dc      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006af8:	4b37      	ldr	r3, [pc, #220]	; (8006bd8 <HAL_RCC_OscConfig+0x79c>)
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	4a37      	ldr	r2, [pc, #220]	; (8006bdc <HAL_RCC_OscConfig+0x7a0>)
 8006afe:	4013      	ands	r3, r2
 8006b00:	0019      	movs	r1, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b10:	431a      	orrs	r2, r3
 8006b12:	4b31      	ldr	r3, [pc, #196]	; (8006bd8 <HAL_RCC_OscConfig+0x79c>)
 8006b14:	430a      	orrs	r2, r1
 8006b16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b18:	4b2f      	ldr	r3, [pc, #188]	; (8006bd8 <HAL_RCC_OscConfig+0x79c>)
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	4b2e      	ldr	r3, [pc, #184]	; (8006bd8 <HAL_RCC_OscConfig+0x79c>)
 8006b1e:	2180      	movs	r1, #128	; 0x80
 8006b20:	0449      	lsls	r1, r1, #17
 8006b22:	430a      	orrs	r2, r1
 8006b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b26:	f7fe f88f 	bl	8004c48 <HAL_GetTick>
 8006b2a:	0003      	movs	r3, r0
 8006b2c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b30:	f7fe f88a 	bl	8004c48 <HAL_GetTick>
 8006b34:	0002      	movs	r2, r0
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e045      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006b42:	4b25      	ldr	r3, [pc, #148]	; (8006bd8 <HAL_RCC_OscConfig+0x79c>)
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	2380      	movs	r3, #128	; 0x80
 8006b48:	049b      	lsls	r3, r3, #18
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	d0f0      	beq.n	8006b30 <HAL_RCC_OscConfig+0x6f4>
 8006b4e:	e03d      	b.n	8006bcc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b50:	4b21      	ldr	r3, [pc, #132]	; (8006bd8 <HAL_RCC_OscConfig+0x79c>)
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	4b20      	ldr	r3, [pc, #128]	; (8006bd8 <HAL_RCC_OscConfig+0x79c>)
 8006b56:	4922      	ldr	r1, [pc, #136]	; (8006be0 <HAL_RCC_OscConfig+0x7a4>)
 8006b58:	400a      	ands	r2, r1
 8006b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b5c:	f7fe f874 	bl	8004c48 <HAL_GetTick>
 8006b60:	0003      	movs	r3, r0
 8006b62:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006b64:	e008      	b.n	8006b78 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b66:	f7fe f86f 	bl	8004c48 <HAL_GetTick>
 8006b6a:	0002      	movs	r2, r0
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e02a      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006b78:	4b17      	ldr	r3, [pc, #92]	; (8006bd8 <HAL_RCC_OscConfig+0x79c>)
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	2380      	movs	r3, #128	; 0x80
 8006b7e:	049b      	lsls	r3, r3, #18
 8006b80:	4013      	ands	r3, r2
 8006b82:	d1f0      	bne.n	8006b66 <HAL_RCC_OscConfig+0x72a>
 8006b84:	e022      	b.n	8006bcc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e01d      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006b92:	4b11      	ldr	r3, [pc, #68]	; (8006bd8 <HAL_RCC_OscConfig+0x79c>)
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	2380      	movs	r3, #128	; 0x80
 8006b9c:	025b      	lsls	r3, r3, #9
 8006b9e:	401a      	ands	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d10f      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	23f0      	movs	r3, #240	; 0xf0
 8006bac:	039b      	lsls	r3, r3, #14
 8006bae:	401a      	ands	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d107      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	23c0      	movs	r3, #192	; 0xc0
 8006bbc:	041b      	lsls	r3, r3, #16
 8006bbe:	401a      	ands	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d001      	beq.n	8006bcc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e000      	b.n	8006bce <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	0018      	movs	r0, r3
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	b00a      	add	sp, #40	; 0x28
 8006bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8006bd6:	46c0      	nop			; (mov r8, r8)
 8006bd8:	40021000 	.word	0x40021000
 8006bdc:	ff02ffff 	.word	0xff02ffff
 8006be0:	feffffff 	.word	0xfeffffff

08006be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006be4:	b5b0      	push	{r4, r5, r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e128      	b.n	8006e4a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bf8:	4b96      	ldr	r3, [pc, #600]	; (8006e54 <HAL_RCC_ClockConfig+0x270>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	4013      	ands	r3, r2
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d91e      	bls.n	8006c44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c06:	4b93      	ldr	r3, [pc, #588]	; (8006e54 <HAL_RCC_ClockConfig+0x270>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	4393      	bics	r3, r2
 8006c0e:	0019      	movs	r1, r3
 8006c10:	4b90      	ldr	r3, [pc, #576]	; (8006e54 <HAL_RCC_ClockConfig+0x270>)
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c18:	f7fe f816 	bl	8004c48 <HAL_GetTick>
 8006c1c:	0003      	movs	r3, r0
 8006c1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c20:	e009      	b.n	8006c36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c22:	f7fe f811 	bl	8004c48 <HAL_GetTick>
 8006c26:	0002      	movs	r2, r0
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	4a8a      	ldr	r2, [pc, #552]	; (8006e58 <HAL_RCC_ClockConfig+0x274>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e109      	b.n	8006e4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c36:	4b87      	ldr	r3, [pc, #540]	; (8006e54 <HAL_RCC_ClockConfig+0x270>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d1ee      	bne.n	8006c22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	d009      	beq.n	8006c62 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c4e:	4b83      	ldr	r3, [pc, #524]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	22f0      	movs	r2, #240	; 0xf0
 8006c54:	4393      	bics	r3, r2
 8006c56:	0019      	movs	r1, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	4b7f      	ldr	r3, [pc, #508]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2201      	movs	r2, #1
 8006c68:	4013      	ands	r3, r2
 8006c6a:	d100      	bne.n	8006c6e <HAL_RCC_ClockConfig+0x8a>
 8006c6c:	e089      	b.n	8006d82 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d107      	bne.n	8006c86 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c76:	4b79      	ldr	r3, [pc, #484]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	2380      	movs	r3, #128	; 0x80
 8006c7c:	029b      	lsls	r3, r3, #10
 8006c7e:	4013      	ands	r3, r2
 8006c80:	d120      	bne.n	8006cc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e0e1      	b.n	8006e4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d107      	bne.n	8006c9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c8e:	4b73      	ldr	r3, [pc, #460]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	2380      	movs	r3, #128	; 0x80
 8006c94:	049b      	lsls	r3, r3, #18
 8006c96:	4013      	ands	r3, r2
 8006c98:	d114      	bne.n	8006cc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e0d5      	b.n	8006e4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d106      	bne.n	8006cb4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ca6:	4b6d      	ldr	r3, [pc, #436]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2204      	movs	r2, #4
 8006cac:	4013      	ands	r3, r2
 8006cae:	d109      	bne.n	8006cc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e0ca      	b.n	8006e4a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006cb4:	4b69      	ldr	r3, [pc, #420]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	d101      	bne.n	8006cc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0c2      	b.n	8006e4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cc4:	4b65      	ldr	r3, [pc, #404]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	2203      	movs	r2, #3
 8006cca:	4393      	bics	r3, r2
 8006ccc:	0019      	movs	r1, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	4b62      	ldr	r3, [pc, #392]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cd8:	f7fd ffb6 	bl	8004c48 <HAL_GetTick>
 8006cdc:	0003      	movs	r3, r0
 8006cde:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d111      	bne.n	8006d0c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ce8:	e009      	b.n	8006cfe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cea:	f7fd ffad 	bl	8004c48 <HAL_GetTick>
 8006cee:	0002      	movs	r2, r0
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	4a58      	ldr	r2, [pc, #352]	; (8006e58 <HAL_RCC_ClockConfig+0x274>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e0a5      	b.n	8006e4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cfe:	4b57      	ldr	r3, [pc, #348]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	220c      	movs	r2, #12
 8006d04:	4013      	ands	r3, r2
 8006d06:	2b08      	cmp	r3, #8
 8006d08:	d1ef      	bne.n	8006cea <HAL_RCC_ClockConfig+0x106>
 8006d0a:	e03a      	b.n	8006d82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d111      	bne.n	8006d38 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d14:	e009      	b.n	8006d2a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d16:	f7fd ff97 	bl	8004c48 <HAL_GetTick>
 8006d1a:	0002      	movs	r2, r0
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	4a4d      	ldr	r2, [pc, #308]	; (8006e58 <HAL_RCC_ClockConfig+0x274>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e08f      	b.n	8006e4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d2a:	4b4c      	ldr	r3, [pc, #304]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	220c      	movs	r2, #12
 8006d30:	4013      	ands	r3, r2
 8006d32:	2b0c      	cmp	r3, #12
 8006d34:	d1ef      	bne.n	8006d16 <HAL_RCC_ClockConfig+0x132>
 8006d36:	e024      	b.n	8006d82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d11b      	bne.n	8006d78 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d40:	e009      	b.n	8006d56 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d42:	f7fd ff81 	bl	8004c48 <HAL_GetTick>
 8006d46:	0002      	movs	r2, r0
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	4a42      	ldr	r2, [pc, #264]	; (8006e58 <HAL_RCC_ClockConfig+0x274>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e079      	b.n	8006e4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d56:	4b41      	ldr	r3, [pc, #260]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	220c      	movs	r2, #12
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d1ef      	bne.n	8006d42 <HAL_RCC_ClockConfig+0x15e>
 8006d62:	e00e      	b.n	8006d82 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d64:	f7fd ff70 	bl	8004c48 <HAL_GetTick>
 8006d68:	0002      	movs	r2, r0
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	4a3a      	ldr	r2, [pc, #232]	; (8006e58 <HAL_RCC_ClockConfig+0x274>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d901      	bls.n	8006d78 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e068      	b.n	8006e4a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006d78:	4b38      	ldr	r3, [pc, #224]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	220c      	movs	r2, #12
 8006d7e:	4013      	ands	r3, r2
 8006d80:	d1f0      	bne.n	8006d64 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d82:	4b34      	ldr	r3, [pc, #208]	; (8006e54 <HAL_RCC_ClockConfig+0x270>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2201      	movs	r2, #1
 8006d88:	4013      	ands	r3, r2
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d21e      	bcs.n	8006dce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d90:	4b30      	ldr	r3, [pc, #192]	; (8006e54 <HAL_RCC_ClockConfig+0x270>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2201      	movs	r2, #1
 8006d96:	4393      	bics	r3, r2
 8006d98:	0019      	movs	r1, r3
 8006d9a:	4b2e      	ldr	r3, [pc, #184]	; (8006e54 <HAL_RCC_ClockConfig+0x270>)
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006da2:	f7fd ff51 	bl	8004c48 <HAL_GetTick>
 8006da6:	0003      	movs	r3, r0
 8006da8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006daa:	e009      	b.n	8006dc0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dac:	f7fd ff4c 	bl	8004c48 <HAL_GetTick>
 8006db0:	0002      	movs	r2, r0
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	4a28      	ldr	r2, [pc, #160]	; (8006e58 <HAL_RCC_ClockConfig+0x274>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e044      	b.n	8006e4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc0:	4b24      	ldr	r3, [pc, #144]	; (8006e54 <HAL_RCC_ClockConfig+0x270>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d1ee      	bne.n	8006dac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2204      	movs	r2, #4
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	d009      	beq.n	8006dec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dd8:	4b20      	ldr	r3, [pc, #128]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	4a20      	ldr	r2, [pc, #128]	; (8006e60 <HAL_RCC_ClockConfig+0x27c>)
 8006dde:	4013      	ands	r3, r2
 8006de0:	0019      	movs	r1, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	4b1d      	ldr	r3, [pc, #116]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006de8:	430a      	orrs	r2, r1
 8006dea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2208      	movs	r2, #8
 8006df2:	4013      	ands	r3, r2
 8006df4:	d00a      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006df6:	4b19      	ldr	r3, [pc, #100]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	4a1a      	ldr	r2, [pc, #104]	; (8006e64 <HAL_RCC_ClockConfig+0x280>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	0019      	movs	r1, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	00da      	lsls	r2, r3, #3
 8006e06:	4b15      	ldr	r3, [pc, #84]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e0c:	f000 f832 	bl	8006e74 <HAL_RCC_GetSysClockFreq>
 8006e10:	0001      	movs	r1, r0
 8006e12:	4b12      	ldr	r3, [pc, #72]	; (8006e5c <HAL_RCC_ClockConfig+0x278>)
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	091b      	lsrs	r3, r3, #4
 8006e18:	220f      	movs	r2, #15
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	4a12      	ldr	r2, [pc, #72]	; (8006e68 <HAL_RCC_ClockConfig+0x284>)
 8006e1e:	5cd3      	ldrb	r3, [r2, r3]
 8006e20:	000a      	movs	r2, r1
 8006e22:	40da      	lsrs	r2, r3
 8006e24:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <HAL_RCC_ClockConfig+0x288>)
 8006e26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e28:	4b11      	ldr	r3, [pc, #68]	; (8006e70 <HAL_RCC_ClockConfig+0x28c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	250b      	movs	r5, #11
 8006e2e:	197c      	adds	r4, r7, r5
 8006e30:	0018      	movs	r0, r3
 8006e32:	f7fd fec3 	bl	8004bbc <HAL_InitTick>
 8006e36:	0003      	movs	r3, r0
 8006e38:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006e3a:	197b      	adds	r3, r7, r5
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006e42:	197b      	adds	r3, r7, r5
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	e000      	b.n	8006e4a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	b004      	add	sp, #16
 8006e50:	bdb0      	pop	{r4, r5, r7, pc}
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	40022000 	.word	0x40022000
 8006e58:	00001388 	.word	0x00001388
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	fffff8ff 	.word	0xfffff8ff
 8006e64:	ffffc7ff 	.word	0xffffc7ff
 8006e68:	0800c450 	.word	0x0800c450
 8006e6c:	20000000 	.word	0x20000000
 8006e70:	20000004 	.word	0x20000004

08006e74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e74:	b5b0      	push	{r4, r5, r7, lr}
 8006e76:	b08e      	sub	sp, #56	; 0x38
 8006e78:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006e7a:	4b4c      	ldr	r3, [pc, #304]	; (8006fac <HAL_RCC_GetSysClockFreq+0x138>)
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e82:	230c      	movs	r3, #12
 8006e84:	4013      	ands	r3, r2
 8006e86:	2b0c      	cmp	r3, #12
 8006e88:	d014      	beq.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8006e8a:	d900      	bls.n	8006e8e <HAL_RCC_GetSysClockFreq+0x1a>
 8006e8c:	e07b      	b.n	8006f86 <HAL_RCC_GetSysClockFreq+0x112>
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d002      	beq.n	8006e98 <HAL_RCC_GetSysClockFreq+0x24>
 8006e92:	2b08      	cmp	r3, #8
 8006e94:	d00b      	beq.n	8006eae <HAL_RCC_GetSysClockFreq+0x3a>
 8006e96:	e076      	b.n	8006f86 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006e98:	4b44      	ldr	r3, [pc, #272]	; (8006fac <HAL_RCC_GetSysClockFreq+0x138>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2210      	movs	r2, #16
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	d002      	beq.n	8006ea8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006ea2:	4b43      	ldr	r3, [pc, #268]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006ea4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006ea6:	e07c      	b.n	8006fa2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006ea8:	4b42      	ldr	r3, [pc, #264]	; (8006fb4 <HAL_RCC_GetSysClockFreq+0x140>)
 8006eaa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006eac:	e079      	b.n	8006fa2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006eae:	4b42      	ldr	r3, [pc, #264]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8006eb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006eb2:	e076      	b.n	8006fa2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb6:	0c9a      	lsrs	r2, r3, #18
 8006eb8:	230f      	movs	r3, #15
 8006eba:	401a      	ands	r2, r3
 8006ebc:	4b3f      	ldr	r3, [pc, #252]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x148>)
 8006ebe:	5c9b      	ldrb	r3, [r3, r2]
 8006ec0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	0d9a      	lsrs	r2, r3, #22
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	4013      	ands	r3, r2
 8006eca:	3301      	adds	r3, #1
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ece:	4b37      	ldr	r3, [pc, #220]	; (8006fac <HAL_RCC_GetSysClockFreq+0x138>)
 8006ed0:	68da      	ldr	r2, [r3, #12]
 8006ed2:	2380      	movs	r3, #128	; 0x80
 8006ed4:	025b      	lsls	r3, r3, #9
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	d01a      	beq.n	8006f10 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61fb      	str	r3, [r7, #28]
 8006ee2:	4a35      	ldr	r2, [pc, #212]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	69b8      	ldr	r0, [r7, #24]
 8006ee8:	69f9      	ldr	r1, [r7, #28]
 8006eea:	f7f9 fafd 	bl	80004e8 <__aeabi_lmul>
 8006eee:	0002      	movs	r2, r0
 8006ef0:	000b      	movs	r3, r1
 8006ef2:	0010      	movs	r0, r2
 8006ef4:	0019      	movs	r1, r3
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	2300      	movs	r3, #0
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f7f9 fad1 	bl	80004a8 <__aeabi_uldivmod>
 8006f06:	0002      	movs	r2, r0
 8006f08:	000b      	movs	r3, r1
 8006f0a:	0013      	movs	r3, r2
 8006f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0e:	e037      	b.n	8006f80 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006f10:	4b26      	ldr	r3, [pc, #152]	; (8006fac <HAL_RCC_GetSysClockFreq+0x138>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2210      	movs	r2, #16
 8006f16:	4013      	ands	r3, r2
 8006f18:	d01a      	beq.n	8006f50 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	60bb      	str	r3, [r7, #8]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	4a23      	ldr	r2, [pc, #140]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006f24:	2300      	movs	r3, #0
 8006f26:	68b8      	ldr	r0, [r7, #8]
 8006f28:	68f9      	ldr	r1, [r7, #12]
 8006f2a:	f7f9 fadd 	bl	80004e8 <__aeabi_lmul>
 8006f2e:	0002      	movs	r2, r0
 8006f30:	000b      	movs	r3, r1
 8006f32:	0010      	movs	r0, r2
 8006f34:	0019      	movs	r1, r3
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	603b      	str	r3, [r7, #0]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	607b      	str	r3, [r7, #4]
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f7f9 fab1 	bl	80004a8 <__aeabi_uldivmod>
 8006f46:	0002      	movs	r2, r0
 8006f48:	000b      	movs	r3, r1
 8006f4a:	0013      	movs	r3, r2
 8006f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f4e:	e017      	b.n	8006f80 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f52:	0018      	movs	r0, r3
 8006f54:	2300      	movs	r3, #0
 8006f56:	0019      	movs	r1, r3
 8006f58:	4a16      	ldr	r2, [pc, #88]	; (8006fb4 <HAL_RCC_GetSysClockFreq+0x140>)
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f7f9 fac4 	bl	80004e8 <__aeabi_lmul>
 8006f60:	0002      	movs	r2, r0
 8006f62:	000b      	movs	r3, r1
 8006f64:	0010      	movs	r0, r2
 8006f66:	0019      	movs	r1, r3
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	001c      	movs	r4, r3
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	001d      	movs	r5, r3
 8006f70:	0022      	movs	r2, r4
 8006f72:	002b      	movs	r3, r5
 8006f74:	f7f9 fa98 	bl	80004a8 <__aeabi_uldivmod>
 8006f78:	0002      	movs	r2, r0
 8006f7a:	000b      	movs	r3, r1
 8006f7c:	0013      	movs	r3, r2
 8006f7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006f84:	e00d      	b.n	8006fa2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006f86:	4b09      	ldr	r3, [pc, #36]	; (8006fac <HAL_RCC_GetSysClockFreq+0x138>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	0b5b      	lsrs	r3, r3, #13
 8006f8c:	2207      	movs	r2, #7
 8006f8e:	4013      	ands	r3, r2
 8006f90:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	3301      	adds	r3, #1
 8006f96:	2280      	movs	r2, #128	; 0x80
 8006f98:	0212      	lsls	r2, r2, #8
 8006f9a:	409a      	lsls	r2, r3
 8006f9c:	0013      	movs	r3, r2
 8006f9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006fa0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	b00e      	add	sp, #56	; 0x38
 8006faa:	bdb0      	pop	{r4, r5, r7, pc}
 8006fac:	40021000 	.word	0x40021000
 8006fb0:	003d0900 	.word	0x003d0900
 8006fb4:	00f42400 	.word	0x00f42400
 8006fb8:	007a1200 	.word	0x007a1200
 8006fbc:	0800c468 	.word	0x0800c468

08006fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fc4:	4b02      	ldr	r3, [pc, #8]	; (8006fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
}
 8006fc8:	0018      	movs	r0, r3
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	20000000 	.word	0x20000000

08006fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006fd8:	f7ff fff2 	bl	8006fc0 <HAL_RCC_GetHCLKFreq>
 8006fdc:	0001      	movs	r1, r0
 8006fde:	4b06      	ldr	r3, [pc, #24]	; (8006ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	0a1b      	lsrs	r3, r3, #8
 8006fe4:	2207      	movs	r2, #7
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	4a04      	ldr	r2, [pc, #16]	; (8006ffc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006fea:	5cd3      	ldrb	r3, [r2, r3]
 8006fec:	40d9      	lsrs	r1, r3
 8006fee:	000b      	movs	r3, r1
}
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	46c0      	nop			; (mov r8, r8)
 8006ff8:	40021000 	.word	0x40021000
 8006ffc:	0800c460 	.word	0x0800c460

08007000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007004:	f7ff ffdc 	bl	8006fc0 <HAL_RCC_GetHCLKFreq>
 8007008:	0001      	movs	r1, r0
 800700a:	4b06      	ldr	r3, [pc, #24]	; (8007024 <HAL_RCC_GetPCLK2Freq+0x24>)
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	0adb      	lsrs	r3, r3, #11
 8007010:	2207      	movs	r2, #7
 8007012:	4013      	ands	r3, r2
 8007014:	4a04      	ldr	r2, [pc, #16]	; (8007028 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007016:	5cd3      	ldrb	r3, [r2, r3]
 8007018:	40d9      	lsrs	r1, r3
 800701a:	000b      	movs	r3, r1
}
 800701c:	0018      	movs	r0, r3
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	46c0      	nop			; (mov r8, r8)
 8007024:	40021000 	.word	0x40021000
 8007028:	0800c460 	.word	0x0800c460

0800702c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8007034:	2017      	movs	r0, #23
 8007036:	183b      	adds	r3, r7, r0
 8007038:	2200      	movs	r2, #0
 800703a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2220      	movs	r2, #32
 8007042:	4013      	ands	r3, r2
 8007044:	d100      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8007046:	e0c2      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007048:	4b98      	ldr	r3, [pc, #608]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800704a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800704c:	2380      	movs	r3, #128	; 0x80
 800704e:	055b      	lsls	r3, r3, #21
 8007050:	4013      	ands	r3, r2
 8007052:	d109      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007054:	4b95      	ldr	r3, [pc, #596]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007058:	4b94      	ldr	r3, [pc, #592]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800705a:	2180      	movs	r1, #128	; 0x80
 800705c:	0549      	lsls	r1, r1, #21
 800705e:	430a      	orrs	r2, r1
 8007060:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007062:	183b      	adds	r3, r7, r0
 8007064:	2201      	movs	r2, #1
 8007066:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007068:	4b91      	ldr	r3, [pc, #580]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	2380      	movs	r3, #128	; 0x80
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	4013      	ands	r3, r2
 8007072:	d11a      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007074:	4b8e      	ldr	r3, [pc, #568]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	4b8d      	ldr	r3, [pc, #564]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800707a:	2180      	movs	r1, #128	; 0x80
 800707c:	0049      	lsls	r1, r1, #1
 800707e:	430a      	orrs	r2, r1
 8007080:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007082:	f7fd fde1 	bl	8004c48 <HAL_GetTick>
 8007086:	0003      	movs	r3, r0
 8007088:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800708a:	e008      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800708c:	f7fd fddc 	bl	8004c48 <HAL_GetTick>
 8007090:	0002      	movs	r2, r0
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b64      	cmp	r3, #100	; 0x64
 8007098:	d901      	bls.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e102      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800709e:	4b84      	ldr	r3, [pc, #528]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	2380      	movs	r3, #128	; 0x80
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	4013      	ands	r3, r2
 80070a8:	d0f0      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80070aa:	4b80      	ldr	r3, [pc, #512]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	23c0      	movs	r3, #192	; 0xc0
 80070b0:	039b      	lsls	r3, r3, #14
 80070b2:	4013      	ands	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	23c0      	movs	r3, #192	; 0xc0
 80070bc:	039b      	lsls	r3, r3, #14
 80070be:	4013      	ands	r3, r2
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d013      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	23c0      	movs	r3, #192	; 0xc0
 80070cc:	029b      	lsls	r3, r3, #10
 80070ce:	401a      	ands	r2, r3
 80070d0:	23c0      	movs	r3, #192	; 0xc0
 80070d2:	029b      	lsls	r3, r3, #10
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d10a      	bne.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070d8:	4b74      	ldr	r3, [pc, #464]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	2380      	movs	r3, #128	; 0x80
 80070de:	029b      	lsls	r3, r3, #10
 80070e0:	401a      	ands	r2, r3
 80070e2:	2380      	movs	r3, #128	; 0x80
 80070e4:	029b      	lsls	r3, r3, #10
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d101      	bne.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e0da      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80070ee:	4b6f      	ldr	r3, [pc, #444]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070f2:	23c0      	movs	r3, #192	; 0xc0
 80070f4:	029b      	lsls	r3, r3, #10
 80070f6:	4013      	ands	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d03b      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	23c0      	movs	r3, #192	; 0xc0
 8007106:	029b      	lsls	r3, r3, #10
 8007108:	4013      	ands	r3, r2
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	429a      	cmp	r2, r3
 800710e:	d033      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2220      	movs	r2, #32
 8007116:	4013      	ands	r3, r2
 8007118:	d02e      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800711a:	4b64      	ldr	r3, [pc, #400]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800711c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800711e:	4a65      	ldr	r2, [pc, #404]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007120:	4013      	ands	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007124:	4b61      	ldr	r3, [pc, #388]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007126:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007128:	4b60      	ldr	r3, [pc, #384]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800712a:	2180      	movs	r1, #128	; 0x80
 800712c:	0309      	lsls	r1, r1, #12
 800712e:	430a      	orrs	r2, r1
 8007130:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007132:	4b5e      	ldr	r3, [pc, #376]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007134:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007136:	4b5d      	ldr	r3, [pc, #372]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007138:	495f      	ldr	r1, [pc, #380]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800713a:	400a      	ands	r2, r1
 800713c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800713e:	4b5b      	ldr	r3, [pc, #364]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	2380      	movs	r3, #128	; 0x80
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	4013      	ands	r3, r2
 800714c:	d014      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800714e:	f7fd fd7b 	bl	8004c48 <HAL_GetTick>
 8007152:	0003      	movs	r3, r0
 8007154:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007156:	e009      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007158:	f7fd fd76 	bl	8004c48 <HAL_GetTick>
 800715c:	0002      	movs	r2, r0
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	4a56      	ldr	r2, [pc, #344]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d901      	bls.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e09b      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800716c:	4b4f      	ldr	r3, [pc, #316]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800716e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007170:	2380      	movs	r3, #128	; 0x80
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4013      	ands	r3, r2
 8007176:	d0ef      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	23c0      	movs	r3, #192	; 0xc0
 800717e:	029b      	lsls	r3, r3, #10
 8007180:	401a      	ands	r2, r3
 8007182:	23c0      	movs	r3, #192	; 0xc0
 8007184:	029b      	lsls	r3, r3, #10
 8007186:	429a      	cmp	r2, r3
 8007188:	d10c      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800718a:	4b48      	ldr	r3, [pc, #288]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a4c      	ldr	r2, [pc, #304]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007190:	4013      	ands	r3, r2
 8007192:	0019      	movs	r1, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	23c0      	movs	r3, #192	; 0xc0
 800719a:	039b      	lsls	r3, r3, #14
 800719c:	401a      	ands	r2, r3
 800719e:	4b43      	ldr	r3, [pc, #268]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071a0:	430a      	orrs	r2, r1
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	4b41      	ldr	r3, [pc, #260]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071a6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	23c0      	movs	r3, #192	; 0xc0
 80071ae:	029b      	lsls	r3, r3, #10
 80071b0:	401a      	ands	r2, r3
 80071b2:	4b3e      	ldr	r3, [pc, #248]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071b4:	430a      	orrs	r2, r1
 80071b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80071b8:	2317      	movs	r3, #23
 80071ba:	18fb      	adds	r3, r7, r3
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d105      	bne.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071c2:	4b3a      	ldr	r3, [pc, #232]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071c6:	4b39      	ldr	r3, [pc, #228]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071c8:	493e      	ldr	r1, [pc, #248]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80071ca:	400a      	ands	r2, r1
 80071cc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2201      	movs	r2, #1
 80071d4:	4013      	ands	r3, r2
 80071d6:	d009      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071d8:	4b34      	ldr	r3, [pc, #208]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071dc:	2203      	movs	r2, #3
 80071de:	4393      	bics	r3, r2
 80071e0:	0019      	movs	r1, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	4b31      	ldr	r3, [pc, #196]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071e8:	430a      	orrs	r2, r1
 80071ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2202      	movs	r2, #2
 80071f2:	4013      	ands	r3, r2
 80071f4:	d009      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071f6:	4b2d      	ldr	r3, [pc, #180]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fa:	220c      	movs	r2, #12
 80071fc:	4393      	bics	r3, r2
 80071fe:	0019      	movs	r1, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68da      	ldr	r2, [r3, #12]
 8007204:	4b29      	ldr	r3, [pc, #164]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007206:	430a      	orrs	r2, r1
 8007208:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2204      	movs	r2, #4
 8007210:	4013      	ands	r3, r2
 8007212:	d009      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007214:	4b25      	ldr	r3, [pc, #148]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007218:	4a2b      	ldr	r2, [pc, #172]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800721a:	4013      	ands	r3, r2
 800721c:	0019      	movs	r1, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691a      	ldr	r2, [r3, #16]
 8007222:	4b22      	ldr	r3, [pc, #136]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007224:	430a      	orrs	r2, r1
 8007226:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2208      	movs	r2, #8
 800722e:	4013      	ands	r3, r2
 8007230:	d009      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007232:	4b1e      	ldr	r3, [pc, #120]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007236:	4a25      	ldr	r2, [pc, #148]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007238:	4013      	ands	r3, r2
 800723a:	0019      	movs	r1, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	695a      	ldr	r2, [r3, #20]
 8007240:	4b1a      	ldr	r3, [pc, #104]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007242:	430a      	orrs	r2, r1
 8007244:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	2380      	movs	r3, #128	; 0x80
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	4013      	ands	r3, r2
 8007250:	d009      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007252:	4b16      	ldr	r3, [pc, #88]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007256:	4a17      	ldr	r2, [pc, #92]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007258:	4013      	ands	r3, r2
 800725a:	0019      	movs	r1, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	699a      	ldr	r2, [r3, #24]
 8007260:	4b12      	ldr	r3, [pc, #72]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007262:	430a      	orrs	r2, r1
 8007264:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2240      	movs	r2, #64	; 0x40
 800726c:	4013      	ands	r3, r2
 800726e:	d009      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007270:	4b0e      	ldr	r3, [pc, #56]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007274:	4a16      	ldr	r2, [pc, #88]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007276:	4013      	ands	r3, r2
 8007278:	0019      	movs	r1, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1a      	ldr	r2, [r3, #32]
 800727e:	4b0b      	ldr	r3, [pc, #44]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007280:	430a      	orrs	r2, r1
 8007282:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2280      	movs	r2, #128	; 0x80
 800728a:	4013      	ands	r3, r2
 800728c:	d009      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800728e:	4b07      	ldr	r3, [pc, #28]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007292:	4a10      	ldr	r2, [pc, #64]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8007294:	4013      	ands	r3, r2
 8007296:	0019      	movs	r1, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	69da      	ldr	r2, [r3, #28]
 800729c:	4b03      	ldr	r3, [pc, #12]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800729e:	430a      	orrs	r2, r1
 80072a0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	0018      	movs	r0, r3
 80072a6:	46bd      	mov	sp, r7
 80072a8:	b006      	add	sp, #24
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	40021000 	.word	0x40021000
 80072b0:	40007000 	.word	0x40007000
 80072b4:	fffcffff 	.word	0xfffcffff
 80072b8:	fff7ffff 	.word	0xfff7ffff
 80072bc:	00001388 	.word	0x00001388
 80072c0:	ffcfffff 	.word	0xffcfffff
 80072c4:	efffffff 	.word	0xefffffff
 80072c8:	fffff3ff 	.word	0xfffff3ff
 80072cc:	ffffcfff 	.word	0xffffcfff
 80072d0:	fbffffff 	.word	0xfbffffff
 80072d4:	fff3ffff 	.word	0xfff3ffff

080072d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e032      	b.n	8007350 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2239      	movs	r2, #57	; 0x39
 80072ee:	5c9b      	ldrb	r3, [r3, r2]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d107      	bne.n	8007306 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2238      	movs	r2, #56	; 0x38
 80072fa:	2100      	movs	r1, #0
 80072fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	0018      	movs	r0, r3
 8007302:	f7fd faa9 	bl	8004858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2239      	movs	r2, #57	; 0x39
 800730a:	2102      	movs	r1, #2
 800730c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3304      	adds	r3, #4
 8007316:	0019      	movs	r1, r3
 8007318:	0010      	movs	r0, r2
 800731a:	f000 f93b 	bl	8007594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	223e      	movs	r2, #62	; 0x3e
 8007322:	2101      	movs	r1, #1
 8007324:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	223a      	movs	r2, #58	; 0x3a
 800732a:	2101      	movs	r1, #1
 800732c:	5499      	strb	r1, [r3, r2]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	223b      	movs	r2, #59	; 0x3b
 8007332:	2101      	movs	r1, #1
 8007334:	5499      	strb	r1, [r3, r2]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	223c      	movs	r2, #60	; 0x3c
 800733a:	2101      	movs	r1, #1
 800733c:	5499      	strb	r1, [r3, r2]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	223d      	movs	r2, #61	; 0x3d
 8007342:	2101      	movs	r1, #1
 8007344:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2239      	movs	r2, #57	; 0x39
 800734a:	2101      	movs	r1, #1
 800734c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	0018      	movs	r0, r3
 8007352:	46bd      	mov	sp, r7
 8007354:	b002      	add	sp, #8
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2239      	movs	r2, #57	; 0x39
 8007364:	5c9b      	ldrb	r3, [r3, r2]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b01      	cmp	r3, #1
 800736a:	d001      	beq.n	8007370 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e033      	b.n	80073d8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2239      	movs	r2, #57	; 0x39
 8007374:	2102      	movs	r1, #2
 8007376:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	2380      	movs	r3, #128	; 0x80
 800737e:	05db      	lsls	r3, r3, #23
 8007380:	429a      	cmp	r2, r3
 8007382:	d00e      	beq.n	80073a2 <HAL_TIM_Base_Start+0x4a>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a15      	ldr	r2, [pc, #84]	; (80073e0 <HAL_TIM_Base_Start+0x88>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d009      	beq.n	80073a2 <HAL_TIM_Base_Start+0x4a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a14      	ldr	r2, [pc, #80]	; (80073e4 <HAL_TIM_Base_Start+0x8c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d004      	beq.n	80073a2 <HAL_TIM_Base_Start+0x4a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a12      	ldr	r2, [pc, #72]	; (80073e8 <HAL_TIM_Base_Start+0x90>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d111      	bne.n	80073c6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	2207      	movs	r2, #7
 80073aa:	4013      	ands	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2b06      	cmp	r3, #6
 80073b2:	d010      	beq.n	80073d6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2101      	movs	r1, #1
 80073c0:	430a      	orrs	r2, r1
 80073c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c4:	e007      	b.n	80073d6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2101      	movs	r1, #1
 80073d2:	430a      	orrs	r2, r1
 80073d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	0018      	movs	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	b004      	add	sp, #16
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	40000400 	.word	0x40000400
 80073e4:	40010800 	.word	0x40010800
 80073e8:	40011400 	.word	0x40011400

080073ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073f6:	230f      	movs	r3, #15
 80073f8:	18fb      	adds	r3, r7, r3
 80073fa:	2200      	movs	r2, #0
 80073fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2238      	movs	r2, #56	; 0x38
 8007402:	5c9b      	ldrb	r3, [r3, r2]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d101      	bne.n	800740c <HAL_TIM_ConfigClockSource+0x20>
 8007408:	2302      	movs	r3, #2
 800740a:	e0bc      	b.n	8007586 <HAL_TIM_ConfigClockSource+0x19a>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2238      	movs	r2, #56	; 0x38
 8007410:	2101      	movs	r1, #1
 8007412:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2239      	movs	r2, #57	; 0x39
 8007418:	2102      	movs	r1, #2
 800741a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2277      	movs	r2, #119	; 0x77
 8007428:	4393      	bics	r3, r2
 800742a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	4a58      	ldr	r2, [pc, #352]	; (8007590 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007430:	4013      	ands	r3, r2
 8007432:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2280      	movs	r2, #128	; 0x80
 8007442:	0192      	lsls	r2, r2, #6
 8007444:	4293      	cmp	r3, r2
 8007446:	d040      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0xde>
 8007448:	2280      	movs	r2, #128	; 0x80
 800744a:	0192      	lsls	r2, r2, #6
 800744c:	4293      	cmp	r3, r2
 800744e:	d900      	bls.n	8007452 <HAL_TIM_ConfigClockSource+0x66>
 8007450:	e088      	b.n	8007564 <HAL_TIM_ConfigClockSource+0x178>
 8007452:	2280      	movs	r2, #128	; 0x80
 8007454:	0152      	lsls	r2, r2, #5
 8007456:	4293      	cmp	r3, r2
 8007458:	d100      	bne.n	800745c <HAL_TIM_ConfigClockSource+0x70>
 800745a:	e088      	b.n	800756e <HAL_TIM_ConfigClockSource+0x182>
 800745c:	2280      	movs	r2, #128	; 0x80
 800745e:	0152      	lsls	r2, r2, #5
 8007460:	4293      	cmp	r3, r2
 8007462:	d900      	bls.n	8007466 <HAL_TIM_ConfigClockSource+0x7a>
 8007464:	e07e      	b.n	8007564 <HAL_TIM_ConfigClockSource+0x178>
 8007466:	2b70      	cmp	r3, #112	; 0x70
 8007468:	d018      	beq.n	800749c <HAL_TIM_ConfigClockSource+0xb0>
 800746a:	d900      	bls.n	800746e <HAL_TIM_ConfigClockSource+0x82>
 800746c:	e07a      	b.n	8007564 <HAL_TIM_ConfigClockSource+0x178>
 800746e:	2b60      	cmp	r3, #96	; 0x60
 8007470:	d04f      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0x126>
 8007472:	d900      	bls.n	8007476 <HAL_TIM_ConfigClockSource+0x8a>
 8007474:	e076      	b.n	8007564 <HAL_TIM_ConfigClockSource+0x178>
 8007476:	2b50      	cmp	r3, #80	; 0x50
 8007478:	d03b      	beq.n	80074f2 <HAL_TIM_ConfigClockSource+0x106>
 800747a:	d900      	bls.n	800747e <HAL_TIM_ConfigClockSource+0x92>
 800747c:	e072      	b.n	8007564 <HAL_TIM_ConfigClockSource+0x178>
 800747e:	2b40      	cmp	r3, #64	; 0x40
 8007480:	d057      	beq.n	8007532 <HAL_TIM_ConfigClockSource+0x146>
 8007482:	d900      	bls.n	8007486 <HAL_TIM_ConfigClockSource+0x9a>
 8007484:	e06e      	b.n	8007564 <HAL_TIM_ConfigClockSource+0x178>
 8007486:	2b30      	cmp	r3, #48	; 0x30
 8007488:	d063      	beq.n	8007552 <HAL_TIM_ConfigClockSource+0x166>
 800748a:	d86b      	bhi.n	8007564 <HAL_TIM_ConfigClockSource+0x178>
 800748c:	2b20      	cmp	r3, #32
 800748e:	d060      	beq.n	8007552 <HAL_TIM_ConfigClockSource+0x166>
 8007490:	d868      	bhi.n	8007564 <HAL_TIM_ConfigClockSource+0x178>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d05d      	beq.n	8007552 <HAL_TIM_ConfigClockSource+0x166>
 8007496:	2b10      	cmp	r3, #16
 8007498:	d05b      	beq.n	8007552 <HAL_TIM_ConfigClockSource+0x166>
 800749a:	e063      	b.n	8007564 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6818      	ldr	r0, [r3, #0]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	6899      	ldr	r1, [r3, #8]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f000 f94a 	bl	8007744 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2277      	movs	r2, #119	; 0x77
 80074bc:	4313      	orrs	r3, r2
 80074be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	609a      	str	r2, [r3, #8]
      break;
 80074c8:	e052      	b.n	8007570 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6818      	ldr	r0, [r3, #0]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	6899      	ldr	r1, [r3, #8]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f000 f933 	bl	8007744 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689a      	ldr	r2, [r3, #8]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2180      	movs	r1, #128	; 0x80
 80074ea:	01c9      	lsls	r1, r1, #7
 80074ec:	430a      	orrs	r2, r1
 80074ee:	609a      	str	r2, [r3, #8]
      break;
 80074f0:	e03e      	b.n	8007570 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	6859      	ldr	r1, [r3, #4]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	001a      	movs	r2, r3
 8007500:	f000 f8a6 	bl	8007650 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2150      	movs	r1, #80	; 0x50
 800750a:	0018      	movs	r0, r3
 800750c:	f000 f900 	bl	8007710 <TIM_ITRx_SetConfig>
      break;
 8007510:	e02e      	b.n	8007570 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	6859      	ldr	r1, [r3, #4]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	001a      	movs	r2, r3
 8007520:	f000 f8c4 	bl	80076ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2160      	movs	r1, #96	; 0x60
 800752a:	0018      	movs	r0, r3
 800752c:	f000 f8f0 	bl	8007710 <TIM_ITRx_SetConfig>
      break;
 8007530:	e01e      	b.n	8007570 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	6859      	ldr	r1, [r3, #4]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	001a      	movs	r2, r3
 8007540:	f000 f886 	bl	8007650 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2140      	movs	r1, #64	; 0x40
 800754a:	0018      	movs	r0, r3
 800754c:	f000 f8e0 	bl	8007710 <TIM_ITRx_SetConfig>
      break;
 8007550:	e00e      	b.n	8007570 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	0019      	movs	r1, r3
 800755c:	0010      	movs	r0, r2
 800755e:	f000 f8d7 	bl	8007710 <TIM_ITRx_SetConfig>
      break;
 8007562:	e005      	b.n	8007570 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007564:	230f      	movs	r3, #15
 8007566:	18fb      	adds	r3, r7, r3
 8007568:	2201      	movs	r2, #1
 800756a:	701a      	strb	r2, [r3, #0]
      break;
 800756c:	e000      	b.n	8007570 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800756e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2239      	movs	r2, #57	; 0x39
 8007574:	2101      	movs	r1, #1
 8007576:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2238      	movs	r2, #56	; 0x38
 800757c:	2100      	movs	r1, #0
 800757e:	5499      	strb	r1, [r3, r2]

  return status;
 8007580:	230f      	movs	r3, #15
 8007582:	18fb      	adds	r3, r7, r3
 8007584:	781b      	ldrb	r3, [r3, #0]
}
 8007586:	0018      	movs	r0, r3
 8007588:	46bd      	mov	sp, r7
 800758a:	b004      	add	sp, #16
 800758c:	bd80      	pop	{r7, pc}
 800758e:	46c0      	nop			; (mov r8, r8)
 8007590:	ffff00ff 	.word	0xffff00ff

08007594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	2380      	movs	r3, #128	; 0x80
 80075a8:	05db      	lsls	r3, r3, #23
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d00b      	beq.n	80075c6 <TIM_Base_SetConfig+0x32>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a23      	ldr	r2, [pc, #140]	; (8007640 <TIM_Base_SetConfig+0xac>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d007      	beq.n	80075c6 <TIM_Base_SetConfig+0x32>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a22      	ldr	r2, [pc, #136]	; (8007644 <TIM_Base_SetConfig+0xb0>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d003      	beq.n	80075c6 <TIM_Base_SetConfig+0x32>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a21      	ldr	r2, [pc, #132]	; (8007648 <TIM_Base_SetConfig+0xb4>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d108      	bne.n	80075d8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2270      	movs	r2, #112	; 0x70
 80075ca:	4393      	bics	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	2380      	movs	r3, #128	; 0x80
 80075dc:	05db      	lsls	r3, r3, #23
 80075de:	429a      	cmp	r2, r3
 80075e0:	d00b      	beq.n	80075fa <TIM_Base_SetConfig+0x66>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a16      	ldr	r2, [pc, #88]	; (8007640 <TIM_Base_SetConfig+0xac>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d007      	beq.n	80075fa <TIM_Base_SetConfig+0x66>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a15      	ldr	r2, [pc, #84]	; (8007644 <TIM_Base_SetConfig+0xb0>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d003      	beq.n	80075fa <TIM_Base_SetConfig+0x66>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a14      	ldr	r2, [pc, #80]	; (8007648 <TIM_Base_SetConfig+0xb4>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d108      	bne.n	800760c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4a13      	ldr	r2, [pc, #76]	; (800764c <TIM_Base_SetConfig+0xb8>)
 80075fe:	4013      	ands	r3, r2
 8007600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4313      	orrs	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2280      	movs	r2, #128	; 0x80
 8007610:	4393      	bics	r3, r2
 8007612:	001a      	movs	r2, r3
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	615a      	str	r2, [r3, #20]
}
 8007638:	46c0      	nop			; (mov r8, r8)
 800763a:	46bd      	mov	sp, r7
 800763c:	b004      	add	sp, #16
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40000400 	.word	0x40000400
 8007644:	40010800 	.word	0x40010800
 8007648:	40011400 	.word	0x40011400
 800764c:	fffffcff 	.word	0xfffffcff

08007650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	2201      	movs	r2, #1
 8007668:	4393      	bics	r3, r2
 800766a:	001a      	movs	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	22f0      	movs	r2, #240	; 0xf0
 800767a:	4393      	bics	r3, r2
 800767c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	011b      	lsls	r3, r3, #4
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	4313      	orrs	r3, r2
 8007686:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	220a      	movs	r2, #10
 800768c:	4393      	bics	r3, r2
 800768e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	4313      	orrs	r3, r2
 8007696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	621a      	str	r2, [r3, #32]
}
 80076a4:	46c0      	nop			; (mov r8, r8)
 80076a6:	46bd      	mov	sp, r7
 80076a8:	b006      	add	sp, #24
 80076aa:	bd80      	pop	{r7, pc}

080076ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	2210      	movs	r2, #16
 80076be:	4393      	bics	r3, r2
 80076c0:	001a      	movs	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	4a0d      	ldr	r2, [pc, #52]	; (800770c <TIM_TI2_ConfigInputStage+0x60>)
 80076d6:	4013      	ands	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	031b      	lsls	r3, r3, #12
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	22a0      	movs	r2, #160	; 0xa0
 80076e8:	4393      	bics	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	011b      	lsls	r3, r3, #4
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	621a      	str	r2, [r3, #32]
}
 8007702:	46c0      	nop			; (mov r8, r8)
 8007704:	46bd      	mov	sp, r7
 8007706:	b006      	add	sp, #24
 8007708:	bd80      	pop	{r7, pc}
 800770a:	46c0      	nop			; (mov r8, r8)
 800770c:	ffff0fff 	.word	0xffff0fff

08007710 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2270      	movs	r2, #112	; 0x70
 8007724:	4393      	bics	r3, r2
 8007726:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4313      	orrs	r3, r2
 800772e:	2207      	movs	r2, #7
 8007730:	4313      	orrs	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	609a      	str	r2, [r3, #8]
}
 800773a:	46c0      	nop			; (mov r8, r8)
 800773c:	46bd      	mov	sp, r7
 800773e:	b004      	add	sp, #16
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	4a09      	ldr	r2, [pc, #36]	; (8007780 <TIM_ETR_SetConfig+0x3c>)
 800775c:	4013      	ands	r3, r2
 800775e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	021a      	lsls	r2, r3, #8
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	431a      	orrs	r2, r3
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	4313      	orrs	r3, r2
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	609a      	str	r2, [r3, #8]
}
 8007778:	46c0      	nop			; (mov r8, r8)
 800777a:	46bd      	mov	sp, r7
 800777c:	b006      	add	sp, #24
 800777e:	bd80      	pop	{r7, pc}
 8007780:	ffff00ff 	.word	0xffff00ff

08007784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2238      	movs	r2, #56	; 0x38
 8007792:	5c9b      	ldrb	r3, [r3, r2]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d101      	bne.n	800779c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007798:	2302      	movs	r3, #2
 800779a:	e047      	b.n	800782c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2238      	movs	r2, #56	; 0x38
 80077a0:	2101      	movs	r1, #1
 80077a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2239      	movs	r2, #57	; 0x39
 80077a8:	2102      	movs	r1, #2
 80077aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2270      	movs	r2, #112	; 0x70
 80077c0:	4393      	bics	r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	2380      	movs	r3, #128	; 0x80
 80077dc:	05db      	lsls	r3, r3, #23
 80077de:	429a      	cmp	r2, r3
 80077e0:	d00e      	beq.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a13      	ldr	r2, [pc, #76]	; (8007834 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d009      	beq.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a11      	ldr	r2, [pc, #68]	; (8007838 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d004      	beq.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a10      	ldr	r2, [pc, #64]	; (800783c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d10c      	bne.n	800781a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2280      	movs	r2, #128	; 0x80
 8007804:	4393      	bics	r3, r2
 8007806:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	4313      	orrs	r3, r2
 8007810:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2239      	movs	r2, #57	; 0x39
 800781e:	2101      	movs	r1, #1
 8007820:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2238      	movs	r2, #56	; 0x38
 8007826:	2100      	movs	r1, #0
 8007828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	0018      	movs	r0, r3
 800782e:	46bd      	mov	sp, r7
 8007830:	b004      	add	sp, #16
 8007832:	bd80      	pop	{r7, pc}
 8007834:	40000400 	.word	0x40000400
 8007838:	40010800 	.word	0x40010800
 800783c:	40011400 	.word	0x40011400

08007840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e044      	b.n	80078dc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007856:	2b00      	cmp	r3, #0
 8007858:	d107      	bne.n	800786a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2274      	movs	r2, #116	; 0x74
 800785e:	2100      	movs	r1, #0
 8007860:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	0018      	movs	r0, r3
 8007866:	f7fd f80d 	bl	8004884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2224      	movs	r2, #36	; 0x24
 800786e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2101      	movs	r1, #1
 800787c:	438a      	bics	r2, r1
 800787e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	0018      	movs	r0, r3
 8007884:	f000 f9c6 	bl	8007c14 <UART_SetConfig>
 8007888:	0003      	movs	r3, r0
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e024      	b.n	80078dc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	0018      	movs	r0, r3
 800789e:	f000 fc59 	bl	8008154 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	490d      	ldr	r1, [pc, #52]	; (80078e4 <HAL_UART_Init+0xa4>)
 80078ae:	400a      	ands	r2, r1
 80078b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	212a      	movs	r1, #42	; 0x2a
 80078be:	438a      	bics	r2, r1
 80078c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2101      	movs	r1, #1
 80078ce:	430a      	orrs	r2, r1
 80078d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	0018      	movs	r0, r3
 80078d6:	f000 fcf1 	bl	80082bc <UART_CheckIdleState>
 80078da:	0003      	movs	r3, r0
}
 80078dc:	0018      	movs	r0, r3
 80078de:	46bd      	mov	sp, r7
 80078e0:	b002      	add	sp, #8
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	ffffb7ff 	.word	0xffffb7ff

080078e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08a      	sub	sp, #40	; 0x28
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	1dbb      	adds	r3, r7, #6
 80078f6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078fc:	2b20      	cmp	r3, #32
 80078fe:	d000      	beq.n	8007902 <HAL_UART_Transmit+0x1a>
 8007900:	e095      	b.n	8007a2e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d003      	beq.n	8007910 <HAL_UART_Transmit+0x28>
 8007908:	1dbb      	adds	r3, r7, #6
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e08d      	b.n	8007a30 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	2380      	movs	r3, #128	; 0x80
 800791a:	015b      	lsls	r3, r3, #5
 800791c:	429a      	cmp	r2, r3
 800791e:	d109      	bne.n	8007934 <HAL_UART_Transmit+0x4c>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d105      	bne.n	8007934 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2201      	movs	r2, #1
 800792c:	4013      	ands	r3, r2
 800792e:	d001      	beq.n	8007934 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e07d      	b.n	8007a30 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2274      	movs	r2, #116	; 0x74
 8007938:	5c9b      	ldrb	r3, [r3, r2]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d101      	bne.n	8007942 <HAL_UART_Transmit+0x5a>
 800793e:	2302      	movs	r3, #2
 8007940:	e076      	b.n	8007a30 <HAL_UART_Transmit+0x148>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2274      	movs	r2, #116	; 0x74
 8007946:	2101      	movs	r1, #1
 8007948:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2280      	movs	r2, #128	; 0x80
 800794e:	2100      	movs	r1, #0
 8007950:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2221      	movs	r2, #33	; 0x21
 8007956:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007958:	f7fd f976 	bl	8004c48 <HAL_GetTick>
 800795c:	0003      	movs	r3, r0
 800795e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	1dba      	adds	r2, r7, #6
 8007964:	2150      	movs	r1, #80	; 0x50
 8007966:	8812      	ldrh	r2, [r2, #0]
 8007968:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	1dba      	adds	r2, r7, #6
 800796e:	2152      	movs	r1, #82	; 0x52
 8007970:	8812      	ldrh	r2, [r2, #0]
 8007972:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	2380      	movs	r3, #128	; 0x80
 800797a:	015b      	lsls	r3, r3, #5
 800797c:	429a      	cmp	r2, r3
 800797e:	d108      	bne.n	8007992 <HAL_UART_Transmit+0xaa>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d104      	bne.n	8007992 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8007988:	2300      	movs	r3, #0
 800798a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	61bb      	str	r3, [r7, #24]
 8007990:	e003      	b.n	800799a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007996:	2300      	movs	r3, #0
 8007998:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2274      	movs	r2, #116	; 0x74
 800799e:	2100      	movs	r1, #0
 80079a0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80079a2:	e02c      	b.n	80079fe <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	0013      	movs	r3, r2
 80079ae:	2200      	movs	r2, #0
 80079b0:	2180      	movs	r1, #128	; 0x80
 80079b2:	f000 fccb 	bl	800834c <UART_WaitOnFlagUntilTimeout>
 80079b6:	1e03      	subs	r3, r0, #0
 80079b8:	d001      	beq.n	80079be <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e038      	b.n	8007a30 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10b      	bne.n	80079dc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	001a      	movs	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	05d2      	lsls	r2, r2, #23
 80079d0:	0dd2      	lsrs	r2, r2, #23
 80079d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	3302      	adds	r3, #2
 80079d8:	61bb      	str	r3, [r7, #24]
 80079da:	e007      	b.n	80079ec <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	781a      	ldrb	r2, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	3301      	adds	r3, #1
 80079ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2252      	movs	r2, #82	; 0x52
 80079f0:	5a9b      	ldrh	r3, [r3, r2]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	3b01      	subs	r3, #1
 80079f6:	b299      	uxth	r1, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2252      	movs	r2, #82	; 0x52
 80079fc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2252      	movs	r2, #82	; 0x52
 8007a02:	5a9b      	ldrh	r3, [r3, r2]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1cc      	bne.n	80079a4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	0013      	movs	r3, r2
 8007a14:	2200      	movs	r2, #0
 8007a16:	2140      	movs	r1, #64	; 0x40
 8007a18:	f000 fc98 	bl	800834c <UART_WaitOnFlagUntilTimeout>
 8007a1c:	1e03      	subs	r3, r0, #0
 8007a1e:	d001      	beq.n	8007a24 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e005      	b.n	8007a30 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2220      	movs	r2, #32
 8007a28:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e000      	b.n	8007a30 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8007a2e:	2302      	movs	r3, #2
  }
}
 8007a30:	0018      	movs	r0, r3
 8007a32:	46bd      	mov	sp, r7
 8007a34:	b008      	add	sp, #32
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	; 0x28
 8007a3c:	af02      	add	r7, sp, #8
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	603b      	str	r3, [r7, #0]
 8007a44:	1dbb      	adds	r3, r7, #6
 8007a46:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	d000      	beq.n	8007a52 <HAL_UART_Receive+0x1a>
 8007a50:	e0d9      	b.n	8007c06 <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <HAL_UART_Receive+0x28>
 8007a58:	1dbb      	adds	r3, r7, #6
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e0d1      	b.n	8007c08 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	2380      	movs	r3, #128	; 0x80
 8007a6a:	015b      	lsls	r3, r3, #5
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d109      	bne.n	8007a84 <HAL_UART_Receive+0x4c>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d105      	bne.n	8007a84 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	d001      	beq.n	8007a84 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e0c1      	b.n	8007c08 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2274      	movs	r2, #116	; 0x74
 8007a88:	5c9b      	ldrb	r3, [r3, r2]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_UART_Receive+0x5a>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e0ba      	b.n	8007c08 <HAL_UART_Receive+0x1d0>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2274      	movs	r2, #116	; 0x74
 8007a96:	2101      	movs	r1, #1
 8007a98:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2280      	movs	r2, #128	; 0x80
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2222      	movs	r2, #34	; 0x22
 8007aa6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007aae:	f7fd f8cb 	bl	8004c48 <HAL_GetTick>
 8007ab2:	0003      	movs	r3, r0
 8007ab4:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	1dba      	adds	r2, r7, #6
 8007aba:	2158      	movs	r1, #88	; 0x58
 8007abc:	8812      	ldrh	r2, [r2, #0]
 8007abe:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	1dba      	adds	r2, r7, #6
 8007ac4:	215a      	movs	r1, #90	; 0x5a
 8007ac6:	8812      	ldrh	r2, [r2, #0]
 8007ac8:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	689a      	ldr	r2, [r3, #8]
 8007ace:	2380      	movs	r3, #128	; 0x80
 8007ad0:	015b      	lsls	r3, r3, #5
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d10d      	bne.n	8007af2 <HAL_UART_Receive+0xba>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d104      	bne.n	8007ae8 <HAL_UART_Receive+0xb0>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	225c      	movs	r2, #92	; 0x5c
 8007ae2:	494b      	ldr	r1, [pc, #300]	; (8007c10 <HAL_UART_Receive+0x1d8>)
 8007ae4:	5299      	strh	r1, [r3, r2]
 8007ae6:	e02e      	b.n	8007b46 <HAL_UART_Receive+0x10e>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	225c      	movs	r2, #92	; 0x5c
 8007aec:	21ff      	movs	r1, #255	; 0xff
 8007aee:	5299      	strh	r1, [r3, r2]
 8007af0:	e029      	b.n	8007b46 <HAL_UART_Receive+0x10e>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10d      	bne.n	8007b16 <HAL_UART_Receive+0xde>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d104      	bne.n	8007b0c <HAL_UART_Receive+0xd4>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	225c      	movs	r2, #92	; 0x5c
 8007b06:	21ff      	movs	r1, #255	; 0xff
 8007b08:	5299      	strh	r1, [r3, r2]
 8007b0a:	e01c      	b.n	8007b46 <HAL_UART_Receive+0x10e>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	225c      	movs	r2, #92	; 0x5c
 8007b10:	217f      	movs	r1, #127	; 0x7f
 8007b12:	5299      	strh	r1, [r3, r2]
 8007b14:	e017      	b.n	8007b46 <HAL_UART_Receive+0x10e>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	689a      	ldr	r2, [r3, #8]
 8007b1a:	2380      	movs	r3, #128	; 0x80
 8007b1c:	055b      	lsls	r3, r3, #21
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d10d      	bne.n	8007b3e <HAL_UART_Receive+0x106>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d104      	bne.n	8007b34 <HAL_UART_Receive+0xfc>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	225c      	movs	r2, #92	; 0x5c
 8007b2e:	217f      	movs	r1, #127	; 0x7f
 8007b30:	5299      	strh	r1, [r3, r2]
 8007b32:	e008      	b.n	8007b46 <HAL_UART_Receive+0x10e>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	225c      	movs	r2, #92	; 0x5c
 8007b38:	213f      	movs	r1, #63	; 0x3f
 8007b3a:	5299      	strh	r1, [r3, r2]
 8007b3c:	e003      	b.n	8007b46 <HAL_UART_Receive+0x10e>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	225c      	movs	r2, #92	; 0x5c
 8007b42:	2100      	movs	r1, #0
 8007b44:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8007b46:	2312      	movs	r3, #18
 8007b48:	18fb      	adds	r3, r7, r3
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	215c      	movs	r1, #92	; 0x5c
 8007b4e:	5a52      	ldrh	r2, [r2, r1]
 8007b50:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	689a      	ldr	r2, [r3, #8]
 8007b56:	2380      	movs	r3, #128	; 0x80
 8007b58:	015b      	lsls	r3, r3, #5
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d108      	bne.n	8007b70 <HAL_UART_Receive+0x138>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d104      	bne.n	8007b70 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8007b66:	2300      	movs	r3, #0
 8007b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	61bb      	str	r3, [r7, #24]
 8007b6e:	e003      	b.n	8007b78 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2274      	movs	r2, #116	; 0x74
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007b80:	e036      	b.n	8007bf0 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	0013      	movs	r3, r2
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	2120      	movs	r1, #32
 8007b90:	f000 fbdc 	bl	800834c <UART_WaitOnFlagUntilTimeout>
 8007b94:	1e03      	subs	r3, r0, #0
 8007b96:	d001      	beq.n	8007b9c <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e035      	b.n	8007c08 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10e      	bne.n	8007bc0 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	2212      	movs	r2, #18
 8007bac:	18ba      	adds	r2, r7, r2
 8007bae:	8812      	ldrh	r2, [r2, #0]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	3302      	adds	r3, #2
 8007bbc:	61bb      	str	r3, [r7, #24]
 8007bbe:	e00e      	b.n	8007bde <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2212      	movs	r2, #18
 8007bca:	18ba      	adds	r2, r7, r2
 8007bcc:	8812      	ldrh	r2, [r2, #0]
 8007bce:	b2d2      	uxtb	r2, r2
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	225a      	movs	r2, #90	; 0x5a
 8007be2:	5a9b      	ldrh	r3, [r3, r2]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b299      	uxth	r1, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	225a      	movs	r2, #90	; 0x5a
 8007bee:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	225a      	movs	r2, #90	; 0x5a
 8007bf4:	5a9b      	ldrh	r3, [r3, r2]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1c2      	bne.n	8007b82 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	e000      	b.n	8007c08 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8007c06:	2302      	movs	r3, #2
  }
}
 8007c08:	0018      	movs	r0, r3
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	b008      	add	sp, #32
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	000001ff 	.word	0x000001ff

08007c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c14:	b5b0      	push	{r4, r5, r7, lr}
 8007c16:	b08e      	sub	sp, #56	; 0x38
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c1c:	231a      	movs	r3, #26
 8007c1e:	2218      	movs	r2, #24
 8007c20:	189b      	adds	r3, r3, r2
 8007c22:	19db      	adds	r3, r3, r7
 8007c24:	2200      	movs	r2, #0
 8007c26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	431a      	orrs	r2, r3
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	431a      	orrs	r2, r3
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4ac3      	ldr	r2, [pc, #780]	; (8007f54 <UART_SetConfig+0x340>)
 8007c48:	4013      	ands	r3, r2
 8007c4a:	0019      	movs	r1, r3
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c52:	430a      	orrs	r2, r1
 8007c54:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	4abe      	ldr	r2, [pc, #760]	; (8007f58 <UART_SetConfig+0x344>)
 8007c5e:	4013      	ands	r3, r2
 8007c60:	0019      	movs	r1, r3
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	68da      	ldr	r2, [r3, #12]
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4ab8      	ldr	r2, [pc, #736]	; (8007f5c <UART_SetConfig+0x348>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d004      	beq.n	8007c88 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c84:	4313      	orrs	r3, r2
 8007c86:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	4ab4      	ldr	r2, [pc, #720]	; (8007f60 <UART_SetConfig+0x34c>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	0019      	movs	r1, r3
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4ab0      	ldr	r2, [pc, #704]	; (8007f64 <UART_SetConfig+0x350>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d131      	bne.n	8007d0c <UART_SetConfig+0xf8>
 8007ca8:	4baf      	ldr	r3, [pc, #700]	; (8007f68 <UART_SetConfig+0x354>)
 8007caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cac:	2203      	movs	r2, #3
 8007cae:	4013      	ands	r3, r2
 8007cb0:	2b03      	cmp	r3, #3
 8007cb2:	d01d      	beq.n	8007cf0 <UART_SetConfig+0xdc>
 8007cb4:	d823      	bhi.n	8007cfe <UART_SetConfig+0xea>
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d00c      	beq.n	8007cd4 <UART_SetConfig+0xc0>
 8007cba:	d820      	bhi.n	8007cfe <UART_SetConfig+0xea>
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <UART_SetConfig+0xb2>
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d00e      	beq.n	8007ce2 <UART_SetConfig+0xce>
 8007cc4:	e01b      	b.n	8007cfe <UART_SetConfig+0xea>
 8007cc6:	231b      	movs	r3, #27
 8007cc8:	2218      	movs	r2, #24
 8007cca:	189b      	adds	r3, r3, r2
 8007ccc:	19db      	adds	r3, r3, r7
 8007cce:	2201      	movs	r2, #1
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	e0b4      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007cd4:	231b      	movs	r3, #27
 8007cd6:	2218      	movs	r2, #24
 8007cd8:	189b      	adds	r3, r3, r2
 8007cda:	19db      	adds	r3, r3, r7
 8007cdc:	2202      	movs	r2, #2
 8007cde:	701a      	strb	r2, [r3, #0]
 8007ce0:	e0ad      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007ce2:	231b      	movs	r3, #27
 8007ce4:	2218      	movs	r2, #24
 8007ce6:	189b      	adds	r3, r3, r2
 8007ce8:	19db      	adds	r3, r3, r7
 8007cea:	2204      	movs	r2, #4
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	e0a6      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007cf0:	231b      	movs	r3, #27
 8007cf2:	2218      	movs	r2, #24
 8007cf4:	189b      	adds	r3, r3, r2
 8007cf6:	19db      	adds	r3, r3, r7
 8007cf8:	2208      	movs	r2, #8
 8007cfa:	701a      	strb	r2, [r3, #0]
 8007cfc:	e09f      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007cfe:	231b      	movs	r3, #27
 8007d00:	2218      	movs	r2, #24
 8007d02:	189b      	adds	r3, r3, r2
 8007d04:	19db      	adds	r3, r3, r7
 8007d06:	2210      	movs	r2, #16
 8007d08:	701a      	strb	r2, [r3, #0]
 8007d0a:	e098      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a96      	ldr	r2, [pc, #600]	; (8007f6c <UART_SetConfig+0x358>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d131      	bne.n	8007d7a <UART_SetConfig+0x166>
 8007d16:	4b94      	ldr	r3, [pc, #592]	; (8007f68 <UART_SetConfig+0x354>)
 8007d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d1a:	220c      	movs	r2, #12
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	2b0c      	cmp	r3, #12
 8007d20:	d01d      	beq.n	8007d5e <UART_SetConfig+0x14a>
 8007d22:	d823      	bhi.n	8007d6c <UART_SetConfig+0x158>
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d00c      	beq.n	8007d42 <UART_SetConfig+0x12e>
 8007d28:	d820      	bhi.n	8007d6c <UART_SetConfig+0x158>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <UART_SetConfig+0x120>
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	d00e      	beq.n	8007d50 <UART_SetConfig+0x13c>
 8007d32:	e01b      	b.n	8007d6c <UART_SetConfig+0x158>
 8007d34:	231b      	movs	r3, #27
 8007d36:	2218      	movs	r2, #24
 8007d38:	189b      	adds	r3, r3, r2
 8007d3a:	19db      	adds	r3, r3, r7
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	701a      	strb	r2, [r3, #0]
 8007d40:	e07d      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007d42:	231b      	movs	r3, #27
 8007d44:	2218      	movs	r2, #24
 8007d46:	189b      	adds	r3, r3, r2
 8007d48:	19db      	adds	r3, r3, r7
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	e076      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007d50:	231b      	movs	r3, #27
 8007d52:	2218      	movs	r2, #24
 8007d54:	189b      	adds	r3, r3, r2
 8007d56:	19db      	adds	r3, r3, r7
 8007d58:	2204      	movs	r2, #4
 8007d5a:	701a      	strb	r2, [r3, #0]
 8007d5c:	e06f      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007d5e:	231b      	movs	r3, #27
 8007d60:	2218      	movs	r2, #24
 8007d62:	189b      	adds	r3, r3, r2
 8007d64:	19db      	adds	r3, r3, r7
 8007d66:	2208      	movs	r2, #8
 8007d68:	701a      	strb	r2, [r3, #0]
 8007d6a:	e068      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007d6c:	231b      	movs	r3, #27
 8007d6e:	2218      	movs	r2, #24
 8007d70:	189b      	adds	r3, r3, r2
 8007d72:	19db      	adds	r3, r3, r7
 8007d74:	2210      	movs	r2, #16
 8007d76:	701a      	strb	r2, [r3, #0]
 8007d78:	e061      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a7c      	ldr	r2, [pc, #496]	; (8007f70 <UART_SetConfig+0x35c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d106      	bne.n	8007d92 <UART_SetConfig+0x17e>
 8007d84:	231b      	movs	r3, #27
 8007d86:	2218      	movs	r2, #24
 8007d88:	189b      	adds	r3, r3, r2
 8007d8a:	19db      	adds	r3, r3, r7
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
 8007d90:	e055      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a77      	ldr	r2, [pc, #476]	; (8007f74 <UART_SetConfig+0x360>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d106      	bne.n	8007daa <UART_SetConfig+0x196>
 8007d9c:	231b      	movs	r3, #27
 8007d9e:	2218      	movs	r2, #24
 8007da0:	189b      	adds	r3, r3, r2
 8007da2:	19db      	adds	r3, r3, r7
 8007da4:	2200      	movs	r2, #0
 8007da6:	701a      	strb	r2, [r3, #0]
 8007da8:	e049      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a6b      	ldr	r2, [pc, #428]	; (8007f5c <UART_SetConfig+0x348>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d13e      	bne.n	8007e32 <UART_SetConfig+0x21e>
 8007db4:	4b6c      	ldr	r3, [pc, #432]	; (8007f68 <UART_SetConfig+0x354>)
 8007db6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007db8:	23c0      	movs	r3, #192	; 0xc0
 8007dba:	011b      	lsls	r3, r3, #4
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	22c0      	movs	r2, #192	; 0xc0
 8007dc0:	0112      	lsls	r2, r2, #4
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d027      	beq.n	8007e16 <UART_SetConfig+0x202>
 8007dc6:	22c0      	movs	r2, #192	; 0xc0
 8007dc8:	0112      	lsls	r2, r2, #4
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d82a      	bhi.n	8007e24 <UART_SetConfig+0x210>
 8007dce:	2280      	movs	r2, #128	; 0x80
 8007dd0:	0112      	lsls	r2, r2, #4
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d011      	beq.n	8007dfa <UART_SetConfig+0x1e6>
 8007dd6:	2280      	movs	r2, #128	; 0x80
 8007dd8:	0112      	lsls	r2, r2, #4
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d822      	bhi.n	8007e24 <UART_SetConfig+0x210>
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d004      	beq.n	8007dec <UART_SetConfig+0x1d8>
 8007de2:	2280      	movs	r2, #128	; 0x80
 8007de4:	00d2      	lsls	r2, r2, #3
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d00e      	beq.n	8007e08 <UART_SetConfig+0x1f4>
 8007dea:	e01b      	b.n	8007e24 <UART_SetConfig+0x210>
 8007dec:	231b      	movs	r3, #27
 8007dee:	2218      	movs	r2, #24
 8007df0:	189b      	adds	r3, r3, r2
 8007df2:	19db      	adds	r3, r3, r7
 8007df4:	2200      	movs	r2, #0
 8007df6:	701a      	strb	r2, [r3, #0]
 8007df8:	e021      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007dfa:	231b      	movs	r3, #27
 8007dfc:	2218      	movs	r2, #24
 8007dfe:	189b      	adds	r3, r3, r2
 8007e00:	19db      	adds	r3, r3, r7
 8007e02:	2202      	movs	r2, #2
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	e01a      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007e08:	231b      	movs	r3, #27
 8007e0a:	2218      	movs	r2, #24
 8007e0c:	189b      	adds	r3, r3, r2
 8007e0e:	19db      	adds	r3, r3, r7
 8007e10:	2204      	movs	r2, #4
 8007e12:	701a      	strb	r2, [r3, #0]
 8007e14:	e013      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007e16:	231b      	movs	r3, #27
 8007e18:	2218      	movs	r2, #24
 8007e1a:	189b      	adds	r3, r3, r2
 8007e1c:	19db      	adds	r3, r3, r7
 8007e1e:	2208      	movs	r2, #8
 8007e20:	701a      	strb	r2, [r3, #0]
 8007e22:	e00c      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007e24:	231b      	movs	r3, #27
 8007e26:	2218      	movs	r2, #24
 8007e28:	189b      	adds	r3, r3, r2
 8007e2a:	19db      	adds	r3, r3, r7
 8007e2c:	2210      	movs	r2, #16
 8007e2e:	701a      	strb	r2, [r3, #0]
 8007e30:	e005      	b.n	8007e3e <UART_SetConfig+0x22a>
 8007e32:	231b      	movs	r3, #27
 8007e34:	2218      	movs	r2, #24
 8007e36:	189b      	adds	r3, r3, r2
 8007e38:	19db      	adds	r3, r3, r7
 8007e3a:	2210      	movs	r2, #16
 8007e3c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a46      	ldr	r2, [pc, #280]	; (8007f5c <UART_SetConfig+0x348>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d000      	beq.n	8007e4a <UART_SetConfig+0x236>
 8007e48:	e09a      	b.n	8007f80 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e4a:	231b      	movs	r3, #27
 8007e4c:	2218      	movs	r2, #24
 8007e4e:	189b      	adds	r3, r3, r2
 8007e50:	19db      	adds	r3, r3, r7
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	d01d      	beq.n	8007e94 <UART_SetConfig+0x280>
 8007e58:	dc20      	bgt.n	8007e9c <UART_SetConfig+0x288>
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d015      	beq.n	8007e8a <UART_SetConfig+0x276>
 8007e5e:	dc1d      	bgt.n	8007e9c <UART_SetConfig+0x288>
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <UART_SetConfig+0x256>
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d005      	beq.n	8007e74 <UART_SetConfig+0x260>
 8007e68:	e018      	b.n	8007e9c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e6a:	f7ff f8b3 	bl	8006fd4 <HAL_RCC_GetPCLK1Freq>
 8007e6e:	0003      	movs	r3, r0
 8007e70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e72:	e01c      	b.n	8007eae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e74:	4b3c      	ldr	r3, [pc, #240]	; (8007f68 <UART_SetConfig+0x354>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2210      	movs	r2, #16
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	d002      	beq.n	8007e84 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007e7e:	4b3e      	ldr	r3, [pc, #248]	; (8007f78 <UART_SetConfig+0x364>)
 8007e80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e82:	e014      	b.n	8007eae <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8007e84:	4b3d      	ldr	r3, [pc, #244]	; (8007f7c <UART_SetConfig+0x368>)
 8007e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e88:	e011      	b.n	8007eae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e8a:	f7fe fff3 	bl	8006e74 <HAL_RCC_GetSysClockFreq>
 8007e8e:	0003      	movs	r3, r0
 8007e90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e92:	e00c      	b.n	8007eae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e94:	2380      	movs	r3, #128	; 0x80
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e9a:	e008      	b.n	8007eae <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007ea0:	231a      	movs	r3, #26
 8007ea2:	2218      	movs	r2, #24
 8007ea4:	189b      	adds	r3, r3, r2
 8007ea6:	19db      	adds	r3, r3, r7
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	701a      	strb	r2, [r3, #0]
        break;
 8007eac:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d100      	bne.n	8007eb6 <UART_SetConfig+0x2a2>
 8007eb4:	e134      	b.n	8008120 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	685a      	ldr	r2, [r3, #4]
 8007eba:	0013      	movs	r3, r2
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	189b      	adds	r3, r3, r2
 8007ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d305      	bcc.n	8007ed2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d906      	bls.n	8007ee0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8007ed2:	231a      	movs	r3, #26
 8007ed4:	2218      	movs	r2, #24
 8007ed6:	189b      	adds	r3, r3, r2
 8007ed8:	19db      	adds	r3, r3, r7
 8007eda:	2201      	movs	r2, #1
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	e11f      	b.n	8008120 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee2:	613b      	str	r3, [r7, #16]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	617b      	str	r3, [r7, #20]
 8007ee8:	6939      	ldr	r1, [r7, #16]
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	000b      	movs	r3, r1
 8007eee:	0e1b      	lsrs	r3, r3, #24
 8007ef0:	0010      	movs	r0, r2
 8007ef2:	0205      	lsls	r5, r0, #8
 8007ef4:	431d      	orrs	r5, r3
 8007ef6:	000b      	movs	r3, r1
 8007ef8:	021c      	lsls	r4, r3, #8
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	085b      	lsrs	r3, r3, #1
 8007f00:	60bb      	str	r3, [r7, #8]
 8007f02:	2300      	movs	r3, #0
 8007f04:	60fb      	str	r3, [r7, #12]
 8007f06:	68b8      	ldr	r0, [r7, #8]
 8007f08:	68f9      	ldr	r1, [r7, #12]
 8007f0a:	1900      	adds	r0, r0, r4
 8007f0c:	4169      	adcs	r1, r5
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	603b      	str	r3, [r7, #0]
 8007f14:	2300      	movs	r3, #0
 8007f16:	607b      	str	r3, [r7, #4]
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f7f8 fac4 	bl	80004a8 <__aeabi_uldivmod>
 8007f20:	0002      	movs	r2, r0
 8007f22:	000b      	movs	r3, r1
 8007f24:	0013      	movs	r3, r2
 8007f26:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f2a:	23c0      	movs	r3, #192	; 0xc0
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d309      	bcc.n	8007f46 <UART_SetConfig+0x332>
 8007f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f34:	2380      	movs	r3, #128	; 0x80
 8007f36:	035b      	lsls	r3, r3, #13
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d204      	bcs.n	8007f46 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f42:	60da      	str	r2, [r3, #12]
 8007f44:	e0ec      	b.n	8008120 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8007f46:	231a      	movs	r3, #26
 8007f48:	2218      	movs	r2, #24
 8007f4a:	189b      	adds	r3, r3, r2
 8007f4c:	19db      	adds	r3, r3, r7
 8007f4e:	2201      	movs	r2, #1
 8007f50:	701a      	strb	r2, [r3, #0]
 8007f52:	e0e5      	b.n	8008120 <UART_SetConfig+0x50c>
 8007f54:	efff69f3 	.word	0xefff69f3
 8007f58:	ffffcfff 	.word	0xffffcfff
 8007f5c:	40004800 	.word	0x40004800
 8007f60:	fffff4ff 	.word	0xfffff4ff
 8007f64:	40013800 	.word	0x40013800
 8007f68:	40021000 	.word	0x40021000
 8007f6c:	40004400 	.word	0x40004400
 8007f70:	40004c00 	.word	0x40004c00
 8007f74:	40005000 	.word	0x40005000
 8007f78:	003d0900 	.word	0x003d0900
 8007f7c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	69da      	ldr	r2, [r3, #28]
 8007f84:	2380      	movs	r3, #128	; 0x80
 8007f86:	021b      	lsls	r3, r3, #8
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d000      	beq.n	8007f8e <UART_SetConfig+0x37a>
 8007f8c:	e071      	b.n	8008072 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8007f8e:	231b      	movs	r3, #27
 8007f90:	2218      	movs	r2, #24
 8007f92:	189b      	adds	r3, r3, r2
 8007f94:	19db      	adds	r3, r3, r7
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b08      	cmp	r3, #8
 8007f9a:	d822      	bhi.n	8007fe2 <UART_SetConfig+0x3ce>
 8007f9c:	009a      	lsls	r2, r3, #2
 8007f9e:	4b68      	ldr	r3, [pc, #416]	; (8008140 <UART_SetConfig+0x52c>)
 8007fa0:	18d3      	adds	r3, r2, r3
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fa6:	f7ff f815 	bl	8006fd4 <HAL_RCC_GetPCLK1Freq>
 8007faa:	0003      	movs	r3, r0
 8007fac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fae:	e021      	b.n	8007ff4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fb0:	f7ff f826 	bl	8007000 <HAL_RCC_GetPCLK2Freq>
 8007fb4:	0003      	movs	r3, r0
 8007fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fb8:	e01c      	b.n	8007ff4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fba:	4b62      	ldr	r3, [pc, #392]	; (8008144 <UART_SetConfig+0x530>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2210      	movs	r2, #16
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	d002      	beq.n	8007fca <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007fc4:	4b60      	ldr	r3, [pc, #384]	; (8008148 <UART_SetConfig+0x534>)
 8007fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007fc8:	e014      	b.n	8007ff4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8007fca:	4b60      	ldr	r3, [pc, #384]	; (800814c <UART_SetConfig+0x538>)
 8007fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fce:	e011      	b.n	8007ff4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fd0:	f7fe ff50 	bl	8006e74 <HAL_RCC_GetSysClockFreq>
 8007fd4:	0003      	movs	r3, r0
 8007fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fd8:	e00c      	b.n	8007ff4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fda:	2380      	movs	r3, #128	; 0x80
 8007fdc:	021b      	lsls	r3, r3, #8
 8007fde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fe0:	e008      	b.n	8007ff4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007fe6:	231a      	movs	r3, #26
 8007fe8:	2218      	movs	r2, #24
 8007fea:	189b      	adds	r3, r3, r2
 8007fec:	19db      	adds	r3, r3, r7
 8007fee:	2201      	movs	r2, #1
 8007ff0:	701a      	strb	r2, [r3, #0]
        break;
 8007ff2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d100      	bne.n	8007ffc <UART_SetConfig+0x3e8>
 8007ffa:	e091      	b.n	8008120 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffe:	005a      	lsls	r2, r3, #1
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	085b      	lsrs	r3, r3, #1
 8008006:	18d2      	adds	r2, r2, r3
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	0019      	movs	r1, r3
 800800e:	0010      	movs	r0, r2
 8008010:	f7f8 f896 	bl	8000140 <__udivsi3>
 8008014:	0003      	movs	r3, r0
 8008016:	b29b      	uxth	r3, r3
 8008018:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800801a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801c:	2b0f      	cmp	r3, #15
 800801e:	d921      	bls.n	8008064 <UART_SetConfig+0x450>
 8008020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008022:	2380      	movs	r3, #128	; 0x80
 8008024:	025b      	lsls	r3, r3, #9
 8008026:	429a      	cmp	r2, r3
 8008028:	d21c      	bcs.n	8008064 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	b29a      	uxth	r2, r3
 800802e:	200e      	movs	r0, #14
 8008030:	2418      	movs	r4, #24
 8008032:	1903      	adds	r3, r0, r4
 8008034:	19db      	adds	r3, r3, r7
 8008036:	210f      	movs	r1, #15
 8008038:	438a      	bics	r2, r1
 800803a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	085b      	lsrs	r3, r3, #1
 8008040:	b29b      	uxth	r3, r3
 8008042:	2207      	movs	r2, #7
 8008044:	4013      	ands	r3, r2
 8008046:	b299      	uxth	r1, r3
 8008048:	1903      	adds	r3, r0, r4
 800804a:	19db      	adds	r3, r3, r7
 800804c:	1902      	adds	r2, r0, r4
 800804e:	19d2      	adds	r2, r2, r7
 8008050:	8812      	ldrh	r2, [r2, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	1902      	adds	r2, r0, r4
 800805c:	19d2      	adds	r2, r2, r7
 800805e:	8812      	ldrh	r2, [r2, #0]
 8008060:	60da      	str	r2, [r3, #12]
 8008062:	e05d      	b.n	8008120 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8008064:	231a      	movs	r3, #26
 8008066:	2218      	movs	r2, #24
 8008068:	189b      	adds	r3, r3, r2
 800806a:	19db      	adds	r3, r3, r7
 800806c:	2201      	movs	r2, #1
 800806e:	701a      	strb	r2, [r3, #0]
 8008070:	e056      	b.n	8008120 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008072:	231b      	movs	r3, #27
 8008074:	2218      	movs	r2, #24
 8008076:	189b      	adds	r3, r3, r2
 8008078:	19db      	adds	r3, r3, r7
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	2b08      	cmp	r3, #8
 800807e:	d822      	bhi.n	80080c6 <UART_SetConfig+0x4b2>
 8008080:	009a      	lsls	r2, r3, #2
 8008082:	4b33      	ldr	r3, [pc, #204]	; (8008150 <UART_SetConfig+0x53c>)
 8008084:	18d3      	adds	r3, r2, r3
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800808a:	f7fe ffa3 	bl	8006fd4 <HAL_RCC_GetPCLK1Freq>
 800808e:	0003      	movs	r3, r0
 8008090:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008092:	e021      	b.n	80080d8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008094:	f7fe ffb4 	bl	8007000 <HAL_RCC_GetPCLK2Freq>
 8008098:	0003      	movs	r3, r0
 800809a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800809c:	e01c      	b.n	80080d8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800809e:	4b29      	ldr	r3, [pc, #164]	; (8008144 <UART_SetConfig+0x530>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2210      	movs	r2, #16
 80080a4:	4013      	ands	r3, r2
 80080a6:	d002      	beq.n	80080ae <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80080a8:	4b27      	ldr	r3, [pc, #156]	; (8008148 <UART_SetConfig+0x534>)
 80080aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080ac:	e014      	b.n	80080d8 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 80080ae:	4b27      	ldr	r3, [pc, #156]	; (800814c <UART_SetConfig+0x538>)
 80080b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080b2:	e011      	b.n	80080d8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080b4:	f7fe fede 	bl	8006e74 <HAL_RCC_GetSysClockFreq>
 80080b8:	0003      	movs	r3, r0
 80080ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080bc:	e00c      	b.n	80080d8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080be:	2380      	movs	r3, #128	; 0x80
 80080c0:	021b      	lsls	r3, r3, #8
 80080c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080c4:	e008      	b.n	80080d8 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80080ca:	231a      	movs	r3, #26
 80080cc:	2218      	movs	r2, #24
 80080ce:	189b      	adds	r3, r3, r2
 80080d0:	19db      	adds	r3, r3, r7
 80080d2:	2201      	movs	r2, #1
 80080d4:	701a      	strb	r2, [r3, #0]
        break;
 80080d6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80080d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d020      	beq.n	8008120 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	085a      	lsrs	r2, r3, #1
 80080e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e6:	18d2      	adds	r2, r2, r3
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	0019      	movs	r1, r3
 80080ee:	0010      	movs	r0, r2
 80080f0:	f7f8 f826 	bl	8000140 <__udivsi3>
 80080f4:	0003      	movs	r3, r0
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fc:	2b0f      	cmp	r3, #15
 80080fe:	d909      	bls.n	8008114 <UART_SetConfig+0x500>
 8008100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008102:	2380      	movs	r3, #128	; 0x80
 8008104:	025b      	lsls	r3, r3, #9
 8008106:	429a      	cmp	r2, r3
 8008108:	d204      	bcs.n	8008114 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008110:	60da      	str	r2, [r3, #12]
 8008112:	e005      	b.n	8008120 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8008114:	231a      	movs	r3, #26
 8008116:	2218      	movs	r2, #24
 8008118:	189b      	adds	r3, r3, r2
 800811a:	19db      	adds	r3, r3, r7
 800811c:	2201      	movs	r2, #1
 800811e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	2200      	movs	r2, #0
 8008124:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	2200      	movs	r2, #0
 800812a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800812c:	231a      	movs	r3, #26
 800812e:	2218      	movs	r2, #24
 8008130:	189b      	adds	r3, r3, r2
 8008132:	19db      	adds	r3, r3, r7
 8008134:	781b      	ldrb	r3, [r3, #0]
}
 8008136:	0018      	movs	r0, r3
 8008138:	46bd      	mov	sp, r7
 800813a:	b00e      	add	sp, #56	; 0x38
 800813c:	bdb0      	pop	{r4, r5, r7, pc}
 800813e:	46c0      	nop			; (mov r8, r8)
 8008140:	0800c474 	.word	0x0800c474
 8008144:	40021000 	.word	0x40021000
 8008148:	003d0900 	.word	0x003d0900
 800814c:	00f42400 	.word	0x00f42400
 8008150:	0800c498 	.word	0x0800c498

08008154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	2201      	movs	r2, #1
 8008162:	4013      	ands	r3, r2
 8008164:	d00b      	beq.n	800817e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	4a4a      	ldr	r2, [pc, #296]	; (8008298 <UART_AdvFeatureConfig+0x144>)
 800816e:	4013      	ands	r3, r2
 8008170:	0019      	movs	r1, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	2202      	movs	r2, #2
 8008184:	4013      	ands	r3, r2
 8008186:	d00b      	beq.n	80081a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	4a43      	ldr	r2, [pc, #268]	; (800829c <UART_AdvFeatureConfig+0x148>)
 8008190:	4013      	ands	r3, r2
 8008192:	0019      	movs	r1, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a4:	2204      	movs	r2, #4
 80081a6:	4013      	ands	r3, r2
 80081a8:	d00b      	beq.n	80081c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	4a3b      	ldr	r2, [pc, #236]	; (80082a0 <UART_AdvFeatureConfig+0x14c>)
 80081b2:	4013      	ands	r3, r2
 80081b4:	0019      	movs	r1, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c6:	2208      	movs	r2, #8
 80081c8:	4013      	ands	r3, r2
 80081ca:	d00b      	beq.n	80081e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	4a34      	ldr	r2, [pc, #208]	; (80082a4 <UART_AdvFeatureConfig+0x150>)
 80081d4:	4013      	ands	r3, r2
 80081d6:	0019      	movs	r1, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	430a      	orrs	r2, r1
 80081e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	2210      	movs	r2, #16
 80081ea:	4013      	ands	r3, r2
 80081ec:	d00b      	beq.n	8008206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	4a2c      	ldr	r2, [pc, #176]	; (80082a8 <UART_AdvFeatureConfig+0x154>)
 80081f6:	4013      	ands	r3, r2
 80081f8:	0019      	movs	r1, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	430a      	orrs	r2, r1
 8008204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	2220      	movs	r2, #32
 800820c:	4013      	ands	r3, r2
 800820e:	d00b      	beq.n	8008228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	4a25      	ldr	r2, [pc, #148]	; (80082ac <UART_AdvFeatureConfig+0x158>)
 8008218:	4013      	ands	r3, r2
 800821a:	0019      	movs	r1, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	430a      	orrs	r2, r1
 8008226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822c:	2240      	movs	r2, #64	; 0x40
 800822e:	4013      	ands	r3, r2
 8008230:	d01d      	beq.n	800826e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	4a1d      	ldr	r2, [pc, #116]	; (80082b0 <UART_AdvFeatureConfig+0x15c>)
 800823a:	4013      	ands	r3, r2
 800823c:	0019      	movs	r1, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	430a      	orrs	r2, r1
 8008248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800824e:	2380      	movs	r3, #128	; 0x80
 8008250:	035b      	lsls	r3, r3, #13
 8008252:	429a      	cmp	r2, r3
 8008254:	d10b      	bne.n	800826e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	4a15      	ldr	r2, [pc, #84]	; (80082b4 <UART_AdvFeatureConfig+0x160>)
 800825e:	4013      	ands	r3, r2
 8008260:	0019      	movs	r1, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	430a      	orrs	r2, r1
 800826c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	2280      	movs	r2, #128	; 0x80
 8008274:	4013      	ands	r3, r2
 8008276:	d00b      	beq.n	8008290 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	4a0e      	ldr	r2, [pc, #56]	; (80082b8 <UART_AdvFeatureConfig+0x164>)
 8008280:	4013      	ands	r3, r2
 8008282:	0019      	movs	r1, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	430a      	orrs	r2, r1
 800828e:	605a      	str	r2, [r3, #4]
  }
}
 8008290:	46c0      	nop			; (mov r8, r8)
 8008292:	46bd      	mov	sp, r7
 8008294:	b002      	add	sp, #8
 8008296:	bd80      	pop	{r7, pc}
 8008298:	fffdffff 	.word	0xfffdffff
 800829c:	fffeffff 	.word	0xfffeffff
 80082a0:	fffbffff 	.word	0xfffbffff
 80082a4:	ffff7fff 	.word	0xffff7fff
 80082a8:	ffffefff 	.word	0xffffefff
 80082ac:	ffffdfff 	.word	0xffffdfff
 80082b0:	ffefffff 	.word	0xffefffff
 80082b4:	ff9fffff 	.word	0xff9fffff
 80082b8:	fff7ffff 	.word	0xfff7ffff

080082bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af02      	add	r7, sp, #8
 80082c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2280      	movs	r2, #128	; 0x80
 80082c8:	2100      	movs	r1, #0
 80082ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082cc:	f7fc fcbc 	bl	8004c48 <HAL_GetTick>
 80082d0:	0003      	movs	r3, r0
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2208      	movs	r2, #8
 80082dc:	4013      	ands	r3, r2
 80082de:	2b08      	cmp	r3, #8
 80082e0:	d10c      	bne.n	80082fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2280      	movs	r2, #128	; 0x80
 80082e6:	0391      	lsls	r1, r2, #14
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	4a17      	ldr	r2, [pc, #92]	; (8008348 <UART_CheckIdleState+0x8c>)
 80082ec:	9200      	str	r2, [sp, #0]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f000 f82c 	bl	800834c <UART_WaitOnFlagUntilTimeout>
 80082f4:	1e03      	subs	r3, r0, #0
 80082f6:	d001      	beq.n	80082fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e021      	b.n	8008340 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2204      	movs	r2, #4
 8008304:	4013      	ands	r3, r2
 8008306:	2b04      	cmp	r3, #4
 8008308:	d10c      	bne.n	8008324 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2280      	movs	r2, #128	; 0x80
 800830e:	03d1      	lsls	r1, r2, #15
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	4a0d      	ldr	r2, [pc, #52]	; (8008348 <UART_CheckIdleState+0x8c>)
 8008314:	9200      	str	r2, [sp, #0]
 8008316:	2200      	movs	r2, #0
 8008318:	f000 f818 	bl	800834c <UART_WaitOnFlagUntilTimeout>
 800831c:	1e03      	subs	r3, r0, #0
 800831e:	d001      	beq.n	8008324 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e00d      	b.n	8008340 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2220      	movs	r2, #32
 8008328:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2220      	movs	r2, #32
 800832e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2274      	movs	r2, #116	; 0x74
 800833a:	2100      	movs	r1, #0
 800833c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	0018      	movs	r0, r3
 8008342:	46bd      	mov	sp, r7
 8008344:	b004      	add	sp, #16
 8008346:	bd80      	pop	{r7, pc}
 8008348:	01ffffff 	.word	0x01ffffff

0800834c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b094      	sub	sp, #80	; 0x50
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	603b      	str	r3, [r7, #0]
 8008358:	1dfb      	adds	r3, r7, #7
 800835a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800835c:	e0a3      	b.n	80084a6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800835e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008360:	3301      	adds	r3, #1
 8008362:	d100      	bne.n	8008366 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008364:	e09f      	b.n	80084a6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008366:	f7fc fc6f 	bl	8004c48 <HAL_GetTick>
 800836a:	0002      	movs	r2, r0
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008372:	429a      	cmp	r2, r3
 8008374:	d302      	bcc.n	800837c <UART_WaitOnFlagUntilTimeout+0x30>
 8008376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008378:	2b00      	cmp	r3, #0
 800837a:	d13d      	bne.n	80083f8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800837c:	f3ef 8310 	mrs	r3, PRIMASK
 8008380:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008382:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008384:	647b      	str	r3, [r7, #68]	; 0x44
 8008386:	2301      	movs	r3, #1
 8008388:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800838a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838c:	f383 8810 	msr	PRIMASK, r3
}
 8008390:	46c0      	nop			; (mov r8, r8)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	494c      	ldr	r1, [pc, #304]	; (80084d0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800839e:	400a      	ands	r2, r1
 80083a0:	601a      	str	r2, [r3, #0]
 80083a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a8:	f383 8810 	msr	PRIMASK, r3
}
 80083ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083ae:	f3ef 8310 	mrs	r3, PRIMASK
 80083b2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80083b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b6:	643b      	str	r3, [r7, #64]	; 0x40
 80083b8:	2301      	movs	r3, #1
 80083ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	f383 8810 	msr	PRIMASK, r3
}
 80083c2:	46c0      	nop			; (mov r8, r8)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	689a      	ldr	r2, [r3, #8]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2101      	movs	r1, #1
 80083d0:	438a      	bics	r2, r1
 80083d2:	609a      	str	r2, [r3, #8]
 80083d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083da:	f383 8810 	msr	PRIMASK, r3
}
 80083de:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2220      	movs	r2, #32
 80083e4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2220      	movs	r2, #32
 80083ea:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2274      	movs	r2, #116	; 0x74
 80083f0:	2100      	movs	r1, #0
 80083f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e067      	b.n	80084c8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2204      	movs	r2, #4
 8008400:	4013      	ands	r3, r2
 8008402:	d050      	beq.n	80084a6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	69da      	ldr	r2, [r3, #28]
 800840a:	2380      	movs	r3, #128	; 0x80
 800840c:	011b      	lsls	r3, r3, #4
 800840e:	401a      	ands	r2, r3
 8008410:	2380      	movs	r3, #128	; 0x80
 8008412:	011b      	lsls	r3, r3, #4
 8008414:	429a      	cmp	r2, r3
 8008416:	d146      	bne.n	80084a6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2280      	movs	r2, #128	; 0x80
 800841e:	0112      	lsls	r2, r2, #4
 8008420:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008422:	f3ef 8310 	mrs	r3, PRIMASK
 8008426:	613b      	str	r3, [r7, #16]
  return(result);
 8008428:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800842a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800842c:	2301      	movs	r3, #1
 800842e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	f383 8810 	msr	PRIMASK, r3
}
 8008436:	46c0      	nop			; (mov r8, r8)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4923      	ldr	r1, [pc, #140]	; (80084d0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008444:	400a      	ands	r2, r1
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800844a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	f383 8810 	msr	PRIMASK, r3
}
 8008452:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008454:	f3ef 8310 	mrs	r3, PRIMASK
 8008458:	61fb      	str	r3, [r7, #28]
  return(result);
 800845a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800845c:	64bb      	str	r3, [r7, #72]	; 0x48
 800845e:	2301      	movs	r3, #1
 8008460:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	f383 8810 	msr	PRIMASK, r3
}
 8008468:	46c0      	nop			; (mov r8, r8)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2101      	movs	r1, #1
 8008476:	438a      	bics	r2, r1
 8008478:	609a      	str	r2, [r3, #8]
 800847a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800847c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	f383 8810 	msr	PRIMASK, r3
}
 8008484:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2220      	movs	r2, #32
 800848a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2220      	movs	r2, #32
 8008490:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2280      	movs	r2, #128	; 0x80
 8008496:	2120      	movs	r1, #32
 8008498:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2274      	movs	r2, #116	; 0x74
 800849e:	2100      	movs	r1, #0
 80084a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e010      	b.n	80084c8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	69db      	ldr	r3, [r3, #28]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	4013      	ands	r3, r2
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	425a      	negs	r2, r3
 80084b6:	4153      	adcs	r3, r2
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	001a      	movs	r2, r3
 80084bc:	1dfb      	adds	r3, r7, #7
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d100      	bne.n	80084c6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80084c4:	e74b      	b.n	800835e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	0018      	movs	r0, r3
 80084ca:	46bd      	mov	sp, r7
 80084cc:	b014      	add	sp, #80	; 0x50
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	fffffe5f 	.word	0xfffffe5f

080084d4 <__errno>:
 80084d4:	4b01      	ldr	r3, [pc, #4]	; (80084dc <__errno+0x8>)
 80084d6:	6818      	ldr	r0, [r3, #0]
 80084d8:	4770      	bx	lr
 80084da:	46c0      	nop			; (mov r8, r8)
 80084dc:	2000000c 	.word	0x2000000c

080084e0 <__libc_init_array>:
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	2600      	movs	r6, #0
 80084e4:	4d0c      	ldr	r5, [pc, #48]	; (8008518 <__libc_init_array+0x38>)
 80084e6:	4c0d      	ldr	r4, [pc, #52]	; (800851c <__libc_init_array+0x3c>)
 80084e8:	1b64      	subs	r4, r4, r5
 80084ea:	10a4      	asrs	r4, r4, #2
 80084ec:	42a6      	cmp	r6, r4
 80084ee:	d109      	bne.n	8008504 <__libc_init_array+0x24>
 80084f0:	2600      	movs	r6, #0
 80084f2:	f003 fe99 	bl	800c228 <_init>
 80084f6:	4d0a      	ldr	r5, [pc, #40]	; (8008520 <__libc_init_array+0x40>)
 80084f8:	4c0a      	ldr	r4, [pc, #40]	; (8008524 <__libc_init_array+0x44>)
 80084fa:	1b64      	subs	r4, r4, r5
 80084fc:	10a4      	asrs	r4, r4, #2
 80084fe:	42a6      	cmp	r6, r4
 8008500:	d105      	bne.n	800850e <__libc_init_array+0x2e>
 8008502:	bd70      	pop	{r4, r5, r6, pc}
 8008504:	00b3      	lsls	r3, r6, #2
 8008506:	58eb      	ldr	r3, [r5, r3]
 8008508:	4798      	blx	r3
 800850a:	3601      	adds	r6, #1
 800850c:	e7ee      	b.n	80084ec <__libc_init_array+0xc>
 800850e:	00b3      	lsls	r3, r6, #2
 8008510:	58eb      	ldr	r3, [r5, r3]
 8008512:	4798      	blx	r3
 8008514:	3601      	adds	r6, #1
 8008516:	e7f2      	b.n	80084fe <__libc_init_array+0x1e>
 8008518:	0800c8d0 	.word	0x0800c8d0
 800851c:	0800c8d0 	.word	0x0800c8d0
 8008520:	0800c8d0 	.word	0x0800c8d0
 8008524:	0800c8d4 	.word	0x0800c8d4

08008528 <memset>:
 8008528:	0003      	movs	r3, r0
 800852a:	1882      	adds	r2, r0, r2
 800852c:	4293      	cmp	r3, r2
 800852e:	d100      	bne.n	8008532 <memset+0xa>
 8008530:	4770      	bx	lr
 8008532:	7019      	strb	r1, [r3, #0]
 8008534:	3301      	adds	r3, #1
 8008536:	e7f9      	b.n	800852c <memset+0x4>

08008538 <__cvt>:
 8008538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800853a:	001e      	movs	r6, r3
 800853c:	2300      	movs	r3, #0
 800853e:	0014      	movs	r4, r2
 8008540:	b08b      	sub	sp, #44	; 0x2c
 8008542:	429e      	cmp	r6, r3
 8008544:	da04      	bge.n	8008550 <__cvt+0x18>
 8008546:	2180      	movs	r1, #128	; 0x80
 8008548:	0609      	lsls	r1, r1, #24
 800854a:	1873      	adds	r3, r6, r1
 800854c:	001e      	movs	r6, r3
 800854e:	232d      	movs	r3, #45	; 0x2d
 8008550:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008552:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008554:	7013      	strb	r3, [r2, #0]
 8008556:	2320      	movs	r3, #32
 8008558:	2203      	movs	r2, #3
 800855a:	439f      	bics	r7, r3
 800855c:	2f46      	cmp	r7, #70	; 0x46
 800855e:	d007      	beq.n	8008570 <__cvt+0x38>
 8008560:	003b      	movs	r3, r7
 8008562:	3b45      	subs	r3, #69	; 0x45
 8008564:	4259      	negs	r1, r3
 8008566:	414b      	adcs	r3, r1
 8008568:	9910      	ldr	r1, [sp, #64]	; 0x40
 800856a:	3a01      	subs	r2, #1
 800856c:	18cb      	adds	r3, r1, r3
 800856e:	9310      	str	r3, [sp, #64]	; 0x40
 8008570:	ab09      	add	r3, sp, #36	; 0x24
 8008572:	9304      	str	r3, [sp, #16]
 8008574:	ab08      	add	r3, sp, #32
 8008576:	9303      	str	r3, [sp, #12]
 8008578:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800857a:	9200      	str	r2, [sp, #0]
 800857c:	9302      	str	r3, [sp, #8]
 800857e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008580:	0022      	movs	r2, r4
 8008582:	9301      	str	r3, [sp, #4]
 8008584:	0033      	movs	r3, r6
 8008586:	f000 fcf1 	bl	8008f6c <_dtoa_r>
 800858a:	0005      	movs	r5, r0
 800858c:	2f47      	cmp	r7, #71	; 0x47
 800858e:	d102      	bne.n	8008596 <__cvt+0x5e>
 8008590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008592:	07db      	lsls	r3, r3, #31
 8008594:	d528      	bpl.n	80085e8 <__cvt+0xb0>
 8008596:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008598:	18eb      	adds	r3, r5, r3
 800859a:	9307      	str	r3, [sp, #28]
 800859c:	2f46      	cmp	r7, #70	; 0x46
 800859e:	d114      	bne.n	80085ca <__cvt+0x92>
 80085a0:	782b      	ldrb	r3, [r5, #0]
 80085a2:	2b30      	cmp	r3, #48	; 0x30
 80085a4:	d10c      	bne.n	80085c0 <__cvt+0x88>
 80085a6:	2200      	movs	r2, #0
 80085a8:	2300      	movs	r3, #0
 80085aa:	0020      	movs	r0, r4
 80085ac:	0031      	movs	r1, r6
 80085ae:	f7f7 ff4d 	bl	800044c <__aeabi_dcmpeq>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d104      	bne.n	80085c0 <__cvt+0x88>
 80085b6:	2301      	movs	r3, #1
 80085b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80085ba:	1a9b      	subs	r3, r3, r2
 80085bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085c2:	9a07      	ldr	r2, [sp, #28]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	18d3      	adds	r3, r2, r3
 80085c8:	9307      	str	r3, [sp, #28]
 80085ca:	2200      	movs	r2, #0
 80085cc:	2300      	movs	r3, #0
 80085ce:	0020      	movs	r0, r4
 80085d0:	0031      	movs	r1, r6
 80085d2:	f7f7 ff3b 	bl	800044c <__aeabi_dcmpeq>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d001      	beq.n	80085de <__cvt+0xa6>
 80085da:	9b07      	ldr	r3, [sp, #28]
 80085dc:	9309      	str	r3, [sp, #36]	; 0x24
 80085de:	2230      	movs	r2, #48	; 0x30
 80085e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e2:	9907      	ldr	r1, [sp, #28]
 80085e4:	428b      	cmp	r3, r1
 80085e6:	d306      	bcc.n	80085f6 <__cvt+0xbe>
 80085e8:	0028      	movs	r0, r5
 80085ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085ee:	1b5b      	subs	r3, r3, r5
 80085f0:	6013      	str	r3, [r2, #0]
 80085f2:	b00b      	add	sp, #44	; 0x2c
 80085f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085f6:	1c59      	adds	r1, r3, #1
 80085f8:	9109      	str	r1, [sp, #36]	; 0x24
 80085fa:	701a      	strb	r2, [r3, #0]
 80085fc:	e7f0      	b.n	80085e0 <__cvt+0xa8>

080085fe <__exponent>:
 80085fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008600:	1c83      	adds	r3, r0, #2
 8008602:	b087      	sub	sp, #28
 8008604:	9303      	str	r3, [sp, #12]
 8008606:	0005      	movs	r5, r0
 8008608:	000c      	movs	r4, r1
 800860a:	232b      	movs	r3, #43	; 0x2b
 800860c:	7002      	strb	r2, [r0, #0]
 800860e:	2900      	cmp	r1, #0
 8008610:	da01      	bge.n	8008616 <__exponent+0x18>
 8008612:	424c      	negs	r4, r1
 8008614:	3302      	adds	r3, #2
 8008616:	706b      	strb	r3, [r5, #1]
 8008618:	2c09      	cmp	r4, #9
 800861a:	dd31      	ble.n	8008680 <__exponent+0x82>
 800861c:	270a      	movs	r7, #10
 800861e:	ab04      	add	r3, sp, #16
 8008620:	1dde      	adds	r6, r3, #7
 8008622:	0020      	movs	r0, r4
 8008624:	0039      	movs	r1, r7
 8008626:	9601      	str	r6, [sp, #4]
 8008628:	f7f7 fefa 	bl	8000420 <__aeabi_idivmod>
 800862c:	3e01      	subs	r6, #1
 800862e:	3130      	adds	r1, #48	; 0x30
 8008630:	0020      	movs	r0, r4
 8008632:	7031      	strb	r1, [r6, #0]
 8008634:	0039      	movs	r1, r7
 8008636:	9402      	str	r4, [sp, #8]
 8008638:	f7f7 fe0c 	bl	8000254 <__divsi3>
 800863c:	9b02      	ldr	r3, [sp, #8]
 800863e:	0004      	movs	r4, r0
 8008640:	2b63      	cmp	r3, #99	; 0x63
 8008642:	dcee      	bgt.n	8008622 <__exponent+0x24>
 8008644:	9b01      	ldr	r3, [sp, #4]
 8008646:	3430      	adds	r4, #48	; 0x30
 8008648:	1e9a      	subs	r2, r3, #2
 800864a:	0013      	movs	r3, r2
 800864c:	9903      	ldr	r1, [sp, #12]
 800864e:	7014      	strb	r4, [r2, #0]
 8008650:	a804      	add	r0, sp, #16
 8008652:	3007      	adds	r0, #7
 8008654:	4298      	cmp	r0, r3
 8008656:	d80e      	bhi.n	8008676 <__exponent+0x78>
 8008658:	ab04      	add	r3, sp, #16
 800865a:	3307      	adds	r3, #7
 800865c:	2000      	movs	r0, #0
 800865e:	429a      	cmp	r2, r3
 8008660:	d804      	bhi.n	800866c <__exponent+0x6e>
 8008662:	ab04      	add	r3, sp, #16
 8008664:	3009      	adds	r0, #9
 8008666:	18c0      	adds	r0, r0, r3
 8008668:	9b01      	ldr	r3, [sp, #4]
 800866a:	1ac0      	subs	r0, r0, r3
 800866c:	9b03      	ldr	r3, [sp, #12]
 800866e:	1818      	adds	r0, r3, r0
 8008670:	1b40      	subs	r0, r0, r5
 8008672:	b007      	add	sp, #28
 8008674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008676:	7818      	ldrb	r0, [r3, #0]
 8008678:	3301      	adds	r3, #1
 800867a:	7008      	strb	r0, [r1, #0]
 800867c:	3101      	adds	r1, #1
 800867e:	e7e7      	b.n	8008650 <__exponent+0x52>
 8008680:	2330      	movs	r3, #48	; 0x30
 8008682:	18e4      	adds	r4, r4, r3
 8008684:	70ab      	strb	r3, [r5, #2]
 8008686:	1d28      	adds	r0, r5, #4
 8008688:	70ec      	strb	r4, [r5, #3]
 800868a:	e7f1      	b.n	8008670 <__exponent+0x72>

0800868c <_printf_float>:
 800868c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800868e:	b095      	sub	sp, #84	; 0x54
 8008690:	000c      	movs	r4, r1
 8008692:	9209      	str	r2, [sp, #36]	; 0x24
 8008694:	001e      	movs	r6, r3
 8008696:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008698:	0007      	movs	r7, r0
 800869a:	f001 fa81 	bl	8009ba0 <_localeconv_r>
 800869e:	6803      	ldr	r3, [r0, #0]
 80086a0:	0018      	movs	r0, r3
 80086a2:	930c      	str	r3, [sp, #48]	; 0x30
 80086a4:	f7f7 fd30 	bl	8000108 <strlen>
 80086a8:	2300      	movs	r3, #0
 80086aa:	9312      	str	r3, [sp, #72]	; 0x48
 80086ac:	7e23      	ldrb	r3, [r4, #24]
 80086ae:	2207      	movs	r2, #7
 80086b0:	930a      	str	r3, [sp, #40]	; 0x28
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	900e      	str	r0, [sp, #56]	; 0x38
 80086b6:	930d      	str	r3, [sp, #52]	; 0x34
 80086b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80086ba:	682b      	ldr	r3, [r5, #0]
 80086bc:	05c9      	lsls	r1, r1, #23
 80086be:	d547      	bpl.n	8008750 <_printf_float+0xc4>
 80086c0:	189b      	adds	r3, r3, r2
 80086c2:	4393      	bics	r3, r2
 80086c4:	001a      	movs	r2, r3
 80086c6:	3208      	adds	r2, #8
 80086c8:	602a      	str	r2, [r5, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	64a2      	str	r2, [r4, #72]	; 0x48
 80086d0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80086d2:	2201      	movs	r2, #1
 80086d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80086d6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80086d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80086da:	006b      	lsls	r3, r5, #1
 80086dc:	085b      	lsrs	r3, r3, #1
 80086de:	930f      	str	r3, [sp, #60]	; 0x3c
 80086e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80086e2:	4ba7      	ldr	r3, [pc, #668]	; (8008980 <_printf_float+0x2f4>)
 80086e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80086e6:	4252      	negs	r2, r2
 80086e8:	f7fa f9be 	bl	8002a68 <__aeabi_dcmpun>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d131      	bne.n	8008754 <_printf_float+0xc8>
 80086f0:	2201      	movs	r2, #1
 80086f2:	4ba3      	ldr	r3, [pc, #652]	; (8008980 <_printf_float+0x2f4>)
 80086f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80086f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80086f8:	4252      	negs	r2, r2
 80086fa:	f7f7 feb7 	bl	800046c <__aeabi_dcmple>
 80086fe:	2800      	cmp	r0, #0
 8008700:	d128      	bne.n	8008754 <_printf_float+0xc8>
 8008702:	2200      	movs	r2, #0
 8008704:	2300      	movs	r3, #0
 8008706:	0029      	movs	r1, r5
 8008708:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800870a:	f7f7 fea5 	bl	8000458 <__aeabi_dcmplt>
 800870e:	2800      	cmp	r0, #0
 8008710:	d003      	beq.n	800871a <_printf_float+0x8e>
 8008712:	0023      	movs	r3, r4
 8008714:	222d      	movs	r2, #45	; 0x2d
 8008716:	3343      	adds	r3, #67	; 0x43
 8008718:	701a      	strb	r2, [r3, #0]
 800871a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800871c:	4d99      	ldr	r5, [pc, #612]	; (8008984 <_printf_float+0x2f8>)
 800871e:	2b47      	cmp	r3, #71	; 0x47
 8008720:	d900      	bls.n	8008724 <_printf_float+0x98>
 8008722:	4d99      	ldr	r5, [pc, #612]	; (8008988 <_printf_float+0x2fc>)
 8008724:	2303      	movs	r3, #3
 8008726:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008728:	6123      	str	r3, [r4, #16]
 800872a:	3301      	adds	r3, #1
 800872c:	439a      	bics	r2, r3
 800872e:	2300      	movs	r3, #0
 8008730:	6022      	str	r2, [r4, #0]
 8008732:	930b      	str	r3, [sp, #44]	; 0x2c
 8008734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008736:	0021      	movs	r1, r4
 8008738:	0038      	movs	r0, r7
 800873a:	9600      	str	r6, [sp, #0]
 800873c:	aa13      	add	r2, sp, #76	; 0x4c
 800873e:	f000 f9e7 	bl	8008b10 <_printf_common>
 8008742:	1c43      	adds	r3, r0, #1
 8008744:	d000      	beq.n	8008748 <_printf_float+0xbc>
 8008746:	e0a2      	b.n	800888e <_printf_float+0x202>
 8008748:	2001      	movs	r0, #1
 800874a:	4240      	negs	r0, r0
 800874c:	b015      	add	sp, #84	; 0x54
 800874e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008750:	3307      	adds	r3, #7
 8008752:	e7b6      	b.n	80086c2 <_printf_float+0x36>
 8008754:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008756:	002b      	movs	r3, r5
 8008758:	0010      	movs	r0, r2
 800875a:	0029      	movs	r1, r5
 800875c:	f7fa f984 	bl	8002a68 <__aeabi_dcmpun>
 8008760:	2800      	cmp	r0, #0
 8008762:	d00b      	beq.n	800877c <_printf_float+0xf0>
 8008764:	2d00      	cmp	r5, #0
 8008766:	da03      	bge.n	8008770 <_printf_float+0xe4>
 8008768:	0023      	movs	r3, r4
 800876a:	222d      	movs	r2, #45	; 0x2d
 800876c:	3343      	adds	r3, #67	; 0x43
 800876e:	701a      	strb	r2, [r3, #0]
 8008770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008772:	4d86      	ldr	r5, [pc, #536]	; (800898c <_printf_float+0x300>)
 8008774:	2b47      	cmp	r3, #71	; 0x47
 8008776:	d9d5      	bls.n	8008724 <_printf_float+0x98>
 8008778:	4d85      	ldr	r5, [pc, #532]	; (8008990 <_printf_float+0x304>)
 800877a:	e7d3      	b.n	8008724 <_printf_float+0x98>
 800877c:	2220      	movs	r2, #32
 800877e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008780:	6863      	ldr	r3, [r4, #4]
 8008782:	4391      	bics	r1, r2
 8008784:	910f      	str	r1, [sp, #60]	; 0x3c
 8008786:	1c5a      	adds	r2, r3, #1
 8008788:	d149      	bne.n	800881e <_printf_float+0x192>
 800878a:	3307      	adds	r3, #7
 800878c:	6063      	str	r3, [r4, #4]
 800878e:	2380      	movs	r3, #128	; 0x80
 8008790:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008792:	00db      	lsls	r3, r3, #3
 8008794:	4313      	orrs	r3, r2
 8008796:	2200      	movs	r2, #0
 8008798:	9206      	str	r2, [sp, #24]
 800879a:	aa12      	add	r2, sp, #72	; 0x48
 800879c:	9205      	str	r2, [sp, #20]
 800879e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087a0:	a908      	add	r1, sp, #32
 80087a2:	9204      	str	r2, [sp, #16]
 80087a4:	aa11      	add	r2, sp, #68	; 0x44
 80087a6:	9203      	str	r2, [sp, #12]
 80087a8:	2223      	movs	r2, #35	; 0x23
 80087aa:	6023      	str	r3, [r4, #0]
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	6863      	ldr	r3, [r4, #4]
 80087b0:	1852      	adds	r2, r2, r1
 80087b2:	9202      	str	r2, [sp, #8]
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	0038      	movs	r0, r7
 80087b8:	002b      	movs	r3, r5
 80087ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087bc:	f7ff febc 	bl	8008538 <__cvt>
 80087c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087c2:	0005      	movs	r5, r0
 80087c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80087c6:	2b47      	cmp	r3, #71	; 0x47
 80087c8:	d108      	bne.n	80087dc <_printf_float+0x150>
 80087ca:	1ccb      	adds	r3, r1, #3
 80087cc:	db02      	blt.n	80087d4 <_printf_float+0x148>
 80087ce:	6863      	ldr	r3, [r4, #4]
 80087d0:	4299      	cmp	r1, r3
 80087d2:	dd48      	ble.n	8008866 <_printf_float+0x1da>
 80087d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d6:	3b02      	subs	r3, #2
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	930a      	str	r3, [sp, #40]	; 0x28
 80087dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087de:	2b65      	cmp	r3, #101	; 0x65
 80087e0:	d824      	bhi.n	800882c <_printf_float+0x1a0>
 80087e2:	0020      	movs	r0, r4
 80087e4:	001a      	movs	r2, r3
 80087e6:	3901      	subs	r1, #1
 80087e8:	3050      	adds	r0, #80	; 0x50
 80087ea:	9111      	str	r1, [sp, #68]	; 0x44
 80087ec:	f7ff ff07 	bl	80085fe <__exponent>
 80087f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80087f4:	1813      	adds	r3, r2, r0
 80087f6:	6123      	str	r3, [r4, #16]
 80087f8:	2a01      	cmp	r2, #1
 80087fa:	dc02      	bgt.n	8008802 <_printf_float+0x176>
 80087fc:	6822      	ldr	r2, [r4, #0]
 80087fe:	07d2      	lsls	r2, r2, #31
 8008800:	d501      	bpl.n	8008806 <_printf_float+0x17a>
 8008802:	3301      	adds	r3, #1
 8008804:	6123      	str	r3, [r4, #16]
 8008806:	2323      	movs	r3, #35	; 0x23
 8008808:	aa08      	add	r2, sp, #32
 800880a:	189b      	adds	r3, r3, r2
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d100      	bne.n	8008814 <_printf_float+0x188>
 8008812:	e78f      	b.n	8008734 <_printf_float+0xa8>
 8008814:	0023      	movs	r3, r4
 8008816:	222d      	movs	r2, #45	; 0x2d
 8008818:	3343      	adds	r3, #67	; 0x43
 800881a:	701a      	strb	r2, [r3, #0]
 800881c:	e78a      	b.n	8008734 <_printf_float+0xa8>
 800881e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008820:	2a47      	cmp	r2, #71	; 0x47
 8008822:	d1b4      	bne.n	800878e <_printf_float+0x102>
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1b2      	bne.n	800878e <_printf_float+0x102>
 8008828:	3301      	adds	r3, #1
 800882a:	e7af      	b.n	800878c <_printf_float+0x100>
 800882c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800882e:	2b66      	cmp	r3, #102	; 0x66
 8008830:	d11b      	bne.n	800886a <_printf_float+0x1de>
 8008832:	6863      	ldr	r3, [r4, #4]
 8008834:	2900      	cmp	r1, #0
 8008836:	dd0d      	ble.n	8008854 <_printf_float+0x1c8>
 8008838:	6121      	str	r1, [r4, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d102      	bne.n	8008844 <_printf_float+0x1b8>
 800883e:	6822      	ldr	r2, [r4, #0]
 8008840:	07d2      	lsls	r2, r2, #31
 8008842:	d502      	bpl.n	800884a <_printf_float+0x1be>
 8008844:	3301      	adds	r3, #1
 8008846:	1859      	adds	r1, r3, r1
 8008848:	6121      	str	r1, [r4, #16]
 800884a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800884c:	65a3      	str	r3, [r4, #88]	; 0x58
 800884e:	2300      	movs	r3, #0
 8008850:	930b      	str	r3, [sp, #44]	; 0x2c
 8008852:	e7d8      	b.n	8008806 <_printf_float+0x17a>
 8008854:	2b00      	cmp	r3, #0
 8008856:	d103      	bne.n	8008860 <_printf_float+0x1d4>
 8008858:	2201      	movs	r2, #1
 800885a:	6821      	ldr	r1, [r4, #0]
 800885c:	4211      	tst	r1, r2
 800885e:	d000      	beq.n	8008862 <_printf_float+0x1d6>
 8008860:	1c9a      	adds	r2, r3, #2
 8008862:	6122      	str	r2, [r4, #16]
 8008864:	e7f1      	b.n	800884a <_printf_float+0x1be>
 8008866:	2367      	movs	r3, #103	; 0x67
 8008868:	930a      	str	r3, [sp, #40]	; 0x28
 800886a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800886c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800886e:	4293      	cmp	r3, r2
 8008870:	db06      	blt.n	8008880 <_printf_float+0x1f4>
 8008872:	6822      	ldr	r2, [r4, #0]
 8008874:	6123      	str	r3, [r4, #16]
 8008876:	07d2      	lsls	r2, r2, #31
 8008878:	d5e7      	bpl.n	800884a <_printf_float+0x1be>
 800887a:	3301      	adds	r3, #1
 800887c:	6123      	str	r3, [r4, #16]
 800887e:	e7e4      	b.n	800884a <_printf_float+0x1be>
 8008880:	2101      	movs	r1, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	dc01      	bgt.n	800888a <_printf_float+0x1fe>
 8008886:	1849      	adds	r1, r1, r1
 8008888:	1ac9      	subs	r1, r1, r3
 800888a:	1852      	adds	r2, r2, r1
 800888c:	e7e9      	b.n	8008862 <_printf_float+0x1d6>
 800888e:	6822      	ldr	r2, [r4, #0]
 8008890:	0553      	lsls	r3, r2, #21
 8008892:	d407      	bmi.n	80088a4 <_printf_float+0x218>
 8008894:	6923      	ldr	r3, [r4, #16]
 8008896:	002a      	movs	r2, r5
 8008898:	0038      	movs	r0, r7
 800889a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800889c:	47b0      	blx	r6
 800889e:	1c43      	adds	r3, r0, #1
 80088a0:	d128      	bne.n	80088f4 <_printf_float+0x268>
 80088a2:	e751      	b.n	8008748 <_printf_float+0xbc>
 80088a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a6:	2b65      	cmp	r3, #101	; 0x65
 80088a8:	d800      	bhi.n	80088ac <_printf_float+0x220>
 80088aa:	e0e1      	b.n	8008a70 <_printf_float+0x3e4>
 80088ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80088ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80088b0:	2200      	movs	r2, #0
 80088b2:	2300      	movs	r3, #0
 80088b4:	f7f7 fdca 	bl	800044c <__aeabi_dcmpeq>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d031      	beq.n	8008920 <_printf_float+0x294>
 80088bc:	2301      	movs	r3, #1
 80088be:	0038      	movs	r0, r7
 80088c0:	4a34      	ldr	r2, [pc, #208]	; (8008994 <_printf_float+0x308>)
 80088c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088c4:	47b0      	blx	r6
 80088c6:	1c43      	adds	r3, r0, #1
 80088c8:	d100      	bne.n	80088cc <_printf_float+0x240>
 80088ca:	e73d      	b.n	8008748 <_printf_float+0xbc>
 80088cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088d0:	4293      	cmp	r3, r2
 80088d2:	db02      	blt.n	80088da <_printf_float+0x24e>
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	07db      	lsls	r3, r3, #31
 80088d8:	d50c      	bpl.n	80088f4 <_printf_float+0x268>
 80088da:	0038      	movs	r0, r7
 80088dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088e2:	47b0      	blx	r6
 80088e4:	2500      	movs	r5, #0
 80088e6:	1c43      	adds	r3, r0, #1
 80088e8:	d100      	bne.n	80088ec <_printf_float+0x260>
 80088ea:	e72d      	b.n	8008748 <_printf_float+0xbc>
 80088ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088ee:	3b01      	subs	r3, #1
 80088f0:	42ab      	cmp	r3, r5
 80088f2:	dc0a      	bgt.n	800890a <_printf_float+0x27e>
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	079b      	lsls	r3, r3, #30
 80088f8:	d500      	bpl.n	80088fc <_printf_float+0x270>
 80088fa:	e106      	b.n	8008b0a <_printf_float+0x47e>
 80088fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80088fe:	68e0      	ldr	r0, [r4, #12]
 8008900:	4298      	cmp	r0, r3
 8008902:	db00      	blt.n	8008906 <_printf_float+0x27a>
 8008904:	e722      	b.n	800874c <_printf_float+0xc0>
 8008906:	0018      	movs	r0, r3
 8008908:	e720      	b.n	800874c <_printf_float+0xc0>
 800890a:	0022      	movs	r2, r4
 800890c:	2301      	movs	r3, #1
 800890e:	0038      	movs	r0, r7
 8008910:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008912:	321a      	adds	r2, #26
 8008914:	47b0      	blx	r6
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	d100      	bne.n	800891c <_printf_float+0x290>
 800891a:	e715      	b.n	8008748 <_printf_float+0xbc>
 800891c:	3501      	adds	r5, #1
 800891e:	e7e5      	b.n	80088ec <_printf_float+0x260>
 8008920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008922:	2b00      	cmp	r3, #0
 8008924:	dc38      	bgt.n	8008998 <_printf_float+0x30c>
 8008926:	2301      	movs	r3, #1
 8008928:	0038      	movs	r0, r7
 800892a:	4a1a      	ldr	r2, [pc, #104]	; (8008994 <_printf_float+0x308>)
 800892c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800892e:	47b0      	blx	r6
 8008930:	1c43      	adds	r3, r0, #1
 8008932:	d100      	bne.n	8008936 <_printf_float+0x2aa>
 8008934:	e708      	b.n	8008748 <_printf_float+0xbc>
 8008936:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008938:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800893a:	4313      	orrs	r3, r2
 800893c:	d102      	bne.n	8008944 <_printf_float+0x2b8>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	07db      	lsls	r3, r3, #31
 8008942:	d5d7      	bpl.n	80088f4 <_printf_float+0x268>
 8008944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008946:	0038      	movs	r0, r7
 8008948:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800894a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800894c:	47b0      	blx	r6
 800894e:	1c43      	adds	r3, r0, #1
 8008950:	d100      	bne.n	8008954 <_printf_float+0x2c8>
 8008952:	e6f9      	b.n	8008748 <_printf_float+0xbc>
 8008954:	2300      	movs	r3, #0
 8008956:	930a      	str	r3, [sp, #40]	; 0x28
 8008958:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800895a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800895c:	425b      	negs	r3, r3
 800895e:	4293      	cmp	r3, r2
 8008960:	dc01      	bgt.n	8008966 <_printf_float+0x2da>
 8008962:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008964:	e797      	b.n	8008896 <_printf_float+0x20a>
 8008966:	0022      	movs	r2, r4
 8008968:	2301      	movs	r3, #1
 800896a:	0038      	movs	r0, r7
 800896c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800896e:	321a      	adds	r2, #26
 8008970:	47b0      	blx	r6
 8008972:	1c43      	adds	r3, r0, #1
 8008974:	d100      	bne.n	8008978 <_printf_float+0x2ec>
 8008976:	e6e7      	b.n	8008748 <_printf_float+0xbc>
 8008978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800897a:	3301      	adds	r3, #1
 800897c:	e7eb      	b.n	8008956 <_printf_float+0x2ca>
 800897e:	46c0      	nop			; (mov r8, r8)
 8008980:	7fefffff 	.word	0x7fefffff
 8008984:	0800c4c0 	.word	0x0800c4c0
 8008988:	0800c4c4 	.word	0x0800c4c4
 800898c:	0800c4c8 	.word	0x0800c4c8
 8008990:	0800c4cc 	.word	0x0800c4cc
 8008994:	0800c4d0 	.word	0x0800c4d0
 8008998:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800899a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800899c:	920a      	str	r2, [sp, #40]	; 0x28
 800899e:	429a      	cmp	r2, r3
 80089a0:	dd00      	ble.n	80089a4 <_printf_float+0x318>
 80089a2:	930a      	str	r3, [sp, #40]	; 0x28
 80089a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	dc3c      	bgt.n	8008a24 <_printf_float+0x398>
 80089aa:	2300      	movs	r3, #0
 80089ac:	930d      	str	r3, [sp, #52]	; 0x34
 80089ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b0:	43db      	mvns	r3, r3
 80089b2:	17db      	asrs	r3, r3, #31
 80089b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80089b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80089bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089be:	4013      	ands	r3, r2
 80089c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089c6:	4293      	cmp	r3, r2
 80089c8:	dc34      	bgt.n	8008a34 <_printf_float+0x3a8>
 80089ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089ce:	4293      	cmp	r3, r2
 80089d0:	db3d      	blt.n	8008a4e <_printf_float+0x3c2>
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	07db      	lsls	r3, r3, #31
 80089d6:	d43a      	bmi.n	8008a4e <_printf_float+0x3c2>
 80089d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	1a52      	subs	r2, r2, r1
 80089e2:	920a      	str	r2, [sp, #40]	; 0x28
 80089e4:	429a      	cmp	r2, r3
 80089e6:	dd00      	ble.n	80089ea <_printf_float+0x35e>
 80089e8:	930a      	str	r3, [sp, #40]	; 0x28
 80089ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	dc36      	bgt.n	8008a5e <_printf_float+0x3d2>
 80089f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f2:	2500      	movs	r5, #0
 80089f4:	43db      	mvns	r3, r3
 80089f6:	17db      	asrs	r3, r3, #31
 80089f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80089fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80089fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a00:	1a9b      	subs	r3, r3, r2
 8008a02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a04:	400a      	ands	r2, r1
 8008a06:	1a9b      	subs	r3, r3, r2
 8008a08:	42ab      	cmp	r3, r5
 8008a0a:	dc00      	bgt.n	8008a0e <_printf_float+0x382>
 8008a0c:	e772      	b.n	80088f4 <_printf_float+0x268>
 8008a0e:	0022      	movs	r2, r4
 8008a10:	2301      	movs	r3, #1
 8008a12:	0038      	movs	r0, r7
 8008a14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a16:	321a      	adds	r2, #26
 8008a18:	47b0      	blx	r6
 8008a1a:	1c43      	adds	r3, r0, #1
 8008a1c:	d100      	bne.n	8008a20 <_printf_float+0x394>
 8008a1e:	e693      	b.n	8008748 <_printf_float+0xbc>
 8008a20:	3501      	adds	r5, #1
 8008a22:	e7ea      	b.n	80089fa <_printf_float+0x36e>
 8008a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a26:	002a      	movs	r2, r5
 8008a28:	0038      	movs	r0, r7
 8008a2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a2c:	47b0      	blx	r6
 8008a2e:	1c43      	adds	r3, r0, #1
 8008a30:	d1bb      	bne.n	80089aa <_printf_float+0x31e>
 8008a32:	e689      	b.n	8008748 <_printf_float+0xbc>
 8008a34:	0022      	movs	r2, r4
 8008a36:	2301      	movs	r3, #1
 8008a38:	0038      	movs	r0, r7
 8008a3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a3c:	321a      	adds	r2, #26
 8008a3e:	47b0      	blx	r6
 8008a40:	1c43      	adds	r3, r0, #1
 8008a42:	d100      	bne.n	8008a46 <_printf_float+0x3ba>
 8008a44:	e680      	b.n	8008748 <_printf_float+0xbc>
 8008a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a48:	3301      	adds	r3, #1
 8008a4a:	930d      	str	r3, [sp, #52]	; 0x34
 8008a4c:	e7b3      	b.n	80089b6 <_printf_float+0x32a>
 8008a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a50:	0038      	movs	r0, r7
 8008a52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a56:	47b0      	blx	r6
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	d1bd      	bne.n	80089d8 <_printf_float+0x34c>
 8008a5c:	e674      	b.n	8008748 <_printf_float+0xbc>
 8008a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a60:	0038      	movs	r0, r7
 8008a62:	18ea      	adds	r2, r5, r3
 8008a64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a68:	47b0      	blx	r6
 8008a6a:	1c43      	adds	r3, r0, #1
 8008a6c:	d1c0      	bne.n	80089f0 <_printf_float+0x364>
 8008a6e:	e66b      	b.n	8008748 <_printf_float+0xbc>
 8008a70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	dc02      	bgt.n	8008a7c <_printf_float+0x3f0>
 8008a76:	2301      	movs	r3, #1
 8008a78:	421a      	tst	r2, r3
 8008a7a:	d034      	beq.n	8008ae6 <_printf_float+0x45a>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	002a      	movs	r2, r5
 8008a80:	0038      	movs	r0, r7
 8008a82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a84:	47b0      	blx	r6
 8008a86:	1c43      	adds	r3, r0, #1
 8008a88:	d100      	bne.n	8008a8c <_printf_float+0x400>
 8008a8a:	e65d      	b.n	8008748 <_printf_float+0xbc>
 8008a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a8e:	0038      	movs	r0, r7
 8008a90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a94:	47b0      	blx	r6
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	d100      	bne.n	8008a9c <_printf_float+0x410>
 8008a9a:	e655      	b.n	8008748 <_printf_float+0xbc>
 8008a9c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008a9e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	f7f7 fcd2 	bl	800044c <__aeabi_dcmpeq>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d11a      	bne.n	8008ae2 <_printf_float+0x456>
 8008aac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008aae:	1c6a      	adds	r2, r5, #1
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	0038      	movs	r0, r7
 8008ab4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ab6:	47b0      	blx	r6
 8008ab8:	1c43      	adds	r3, r0, #1
 8008aba:	d10e      	bne.n	8008ada <_printf_float+0x44e>
 8008abc:	e644      	b.n	8008748 <_printf_float+0xbc>
 8008abe:	0022      	movs	r2, r4
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	0038      	movs	r0, r7
 8008ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ac6:	321a      	adds	r2, #26
 8008ac8:	47b0      	blx	r6
 8008aca:	1c43      	adds	r3, r0, #1
 8008acc:	d100      	bne.n	8008ad0 <_printf_float+0x444>
 8008ace:	e63b      	b.n	8008748 <_printf_float+0xbc>
 8008ad0:	3501      	adds	r5, #1
 8008ad2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	42ab      	cmp	r3, r5
 8008ad8:	dcf1      	bgt.n	8008abe <_printf_float+0x432>
 8008ada:	0022      	movs	r2, r4
 8008adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ade:	3250      	adds	r2, #80	; 0x50
 8008ae0:	e6da      	b.n	8008898 <_printf_float+0x20c>
 8008ae2:	2500      	movs	r5, #0
 8008ae4:	e7f5      	b.n	8008ad2 <_printf_float+0x446>
 8008ae6:	002a      	movs	r2, r5
 8008ae8:	e7e3      	b.n	8008ab2 <_printf_float+0x426>
 8008aea:	0022      	movs	r2, r4
 8008aec:	2301      	movs	r3, #1
 8008aee:	0038      	movs	r0, r7
 8008af0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008af2:	3219      	adds	r2, #25
 8008af4:	47b0      	blx	r6
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	d100      	bne.n	8008afc <_printf_float+0x470>
 8008afa:	e625      	b.n	8008748 <_printf_float+0xbc>
 8008afc:	3501      	adds	r5, #1
 8008afe:	68e3      	ldr	r3, [r4, #12]
 8008b00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b02:	1a9b      	subs	r3, r3, r2
 8008b04:	42ab      	cmp	r3, r5
 8008b06:	dcf0      	bgt.n	8008aea <_printf_float+0x45e>
 8008b08:	e6f8      	b.n	80088fc <_printf_float+0x270>
 8008b0a:	2500      	movs	r5, #0
 8008b0c:	e7f7      	b.n	8008afe <_printf_float+0x472>
 8008b0e:	46c0      	nop			; (mov r8, r8)

08008b10 <_printf_common>:
 8008b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b12:	0015      	movs	r5, r2
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	688a      	ldr	r2, [r1, #8]
 8008b18:	690b      	ldr	r3, [r1, #16]
 8008b1a:	000c      	movs	r4, r1
 8008b1c:	9000      	str	r0, [sp, #0]
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	da00      	bge.n	8008b24 <_printf_common+0x14>
 8008b22:	0013      	movs	r3, r2
 8008b24:	0022      	movs	r2, r4
 8008b26:	602b      	str	r3, [r5, #0]
 8008b28:	3243      	adds	r2, #67	; 0x43
 8008b2a:	7812      	ldrb	r2, [r2, #0]
 8008b2c:	2a00      	cmp	r2, #0
 8008b2e:	d001      	beq.n	8008b34 <_printf_common+0x24>
 8008b30:	3301      	adds	r3, #1
 8008b32:	602b      	str	r3, [r5, #0]
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	069b      	lsls	r3, r3, #26
 8008b38:	d502      	bpl.n	8008b40 <_printf_common+0x30>
 8008b3a:	682b      	ldr	r3, [r5, #0]
 8008b3c:	3302      	adds	r3, #2
 8008b3e:	602b      	str	r3, [r5, #0]
 8008b40:	6822      	ldr	r2, [r4, #0]
 8008b42:	2306      	movs	r3, #6
 8008b44:	0017      	movs	r7, r2
 8008b46:	401f      	ands	r7, r3
 8008b48:	421a      	tst	r2, r3
 8008b4a:	d027      	beq.n	8008b9c <_printf_common+0x8c>
 8008b4c:	0023      	movs	r3, r4
 8008b4e:	3343      	adds	r3, #67	; 0x43
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	1e5a      	subs	r2, r3, #1
 8008b54:	4193      	sbcs	r3, r2
 8008b56:	6822      	ldr	r2, [r4, #0]
 8008b58:	0692      	lsls	r2, r2, #26
 8008b5a:	d430      	bmi.n	8008bbe <_printf_common+0xae>
 8008b5c:	0022      	movs	r2, r4
 8008b5e:	9901      	ldr	r1, [sp, #4]
 8008b60:	9800      	ldr	r0, [sp, #0]
 8008b62:	9e08      	ldr	r6, [sp, #32]
 8008b64:	3243      	adds	r2, #67	; 0x43
 8008b66:	47b0      	blx	r6
 8008b68:	1c43      	adds	r3, r0, #1
 8008b6a:	d025      	beq.n	8008bb8 <_printf_common+0xa8>
 8008b6c:	2306      	movs	r3, #6
 8008b6e:	6820      	ldr	r0, [r4, #0]
 8008b70:	682a      	ldr	r2, [r5, #0]
 8008b72:	68e1      	ldr	r1, [r4, #12]
 8008b74:	2500      	movs	r5, #0
 8008b76:	4003      	ands	r3, r0
 8008b78:	2b04      	cmp	r3, #4
 8008b7a:	d103      	bne.n	8008b84 <_printf_common+0x74>
 8008b7c:	1a8d      	subs	r5, r1, r2
 8008b7e:	43eb      	mvns	r3, r5
 8008b80:	17db      	asrs	r3, r3, #31
 8008b82:	401d      	ands	r5, r3
 8008b84:	68a3      	ldr	r3, [r4, #8]
 8008b86:	6922      	ldr	r2, [r4, #16]
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	dd01      	ble.n	8008b90 <_printf_common+0x80>
 8008b8c:	1a9b      	subs	r3, r3, r2
 8008b8e:	18ed      	adds	r5, r5, r3
 8008b90:	2700      	movs	r7, #0
 8008b92:	42bd      	cmp	r5, r7
 8008b94:	d120      	bne.n	8008bd8 <_printf_common+0xc8>
 8008b96:	2000      	movs	r0, #0
 8008b98:	e010      	b.n	8008bbc <_printf_common+0xac>
 8008b9a:	3701      	adds	r7, #1
 8008b9c:	68e3      	ldr	r3, [r4, #12]
 8008b9e:	682a      	ldr	r2, [r5, #0]
 8008ba0:	1a9b      	subs	r3, r3, r2
 8008ba2:	42bb      	cmp	r3, r7
 8008ba4:	ddd2      	ble.n	8008b4c <_printf_common+0x3c>
 8008ba6:	0022      	movs	r2, r4
 8008ba8:	2301      	movs	r3, #1
 8008baa:	9901      	ldr	r1, [sp, #4]
 8008bac:	9800      	ldr	r0, [sp, #0]
 8008bae:	9e08      	ldr	r6, [sp, #32]
 8008bb0:	3219      	adds	r2, #25
 8008bb2:	47b0      	blx	r6
 8008bb4:	1c43      	adds	r3, r0, #1
 8008bb6:	d1f0      	bne.n	8008b9a <_printf_common+0x8a>
 8008bb8:	2001      	movs	r0, #1
 8008bba:	4240      	negs	r0, r0
 8008bbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bbe:	2030      	movs	r0, #48	; 0x30
 8008bc0:	18e1      	adds	r1, r4, r3
 8008bc2:	3143      	adds	r1, #67	; 0x43
 8008bc4:	7008      	strb	r0, [r1, #0]
 8008bc6:	0021      	movs	r1, r4
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	3145      	adds	r1, #69	; 0x45
 8008bcc:	7809      	ldrb	r1, [r1, #0]
 8008bce:	18a2      	adds	r2, r4, r2
 8008bd0:	3243      	adds	r2, #67	; 0x43
 8008bd2:	3302      	adds	r3, #2
 8008bd4:	7011      	strb	r1, [r2, #0]
 8008bd6:	e7c1      	b.n	8008b5c <_printf_common+0x4c>
 8008bd8:	0022      	movs	r2, r4
 8008bda:	2301      	movs	r3, #1
 8008bdc:	9901      	ldr	r1, [sp, #4]
 8008bde:	9800      	ldr	r0, [sp, #0]
 8008be0:	9e08      	ldr	r6, [sp, #32]
 8008be2:	321a      	adds	r2, #26
 8008be4:	47b0      	blx	r6
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	d0e6      	beq.n	8008bb8 <_printf_common+0xa8>
 8008bea:	3701      	adds	r7, #1
 8008bec:	e7d1      	b.n	8008b92 <_printf_common+0x82>
	...

08008bf0 <_printf_i>:
 8008bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bf2:	b08b      	sub	sp, #44	; 0x2c
 8008bf4:	9206      	str	r2, [sp, #24]
 8008bf6:	000a      	movs	r2, r1
 8008bf8:	3243      	adds	r2, #67	; 0x43
 8008bfa:	9307      	str	r3, [sp, #28]
 8008bfc:	9005      	str	r0, [sp, #20]
 8008bfe:	9204      	str	r2, [sp, #16]
 8008c00:	7e0a      	ldrb	r2, [r1, #24]
 8008c02:	000c      	movs	r4, r1
 8008c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c06:	2a78      	cmp	r2, #120	; 0x78
 8008c08:	d807      	bhi.n	8008c1a <_printf_i+0x2a>
 8008c0a:	2a62      	cmp	r2, #98	; 0x62
 8008c0c:	d809      	bhi.n	8008c22 <_printf_i+0x32>
 8008c0e:	2a00      	cmp	r2, #0
 8008c10:	d100      	bne.n	8008c14 <_printf_i+0x24>
 8008c12:	e0c1      	b.n	8008d98 <_printf_i+0x1a8>
 8008c14:	2a58      	cmp	r2, #88	; 0x58
 8008c16:	d100      	bne.n	8008c1a <_printf_i+0x2a>
 8008c18:	e08c      	b.n	8008d34 <_printf_i+0x144>
 8008c1a:	0026      	movs	r6, r4
 8008c1c:	3642      	adds	r6, #66	; 0x42
 8008c1e:	7032      	strb	r2, [r6, #0]
 8008c20:	e022      	b.n	8008c68 <_printf_i+0x78>
 8008c22:	0010      	movs	r0, r2
 8008c24:	3863      	subs	r0, #99	; 0x63
 8008c26:	2815      	cmp	r0, #21
 8008c28:	d8f7      	bhi.n	8008c1a <_printf_i+0x2a>
 8008c2a:	f7f7 fa7f 	bl	800012c <__gnu_thumb1_case_shi>
 8008c2e:	0016      	.short	0x0016
 8008c30:	fff6001f 	.word	0xfff6001f
 8008c34:	fff6fff6 	.word	0xfff6fff6
 8008c38:	001ffff6 	.word	0x001ffff6
 8008c3c:	fff6fff6 	.word	0xfff6fff6
 8008c40:	fff6fff6 	.word	0xfff6fff6
 8008c44:	003600a8 	.word	0x003600a8
 8008c48:	fff6009a 	.word	0xfff6009a
 8008c4c:	00b9fff6 	.word	0x00b9fff6
 8008c50:	0036fff6 	.word	0x0036fff6
 8008c54:	fff6fff6 	.word	0xfff6fff6
 8008c58:	009e      	.short	0x009e
 8008c5a:	0026      	movs	r6, r4
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	3642      	adds	r6, #66	; 0x42
 8008c60:	1d11      	adds	r1, r2, #4
 8008c62:	6019      	str	r1, [r3, #0]
 8008c64:	6813      	ldr	r3, [r2, #0]
 8008c66:	7033      	strb	r3, [r6, #0]
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e0a7      	b.n	8008dbc <_printf_i+0x1cc>
 8008c6c:	6808      	ldr	r0, [r1, #0]
 8008c6e:	6819      	ldr	r1, [r3, #0]
 8008c70:	1d0a      	adds	r2, r1, #4
 8008c72:	0605      	lsls	r5, r0, #24
 8008c74:	d50b      	bpl.n	8008c8e <_printf_i+0x9e>
 8008c76:	680d      	ldr	r5, [r1, #0]
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	2d00      	cmp	r5, #0
 8008c7c:	da03      	bge.n	8008c86 <_printf_i+0x96>
 8008c7e:	232d      	movs	r3, #45	; 0x2d
 8008c80:	9a04      	ldr	r2, [sp, #16]
 8008c82:	426d      	negs	r5, r5
 8008c84:	7013      	strb	r3, [r2, #0]
 8008c86:	4b61      	ldr	r3, [pc, #388]	; (8008e0c <_printf_i+0x21c>)
 8008c88:	270a      	movs	r7, #10
 8008c8a:	9303      	str	r3, [sp, #12]
 8008c8c:	e01b      	b.n	8008cc6 <_printf_i+0xd6>
 8008c8e:	680d      	ldr	r5, [r1, #0]
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	0641      	lsls	r1, r0, #25
 8008c94:	d5f1      	bpl.n	8008c7a <_printf_i+0x8a>
 8008c96:	b22d      	sxth	r5, r5
 8008c98:	e7ef      	b.n	8008c7a <_printf_i+0x8a>
 8008c9a:	680d      	ldr	r5, [r1, #0]
 8008c9c:	6819      	ldr	r1, [r3, #0]
 8008c9e:	1d08      	adds	r0, r1, #4
 8008ca0:	6018      	str	r0, [r3, #0]
 8008ca2:	062e      	lsls	r6, r5, #24
 8008ca4:	d501      	bpl.n	8008caa <_printf_i+0xba>
 8008ca6:	680d      	ldr	r5, [r1, #0]
 8008ca8:	e003      	b.n	8008cb2 <_printf_i+0xc2>
 8008caa:	066d      	lsls	r5, r5, #25
 8008cac:	d5fb      	bpl.n	8008ca6 <_printf_i+0xb6>
 8008cae:	680d      	ldr	r5, [r1, #0]
 8008cb0:	b2ad      	uxth	r5, r5
 8008cb2:	4b56      	ldr	r3, [pc, #344]	; (8008e0c <_printf_i+0x21c>)
 8008cb4:	2708      	movs	r7, #8
 8008cb6:	9303      	str	r3, [sp, #12]
 8008cb8:	2a6f      	cmp	r2, #111	; 0x6f
 8008cba:	d000      	beq.n	8008cbe <_printf_i+0xce>
 8008cbc:	3702      	adds	r7, #2
 8008cbe:	0023      	movs	r3, r4
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	3343      	adds	r3, #67	; 0x43
 8008cc4:	701a      	strb	r2, [r3, #0]
 8008cc6:	6863      	ldr	r3, [r4, #4]
 8008cc8:	60a3      	str	r3, [r4, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	db03      	blt.n	8008cd6 <_printf_i+0xe6>
 8008cce:	2204      	movs	r2, #4
 8008cd0:	6821      	ldr	r1, [r4, #0]
 8008cd2:	4391      	bics	r1, r2
 8008cd4:	6021      	str	r1, [r4, #0]
 8008cd6:	2d00      	cmp	r5, #0
 8008cd8:	d102      	bne.n	8008ce0 <_printf_i+0xf0>
 8008cda:	9e04      	ldr	r6, [sp, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00c      	beq.n	8008cfa <_printf_i+0x10a>
 8008ce0:	9e04      	ldr	r6, [sp, #16]
 8008ce2:	0028      	movs	r0, r5
 8008ce4:	0039      	movs	r1, r7
 8008ce6:	f7f7 fab1 	bl	800024c <__aeabi_uidivmod>
 8008cea:	9b03      	ldr	r3, [sp, #12]
 8008cec:	3e01      	subs	r6, #1
 8008cee:	5c5b      	ldrb	r3, [r3, r1]
 8008cf0:	7033      	strb	r3, [r6, #0]
 8008cf2:	002b      	movs	r3, r5
 8008cf4:	0005      	movs	r5, r0
 8008cf6:	429f      	cmp	r7, r3
 8008cf8:	d9f3      	bls.n	8008ce2 <_printf_i+0xf2>
 8008cfa:	2f08      	cmp	r7, #8
 8008cfc:	d109      	bne.n	8008d12 <_printf_i+0x122>
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	07db      	lsls	r3, r3, #31
 8008d02:	d506      	bpl.n	8008d12 <_printf_i+0x122>
 8008d04:	6863      	ldr	r3, [r4, #4]
 8008d06:	6922      	ldr	r2, [r4, #16]
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	dc02      	bgt.n	8008d12 <_printf_i+0x122>
 8008d0c:	2330      	movs	r3, #48	; 0x30
 8008d0e:	3e01      	subs	r6, #1
 8008d10:	7033      	strb	r3, [r6, #0]
 8008d12:	9b04      	ldr	r3, [sp, #16]
 8008d14:	1b9b      	subs	r3, r3, r6
 8008d16:	6123      	str	r3, [r4, #16]
 8008d18:	9b07      	ldr	r3, [sp, #28]
 8008d1a:	0021      	movs	r1, r4
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	9805      	ldr	r0, [sp, #20]
 8008d20:	9b06      	ldr	r3, [sp, #24]
 8008d22:	aa09      	add	r2, sp, #36	; 0x24
 8008d24:	f7ff fef4 	bl	8008b10 <_printf_common>
 8008d28:	1c43      	adds	r3, r0, #1
 8008d2a:	d14c      	bne.n	8008dc6 <_printf_i+0x1d6>
 8008d2c:	2001      	movs	r0, #1
 8008d2e:	4240      	negs	r0, r0
 8008d30:	b00b      	add	sp, #44	; 0x2c
 8008d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d34:	3145      	adds	r1, #69	; 0x45
 8008d36:	700a      	strb	r2, [r1, #0]
 8008d38:	4a34      	ldr	r2, [pc, #208]	; (8008e0c <_printf_i+0x21c>)
 8008d3a:	9203      	str	r2, [sp, #12]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	6821      	ldr	r1, [r4, #0]
 8008d40:	ca20      	ldmia	r2!, {r5}
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	0608      	lsls	r0, r1, #24
 8008d46:	d516      	bpl.n	8008d76 <_printf_i+0x186>
 8008d48:	07cb      	lsls	r3, r1, #31
 8008d4a:	d502      	bpl.n	8008d52 <_printf_i+0x162>
 8008d4c:	2320      	movs	r3, #32
 8008d4e:	4319      	orrs	r1, r3
 8008d50:	6021      	str	r1, [r4, #0]
 8008d52:	2710      	movs	r7, #16
 8008d54:	2d00      	cmp	r5, #0
 8008d56:	d1b2      	bne.n	8008cbe <_printf_i+0xce>
 8008d58:	2320      	movs	r3, #32
 8008d5a:	6822      	ldr	r2, [r4, #0]
 8008d5c:	439a      	bics	r2, r3
 8008d5e:	6022      	str	r2, [r4, #0]
 8008d60:	e7ad      	b.n	8008cbe <_printf_i+0xce>
 8008d62:	2220      	movs	r2, #32
 8008d64:	6809      	ldr	r1, [r1, #0]
 8008d66:	430a      	orrs	r2, r1
 8008d68:	6022      	str	r2, [r4, #0]
 8008d6a:	0022      	movs	r2, r4
 8008d6c:	2178      	movs	r1, #120	; 0x78
 8008d6e:	3245      	adds	r2, #69	; 0x45
 8008d70:	7011      	strb	r1, [r2, #0]
 8008d72:	4a27      	ldr	r2, [pc, #156]	; (8008e10 <_printf_i+0x220>)
 8008d74:	e7e1      	b.n	8008d3a <_printf_i+0x14a>
 8008d76:	0648      	lsls	r0, r1, #25
 8008d78:	d5e6      	bpl.n	8008d48 <_printf_i+0x158>
 8008d7a:	b2ad      	uxth	r5, r5
 8008d7c:	e7e4      	b.n	8008d48 <_printf_i+0x158>
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	680d      	ldr	r5, [r1, #0]
 8008d82:	1d10      	adds	r0, r2, #4
 8008d84:	6949      	ldr	r1, [r1, #20]
 8008d86:	6018      	str	r0, [r3, #0]
 8008d88:	6813      	ldr	r3, [r2, #0]
 8008d8a:	062e      	lsls	r6, r5, #24
 8008d8c:	d501      	bpl.n	8008d92 <_printf_i+0x1a2>
 8008d8e:	6019      	str	r1, [r3, #0]
 8008d90:	e002      	b.n	8008d98 <_printf_i+0x1a8>
 8008d92:	066d      	lsls	r5, r5, #25
 8008d94:	d5fb      	bpl.n	8008d8e <_printf_i+0x19e>
 8008d96:	8019      	strh	r1, [r3, #0]
 8008d98:	2300      	movs	r3, #0
 8008d9a:	9e04      	ldr	r6, [sp, #16]
 8008d9c:	6123      	str	r3, [r4, #16]
 8008d9e:	e7bb      	b.n	8008d18 <_printf_i+0x128>
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	1d11      	adds	r1, r2, #4
 8008da4:	6019      	str	r1, [r3, #0]
 8008da6:	6816      	ldr	r6, [r2, #0]
 8008da8:	2100      	movs	r1, #0
 8008daa:	0030      	movs	r0, r6
 8008dac:	6862      	ldr	r2, [r4, #4]
 8008dae:	f000 ff05 	bl	8009bbc <memchr>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	d001      	beq.n	8008dba <_printf_i+0x1ca>
 8008db6:	1b80      	subs	r0, r0, r6
 8008db8:	6060      	str	r0, [r4, #4]
 8008dba:	6863      	ldr	r3, [r4, #4]
 8008dbc:	6123      	str	r3, [r4, #16]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	9a04      	ldr	r2, [sp, #16]
 8008dc2:	7013      	strb	r3, [r2, #0]
 8008dc4:	e7a8      	b.n	8008d18 <_printf_i+0x128>
 8008dc6:	6923      	ldr	r3, [r4, #16]
 8008dc8:	0032      	movs	r2, r6
 8008dca:	9906      	ldr	r1, [sp, #24]
 8008dcc:	9805      	ldr	r0, [sp, #20]
 8008dce:	9d07      	ldr	r5, [sp, #28]
 8008dd0:	47a8      	blx	r5
 8008dd2:	1c43      	adds	r3, r0, #1
 8008dd4:	d0aa      	beq.n	8008d2c <_printf_i+0x13c>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	079b      	lsls	r3, r3, #30
 8008dda:	d415      	bmi.n	8008e08 <_printf_i+0x218>
 8008ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dde:	68e0      	ldr	r0, [r4, #12]
 8008de0:	4298      	cmp	r0, r3
 8008de2:	daa5      	bge.n	8008d30 <_printf_i+0x140>
 8008de4:	0018      	movs	r0, r3
 8008de6:	e7a3      	b.n	8008d30 <_printf_i+0x140>
 8008de8:	0022      	movs	r2, r4
 8008dea:	2301      	movs	r3, #1
 8008dec:	9906      	ldr	r1, [sp, #24]
 8008dee:	9805      	ldr	r0, [sp, #20]
 8008df0:	9e07      	ldr	r6, [sp, #28]
 8008df2:	3219      	adds	r2, #25
 8008df4:	47b0      	blx	r6
 8008df6:	1c43      	adds	r3, r0, #1
 8008df8:	d098      	beq.n	8008d2c <_printf_i+0x13c>
 8008dfa:	3501      	adds	r5, #1
 8008dfc:	68e3      	ldr	r3, [r4, #12]
 8008dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e00:	1a9b      	subs	r3, r3, r2
 8008e02:	42ab      	cmp	r3, r5
 8008e04:	dcf0      	bgt.n	8008de8 <_printf_i+0x1f8>
 8008e06:	e7e9      	b.n	8008ddc <_printf_i+0x1ec>
 8008e08:	2500      	movs	r5, #0
 8008e0a:	e7f7      	b.n	8008dfc <_printf_i+0x20c>
 8008e0c:	0800c4d2 	.word	0x0800c4d2
 8008e10:	0800c4e3 	.word	0x0800c4e3

08008e14 <siprintf>:
 8008e14:	b40e      	push	{r1, r2, r3}
 8008e16:	b500      	push	{lr}
 8008e18:	490b      	ldr	r1, [pc, #44]	; (8008e48 <siprintf+0x34>)
 8008e1a:	b09c      	sub	sp, #112	; 0x70
 8008e1c:	ab1d      	add	r3, sp, #116	; 0x74
 8008e1e:	9002      	str	r0, [sp, #8]
 8008e20:	9006      	str	r0, [sp, #24]
 8008e22:	9107      	str	r1, [sp, #28]
 8008e24:	9104      	str	r1, [sp, #16]
 8008e26:	4809      	ldr	r0, [pc, #36]	; (8008e4c <siprintf+0x38>)
 8008e28:	4909      	ldr	r1, [pc, #36]	; (8008e50 <siprintf+0x3c>)
 8008e2a:	cb04      	ldmia	r3!, {r2}
 8008e2c:	9105      	str	r1, [sp, #20]
 8008e2e:	6800      	ldr	r0, [r0, #0]
 8008e30:	a902      	add	r1, sp, #8
 8008e32:	9301      	str	r3, [sp, #4]
 8008e34:	f001 fbe2 	bl	800a5fc <_svfiprintf_r>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	9a02      	ldr	r2, [sp, #8]
 8008e3c:	7013      	strb	r3, [r2, #0]
 8008e3e:	b01c      	add	sp, #112	; 0x70
 8008e40:	bc08      	pop	{r3}
 8008e42:	b003      	add	sp, #12
 8008e44:	4718      	bx	r3
 8008e46:	46c0      	nop			; (mov r8, r8)
 8008e48:	7fffffff 	.word	0x7fffffff
 8008e4c:	2000000c 	.word	0x2000000c
 8008e50:	ffff0208 	.word	0xffff0208

08008e54 <quorem>:
 8008e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e56:	0006      	movs	r6, r0
 8008e58:	690b      	ldr	r3, [r1, #16]
 8008e5a:	6932      	ldr	r2, [r6, #16]
 8008e5c:	b087      	sub	sp, #28
 8008e5e:	2000      	movs	r0, #0
 8008e60:	9103      	str	r1, [sp, #12]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	db65      	blt.n	8008f32 <quorem+0xde>
 8008e66:	3b01      	subs	r3, #1
 8008e68:	009c      	lsls	r4, r3, #2
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	000b      	movs	r3, r1
 8008e6e:	3314      	adds	r3, #20
 8008e70:	9305      	str	r3, [sp, #20]
 8008e72:	191b      	adds	r3, r3, r4
 8008e74:	9304      	str	r3, [sp, #16]
 8008e76:	0033      	movs	r3, r6
 8008e78:	3314      	adds	r3, #20
 8008e7a:	9302      	str	r3, [sp, #8]
 8008e7c:	191c      	adds	r4, r3, r4
 8008e7e:	9b04      	ldr	r3, [sp, #16]
 8008e80:	6827      	ldr	r7, [r4, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	0038      	movs	r0, r7
 8008e86:	1c5d      	adds	r5, r3, #1
 8008e88:	0029      	movs	r1, r5
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	f7f7 f958 	bl	8000140 <__udivsi3>
 8008e90:	9001      	str	r0, [sp, #4]
 8008e92:	42af      	cmp	r7, r5
 8008e94:	d324      	bcc.n	8008ee0 <quorem+0x8c>
 8008e96:	2500      	movs	r5, #0
 8008e98:	46ac      	mov	ip, r5
 8008e9a:	9802      	ldr	r0, [sp, #8]
 8008e9c:	9f05      	ldr	r7, [sp, #20]
 8008e9e:	cf08      	ldmia	r7!, {r3}
 8008ea0:	9a01      	ldr	r2, [sp, #4]
 8008ea2:	b299      	uxth	r1, r3
 8008ea4:	4351      	muls	r1, r2
 8008ea6:	0c1b      	lsrs	r3, r3, #16
 8008ea8:	4353      	muls	r3, r2
 8008eaa:	1949      	adds	r1, r1, r5
 8008eac:	0c0a      	lsrs	r2, r1, #16
 8008eae:	189b      	adds	r3, r3, r2
 8008eb0:	6802      	ldr	r2, [r0, #0]
 8008eb2:	b289      	uxth	r1, r1
 8008eb4:	b292      	uxth	r2, r2
 8008eb6:	4462      	add	r2, ip
 8008eb8:	1a52      	subs	r2, r2, r1
 8008eba:	6801      	ldr	r1, [r0, #0]
 8008ebc:	0c1d      	lsrs	r5, r3, #16
 8008ebe:	0c09      	lsrs	r1, r1, #16
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	1acb      	subs	r3, r1, r3
 8008ec4:	1411      	asrs	r1, r2, #16
 8008ec6:	185b      	adds	r3, r3, r1
 8008ec8:	1419      	asrs	r1, r3, #16
 8008eca:	b292      	uxth	r2, r2
 8008ecc:	041b      	lsls	r3, r3, #16
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	9b04      	ldr	r3, [sp, #16]
 8008ed2:	468c      	mov	ip, r1
 8008ed4:	c004      	stmia	r0!, {r2}
 8008ed6:	42bb      	cmp	r3, r7
 8008ed8:	d2e1      	bcs.n	8008e9e <quorem+0x4a>
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d030      	beq.n	8008f42 <quorem+0xee>
 8008ee0:	0030      	movs	r0, r6
 8008ee2:	9903      	ldr	r1, [sp, #12]
 8008ee4:	f001 f902 	bl	800a0ec <__mcmp>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	db21      	blt.n	8008f30 <quorem+0xdc>
 8008eec:	0030      	movs	r0, r6
 8008eee:	2400      	movs	r4, #0
 8008ef0:	9b01      	ldr	r3, [sp, #4]
 8008ef2:	9903      	ldr	r1, [sp, #12]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	9301      	str	r3, [sp, #4]
 8008ef8:	3014      	adds	r0, #20
 8008efa:	3114      	adds	r1, #20
 8008efc:	6803      	ldr	r3, [r0, #0]
 8008efe:	c920      	ldmia	r1!, {r5}
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	1914      	adds	r4, r2, r4
 8008f04:	b2aa      	uxth	r2, r5
 8008f06:	1aa2      	subs	r2, r4, r2
 8008f08:	0c1b      	lsrs	r3, r3, #16
 8008f0a:	0c2d      	lsrs	r5, r5, #16
 8008f0c:	1414      	asrs	r4, r2, #16
 8008f0e:	1b5b      	subs	r3, r3, r5
 8008f10:	191b      	adds	r3, r3, r4
 8008f12:	141c      	asrs	r4, r3, #16
 8008f14:	b292      	uxth	r2, r2
 8008f16:	041b      	lsls	r3, r3, #16
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	c008      	stmia	r0!, {r3}
 8008f1c:	9b04      	ldr	r3, [sp, #16]
 8008f1e:	428b      	cmp	r3, r1
 8008f20:	d2ec      	bcs.n	8008efc <quorem+0xa8>
 8008f22:	9b00      	ldr	r3, [sp, #0]
 8008f24:	9a02      	ldr	r2, [sp, #8]
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	18d3      	adds	r3, r2, r3
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	2a00      	cmp	r2, #0
 8008f2e:	d015      	beq.n	8008f5c <quorem+0x108>
 8008f30:	9801      	ldr	r0, [sp, #4]
 8008f32:	b007      	add	sp, #28
 8008f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d106      	bne.n	8008f4a <quorem+0xf6>
 8008f3c:	9b00      	ldr	r3, [sp, #0]
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	9b02      	ldr	r3, [sp, #8]
 8008f44:	3c04      	subs	r4, #4
 8008f46:	42a3      	cmp	r3, r4
 8008f48:	d3f5      	bcc.n	8008f36 <quorem+0xe2>
 8008f4a:	9b00      	ldr	r3, [sp, #0]
 8008f4c:	6133      	str	r3, [r6, #16]
 8008f4e:	e7c7      	b.n	8008ee0 <quorem+0x8c>
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	2a00      	cmp	r2, #0
 8008f54:	d106      	bne.n	8008f64 <quorem+0x110>
 8008f56:	9a00      	ldr	r2, [sp, #0]
 8008f58:	3a01      	subs	r2, #1
 8008f5a:	9200      	str	r2, [sp, #0]
 8008f5c:	9a02      	ldr	r2, [sp, #8]
 8008f5e:	3b04      	subs	r3, #4
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d3f5      	bcc.n	8008f50 <quorem+0xfc>
 8008f64:	9b00      	ldr	r3, [sp, #0]
 8008f66:	6133      	str	r3, [r6, #16]
 8008f68:	e7e2      	b.n	8008f30 <quorem+0xdc>
	...

08008f6c <_dtoa_r>:
 8008f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f6e:	b09d      	sub	sp, #116	; 0x74
 8008f70:	9202      	str	r2, [sp, #8]
 8008f72:	9303      	str	r3, [sp, #12]
 8008f74:	9b02      	ldr	r3, [sp, #8]
 8008f76:	9c03      	ldr	r4, [sp, #12]
 8008f78:	9308      	str	r3, [sp, #32]
 8008f7a:	9409      	str	r4, [sp, #36]	; 0x24
 8008f7c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008f7e:	0007      	movs	r7, r0
 8008f80:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008f82:	2c00      	cmp	r4, #0
 8008f84:	d10e      	bne.n	8008fa4 <_dtoa_r+0x38>
 8008f86:	2010      	movs	r0, #16
 8008f88:	f000 fe0e 	bl	8009ba8 <malloc>
 8008f8c:	1e02      	subs	r2, r0, #0
 8008f8e:	6278      	str	r0, [r7, #36]	; 0x24
 8008f90:	d104      	bne.n	8008f9c <_dtoa_r+0x30>
 8008f92:	21ea      	movs	r1, #234	; 0xea
 8008f94:	4bc7      	ldr	r3, [pc, #796]	; (80092b4 <_dtoa_r+0x348>)
 8008f96:	48c8      	ldr	r0, [pc, #800]	; (80092b8 <_dtoa_r+0x34c>)
 8008f98:	f001 fc42 	bl	800a820 <__assert_func>
 8008f9c:	6044      	str	r4, [r0, #4]
 8008f9e:	6084      	str	r4, [r0, #8]
 8008fa0:	6004      	str	r4, [r0, #0]
 8008fa2:	60c4      	str	r4, [r0, #12]
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	6819      	ldr	r1, [r3, #0]
 8008fa8:	2900      	cmp	r1, #0
 8008faa:	d00a      	beq.n	8008fc2 <_dtoa_r+0x56>
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	2301      	movs	r3, #1
 8008fb0:	4093      	lsls	r3, r2
 8008fb2:	604a      	str	r2, [r1, #4]
 8008fb4:	608b      	str	r3, [r1, #8]
 8008fb6:	0038      	movs	r0, r7
 8008fb8:	f000 fe58 	bl	8009c6c <_Bfree>
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	601a      	str	r2, [r3, #0]
 8008fc2:	9b03      	ldr	r3, [sp, #12]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	da20      	bge.n	800900a <_dtoa_r+0x9e>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	602b      	str	r3, [r5, #0]
 8008fcc:	9b03      	ldr	r3, [sp, #12]
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	085b      	lsrs	r3, r3, #1
 8008fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008fd6:	4bb9      	ldr	r3, [pc, #740]	; (80092bc <_dtoa_r+0x350>)
 8008fd8:	4ab8      	ldr	r2, [pc, #736]	; (80092bc <_dtoa_r+0x350>)
 8008fda:	402b      	ands	r3, r5
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d117      	bne.n	8009010 <_dtoa_r+0xa4>
 8008fe0:	4bb7      	ldr	r3, [pc, #732]	; (80092c0 <_dtoa_r+0x354>)
 8008fe2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008fe4:	0328      	lsls	r0, r5, #12
 8008fe6:	6013      	str	r3, [r2, #0]
 8008fe8:	9b02      	ldr	r3, [sp, #8]
 8008fea:	0b00      	lsrs	r0, r0, #12
 8008fec:	4318      	orrs	r0, r3
 8008fee:	d101      	bne.n	8008ff4 <_dtoa_r+0x88>
 8008ff0:	f000 fdbf 	bl	8009b72 <_dtoa_r+0xc06>
 8008ff4:	48b3      	ldr	r0, [pc, #716]	; (80092c4 <_dtoa_r+0x358>)
 8008ff6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ff8:	9006      	str	r0, [sp, #24]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d002      	beq.n	8009004 <_dtoa_r+0x98>
 8008ffe:	4bb2      	ldr	r3, [pc, #712]	; (80092c8 <_dtoa_r+0x35c>)
 8009000:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009002:	6013      	str	r3, [r2, #0]
 8009004:	9806      	ldr	r0, [sp, #24]
 8009006:	b01d      	add	sp, #116	; 0x74
 8009008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800900a:	2300      	movs	r3, #0
 800900c:	602b      	str	r3, [r5, #0]
 800900e:	e7e1      	b.n	8008fd4 <_dtoa_r+0x68>
 8009010:	9b08      	ldr	r3, [sp, #32]
 8009012:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009014:	9312      	str	r3, [sp, #72]	; 0x48
 8009016:	9413      	str	r4, [sp, #76]	; 0x4c
 8009018:	9812      	ldr	r0, [sp, #72]	; 0x48
 800901a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800901c:	2200      	movs	r2, #0
 800901e:	2300      	movs	r3, #0
 8009020:	f7f7 fa14 	bl	800044c <__aeabi_dcmpeq>
 8009024:	1e04      	subs	r4, r0, #0
 8009026:	d009      	beq.n	800903c <_dtoa_r+0xd0>
 8009028:	2301      	movs	r3, #1
 800902a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800902c:	6013      	str	r3, [r2, #0]
 800902e:	4ba7      	ldr	r3, [pc, #668]	; (80092cc <_dtoa_r+0x360>)
 8009030:	9306      	str	r3, [sp, #24]
 8009032:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009034:	2b00      	cmp	r3, #0
 8009036:	d0e5      	beq.n	8009004 <_dtoa_r+0x98>
 8009038:	4ba5      	ldr	r3, [pc, #660]	; (80092d0 <_dtoa_r+0x364>)
 800903a:	e7e1      	b.n	8009000 <_dtoa_r+0x94>
 800903c:	ab1a      	add	r3, sp, #104	; 0x68
 800903e:	9301      	str	r3, [sp, #4]
 8009040:	ab1b      	add	r3, sp, #108	; 0x6c
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	0038      	movs	r0, r7
 8009046:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009048:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800904a:	f001 f903 	bl	800a254 <__d2b>
 800904e:	006e      	lsls	r6, r5, #1
 8009050:	9005      	str	r0, [sp, #20]
 8009052:	0d76      	lsrs	r6, r6, #21
 8009054:	d100      	bne.n	8009058 <_dtoa_r+0xec>
 8009056:	e07c      	b.n	8009152 <_dtoa_r+0x1e6>
 8009058:	9812      	ldr	r0, [sp, #72]	; 0x48
 800905a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800905c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800905e:	4a9d      	ldr	r2, [pc, #628]	; (80092d4 <_dtoa_r+0x368>)
 8009060:	031b      	lsls	r3, r3, #12
 8009062:	0b1b      	lsrs	r3, r3, #12
 8009064:	431a      	orrs	r2, r3
 8009066:	0011      	movs	r1, r2
 8009068:	4b9b      	ldr	r3, [pc, #620]	; (80092d8 <_dtoa_r+0x36c>)
 800906a:	9418      	str	r4, [sp, #96]	; 0x60
 800906c:	18f6      	adds	r6, r6, r3
 800906e:	2200      	movs	r2, #0
 8009070:	4b9a      	ldr	r3, [pc, #616]	; (80092dc <_dtoa_r+0x370>)
 8009072:	f7f9 f967 	bl	8002344 <__aeabi_dsub>
 8009076:	4a9a      	ldr	r2, [pc, #616]	; (80092e0 <_dtoa_r+0x374>)
 8009078:	4b9a      	ldr	r3, [pc, #616]	; (80092e4 <_dtoa_r+0x378>)
 800907a:	f7f8 fef7 	bl	8001e6c <__aeabi_dmul>
 800907e:	4a9a      	ldr	r2, [pc, #616]	; (80092e8 <_dtoa_r+0x37c>)
 8009080:	4b9a      	ldr	r3, [pc, #616]	; (80092ec <_dtoa_r+0x380>)
 8009082:	f7f7 ffb5 	bl	8000ff0 <__aeabi_dadd>
 8009086:	0004      	movs	r4, r0
 8009088:	0030      	movs	r0, r6
 800908a:	000d      	movs	r5, r1
 800908c:	f7f9 fd40 	bl	8002b10 <__aeabi_i2d>
 8009090:	4a97      	ldr	r2, [pc, #604]	; (80092f0 <_dtoa_r+0x384>)
 8009092:	4b98      	ldr	r3, [pc, #608]	; (80092f4 <_dtoa_r+0x388>)
 8009094:	f7f8 feea 	bl	8001e6c <__aeabi_dmul>
 8009098:	0002      	movs	r2, r0
 800909a:	000b      	movs	r3, r1
 800909c:	0020      	movs	r0, r4
 800909e:	0029      	movs	r1, r5
 80090a0:	f7f7 ffa6 	bl	8000ff0 <__aeabi_dadd>
 80090a4:	0004      	movs	r4, r0
 80090a6:	000d      	movs	r5, r1
 80090a8:	f7f9 fcfc 	bl	8002aa4 <__aeabi_d2iz>
 80090ac:	2200      	movs	r2, #0
 80090ae:	9002      	str	r0, [sp, #8]
 80090b0:	2300      	movs	r3, #0
 80090b2:	0020      	movs	r0, r4
 80090b4:	0029      	movs	r1, r5
 80090b6:	f7f7 f9cf 	bl	8000458 <__aeabi_dcmplt>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d00b      	beq.n	80090d6 <_dtoa_r+0x16a>
 80090be:	9802      	ldr	r0, [sp, #8]
 80090c0:	f7f9 fd26 	bl	8002b10 <__aeabi_i2d>
 80090c4:	002b      	movs	r3, r5
 80090c6:	0022      	movs	r2, r4
 80090c8:	f7f7 f9c0 	bl	800044c <__aeabi_dcmpeq>
 80090cc:	4243      	negs	r3, r0
 80090ce:	4158      	adcs	r0, r3
 80090d0:	9b02      	ldr	r3, [sp, #8]
 80090d2:	1a1b      	subs	r3, r3, r0
 80090d4:	9302      	str	r3, [sp, #8]
 80090d6:	2301      	movs	r3, #1
 80090d8:	9316      	str	r3, [sp, #88]	; 0x58
 80090da:	9b02      	ldr	r3, [sp, #8]
 80090dc:	2b16      	cmp	r3, #22
 80090de:	d80f      	bhi.n	8009100 <_dtoa_r+0x194>
 80090e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80090e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80090e4:	00da      	lsls	r2, r3, #3
 80090e6:	4b84      	ldr	r3, [pc, #528]	; (80092f8 <_dtoa_r+0x38c>)
 80090e8:	189b      	adds	r3, r3, r2
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	f7f7 f9b3 	bl	8000458 <__aeabi_dcmplt>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d049      	beq.n	800918a <_dtoa_r+0x21e>
 80090f6:	9b02      	ldr	r3, [sp, #8]
 80090f8:	3b01      	subs	r3, #1
 80090fa:	9302      	str	r3, [sp, #8]
 80090fc:	2300      	movs	r3, #0
 80090fe:	9316      	str	r3, [sp, #88]	; 0x58
 8009100:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009102:	1b9e      	subs	r6, r3, r6
 8009104:	2300      	movs	r3, #0
 8009106:	930a      	str	r3, [sp, #40]	; 0x28
 8009108:	0033      	movs	r3, r6
 800910a:	3b01      	subs	r3, #1
 800910c:	930d      	str	r3, [sp, #52]	; 0x34
 800910e:	d504      	bpl.n	800911a <_dtoa_r+0x1ae>
 8009110:	2301      	movs	r3, #1
 8009112:	1b9b      	subs	r3, r3, r6
 8009114:	930a      	str	r3, [sp, #40]	; 0x28
 8009116:	2300      	movs	r3, #0
 8009118:	930d      	str	r3, [sp, #52]	; 0x34
 800911a:	9b02      	ldr	r3, [sp, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	db36      	blt.n	800918e <_dtoa_r+0x222>
 8009120:	9a02      	ldr	r2, [sp, #8]
 8009122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009124:	4694      	mov	ip, r2
 8009126:	4463      	add	r3, ip
 8009128:	930d      	str	r3, [sp, #52]	; 0x34
 800912a:	2300      	movs	r3, #0
 800912c:	9215      	str	r2, [sp, #84]	; 0x54
 800912e:	930e      	str	r3, [sp, #56]	; 0x38
 8009130:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009132:	2401      	movs	r4, #1
 8009134:	2b09      	cmp	r3, #9
 8009136:	d864      	bhi.n	8009202 <_dtoa_r+0x296>
 8009138:	2b05      	cmp	r3, #5
 800913a:	dd02      	ble.n	8009142 <_dtoa_r+0x1d6>
 800913c:	2400      	movs	r4, #0
 800913e:	3b04      	subs	r3, #4
 8009140:	9322      	str	r3, [sp, #136]	; 0x88
 8009142:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009144:	1e98      	subs	r0, r3, #2
 8009146:	2803      	cmp	r0, #3
 8009148:	d864      	bhi.n	8009214 <_dtoa_r+0x2a8>
 800914a:	f7f6 ffe5 	bl	8000118 <__gnu_thumb1_case_uqi>
 800914e:	3829      	.short	0x3829
 8009150:	5836      	.short	0x5836
 8009152:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009154:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009156:	189e      	adds	r6, r3, r2
 8009158:	4b68      	ldr	r3, [pc, #416]	; (80092fc <_dtoa_r+0x390>)
 800915a:	18f2      	adds	r2, r6, r3
 800915c:	2a20      	cmp	r2, #32
 800915e:	dd0f      	ble.n	8009180 <_dtoa_r+0x214>
 8009160:	2340      	movs	r3, #64	; 0x40
 8009162:	1a9b      	subs	r3, r3, r2
 8009164:	409d      	lsls	r5, r3
 8009166:	4b66      	ldr	r3, [pc, #408]	; (8009300 <_dtoa_r+0x394>)
 8009168:	9802      	ldr	r0, [sp, #8]
 800916a:	18f3      	adds	r3, r6, r3
 800916c:	40d8      	lsrs	r0, r3
 800916e:	4328      	orrs	r0, r5
 8009170:	f7f9 fcfe 	bl	8002b70 <__aeabi_ui2d>
 8009174:	2301      	movs	r3, #1
 8009176:	4c63      	ldr	r4, [pc, #396]	; (8009304 <_dtoa_r+0x398>)
 8009178:	3e01      	subs	r6, #1
 800917a:	1909      	adds	r1, r1, r4
 800917c:	9318      	str	r3, [sp, #96]	; 0x60
 800917e:	e776      	b.n	800906e <_dtoa_r+0x102>
 8009180:	2320      	movs	r3, #32
 8009182:	9802      	ldr	r0, [sp, #8]
 8009184:	1a9b      	subs	r3, r3, r2
 8009186:	4098      	lsls	r0, r3
 8009188:	e7f2      	b.n	8009170 <_dtoa_r+0x204>
 800918a:	9016      	str	r0, [sp, #88]	; 0x58
 800918c:	e7b8      	b.n	8009100 <_dtoa_r+0x194>
 800918e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009190:	9a02      	ldr	r2, [sp, #8]
 8009192:	1a9b      	subs	r3, r3, r2
 8009194:	930a      	str	r3, [sp, #40]	; 0x28
 8009196:	4253      	negs	r3, r2
 8009198:	930e      	str	r3, [sp, #56]	; 0x38
 800919a:	2300      	movs	r3, #0
 800919c:	9315      	str	r3, [sp, #84]	; 0x54
 800919e:	e7c7      	b.n	8009130 <_dtoa_r+0x1c4>
 80091a0:	2300      	movs	r3, #0
 80091a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80091a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091a6:	930c      	str	r3, [sp, #48]	; 0x30
 80091a8:	9307      	str	r3, [sp, #28]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	dc13      	bgt.n	80091d6 <_dtoa_r+0x26a>
 80091ae:	2301      	movs	r3, #1
 80091b0:	001a      	movs	r2, r3
 80091b2:	930c      	str	r3, [sp, #48]	; 0x30
 80091b4:	9307      	str	r3, [sp, #28]
 80091b6:	9223      	str	r2, [sp, #140]	; 0x8c
 80091b8:	e00d      	b.n	80091d6 <_dtoa_r+0x26a>
 80091ba:	2301      	movs	r3, #1
 80091bc:	e7f1      	b.n	80091a2 <_dtoa_r+0x236>
 80091be:	2300      	movs	r3, #0
 80091c0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80091c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80091c4:	4694      	mov	ip, r2
 80091c6:	9b02      	ldr	r3, [sp, #8]
 80091c8:	4463      	add	r3, ip
 80091ca:	930c      	str	r3, [sp, #48]	; 0x30
 80091cc:	3301      	adds	r3, #1
 80091ce:	9307      	str	r3, [sp, #28]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	dc00      	bgt.n	80091d6 <_dtoa_r+0x26a>
 80091d4:	2301      	movs	r3, #1
 80091d6:	2200      	movs	r2, #0
 80091d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091da:	6042      	str	r2, [r0, #4]
 80091dc:	3204      	adds	r2, #4
 80091de:	0015      	movs	r5, r2
 80091e0:	3514      	adds	r5, #20
 80091e2:	6841      	ldr	r1, [r0, #4]
 80091e4:	429d      	cmp	r5, r3
 80091e6:	d919      	bls.n	800921c <_dtoa_r+0x2b0>
 80091e8:	0038      	movs	r0, r7
 80091ea:	f000 fcfb 	bl	8009be4 <_Balloc>
 80091ee:	9006      	str	r0, [sp, #24]
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d117      	bne.n	8009224 <_dtoa_r+0x2b8>
 80091f4:	21d5      	movs	r1, #213	; 0xd5
 80091f6:	0002      	movs	r2, r0
 80091f8:	4b43      	ldr	r3, [pc, #268]	; (8009308 <_dtoa_r+0x39c>)
 80091fa:	0049      	lsls	r1, r1, #1
 80091fc:	e6cb      	b.n	8008f96 <_dtoa_r+0x2a>
 80091fe:	2301      	movs	r3, #1
 8009200:	e7de      	b.n	80091c0 <_dtoa_r+0x254>
 8009202:	2300      	movs	r3, #0
 8009204:	940f      	str	r4, [sp, #60]	; 0x3c
 8009206:	9322      	str	r3, [sp, #136]	; 0x88
 8009208:	3b01      	subs	r3, #1
 800920a:	930c      	str	r3, [sp, #48]	; 0x30
 800920c:	9307      	str	r3, [sp, #28]
 800920e:	2200      	movs	r2, #0
 8009210:	3313      	adds	r3, #19
 8009212:	e7d0      	b.n	80091b6 <_dtoa_r+0x24a>
 8009214:	2301      	movs	r3, #1
 8009216:	930f      	str	r3, [sp, #60]	; 0x3c
 8009218:	3b02      	subs	r3, #2
 800921a:	e7f6      	b.n	800920a <_dtoa_r+0x29e>
 800921c:	3101      	adds	r1, #1
 800921e:	6041      	str	r1, [r0, #4]
 8009220:	0052      	lsls	r2, r2, #1
 8009222:	e7dc      	b.n	80091de <_dtoa_r+0x272>
 8009224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009226:	9a06      	ldr	r2, [sp, #24]
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	9b07      	ldr	r3, [sp, #28]
 800922c:	2b0e      	cmp	r3, #14
 800922e:	d900      	bls.n	8009232 <_dtoa_r+0x2c6>
 8009230:	e0eb      	b.n	800940a <_dtoa_r+0x49e>
 8009232:	2c00      	cmp	r4, #0
 8009234:	d100      	bne.n	8009238 <_dtoa_r+0x2cc>
 8009236:	e0e8      	b.n	800940a <_dtoa_r+0x49e>
 8009238:	9b02      	ldr	r3, [sp, #8]
 800923a:	2b00      	cmp	r3, #0
 800923c:	dd68      	ble.n	8009310 <_dtoa_r+0x3a4>
 800923e:	001a      	movs	r2, r3
 8009240:	210f      	movs	r1, #15
 8009242:	4b2d      	ldr	r3, [pc, #180]	; (80092f8 <_dtoa_r+0x38c>)
 8009244:	400a      	ands	r2, r1
 8009246:	00d2      	lsls	r2, r2, #3
 8009248:	189b      	adds	r3, r3, r2
 800924a:	681d      	ldr	r5, [r3, #0]
 800924c:	685e      	ldr	r6, [r3, #4]
 800924e:	9b02      	ldr	r3, [sp, #8]
 8009250:	111c      	asrs	r4, r3, #4
 8009252:	2302      	movs	r3, #2
 8009254:	9310      	str	r3, [sp, #64]	; 0x40
 8009256:	9b02      	ldr	r3, [sp, #8]
 8009258:	05db      	lsls	r3, r3, #23
 800925a:	d50b      	bpl.n	8009274 <_dtoa_r+0x308>
 800925c:	4b2b      	ldr	r3, [pc, #172]	; (800930c <_dtoa_r+0x3a0>)
 800925e:	400c      	ands	r4, r1
 8009260:	6a1a      	ldr	r2, [r3, #32]
 8009262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009264:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009266:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009268:	f7f8 f9fe 	bl	8001668 <__aeabi_ddiv>
 800926c:	2303      	movs	r3, #3
 800926e:	9008      	str	r0, [sp, #32]
 8009270:	9109      	str	r1, [sp, #36]	; 0x24
 8009272:	9310      	str	r3, [sp, #64]	; 0x40
 8009274:	4b25      	ldr	r3, [pc, #148]	; (800930c <_dtoa_r+0x3a0>)
 8009276:	9314      	str	r3, [sp, #80]	; 0x50
 8009278:	2c00      	cmp	r4, #0
 800927a:	d108      	bne.n	800928e <_dtoa_r+0x322>
 800927c:	9808      	ldr	r0, [sp, #32]
 800927e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009280:	002a      	movs	r2, r5
 8009282:	0033      	movs	r3, r6
 8009284:	f7f8 f9f0 	bl	8001668 <__aeabi_ddiv>
 8009288:	9008      	str	r0, [sp, #32]
 800928a:	9109      	str	r1, [sp, #36]	; 0x24
 800928c:	e05c      	b.n	8009348 <_dtoa_r+0x3dc>
 800928e:	2301      	movs	r3, #1
 8009290:	421c      	tst	r4, r3
 8009292:	d00b      	beq.n	80092ac <_dtoa_r+0x340>
 8009294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009296:	0028      	movs	r0, r5
 8009298:	3301      	adds	r3, #1
 800929a:	9310      	str	r3, [sp, #64]	; 0x40
 800929c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800929e:	0031      	movs	r1, r6
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f7f8 fde2 	bl	8001e6c <__aeabi_dmul>
 80092a8:	0005      	movs	r5, r0
 80092aa:	000e      	movs	r6, r1
 80092ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092ae:	1064      	asrs	r4, r4, #1
 80092b0:	3308      	adds	r3, #8
 80092b2:	e7e0      	b.n	8009276 <_dtoa_r+0x30a>
 80092b4:	0800c501 	.word	0x0800c501
 80092b8:	0800c518 	.word	0x0800c518
 80092bc:	7ff00000 	.word	0x7ff00000
 80092c0:	0000270f 	.word	0x0000270f
 80092c4:	0800c4fd 	.word	0x0800c4fd
 80092c8:	0800c500 	.word	0x0800c500
 80092cc:	0800c4d0 	.word	0x0800c4d0
 80092d0:	0800c4d1 	.word	0x0800c4d1
 80092d4:	3ff00000 	.word	0x3ff00000
 80092d8:	fffffc01 	.word	0xfffffc01
 80092dc:	3ff80000 	.word	0x3ff80000
 80092e0:	636f4361 	.word	0x636f4361
 80092e4:	3fd287a7 	.word	0x3fd287a7
 80092e8:	8b60c8b3 	.word	0x8b60c8b3
 80092ec:	3fc68a28 	.word	0x3fc68a28
 80092f0:	509f79fb 	.word	0x509f79fb
 80092f4:	3fd34413 	.word	0x3fd34413
 80092f8:	0800c608 	.word	0x0800c608
 80092fc:	00000432 	.word	0x00000432
 8009300:	00000412 	.word	0x00000412
 8009304:	fe100000 	.word	0xfe100000
 8009308:	0800c573 	.word	0x0800c573
 800930c:	0800c5e0 	.word	0x0800c5e0
 8009310:	2302      	movs	r3, #2
 8009312:	9310      	str	r3, [sp, #64]	; 0x40
 8009314:	9b02      	ldr	r3, [sp, #8]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d016      	beq.n	8009348 <_dtoa_r+0x3dc>
 800931a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800931c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800931e:	425c      	negs	r4, r3
 8009320:	230f      	movs	r3, #15
 8009322:	4ab6      	ldr	r2, [pc, #728]	; (80095fc <_dtoa_r+0x690>)
 8009324:	4023      	ands	r3, r4
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	18d3      	adds	r3, r2, r3
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	f7f8 fd9d 	bl	8001e6c <__aeabi_dmul>
 8009332:	2601      	movs	r6, #1
 8009334:	2300      	movs	r3, #0
 8009336:	9008      	str	r0, [sp, #32]
 8009338:	9109      	str	r1, [sp, #36]	; 0x24
 800933a:	4db1      	ldr	r5, [pc, #708]	; (8009600 <_dtoa_r+0x694>)
 800933c:	1124      	asrs	r4, r4, #4
 800933e:	2c00      	cmp	r4, #0
 8009340:	d000      	beq.n	8009344 <_dtoa_r+0x3d8>
 8009342:	e094      	b.n	800946e <_dtoa_r+0x502>
 8009344:	2b00      	cmp	r3, #0
 8009346:	d19f      	bne.n	8009288 <_dtoa_r+0x31c>
 8009348:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800934a:	2b00      	cmp	r3, #0
 800934c:	d100      	bne.n	8009350 <_dtoa_r+0x3e4>
 800934e:	e09b      	b.n	8009488 <_dtoa_r+0x51c>
 8009350:	9c08      	ldr	r4, [sp, #32]
 8009352:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009354:	2200      	movs	r2, #0
 8009356:	0020      	movs	r0, r4
 8009358:	0029      	movs	r1, r5
 800935a:	4baa      	ldr	r3, [pc, #680]	; (8009604 <_dtoa_r+0x698>)
 800935c:	f7f7 f87c 	bl	8000458 <__aeabi_dcmplt>
 8009360:	2800      	cmp	r0, #0
 8009362:	d100      	bne.n	8009366 <_dtoa_r+0x3fa>
 8009364:	e090      	b.n	8009488 <_dtoa_r+0x51c>
 8009366:	9b07      	ldr	r3, [sp, #28]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d100      	bne.n	800936e <_dtoa_r+0x402>
 800936c:	e08c      	b.n	8009488 <_dtoa_r+0x51c>
 800936e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009370:	2b00      	cmp	r3, #0
 8009372:	dd46      	ble.n	8009402 <_dtoa_r+0x496>
 8009374:	9b02      	ldr	r3, [sp, #8]
 8009376:	2200      	movs	r2, #0
 8009378:	0020      	movs	r0, r4
 800937a:	0029      	movs	r1, r5
 800937c:	1e5e      	subs	r6, r3, #1
 800937e:	4ba2      	ldr	r3, [pc, #648]	; (8009608 <_dtoa_r+0x69c>)
 8009380:	f7f8 fd74 	bl	8001e6c <__aeabi_dmul>
 8009384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009386:	9008      	str	r0, [sp, #32]
 8009388:	9109      	str	r1, [sp, #36]	; 0x24
 800938a:	3301      	adds	r3, #1
 800938c:	9310      	str	r3, [sp, #64]	; 0x40
 800938e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009390:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009392:	9c08      	ldr	r4, [sp, #32]
 8009394:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009396:	9314      	str	r3, [sp, #80]	; 0x50
 8009398:	f7f9 fbba 	bl	8002b10 <__aeabi_i2d>
 800939c:	0022      	movs	r2, r4
 800939e:	002b      	movs	r3, r5
 80093a0:	f7f8 fd64 	bl	8001e6c <__aeabi_dmul>
 80093a4:	2200      	movs	r2, #0
 80093a6:	4b99      	ldr	r3, [pc, #612]	; (800960c <_dtoa_r+0x6a0>)
 80093a8:	f7f7 fe22 	bl	8000ff0 <__aeabi_dadd>
 80093ac:	9010      	str	r0, [sp, #64]	; 0x40
 80093ae:	9111      	str	r1, [sp, #68]	; 0x44
 80093b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80093b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093b4:	9208      	str	r2, [sp, #32]
 80093b6:	9309      	str	r3, [sp, #36]	; 0x24
 80093b8:	4a95      	ldr	r2, [pc, #596]	; (8009610 <_dtoa_r+0x6a4>)
 80093ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093bc:	4694      	mov	ip, r2
 80093be:	4463      	add	r3, ip
 80093c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80093c2:	9309      	str	r3, [sp, #36]	; 0x24
 80093c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d161      	bne.n	800948e <_dtoa_r+0x522>
 80093ca:	2200      	movs	r2, #0
 80093cc:	0020      	movs	r0, r4
 80093ce:	0029      	movs	r1, r5
 80093d0:	4b90      	ldr	r3, [pc, #576]	; (8009614 <_dtoa_r+0x6a8>)
 80093d2:	f7f8 ffb7 	bl	8002344 <__aeabi_dsub>
 80093d6:	9a08      	ldr	r2, [sp, #32]
 80093d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093da:	0004      	movs	r4, r0
 80093dc:	000d      	movs	r5, r1
 80093de:	f7f7 f84f 	bl	8000480 <__aeabi_dcmpgt>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	d000      	beq.n	80093e8 <_dtoa_r+0x47c>
 80093e6:	e2af      	b.n	8009948 <_dtoa_r+0x9dc>
 80093e8:	488b      	ldr	r0, [pc, #556]	; (8009618 <_dtoa_r+0x6ac>)
 80093ea:	9911      	ldr	r1, [sp, #68]	; 0x44
 80093ec:	4684      	mov	ip, r0
 80093ee:	4461      	add	r1, ip
 80093f0:	000b      	movs	r3, r1
 80093f2:	0020      	movs	r0, r4
 80093f4:	0029      	movs	r1, r5
 80093f6:	9a08      	ldr	r2, [sp, #32]
 80093f8:	f7f7 f82e 	bl	8000458 <__aeabi_dcmplt>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d000      	beq.n	8009402 <_dtoa_r+0x496>
 8009400:	e29f      	b.n	8009942 <_dtoa_r+0x9d6>
 8009402:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009404:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009406:	9308      	str	r3, [sp, #32]
 8009408:	9409      	str	r4, [sp, #36]	; 0x24
 800940a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800940c:	2b00      	cmp	r3, #0
 800940e:	da00      	bge.n	8009412 <_dtoa_r+0x4a6>
 8009410:	e172      	b.n	80096f8 <_dtoa_r+0x78c>
 8009412:	9a02      	ldr	r2, [sp, #8]
 8009414:	2a0e      	cmp	r2, #14
 8009416:	dd00      	ble.n	800941a <_dtoa_r+0x4ae>
 8009418:	e16e      	b.n	80096f8 <_dtoa_r+0x78c>
 800941a:	4b78      	ldr	r3, [pc, #480]	; (80095fc <_dtoa_r+0x690>)
 800941c:	00d2      	lsls	r2, r2, #3
 800941e:	189b      	adds	r3, r3, r2
 8009420:	685c      	ldr	r4, [r3, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	930a      	str	r3, [sp, #40]	; 0x28
 8009426:	940b      	str	r4, [sp, #44]	; 0x2c
 8009428:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800942a:	2b00      	cmp	r3, #0
 800942c:	db00      	blt.n	8009430 <_dtoa_r+0x4c4>
 800942e:	e0f7      	b.n	8009620 <_dtoa_r+0x6b4>
 8009430:	9b07      	ldr	r3, [sp, #28]
 8009432:	2b00      	cmp	r3, #0
 8009434:	dd00      	ble.n	8009438 <_dtoa_r+0x4cc>
 8009436:	e0f3      	b.n	8009620 <_dtoa_r+0x6b4>
 8009438:	d000      	beq.n	800943c <_dtoa_r+0x4d0>
 800943a:	e282      	b.n	8009942 <_dtoa_r+0x9d6>
 800943c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800943e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009440:	2200      	movs	r2, #0
 8009442:	4b74      	ldr	r3, [pc, #464]	; (8009614 <_dtoa_r+0x6a8>)
 8009444:	f7f8 fd12 	bl	8001e6c <__aeabi_dmul>
 8009448:	9a08      	ldr	r2, [sp, #32]
 800944a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800944c:	f7f7 f822 	bl	8000494 <__aeabi_dcmpge>
 8009450:	9e07      	ldr	r6, [sp, #28]
 8009452:	0035      	movs	r5, r6
 8009454:	2800      	cmp	r0, #0
 8009456:	d000      	beq.n	800945a <_dtoa_r+0x4ee>
 8009458:	e259      	b.n	800990e <_dtoa_r+0x9a2>
 800945a:	9b06      	ldr	r3, [sp, #24]
 800945c:	9a06      	ldr	r2, [sp, #24]
 800945e:	3301      	adds	r3, #1
 8009460:	9308      	str	r3, [sp, #32]
 8009462:	2331      	movs	r3, #49	; 0x31
 8009464:	7013      	strb	r3, [r2, #0]
 8009466:	9b02      	ldr	r3, [sp, #8]
 8009468:	3301      	adds	r3, #1
 800946a:	9302      	str	r3, [sp, #8]
 800946c:	e254      	b.n	8009918 <_dtoa_r+0x9ac>
 800946e:	4234      	tst	r4, r6
 8009470:	d007      	beq.n	8009482 <_dtoa_r+0x516>
 8009472:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009474:	3301      	adds	r3, #1
 8009476:	9310      	str	r3, [sp, #64]	; 0x40
 8009478:	682a      	ldr	r2, [r5, #0]
 800947a:	686b      	ldr	r3, [r5, #4]
 800947c:	f7f8 fcf6 	bl	8001e6c <__aeabi_dmul>
 8009480:	0033      	movs	r3, r6
 8009482:	1064      	asrs	r4, r4, #1
 8009484:	3508      	adds	r5, #8
 8009486:	e75a      	b.n	800933e <_dtoa_r+0x3d2>
 8009488:	9e02      	ldr	r6, [sp, #8]
 800948a:	9b07      	ldr	r3, [sp, #28]
 800948c:	e780      	b.n	8009390 <_dtoa_r+0x424>
 800948e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009490:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009492:	1e5a      	subs	r2, r3, #1
 8009494:	4b59      	ldr	r3, [pc, #356]	; (80095fc <_dtoa_r+0x690>)
 8009496:	00d2      	lsls	r2, r2, #3
 8009498:	189b      	adds	r3, r3, r2
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	2900      	cmp	r1, #0
 80094a0:	d051      	beq.n	8009546 <_dtoa_r+0x5da>
 80094a2:	2000      	movs	r0, #0
 80094a4:	495d      	ldr	r1, [pc, #372]	; (800961c <_dtoa_r+0x6b0>)
 80094a6:	f7f8 f8df 	bl	8001668 <__aeabi_ddiv>
 80094aa:	9a08      	ldr	r2, [sp, #32]
 80094ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ae:	f7f8 ff49 	bl	8002344 <__aeabi_dsub>
 80094b2:	9a06      	ldr	r2, [sp, #24]
 80094b4:	9b06      	ldr	r3, [sp, #24]
 80094b6:	4694      	mov	ip, r2
 80094b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80094ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094bc:	9010      	str	r0, [sp, #64]	; 0x40
 80094be:	9111      	str	r1, [sp, #68]	; 0x44
 80094c0:	4463      	add	r3, ip
 80094c2:	9319      	str	r3, [sp, #100]	; 0x64
 80094c4:	0029      	movs	r1, r5
 80094c6:	0020      	movs	r0, r4
 80094c8:	f7f9 faec 	bl	8002aa4 <__aeabi_d2iz>
 80094cc:	9014      	str	r0, [sp, #80]	; 0x50
 80094ce:	f7f9 fb1f 	bl	8002b10 <__aeabi_i2d>
 80094d2:	0002      	movs	r2, r0
 80094d4:	000b      	movs	r3, r1
 80094d6:	0020      	movs	r0, r4
 80094d8:	0029      	movs	r1, r5
 80094da:	f7f8 ff33 	bl	8002344 <__aeabi_dsub>
 80094de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094e2:	3301      	adds	r3, #1
 80094e4:	9308      	str	r3, [sp, #32]
 80094e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094e8:	0004      	movs	r4, r0
 80094ea:	3330      	adds	r3, #48	; 0x30
 80094ec:	7013      	strb	r3, [r2, #0]
 80094ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80094f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094f2:	000d      	movs	r5, r1
 80094f4:	f7f6 ffb0 	bl	8000458 <__aeabi_dcmplt>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d175      	bne.n	80095e8 <_dtoa_r+0x67c>
 80094fc:	0022      	movs	r2, r4
 80094fe:	002b      	movs	r3, r5
 8009500:	2000      	movs	r0, #0
 8009502:	4940      	ldr	r1, [pc, #256]	; (8009604 <_dtoa_r+0x698>)
 8009504:	f7f8 ff1e 	bl	8002344 <__aeabi_dsub>
 8009508:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800950a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800950c:	f7f6 ffa4 	bl	8000458 <__aeabi_dcmplt>
 8009510:	2800      	cmp	r0, #0
 8009512:	d000      	beq.n	8009516 <_dtoa_r+0x5aa>
 8009514:	e0d2      	b.n	80096bc <_dtoa_r+0x750>
 8009516:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009518:	9a08      	ldr	r2, [sp, #32]
 800951a:	4293      	cmp	r3, r2
 800951c:	d100      	bne.n	8009520 <_dtoa_r+0x5b4>
 800951e:	e770      	b.n	8009402 <_dtoa_r+0x496>
 8009520:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009522:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009524:	2200      	movs	r2, #0
 8009526:	4b38      	ldr	r3, [pc, #224]	; (8009608 <_dtoa_r+0x69c>)
 8009528:	f7f8 fca0 	bl	8001e6c <__aeabi_dmul>
 800952c:	4b36      	ldr	r3, [pc, #216]	; (8009608 <_dtoa_r+0x69c>)
 800952e:	9010      	str	r0, [sp, #64]	; 0x40
 8009530:	9111      	str	r1, [sp, #68]	; 0x44
 8009532:	2200      	movs	r2, #0
 8009534:	0020      	movs	r0, r4
 8009536:	0029      	movs	r1, r5
 8009538:	f7f8 fc98 	bl	8001e6c <__aeabi_dmul>
 800953c:	9b08      	ldr	r3, [sp, #32]
 800953e:	0004      	movs	r4, r0
 8009540:	000d      	movs	r5, r1
 8009542:	9317      	str	r3, [sp, #92]	; 0x5c
 8009544:	e7be      	b.n	80094c4 <_dtoa_r+0x558>
 8009546:	9808      	ldr	r0, [sp, #32]
 8009548:	9909      	ldr	r1, [sp, #36]	; 0x24
 800954a:	f7f8 fc8f 	bl	8001e6c <__aeabi_dmul>
 800954e:	9a06      	ldr	r2, [sp, #24]
 8009550:	9b06      	ldr	r3, [sp, #24]
 8009552:	4694      	mov	ip, r2
 8009554:	9308      	str	r3, [sp, #32]
 8009556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009558:	9010      	str	r0, [sp, #64]	; 0x40
 800955a:	9111      	str	r1, [sp, #68]	; 0x44
 800955c:	4463      	add	r3, ip
 800955e:	9319      	str	r3, [sp, #100]	; 0x64
 8009560:	0029      	movs	r1, r5
 8009562:	0020      	movs	r0, r4
 8009564:	f7f9 fa9e 	bl	8002aa4 <__aeabi_d2iz>
 8009568:	9017      	str	r0, [sp, #92]	; 0x5c
 800956a:	f7f9 fad1 	bl	8002b10 <__aeabi_i2d>
 800956e:	0002      	movs	r2, r0
 8009570:	000b      	movs	r3, r1
 8009572:	0020      	movs	r0, r4
 8009574:	0029      	movs	r1, r5
 8009576:	f7f8 fee5 	bl	8002344 <__aeabi_dsub>
 800957a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800957c:	9a08      	ldr	r2, [sp, #32]
 800957e:	3330      	adds	r3, #48	; 0x30
 8009580:	7013      	strb	r3, [r2, #0]
 8009582:	0013      	movs	r3, r2
 8009584:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009586:	3301      	adds	r3, #1
 8009588:	0004      	movs	r4, r0
 800958a:	000d      	movs	r5, r1
 800958c:	9308      	str	r3, [sp, #32]
 800958e:	4293      	cmp	r3, r2
 8009590:	d12c      	bne.n	80095ec <_dtoa_r+0x680>
 8009592:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009594:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009596:	9a06      	ldr	r2, [sp, #24]
 8009598:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800959a:	4694      	mov	ip, r2
 800959c:	4463      	add	r3, ip
 800959e:	2200      	movs	r2, #0
 80095a0:	9308      	str	r3, [sp, #32]
 80095a2:	4b1e      	ldr	r3, [pc, #120]	; (800961c <_dtoa_r+0x6b0>)
 80095a4:	f7f7 fd24 	bl	8000ff0 <__aeabi_dadd>
 80095a8:	0002      	movs	r2, r0
 80095aa:	000b      	movs	r3, r1
 80095ac:	0020      	movs	r0, r4
 80095ae:	0029      	movs	r1, r5
 80095b0:	f7f6 ff66 	bl	8000480 <__aeabi_dcmpgt>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d000      	beq.n	80095ba <_dtoa_r+0x64e>
 80095b8:	e080      	b.n	80096bc <_dtoa_r+0x750>
 80095ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80095bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095be:	2000      	movs	r0, #0
 80095c0:	4916      	ldr	r1, [pc, #88]	; (800961c <_dtoa_r+0x6b0>)
 80095c2:	f7f8 febf 	bl	8002344 <__aeabi_dsub>
 80095c6:	0002      	movs	r2, r0
 80095c8:	000b      	movs	r3, r1
 80095ca:	0020      	movs	r0, r4
 80095cc:	0029      	movs	r1, r5
 80095ce:	f7f6 ff43 	bl	8000458 <__aeabi_dcmplt>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d100      	bne.n	80095d8 <_dtoa_r+0x66c>
 80095d6:	e714      	b.n	8009402 <_dtoa_r+0x496>
 80095d8:	9b08      	ldr	r3, [sp, #32]
 80095da:	001a      	movs	r2, r3
 80095dc:	3a01      	subs	r2, #1
 80095de:	9208      	str	r2, [sp, #32]
 80095e0:	7812      	ldrb	r2, [r2, #0]
 80095e2:	2a30      	cmp	r2, #48	; 0x30
 80095e4:	d0f8      	beq.n	80095d8 <_dtoa_r+0x66c>
 80095e6:	9308      	str	r3, [sp, #32]
 80095e8:	9602      	str	r6, [sp, #8]
 80095ea:	e055      	b.n	8009698 <_dtoa_r+0x72c>
 80095ec:	2200      	movs	r2, #0
 80095ee:	4b06      	ldr	r3, [pc, #24]	; (8009608 <_dtoa_r+0x69c>)
 80095f0:	f7f8 fc3c 	bl	8001e6c <__aeabi_dmul>
 80095f4:	0004      	movs	r4, r0
 80095f6:	000d      	movs	r5, r1
 80095f8:	e7b2      	b.n	8009560 <_dtoa_r+0x5f4>
 80095fa:	46c0      	nop			; (mov r8, r8)
 80095fc:	0800c608 	.word	0x0800c608
 8009600:	0800c5e0 	.word	0x0800c5e0
 8009604:	3ff00000 	.word	0x3ff00000
 8009608:	40240000 	.word	0x40240000
 800960c:	401c0000 	.word	0x401c0000
 8009610:	fcc00000 	.word	0xfcc00000
 8009614:	40140000 	.word	0x40140000
 8009618:	7cc00000 	.word	0x7cc00000
 800961c:	3fe00000 	.word	0x3fe00000
 8009620:	9b07      	ldr	r3, [sp, #28]
 8009622:	9e06      	ldr	r6, [sp, #24]
 8009624:	3b01      	subs	r3, #1
 8009626:	199b      	adds	r3, r3, r6
 8009628:	930c      	str	r3, [sp, #48]	; 0x30
 800962a:	9c08      	ldr	r4, [sp, #32]
 800962c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800962e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009632:	0020      	movs	r0, r4
 8009634:	0029      	movs	r1, r5
 8009636:	f7f8 f817 	bl	8001668 <__aeabi_ddiv>
 800963a:	f7f9 fa33 	bl	8002aa4 <__aeabi_d2iz>
 800963e:	9007      	str	r0, [sp, #28]
 8009640:	f7f9 fa66 	bl	8002b10 <__aeabi_i2d>
 8009644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009648:	f7f8 fc10 	bl	8001e6c <__aeabi_dmul>
 800964c:	0002      	movs	r2, r0
 800964e:	000b      	movs	r3, r1
 8009650:	0020      	movs	r0, r4
 8009652:	0029      	movs	r1, r5
 8009654:	f7f8 fe76 	bl	8002344 <__aeabi_dsub>
 8009658:	0033      	movs	r3, r6
 800965a:	9a07      	ldr	r2, [sp, #28]
 800965c:	3601      	adds	r6, #1
 800965e:	3230      	adds	r2, #48	; 0x30
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009664:	9608      	str	r6, [sp, #32]
 8009666:	429a      	cmp	r2, r3
 8009668:	d139      	bne.n	80096de <_dtoa_r+0x772>
 800966a:	0002      	movs	r2, r0
 800966c:	000b      	movs	r3, r1
 800966e:	f7f7 fcbf 	bl	8000ff0 <__aeabi_dadd>
 8009672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009676:	0004      	movs	r4, r0
 8009678:	000d      	movs	r5, r1
 800967a:	f7f6 ff01 	bl	8000480 <__aeabi_dcmpgt>
 800967e:	2800      	cmp	r0, #0
 8009680:	d11b      	bne.n	80096ba <_dtoa_r+0x74e>
 8009682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009686:	0020      	movs	r0, r4
 8009688:	0029      	movs	r1, r5
 800968a:	f7f6 fedf 	bl	800044c <__aeabi_dcmpeq>
 800968e:	2800      	cmp	r0, #0
 8009690:	d002      	beq.n	8009698 <_dtoa_r+0x72c>
 8009692:	9b07      	ldr	r3, [sp, #28]
 8009694:	07db      	lsls	r3, r3, #31
 8009696:	d410      	bmi.n	80096ba <_dtoa_r+0x74e>
 8009698:	0038      	movs	r0, r7
 800969a:	9905      	ldr	r1, [sp, #20]
 800969c:	f000 fae6 	bl	8009c6c <_Bfree>
 80096a0:	2300      	movs	r3, #0
 80096a2:	9a08      	ldr	r2, [sp, #32]
 80096a4:	9802      	ldr	r0, [sp, #8]
 80096a6:	7013      	strb	r3, [r2, #0]
 80096a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80096aa:	3001      	adds	r0, #1
 80096ac:	6018      	str	r0, [r3, #0]
 80096ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d100      	bne.n	80096b6 <_dtoa_r+0x74a>
 80096b4:	e4a6      	b.n	8009004 <_dtoa_r+0x98>
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	e4a4      	b.n	8009004 <_dtoa_r+0x98>
 80096ba:	9e02      	ldr	r6, [sp, #8]
 80096bc:	9b08      	ldr	r3, [sp, #32]
 80096be:	9308      	str	r3, [sp, #32]
 80096c0:	3b01      	subs	r3, #1
 80096c2:	781a      	ldrb	r2, [r3, #0]
 80096c4:	2a39      	cmp	r2, #57	; 0x39
 80096c6:	d106      	bne.n	80096d6 <_dtoa_r+0x76a>
 80096c8:	9a06      	ldr	r2, [sp, #24]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d1f7      	bne.n	80096be <_dtoa_r+0x752>
 80096ce:	2230      	movs	r2, #48	; 0x30
 80096d0:	9906      	ldr	r1, [sp, #24]
 80096d2:	3601      	adds	r6, #1
 80096d4:	700a      	strb	r2, [r1, #0]
 80096d6:	781a      	ldrb	r2, [r3, #0]
 80096d8:	3201      	adds	r2, #1
 80096da:	701a      	strb	r2, [r3, #0]
 80096dc:	e784      	b.n	80095e8 <_dtoa_r+0x67c>
 80096de:	2200      	movs	r2, #0
 80096e0:	4baa      	ldr	r3, [pc, #680]	; (800998c <_dtoa_r+0xa20>)
 80096e2:	f7f8 fbc3 	bl	8001e6c <__aeabi_dmul>
 80096e6:	2200      	movs	r2, #0
 80096e8:	2300      	movs	r3, #0
 80096ea:	0004      	movs	r4, r0
 80096ec:	000d      	movs	r5, r1
 80096ee:	f7f6 fead 	bl	800044c <__aeabi_dcmpeq>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d09b      	beq.n	800962e <_dtoa_r+0x6c2>
 80096f6:	e7cf      	b.n	8009698 <_dtoa_r+0x72c>
 80096f8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80096fa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80096fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80096fe:	2d00      	cmp	r5, #0
 8009700:	d012      	beq.n	8009728 <_dtoa_r+0x7bc>
 8009702:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009704:	2a01      	cmp	r2, #1
 8009706:	dc66      	bgt.n	80097d6 <_dtoa_r+0x86a>
 8009708:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800970a:	2a00      	cmp	r2, #0
 800970c:	d05d      	beq.n	80097ca <_dtoa_r+0x85e>
 800970e:	4aa0      	ldr	r2, [pc, #640]	; (8009990 <_dtoa_r+0xa24>)
 8009710:	189b      	adds	r3, r3, r2
 8009712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009714:	2101      	movs	r1, #1
 8009716:	18d2      	adds	r2, r2, r3
 8009718:	920a      	str	r2, [sp, #40]	; 0x28
 800971a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800971c:	0038      	movs	r0, r7
 800971e:	18d3      	adds	r3, r2, r3
 8009720:	930d      	str	r3, [sp, #52]	; 0x34
 8009722:	f000 fb53 	bl	8009dcc <__i2b>
 8009726:	0005      	movs	r5, r0
 8009728:	2c00      	cmp	r4, #0
 800972a:	dd0e      	ble.n	800974a <_dtoa_r+0x7de>
 800972c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800972e:	2b00      	cmp	r3, #0
 8009730:	dd0b      	ble.n	800974a <_dtoa_r+0x7de>
 8009732:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009734:	0023      	movs	r3, r4
 8009736:	4294      	cmp	r4, r2
 8009738:	dd00      	ble.n	800973c <_dtoa_r+0x7d0>
 800973a:	0013      	movs	r3, r2
 800973c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800973e:	1ae4      	subs	r4, r4, r3
 8009740:	1ad2      	subs	r2, r2, r3
 8009742:	920a      	str	r2, [sp, #40]	; 0x28
 8009744:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	930d      	str	r3, [sp, #52]	; 0x34
 800974a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800974c:	2b00      	cmp	r3, #0
 800974e:	d01f      	beq.n	8009790 <_dtoa_r+0x824>
 8009750:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009752:	2b00      	cmp	r3, #0
 8009754:	d054      	beq.n	8009800 <_dtoa_r+0x894>
 8009756:	2e00      	cmp	r6, #0
 8009758:	dd11      	ble.n	800977e <_dtoa_r+0x812>
 800975a:	0029      	movs	r1, r5
 800975c:	0032      	movs	r2, r6
 800975e:	0038      	movs	r0, r7
 8009760:	f000 fbfa 	bl	8009f58 <__pow5mult>
 8009764:	9a05      	ldr	r2, [sp, #20]
 8009766:	0001      	movs	r1, r0
 8009768:	0005      	movs	r5, r0
 800976a:	0038      	movs	r0, r7
 800976c:	f000 fb44 	bl	8009df8 <__multiply>
 8009770:	9905      	ldr	r1, [sp, #20]
 8009772:	9014      	str	r0, [sp, #80]	; 0x50
 8009774:	0038      	movs	r0, r7
 8009776:	f000 fa79 	bl	8009c6c <_Bfree>
 800977a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800977c:	9305      	str	r3, [sp, #20]
 800977e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009780:	1b9a      	subs	r2, r3, r6
 8009782:	42b3      	cmp	r3, r6
 8009784:	d004      	beq.n	8009790 <_dtoa_r+0x824>
 8009786:	0038      	movs	r0, r7
 8009788:	9905      	ldr	r1, [sp, #20]
 800978a:	f000 fbe5 	bl	8009f58 <__pow5mult>
 800978e:	9005      	str	r0, [sp, #20]
 8009790:	2101      	movs	r1, #1
 8009792:	0038      	movs	r0, r7
 8009794:	f000 fb1a 	bl	8009dcc <__i2b>
 8009798:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800979a:	0006      	movs	r6, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	dd31      	ble.n	8009804 <_dtoa_r+0x898>
 80097a0:	001a      	movs	r2, r3
 80097a2:	0001      	movs	r1, r0
 80097a4:	0038      	movs	r0, r7
 80097a6:	f000 fbd7 	bl	8009f58 <__pow5mult>
 80097aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097ac:	0006      	movs	r6, r0
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	dd2d      	ble.n	800980e <_dtoa_r+0x8a2>
 80097b2:	2300      	movs	r3, #0
 80097b4:	930e      	str	r3, [sp, #56]	; 0x38
 80097b6:	6933      	ldr	r3, [r6, #16]
 80097b8:	3303      	adds	r3, #3
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	18f3      	adds	r3, r6, r3
 80097be:	6858      	ldr	r0, [r3, #4]
 80097c0:	f000 fabc 	bl	8009d3c <__hi0bits>
 80097c4:	2320      	movs	r3, #32
 80097c6:	1a18      	subs	r0, r3, r0
 80097c8:	e039      	b.n	800983e <_dtoa_r+0x8d2>
 80097ca:	2336      	movs	r3, #54	; 0x36
 80097cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80097ce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80097d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80097d2:	1a9b      	subs	r3, r3, r2
 80097d4:	e79d      	b.n	8009712 <_dtoa_r+0x7a6>
 80097d6:	9b07      	ldr	r3, [sp, #28]
 80097d8:	1e5e      	subs	r6, r3, #1
 80097da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097dc:	42b3      	cmp	r3, r6
 80097de:	db07      	blt.n	80097f0 <_dtoa_r+0x884>
 80097e0:	1b9e      	subs	r6, r3, r6
 80097e2:	9b07      	ldr	r3, [sp, #28]
 80097e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	da93      	bge.n	8009712 <_dtoa_r+0x7a6>
 80097ea:	1ae4      	subs	r4, r4, r3
 80097ec:	2300      	movs	r3, #0
 80097ee:	e790      	b.n	8009712 <_dtoa_r+0x7a6>
 80097f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80097f4:	1af3      	subs	r3, r6, r3
 80097f6:	18d3      	adds	r3, r2, r3
 80097f8:	960e      	str	r6, [sp, #56]	; 0x38
 80097fa:	9315      	str	r3, [sp, #84]	; 0x54
 80097fc:	2600      	movs	r6, #0
 80097fe:	e7f0      	b.n	80097e2 <_dtoa_r+0x876>
 8009800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009802:	e7c0      	b.n	8009786 <_dtoa_r+0x81a>
 8009804:	2300      	movs	r3, #0
 8009806:	930e      	str	r3, [sp, #56]	; 0x38
 8009808:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800980a:	2b01      	cmp	r3, #1
 800980c:	dc13      	bgt.n	8009836 <_dtoa_r+0x8ca>
 800980e:	2300      	movs	r3, #0
 8009810:	930e      	str	r3, [sp, #56]	; 0x38
 8009812:	9b08      	ldr	r3, [sp, #32]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10e      	bne.n	8009836 <_dtoa_r+0x8ca>
 8009818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800981a:	031b      	lsls	r3, r3, #12
 800981c:	d10b      	bne.n	8009836 <_dtoa_r+0x8ca>
 800981e:	4b5d      	ldr	r3, [pc, #372]	; (8009994 <_dtoa_r+0xa28>)
 8009820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009822:	4213      	tst	r3, r2
 8009824:	d007      	beq.n	8009836 <_dtoa_r+0x8ca>
 8009826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009828:	3301      	adds	r3, #1
 800982a:	930a      	str	r3, [sp, #40]	; 0x28
 800982c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800982e:	3301      	adds	r3, #1
 8009830:	930d      	str	r3, [sp, #52]	; 0x34
 8009832:	2301      	movs	r3, #1
 8009834:	930e      	str	r3, [sp, #56]	; 0x38
 8009836:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009838:	2001      	movs	r0, #1
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1bb      	bne.n	80097b6 <_dtoa_r+0x84a>
 800983e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009840:	221f      	movs	r2, #31
 8009842:	1818      	adds	r0, r3, r0
 8009844:	0003      	movs	r3, r0
 8009846:	4013      	ands	r3, r2
 8009848:	4210      	tst	r0, r2
 800984a:	d046      	beq.n	80098da <_dtoa_r+0x96e>
 800984c:	3201      	adds	r2, #1
 800984e:	1ad2      	subs	r2, r2, r3
 8009850:	2a04      	cmp	r2, #4
 8009852:	dd3f      	ble.n	80098d4 <_dtoa_r+0x968>
 8009854:	221c      	movs	r2, #28
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800985a:	18e4      	adds	r4, r4, r3
 800985c:	18d2      	adds	r2, r2, r3
 800985e:	920a      	str	r2, [sp, #40]	; 0x28
 8009860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009862:	18d3      	adds	r3, r2, r3
 8009864:	930d      	str	r3, [sp, #52]	; 0x34
 8009866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009868:	2b00      	cmp	r3, #0
 800986a:	dd05      	ble.n	8009878 <_dtoa_r+0x90c>
 800986c:	001a      	movs	r2, r3
 800986e:	0038      	movs	r0, r7
 8009870:	9905      	ldr	r1, [sp, #20]
 8009872:	f000 fbcd 	bl	800a010 <__lshift>
 8009876:	9005      	str	r0, [sp, #20]
 8009878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800987a:	2b00      	cmp	r3, #0
 800987c:	dd05      	ble.n	800988a <_dtoa_r+0x91e>
 800987e:	0031      	movs	r1, r6
 8009880:	001a      	movs	r2, r3
 8009882:	0038      	movs	r0, r7
 8009884:	f000 fbc4 	bl	800a010 <__lshift>
 8009888:	0006      	movs	r6, r0
 800988a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800988c:	2b00      	cmp	r3, #0
 800988e:	d026      	beq.n	80098de <_dtoa_r+0x972>
 8009890:	0031      	movs	r1, r6
 8009892:	9805      	ldr	r0, [sp, #20]
 8009894:	f000 fc2a 	bl	800a0ec <__mcmp>
 8009898:	2800      	cmp	r0, #0
 800989a:	da20      	bge.n	80098de <_dtoa_r+0x972>
 800989c:	9b02      	ldr	r3, [sp, #8]
 800989e:	220a      	movs	r2, #10
 80098a0:	3b01      	subs	r3, #1
 80098a2:	9302      	str	r3, [sp, #8]
 80098a4:	0038      	movs	r0, r7
 80098a6:	2300      	movs	r3, #0
 80098a8:	9905      	ldr	r1, [sp, #20]
 80098aa:	f000 fa03 	bl	8009cb4 <__multadd>
 80098ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098b0:	9005      	str	r0, [sp, #20]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d100      	bne.n	80098b8 <_dtoa_r+0x94c>
 80098b6:	e166      	b.n	8009b86 <_dtoa_r+0xc1a>
 80098b8:	2300      	movs	r3, #0
 80098ba:	0029      	movs	r1, r5
 80098bc:	220a      	movs	r2, #10
 80098be:	0038      	movs	r0, r7
 80098c0:	f000 f9f8 	bl	8009cb4 <__multadd>
 80098c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098c6:	0005      	movs	r5, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	dc47      	bgt.n	800995c <_dtoa_r+0x9f0>
 80098cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	dc0d      	bgt.n	80098ee <_dtoa_r+0x982>
 80098d2:	e043      	b.n	800995c <_dtoa_r+0x9f0>
 80098d4:	2a04      	cmp	r2, #4
 80098d6:	d0c6      	beq.n	8009866 <_dtoa_r+0x8fa>
 80098d8:	0013      	movs	r3, r2
 80098da:	331c      	adds	r3, #28
 80098dc:	e7bc      	b.n	8009858 <_dtoa_r+0x8ec>
 80098de:	9b07      	ldr	r3, [sp, #28]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	dc35      	bgt.n	8009950 <_dtoa_r+0x9e4>
 80098e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	dd32      	ble.n	8009950 <_dtoa_r+0x9e4>
 80098ea:	9b07      	ldr	r3, [sp, #28]
 80098ec:	930c      	str	r3, [sp, #48]	; 0x30
 80098ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10c      	bne.n	800990e <_dtoa_r+0x9a2>
 80098f4:	0031      	movs	r1, r6
 80098f6:	2205      	movs	r2, #5
 80098f8:	0038      	movs	r0, r7
 80098fa:	f000 f9db 	bl	8009cb4 <__multadd>
 80098fe:	0006      	movs	r6, r0
 8009900:	0001      	movs	r1, r0
 8009902:	9805      	ldr	r0, [sp, #20]
 8009904:	f000 fbf2 	bl	800a0ec <__mcmp>
 8009908:	2800      	cmp	r0, #0
 800990a:	dd00      	ble.n	800990e <_dtoa_r+0x9a2>
 800990c:	e5a5      	b.n	800945a <_dtoa_r+0x4ee>
 800990e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009910:	43db      	mvns	r3, r3
 8009912:	9302      	str	r3, [sp, #8]
 8009914:	9b06      	ldr	r3, [sp, #24]
 8009916:	9308      	str	r3, [sp, #32]
 8009918:	2400      	movs	r4, #0
 800991a:	0031      	movs	r1, r6
 800991c:	0038      	movs	r0, r7
 800991e:	f000 f9a5 	bl	8009c6c <_Bfree>
 8009922:	2d00      	cmp	r5, #0
 8009924:	d100      	bne.n	8009928 <_dtoa_r+0x9bc>
 8009926:	e6b7      	b.n	8009698 <_dtoa_r+0x72c>
 8009928:	2c00      	cmp	r4, #0
 800992a:	d005      	beq.n	8009938 <_dtoa_r+0x9cc>
 800992c:	42ac      	cmp	r4, r5
 800992e:	d003      	beq.n	8009938 <_dtoa_r+0x9cc>
 8009930:	0021      	movs	r1, r4
 8009932:	0038      	movs	r0, r7
 8009934:	f000 f99a 	bl	8009c6c <_Bfree>
 8009938:	0029      	movs	r1, r5
 800993a:	0038      	movs	r0, r7
 800993c:	f000 f996 	bl	8009c6c <_Bfree>
 8009940:	e6aa      	b.n	8009698 <_dtoa_r+0x72c>
 8009942:	2600      	movs	r6, #0
 8009944:	0035      	movs	r5, r6
 8009946:	e7e2      	b.n	800990e <_dtoa_r+0x9a2>
 8009948:	9602      	str	r6, [sp, #8]
 800994a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800994c:	0035      	movs	r5, r6
 800994e:	e584      	b.n	800945a <_dtoa_r+0x4ee>
 8009950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009952:	2b00      	cmp	r3, #0
 8009954:	d100      	bne.n	8009958 <_dtoa_r+0x9ec>
 8009956:	e0ce      	b.n	8009af6 <_dtoa_r+0xb8a>
 8009958:	9b07      	ldr	r3, [sp, #28]
 800995a:	930c      	str	r3, [sp, #48]	; 0x30
 800995c:	2c00      	cmp	r4, #0
 800995e:	dd05      	ble.n	800996c <_dtoa_r+0xa00>
 8009960:	0029      	movs	r1, r5
 8009962:	0022      	movs	r2, r4
 8009964:	0038      	movs	r0, r7
 8009966:	f000 fb53 	bl	800a010 <__lshift>
 800996a:	0005      	movs	r5, r0
 800996c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800996e:	0028      	movs	r0, r5
 8009970:	2b00      	cmp	r3, #0
 8009972:	d022      	beq.n	80099ba <_dtoa_r+0xa4e>
 8009974:	0038      	movs	r0, r7
 8009976:	6869      	ldr	r1, [r5, #4]
 8009978:	f000 f934 	bl	8009be4 <_Balloc>
 800997c:	1e04      	subs	r4, r0, #0
 800997e:	d10f      	bne.n	80099a0 <_dtoa_r+0xa34>
 8009980:	0002      	movs	r2, r0
 8009982:	4b05      	ldr	r3, [pc, #20]	; (8009998 <_dtoa_r+0xa2c>)
 8009984:	4905      	ldr	r1, [pc, #20]	; (800999c <_dtoa_r+0xa30>)
 8009986:	f7ff fb06 	bl	8008f96 <_dtoa_r+0x2a>
 800998a:	46c0      	nop			; (mov r8, r8)
 800998c:	40240000 	.word	0x40240000
 8009990:	00000433 	.word	0x00000433
 8009994:	7ff00000 	.word	0x7ff00000
 8009998:	0800c573 	.word	0x0800c573
 800999c:	000002ea 	.word	0x000002ea
 80099a0:	0029      	movs	r1, r5
 80099a2:	692b      	ldr	r3, [r5, #16]
 80099a4:	310c      	adds	r1, #12
 80099a6:	1c9a      	adds	r2, r3, #2
 80099a8:	0092      	lsls	r2, r2, #2
 80099aa:	300c      	adds	r0, #12
 80099ac:	f000 f911 	bl	8009bd2 <memcpy>
 80099b0:	2201      	movs	r2, #1
 80099b2:	0021      	movs	r1, r4
 80099b4:	0038      	movs	r0, r7
 80099b6:	f000 fb2b 	bl	800a010 <__lshift>
 80099ba:	9b06      	ldr	r3, [sp, #24]
 80099bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099be:	930a      	str	r3, [sp, #40]	; 0x28
 80099c0:	3b01      	subs	r3, #1
 80099c2:	189b      	adds	r3, r3, r2
 80099c4:	2201      	movs	r2, #1
 80099c6:	002c      	movs	r4, r5
 80099c8:	0005      	movs	r5, r0
 80099ca:	9314      	str	r3, [sp, #80]	; 0x50
 80099cc:	9b08      	ldr	r3, [sp, #32]
 80099ce:	4013      	ands	r3, r2
 80099d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80099d2:	0031      	movs	r1, r6
 80099d4:	9805      	ldr	r0, [sp, #20]
 80099d6:	f7ff fa3d 	bl	8008e54 <quorem>
 80099da:	0003      	movs	r3, r0
 80099dc:	0021      	movs	r1, r4
 80099de:	3330      	adds	r3, #48	; 0x30
 80099e0:	900d      	str	r0, [sp, #52]	; 0x34
 80099e2:	9805      	ldr	r0, [sp, #20]
 80099e4:	9307      	str	r3, [sp, #28]
 80099e6:	f000 fb81 	bl	800a0ec <__mcmp>
 80099ea:	002a      	movs	r2, r5
 80099ec:	900e      	str	r0, [sp, #56]	; 0x38
 80099ee:	0031      	movs	r1, r6
 80099f0:	0038      	movs	r0, r7
 80099f2:	f000 fb97 	bl	800a124 <__mdiff>
 80099f6:	68c3      	ldr	r3, [r0, #12]
 80099f8:	9008      	str	r0, [sp, #32]
 80099fa:	9310      	str	r3, [sp, #64]	; 0x40
 80099fc:	2301      	movs	r3, #1
 80099fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009a00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d104      	bne.n	8009a10 <_dtoa_r+0xaa4>
 8009a06:	0001      	movs	r1, r0
 8009a08:	9805      	ldr	r0, [sp, #20]
 8009a0a:	f000 fb6f 	bl	800a0ec <__mcmp>
 8009a0e:	900c      	str	r0, [sp, #48]	; 0x30
 8009a10:	0038      	movs	r0, r7
 8009a12:	9908      	ldr	r1, [sp, #32]
 8009a14:	f000 f92a 	bl	8009c6c <_Bfree>
 8009a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	9308      	str	r3, [sp, #32]
 8009a20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a22:	4313      	orrs	r3, r2
 8009a24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a26:	4313      	orrs	r3, r2
 8009a28:	d10c      	bne.n	8009a44 <_dtoa_r+0xad8>
 8009a2a:	9b07      	ldr	r3, [sp, #28]
 8009a2c:	2b39      	cmp	r3, #57	; 0x39
 8009a2e:	d026      	beq.n	8009a7e <_dtoa_r+0xb12>
 8009a30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	dd02      	ble.n	8009a3c <_dtoa_r+0xad0>
 8009a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a38:	3331      	adds	r3, #49	; 0x31
 8009a3a:	9307      	str	r3, [sp, #28]
 8009a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a3e:	9a07      	ldr	r2, [sp, #28]
 8009a40:	701a      	strb	r2, [r3, #0]
 8009a42:	e76a      	b.n	800991a <_dtoa_r+0x9ae>
 8009a44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	db04      	blt.n	8009a54 <_dtoa_r+0xae8>
 8009a4a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a50:	4313      	orrs	r3, r2
 8009a52:	d11f      	bne.n	8009a94 <_dtoa_r+0xb28>
 8009a54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	ddf0      	ble.n	8009a3c <_dtoa_r+0xad0>
 8009a5a:	9905      	ldr	r1, [sp, #20]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	0038      	movs	r0, r7
 8009a60:	f000 fad6 	bl	800a010 <__lshift>
 8009a64:	0031      	movs	r1, r6
 8009a66:	9005      	str	r0, [sp, #20]
 8009a68:	f000 fb40 	bl	800a0ec <__mcmp>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	dc03      	bgt.n	8009a78 <_dtoa_r+0xb0c>
 8009a70:	d1e4      	bne.n	8009a3c <_dtoa_r+0xad0>
 8009a72:	9b07      	ldr	r3, [sp, #28]
 8009a74:	07db      	lsls	r3, r3, #31
 8009a76:	d5e1      	bpl.n	8009a3c <_dtoa_r+0xad0>
 8009a78:	9b07      	ldr	r3, [sp, #28]
 8009a7a:	2b39      	cmp	r3, #57	; 0x39
 8009a7c:	d1db      	bne.n	8009a36 <_dtoa_r+0xaca>
 8009a7e:	2339      	movs	r3, #57	; 0x39
 8009a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a82:	7013      	strb	r3, [r2, #0]
 8009a84:	9b08      	ldr	r3, [sp, #32]
 8009a86:	9308      	str	r3, [sp, #32]
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	781a      	ldrb	r2, [r3, #0]
 8009a8c:	2a39      	cmp	r2, #57	; 0x39
 8009a8e:	d068      	beq.n	8009b62 <_dtoa_r+0xbf6>
 8009a90:	3201      	adds	r2, #1
 8009a92:	e7d5      	b.n	8009a40 <_dtoa_r+0xad4>
 8009a94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	dd07      	ble.n	8009aaa <_dtoa_r+0xb3e>
 8009a9a:	9b07      	ldr	r3, [sp, #28]
 8009a9c:	2b39      	cmp	r3, #57	; 0x39
 8009a9e:	d0ee      	beq.n	8009a7e <_dtoa_r+0xb12>
 8009aa0:	9b07      	ldr	r3, [sp, #28]
 8009aa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	7013      	strb	r3, [r2, #0]
 8009aa8:	e737      	b.n	800991a <_dtoa_r+0x9ae>
 8009aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aac:	9a07      	ldr	r2, [sp, #28]
 8009aae:	701a      	strb	r2, [r3, #0]
 8009ab0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d03e      	beq.n	8009b36 <_dtoa_r+0xbca>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	220a      	movs	r2, #10
 8009abc:	9905      	ldr	r1, [sp, #20]
 8009abe:	0038      	movs	r0, r7
 8009ac0:	f000 f8f8 	bl	8009cb4 <__multadd>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	9005      	str	r0, [sp, #20]
 8009ac8:	220a      	movs	r2, #10
 8009aca:	0021      	movs	r1, r4
 8009acc:	0038      	movs	r0, r7
 8009ace:	42ac      	cmp	r4, r5
 8009ad0:	d106      	bne.n	8009ae0 <_dtoa_r+0xb74>
 8009ad2:	f000 f8ef 	bl	8009cb4 <__multadd>
 8009ad6:	0004      	movs	r4, r0
 8009ad8:	0005      	movs	r5, r0
 8009ada:	9b08      	ldr	r3, [sp, #32]
 8009adc:	930a      	str	r3, [sp, #40]	; 0x28
 8009ade:	e778      	b.n	80099d2 <_dtoa_r+0xa66>
 8009ae0:	f000 f8e8 	bl	8009cb4 <__multadd>
 8009ae4:	0029      	movs	r1, r5
 8009ae6:	0004      	movs	r4, r0
 8009ae8:	2300      	movs	r3, #0
 8009aea:	220a      	movs	r2, #10
 8009aec:	0038      	movs	r0, r7
 8009aee:	f000 f8e1 	bl	8009cb4 <__multadd>
 8009af2:	0005      	movs	r5, r0
 8009af4:	e7f1      	b.n	8009ada <_dtoa_r+0xb6e>
 8009af6:	9b07      	ldr	r3, [sp, #28]
 8009af8:	930c      	str	r3, [sp, #48]	; 0x30
 8009afa:	2400      	movs	r4, #0
 8009afc:	0031      	movs	r1, r6
 8009afe:	9805      	ldr	r0, [sp, #20]
 8009b00:	f7ff f9a8 	bl	8008e54 <quorem>
 8009b04:	9b06      	ldr	r3, [sp, #24]
 8009b06:	3030      	adds	r0, #48	; 0x30
 8009b08:	5518      	strb	r0, [r3, r4]
 8009b0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b0c:	3401      	adds	r4, #1
 8009b0e:	9007      	str	r0, [sp, #28]
 8009b10:	42a3      	cmp	r3, r4
 8009b12:	dd07      	ble.n	8009b24 <_dtoa_r+0xbb8>
 8009b14:	2300      	movs	r3, #0
 8009b16:	220a      	movs	r2, #10
 8009b18:	0038      	movs	r0, r7
 8009b1a:	9905      	ldr	r1, [sp, #20]
 8009b1c:	f000 f8ca 	bl	8009cb4 <__multadd>
 8009b20:	9005      	str	r0, [sp, #20]
 8009b22:	e7eb      	b.n	8009afc <_dtoa_r+0xb90>
 8009b24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b26:	2001      	movs	r0, #1
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	dd00      	ble.n	8009b2e <_dtoa_r+0xbc2>
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	2400      	movs	r4, #0
 8009b30:	9b06      	ldr	r3, [sp, #24]
 8009b32:	181b      	adds	r3, r3, r0
 8009b34:	9308      	str	r3, [sp, #32]
 8009b36:	9905      	ldr	r1, [sp, #20]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	0038      	movs	r0, r7
 8009b3c:	f000 fa68 	bl	800a010 <__lshift>
 8009b40:	0031      	movs	r1, r6
 8009b42:	9005      	str	r0, [sp, #20]
 8009b44:	f000 fad2 	bl	800a0ec <__mcmp>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	dc9b      	bgt.n	8009a84 <_dtoa_r+0xb18>
 8009b4c:	d102      	bne.n	8009b54 <_dtoa_r+0xbe8>
 8009b4e:	9b07      	ldr	r3, [sp, #28]
 8009b50:	07db      	lsls	r3, r3, #31
 8009b52:	d497      	bmi.n	8009a84 <_dtoa_r+0xb18>
 8009b54:	9b08      	ldr	r3, [sp, #32]
 8009b56:	9308      	str	r3, [sp, #32]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	781a      	ldrb	r2, [r3, #0]
 8009b5c:	2a30      	cmp	r2, #48	; 0x30
 8009b5e:	d0fa      	beq.n	8009b56 <_dtoa_r+0xbea>
 8009b60:	e6db      	b.n	800991a <_dtoa_r+0x9ae>
 8009b62:	9a06      	ldr	r2, [sp, #24]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d18e      	bne.n	8009a86 <_dtoa_r+0xb1a>
 8009b68:	9b02      	ldr	r3, [sp, #8]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	9302      	str	r3, [sp, #8]
 8009b6e:	2331      	movs	r3, #49	; 0x31
 8009b70:	e799      	b.n	8009aa6 <_dtoa_r+0xb3a>
 8009b72:	4b09      	ldr	r3, [pc, #36]	; (8009b98 <_dtoa_r+0xc2c>)
 8009b74:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009b76:	9306      	str	r3, [sp, #24]
 8009b78:	4b08      	ldr	r3, [pc, #32]	; (8009b9c <_dtoa_r+0xc30>)
 8009b7a:	2a00      	cmp	r2, #0
 8009b7c:	d001      	beq.n	8009b82 <_dtoa_r+0xc16>
 8009b7e:	f7ff fa3f 	bl	8009000 <_dtoa_r+0x94>
 8009b82:	f7ff fa3f 	bl	8009004 <_dtoa_r+0x98>
 8009b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	dcb6      	bgt.n	8009afa <_dtoa_r+0xb8e>
 8009b8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	dd00      	ble.n	8009b94 <_dtoa_r+0xc28>
 8009b92:	e6ac      	b.n	80098ee <_dtoa_r+0x982>
 8009b94:	e7b1      	b.n	8009afa <_dtoa_r+0xb8e>
 8009b96:	46c0      	nop			; (mov r8, r8)
 8009b98:	0800c4f4 	.word	0x0800c4f4
 8009b9c:	0800c4fc 	.word	0x0800c4fc

08009ba0 <_localeconv_r>:
 8009ba0:	4800      	ldr	r0, [pc, #0]	; (8009ba4 <_localeconv_r+0x4>)
 8009ba2:	4770      	bx	lr
 8009ba4:	20000160 	.word	0x20000160

08009ba8 <malloc>:
 8009ba8:	b510      	push	{r4, lr}
 8009baa:	4b03      	ldr	r3, [pc, #12]	; (8009bb8 <malloc+0x10>)
 8009bac:	0001      	movs	r1, r0
 8009bae:	6818      	ldr	r0, [r3, #0]
 8009bb0:	f000 fc4c 	bl	800a44c <_malloc_r>
 8009bb4:	bd10      	pop	{r4, pc}
 8009bb6:	46c0      	nop			; (mov r8, r8)
 8009bb8:	2000000c 	.word	0x2000000c

08009bbc <memchr>:
 8009bbc:	b2c9      	uxtb	r1, r1
 8009bbe:	1882      	adds	r2, r0, r2
 8009bc0:	4290      	cmp	r0, r2
 8009bc2:	d101      	bne.n	8009bc8 <memchr+0xc>
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	4770      	bx	lr
 8009bc8:	7803      	ldrb	r3, [r0, #0]
 8009bca:	428b      	cmp	r3, r1
 8009bcc:	d0fb      	beq.n	8009bc6 <memchr+0xa>
 8009bce:	3001      	adds	r0, #1
 8009bd0:	e7f6      	b.n	8009bc0 <memchr+0x4>

08009bd2 <memcpy>:
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	b510      	push	{r4, lr}
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d100      	bne.n	8009bdc <memcpy+0xa>
 8009bda:	bd10      	pop	{r4, pc}
 8009bdc:	5ccc      	ldrb	r4, [r1, r3]
 8009bde:	54c4      	strb	r4, [r0, r3]
 8009be0:	3301      	adds	r3, #1
 8009be2:	e7f8      	b.n	8009bd6 <memcpy+0x4>

08009be4 <_Balloc>:
 8009be4:	b570      	push	{r4, r5, r6, lr}
 8009be6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009be8:	0006      	movs	r6, r0
 8009bea:	000c      	movs	r4, r1
 8009bec:	2d00      	cmp	r5, #0
 8009bee:	d10e      	bne.n	8009c0e <_Balloc+0x2a>
 8009bf0:	2010      	movs	r0, #16
 8009bf2:	f7ff ffd9 	bl	8009ba8 <malloc>
 8009bf6:	1e02      	subs	r2, r0, #0
 8009bf8:	6270      	str	r0, [r6, #36]	; 0x24
 8009bfa:	d104      	bne.n	8009c06 <_Balloc+0x22>
 8009bfc:	2166      	movs	r1, #102	; 0x66
 8009bfe:	4b19      	ldr	r3, [pc, #100]	; (8009c64 <_Balloc+0x80>)
 8009c00:	4819      	ldr	r0, [pc, #100]	; (8009c68 <_Balloc+0x84>)
 8009c02:	f000 fe0d 	bl	800a820 <__assert_func>
 8009c06:	6045      	str	r5, [r0, #4]
 8009c08:	6085      	str	r5, [r0, #8]
 8009c0a:	6005      	str	r5, [r0, #0]
 8009c0c:	60c5      	str	r5, [r0, #12]
 8009c0e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009c10:	68eb      	ldr	r3, [r5, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d013      	beq.n	8009c3e <_Balloc+0x5a>
 8009c16:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c18:	00a2      	lsls	r2, r4, #2
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	189b      	adds	r3, r3, r2
 8009c1e:	6818      	ldr	r0, [r3, #0]
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d118      	bne.n	8009c56 <_Balloc+0x72>
 8009c24:	2101      	movs	r1, #1
 8009c26:	000d      	movs	r5, r1
 8009c28:	40a5      	lsls	r5, r4
 8009c2a:	1d6a      	adds	r2, r5, #5
 8009c2c:	0030      	movs	r0, r6
 8009c2e:	0092      	lsls	r2, r2, #2
 8009c30:	f000 fb74 	bl	800a31c <_calloc_r>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d00c      	beq.n	8009c52 <_Balloc+0x6e>
 8009c38:	6044      	str	r4, [r0, #4]
 8009c3a:	6085      	str	r5, [r0, #8]
 8009c3c:	e00d      	b.n	8009c5a <_Balloc+0x76>
 8009c3e:	2221      	movs	r2, #33	; 0x21
 8009c40:	2104      	movs	r1, #4
 8009c42:	0030      	movs	r0, r6
 8009c44:	f000 fb6a 	bl	800a31c <_calloc_r>
 8009c48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c4a:	60e8      	str	r0, [r5, #12]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1e1      	bne.n	8009c16 <_Balloc+0x32>
 8009c52:	2000      	movs	r0, #0
 8009c54:	bd70      	pop	{r4, r5, r6, pc}
 8009c56:	6802      	ldr	r2, [r0, #0]
 8009c58:	601a      	str	r2, [r3, #0]
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	6103      	str	r3, [r0, #16]
 8009c5e:	60c3      	str	r3, [r0, #12]
 8009c60:	e7f8      	b.n	8009c54 <_Balloc+0x70>
 8009c62:	46c0      	nop			; (mov r8, r8)
 8009c64:	0800c501 	.word	0x0800c501
 8009c68:	0800c584 	.word	0x0800c584

08009c6c <_Bfree>:
 8009c6c:	b570      	push	{r4, r5, r6, lr}
 8009c6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c70:	0005      	movs	r5, r0
 8009c72:	000c      	movs	r4, r1
 8009c74:	2e00      	cmp	r6, #0
 8009c76:	d10e      	bne.n	8009c96 <_Bfree+0x2a>
 8009c78:	2010      	movs	r0, #16
 8009c7a:	f7ff ff95 	bl	8009ba8 <malloc>
 8009c7e:	1e02      	subs	r2, r0, #0
 8009c80:	6268      	str	r0, [r5, #36]	; 0x24
 8009c82:	d104      	bne.n	8009c8e <_Bfree+0x22>
 8009c84:	218a      	movs	r1, #138	; 0x8a
 8009c86:	4b09      	ldr	r3, [pc, #36]	; (8009cac <_Bfree+0x40>)
 8009c88:	4809      	ldr	r0, [pc, #36]	; (8009cb0 <_Bfree+0x44>)
 8009c8a:	f000 fdc9 	bl	800a820 <__assert_func>
 8009c8e:	6046      	str	r6, [r0, #4]
 8009c90:	6086      	str	r6, [r0, #8]
 8009c92:	6006      	str	r6, [r0, #0]
 8009c94:	60c6      	str	r6, [r0, #12]
 8009c96:	2c00      	cmp	r4, #0
 8009c98:	d007      	beq.n	8009caa <_Bfree+0x3e>
 8009c9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c9c:	6862      	ldr	r2, [r4, #4]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	0092      	lsls	r2, r2, #2
 8009ca2:	189b      	adds	r3, r3, r2
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	6022      	str	r2, [r4, #0]
 8009ca8:	601c      	str	r4, [r3, #0]
 8009caa:	bd70      	pop	{r4, r5, r6, pc}
 8009cac:	0800c501 	.word	0x0800c501
 8009cb0:	0800c584 	.word	0x0800c584

08009cb4 <__multadd>:
 8009cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cb6:	000e      	movs	r6, r1
 8009cb8:	9001      	str	r0, [sp, #4]
 8009cba:	000c      	movs	r4, r1
 8009cbc:	001d      	movs	r5, r3
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	690f      	ldr	r7, [r1, #16]
 8009cc2:	3614      	adds	r6, #20
 8009cc4:	6833      	ldr	r3, [r6, #0]
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	b299      	uxth	r1, r3
 8009cca:	4351      	muls	r1, r2
 8009ccc:	0c1b      	lsrs	r3, r3, #16
 8009cce:	4353      	muls	r3, r2
 8009cd0:	1949      	adds	r1, r1, r5
 8009cd2:	0c0d      	lsrs	r5, r1, #16
 8009cd4:	195b      	adds	r3, r3, r5
 8009cd6:	0c1d      	lsrs	r5, r3, #16
 8009cd8:	b289      	uxth	r1, r1
 8009cda:	041b      	lsls	r3, r3, #16
 8009cdc:	185b      	adds	r3, r3, r1
 8009cde:	c608      	stmia	r6!, {r3}
 8009ce0:	4287      	cmp	r7, r0
 8009ce2:	dcef      	bgt.n	8009cc4 <__multadd+0x10>
 8009ce4:	2d00      	cmp	r5, #0
 8009ce6:	d022      	beq.n	8009d2e <__multadd+0x7a>
 8009ce8:	68a3      	ldr	r3, [r4, #8]
 8009cea:	42bb      	cmp	r3, r7
 8009cec:	dc19      	bgt.n	8009d22 <__multadd+0x6e>
 8009cee:	6863      	ldr	r3, [r4, #4]
 8009cf0:	9801      	ldr	r0, [sp, #4]
 8009cf2:	1c59      	adds	r1, r3, #1
 8009cf4:	f7ff ff76 	bl	8009be4 <_Balloc>
 8009cf8:	1e06      	subs	r6, r0, #0
 8009cfa:	d105      	bne.n	8009d08 <__multadd+0x54>
 8009cfc:	0002      	movs	r2, r0
 8009cfe:	21b5      	movs	r1, #181	; 0xb5
 8009d00:	4b0c      	ldr	r3, [pc, #48]	; (8009d34 <__multadd+0x80>)
 8009d02:	480d      	ldr	r0, [pc, #52]	; (8009d38 <__multadd+0x84>)
 8009d04:	f000 fd8c 	bl	800a820 <__assert_func>
 8009d08:	0021      	movs	r1, r4
 8009d0a:	6923      	ldr	r3, [r4, #16]
 8009d0c:	310c      	adds	r1, #12
 8009d0e:	1c9a      	adds	r2, r3, #2
 8009d10:	0092      	lsls	r2, r2, #2
 8009d12:	300c      	adds	r0, #12
 8009d14:	f7ff ff5d 	bl	8009bd2 <memcpy>
 8009d18:	0021      	movs	r1, r4
 8009d1a:	9801      	ldr	r0, [sp, #4]
 8009d1c:	f7ff ffa6 	bl	8009c6c <_Bfree>
 8009d20:	0034      	movs	r4, r6
 8009d22:	1d3b      	adds	r3, r7, #4
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	18e3      	adds	r3, r4, r3
 8009d28:	605d      	str	r5, [r3, #4]
 8009d2a:	1c7b      	adds	r3, r7, #1
 8009d2c:	6123      	str	r3, [r4, #16]
 8009d2e:	0020      	movs	r0, r4
 8009d30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d32:	46c0      	nop			; (mov r8, r8)
 8009d34:	0800c573 	.word	0x0800c573
 8009d38:	0800c584 	.word	0x0800c584

08009d3c <__hi0bits>:
 8009d3c:	0003      	movs	r3, r0
 8009d3e:	0c02      	lsrs	r2, r0, #16
 8009d40:	2000      	movs	r0, #0
 8009d42:	4282      	cmp	r2, r0
 8009d44:	d101      	bne.n	8009d4a <__hi0bits+0xe>
 8009d46:	041b      	lsls	r3, r3, #16
 8009d48:	3010      	adds	r0, #16
 8009d4a:	0e1a      	lsrs	r2, r3, #24
 8009d4c:	d101      	bne.n	8009d52 <__hi0bits+0x16>
 8009d4e:	3008      	adds	r0, #8
 8009d50:	021b      	lsls	r3, r3, #8
 8009d52:	0f1a      	lsrs	r2, r3, #28
 8009d54:	d101      	bne.n	8009d5a <__hi0bits+0x1e>
 8009d56:	3004      	adds	r0, #4
 8009d58:	011b      	lsls	r3, r3, #4
 8009d5a:	0f9a      	lsrs	r2, r3, #30
 8009d5c:	d101      	bne.n	8009d62 <__hi0bits+0x26>
 8009d5e:	3002      	adds	r0, #2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	db03      	blt.n	8009d6e <__hi0bits+0x32>
 8009d66:	3001      	adds	r0, #1
 8009d68:	005b      	lsls	r3, r3, #1
 8009d6a:	d400      	bmi.n	8009d6e <__hi0bits+0x32>
 8009d6c:	2020      	movs	r0, #32
 8009d6e:	4770      	bx	lr

08009d70 <__lo0bits>:
 8009d70:	6803      	ldr	r3, [r0, #0]
 8009d72:	0002      	movs	r2, r0
 8009d74:	2107      	movs	r1, #7
 8009d76:	0018      	movs	r0, r3
 8009d78:	4008      	ands	r0, r1
 8009d7a:	420b      	tst	r3, r1
 8009d7c:	d00d      	beq.n	8009d9a <__lo0bits+0x2a>
 8009d7e:	3906      	subs	r1, #6
 8009d80:	2000      	movs	r0, #0
 8009d82:	420b      	tst	r3, r1
 8009d84:	d105      	bne.n	8009d92 <__lo0bits+0x22>
 8009d86:	3002      	adds	r0, #2
 8009d88:	4203      	tst	r3, r0
 8009d8a:	d003      	beq.n	8009d94 <__lo0bits+0x24>
 8009d8c:	40cb      	lsrs	r3, r1
 8009d8e:	0008      	movs	r0, r1
 8009d90:	6013      	str	r3, [r2, #0]
 8009d92:	4770      	bx	lr
 8009d94:	089b      	lsrs	r3, r3, #2
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	e7fb      	b.n	8009d92 <__lo0bits+0x22>
 8009d9a:	b299      	uxth	r1, r3
 8009d9c:	2900      	cmp	r1, #0
 8009d9e:	d101      	bne.n	8009da4 <__lo0bits+0x34>
 8009da0:	2010      	movs	r0, #16
 8009da2:	0c1b      	lsrs	r3, r3, #16
 8009da4:	b2d9      	uxtb	r1, r3
 8009da6:	2900      	cmp	r1, #0
 8009da8:	d101      	bne.n	8009dae <__lo0bits+0x3e>
 8009daa:	3008      	adds	r0, #8
 8009dac:	0a1b      	lsrs	r3, r3, #8
 8009dae:	0719      	lsls	r1, r3, #28
 8009db0:	d101      	bne.n	8009db6 <__lo0bits+0x46>
 8009db2:	3004      	adds	r0, #4
 8009db4:	091b      	lsrs	r3, r3, #4
 8009db6:	0799      	lsls	r1, r3, #30
 8009db8:	d101      	bne.n	8009dbe <__lo0bits+0x4e>
 8009dba:	3002      	adds	r0, #2
 8009dbc:	089b      	lsrs	r3, r3, #2
 8009dbe:	07d9      	lsls	r1, r3, #31
 8009dc0:	d4e9      	bmi.n	8009d96 <__lo0bits+0x26>
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	085b      	lsrs	r3, r3, #1
 8009dc6:	d1e6      	bne.n	8009d96 <__lo0bits+0x26>
 8009dc8:	2020      	movs	r0, #32
 8009dca:	e7e2      	b.n	8009d92 <__lo0bits+0x22>

08009dcc <__i2b>:
 8009dcc:	b510      	push	{r4, lr}
 8009dce:	000c      	movs	r4, r1
 8009dd0:	2101      	movs	r1, #1
 8009dd2:	f7ff ff07 	bl	8009be4 <_Balloc>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d106      	bne.n	8009de8 <__i2b+0x1c>
 8009dda:	21a0      	movs	r1, #160	; 0xa0
 8009ddc:	0002      	movs	r2, r0
 8009dde:	4b04      	ldr	r3, [pc, #16]	; (8009df0 <__i2b+0x24>)
 8009de0:	4804      	ldr	r0, [pc, #16]	; (8009df4 <__i2b+0x28>)
 8009de2:	0049      	lsls	r1, r1, #1
 8009de4:	f000 fd1c 	bl	800a820 <__assert_func>
 8009de8:	2301      	movs	r3, #1
 8009dea:	6144      	str	r4, [r0, #20]
 8009dec:	6103      	str	r3, [r0, #16]
 8009dee:	bd10      	pop	{r4, pc}
 8009df0:	0800c573 	.word	0x0800c573
 8009df4:	0800c584 	.word	0x0800c584

08009df8 <__multiply>:
 8009df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dfa:	690b      	ldr	r3, [r1, #16]
 8009dfc:	0014      	movs	r4, r2
 8009dfe:	6912      	ldr	r2, [r2, #16]
 8009e00:	000d      	movs	r5, r1
 8009e02:	b089      	sub	sp, #36	; 0x24
 8009e04:	4293      	cmp	r3, r2
 8009e06:	da01      	bge.n	8009e0c <__multiply+0x14>
 8009e08:	0025      	movs	r5, r4
 8009e0a:	000c      	movs	r4, r1
 8009e0c:	692f      	ldr	r7, [r5, #16]
 8009e0e:	6926      	ldr	r6, [r4, #16]
 8009e10:	6869      	ldr	r1, [r5, #4]
 8009e12:	19bb      	adds	r3, r7, r6
 8009e14:	9302      	str	r3, [sp, #8]
 8009e16:	68ab      	ldr	r3, [r5, #8]
 8009e18:	19ba      	adds	r2, r7, r6
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	da00      	bge.n	8009e20 <__multiply+0x28>
 8009e1e:	3101      	adds	r1, #1
 8009e20:	f7ff fee0 	bl	8009be4 <_Balloc>
 8009e24:	9001      	str	r0, [sp, #4]
 8009e26:	2800      	cmp	r0, #0
 8009e28:	d106      	bne.n	8009e38 <__multiply+0x40>
 8009e2a:	215e      	movs	r1, #94	; 0x5e
 8009e2c:	0002      	movs	r2, r0
 8009e2e:	4b48      	ldr	r3, [pc, #288]	; (8009f50 <__multiply+0x158>)
 8009e30:	4848      	ldr	r0, [pc, #288]	; (8009f54 <__multiply+0x15c>)
 8009e32:	31ff      	adds	r1, #255	; 0xff
 8009e34:	f000 fcf4 	bl	800a820 <__assert_func>
 8009e38:	9b01      	ldr	r3, [sp, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	3314      	adds	r3, #20
 8009e3e:	469c      	mov	ip, r3
 8009e40:	19bb      	adds	r3, r7, r6
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4463      	add	r3, ip
 8009e46:	9303      	str	r3, [sp, #12]
 8009e48:	4663      	mov	r3, ip
 8009e4a:	9903      	ldr	r1, [sp, #12]
 8009e4c:	428b      	cmp	r3, r1
 8009e4e:	d32c      	bcc.n	8009eaa <__multiply+0xb2>
 8009e50:	002b      	movs	r3, r5
 8009e52:	0022      	movs	r2, r4
 8009e54:	3314      	adds	r3, #20
 8009e56:	00bf      	lsls	r7, r7, #2
 8009e58:	3214      	adds	r2, #20
 8009e5a:	9306      	str	r3, [sp, #24]
 8009e5c:	00b6      	lsls	r6, r6, #2
 8009e5e:	19db      	adds	r3, r3, r7
 8009e60:	9304      	str	r3, [sp, #16]
 8009e62:	1993      	adds	r3, r2, r6
 8009e64:	9307      	str	r3, [sp, #28]
 8009e66:	2304      	movs	r3, #4
 8009e68:	9305      	str	r3, [sp, #20]
 8009e6a:	002b      	movs	r3, r5
 8009e6c:	9904      	ldr	r1, [sp, #16]
 8009e6e:	3315      	adds	r3, #21
 8009e70:	9200      	str	r2, [sp, #0]
 8009e72:	4299      	cmp	r1, r3
 8009e74:	d305      	bcc.n	8009e82 <__multiply+0x8a>
 8009e76:	1b4b      	subs	r3, r1, r5
 8009e78:	3b15      	subs	r3, #21
 8009e7a:	089b      	lsrs	r3, r3, #2
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	9305      	str	r3, [sp, #20]
 8009e82:	9b07      	ldr	r3, [sp, #28]
 8009e84:	9a00      	ldr	r2, [sp, #0]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d311      	bcc.n	8009eae <__multiply+0xb6>
 8009e8a:	9b02      	ldr	r3, [sp, #8]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	dd06      	ble.n	8009e9e <__multiply+0xa6>
 8009e90:	9b03      	ldr	r3, [sp, #12]
 8009e92:	3b04      	subs	r3, #4
 8009e94:	9303      	str	r3, [sp, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d053      	beq.n	8009f46 <__multiply+0x14e>
 8009e9e:	9b01      	ldr	r3, [sp, #4]
 8009ea0:	9a02      	ldr	r2, [sp, #8]
 8009ea2:	0018      	movs	r0, r3
 8009ea4:	611a      	str	r2, [r3, #16]
 8009ea6:	b009      	add	sp, #36	; 0x24
 8009ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eaa:	c304      	stmia	r3!, {r2}
 8009eac:	e7cd      	b.n	8009e4a <__multiply+0x52>
 8009eae:	9b00      	ldr	r3, [sp, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	b298      	uxth	r0, r3
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d01b      	beq.n	8009ef0 <__multiply+0xf8>
 8009eb8:	4667      	mov	r7, ip
 8009eba:	2400      	movs	r4, #0
 8009ebc:	9e06      	ldr	r6, [sp, #24]
 8009ebe:	ce02      	ldmia	r6!, {r1}
 8009ec0:	683a      	ldr	r2, [r7, #0]
 8009ec2:	b28b      	uxth	r3, r1
 8009ec4:	4343      	muls	r3, r0
 8009ec6:	b292      	uxth	r2, r2
 8009ec8:	189b      	adds	r3, r3, r2
 8009eca:	191b      	adds	r3, r3, r4
 8009ecc:	0c0c      	lsrs	r4, r1, #16
 8009ece:	4344      	muls	r4, r0
 8009ed0:	683a      	ldr	r2, [r7, #0]
 8009ed2:	0c11      	lsrs	r1, r2, #16
 8009ed4:	1861      	adds	r1, r4, r1
 8009ed6:	0c1c      	lsrs	r4, r3, #16
 8009ed8:	1909      	adds	r1, r1, r4
 8009eda:	0c0c      	lsrs	r4, r1, #16
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	0409      	lsls	r1, r1, #16
 8009ee0:	430b      	orrs	r3, r1
 8009ee2:	c708      	stmia	r7!, {r3}
 8009ee4:	9b04      	ldr	r3, [sp, #16]
 8009ee6:	42b3      	cmp	r3, r6
 8009ee8:	d8e9      	bhi.n	8009ebe <__multiply+0xc6>
 8009eea:	4663      	mov	r3, ip
 8009eec:	9a05      	ldr	r2, [sp, #20]
 8009eee:	509c      	str	r4, [r3, r2]
 8009ef0:	9b00      	ldr	r3, [sp, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	0c1e      	lsrs	r6, r3, #16
 8009ef6:	d020      	beq.n	8009f3a <__multiply+0x142>
 8009ef8:	4663      	mov	r3, ip
 8009efa:	002c      	movs	r4, r5
 8009efc:	4660      	mov	r0, ip
 8009efe:	2700      	movs	r7, #0
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3414      	adds	r4, #20
 8009f04:	6822      	ldr	r2, [r4, #0]
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	b291      	uxth	r1, r2
 8009f0a:	4371      	muls	r1, r6
 8009f0c:	6802      	ldr	r2, [r0, #0]
 8009f0e:	0c12      	lsrs	r2, r2, #16
 8009f10:	1889      	adds	r1, r1, r2
 8009f12:	19cf      	adds	r7, r1, r7
 8009f14:	0439      	lsls	r1, r7, #16
 8009f16:	430b      	orrs	r3, r1
 8009f18:	6003      	str	r3, [r0, #0]
 8009f1a:	cc02      	ldmia	r4!, {r1}
 8009f1c:	6843      	ldr	r3, [r0, #4]
 8009f1e:	0c09      	lsrs	r1, r1, #16
 8009f20:	4371      	muls	r1, r6
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	0c3f      	lsrs	r7, r7, #16
 8009f26:	18cb      	adds	r3, r1, r3
 8009f28:	9a04      	ldr	r2, [sp, #16]
 8009f2a:	19db      	adds	r3, r3, r7
 8009f2c:	0c1f      	lsrs	r7, r3, #16
 8009f2e:	3004      	adds	r0, #4
 8009f30:	42a2      	cmp	r2, r4
 8009f32:	d8e7      	bhi.n	8009f04 <__multiply+0x10c>
 8009f34:	4662      	mov	r2, ip
 8009f36:	9905      	ldr	r1, [sp, #20]
 8009f38:	5053      	str	r3, [r2, r1]
 8009f3a:	9b00      	ldr	r3, [sp, #0]
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	2304      	movs	r3, #4
 8009f42:	449c      	add	ip, r3
 8009f44:	e79d      	b.n	8009e82 <__multiply+0x8a>
 8009f46:	9b02      	ldr	r3, [sp, #8]
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	9302      	str	r3, [sp, #8]
 8009f4c:	e79d      	b.n	8009e8a <__multiply+0x92>
 8009f4e:	46c0      	nop			; (mov r8, r8)
 8009f50:	0800c573 	.word	0x0800c573
 8009f54:	0800c584 	.word	0x0800c584

08009f58 <__pow5mult>:
 8009f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	0015      	movs	r5, r2
 8009f5e:	0007      	movs	r7, r0
 8009f60:	000e      	movs	r6, r1
 8009f62:	401a      	ands	r2, r3
 8009f64:	421d      	tst	r5, r3
 8009f66:	d008      	beq.n	8009f7a <__pow5mult+0x22>
 8009f68:	4925      	ldr	r1, [pc, #148]	; (800a000 <__pow5mult+0xa8>)
 8009f6a:	3a01      	subs	r2, #1
 8009f6c:	0092      	lsls	r2, r2, #2
 8009f6e:	5852      	ldr	r2, [r2, r1]
 8009f70:	2300      	movs	r3, #0
 8009f72:	0031      	movs	r1, r6
 8009f74:	f7ff fe9e 	bl	8009cb4 <__multadd>
 8009f78:	0006      	movs	r6, r0
 8009f7a:	10ad      	asrs	r5, r5, #2
 8009f7c:	d03d      	beq.n	8009ffa <__pow5mult+0xa2>
 8009f7e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009f80:	2c00      	cmp	r4, #0
 8009f82:	d10f      	bne.n	8009fa4 <__pow5mult+0x4c>
 8009f84:	2010      	movs	r0, #16
 8009f86:	f7ff fe0f 	bl	8009ba8 <malloc>
 8009f8a:	1e02      	subs	r2, r0, #0
 8009f8c:	6278      	str	r0, [r7, #36]	; 0x24
 8009f8e:	d105      	bne.n	8009f9c <__pow5mult+0x44>
 8009f90:	21d7      	movs	r1, #215	; 0xd7
 8009f92:	4b1c      	ldr	r3, [pc, #112]	; (800a004 <__pow5mult+0xac>)
 8009f94:	481c      	ldr	r0, [pc, #112]	; (800a008 <__pow5mult+0xb0>)
 8009f96:	0049      	lsls	r1, r1, #1
 8009f98:	f000 fc42 	bl	800a820 <__assert_func>
 8009f9c:	6044      	str	r4, [r0, #4]
 8009f9e:	6084      	str	r4, [r0, #8]
 8009fa0:	6004      	str	r4, [r0, #0]
 8009fa2:	60c4      	str	r4, [r0, #12]
 8009fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa6:	689c      	ldr	r4, [r3, #8]
 8009fa8:	9301      	str	r3, [sp, #4]
 8009faa:	2c00      	cmp	r4, #0
 8009fac:	d108      	bne.n	8009fc0 <__pow5mult+0x68>
 8009fae:	0038      	movs	r0, r7
 8009fb0:	4916      	ldr	r1, [pc, #88]	; (800a00c <__pow5mult+0xb4>)
 8009fb2:	f7ff ff0b 	bl	8009dcc <__i2b>
 8009fb6:	9b01      	ldr	r3, [sp, #4]
 8009fb8:	0004      	movs	r4, r0
 8009fba:	6098      	str	r0, [r3, #8]
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	6003      	str	r3, [r0, #0]
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	421d      	tst	r5, r3
 8009fc4:	d00a      	beq.n	8009fdc <__pow5mult+0x84>
 8009fc6:	0031      	movs	r1, r6
 8009fc8:	0022      	movs	r2, r4
 8009fca:	0038      	movs	r0, r7
 8009fcc:	f7ff ff14 	bl	8009df8 <__multiply>
 8009fd0:	0031      	movs	r1, r6
 8009fd2:	9001      	str	r0, [sp, #4]
 8009fd4:	0038      	movs	r0, r7
 8009fd6:	f7ff fe49 	bl	8009c6c <_Bfree>
 8009fda:	9e01      	ldr	r6, [sp, #4]
 8009fdc:	106d      	asrs	r5, r5, #1
 8009fde:	d00c      	beq.n	8009ffa <__pow5mult+0xa2>
 8009fe0:	6820      	ldr	r0, [r4, #0]
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	d107      	bne.n	8009ff6 <__pow5mult+0x9e>
 8009fe6:	0022      	movs	r2, r4
 8009fe8:	0021      	movs	r1, r4
 8009fea:	0038      	movs	r0, r7
 8009fec:	f7ff ff04 	bl	8009df8 <__multiply>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	6020      	str	r0, [r4, #0]
 8009ff4:	6003      	str	r3, [r0, #0]
 8009ff6:	0004      	movs	r4, r0
 8009ff8:	e7e2      	b.n	8009fc0 <__pow5mult+0x68>
 8009ffa:	0030      	movs	r0, r6
 8009ffc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ffe:	46c0      	nop			; (mov r8, r8)
 800a000:	0800c6d0 	.word	0x0800c6d0
 800a004:	0800c501 	.word	0x0800c501
 800a008:	0800c584 	.word	0x0800c584
 800a00c:	00000271 	.word	0x00000271

0800a010 <__lshift>:
 800a010:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a012:	000c      	movs	r4, r1
 800a014:	0017      	movs	r7, r2
 800a016:	6923      	ldr	r3, [r4, #16]
 800a018:	1155      	asrs	r5, r2, #5
 800a01a:	b087      	sub	sp, #28
 800a01c:	18eb      	adds	r3, r5, r3
 800a01e:	9302      	str	r3, [sp, #8]
 800a020:	3301      	adds	r3, #1
 800a022:	9301      	str	r3, [sp, #4]
 800a024:	6849      	ldr	r1, [r1, #4]
 800a026:	68a3      	ldr	r3, [r4, #8]
 800a028:	9004      	str	r0, [sp, #16]
 800a02a:	9a01      	ldr	r2, [sp, #4]
 800a02c:	4293      	cmp	r3, r2
 800a02e:	db10      	blt.n	800a052 <__lshift+0x42>
 800a030:	9804      	ldr	r0, [sp, #16]
 800a032:	f7ff fdd7 	bl	8009be4 <_Balloc>
 800a036:	2300      	movs	r3, #0
 800a038:	0002      	movs	r2, r0
 800a03a:	0006      	movs	r6, r0
 800a03c:	0019      	movs	r1, r3
 800a03e:	3214      	adds	r2, #20
 800a040:	4298      	cmp	r0, r3
 800a042:	d10c      	bne.n	800a05e <__lshift+0x4e>
 800a044:	21da      	movs	r1, #218	; 0xda
 800a046:	0002      	movs	r2, r0
 800a048:	4b26      	ldr	r3, [pc, #152]	; (800a0e4 <__lshift+0xd4>)
 800a04a:	4827      	ldr	r0, [pc, #156]	; (800a0e8 <__lshift+0xd8>)
 800a04c:	31ff      	adds	r1, #255	; 0xff
 800a04e:	f000 fbe7 	bl	800a820 <__assert_func>
 800a052:	3101      	adds	r1, #1
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	e7e8      	b.n	800a02a <__lshift+0x1a>
 800a058:	0098      	lsls	r0, r3, #2
 800a05a:	5011      	str	r1, [r2, r0]
 800a05c:	3301      	adds	r3, #1
 800a05e:	42ab      	cmp	r3, r5
 800a060:	dbfa      	blt.n	800a058 <__lshift+0x48>
 800a062:	43eb      	mvns	r3, r5
 800a064:	17db      	asrs	r3, r3, #31
 800a066:	401d      	ands	r5, r3
 800a068:	211f      	movs	r1, #31
 800a06a:	0023      	movs	r3, r4
 800a06c:	0038      	movs	r0, r7
 800a06e:	00ad      	lsls	r5, r5, #2
 800a070:	1955      	adds	r5, r2, r5
 800a072:	6922      	ldr	r2, [r4, #16]
 800a074:	3314      	adds	r3, #20
 800a076:	0092      	lsls	r2, r2, #2
 800a078:	4008      	ands	r0, r1
 800a07a:	4684      	mov	ip, r0
 800a07c:	189a      	adds	r2, r3, r2
 800a07e:	420f      	tst	r7, r1
 800a080:	d02a      	beq.n	800a0d8 <__lshift+0xc8>
 800a082:	3101      	adds	r1, #1
 800a084:	1a09      	subs	r1, r1, r0
 800a086:	9105      	str	r1, [sp, #20]
 800a088:	2100      	movs	r1, #0
 800a08a:	9503      	str	r5, [sp, #12]
 800a08c:	4667      	mov	r7, ip
 800a08e:	6818      	ldr	r0, [r3, #0]
 800a090:	40b8      	lsls	r0, r7
 800a092:	4301      	orrs	r1, r0
 800a094:	9803      	ldr	r0, [sp, #12]
 800a096:	c002      	stmia	r0!, {r1}
 800a098:	cb02      	ldmia	r3!, {r1}
 800a09a:	9003      	str	r0, [sp, #12]
 800a09c:	9805      	ldr	r0, [sp, #20]
 800a09e:	40c1      	lsrs	r1, r0
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d8f3      	bhi.n	800a08c <__lshift+0x7c>
 800a0a4:	0020      	movs	r0, r4
 800a0a6:	3015      	adds	r0, #21
 800a0a8:	2304      	movs	r3, #4
 800a0aa:	4282      	cmp	r2, r0
 800a0ac:	d304      	bcc.n	800a0b8 <__lshift+0xa8>
 800a0ae:	1b13      	subs	r3, r2, r4
 800a0b0:	3b15      	subs	r3, #21
 800a0b2:	089b      	lsrs	r3, r3, #2
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	50e9      	str	r1, [r5, r3]
 800a0ba:	2900      	cmp	r1, #0
 800a0bc:	d002      	beq.n	800a0c4 <__lshift+0xb4>
 800a0be:	9b02      	ldr	r3, [sp, #8]
 800a0c0:	3302      	adds	r3, #2
 800a0c2:	9301      	str	r3, [sp, #4]
 800a0c4:	9b01      	ldr	r3, [sp, #4]
 800a0c6:	9804      	ldr	r0, [sp, #16]
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	0021      	movs	r1, r4
 800a0cc:	6133      	str	r3, [r6, #16]
 800a0ce:	f7ff fdcd 	bl	8009c6c <_Bfree>
 800a0d2:	0030      	movs	r0, r6
 800a0d4:	b007      	add	sp, #28
 800a0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0d8:	cb02      	ldmia	r3!, {r1}
 800a0da:	c502      	stmia	r5!, {r1}
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d8fb      	bhi.n	800a0d8 <__lshift+0xc8>
 800a0e0:	e7f0      	b.n	800a0c4 <__lshift+0xb4>
 800a0e2:	46c0      	nop			; (mov r8, r8)
 800a0e4:	0800c573 	.word	0x0800c573
 800a0e8:	0800c584 	.word	0x0800c584

0800a0ec <__mcmp>:
 800a0ec:	6902      	ldr	r2, [r0, #16]
 800a0ee:	690b      	ldr	r3, [r1, #16]
 800a0f0:	b530      	push	{r4, r5, lr}
 800a0f2:	0004      	movs	r4, r0
 800a0f4:	1ad0      	subs	r0, r2, r3
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d10d      	bne.n	800a116 <__mcmp+0x2a>
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	3414      	adds	r4, #20
 800a0fe:	3114      	adds	r1, #20
 800a100:	18e2      	adds	r2, r4, r3
 800a102:	18c9      	adds	r1, r1, r3
 800a104:	3a04      	subs	r2, #4
 800a106:	3904      	subs	r1, #4
 800a108:	6815      	ldr	r5, [r2, #0]
 800a10a:	680b      	ldr	r3, [r1, #0]
 800a10c:	429d      	cmp	r5, r3
 800a10e:	d003      	beq.n	800a118 <__mcmp+0x2c>
 800a110:	2001      	movs	r0, #1
 800a112:	429d      	cmp	r5, r3
 800a114:	d303      	bcc.n	800a11e <__mcmp+0x32>
 800a116:	bd30      	pop	{r4, r5, pc}
 800a118:	4294      	cmp	r4, r2
 800a11a:	d3f3      	bcc.n	800a104 <__mcmp+0x18>
 800a11c:	e7fb      	b.n	800a116 <__mcmp+0x2a>
 800a11e:	4240      	negs	r0, r0
 800a120:	e7f9      	b.n	800a116 <__mcmp+0x2a>
	...

0800a124 <__mdiff>:
 800a124:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a126:	000e      	movs	r6, r1
 800a128:	0007      	movs	r7, r0
 800a12a:	0011      	movs	r1, r2
 800a12c:	0030      	movs	r0, r6
 800a12e:	b087      	sub	sp, #28
 800a130:	0014      	movs	r4, r2
 800a132:	f7ff ffdb 	bl	800a0ec <__mcmp>
 800a136:	1e05      	subs	r5, r0, #0
 800a138:	d110      	bne.n	800a15c <__mdiff+0x38>
 800a13a:	0001      	movs	r1, r0
 800a13c:	0038      	movs	r0, r7
 800a13e:	f7ff fd51 	bl	8009be4 <_Balloc>
 800a142:	1e02      	subs	r2, r0, #0
 800a144:	d104      	bne.n	800a150 <__mdiff+0x2c>
 800a146:	4b40      	ldr	r3, [pc, #256]	; (800a248 <__mdiff+0x124>)
 800a148:	4940      	ldr	r1, [pc, #256]	; (800a24c <__mdiff+0x128>)
 800a14a:	4841      	ldr	r0, [pc, #260]	; (800a250 <__mdiff+0x12c>)
 800a14c:	f000 fb68 	bl	800a820 <__assert_func>
 800a150:	2301      	movs	r3, #1
 800a152:	6145      	str	r5, [r0, #20]
 800a154:	6103      	str	r3, [r0, #16]
 800a156:	0010      	movs	r0, r2
 800a158:	b007      	add	sp, #28
 800a15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a15c:	2301      	movs	r3, #1
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	2800      	cmp	r0, #0
 800a162:	db04      	blt.n	800a16e <__mdiff+0x4a>
 800a164:	0023      	movs	r3, r4
 800a166:	0034      	movs	r4, r6
 800a168:	001e      	movs	r6, r3
 800a16a:	2300      	movs	r3, #0
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	0038      	movs	r0, r7
 800a170:	6861      	ldr	r1, [r4, #4]
 800a172:	f7ff fd37 	bl	8009be4 <_Balloc>
 800a176:	1e02      	subs	r2, r0, #0
 800a178:	d103      	bne.n	800a182 <__mdiff+0x5e>
 800a17a:	2190      	movs	r1, #144	; 0x90
 800a17c:	4b32      	ldr	r3, [pc, #200]	; (800a248 <__mdiff+0x124>)
 800a17e:	0089      	lsls	r1, r1, #2
 800a180:	e7e3      	b.n	800a14a <__mdiff+0x26>
 800a182:	9b01      	ldr	r3, [sp, #4]
 800a184:	2700      	movs	r7, #0
 800a186:	60c3      	str	r3, [r0, #12]
 800a188:	6920      	ldr	r0, [r4, #16]
 800a18a:	3414      	adds	r4, #20
 800a18c:	9401      	str	r4, [sp, #4]
 800a18e:	9b01      	ldr	r3, [sp, #4]
 800a190:	0084      	lsls	r4, r0, #2
 800a192:	191b      	adds	r3, r3, r4
 800a194:	0034      	movs	r4, r6
 800a196:	9302      	str	r3, [sp, #8]
 800a198:	6933      	ldr	r3, [r6, #16]
 800a19a:	3414      	adds	r4, #20
 800a19c:	0099      	lsls	r1, r3, #2
 800a19e:	1863      	adds	r3, r4, r1
 800a1a0:	9303      	str	r3, [sp, #12]
 800a1a2:	0013      	movs	r3, r2
 800a1a4:	3314      	adds	r3, #20
 800a1a6:	469c      	mov	ip, r3
 800a1a8:	9305      	str	r3, [sp, #20]
 800a1aa:	9b01      	ldr	r3, [sp, #4]
 800a1ac:	9304      	str	r3, [sp, #16]
 800a1ae:	9b04      	ldr	r3, [sp, #16]
 800a1b0:	cc02      	ldmia	r4!, {r1}
 800a1b2:	cb20      	ldmia	r3!, {r5}
 800a1b4:	9304      	str	r3, [sp, #16]
 800a1b6:	b2ab      	uxth	r3, r5
 800a1b8:	19df      	adds	r7, r3, r7
 800a1ba:	b28b      	uxth	r3, r1
 800a1bc:	1afb      	subs	r3, r7, r3
 800a1be:	0c09      	lsrs	r1, r1, #16
 800a1c0:	0c2d      	lsrs	r5, r5, #16
 800a1c2:	1a6d      	subs	r5, r5, r1
 800a1c4:	1419      	asrs	r1, r3, #16
 800a1c6:	186d      	adds	r5, r5, r1
 800a1c8:	4661      	mov	r1, ip
 800a1ca:	142f      	asrs	r7, r5, #16
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	042d      	lsls	r5, r5, #16
 800a1d0:	432b      	orrs	r3, r5
 800a1d2:	c108      	stmia	r1!, {r3}
 800a1d4:	9b03      	ldr	r3, [sp, #12]
 800a1d6:	468c      	mov	ip, r1
 800a1d8:	42a3      	cmp	r3, r4
 800a1da:	d8e8      	bhi.n	800a1ae <__mdiff+0x8a>
 800a1dc:	0031      	movs	r1, r6
 800a1de:	9c03      	ldr	r4, [sp, #12]
 800a1e0:	3115      	adds	r1, #21
 800a1e2:	2304      	movs	r3, #4
 800a1e4:	428c      	cmp	r4, r1
 800a1e6:	d304      	bcc.n	800a1f2 <__mdiff+0xce>
 800a1e8:	1ba3      	subs	r3, r4, r6
 800a1ea:	3b15      	subs	r3, #21
 800a1ec:	089b      	lsrs	r3, r3, #2
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	9901      	ldr	r1, [sp, #4]
 800a1f4:	18cc      	adds	r4, r1, r3
 800a1f6:	9905      	ldr	r1, [sp, #20]
 800a1f8:	0026      	movs	r6, r4
 800a1fa:	18cb      	adds	r3, r1, r3
 800a1fc:	469c      	mov	ip, r3
 800a1fe:	9902      	ldr	r1, [sp, #8]
 800a200:	428e      	cmp	r6, r1
 800a202:	d310      	bcc.n	800a226 <__mdiff+0x102>
 800a204:	9e02      	ldr	r6, [sp, #8]
 800a206:	1ee1      	subs	r1, r4, #3
 800a208:	2500      	movs	r5, #0
 800a20a:	428e      	cmp	r6, r1
 800a20c:	d304      	bcc.n	800a218 <__mdiff+0xf4>
 800a20e:	0031      	movs	r1, r6
 800a210:	3103      	adds	r1, #3
 800a212:	1b0c      	subs	r4, r1, r4
 800a214:	08a4      	lsrs	r4, r4, #2
 800a216:	00a5      	lsls	r5, r4, #2
 800a218:	195b      	adds	r3, r3, r5
 800a21a:	3b04      	subs	r3, #4
 800a21c:	6819      	ldr	r1, [r3, #0]
 800a21e:	2900      	cmp	r1, #0
 800a220:	d00f      	beq.n	800a242 <__mdiff+0x11e>
 800a222:	6110      	str	r0, [r2, #16]
 800a224:	e797      	b.n	800a156 <__mdiff+0x32>
 800a226:	ce02      	ldmia	r6!, {r1}
 800a228:	b28d      	uxth	r5, r1
 800a22a:	19ed      	adds	r5, r5, r7
 800a22c:	0c0f      	lsrs	r7, r1, #16
 800a22e:	1429      	asrs	r1, r5, #16
 800a230:	1879      	adds	r1, r7, r1
 800a232:	140f      	asrs	r7, r1, #16
 800a234:	b2ad      	uxth	r5, r5
 800a236:	0409      	lsls	r1, r1, #16
 800a238:	430d      	orrs	r5, r1
 800a23a:	4661      	mov	r1, ip
 800a23c:	c120      	stmia	r1!, {r5}
 800a23e:	468c      	mov	ip, r1
 800a240:	e7dd      	b.n	800a1fe <__mdiff+0xda>
 800a242:	3801      	subs	r0, #1
 800a244:	e7e9      	b.n	800a21a <__mdiff+0xf6>
 800a246:	46c0      	nop			; (mov r8, r8)
 800a248:	0800c573 	.word	0x0800c573
 800a24c:	00000232 	.word	0x00000232
 800a250:	0800c584 	.word	0x0800c584

0800a254 <__d2b>:
 800a254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a256:	2101      	movs	r1, #1
 800a258:	0014      	movs	r4, r2
 800a25a:	001e      	movs	r6, r3
 800a25c:	9f08      	ldr	r7, [sp, #32]
 800a25e:	f7ff fcc1 	bl	8009be4 <_Balloc>
 800a262:	1e05      	subs	r5, r0, #0
 800a264:	d105      	bne.n	800a272 <__d2b+0x1e>
 800a266:	0002      	movs	r2, r0
 800a268:	4b26      	ldr	r3, [pc, #152]	; (800a304 <__d2b+0xb0>)
 800a26a:	4927      	ldr	r1, [pc, #156]	; (800a308 <__d2b+0xb4>)
 800a26c:	4827      	ldr	r0, [pc, #156]	; (800a30c <__d2b+0xb8>)
 800a26e:	f000 fad7 	bl	800a820 <__assert_func>
 800a272:	0333      	lsls	r3, r6, #12
 800a274:	0076      	lsls	r6, r6, #1
 800a276:	0b1b      	lsrs	r3, r3, #12
 800a278:	0d76      	lsrs	r6, r6, #21
 800a27a:	d124      	bne.n	800a2c6 <__d2b+0x72>
 800a27c:	9301      	str	r3, [sp, #4]
 800a27e:	2c00      	cmp	r4, #0
 800a280:	d027      	beq.n	800a2d2 <__d2b+0x7e>
 800a282:	4668      	mov	r0, sp
 800a284:	9400      	str	r4, [sp, #0]
 800a286:	f7ff fd73 	bl	8009d70 <__lo0bits>
 800a28a:	9c00      	ldr	r4, [sp, #0]
 800a28c:	2800      	cmp	r0, #0
 800a28e:	d01e      	beq.n	800a2ce <__d2b+0x7a>
 800a290:	9b01      	ldr	r3, [sp, #4]
 800a292:	2120      	movs	r1, #32
 800a294:	001a      	movs	r2, r3
 800a296:	1a09      	subs	r1, r1, r0
 800a298:	408a      	lsls	r2, r1
 800a29a:	40c3      	lsrs	r3, r0
 800a29c:	4322      	orrs	r2, r4
 800a29e:	616a      	str	r2, [r5, #20]
 800a2a0:	9301      	str	r3, [sp, #4]
 800a2a2:	9c01      	ldr	r4, [sp, #4]
 800a2a4:	61ac      	str	r4, [r5, #24]
 800a2a6:	1e63      	subs	r3, r4, #1
 800a2a8:	419c      	sbcs	r4, r3
 800a2aa:	3401      	adds	r4, #1
 800a2ac:	612c      	str	r4, [r5, #16]
 800a2ae:	2e00      	cmp	r6, #0
 800a2b0:	d018      	beq.n	800a2e4 <__d2b+0x90>
 800a2b2:	4b17      	ldr	r3, [pc, #92]	; (800a310 <__d2b+0xbc>)
 800a2b4:	18f6      	adds	r6, r6, r3
 800a2b6:	2335      	movs	r3, #53	; 0x35
 800a2b8:	1836      	adds	r6, r6, r0
 800a2ba:	1a18      	subs	r0, r3, r0
 800a2bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2be:	603e      	str	r6, [r7, #0]
 800a2c0:	6018      	str	r0, [r3, #0]
 800a2c2:	0028      	movs	r0, r5
 800a2c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2c6:	2280      	movs	r2, #128	; 0x80
 800a2c8:	0352      	lsls	r2, r2, #13
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	e7d6      	b.n	800a27c <__d2b+0x28>
 800a2ce:	616c      	str	r4, [r5, #20]
 800a2d0:	e7e7      	b.n	800a2a2 <__d2b+0x4e>
 800a2d2:	a801      	add	r0, sp, #4
 800a2d4:	f7ff fd4c 	bl	8009d70 <__lo0bits>
 800a2d8:	2401      	movs	r4, #1
 800a2da:	9b01      	ldr	r3, [sp, #4]
 800a2dc:	612c      	str	r4, [r5, #16]
 800a2de:	616b      	str	r3, [r5, #20]
 800a2e0:	3020      	adds	r0, #32
 800a2e2:	e7e4      	b.n	800a2ae <__d2b+0x5a>
 800a2e4:	4b0b      	ldr	r3, [pc, #44]	; (800a314 <__d2b+0xc0>)
 800a2e6:	18c0      	adds	r0, r0, r3
 800a2e8:	4b0b      	ldr	r3, [pc, #44]	; (800a318 <__d2b+0xc4>)
 800a2ea:	6038      	str	r0, [r7, #0]
 800a2ec:	18e3      	adds	r3, r4, r3
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	18eb      	adds	r3, r5, r3
 800a2f2:	6958      	ldr	r0, [r3, #20]
 800a2f4:	f7ff fd22 	bl	8009d3c <__hi0bits>
 800a2f8:	0164      	lsls	r4, r4, #5
 800a2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2fc:	1a24      	subs	r4, r4, r0
 800a2fe:	601c      	str	r4, [r3, #0]
 800a300:	e7df      	b.n	800a2c2 <__d2b+0x6e>
 800a302:	46c0      	nop			; (mov r8, r8)
 800a304:	0800c573 	.word	0x0800c573
 800a308:	0000030a 	.word	0x0000030a
 800a30c:	0800c584 	.word	0x0800c584
 800a310:	fffffbcd 	.word	0xfffffbcd
 800a314:	fffffbce 	.word	0xfffffbce
 800a318:	3fffffff 	.word	0x3fffffff

0800a31c <_calloc_r>:
 800a31c:	b570      	push	{r4, r5, r6, lr}
 800a31e:	0c13      	lsrs	r3, r2, #16
 800a320:	0c0d      	lsrs	r5, r1, #16
 800a322:	d11e      	bne.n	800a362 <_calloc_r+0x46>
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10c      	bne.n	800a342 <_calloc_r+0x26>
 800a328:	b289      	uxth	r1, r1
 800a32a:	b294      	uxth	r4, r2
 800a32c:	434c      	muls	r4, r1
 800a32e:	0021      	movs	r1, r4
 800a330:	f000 f88c 	bl	800a44c <_malloc_r>
 800a334:	1e05      	subs	r5, r0, #0
 800a336:	d01b      	beq.n	800a370 <_calloc_r+0x54>
 800a338:	0022      	movs	r2, r4
 800a33a:	2100      	movs	r1, #0
 800a33c:	f7fe f8f4 	bl	8008528 <memset>
 800a340:	e016      	b.n	800a370 <_calloc_r+0x54>
 800a342:	1c1d      	adds	r5, r3, #0
 800a344:	1c0b      	adds	r3, r1, #0
 800a346:	b292      	uxth	r2, r2
 800a348:	b289      	uxth	r1, r1
 800a34a:	b29c      	uxth	r4, r3
 800a34c:	4351      	muls	r1, r2
 800a34e:	b2ab      	uxth	r3, r5
 800a350:	4363      	muls	r3, r4
 800a352:	0c0c      	lsrs	r4, r1, #16
 800a354:	191c      	adds	r4, r3, r4
 800a356:	0c22      	lsrs	r2, r4, #16
 800a358:	d107      	bne.n	800a36a <_calloc_r+0x4e>
 800a35a:	0424      	lsls	r4, r4, #16
 800a35c:	b289      	uxth	r1, r1
 800a35e:	430c      	orrs	r4, r1
 800a360:	e7e5      	b.n	800a32e <_calloc_r+0x12>
 800a362:	2b00      	cmp	r3, #0
 800a364:	d101      	bne.n	800a36a <_calloc_r+0x4e>
 800a366:	1c13      	adds	r3, r2, #0
 800a368:	e7ed      	b.n	800a346 <_calloc_r+0x2a>
 800a36a:	230c      	movs	r3, #12
 800a36c:	2500      	movs	r5, #0
 800a36e:	6003      	str	r3, [r0, #0]
 800a370:	0028      	movs	r0, r5
 800a372:	bd70      	pop	{r4, r5, r6, pc}

0800a374 <_free_r>:
 800a374:	b570      	push	{r4, r5, r6, lr}
 800a376:	0005      	movs	r5, r0
 800a378:	2900      	cmp	r1, #0
 800a37a:	d010      	beq.n	800a39e <_free_r+0x2a>
 800a37c:	1f0c      	subs	r4, r1, #4
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	da00      	bge.n	800a386 <_free_r+0x12>
 800a384:	18e4      	adds	r4, r4, r3
 800a386:	0028      	movs	r0, r5
 800a388:	f000 fa9e 	bl	800a8c8 <__malloc_lock>
 800a38c:	4a1d      	ldr	r2, [pc, #116]	; (800a404 <_free_r+0x90>)
 800a38e:	6813      	ldr	r3, [r2, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d105      	bne.n	800a3a0 <_free_r+0x2c>
 800a394:	6063      	str	r3, [r4, #4]
 800a396:	6014      	str	r4, [r2, #0]
 800a398:	0028      	movs	r0, r5
 800a39a:	f000 fa9d 	bl	800a8d8 <__malloc_unlock>
 800a39e:	bd70      	pop	{r4, r5, r6, pc}
 800a3a0:	42a3      	cmp	r3, r4
 800a3a2:	d908      	bls.n	800a3b6 <_free_r+0x42>
 800a3a4:	6821      	ldr	r1, [r4, #0]
 800a3a6:	1860      	adds	r0, r4, r1
 800a3a8:	4283      	cmp	r3, r0
 800a3aa:	d1f3      	bne.n	800a394 <_free_r+0x20>
 800a3ac:	6818      	ldr	r0, [r3, #0]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	1841      	adds	r1, r0, r1
 800a3b2:	6021      	str	r1, [r4, #0]
 800a3b4:	e7ee      	b.n	800a394 <_free_r+0x20>
 800a3b6:	001a      	movs	r2, r3
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <_free_r+0x4e>
 800a3be:	42a3      	cmp	r3, r4
 800a3c0:	d9f9      	bls.n	800a3b6 <_free_r+0x42>
 800a3c2:	6811      	ldr	r1, [r2, #0]
 800a3c4:	1850      	adds	r0, r2, r1
 800a3c6:	42a0      	cmp	r0, r4
 800a3c8:	d10b      	bne.n	800a3e2 <_free_r+0x6e>
 800a3ca:	6820      	ldr	r0, [r4, #0]
 800a3cc:	1809      	adds	r1, r1, r0
 800a3ce:	1850      	adds	r0, r2, r1
 800a3d0:	6011      	str	r1, [r2, #0]
 800a3d2:	4283      	cmp	r3, r0
 800a3d4:	d1e0      	bne.n	800a398 <_free_r+0x24>
 800a3d6:	6818      	ldr	r0, [r3, #0]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	1841      	adds	r1, r0, r1
 800a3dc:	6011      	str	r1, [r2, #0]
 800a3de:	6053      	str	r3, [r2, #4]
 800a3e0:	e7da      	b.n	800a398 <_free_r+0x24>
 800a3e2:	42a0      	cmp	r0, r4
 800a3e4:	d902      	bls.n	800a3ec <_free_r+0x78>
 800a3e6:	230c      	movs	r3, #12
 800a3e8:	602b      	str	r3, [r5, #0]
 800a3ea:	e7d5      	b.n	800a398 <_free_r+0x24>
 800a3ec:	6821      	ldr	r1, [r4, #0]
 800a3ee:	1860      	adds	r0, r4, r1
 800a3f0:	4283      	cmp	r3, r0
 800a3f2:	d103      	bne.n	800a3fc <_free_r+0x88>
 800a3f4:	6818      	ldr	r0, [r3, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	1841      	adds	r1, r0, r1
 800a3fa:	6021      	str	r1, [r4, #0]
 800a3fc:	6063      	str	r3, [r4, #4]
 800a3fe:	6054      	str	r4, [r2, #4]
 800a400:	e7ca      	b.n	800a398 <_free_r+0x24>
 800a402:	46c0      	nop			; (mov r8, r8)
 800a404:	2000043c 	.word	0x2000043c

0800a408 <sbrk_aligned>:
 800a408:	b570      	push	{r4, r5, r6, lr}
 800a40a:	4e0f      	ldr	r6, [pc, #60]	; (800a448 <sbrk_aligned+0x40>)
 800a40c:	000d      	movs	r5, r1
 800a40e:	6831      	ldr	r1, [r6, #0]
 800a410:	0004      	movs	r4, r0
 800a412:	2900      	cmp	r1, #0
 800a414:	d102      	bne.n	800a41c <sbrk_aligned+0x14>
 800a416:	f000 f9f1 	bl	800a7fc <_sbrk_r>
 800a41a:	6030      	str	r0, [r6, #0]
 800a41c:	0029      	movs	r1, r5
 800a41e:	0020      	movs	r0, r4
 800a420:	f000 f9ec 	bl	800a7fc <_sbrk_r>
 800a424:	1c43      	adds	r3, r0, #1
 800a426:	d00a      	beq.n	800a43e <sbrk_aligned+0x36>
 800a428:	2303      	movs	r3, #3
 800a42a:	1cc5      	adds	r5, r0, #3
 800a42c:	439d      	bics	r5, r3
 800a42e:	42a8      	cmp	r0, r5
 800a430:	d007      	beq.n	800a442 <sbrk_aligned+0x3a>
 800a432:	1a29      	subs	r1, r5, r0
 800a434:	0020      	movs	r0, r4
 800a436:	f000 f9e1 	bl	800a7fc <_sbrk_r>
 800a43a:	1c43      	adds	r3, r0, #1
 800a43c:	d101      	bne.n	800a442 <sbrk_aligned+0x3a>
 800a43e:	2501      	movs	r5, #1
 800a440:	426d      	negs	r5, r5
 800a442:	0028      	movs	r0, r5
 800a444:	bd70      	pop	{r4, r5, r6, pc}
 800a446:	46c0      	nop			; (mov r8, r8)
 800a448:	20000440 	.word	0x20000440

0800a44c <_malloc_r>:
 800a44c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a44e:	2203      	movs	r2, #3
 800a450:	1ccb      	adds	r3, r1, #3
 800a452:	4393      	bics	r3, r2
 800a454:	3308      	adds	r3, #8
 800a456:	0006      	movs	r6, r0
 800a458:	001f      	movs	r7, r3
 800a45a:	2b0c      	cmp	r3, #12
 800a45c:	d232      	bcs.n	800a4c4 <_malloc_r+0x78>
 800a45e:	270c      	movs	r7, #12
 800a460:	42b9      	cmp	r1, r7
 800a462:	d831      	bhi.n	800a4c8 <_malloc_r+0x7c>
 800a464:	0030      	movs	r0, r6
 800a466:	f000 fa2f 	bl	800a8c8 <__malloc_lock>
 800a46a:	4d32      	ldr	r5, [pc, #200]	; (800a534 <_malloc_r+0xe8>)
 800a46c:	682b      	ldr	r3, [r5, #0]
 800a46e:	001c      	movs	r4, r3
 800a470:	2c00      	cmp	r4, #0
 800a472:	d12e      	bne.n	800a4d2 <_malloc_r+0x86>
 800a474:	0039      	movs	r1, r7
 800a476:	0030      	movs	r0, r6
 800a478:	f7ff ffc6 	bl	800a408 <sbrk_aligned>
 800a47c:	0004      	movs	r4, r0
 800a47e:	1c43      	adds	r3, r0, #1
 800a480:	d11e      	bne.n	800a4c0 <_malloc_r+0x74>
 800a482:	682c      	ldr	r4, [r5, #0]
 800a484:	0025      	movs	r5, r4
 800a486:	2d00      	cmp	r5, #0
 800a488:	d14a      	bne.n	800a520 <_malloc_r+0xd4>
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	0029      	movs	r1, r5
 800a48e:	18e3      	adds	r3, r4, r3
 800a490:	0030      	movs	r0, r6
 800a492:	9301      	str	r3, [sp, #4]
 800a494:	f000 f9b2 	bl	800a7fc <_sbrk_r>
 800a498:	9b01      	ldr	r3, [sp, #4]
 800a49a:	4283      	cmp	r3, r0
 800a49c:	d143      	bne.n	800a526 <_malloc_r+0xda>
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	3703      	adds	r7, #3
 800a4a2:	1aff      	subs	r7, r7, r3
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	439f      	bics	r7, r3
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	2f0c      	cmp	r7, #12
 800a4ac:	d200      	bcs.n	800a4b0 <_malloc_r+0x64>
 800a4ae:	270c      	movs	r7, #12
 800a4b0:	0039      	movs	r1, r7
 800a4b2:	0030      	movs	r0, r6
 800a4b4:	f7ff ffa8 	bl	800a408 <sbrk_aligned>
 800a4b8:	1c43      	adds	r3, r0, #1
 800a4ba:	d034      	beq.n	800a526 <_malloc_r+0xda>
 800a4bc:	6823      	ldr	r3, [r4, #0]
 800a4be:	19df      	adds	r7, r3, r7
 800a4c0:	6027      	str	r7, [r4, #0]
 800a4c2:	e013      	b.n	800a4ec <_malloc_r+0xa0>
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	dacb      	bge.n	800a460 <_malloc_r+0x14>
 800a4c8:	230c      	movs	r3, #12
 800a4ca:	2500      	movs	r5, #0
 800a4cc:	6033      	str	r3, [r6, #0]
 800a4ce:	0028      	movs	r0, r5
 800a4d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4d2:	6822      	ldr	r2, [r4, #0]
 800a4d4:	1bd1      	subs	r1, r2, r7
 800a4d6:	d420      	bmi.n	800a51a <_malloc_r+0xce>
 800a4d8:	290b      	cmp	r1, #11
 800a4da:	d917      	bls.n	800a50c <_malloc_r+0xc0>
 800a4dc:	19e2      	adds	r2, r4, r7
 800a4de:	6027      	str	r7, [r4, #0]
 800a4e0:	42a3      	cmp	r3, r4
 800a4e2:	d111      	bne.n	800a508 <_malloc_r+0xbc>
 800a4e4:	602a      	str	r2, [r5, #0]
 800a4e6:	6863      	ldr	r3, [r4, #4]
 800a4e8:	6011      	str	r1, [r2, #0]
 800a4ea:	6053      	str	r3, [r2, #4]
 800a4ec:	0030      	movs	r0, r6
 800a4ee:	0025      	movs	r5, r4
 800a4f0:	f000 f9f2 	bl	800a8d8 <__malloc_unlock>
 800a4f4:	2207      	movs	r2, #7
 800a4f6:	350b      	adds	r5, #11
 800a4f8:	1d23      	adds	r3, r4, #4
 800a4fa:	4395      	bics	r5, r2
 800a4fc:	1aea      	subs	r2, r5, r3
 800a4fe:	429d      	cmp	r5, r3
 800a500:	d0e5      	beq.n	800a4ce <_malloc_r+0x82>
 800a502:	1b5b      	subs	r3, r3, r5
 800a504:	50a3      	str	r3, [r4, r2]
 800a506:	e7e2      	b.n	800a4ce <_malloc_r+0x82>
 800a508:	605a      	str	r2, [r3, #4]
 800a50a:	e7ec      	b.n	800a4e6 <_malloc_r+0x9a>
 800a50c:	6862      	ldr	r2, [r4, #4]
 800a50e:	42a3      	cmp	r3, r4
 800a510:	d101      	bne.n	800a516 <_malloc_r+0xca>
 800a512:	602a      	str	r2, [r5, #0]
 800a514:	e7ea      	b.n	800a4ec <_malloc_r+0xa0>
 800a516:	605a      	str	r2, [r3, #4]
 800a518:	e7e8      	b.n	800a4ec <_malloc_r+0xa0>
 800a51a:	0023      	movs	r3, r4
 800a51c:	6864      	ldr	r4, [r4, #4]
 800a51e:	e7a7      	b.n	800a470 <_malloc_r+0x24>
 800a520:	002c      	movs	r4, r5
 800a522:	686d      	ldr	r5, [r5, #4]
 800a524:	e7af      	b.n	800a486 <_malloc_r+0x3a>
 800a526:	230c      	movs	r3, #12
 800a528:	0030      	movs	r0, r6
 800a52a:	6033      	str	r3, [r6, #0]
 800a52c:	f000 f9d4 	bl	800a8d8 <__malloc_unlock>
 800a530:	e7cd      	b.n	800a4ce <_malloc_r+0x82>
 800a532:	46c0      	nop			; (mov r8, r8)
 800a534:	2000043c 	.word	0x2000043c

0800a538 <__ssputs_r>:
 800a538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a53a:	688e      	ldr	r6, [r1, #8]
 800a53c:	b085      	sub	sp, #20
 800a53e:	0007      	movs	r7, r0
 800a540:	000c      	movs	r4, r1
 800a542:	9203      	str	r2, [sp, #12]
 800a544:	9301      	str	r3, [sp, #4]
 800a546:	429e      	cmp	r6, r3
 800a548:	d83c      	bhi.n	800a5c4 <__ssputs_r+0x8c>
 800a54a:	2390      	movs	r3, #144	; 0x90
 800a54c:	898a      	ldrh	r2, [r1, #12]
 800a54e:	00db      	lsls	r3, r3, #3
 800a550:	421a      	tst	r2, r3
 800a552:	d034      	beq.n	800a5be <__ssputs_r+0x86>
 800a554:	6909      	ldr	r1, [r1, #16]
 800a556:	6823      	ldr	r3, [r4, #0]
 800a558:	6960      	ldr	r0, [r4, #20]
 800a55a:	1a5b      	subs	r3, r3, r1
 800a55c:	9302      	str	r3, [sp, #8]
 800a55e:	2303      	movs	r3, #3
 800a560:	4343      	muls	r3, r0
 800a562:	0fdd      	lsrs	r5, r3, #31
 800a564:	18ed      	adds	r5, r5, r3
 800a566:	9b01      	ldr	r3, [sp, #4]
 800a568:	9802      	ldr	r0, [sp, #8]
 800a56a:	3301      	adds	r3, #1
 800a56c:	181b      	adds	r3, r3, r0
 800a56e:	106d      	asrs	r5, r5, #1
 800a570:	42ab      	cmp	r3, r5
 800a572:	d900      	bls.n	800a576 <__ssputs_r+0x3e>
 800a574:	001d      	movs	r5, r3
 800a576:	0553      	lsls	r3, r2, #21
 800a578:	d532      	bpl.n	800a5e0 <__ssputs_r+0xa8>
 800a57a:	0029      	movs	r1, r5
 800a57c:	0038      	movs	r0, r7
 800a57e:	f7ff ff65 	bl	800a44c <_malloc_r>
 800a582:	1e06      	subs	r6, r0, #0
 800a584:	d109      	bne.n	800a59a <__ssputs_r+0x62>
 800a586:	230c      	movs	r3, #12
 800a588:	603b      	str	r3, [r7, #0]
 800a58a:	2340      	movs	r3, #64	; 0x40
 800a58c:	2001      	movs	r0, #1
 800a58e:	89a2      	ldrh	r2, [r4, #12]
 800a590:	4240      	negs	r0, r0
 800a592:	4313      	orrs	r3, r2
 800a594:	81a3      	strh	r3, [r4, #12]
 800a596:	b005      	add	sp, #20
 800a598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a59a:	9a02      	ldr	r2, [sp, #8]
 800a59c:	6921      	ldr	r1, [r4, #16]
 800a59e:	f7ff fb18 	bl	8009bd2 <memcpy>
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	4a14      	ldr	r2, [pc, #80]	; (800a5f8 <__ssputs_r+0xc0>)
 800a5a6:	401a      	ands	r2, r3
 800a5a8:	2380      	movs	r3, #128	; 0x80
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	81a3      	strh	r3, [r4, #12]
 800a5ae:	9b02      	ldr	r3, [sp, #8]
 800a5b0:	6126      	str	r6, [r4, #16]
 800a5b2:	18f6      	adds	r6, r6, r3
 800a5b4:	6026      	str	r6, [r4, #0]
 800a5b6:	6165      	str	r5, [r4, #20]
 800a5b8:	9e01      	ldr	r6, [sp, #4]
 800a5ba:	1aed      	subs	r5, r5, r3
 800a5bc:	60a5      	str	r5, [r4, #8]
 800a5be:	9b01      	ldr	r3, [sp, #4]
 800a5c0:	429e      	cmp	r6, r3
 800a5c2:	d900      	bls.n	800a5c6 <__ssputs_r+0x8e>
 800a5c4:	9e01      	ldr	r6, [sp, #4]
 800a5c6:	0032      	movs	r2, r6
 800a5c8:	9903      	ldr	r1, [sp, #12]
 800a5ca:	6820      	ldr	r0, [r4, #0]
 800a5cc:	f000 f968 	bl	800a8a0 <memmove>
 800a5d0:	68a3      	ldr	r3, [r4, #8]
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	1b9b      	subs	r3, r3, r6
 800a5d6:	60a3      	str	r3, [r4, #8]
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	199e      	adds	r6, r3, r6
 800a5dc:	6026      	str	r6, [r4, #0]
 800a5de:	e7da      	b.n	800a596 <__ssputs_r+0x5e>
 800a5e0:	002a      	movs	r2, r5
 800a5e2:	0038      	movs	r0, r7
 800a5e4:	f000 f980 	bl	800a8e8 <_realloc_r>
 800a5e8:	1e06      	subs	r6, r0, #0
 800a5ea:	d1e0      	bne.n	800a5ae <__ssputs_r+0x76>
 800a5ec:	0038      	movs	r0, r7
 800a5ee:	6921      	ldr	r1, [r4, #16]
 800a5f0:	f7ff fec0 	bl	800a374 <_free_r>
 800a5f4:	e7c7      	b.n	800a586 <__ssputs_r+0x4e>
 800a5f6:	46c0      	nop			; (mov r8, r8)
 800a5f8:	fffffb7f 	.word	0xfffffb7f

0800a5fc <_svfiprintf_r>:
 800a5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5fe:	b0a1      	sub	sp, #132	; 0x84
 800a600:	9003      	str	r0, [sp, #12]
 800a602:	001d      	movs	r5, r3
 800a604:	898b      	ldrh	r3, [r1, #12]
 800a606:	000f      	movs	r7, r1
 800a608:	0016      	movs	r6, r2
 800a60a:	061b      	lsls	r3, r3, #24
 800a60c:	d511      	bpl.n	800a632 <_svfiprintf_r+0x36>
 800a60e:	690b      	ldr	r3, [r1, #16]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10e      	bne.n	800a632 <_svfiprintf_r+0x36>
 800a614:	2140      	movs	r1, #64	; 0x40
 800a616:	f7ff ff19 	bl	800a44c <_malloc_r>
 800a61a:	6038      	str	r0, [r7, #0]
 800a61c:	6138      	str	r0, [r7, #16]
 800a61e:	2800      	cmp	r0, #0
 800a620:	d105      	bne.n	800a62e <_svfiprintf_r+0x32>
 800a622:	230c      	movs	r3, #12
 800a624:	9a03      	ldr	r2, [sp, #12]
 800a626:	3801      	subs	r0, #1
 800a628:	6013      	str	r3, [r2, #0]
 800a62a:	b021      	add	sp, #132	; 0x84
 800a62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a62e:	2340      	movs	r3, #64	; 0x40
 800a630:	617b      	str	r3, [r7, #20]
 800a632:	2300      	movs	r3, #0
 800a634:	ac08      	add	r4, sp, #32
 800a636:	6163      	str	r3, [r4, #20]
 800a638:	3320      	adds	r3, #32
 800a63a:	7663      	strb	r3, [r4, #25]
 800a63c:	3310      	adds	r3, #16
 800a63e:	76a3      	strb	r3, [r4, #26]
 800a640:	9507      	str	r5, [sp, #28]
 800a642:	0035      	movs	r5, r6
 800a644:	782b      	ldrb	r3, [r5, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <_svfiprintf_r+0x52>
 800a64a:	2b25      	cmp	r3, #37	; 0x25
 800a64c:	d147      	bne.n	800a6de <_svfiprintf_r+0xe2>
 800a64e:	1bab      	subs	r3, r5, r6
 800a650:	9305      	str	r3, [sp, #20]
 800a652:	42b5      	cmp	r5, r6
 800a654:	d00c      	beq.n	800a670 <_svfiprintf_r+0x74>
 800a656:	0032      	movs	r2, r6
 800a658:	0039      	movs	r1, r7
 800a65a:	9803      	ldr	r0, [sp, #12]
 800a65c:	f7ff ff6c 	bl	800a538 <__ssputs_r>
 800a660:	1c43      	adds	r3, r0, #1
 800a662:	d100      	bne.n	800a666 <_svfiprintf_r+0x6a>
 800a664:	e0ae      	b.n	800a7c4 <_svfiprintf_r+0x1c8>
 800a666:	6962      	ldr	r2, [r4, #20]
 800a668:	9b05      	ldr	r3, [sp, #20]
 800a66a:	4694      	mov	ip, r2
 800a66c:	4463      	add	r3, ip
 800a66e:	6163      	str	r3, [r4, #20]
 800a670:	782b      	ldrb	r3, [r5, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d100      	bne.n	800a678 <_svfiprintf_r+0x7c>
 800a676:	e0a5      	b.n	800a7c4 <_svfiprintf_r+0x1c8>
 800a678:	2201      	movs	r2, #1
 800a67a:	2300      	movs	r3, #0
 800a67c:	4252      	negs	r2, r2
 800a67e:	6062      	str	r2, [r4, #4]
 800a680:	a904      	add	r1, sp, #16
 800a682:	3254      	adds	r2, #84	; 0x54
 800a684:	1852      	adds	r2, r2, r1
 800a686:	1c6e      	adds	r6, r5, #1
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	60e3      	str	r3, [r4, #12]
 800a68c:	60a3      	str	r3, [r4, #8]
 800a68e:	7013      	strb	r3, [r2, #0]
 800a690:	65a3      	str	r3, [r4, #88]	; 0x58
 800a692:	2205      	movs	r2, #5
 800a694:	7831      	ldrb	r1, [r6, #0]
 800a696:	4854      	ldr	r0, [pc, #336]	; (800a7e8 <_svfiprintf_r+0x1ec>)
 800a698:	f7ff fa90 	bl	8009bbc <memchr>
 800a69c:	1c75      	adds	r5, r6, #1
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d11f      	bne.n	800a6e2 <_svfiprintf_r+0xe6>
 800a6a2:	6822      	ldr	r2, [r4, #0]
 800a6a4:	06d3      	lsls	r3, r2, #27
 800a6a6:	d504      	bpl.n	800a6b2 <_svfiprintf_r+0xb6>
 800a6a8:	2353      	movs	r3, #83	; 0x53
 800a6aa:	a904      	add	r1, sp, #16
 800a6ac:	185b      	adds	r3, r3, r1
 800a6ae:	2120      	movs	r1, #32
 800a6b0:	7019      	strb	r1, [r3, #0]
 800a6b2:	0713      	lsls	r3, r2, #28
 800a6b4:	d504      	bpl.n	800a6c0 <_svfiprintf_r+0xc4>
 800a6b6:	2353      	movs	r3, #83	; 0x53
 800a6b8:	a904      	add	r1, sp, #16
 800a6ba:	185b      	adds	r3, r3, r1
 800a6bc:	212b      	movs	r1, #43	; 0x2b
 800a6be:	7019      	strb	r1, [r3, #0]
 800a6c0:	7833      	ldrb	r3, [r6, #0]
 800a6c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6c4:	d016      	beq.n	800a6f4 <_svfiprintf_r+0xf8>
 800a6c6:	0035      	movs	r5, r6
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	200a      	movs	r0, #10
 800a6cc:	68e3      	ldr	r3, [r4, #12]
 800a6ce:	782a      	ldrb	r2, [r5, #0]
 800a6d0:	1c6e      	adds	r6, r5, #1
 800a6d2:	3a30      	subs	r2, #48	; 0x30
 800a6d4:	2a09      	cmp	r2, #9
 800a6d6:	d94e      	bls.n	800a776 <_svfiprintf_r+0x17a>
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	d111      	bne.n	800a700 <_svfiprintf_r+0x104>
 800a6dc:	e017      	b.n	800a70e <_svfiprintf_r+0x112>
 800a6de:	3501      	adds	r5, #1
 800a6e0:	e7b0      	b.n	800a644 <_svfiprintf_r+0x48>
 800a6e2:	4b41      	ldr	r3, [pc, #260]	; (800a7e8 <_svfiprintf_r+0x1ec>)
 800a6e4:	6822      	ldr	r2, [r4, #0]
 800a6e6:	1ac0      	subs	r0, r0, r3
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	4083      	lsls	r3, r0
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	002e      	movs	r6, r5
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	e7ce      	b.n	800a692 <_svfiprintf_r+0x96>
 800a6f4:	9b07      	ldr	r3, [sp, #28]
 800a6f6:	1d19      	adds	r1, r3, #4
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	9107      	str	r1, [sp, #28]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	db01      	blt.n	800a704 <_svfiprintf_r+0x108>
 800a700:	930b      	str	r3, [sp, #44]	; 0x2c
 800a702:	e004      	b.n	800a70e <_svfiprintf_r+0x112>
 800a704:	425b      	negs	r3, r3
 800a706:	60e3      	str	r3, [r4, #12]
 800a708:	2302      	movs	r3, #2
 800a70a:	4313      	orrs	r3, r2
 800a70c:	6023      	str	r3, [r4, #0]
 800a70e:	782b      	ldrb	r3, [r5, #0]
 800a710:	2b2e      	cmp	r3, #46	; 0x2e
 800a712:	d10a      	bne.n	800a72a <_svfiprintf_r+0x12e>
 800a714:	786b      	ldrb	r3, [r5, #1]
 800a716:	2b2a      	cmp	r3, #42	; 0x2a
 800a718:	d135      	bne.n	800a786 <_svfiprintf_r+0x18a>
 800a71a:	9b07      	ldr	r3, [sp, #28]
 800a71c:	3502      	adds	r5, #2
 800a71e:	1d1a      	adds	r2, r3, #4
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	9207      	str	r2, [sp, #28]
 800a724:	2b00      	cmp	r3, #0
 800a726:	db2b      	blt.n	800a780 <_svfiprintf_r+0x184>
 800a728:	9309      	str	r3, [sp, #36]	; 0x24
 800a72a:	4e30      	ldr	r6, [pc, #192]	; (800a7ec <_svfiprintf_r+0x1f0>)
 800a72c:	2203      	movs	r2, #3
 800a72e:	0030      	movs	r0, r6
 800a730:	7829      	ldrb	r1, [r5, #0]
 800a732:	f7ff fa43 	bl	8009bbc <memchr>
 800a736:	2800      	cmp	r0, #0
 800a738:	d006      	beq.n	800a748 <_svfiprintf_r+0x14c>
 800a73a:	2340      	movs	r3, #64	; 0x40
 800a73c:	1b80      	subs	r0, r0, r6
 800a73e:	4083      	lsls	r3, r0
 800a740:	6822      	ldr	r2, [r4, #0]
 800a742:	3501      	adds	r5, #1
 800a744:	4313      	orrs	r3, r2
 800a746:	6023      	str	r3, [r4, #0]
 800a748:	7829      	ldrb	r1, [r5, #0]
 800a74a:	2206      	movs	r2, #6
 800a74c:	4828      	ldr	r0, [pc, #160]	; (800a7f0 <_svfiprintf_r+0x1f4>)
 800a74e:	1c6e      	adds	r6, r5, #1
 800a750:	7621      	strb	r1, [r4, #24]
 800a752:	f7ff fa33 	bl	8009bbc <memchr>
 800a756:	2800      	cmp	r0, #0
 800a758:	d03c      	beq.n	800a7d4 <_svfiprintf_r+0x1d8>
 800a75a:	4b26      	ldr	r3, [pc, #152]	; (800a7f4 <_svfiprintf_r+0x1f8>)
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d125      	bne.n	800a7ac <_svfiprintf_r+0x1b0>
 800a760:	2207      	movs	r2, #7
 800a762:	9b07      	ldr	r3, [sp, #28]
 800a764:	3307      	adds	r3, #7
 800a766:	4393      	bics	r3, r2
 800a768:	3308      	adds	r3, #8
 800a76a:	9307      	str	r3, [sp, #28]
 800a76c:	6963      	ldr	r3, [r4, #20]
 800a76e:	9a04      	ldr	r2, [sp, #16]
 800a770:	189b      	adds	r3, r3, r2
 800a772:	6163      	str	r3, [r4, #20]
 800a774:	e765      	b.n	800a642 <_svfiprintf_r+0x46>
 800a776:	4343      	muls	r3, r0
 800a778:	0035      	movs	r5, r6
 800a77a:	2101      	movs	r1, #1
 800a77c:	189b      	adds	r3, r3, r2
 800a77e:	e7a6      	b.n	800a6ce <_svfiprintf_r+0xd2>
 800a780:	2301      	movs	r3, #1
 800a782:	425b      	negs	r3, r3
 800a784:	e7d0      	b.n	800a728 <_svfiprintf_r+0x12c>
 800a786:	2300      	movs	r3, #0
 800a788:	200a      	movs	r0, #10
 800a78a:	001a      	movs	r2, r3
 800a78c:	3501      	adds	r5, #1
 800a78e:	6063      	str	r3, [r4, #4]
 800a790:	7829      	ldrb	r1, [r5, #0]
 800a792:	1c6e      	adds	r6, r5, #1
 800a794:	3930      	subs	r1, #48	; 0x30
 800a796:	2909      	cmp	r1, #9
 800a798:	d903      	bls.n	800a7a2 <_svfiprintf_r+0x1a6>
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d0c5      	beq.n	800a72a <_svfiprintf_r+0x12e>
 800a79e:	9209      	str	r2, [sp, #36]	; 0x24
 800a7a0:	e7c3      	b.n	800a72a <_svfiprintf_r+0x12e>
 800a7a2:	4342      	muls	r2, r0
 800a7a4:	0035      	movs	r5, r6
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	1852      	adds	r2, r2, r1
 800a7aa:	e7f1      	b.n	800a790 <_svfiprintf_r+0x194>
 800a7ac:	ab07      	add	r3, sp, #28
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	003a      	movs	r2, r7
 800a7b2:	0021      	movs	r1, r4
 800a7b4:	4b10      	ldr	r3, [pc, #64]	; (800a7f8 <_svfiprintf_r+0x1fc>)
 800a7b6:	9803      	ldr	r0, [sp, #12]
 800a7b8:	f7fd ff68 	bl	800868c <_printf_float>
 800a7bc:	9004      	str	r0, [sp, #16]
 800a7be:	9b04      	ldr	r3, [sp, #16]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	d1d3      	bne.n	800a76c <_svfiprintf_r+0x170>
 800a7c4:	89bb      	ldrh	r3, [r7, #12]
 800a7c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a7c8:	065b      	lsls	r3, r3, #25
 800a7ca:	d400      	bmi.n	800a7ce <_svfiprintf_r+0x1d2>
 800a7cc:	e72d      	b.n	800a62a <_svfiprintf_r+0x2e>
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	4240      	negs	r0, r0
 800a7d2:	e72a      	b.n	800a62a <_svfiprintf_r+0x2e>
 800a7d4:	ab07      	add	r3, sp, #28
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	003a      	movs	r2, r7
 800a7da:	0021      	movs	r1, r4
 800a7dc:	4b06      	ldr	r3, [pc, #24]	; (800a7f8 <_svfiprintf_r+0x1fc>)
 800a7de:	9803      	ldr	r0, [sp, #12]
 800a7e0:	f7fe fa06 	bl	8008bf0 <_printf_i>
 800a7e4:	e7ea      	b.n	800a7bc <_svfiprintf_r+0x1c0>
 800a7e6:	46c0      	nop			; (mov r8, r8)
 800a7e8:	0800c6dc 	.word	0x0800c6dc
 800a7ec:	0800c6e2 	.word	0x0800c6e2
 800a7f0:	0800c6e6 	.word	0x0800c6e6
 800a7f4:	0800868d 	.word	0x0800868d
 800a7f8:	0800a539 	.word	0x0800a539

0800a7fc <_sbrk_r>:
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	b570      	push	{r4, r5, r6, lr}
 800a800:	4d06      	ldr	r5, [pc, #24]	; (800a81c <_sbrk_r+0x20>)
 800a802:	0004      	movs	r4, r0
 800a804:	0008      	movs	r0, r1
 800a806:	602b      	str	r3, [r5, #0]
 800a808:	f7fa f952 	bl	8004ab0 <_sbrk>
 800a80c:	1c43      	adds	r3, r0, #1
 800a80e:	d103      	bne.n	800a818 <_sbrk_r+0x1c>
 800a810:	682b      	ldr	r3, [r5, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d000      	beq.n	800a818 <_sbrk_r+0x1c>
 800a816:	6023      	str	r3, [r4, #0]
 800a818:	bd70      	pop	{r4, r5, r6, pc}
 800a81a:	46c0      	nop			; (mov r8, r8)
 800a81c:	20000444 	.word	0x20000444

0800a820 <__assert_func>:
 800a820:	b530      	push	{r4, r5, lr}
 800a822:	0014      	movs	r4, r2
 800a824:	001a      	movs	r2, r3
 800a826:	4b09      	ldr	r3, [pc, #36]	; (800a84c <__assert_func+0x2c>)
 800a828:	0005      	movs	r5, r0
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	b085      	sub	sp, #20
 800a82e:	68d8      	ldr	r0, [r3, #12]
 800a830:	4b07      	ldr	r3, [pc, #28]	; (800a850 <__assert_func+0x30>)
 800a832:	2c00      	cmp	r4, #0
 800a834:	d101      	bne.n	800a83a <__assert_func+0x1a>
 800a836:	4b07      	ldr	r3, [pc, #28]	; (800a854 <__assert_func+0x34>)
 800a838:	001c      	movs	r4, r3
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	9100      	str	r1, [sp, #0]
 800a83e:	002b      	movs	r3, r5
 800a840:	4905      	ldr	r1, [pc, #20]	; (800a858 <__assert_func+0x38>)
 800a842:	9402      	str	r4, [sp, #8]
 800a844:	f000 f80a 	bl	800a85c <fiprintf>
 800a848:	f000 faba 	bl	800adc0 <abort>
 800a84c:	2000000c 	.word	0x2000000c
 800a850:	0800c6ed 	.word	0x0800c6ed
 800a854:	0800c728 	.word	0x0800c728
 800a858:	0800c6fa 	.word	0x0800c6fa

0800a85c <fiprintf>:
 800a85c:	b40e      	push	{r1, r2, r3}
 800a85e:	b503      	push	{r0, r1, lr}
 800a860:	0001      	movs	r1, r0
 800a862:	ab03      	add	r3, sp, #12
 800a864:	4804      	ldr	r0, [pc, #16]	; (800a878 <fiprintf+0x1c>)
 800a866:	cb04      	ldmia	r3!, {r2}
 800a868:	6800      	ldr	r0, [r0, #0]
 800a86a:	9301      	str	r3, [sp, #4]
 800a86c:	f000 f892 	bl	800a994 <_vfiprintf_r>
 800a870:	b002      	add	sp, #8
 800a872:	bc08      	pop	{r3}
 800a874:	b003      	add	sp, #12
 800a876:	4718      	bx	r3
 800a878:	2000000c 	.word	0x2000000c

0800a87c <__ascii_mbtowc>:
 800a87c:	b082      	sub	sp, #8
 800a87e:	2900      	cmp	r1, #0
 800a880:	d100      	bne.n	800a884 <__ascii_mbtowc+0x8>
 800a882:	a901      	add	r1, sp, #4
 800a884:	1e10      	subs	r0, r2, #0
 800a886:	d006      	beq.n	800a896 <__ascii_mbtowc+0x1a>
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d006      	beq.n	800a89a <__ascii_mbtowc+0x1e>
 800a88c:	7813      	ldrb	r3, [r2, #0]
 800a88e:	600b      	str	r3, [r1, #0]
 800a890:	7810      	ldrb	r0, [r2, #0]
 800a892:	1e43      	subs	r3, r0, #1
 800a894:	4198      	sbcs	r0, r3
 800a896:	b002      	add	sp, #8
 800a898:	4770      	bx	lr
 800a89a:	2002      	movs	r0, #2
 800a89c:	4240      	negs	r0, r0
 800a89e:	e7fa      	b.n	800a896 <__ascii_mbtowc+0x1a>

0800a8a0 <memmove>:
 800a8a0:	b510      	push	{r4, lr}
 800a8a2:	4288      	cmp	r0, r1
 800a8a4:	d902      	bls.n	800a8ac <memmove+0xc>
 800a8a6:	188b      	adds	r3, r1, r2
 800a8a8:	4298      	cmp	r0, r3
 800a8aa:	d303      	bcc.n	800a8b4 <memmove+0x14>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	e007      	b.n	800a8c0 <memmove+0x20>
 800a8b0:	5c8b      	ldrb	r3, [r1, r2]
 800a8b2:	5483      	strb	r3, [r0, r2]
 800a8b4:	3a01      	subs	r2, #1
 800a8b6:	d2fb      	bcs.n	800a8b0 <memmove+0x10>
 800a8b8:	bd10      	pop	{r4, pc}
 800a8ba:	5ccc      	ldrb	r4, [r1, r3]
 800a8bc:	54c4      	strb	r4, [r0, r3]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d1fa      	bne.n	800a8ba <memmove+0x1a>
 800a8c4:	e7f8      	b.n	800a8b8 <memmove+0x18>
	...

0800a8c8 <__malloc_lock>:
 800a8c8:	b510      	push	{r4, lr}
 800a8ca:	4802      	ldr	r0, [pc, #8]	; (800a8d4 <__malloc_lock+0xc>)
 800a8cc:	f000 fc4f 	bl	800b16e <__retarget_lock_acquire_recursive>
 800a8d0:	bd10      	pop	{r4, pc}
 800a8d2:	46c0      	nop			; (mov r8, r8)
 800a8d4:	20000448 	.word	0x20000448

0800a8d8 <__malloc_unlock>:
 800a8d8:	b510      	push	{r4, lr}
 800a8da:	4802      	ldr	r0, [pc, #8]	; (800a8e4 <__malloc_unlock+0xc>)
 800a8dc:	f000 fc48 	bl	800b170 <__retarget_lock_release_recursive>
 800a8e0:	bd10      	pop	{r4, pc}
 800a8e2:	46c0      	nop			; (mov r8, r8)
 800a8e4:	20000448 	.word	0x20000448

0800a8e8 <_realloc_r>:
 800a8e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8ea:	0007      	movs	r7, r0
 800a8ec:	000e      	movs	r6, r1
 800a8ee:	0014      	movs	r4, r2
 800a8f0:	2900      	cmp	r1, #0
 800a8f2:	d105      	bne.n	800a900 <_realloc_r+0x18>
 800a8f4:	0011      	movs	r1, r2
 800a8f6:	f7ff fda9 	bl	800a44c <_malloc_r>
 800a8fa:	0005      	movs	r5, r0
 800a8fc:	0028      	movs	r0, r5
 800a8fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a900:	2a00      	cmp	r2, #0
 800a902:	d103      	bne.n	800a90c <_realloc_r+0x24>
 800a904:	f7ff fd36 	bl	800a374 <_free_r>
 800a908:	0025      	movs	r5, r4
 800a90a:	e7f7      	b.n	800a8fc <_realloc_r+0x14>
 800a90c:	f000 fc9e 	bl	800b24c <_malloc_usable_size_r>
 800a910:	9001      	str	r0, [sp, #4]
 800a912:	4284      	cmp	r4, r0
 800a914:	d803      	bhi.n	800a91e <_realloc_r+0x36>
 800a916:	0035      	movs	r5, r6
 800a918:	0843      	lsrs	r3, r0, #1
 800a91a:	42a3      	cmp	r3, r4
 800a91c:	d3ee      	bcc.n	800a8fc <_realloc_r+0x14>
 800a91e:	0021      	movs	r1, r4
 800a920:	0038      	movs	r0, r7
 800a922:	f7ff fd93 	bl	800a44c <_malloc_r>
 800a926:	1e05      	subs	r5, r0, #0
 800a928:	d0e8      	beq.n	800a8fc <_realloc_r+0x14>
 800a92a:	9b01      	ldr	r3, [sp, #4]
 800a92c:	0022      	movs	r2, r4
 800a92e:	429c      	cmp	r4, r3
 800a930:	d900      	bls.n	800a934 <_realloc_r+0x4c>
 800a932:	001a      	movs	r2, r3
 800a934:	0031      	movs	r1, r6
 800a936:	0028      	movs	r0, r5
 800a938:	f7ff f94b 	bl	8009bd2 <memcpy>
 800a93c:	0031      	movs	r1, r6
 800a93e:	0038      	movs	r0, r7
 800a940:	f7ff fd18 	bl	800a374 <_free_r>
 800a944:	e7da      	b.n	800a8fc <_realloc_r+0x14>

0800a946 <__sfputc_r>:
 800a946:	6893      	ldr	r3, [r2, #8]
 800a948:	b510      	push	{r4, lr}
 800a94a:	3b01      	subs	r3, #1
 800a94c:	6093      	str	r3, [r2, #8]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	da04      	bge.n	800a95c <__sfputc_r+0x16>
 800a952:	6994      	ldr	r4, [r2, #24]
 800a954:	42a3      	cmp	r3, r4
 800a956:	db07      	blt.n	800a968 <__sfputc_r+0x22>
 800a958:	290a      	cmp	r1, #10
 800a95a:	d005      	beq.n	800a968 <__sfputc_r+0x22>
 800a95c:	6813      	ldr	r3, [r2, #0]
 800a95e:	1c58      	adds	r0, r3, #1
 800a960:	6010      	str	r0, [r2, #0]
 800a962:	7019      	strb	r1, [r3, #0]
 800a964:	0008      	movs	r0, r1
 800a966:	bd10      	pop	{r4, pc}
 800a968:	f000 f94e 	bl	800ac08 <__swbuf_r>
 800a96c:	0001      	movs	r1, r0
 800a96e:	e7f9      	b.n	800a964 <__sfputc_r+0x1e>

0800a970 <__sfputs_r>:
 800a970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a972:	0006      	movs	r6, r0
 800a974:	000f      	movs	r7, r1
 800a976:	0014      	movs	r4, r2
 800a978:	18d5      	adds	r5, r2, r3
 800a97a:	42ac      	cmp	r4, r5
 800a97c:	d101      	bne.n	800a982 <__sfputs_r+0x12>
 800a97e:	2000      	movs	r0, #0
 800a980:	e007      	b.n	800a992 <__sfputs_r+0x22>
 800a982:	7821      	ldrb	r1, [r4, #0]
 800a984:	003a      	movs	r2, r7
 800a986:	0030      	movs	r0, r6
 800a988:	f7ff ffdd 	bl	800a946 <__sfputc_r>
 800a98c:	3401      	adds	r4, #1
 800a98e:	1c43      	adds	r3, r0, #1
 800a990:	d1f3      	bne.n	800a97a <__sfputs_r+0xa>
 800a992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a994 <_vfiprintf_r>:
 800a994:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a996:	b0a1      	sub	sp, #132	; 0x84
 800a998:	0006      	movs	r6, r0
 800a99a:	000c      	movs	r4, r1
 800a99c:	001f      	movs	r7, r3
 800a99e:	9203      	str	r2, [sp, #12]
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d004      	beq.n	800a9ae <_vfiprintf_r+0x1a>
 800a9a4:	6983      	ldr	r3, [r0, #24]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d101      	bne.n	800a9ae <_vfiprintf_r+0x1a>
 800a9aa:	f000 fb3f 	bl	800b02c <__sinit>
 800a9ae:	4b8e      	ldr	r3, [pc, #568]	; (800abe8 <_vfiprintf_r+0x254>)
 800a9b0:	429c      	cmp	r4, r3
 800a9b2:	d11c      	bne.n	800a9ee <_vfiprintf_r+0x5a>
 800a9b4:	6874      	ldr	r4, [r6, #4]
 800a9b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9b8:	07db      	lsls	r3, r3, #31
 800a9ba:	d405      	bmi.n	800a9c8 <_vfiprintf_r+0x34>
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	059b      	lsls	r3, r3, #22
 800a9c0:	d402      	bmi.n	800a9c8 <_vfiprintf_r+0x34>
 800a9c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9c4:	f000 fbd3 	bl	800b16e <__retarget_lock_acquire_recursive>
 800a9c8:	89a3      	ldrh	r3, [r4, #12]
 800a9ca:	071b      	lsls	r3, r3, #28
 800a9cc:	d502      	bpl.n	800a9d4 <_vfiprintf_r+0x40>
 800a9ce:	6923      	ldr	r3, [r4, #16]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d11d      	bne.n	800aa10 <_vfiprintf_r+0x7c>
 800a9d4:	0021      	movs	r1, r4
 800a9d6:	0030      	movs	r0, r6
 800a9d8:	f000 f97a 	bl	800acd0 <__swsetup_r>
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	d017      	beq.n	800aa10 <_vfiprintf_r+0x7c>
 800a9e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9e2:	07db      	lsls	r3, r3, #31
 800a9e4:	d50d      	bpl.n	800aa02 <_vfiprintf_r+0x6e>
 800a9e6:	2001      	movs	r0, #1
 800a9e8:	4240      	negs	r0, r0
 800a9ea:	b021      	add	sp, #132	; 0x84
 800a9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9ee:	4b7f      	ldr	r3, [pc, #508]	; (800abec <_vfiprintf_r+0x258>)
 800a9f0:	429c      	cmp	r4, r3
 800a9f2:	d101      	bne.n	800a9f8 <_vfiprintf_r+0x64>
 800a9f4:	68b4      	ldr	r4, [r6, #8]
 800a9f6:	e7de      	b.n	800a9b6 <_vfiprintf_r+0x22>
 800a9f8:	4b7d      	ldr	r3, [pc, #500]	; (800abf0 <_vfiprintf_r+0x25c>)
 800a9fa:	429c      	cmp	r4, r3
 800a9fc:	d1db      	bne.n	800a9b6 <_vfiprintf_r+0x22>
 800a9fe:	68f4      	ldr	r4, [r6, #12]
 800aa00:	e7d9      	b.n	800a9b6 <_vfiprintf_r+0x22>
 800aa02:	89a3      	ldrh	r3, [r4, #12]
 800aa04:	059b      	lsls	r3, r3, #22
 800aa06:	d4ee      	bmi.n	800a9e6 <_vfiprintf_r+0x52>
 800aa08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa0a:	f000 fbb1 	bl	800b170 <__retarget_lock_release_recursive>
 800aa0e:	e7ea      	b.n	800a9e6 <_vfiprintf_r+0x52>
 800aa10:	2300      	movs	r3, #0
 800aa12:	ad08      	add	r5, sp, #32
 800aa14:	616b      	str	r3, [r5, #20]
 800aa16:	3320      	adds	r3, #32
 800aa18:	766b      	strb	r3, [r5, #25]
 800aa1a:	3310      	adds	r3, #16
 800aa1c:	76ab      	strb	r3, [r5, #26]
 800aa1e:	9707      	str	r7, [sp, #28]
 800aa20:	9f03      	ldr	r7, [sp, #12]
 800aa22:	783b      	ldrb	r3, [r7, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <_vfiprintf_r+0x98>
 800aa28:	2b25      	cmp	r3, #37	; 0x25
 800aa2a:	d14e      	bne.n	800aaca <_vfiprintf_r+0x136>
 800aa2c:	9b03      	ldr	r3, [sp, #12]
 800aa2e:	1afb      	subs	r3, r7, r3
 800aa30:	9305      	str	r3, [sp, #20]
 800aa32:	9b03      	ldr	r3, [sp, #12]
 800aa34:	429f      	cmp	r7, r3
 800aa36:	d00d      	beq.n	800aa54 <_vfiprintf_r+0xc0>
 800aa38:	9b05      	ldr	r3, [sp, #20]
 800aa3a:	0021      	movs	r1, r4
 800aa3c:	0030      	movs	r0, r6
 800aa3e:	9a03      	ldr	r2, [sp, #12]
 800aa40:	f7ff ff96 	bl	800a970 <__sfputs_r>
 800aa44:	1c43      	adds	r3, r0, #1
 800aa46:	d100      	bne.n	800aa4a <_vfiprintf_r+0xb6>
 800aa48:	e0b5      	b.n	800abb6 <_vfiprintf_r+0x222>
 800aa4a:	696a      	ldr	r2, [r5, #20]
 800aa4c:	9b05      	ldr	r3, [sp, #20]
 800aa4e:	4694      	mov	ip, r2
 800aa50:	4463      	add	r3, ip
 800aa52:	616b      	str	r3, [r5, #20]
 800aa54:	783b      	ldrb	r3, [r7, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d100      	bne.n	800aa5c <_vfiprintf_r+0xc8>
 800aa5a:	e0ac      	b.n	800abb6 <_vfiprintf_r+0x222>
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	1c7b      	adds	r3, r7, #1
 800aa60:	9303      	str	r3, [sp, #12]
 800aa62:	2300      	movs	r3, #0
 800aa64:	4252      	negs	r2, r2
 800aa66:	606a      	str	r2, [r5, #4]
 800aa68:	a904      	add	r1, sp, #16
 800aa6a:	3254      	adds	r2, #84	; 0x54
 800aa6c:	1852      	adds	r2, r2, r1
 800aa6e:	602b      	str	r3, [r5, #0]
 800aa70:	60eb      	str	r3, [r5, #12]
 800aa72:	60ab      	str	r3, [r5, #8]
 800aa74:	7013      	strb	r3, [r2, #0]
 800aa76:	65ab      	str	r3, [r5, #88]	; 0x58
 800aa78:	9b03      	ldr	r3, [sp, #12]
 800aa7a:	2205      	movs	r2, #5
 800aa7c:	7819      	ldrb	r1, [r3, #0]
 800aa7e:	485d      	ldr	r0, [pc, #372]	; (800abf4 <_vfiprintf_r+0x260>)
 800aa80:	f7ff f89c 	bl	8009bbc <memchr>
 800aa84:	9b03      	ldr	r3, [sp, #12]
 800aa86:	1c5f      	adds	r7, r3, #1
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d120      	bne.n	800aace <_vfiprintf_r+0x13a>
 800aa8c:	682a      	ldr	r2, [r5, #0]
 800aa8e:	06d3      	lsls	r3, r2, #27
 800aa90:	d504      	bpl.n	800aa9c <_vfiprintf_r+0x108>
 800aa92:	2353      	movs	r3, #83	; 0x53
 800aa94:	a904      	add	r1, sp, #16
 800aa96:	185b      	adds	r3, r3, r1
 800aa98:	2120      	movs	r1, #32
 800aa9a:	7019      	strb	r1, [r3, #0]
 800aa9c:	0713      	lsls	r3, r2, #28
 800aa9e:	d504      	bpl.n	800aaaa <_vfiprintf_r+0x116>
 800aaa0:	2353      	movs	r3, #83	; 0x53
 800aaa2:	a904      	add	r1, sp, #16
 800aaa4:	185b      	adds	r3, r3, r1
 800aaa6:	212b      	movs	r1, #43	; 0x2b
 800aaa8:	7019      	strb	r1, [r3, #0]
 800aaaa:	9b03      	ldr	r3, [sp, #12]
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	2b2a      	cmp	r3, #42	; 0x2a
 800aab0:	d016      	beq.n	800aae0 <_vfiprintf_r+0x14c>
 800aab2:	2100      	movs	r1, #0
 800aab4:	68eb      	ldr	r3, [r5, #12]
 800aab6:	9f03      	ldr	r7, [sp, #12]
 800aab8:	783a      	ldrb	r2, [r7, #0]
 800aaba:	1c78      	adds	r0, r7, #1
 800aabc:	3a30      	subs	r2, #48	; 0x30
 800aabe:	4684      	mov	ip, r0
 800aac0:	2a09      	cmp	r2, #9
 800aac2:	d94f      	bls.n	800ab64 <_vfiprintf_r+0x1d0>
 800aac4:	2900      	cmp	r1, #0
 800aac6:	d111      	bne.n	800aaec <_vfiprintf_r+0x158>
 800aac8:	e017      	b.n	800aafa <_vfiprintf_r+0x166>
 800aaca:	3701      	adds	r7, #1
 800aacc:	e7a9      	b.n	800aa22 <_vfiprintf_r+0x8e>
 800aace:	4b49      	ldr	r3, [pc, #292]	; (800abf4 <_vfiprintf_r+0x260>)
 800aad0:	682a      	ldr	r2, [r5, #0]
 800aad2:	1ac0      	subs	r0, r0, r3
 800aad4:	2301      	movs	r3, #1
 800aad6:	4083      	lsls	r3, r0
 800aad8:	4313      	orrs	r3, r2
 800aada:	602b      	str	r3, [r5, #0]
 800aadc:	9703      	str	r7, [sp, #12]
 800aade:	e7cb      	b.n	800aa78 <_vfiprintf_r+0xe4>
 800aae0:	9b07      	ldr	r3, [sp, #28]
 800aae2:	1d19      	adds	r1, r3, #4
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	9107      	str	r1, [sp, #28]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	db01      	blt.n	800aaf0 <_vfiprintf_r+0x15c>
 800aaec:	930b      	str	r3, [sp, #44]	; 0x2c
 800aaee:	e004      	b.n	800aafa <_vfiprintf_r+0x166>
 800aaf0:	425b      	negs	r3, r3
 800aaf2:	60eb      	str	r3, [r5, #12]
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	602b      	str	r3, [r5, #0]
 800aafa:	783b      	ldrb	r3, [r7, #0]
 800aafc:	2b2e      	cmp	r3, #46	; 0x2e
 800aafe:	d10a      	bne.n	800ab16 <_vfiprintf_r+0x182>
 800ab00:	787b      	ldrb	r3, [r7, #1]
 800ab02:	2b2a      	cmp	r3, #42	; 0x2a
 800ab04:	d137      	bne.n	800ab76 <_vfiprintf_r+0x1e2>
 800ab06:	9b07      	ldr	r3, [sp, #28]
 800ab08:	3702      	adds	r7, #2
 800ab0a:	1d1a      	adds	r2, r3, #4
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	9207      	str	r2, [sp, #28]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	db2d      	blt.n	800ab70 <_vfiprintf_r+0x1dc>
 800ab14:	9309      	str	r3, [sp, #36]	; 0x24
 800ab16:	2203      	movs	r2, #3
 800ab18:	7839      	ldrb	r1, [r7, #0]
 800ab1a:	4837      	ldr	r0, [pc, #220]	; (800abf8 <_vfiprintf_r+0x264>)
 800ab1c:	f7ff f84e 	bl	8009bbc <memchr>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d007      	beq.n	800ab34 <_vfiprintf_r+0x1a0>
 800ab24:	4b34      	ldr	r3, [pc, #208]	; (800abf8 <_vfiprintf_r+0x264>)
 800ab26:	682a      	ldr	r2, [r5, #0]
 800ab28:	1ac0      	subs	r0, r0, r3
 800ab2a:	2340      	movs	r3, #64	; 0x40
 800ab2c:	4083      	lsls	r3, r0
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	3701      	adds	r7, #1
 800ab32:	602b      	str	r3, [r5, #0]
 800ab34:	7839      	ldrb	r1, [r7, #0]
 800ab36:	1c7b      	adds	r3, r7, #1
 800ab38:	2206      	movs	r2, #6
 800ab3a:	4830      	ldr	r0, [pc, #192]	; (800abfc <_vfiprintf_r+0x268>)
 800ab3c:	9303      	str	r3, [sp, #12]
 800ab3e:	7629      	strb	r1, [r5, #24]
 800ab40:	f7ff f83c 	bl	8009bbc <memchr>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	d045      	beq.n	800abd4 <_vfiprintf_r+0x240>
 800ab48:	4b2d      	ldr	r3, [pc, #180]	; (800ac00 <_vfiprintf_r+0x26c>)
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d127      	bne.n	800ab9e <_vfiprintf_r+0x20a>
 800ab4e:	2207      	movs	r2, #7
 800ab50:	9b07      	ldr	r3, [sp, #28]
 800ab52:	3307      	adds	r3, #7
 800ab54:	4393      	bics	r3, r2
 800ab56:	3308      	adds	r3, #8
 800ab58:	9307      	str	r3, [sp, #28]
 800ab5a:	696b      	ldr	r3, [r5, #20]
 800ab5c:	9a04      	ldr	r2, [sp, #16]
 800ab5e:	189b      	adds	r3, r3, r2
 800ab60:	616b      	str	r3, [r5, #20]
 800ab62:	e75d      	b.n	800aa20 <_vfiprintf_r+0x8c>
 800ab64:	210a      	movs	r1, #10
 800ab66:	434b      	muls	r3, r1
 800ab68:	4667      	mov	r7, ip
 800ab6a:	189b      	adds	r3, r3, r2
 800ab6c:	3909      	subs	r1, #9
 800ab6e:	e7a3      	b.n	800aab8 <_vfiprintf_r+0x124>
 800ab70:	2301      	movs	r3, #1
 800ab72:	425b      	negs	r3, r3
 800ab74:	e7ce      	b.n	800ab14 <_vfiprintf_r+0x180>
 800ab76:	2300      	movs	r3, #0
 800ab78:	001a      	movs	r2, r3
 800ab7a:	3701      	adds	r7, #1
 800ab7c:	606b      	str	r3, [r5, #4]
 800ab7e:	7839      	ldrb	r1, [r7, #0]
 800ab80:	1c78      	adds	r0, r7, #1
 800ab82:	3930      	subs	r1, #48	; 0x30
 800ab84:	4684      	mov	ip, r0
 800ab86:	2909      	cmp	r1, #9
 800ab88:	d903      	bls.n	800ab92 <_vfiprintf_r+0x1fe>
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d0c3      	beq.n	800ab16 <_vfiprintf_r+0x182>
 800ab8e:	9209      	str	r2, [sp, #36]	; 0x24
 800ab90:	e7c1      	b.n	800ab16 <_vfiprintf_r+0x182>
 800ab92:	230a      	movs	r3, #10
 800ab94:	435a      	muls	r2, r3
 800ab96:	4667      	mov	r7, ip
 800ab98:	1852      	adds	r2, r2, r1
 800ab9a:	3b09      	subs	r3, #9
 800ab9c:	e7ef      	b.n	800ab7e <_vfiprintf_r+0x1ea>
 800ab9e:	ab07      	add	r3, sp, #28
 800aba0:	9300      	str	r3, [sp, #0]
 800aba2:	0022      	movs	r2, r4
 800aba4:	0029      	movs	r1, r5
 800aba6:	0030      	movs	r0, r6
 800aba8:	4b16      	ldr	r3, [pc, #88]	; (800ac04 <_vfiprintf_r+0x270>)
 800abaa:	f7fd fd6f 	bl	800868c <_printf_float>
 800abae:	9004      	str	r0, [sp, #16]
 800abb0:	9b04      	ldr	r3, [sp, #16]
 800abb2:	3301      	adds	r3, #1
 800abb4:	d1d1      	bne.n	800ab5a <_vfiprintf_r+0x1c6>
 800abb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abb8:	07db      	lsls	r3, r3, #31
 800abba:	d405      	bmi.n	800abc8 <_vfiprintf_r+0x234>
 800abbc:	89a3      	ldrh	r3, [r4, #12]
 800abbe:	059b      	lsls	r3, r3, #22
 800abc0:	d402      	bmi.n	800abc8 <_vfiprintf_r+0x234>
 800abc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abc4:	f000 fad4 	bl	800b170 <__retarget_lock_release_recursive>
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	065b      	lsls	r3, r3, #25
 800abcc:	d500      	bpl.n	800abd0 <_vfiprintf_r+0x23c>
 800abce:	e70a      	b.n	800a9e6 <_vfiprintf_r+0x52>
 800abd0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800abd2:	e70a      	b.n	800a9ea <_vfiprintf_r+0x56>
 800abd4:	ab07      	add	r3, sp, #28
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	0022      	movs	r2, r4
 800abda:	0029      	movs	r1, r5
 800abdc:	0030      	movs	r0, r6
 800abde:	4b09      	ldr	r3, [pc, #36]	; (800ac04 <_vfiprintf_r+0x270>)
 800abe0:	f7fe f806 	bl	8008bf0 <_printf_i>
 800abe4:	e7e3      	b.n	800abae <_vfiprintf_r+0x21a>
 800abe6:	46c0      	nop			; (mov r8, r8)
 800abe8:	0800c854 	.word	0x0800c854
 800abec:	0800c874 	.word	0x0800c874
 800abf0:	0800c834 	.word	0x0800c834
 800abf4:	0800c6dc 	.word	0x0800c6dc
 800abf8:	0800c6e2 	.word	0x0800c6e2
 800abfc:	0800c6e6 	.word	0x0800c6e6
 800ac00:	0800868d 	.word	0x0800868d
 800ac04:	0800a971 	.word	0x0800a971

0800ac08 <__swbuf_r>:
 800ac08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0a:	0005      	movs	r5, r0
 800ac0c:	000e      	movs	r6, r1
 800ac0e:	0014      	movs	r4, r2
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d004      	beq.n	800ac1e <__swbuf_r+0x16>
 800ac14:	6983      	ldr	r3, [r0, #24]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d101      	bne.n	800ac1e <__swbuf_r+0x16>
 800ac1a:	f000 fa07 	bl	800b02c <__sinit>
 800ac1e:	4b22      	ldr	r3, [pc, #136]	; (800aca8 <__swbuf_r+0xa0>)
 800ac20:	429c      	cmp	r4, r3
 800ac22:	d12e      	bne.n	800ac82 <__swbuf_r+0x7a>
 800ac24:	686c      	ldr	r4, [r5, #4]
 800ac26:	69a3      	ldr	r3, [r4, #24]
 800ac28:	60a3      	str	r3, [r4, #8]
 800ac2a:	89a3      	ldrh	r3, [r4, #12]
 800ac2c:	071b      	lsls	r3, r3, #28
 800ac2e:	d532      	bpl.n	800ac96 <__swbuf_r+0x8e>
 800ac30:	6923      	ldr	r3, [r4, #16]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d02f      	beq.n	800ac96 <__swbuf_r+0x8e>
 800ac36:	6823      	ldr	r3, [r4, #0]
 800ac38:	6922      	ldr	r2, [r4, #16]
 800ac3a:	b2f7      	uxtb	r7, r6
 800ac3c:	1a98      	subs	r0, r3, r2
 800ac3e:	6963      	ldr	r3, [r4, #20]
 800ac40:	b2f6      	uxtb	r6, r6
 800ac42:	4283      	cmp	r3, r0
 800ac44:	dc05      	bgt.n	800ac52 <__swbuf_r+0x4a>
 800ac46:	0021      	movs	r1, r4
 800ac48:	0028      	movs	r0, r5
 800ac4a:	f000 f94d 	bl	800aee8 <_fflush_r>
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	d127      	bne.n	800aca2 <__swbuf_r+0x9a>
 800ac52:	68a3      	ldr	r3, [r4, #8]
 800ac54:	3001      	adds	r0, #1
 800ac56:	3b01      	subs	r3, #1
 800ac58:	60a3      	str	r3, [r4, #8]
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	1c5a      	adds	r2, r3, #1
 800ac5e:	6022      	str	r2, [r4, #0]
 800ac60:	701f      	strb	r7, [r3, #0]
 800ac62:	6963      	ldr	r3, [r4, #20]
 800ac64:	4283      	cmp	r3, r0
 800ac66:	d004      	beq.n	800ac72 <__swbuf_r+0x6a>
 800ac68:	89a3      	ldrh	r3, [r4, #12]
 800ac6a:	07db      	lsls	r3, r3, #31
 800ac6c:	d507      	bpl.n	800ac7e <__swbuf_r+0x76>
 800ac6e:	2e0a      	cmp	r6, #10
 800ac70:	d105      	bne.n	800ac7e <__swbuf_r+0x76>
 800ac72:	0021      	movs	r1, r4
 800ac74:	0028      	movs	r0, r5
 800ac76:	f000 f937 	bl	800aee8 <_fflush_r>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d111      	bne.n	800aca2 <__swbuf_r+0x9a>
 800ac7e:	0030      	movs	r0, r6
 800ac80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac82:	4b0a      	ldr	r3, [pc, #40]	; (800acac <__swbuf_r+0xa4>)
 800ac84:	429c      	cmp	r4, r3
 800ac86:	d101      	bne.n	800ac8c <__swbuf_r+0x84>
 800ac88:	68ac      	ldr	r4, [r5, #8]
 800ac8a:	e7cc      	b.n	800ac26 <__swbuf_r+0x1e>
 800ac8c:	4b08      	ldr	r3, [pc, #32]	; (800acb0 <__swbuf_r+0xa8>)
 800ac8e:	429c      	cmp	r4, r3
 800ac90:	d1c9      	bne.n	800ac26 <__swbuf_r+0x1e>
 800ac92:	68ec      	ldr	r4, [r5, #12]
 800ac94:	e7c7      	b.n	800ac26 <__swbuf_r+0x1e>
 800ac96:	0021      	movs	r1, r4
 800ac98:	0028      	movs	r0, r5
 800ac9a:	f000 f819 	bl	800acd0 <__swsetup_r>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d0c9      	beq.n	800ac36 <__swbuf_r+0x2e>
 800aca2:	2601      	movs	r6, #1
 800aca4:	4276      	negs	r6, r6
 800aca6:	e7ea      	b.n	800ac7e <__swbuf_r+0x76>
 800aca8:	0800c854 	.word	0x0800c854
 800acac:	0800c874 	.word	0x0800c874
 800acb0:	0800c834 	.word	0x0800c834

0800acb4 <__ascii_wctomb>:
 800acb4:	0003      	movs	r3, r0
 800acb6:	1e08      	subs	r0, r1, #0
 800acb8:	d005      	beq.n	800acc6 <__ascii_wctomb+0x12>
 800acba:	2aff      	cmp	r2, #255	; 0xff
 800acbc:	d904      	bls.n	800acc8 <__ascii_wctomb+0x14>
 800acbe:	228a      	movs	r2, #138	; 0x8a
 800acc0:	2001      	movs	r0, #1
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	4240      	negs	r0, r0
 800acc6:	4770      	bx	lr
 800acc8:	2001      	movs	r0, #1
 800acca:	700a      	strb	r2, [r1, #0]
 800accc:	e7fb      	b.n	800acc6 <__ascii_wctomb+0x12>
	...

0800acd0 <__swsetup_r>:
 800acd0:	4b37      	ldr	r3, [pc, #220]	; (800adb0 <__swsetup_r+0xe0>)
 800acd2:	b570      	push	{r4, r5, r6, lr}
 800acd4:	681d      	ldr	r5, [r3, #0]
 800acd6:	0006      	movs	r6, r0
 800acd8:	000c      	movs	r4, r1
 800acda:	2d00      	cmp	r5, #0
 800acdc:	d005      	beq.n	800acea <__swsetup_r+0x1a>
 800acde:	69ab      	ldr	r3, [r5, #24]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d102      	bne.n	800acea <__swsetup_r+0x1a>
 800ace4:	0028      	movs	r0, r5
 800ace6:	f000 f9a1 	bl	800b02c <__sinit>
 800acea:	4b32      	ldr	r3, [pc, #200]	; (800adb4 <__swsetup_r+0xe4>)
 800acec:	429c      	cmp	r4, r3
 800acee:	d10f      	bne.n	800ad10 <__swsetup_r+0x40>
 800acf0:	686c      	ldr	r4, [r5, #4]
 800acf2:	230c      	movs	r3, #12
 800acf4:	5ee2      	ldrsh	r2, [r4, r3]
 800acf6:	b293      	uxth	r3, r2
 800acf8:	0711      	lsls	r1, r2, #28
 800acfa:	d42d      	bmi.n	800ad58 <__swsetup_r+0x88>
 800acfc:	06d9      	lsls	r1, r3, #27
 800acfe:	d411      	bmi.n	800ad24 <__swsetup_r+0x54>
 800ad00:	2309      	movs	r3, #9
 800ad02:	2001      	movs	r0, #1
 800ad04:	6033      	str	r3, [r6, #0]
 800ad06:	3337      	adds	r3, #55	; 0x37
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	81a3      	strh	r3, [r4, #12]
 800ad0c:	4240      	negs	r0, r0
 800ad0e:	bd70      	pop	{r4, r5, r6, pc}
 800ad10:	4b29      	ldr	r3, [pc, #164]	; (800adb8 <__swsetup_r+0xe8>)
 800ad12:	429c      	cmp	r4, r3
 800ad14:	d101      	bne.n	800ad1a <__swsetup_r+0x4a>
 800ad16:	68ac      	ldr	r4, [r5, #8]
 800ad18:	e7eb      	b.n	800acf2 <__swsetup_r+0x22>
 800ad1a:	4b28      	ldr	r3, [pc, #160]	; (800adbc <__swsetup_r+0xec>)
 800ad1c:	429c      	cmp	r4, r3
 800ad1e:	d1e8      	bne.n	800acf2 <__swsetup_r+0x22>
 800ad20:	68ec      	ldr	r4, [r5, #12]
 800ad22:	e7e6      	b.n	800acf2 <__swsetup_r+0x22>
 800ad24:	075b      	lsls	r3, r3, #29
 800ad26:	d513      	bpl.n	800ad50 <__swsetup_r+0x80>
 800ad28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad2a:	2900      	cmp	r1, #0
 800ad2c:	d008      	beq.n	800ad40 <__swsetup_r+0x70>
 800ad2e:	0023      	movs	r3, r4
 800ad30:	3344      	adds	r3, #68	; 0x44
 800ad32:	4299      	cmp	r1, r3
 800ad34:	d002      	beq.n	800ad3c <__swsetup_r+0x6c>
 800ad36:	0030      	movs	r0, r6
 800ad38:	f7ff fb1c 	bl	800a374 <_free_r>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	6363      	str	r3, [r4, #52]	; 0x34
 800ad40:	2224      	movs	r2, #36	; 0x24
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	4393      	bics	r3, r2
 800ad46:	81a3      	strh	r3, [r4, #12]
 800ad48:	2300      	movs	r3, #0
 800ad4a:	6063      	str	r3, [r4, #4]
 800ad4c:	6923      	ldr	r3, [r4, #16]
 800ad4e:	6023      	str	r3, [r4, #0]
 800ad50:	2308      	movs	r3, #8
 800ad52:	89a2      	ldrh	r2, [r4, #12]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	81a3      	strh	r3, [r4, #12]
 800ad58:	6923      	ldr	r3, [r4, #16]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10b      	bne.n	800ad76 <__swsetup_r+0xa6>
 800ad5e:	21a0      	movs	r1, #160	; 0xa0
 800ad60:	2280      	movs	r2, #128	; 0x80
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	0089      	lsls	r1, r1, #2
 800ad66:	0092      	lsls	r2, r2, #2
 800ad68:	400b      	ands	r3, r1
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d003      	beq.n	800ad76 <__swsetup_r+0xa6>
 800ad6e:	0021      	movs	r1, r4
 800ad70:	0030      	movs	r0, r6
 800ad72:	f000 fa27 	bl	800b1c4 <__smakebuf_r>
 800ad76:	220c      	movs	r2, #12
 800ad78:	5ea3      	ldrsh	r3, [r4, r2]
 800ad7a:	2001      	movs	r0, #1
 800ad7c:	001a      	movs	r2, r3
 800ad7e:	b299      	uxth	r1, r3
 800ad80:	4002      	ands	r2, r0
 800ad82:	4203      	tst	r3, r0
 800ad84:	d00f      	beq.n	800ada6 <__swsetup_r+0xd6>
 800ad86:	2200      	movs	r2, #0
 800ad88:	60a2      	str	r2, [r4, #8]
 800ad8a:	6962      	ldr	r2, [r4, #20]
 800ad8c:	4252      	negs	r2, r2
 800ad8e:	61a2      	str	r2, [r4, #24]
 800ad90:	2000      	movs	r0, #0
 800ad92:	6922      	ldr	r2, [r4, #16]
 800ad94:	4282      	cmp	r2, r0
 800ad96:	d1ba      	bne.n	800ad0e <__swsetup_r+0x3e>
 800ad98:	060a      	lsls	r2, r1, #24
 800ad9a:	d5b8      	bpl.n	800ad0e <__swsetup_r+0x3e>
 800ad9c:	2240      	movs	r2, #64	; 0x40
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	81a3      	strh	r3, [r4, #12]
 800ada2:	3801      	subs	r0, #1
 800ada4:	e7b3      	b.n	800ad0e <__swsetup_r+0x3e>
 800ada6:	0788      	lsls	r0, r1, #30
 800ada8:	d400      	bmi.n	800adac <__swsetup_r+0xdc>
 800adaa:	6962      	ldr	r2, [r4, #20]
 800adac:	60a2      	str	r2, [r4, #8]
 800adae:	e7ef      	b.n	800ad90 <__swsetup_r+0xc0>
 800adb0:	2000000c 	.word	0x2000000c
 800adb4:	0800c854 	.word	0x0800c854
 800adb8:	0800c874 	.word	0x0800c874
 800adbc:	0800c834 	.word	0x0800c834

0800adc0 <abort>:
 800adc0:	2006      	movs	r0, #6
 800adc2:	b510      	push	{r4, lr}
 800adc4:	f000 fa74 	bl	800b2b0 <raise>
 800adc8:	2001      	movs	r0, #1
 800adca:	f7f9 fe00 	bl	80049ce <_exit>
	...

0800add0 <__sflush_r>:
 800add0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800add2:	898b      	ldrh	r3, [r1, #12]
 800add4:	0005      	movs	r5, r0
 800add6:	000c      	movs	r4, r1
 800add8:	071a      	lsls	r2, r3, #28
 800adda:	d45f      	bmi.n	800ae9c <__sflush_r+0xcc>
 800addc:	684a      	ldr	r2, [r1, #4]
 800adde:	2a00      	cmp	r2, #0
 800ade0:	dc04      	bgt.n	800adec <__sflush_r+0x1c>
 800ade2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ade4:	2a00      	cmp	r2, #0
 800ade6:	dc01      	bgt.n	800adec <__sflush_r+0x1c>
 800ade8:	2000      	movs	r0, #0
 800adea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800adec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800adee:	2f00      	cmp	r7, #0
 800adf0:	d0fa      	beq.n	800ade8 <__sflush_r+0x18>
 800adf2:	2200      	movs	r2, #0
 800adf4:	2180      	movs	r1, #128	; 0x80
 800adf6:	682e      	ldr	r6, [r5, #0]
 800adf8:	602a      	str	r2, [r5, #0]
 800adfa:	001a      	movs	r2, r3
 800adfc:	0149      	lsls	r1, r1, #5
 800adfe:	400a      	ands	r2, r1
 800ae00:	420b      	tst	r3, r1
 800ae02:	d034      	beq.n	800ae6e <__sflush_r+0x9e>
 800ae04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae06:	89a3      	ldrh	r3, [r4, #12]
 800ae08:	075b      	lsls	r3, r3, #29
 800ae0a:	d506      	bpl.n	800ae1a <__sflush_r+0x4a>
 800ae0c:	6863      	ldr	r3, [r4, #4]
 800ae0e:	1ac0      	subs	r0, r0, r3
 800ae10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <__sflush_r+0x4a>
 800ae16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae18:	1ac0      	subs	r0, r0, r3
 800ae1a:	0002      	movs	r2, r0
 800ae1c:	6a21      	ldr	r1, [r4, #32]
 800ae1e:	2300      	movs	r3, #0
 800ae20:	0028      	movs	r0, r5
 800ae22:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ae24:	47b8      	blx	r7
 800ae26:	89a1      	ldrh	r1, [r4, #12]
 800ae28:	1c43      	adds	r3, r0, #1
 800ae2a:	d106      	bne.n	800ae3a <__sflush_r+0x6a>
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	2b1d      	cmp	r3, #29
 800ae30:	d831      	bhi.n	800ae96 <__sflush_r+0xc6>
 800ae32:	4a2c      	ldr	r2, [pc, #176]	; (800aee4 <__sflush_r+0x114>)
 800ae34:	40da      	lsrs	r2, r3
 800ae36:	07d3      	lsls	r3, r2, #31
 800ae38:	d52d      	bpl.n	800ae96 <__sflush_r+0xc6>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	6063      	str	r3, [r4, #4]
 800ae3e:	6923      	ldr	r3, [r4, #16]
 800ae40:	6023      	str	r3, [r4, #0]
 800ae42:	04cb      	lsls	r3, r1, #19
 800ae44:	d505      	bpl.n	800ae52 <__sflush_r+0x82>
 800ae46:	1c43      	adds	r3, r0, #1
 800ae48:	d102      	bne.n	800ae50 <__sflush_r+0x80>
 800ae4a:	682b      	ldr	r3, [r5, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d100      	bne.n	800ae52 <__sflush_r+0x82>
 800ae50:	6560      	str	r0, [r4, #84]	; 0x54
 800ae52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae54:	602e      	str	r6, [r5, #0]
 800ae56:	2900      	cmp	r1, #0
 800ae58:	d0c6      	beq.n	800ade8 <__sflush_r+0x18>
 800ae5a:	0023      	movs	r3, r4
 800ae5c:	3344      	adds	r3, #68	; 0x44
 800ae5e:	4299      	cmp	r1, r3
 800ae60:	d002      	beq.n	800ae68 <__sflush_r+0x98>
 800ae62:	0028      	movs	r0, r5
 800ae64:	f7ff fa86 	bl	800a374 <_free_r>
 800ae68:	2000      	movs	r0, #0
 800ae6a:	6360      	str	r0, [r4, #52]	; 0x34
 800ae6c:	e7bd      	b.n	800adea <__sflush_r+0x1a>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	0028      	movs	r0, r5
 800ae72:	6a21      	ldr	r1, [r4, #32]
 800ae74:	47b8      	blx	r7
 800ae76:	1c43      	adds	r3, r0, #1
 800ae78:	d1c5      	bne.n	800ae06 <__sflush_r+0x36>
 800ae7a:	682b      	ldr	r3, [r5, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d0c2      	beq.n	800ae06 <__sflush_r+0x36>
 800ae80:	2b1d      	cmp	r3, #29
 800ae82:	d001      	beq.n	800ae88 <__sflush_r+0xb8>
 800ae84:	2b16      	cmp	r3, #22
 800ae86:	d101      	bne.n	800ae8c <__sflush_r+0xbc>
 800ae88:	602e      	str	r6, [r5, #0]
 800ae8a:	e7ad      	b.n	800ade8 <__sflush_r+0x18>
 800ae8c:	2340      	movs	r3, #64	; 0x40
 800ae8e:	89a2      	ldrh	r2, [r4, #12]
 800ae90:	4313      	orrs	r3, r2
 800ae92:	81a3      	strh	r3, [r4, #12]
 800ae94:	e7a9      	b.n	800adea <__sflush_r+0x1a>
 800ae96:	2340      	movs	r3, #64	; 0x40
 800ae98:	430b      	orrs	r3, r1
 800ae9a:	e7fa      	b.n	800ae92 <__sflush_r+0xc2>
 800ae9c:	690f      	ldr	r7, [r1, #16]
 800ae9e:	2f00      	cmp	r7, #0
 800aea0:	d0a2      	beq.n	800ade8 <__sflush_r+0x18>
 800aea2:	680a      	ldr	r2, [r1, #0]
 800aea4:	600f      	str	r7, [r1, #0]
 800aea6:	1bd2      	subs	r2, r2, r7
 800aea8:	9201      	str	r2, [sp, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	079b      	lsls	r3, r3, #30
 800aeae:	d100      	bne.n	800aeb2 <__sflush_r+0xe2>
 800aeb0:	694a      	ldr	r2, [r1, #20]
 800aeb2:	60a2      	str	r2, [r4, #8]
 800aeb4:	9b01      	ldr	r3, [sp, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	dc00      	bgt.n	800aebc <__sflush_r+0xec>
 800aeba:	e795      	b.n	800ade8 <__sflush_r+0x18>
 800aebc:	003a      	movs	r2, r7
 800aebe:	0028      	movs	r0, r5
 800aec0:	9b01      	ldr	r3, [sp, #4]
 800aec2:	6a21      	ldr	r1, [r4, #32]
 800aec4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aec6:	47b0      	blx	r6
 800aec8:	2800      	cmp	r0, #0
 800aeca:	dc06      	bgt.n	800aeda <__sflush_r+0x10a>
 800aecc:	2340      	movs	r3, #64	; 0x40
 800aece:	2001      	movs	r0, #1
 800aed0:	89a2      	ldrh	r2, [r4, #12]
 800aed2:	4240      	negs	r0, r0
 800aed4:	4313      	orrs	r3, r2
 800aed6:	81a3      	strh	r3, [r4, #12]
 800aed8:	e787      	b.n	800adea <__sflush_r+0x1a>
 800aeda:	9b01      	ldr	r3, [sp, #4]
 800aedc:	183f      	adds	r7, r7, r0
 800aede:	1a1b      	subs	r3, r3, r0
 800aee0:	9301      	str	r3, [sp, #4]
 800aee2:	e7e7      	b.n	800aeb4 <__sflush_r+0xe4>
 800aee4:	20400001 	.word	0x20400001

0800aee8 <_fflush_r>:
 800aee8:	690b      	ldr	r3, [r1, #16]
 800aeea:	b570      	push	{r4, r5, r6, lr}
 800aeec:	0005      	movs	r5, r0
 800aeee:	000c      	movs	r4, r1
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d102      	bne.n	800aefa <_fflush_r+0x12>
 800aef4:	2500      	movs	r5, #0
 800aef6:	0028      	movs	r0, r5
 800aef8:	bd70      	pop	{r4, r5, r6, pc}
 800aefa:	2800      	cmp	r0, #0
 800aefc:	d004      	beq.n	800af08 <_fflush_r+0x20>
 800aefe:	6983      	ldr	r3, [r0, #24]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d101      	bne.n	800af08 <_fflush_r+0x20>
 800af04:	f000 f892 	bl	800b02c <__sinit>
 800af08:	4b14      	ldr	r3, [pc, #80]	; (800af5c <_fflush_r+0x74>)
 800af0a:	429c      	cmp	r4, r3
 800af0c:	d11b      	bne.n	800af46 <_fflush_r+0x5e>
 800af0e:	686c      	ldr	r4, [r5, #4]
 800af10:	220c      	movs	r2, #12
 800af12:	5ea3      	ldrsh	r3, [r4, r2]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d0ed      	beq.n	800aef4 <_fflush_r+0xc>
 800af18:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af1a:	07d2      	lsls	r2, r2, #31
 800af1c:	d404      	bmi.n	800af28 <_fflush_r+0x40>
 800af1e:	059b      	lsls	r3, r3, #22
 800af20:	d402      	bmi.n	800af28 <_fflush_r+0x40>
 800af22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af24:	f000 f923 	bl	800b16e <__retarget_lock_acquire_recursive>
 800af28:	0028      	movs	r0, r5
 800af2a:	0021      	movs	r1, r4
 800af2c:	f7ff ff50 	bl	800add0 <__sflush_r>
 800af30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af32:	0005      	movs	r5, r0
 800af34:	07db      	lsls	r3, r3, #31
 800af36:	d4de      	bmi.n	800aef6 <_fflush_r+0xe>
 800af38:	89a3      	ldrh	r3, [r4, #12]
 800af3a:	059b      	lsls	r3, r3, #22
 800af3c:	d4db      	bmi.n	800aef6 <_fflush_r+0xe>
 800af3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af40:	f000 f916 	bl	800b170 <__retarget_lock_release_recursive>
 800af44:	e7d7      	b.n	800aef6 <_fflush_r+0xe>
 800af46:	4b06      	ldr	r3, [pc, #24]	; (800af60 <_fflush_r+0x78>)
 800af48:	429c      	cmp	r4, r3
 800af4a:	d101      	bne.n	800af50 <_fflush_r+0x68>
 800af4c:	68ac      	ldr	r4, [r5, #8]
 800af4e:	e7df      	b.n	800af10 <_fflush_r+0x28>
 800af50:	4b04      	ldr	r3, [pc, #16]	; (800af64 <_fflush_r+0x7c>)
 800af52:	429c      	cmp	r4, r3
 800af54:	d1dc      	bne.n	800af10 <_fflush_r+0x28>
 800af56:	68ec      	ldr	r4, [r5, #12]
 800af58:	e7da      	b.n	800af10 <_fflush_r+0x28>
 800af5a:	46c0      	nop			; (mov r8, r8)
 800af5c:	0800c854 	.word	0x0800c854
 800af60:	0800c874 	.word	0x0800c874
 800af64:	0800c834 	.word	0x0800c834

0800af68 <std>:
 800af68:	2300      	movs	r3, #0
 800af6a:	b510      	push	{r4, lr}
 800af6c:	0004      	movs	r4, r0
 800af6e:	6003      	str	r3, [r0, #0]
 800af70:	6043      	str	r3, [r0, #4]
 800af72:	6083      	str	r3, [r0, #8]
 800af74:	8181      	strh	r1, [r0, #12]
 800af76:	6643      	str	r3, [r0, #100]	; 0x64
 800af78:	0019      	movs	r1, r3
 800af7a:	81c2      	strh	r2, [r0, #14]
 800af7c:	6103      	str	r3, [r0, #16]
 800af7e:	6143      	str	r3, [r0, #20]
 800af80:	6183      	str	r3, [r0, #24]
 800af82:	2208      	movs	r2, #8
 800af84:	305c      	adds	r0, #92	; 0x5c
 800af86:	f7fd facf 	bl	8008528 <memset>
 800af8a:	4b05      	ldr	r3, [pc, #20]	; (800afa0 <std+0x38>)
 800af8c:	6224      	str	r4, [r4, #32]
 800af8e:	6263      	str	r3, [r4, #36]	; 0x24
 800af90:	4b04      	ldr	r3, [pc, #16]	; (800afa4 <std+0x3c>)
 800af92:	62a3      	str	r3, [r4, #40]	; 0x28
 800af94:	4b04      	ldr	r3, [pc, #16]	; (800afa8 <std+0x40>)
 800af96:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af98:	4b04      	ldr	r3, [pc, #16]	; (800afac <std+0x44>)
 800af9a:	6323      	str	r3, [r4, #48]	; 0x30
 800af9c:	bd10      	pop	{r4, pc}
 800af9e:	46c0      	nop			; (mov r8, r8)
 800afa0:	0800b2f1 	.word	0x0800b2f1
 800afa4:	0800b319 	.word	0x0800b319
 800afa8:	0800b351 	.word	0x0800b351
 800afac:	0800b37d 	.word	0x0800b37d

0800afb0 <_cleanup_r>:
 800afb0:	b510      	push	{r4, lr}
 800afb2:	4902      	ldr	r1, [pc, #8]	; (800afbc <_cleanup_r+0xc>)
 800afb4:	f000 f8ba 	bl	800b12c <_fwalk_reent>
 800afb8:	bd10      	pop	{r4, pc}
 800afba:	46c0      	nop			; (mov r8, r8)
 800afbc:	0800aee9 	.word	0x0800aee9

0800afc0 <__sfmoreglue>:
 800afc0:	b570      	push	{r4, r5, r6, lr}
 800afc2:	2568      	movs	r5, #104	; 0x68
 800afc4:	1e4a      	subs	r2, r1, #1
 800afc6:	4355      	muls	r5, r2
 800afc8:	000e      	movs	r6, r1
 800afca:	0029      	movs	r1, r5
 800afcc:	3174      	adds	r1, #116	; 0x74
 800afce:	f7ff fa3d 	bl	800a44c <_malloc_r>
 800afd2:	1e04      	subs	r4, r0, #0
 800afd4:	d008      	beq.n	800afe8 <__sfmoreglue+0x28>
 800afd6:	2100      	movs	r1, #0
 800afd8:	002a      	movs	r2, r5
 800afda:	6001      	str	r1, [r0, #0]
 800afdc:	6046      	str	r6, [r0, #4]
 800afde:	300c      	adds	r0, #12
 800afe0:	60a0      	str	r0, [r4, #8]
 800afe2:	3268      	adds	r2, #104	; 0x68
 800afe4:	f7fd faa0 	bl	8008528 <memset>
 800afe8:	0020      	movs	r0, r4
 800afea:	bd70      	pop	{r4, r5, r6, pc}

0800afec <__sfp_lock_acquire>:
 800afec:	b510      	push	{r4, lr}
 800afee:	4802      	ldr	r0, [pc, #8]	; (800aff8 <__sfp_lock_acquire+0xc>)
 800aff0:	f000 f8bd 	bl	800b16e <__retarget_lock_acquire_recursive>
 800aff4:	bd10      	pop	{r4, pc}
 800aff6:	46c0      	nop			; (mov r8, r8)
 800aff8:	20000449 	.word	0x20000449

0800affc <__sfp_lock_release>:
 800affc:	b510      	push	{r4, lr}
 800affe:	4802      	ldr	r0, [pc, #8]	; (800b008 <__sfp_lock_release+0xc>)
 800b000:	f000 f8b6 	bl	800b170 <__retarget_lock_release_recursive>
 800b004:	bd10      	pop	{r4, pc}
 800b006:	46c0      	nop			; (mov r8, r8)
 800b008:	20000449 	.word	0x20000449

0800b00c <__sinit_lock_acquire>:
 800b00c:	b510      	push	{r4, lr}
 800b00e:	4802      	ldr	r0, [pc, #8]	; (800b018 <__sinit_lock_acquire+0xc>)
 800b010:	f000 f8ad 	bl	800b16e <__retarget_lock_acquire_recursive>
 800b014:	bd10      	pop	{r4, pc}
 800b016:	46c0      	nop			; (mov r8, r8)
 800b018:	2000044a 	.word	0x2000044a

0800b01c <__sinit_lock_release>:
 800b01c:	b510      	push	{r4, lr}
 800b01e:	4802      	ldr	r0, [pc, #8]	; (800b028 <__sinit_lock_release+0xc>)
 800b020:	f000 f8a6 	bl	800b170 <__retarget_lock_release_recursive>
 800b024:	bd10      	pop	{r4, pc}
 800b026:	46c0      	nop			; (mov r8, r8)
 800b028:	2000044a 	.word	0x2000044a

0800b02c <__sinit>:
 800b02c:	b513      	push	{r0, r1, r4, lr}
 800b02e:	0004      	movs	r4, r0
 800b030:	f7ff ffec 	bl	800b00c <__sinit_lock_acquire>
 800b034:	69a3      	ldr	r3, [r4, #24]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d002      	beq.n	800b040 <__sinit+0x14>
 800b03a:	f7ff ffef 	bl	800b01c <__sinit_lock_release>
 800b03e:	bd13      	pop	{r0, r1, r4, pc}
 800b040:	64a3      	str	r3, [r4, #72]	; 0x48
 800b042:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b044:	6523      	str	r3, [r4, #80]	; 0x50
 800b046:	4b13      	ldr	r3, [pc, #76]	; (800b094 <__sinit+0x68>)
 800b048:	4a13      	ldr	r2, [pc, #76]	; (800b098 <__sinit+0x6c>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b04e:	9301      	str	r3, [sp, #4]
 800b050:	42a3      	cmp	r3, r4
 800b052:	d101      	bne.n	800b058 <__sinit+0x2c>
 800b054:	2301      	movs	r3, #1
 800b056:	61a3      	str	r3, [r4, #24]
 800b058:	0020      	movs	r0, r4
 800b05a:	f000 f81f 	bl	800b09c <__sfp>
 800b05e:	6060      	str	r0, [r4, #4]
 800b060:	0020      	movs	r0, r4
 800b062:	f000 f81b 	bl	800b09c <__sfp>
 800b066:	60a0      	str	r0, [r4, #8]
 800b068:	0020      	movs	r0, r4
 800b06a:	f000 f817 	bl	800b09c <__sfp>
 800b06e:	2200      	movs	r2, #0
 800b070:	2104      	movs	r1, #4
 800b072:	60e0      	str	r0, [r4, #12]
 800b074:	6860      	ldr	r0, [r4, #4]
 800b076:	f7ff ff77 	bl	800af68 <std>
 800b07a:	2201      	movs	r2, #1
 800b07c:	2109      	movs	r1, #9
 800b07e:	68a0      	ldr	r0, [r4, #8]
 800b080:	f7ff ff72 	bl	800af68 <std>
 800b084:	2202      	movs	r2, #2
 800b086:	2112      	movs	r1, #18
 800b088:	68e0      	ldr	r0, [r4, #12]
 800b08a:	f7ff ff6d 	bl	800af68 <std>
 800b08e:	2301      	movs	r3, #1
 800b090:	61a3      	str	r3, [r4, #24]
 800b092:	e7d2      	b.n	800b03a <__sinit+0xe>
 800b094:	0800c4bc 	.word	0x0800c4bc
 800b098:	0800afb1 	.word	0x0800afb1

0800b09c <__sfp>:
 800b09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09e:	0007      	movs	r7, r0
 800b0a0:	f7ff ffa4 	bl	800afec <__sfp_lock_acquire>
 800b0a4:	4b1f      	ldr	r3, [pc, #124]	; (800b124 <__sfp+0x88>)
 800b0a6:	681e      	ldr	r6, [r3, #0]
 800b0a8:	69b3      	ldr	r3, [r6, #24]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d102      	bne.n	800b0b4 <__sfp+0x18>
 800b0ae:	0030      	movs	r0, r6
 800b0b0:	f7ff ffbc 	bl	800b02c <__sinit>
 800b0b4:	3648      	adds	r6, #72	; 0x48
 800b0b6:	68b4      	ldr	r4, [r6, #8]
 800b0b8:	6873      	ldr	r3, [r6, #4]
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	d504      	bpl.n	800b0c8 <__sfp+0x2c>
 800b0be:	6833      	ldr	r3, [r6, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d022      	beq.n	800b10a <__sfp+0x6e>
 800b0c4:	6836      	ldr	r6, [r6, #0]
 800b0c6:	e7f6      	b.n	800b0b6 <__sfp+0x1a>
 800b0c8:	220c      	movs	r2, #12
 800b0ca:	5ea5      	ldrsh	r5, [r4, r2]
 800b0cc:	2d00      	cmp	r5, #0
 800b0ce:	d11a      	bne.n	800b106 <__sfp+0x6a>
 800b0d0:	0020      	movs	r0, r4
 800b0d2:	4b15      	ldr	r3, [pc, #84]	; (800b128 <__sfp+0x8c>)
 800b0d4:	3058      	adds	r0, #88	; 0x58
 800b0d6:	60e3      	str	r3, [r4, #12]
 800b0d8:	6665      	str	r5, [r4, #100]	; 0x64
 800b0da:	f000 f847 	bl	800b16c <__retarget_lock_init_recursive>
 800b0de:	f7ff ff8d 	bl	800affc <__sfp_lock_release>
 800b0e2:	0020      	movs	r0, r4
 800b0e4:	2208      	movs	r2, #8
 800b0e6:	0029      	movs	r1, r5
 800b0e8:	6025      	str	r5, [r4, #0]
 800b0ea:	60a5      	str	r5, [r4, #8]
 800b0ec:	6065      	str	r5, [r4, #4]
 800b0ee:	6125      	str	r5, [r4, #16]
 800b0f0:	6165      	str	r5, [r4, #20]
 800b0f2:	61a5      	str	r5, [r4, #24]
 800b0f4:	305c      	adds	r0, #92	; 0x5c
 800b0f6:	f7fd fa17 	bl	8008528 <memset>
 800b0fa:	6365      	str	r5, [r4, #52]	; 0x34
 800b0fc:	63a5      	str	r5, [r4, #56]	; 0x38
 800b0fe:	64a5      	str	r5, [r4, #72]	; 0x48
 800b100:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b102:	0020      	movs	r0, r4
 800b104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b106:	3468      	adds	r4, #104	; 0x68
 800b108:	e7d7      	b.n	800b0ba <__sfp+0x1e>
 800b10a:	2104      	movs	r1, #4
 800b10c:	0038      	movs	r0, r7
 800b10e:	f7ff ff57 	bl	800afc0 <__sfmoreglue>
 800b112:	1e04      	subs	r4, r0, #0
 800b114:	6030      	str	r0, [r6, #0]
 800b116:	d1d5      	bne.n	800b0c4 <__sfp+0x28>
 800b118:	f7ff ff70 	bl	800affc <__sfp_lock_release>
 800b11c:	230c      	movs	r3, #12
 800b11e:	603b      	str	r3, [r7, #0]
 800b120:	e7ef      	b.n	800b102 <__sfp+0x66>
 800b122:	46c0      	nop			; (mov r8, r8)
 800b124:	0800c4bc 	.word	0x0800c4bc
 800b128:	ffff0001 	.word	0xffff0001

0800b12c <_fwalk_reent>:
 800b12c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b12e:	0004      	movs	r4, r0
 800b130:	0006      	movs	r6, r0
 800b132:	2700      	movs	r7, #0
 800b134:	9101      	str	r1, [sp, #4]
 800b136:	3448      	adds	r4, #72	; 0x48
 800b138:	6863      	ldr	r3, [r4, #4]
 800b13a:	68a5      	ldr	r5, [r4, #8]
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	9b00      	ldr	r3, [sp, #0]
 800b140:	3b01      	subs	r3, #1
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	d504      	bpl.n	800b150 <_fwalk_reent+0x24>
 800b146:	6824      	ldr	r4, [r4, #0]
 800b148:	2c00      	cmp	r4, #0
 800b14a:	d1f5      	bne.n	800b138 <_fwalk_reent+0xc>
 800b14c:	0038      	movs	r0, r7
 800b14e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b150:	89ab      	ldrh	r3, [r5, #12]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d908      	bls.n	800b168 <_fwalk_reent+0x3c>
 800b156:	220e      	movs	r2, #14
 800b158:	5eab      	ldrsh	r3, [r5, r2]
 800b15a:	3301      	adds	r3, #1
 800b15c:	d004      	beq.n	800b168 <_fwalk_reent+0x3c>
 800b15e:	0029      	movs	r1, r5
 800b160:	0030      	movs	r0, r6
 800b162:	9b01      	ldr	r3, [sp, #4]
 800b164:	4798      	blx	r3
 800b166:	4307      	orrs	r7, r0
 800b168:	3568      	adds	r5, #104	; 0x68
 800b16a:	e7e8      	b.n	800b13e <_fwalk_reent+0x12>

0800b16c <__retarget_lock_init_recursive>:
 800b16c:	4770      	bx	lr

0800b16e <__retarget_lock_acquire_recursive>:
 800b16e:	4770      	bx	lr

0800b170 <__retarget_lock_release_recursive>:
 800b170:	4770      	bx	lr
	...

0800b174 <__swhatbuf_r>:
 800b174:	b570      	push	{r4, r5, r6, lr}
 800b176:	000e      	movs	r6, r1
 800b178:	001d      	movs	r5, r3
 800b17a:	230e      	movs	r3, #14
 800b17c:	5ec9      	ldrsh	r1, [r1, r3]
 800b17e:	0014      	movs	r4, r2
 800b180:	b096      	sub	sp, #88	; 0x58
 800b182:	2900      	cmp	r1, #0
 800b184:	da08      	bge.n	800b198 <__swhatbuf_r+0x24>
 800b186:	220c      	movs	r2, #12
 800b188:	5eb3      	ldrsh	r3, [r6, r2]
 800b18a:	2200      	movs	r2, #0
 800b18c:	602a      	str	r2, [r5, #0]
 800b18e:	061b      	lsls	r3, r3, #24
 800b190:	d411      	bmi.n	800b1b6 <__swhatbuf_r+0x42>
 800b192:	2380      	movs	r3, #128	; 0x80
 800b194:	00db      	lsls	r3, r3, #3
 800b196:	e00f      	b.n	800b1b8 <__swhatbuf_r+0x44>
 800b198:	466a      	mov	r2, sp
 800b19a:	f000 f91b 	bl	800b3d4 <_fstat_r>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	dbf1      	blt.n	800b186 <__swhatbuf_r+0x12>
 800b1a2:	23f0      	movs	r3, #240	; 0xf0
 800b1a4:	9901      	ldr	r1, [sp, #4]
 800b1a6:	021b      	lsls	r3, r3, #8
 800b1a8:	4019      	ands	r1, r3
 800b1aa:	4b05      	ldr	r3, [pc, #20]	; (800b1c0 <__swhatbuf_r+0x4c>)
 800b1ac:	18c9      	adds	r1, r1, r3
 800b1ae:	424b      	negs	r3, r1
 800b1b0:	4159      	adcs	r1, r3
 800b1b2:	6029      	str	r1, [r5, #0]
 800b1b4:	e7ed      	b.n	800b192 <__swhatbuf_r+0x1e>
 800b1b6:	2340      	movs	r3, #64	; 0x40
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	6023      	str	r3, [r4, #0]
 800b1bc:	b016      	add	sp, #88	; 0x58
 800b1be:	bd70      	pop	{r4, r5, r6, pc}
 800b1c0:	ffffe000 	.word	0xffffe000

0800b1c4 <__smakebuf_r>:
 800b1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1c6:	2602      	movs	r6, #2
 800b1c8:	898b      	ldrh	r3, [r1, #12]
 800b1ca:	0005      	movs	r5, r0
 800b1cc:	000c      	movs	r4, r1
 800b1ce:	4233      	tst	r3, r6
 800b1d0:	d006      	beq.n	800b1e0 <__smakebuf_r+0x1c>
 800b1d2:	0023      	movs	r3, r4
 800b1d4:	3347      	adds	r3, #71	; 0x47
 800b1d6:	6023      	str	r3, [r4, #0]
 800b1d8:	6123      	str	r3, [r4, #16]
 800b1da:	2301      	movs	r3, #1
 800b1dc:	6163      	str	r3, [r4, #20]
 800b1de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b1e0:	466a      	mov	r2, sp
 800b1e2:	ab01      	add	r3, sp, #4
 800b1e4:	f7ff ffc6 	bl	800b174 <__swhatbuf_r>
 800b1e8:	9900      	ldr	r1, [sp, #0]
 800b1ea:	0007      	movs	r7, r0
 800b1ec:	0028      	movs	r0, r5
 800b1ee:	f7ff f92d 	bl	800a44c <_malloc_r>
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	d108      	bne.n	800b208 <__smakebuf_r+0x44>
 800b1f6:	220c      	movs	r2, #12
 800b1f8:	5ea3      	ldrsh	r3, [r4, r2]
 800b1fa:	059a      	lsls	r2, r3, #22
 800b1fc:	d4ef      	bmi.n	800b1de <__smakebuf_r+0x1a>
 800b1fe:	2203      	movs	r2, #3
 800b200:	4393      	bics	r3, r2
 800b202:	431e      	orrs	r6, r3
 800b204:	81a6      	strh	r6, [r4, #12]
 800b206:	e7e4      	b.n	800b1d2 <__smakebuf_r+0xe>
 800b208:	4b0f      	ldr	r3, [pc, #60]	; (800b248 <__smakebuf_r+0x84>)
 800b20a:	62ab      	str	r3, [r5, #40]	; 0x28
 800b20c:	2380      	movs	r3, #128	; 0x80
 800b20e:	89a2      	ldrh	r2, [r4, #12]
 800b210:	6020      	str	r0, [r4, #0]
 800b212:	4313      	orrs	r3, r2
 800b214:	81a3      	strh	r3, [r4, #12]
 800b216:	9b00      	ldr	r3, [sp, #0]
 800b218:	6120      	str	r0, [r4, #16]
 800b21a:	6163      	str	r3, [r4, #20]
 800b21c:	9b01      	ldr	r3, [sp, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d00d      	beq.n	800b23e <__smakebuf_r+0x7a>
 800b222:	0028      	movs	r0, r5
 800b224:	230e      	movs	r3, #14
 800b226:	5ee1      	ldrsh	r1, [r4, r3]
 800b228:	f000 f8e6 	bl	800b3f8 <_isatty_r>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d006      	beq.n	800b23e <__smakebuf_r+0x7a>
 800b230:	2203      	movs	r2, #3
 800b232:	89a3      	ldrh	r3, [r4, #12]
 800b234:	4393      	bics	r3, r2
 800b236:	001a      	movs	r2, r3
 800b238:	2301      	movs	r3, #1
 800b23a:	4313      	orrs	r3, r2
 800b23c:	81a3      	strh	r3, [r4, #12]
 800b23e:	89a0      	ldrh	r0, [r4, #12]
 800b240:	4307      	orrs	r7, r0
 800b242:	81a7      	strh	r7, [r4, #12]
 800b244:	e7cb      	b.n	800b1de <__smakebuf_r+0x1a>
 800b246:	46c0      	nop			; (mov r8, r8)
 800b248:	0800afb1 	.word	0x0800afb1

0800b24c <_malloc_usable_size_r>:
 800b24c:	1f0b      	subs	r3, r1, #4
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	1f18      	subs	r0, r3, #4
 800b252:	2b00      	cmp	r3, #0
 800b254:	da01      	bge.n	800b25a <_malloc_usable_size_r+0xe>
 800b256:	580b      	ldr	r3, [r1, r0]
 800b258:	18c0      	adds	r0, r0, r3
 800b25a:	4770      	bx	lr

0800b25c <_raise_r>:
 800b25c:	b570      	push	{r4, r5, r6, lr}
 800b25e:	0004      	movs	r4, r0
 800b260:	000d      	movs	r5, r1
 800b262:	291f      	cmp	r1, #31
 800b264:	d904      	bls.n	800b270 <_raise_r+0x14>
 800b266:	2316      	movs	r3, #22
 800b268:	6003      	str	r3, [r0, #0]
 800b26a:	2001      	movs	r0, #1
 800b26c:	4240      	negs	r0, r0
 800b26e:	bd70      	pop	{r4, r5, r6, pc}
 800b270:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b272:	2b00      	cmp	r3, #0
 800b274:	d004      	beq.n	800b280 <_raise_r+0x24>
 800b276:	008a      	lsls	r2, r1, #2
 800b278:	189b      	adds	r3, r3, r2
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	2a00      	cmp	r2, #0
 800b27e:	d108      	bne.n	800b292 <_raise_r+0x36>
 800b280:	0020      	movs	r0, r4
 800b282:	f000 f831 	bl	800b2e8 <_getpid_r>
 800b286:	002a      	movs	r2, r5
 800b288:	0001      	movs	r1, r0
 800b28a:	0020      	movs	r0, r4
 800b28c:	f000 f81a 	bl	800b2c4 <_kill_r>
 800b290:	e7ed      	b.n	800b26e <_raise_r+0x12>
 800b292:	2000      	movs	r0, #0
 800b294:	2a01      	cmp	r2, #1
 800b296:	d0ea      	beq.n	800b26e <_raise_r+0x12>
 800b298:	1c51      	adds	r1, r2, #1
 800b29a:	d103      	bne.n	800b2a4 <_raise_r+0x48>
 800b29c:	2316      	movs	r3, #22
 800b29e:	3001      	adds	r0, #1
 800b2a0:	6023      	str	r3, [r4, #0]
 800b2a2:	e7e4      	b.n	800b26e <_raise_r+0x12>
 800b2a4:	2400      	movs	r4, #0
 800b2a6:	0028      	movs	r0, r5
 800b2a8:	601c      	str	r4, [r3, #0]
 800b2aa:	4790      	blx	r2
 800b2ac:	0020      	movs	r0, r4
 800b2ae:	e7de      	b.n	800b26e <_raise_r+0x12>

0800b2b0 <raise>:
 800b2b0:	b510      	push	{r4, lr}
 800b2b2:	4b03      	ldr	r3, [pc, #12]	; (800b2c0 <raise+0x10>)
 800b2b4:	0001      	movs	r1, r0
 800b2b6:	6818      	ldr	r0, [r3, #0]
 800b2b8:	f7ff ffd0 	bl	800b25c <_raise_r>
 800b2bc:	bd10      	pop	{r4, pc}
 800b2be:	46c0      	nop			; (mov r8, r8)
 800b2c0:	2000000c 	.word	0x2000000c

0800b2c4 <_kill_r>:
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	b570      	push	{r4, r5, r6, lr}
 800b2c8:	4d06      	ldr	r5, [pc, #24]	; (800b2e4 <_kill_r+0x20>)
 800b2ca:	0004      	movs	r4, r0
 800b2cc:	0008      	movs	r0, r1
 800b2ce:	0011      	movs	r1, r2
 800b2d0:	602b      	str	r3, [r5, #0]
 800b2d2:	f7f9 fb6c 	bl	80049ae <_kill>
 800b2d6:	1c43      	adds	r3, r0, #1
 800b2d8:	d103      	bne.n	800b2e2 <_kill_r+0x1e>
 800b2da:	682b      	ldr	r3, [r5, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d000      	beq.n	800b2e2 <_kill_r+0x1e>
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	bd70      	pop	{r4, r5, r6, pc}
 800b2e4:	20000444 	.word	0x20000444

0800b2e8 <_getpid_r>:
 800b2e8:	b510      	push	{r4, lr}
 800b2ea:	f7f9 fb5a 	bl	80049a2 <_getpid>
 800b2ee:	bd10      	pop	{r4, pc}

0800b2f0 <__sread>:
 800b2f0:	b570      	push	{r4, r5, r6, lr}
 800b2f2:	000c      	movs	r4, r1
 800b2f4:	250e      	movs	r5, #14
 800b2f6:	5f49      	ldrsh	r1, [r1, r5]
 800b2f8:	f000 f8a4 	bl	800b444 <_read_r>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	db03      	blt.n	800b308 <__sread+0x18>
 800b300:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b302:	181b      	adds	r3, r3, r0
 800b304:	6563      	str	r3, [r4, #84]	; 0x54
 800b306:	bd70      	pop	{r4, r5, r6, pc}
 800b308:	89a3      	ldrh	r3, [r4, #12]
 800b30a:	4a02      	ldr	r2, [pc, #8]	; (800b314 <__sread+0x24>)
 800b30c:	4013      	ands	r3, r2
 800b30e:	81a3      	strh	r3, [r4, #12]
 800b310:	e7f9      	b.n	800b306 <__sread+0x16>
 800b312:	46c0      	nop			; (mov r8, r8)
 800b314:	ffffefff 	.word	0xffffefff

0800b318 <__swrite>:
 800b318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31a:	001f      	movs	r7, r3
 800b31c:	898b      	ldrh	r3, [r1, #12]
 800b31e:	0005      	movs	r5, r0
 800b320:	000c      	movs	r4, r1
 800b322:	0016      	movs	r6, r2
 800b324:	05db      	lsls	r3, r3, #23
 800b326:	d505      	bpl.n	800b334 <__swrite+0x1c>
 800b328:	230e      	movs	r3, #14
 800b32a:	5ec9      	ldrsh	r1, [r1, r3]
 800b32c:	2200      	movs	r2, #0
 800b32e:	2302      	movs	r3, #2
 800b330:	f000 f874 	bl	800b41c <_lseek_r>
 800b334:	89a3      	ldrh	r3, [r4, #12]
 800b336:	4a05      	ldr	r2, [pc, #20]	; (800b34c <__swrite+0x34>)
 800b338:	0028      	movs	r0, r5
 800b33a:	4013      	ands	r3, r2
 800b33c:	81a3      	strh	r3, [r4, #12]
 800b33e:	0032      	movs	r2, r6
 800b340:	230e      	movs	r3, #14
 800b342:	5ee1      	ldrsh	r1, [r4, r3]
 800b344:	003b      	movs	r3, r7
 800b346:	f000 f81f 	bl	800b388 <_write_r>
 800b34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b34c:	ffffefff 	.word	0xffffefff

0800b350 <__sseek>:
 800b350:	b570      	push	{r4, r5, r6, lr}
 800b352:	000c      	movs	r4, r1
 800b354:	250e      	movs	r5, #14
 800b356:	5f49      	ldrsh	r1, [r1, r5]
 800b358:	f000 f860 	bl	800b41c <_lseek_r>
 800b35c:	89a3      	ldrh	r3, [r4, #12]
 800b35e:	1c42      	adds	r2, r0, #1
 800b360:	d103      	bne.n	800b36a <__sseek+0x1a>
 800b362:	4a05      	ldr	r2, [pc, #20]	; (800b378 <__sseek+0x28>)
 800b364:	4013      	ands	r3, r2
 800b366:	81a3      	strh	r3, [r4, #12]
 800b368:	bd70      	pop	{r4, r5, r6, pc}
 800b36a:	2280      	movs	r2, #128	; 0x80
 800b36c:	0152      	lsls	r2, r2, #5
 800b36e:	4313      	orrs	r3, r2
 800b370:	81a3      	strh	r3, [r4, #12]
 800b372:	6560      	str	r0, [r4, #84]	; 0x54
 800b374:	e7f8      	b.n	800b368 <__sseek+0x18>
 800b376:	46c0      	nop			; (mov r8, r8)
 800b378:	ffffefff 	.word	0xffffefff

0800b37c <__sclose>:
 800b37c:	b510      	push	{r4, lr}
 800b37e:	230e      	movs	r3, #14
 800b380:	5ec9      	ldrsh	r1, [r1, r3]
 800b382:	f000 f815 	bl	800b3b0 <_close_r>
 800b386:	bd10      	pop	{r4, pc}

0800b388 <_write_r>:
 800b388:	b570      	push	{r4, r5, r6, lr}
 800b38a:	0004      	movs	r4, r0
 800b38c:	0008      	movs	r0, r1
 800b38e:	0011      	movs	r1, r2
 800b390:	001a      	movs	r2, r3
 800b392:	2300      	movs	r3, #0
 800b394:	4d05      	ldr	r5, [pc, #20]	; (800b3ac <_write_r+0x24>)
 800b396:	602b      	str	r3, [r5, #0]
 800b398:	f7f9 fb42 	bl	8004a20 <_write>
 800b39c:	1c43      	adds	r3, r0, #1
 800b39e:	d103      	bne.n	800b3a8 <_write_r+0x20>
 800b3a0:	682b      	ldr	r3, [r5, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d000      	beq.n	800b3a8 <_write_r+0x20>
 800b3a6:	6023      	str	r3, [r4, #0]
 800b3a8:	bd70      	pop	{r4, r5, r6, pc}
 800b3aa:	46c0      	nop			; (mov r8, r8)
 800b3ac:	20000444 	.word	0x20000444

0800b3b0 <_close_r>:
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	b570      	push	{r4, r5, r6, lr}
 800b3b4:	4d06      	ldr	r5, [pc, #24]	; (800b3d0 <_close_r+0x20>)
 800b3b6:	0004      	movs	r4, r0
 800b3b8:	0008      	movs	r0, r1
 800b3ba:	602b      	str	r3, [r5, #0]
 800b3bc:	f7f9 fb4c 	bl	8004a58 <_close>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	d103      	bne.n	800b3cc <_close_r+0x1c>
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d000      	beq.n	800b3cc <_close_r+0x1c>
 800b3ca:	6023      	str	r3, [r4, #0]
 800b3cc:	bd70      	pop	{r4, r5, r6, pc}
 800b3ce:	46c0      	nop			; (mov r8, r8)
 800b3d0:	20000444 	.word	0x20000444

0800b3d4 <_fstat_r>:
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	b570      	push	{r4, r5, r6, lr}
 800b3d8:	4d06      	ldr	r5, [pc, #24]	; (800b3f4 <_fstat_r+0x20>)
 800b3da:	0004      	movs	r4, r0
 800b3dc:	0008      	movs	r0, r1
 800b3de:	0011      	movs	r1, r2
 800b3e0:	602b      	str	r3, [r5, #0]
 800b3e2:	f7f9 fb43 	bl	8004a6c <_fstat>
 800b3e6:	1c43      	adds	r3, r0, #1
 800b3e8:	d103      	bne.n	800b3f2 <_fstat_r+0x1e>
 800b3ea:	682b      	ldr	r3, [r5, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d000      	beq.n	800b3f2 <_fstat_r+0x1e>
 800b3f0:	6023      	str	r3, [r4, #0]
 800b3f2:	bd70      	pop	{r4, r5, r6, pc}
 800b3f4:	20000444 	.word	0x20000444

0800b3f8 <_isatty_r>:
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	b570      	push	{r4, r5, r6, lr}
 800b3fc:	4d06      	ldr	r5, [pc, #24]	; (800b418 <_isatty_r+0x20>)
 800b3fe:	0004      	movs	r4, r0
 800b400:	0008      	movs	r0, r1
 800b402:	602b      	str	r3, [r5, #0]
 800b404:	f7f9 fb40 	bl	8004a88 <_isatty>
 800b408:	1c43      	adds	r3, r0, #1
 800b40a:	d103      	bne.n	800b414 <_isatty_r+0x1c>
 800b40c:	682b      	ldr	r3, [r5, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d000      	beq.n	800b414 <_isatty_r+0x1c>
 800b412:	6023      	str	r3, [r4, #0]
 800b414:	bd70      	pop	{r4, r5, r6, pc}
 800b416:	46c0      	nop			; (mov r8, r8)
 800b418:	20000444 	.word	0x20000444

0800b41c <_lseek_r>:
 800b41c:	b570      	push	{r4, r5, r6, lr}
 800b41e:	0004      	movs	r4, r0
 800b420:	0008      	movs	r0, r1
 800b422:	0011      	movs	r1, r2
 800b424:	001a      	movs	r2, r3
 800b426:	2300      	movs	r3, #0
 800b428:	4d05      	ldr	r5, [pc, #20]	; (800b440 <_lseek_r+0x24>)
 800b42a:	602b      	str	r3, [r5, #0]
 800b42c:	f7f9 fb35 	bl	8004a9a <_lseek>
 800b430:	1c43      	adds	r3, r0, #1
 800b432:	d103      	bne.n	800b43c <_lseek_r+0x20>
 800b434:	682b      	ldr	r3, [r5, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d000      	beq.n	800b43c <_lseek_r+0x20>
 800b43a:	6023      	str	r3, [r4, #0]
 800b43c:	bd70      	pop	{r4, r5, r6, pc}
 800b43e:	46c0      	nop			; (mov r8, r8)
 800b440:	20000444 	.word	0x20000444

0800b444 <_read_r>:
 800b444:	b570      	push	{r4, r5, r6, lr}
 800b446:	0004      	movs	r4, r0
 800b448:	0008      	movs	r0, r1
 800b44a:	0011      	movs	r1, r2
 800b44c:	001a      	movs	r2, r3
 800b44e:	2300      	movs	r3, #0
 800b450:	4d05      	ldr	r5, [pc, #20]	; (800b468 <_read_r+0x24>)
 800b452:	602b      	str	r3, [r5, #0]
 800b454:	f7f9 fac7 	bl	80049e6 <_read>
 800b458:	1c43      	adds	r3, r0, #1
 800b45a:	d103      	bne.n	800b464 <_read_r+0x20>
 800b45c:	682b      	ldr	r3, [r5, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d000      	beq.n	800b464 <_read_r+0x20>
 800b462:	6023      	str	r3, [r4, #0]
 800b464:	bd70      	pop	{r4, r5, r6, pc}
 800b466:	46c0      	nop			; (mov r8, r8)
 800b468:	20000444 	.word	0x20000444

0800b46c <pow>:
 800b46c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b46e:	0014      	movs	r4, r2
 800b470:	001d      	movs	r5, r3
 800b472:	9000      	str	r0, [sp, #0]
 800b474:	9101      	str	r1, [sp, #4]
 800b476:	f000 f867 	bl	800b548 <__ieee754_pow>
 800b47a:	0022      	movs	r2, r4
 800b47c:	0006      	movs	r6, r0
 800b47e:	000f      	movs	r7, r1
 800b480:	002b      	movs	r3, r5
 800b482:	0020      	movs	r0, r4
 800b484:	0029      	movs	r1, r5
 800b486:	f7f7 faef 	bl	8002a68 <__aeabi_dcmpun>
 800b48a:	2800      	cmp	r0, #0
 800b48c:	d13f      	bne.n	800b50e <pow+0xa2>
 800b48e:	9800      	ldr	r0, [sp, #0]
 800b490:	9901      	ldr	r1, [sp, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	2300      	movs	r3, #0
 800b496:	f7f4 ffd9 	bl	800044c <__aeabi_dcmpeq>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d019      	beq.n	800b4d2 <pow+0x66>
 800b49e:	2200      	movs	r2, #0
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	0020      	movs	r0, r4
 800b4a4:	0029      	movs	r1, r5
 800b4a6:	f7f4 ffd1 	bl	800044c <__aeabi_dcmpeq>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d146      	bne.n	800b53c <pow+0xd0>
 800b4ae:	0020      	movs	r0, r4
 800b4b0:	0029      	movs	r1, r5
 800b4b2:	f000 fe3d 	bl	800c130 <finite>
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	d029      	beq.n	800b50e <pow+0xa2>
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	2300      	movs	r3, #0
 800b4be:	0020      	movs	r0, r4
 800b4c0:	0029      	movs	r1, r5
 800b4c2:	f7f4 ffc9 	bl	8000458 <__aeabi_dcmplt>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	d021      	beq.n	800b50e <pow+0xa2>
 800b4ca:	f7fd f803 	bl	80084d4 <__errno>
 800b4ce:	2322      	movs	r3, #34	; 0x22
 800b4d0:	e01c      	b.n	800b50c <pow+0xa0>
 800b4d2:	0030      	movs	r0, r6
 800b4d4:	0039      	movs	r1, r7
 800b4d6:	f000 fe2b 	bl	800c130 <finite>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d11b      	bne.n	800b516 <pow+0xaa>
 800b4de:	9800      	ldr	r0, [sp, #0]
 800b4e0:	9901      	ldr	r1, [sp, #4]
 800b4e2:	f000 fe25 	bl	800c130 <finite>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	d015      	beq.n	800b516 <pow+0xaa>
 800b4ea:	0020      	movs	r0, r4
 800b4ec:	0029      	movs	r1, r5
 800b4ee:	f000 fe1f 	bl	800c130 <finite>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	d00f      	beq.n	800b516 <pow+0xaa>
 800b4f6:	0032      	movs	r2, r6
 800b4f8:	003b      	movs	r3, r7
 800b4fa:	0030      	movs	r0, r6
 800b4fc:	0039      	movs	r1, r7
 800b4fe:	f7f7 fab3 	bl	8002a68 <__aeabi_dcmpun>
 800b502:	2800      	cmp	r0, #0
 800b504:	d0e1      	beq.n	800b4ca <pow+0x5e>
 800b506:	f7fc ffe5 	bl	80084d4 <__errno>
 800b50a:	2321      	movs	r3, #33	; 0x21
 800b50c:	6003      	str	r3, [r0, #0]
 800b50e:	0030      	movs	r0, r6
 800b510:	0039      	movs	r1, r7
 800b512:	b003      	add	sp, #12
 800b514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b516:	2200      	movs	r2, #0
 800b518:	2300      	movs	r3, #0
 800b51a:	0030      	movs	r0, r6
 800b51c:	0039      	movs	r1, r7
 800b51e:	f7f4 ff95 	bl	800044c <__aeabi_dcmpeq>
 800b522:	2800      	cmp	r0, #0
 800b524:	d0f3      	beq.n	800b50e <pow+0xa2>
 800b526:	9800      	ldr	r0, [sp, #0]
 800b528:	9901      	ldr	r1, [sp, #4]
 800b52a:	f000 fe01 	bl	800c130 <finite>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d0ed      	beq.n	800b50e <pow+0xa2>
 800b532:	0020      	movs	r0, r4
 800b534:	0029      	movs	r1, r5
 800b536:	f000 fdfb 	bl	800c130 <finite>
 800b53a:	e7c4      	b.n	800b4c6 <pow+0x5a>
 800b53c:	2600      	movs	r6, #0
 800b53e:	4f01      	ldr	r7, [pc, #4]	; (800b544 <pow+0xd8>)
 800b540:	e7e5      	b.n	800b50e <pow+0xa2>
 800b542:	46c0      	nop			; (mov r8, r8)
 800b544:	3ff00000 	.word	0x3ff00000

0800b548 <__ieee754_pow>:
 800b548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b54a:	b095      	sub	sp, #84	; 0x54
 800b54c:	9202      	str	r2, [sp, #8]
 800b54e:	9303      	str	r3, [sp, #12]
 800b550:	9b03      	ldr	r3, [sp, #12]
 800b552:	9a03      	ldr	r2, [sp, #12]
 800b554:	9304      	str	r3, [sp, #16]
 800b556:	9b02      	ldr	r3, [sp, #8]
 800b558:	0056      	lsls	r6, r2, #1
 800b55a:	001a      	movs	r2, r3
 800b55c:	0876      	lsrs	r6, r6, #1
 800b55e:	0007      	movs	r7, r0
 800b560:	000d      	movs	r5, r1
 800b562:	4332      	orrs	r2, r6
 800b564:	d119      	bne.n	800b59a <__ieee754_pow+0x52>
 800b566:	2180      	movs	r1, #128	; 0x80
 800b568:	0309      	lsls	r1, r1, #12
 800b56a:	4069      	eors	r1, r5
 800b56c:	0002      	movs	r2, r0
 800b56e:	000b      	movs	r3, r1
 800b570:	1892      	adds	r2, r2, r2
 800b572:	415b      	adcs	r3, r3
 800b574:	4989      	ldr	r1, [pc, #548]	; (800b79c <__ieee754_pow+0x254>)
 800b576:	428b      	cmp	r3, r1
 800b578:	d806      	bhi.n	800b588 <__ieee754_pow+0x40>
 800b57a:	d001      	beq.n	800b580 <__ieee754_pow+0x38>
 800b57c:	f000 fcb6 	bl	800beec <__ieee754_pow+0x9a4>
 800b580:	2a00      	cmp	r2, #0
 800b582:	d101      	bne.n	800b588 <__ieee754_pow+0x40>
 800b584:	f000 fcb2 	bl	800beec <__ieee754_pow+0x9a4>
 800b588:	9a02      	ldr	r2, [sp, #8]
 800b58a:	9b03      	ldr	r3, [sp, #12]
 800b58c:	0038      	movs	r0, r7
 800b58e:	0029      	movs	r1, r5
 800b590:	f7f5 fd2e 	bl	8000ff0 <__aeabi_dadd>
 800b594:	9000      	str	r0, [sp, #0]
 800b596:	9101      	str	r1, [sp, #4]
 800b598:	e0ad      	b.n	800b6f6 <__ieee754_pow+0x1ae>
 800b59a:	4a81      	ldr	r2, [pc, #516]	; (800b7a0 <__ieee754_pow+0x258>)
 800b59c:	004c      	lsls	r4, r1, #1
 800b59e:	9108      	str	r1, [sp, #32]
 800b5a0:	9000      	str	r0, [sp, #0]
 800b5a2:	0864      	lsrs	r4, r4, #1
 800b5a4:	4294      	cmp	r4, r2
 800b5a6:	dc08      	bgt.n	800b5ba <__ieee754_pow+0x72>
 800b5a8:	d101      	bne.n	800b5ae <__ieee754_pow+0x66>
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	d1ec      	bne.n	800b588 <__ieee754_pow+0x40>
 800b5ae:	4a7c      	ldr	r2, [pc, #496]	; (800b7a0 <__ieee754_pow+0x258>)
 800b5b0:	4296      	cmp	r6, r2
 800b5b2:	dc02      	bgt.n	800b5ba <__ieee754_pow+0x72>
 800b5b4:	d10c      	bne.n	800b5d0 <__ieee754_pow+0x88>
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00a      	beq.n	800b5d0 <__ieee754_pow+0x88>
 800b5ba:	4b7a      	ldr	r3, [pc, #488]	; (800b7a4 <__ieee754_pow+0x25c>)
 800b5bc:	18eb      	adds	r3, r5, r3
 800b5be:	433b      	orrs	r3, r7
 800b5c0:	d1e2      	bne.n	800b588 <__ieee754_pow+0x40>
 800b5c2:	2180      	movs	r1, #128	; 0x80
 800b5c4:	9803      	ldr	r0, [sp, #12]
 800b5c6:	0309      	lsls	r1, r1, #12
 800b5c8:	4048      	eors	r0, r1
 800b5ca:	0003      	movs	r3, r0
 800b5cc:	9a02      	ldr	r2, [sp, #8]
 800b5ce:	e7cf      	b.n	800b570 <__ieee754_pow+0x28>
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	9206      	str	r2, [sp, #24]
 800b5d4:	2d00      	cmp	r5, #0
 800b5d6:	da69      	bge.n	800b6ac <__ieee754_pow+0x164>
 800b5d8:	4a73      	ldr	r2, [pc, #460]	; (800b7a8 <__ieee754_pow+0x260>)
 800b5da:	4296      	cmp	r6, r2
 800b5dc:	dc64      	bgt.n	800b6a8 <__ieee754_pow+0x160>
 800b5de:	4a73      	ldr	r2, [pc, #460]	; (800b7ac <__ieee754_pow+0x264>)
 800b5e0:	4296      	cmp	r6, r2
 800b5e2:	dd11      	ble.n	800b608 <__ieee754_pow+0xc0>
 800b5e4:	4972      	ldr	r1, [pc, #456]	; (800b7b0 <__ieee754_pow+0x268>)
 800b5e6:	1532      	asrs	r2, r6, #20
 800b5e8:	1852      	adds	r2, r2, r1
 800b5ea:	2a14      	cmp	r2, #20
 800b5ec:	dd3c      	ble.n	800b668 <__ieee754_pow+0x120>
 800b5ee:	2134      	movs	r1, #52	; 0x34
 800b5f0:	1a8a      	subs	r2, r1, r2
 800b5f2:	9902      	ldr	r1, [sp, #8]
 800b5f4:	40d1      	lsrs	r1, r2
 800b5f6:	0008      	movs	r0, r1
 800b5f8:	4090      	lsls	r0, r2
 800b5fa:	4298      	cmp	r0, r3
 800b5fc:	d104      	bne.n	800b608 <__ieee754_pow+0xc0>
 800b5fe:	2201      	movs	r2, #1
 800b600:	4011      	ands	r1, r2
 800b602:	1892      	adds	r2, r2, r2
 800b604:	1a52      	subs	r2, r2, r1
 800b606:	9206      	str	r2, [sp, #24]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d03c      	beq.n	800b686 <__ieee754_pow+0x13e>
 800b60c:	0038      	movs	r0, r7
 800b60e:	0029      	movs	r1, r5
 800b610:	f000 fd8b 	bl	800c12a <fabs>
 800b614:	9000      	str	r0, [sp, #0]
 800b616:	9101      	str	r1, [sp, #4]
 800b618:	2f00      	cmp	r7, #0
 800b61a:	d000      	beq.n	800b61e <__ieee754_pow+0xd6>
 800b61c:	e094      	b.n	800b748 <__ieee754_pow+0x200>
 800b61e:	2c00      	cmp	r4, #0
 800b620:	d005      	beq.n	800b62e <__ieee754_pow+0xe6>
 800b622:	4a64      	ldr	r2, [pc, #400]	; (800b7b4 <__ieee754_pow+0x26c>)
 800b624:	00ab      	lsls	r3, r5, #2
 800b626:	089b      	lsrs	r3, r3, #2
 800b628:	4293      	cmp	r3, r2
 800b62a:	d000      	beq.n	800b62e <__ieee754_pow+0xe6>
 800b62c:	e08c      	b.n	800b748 <__ieee754_pow+0x200>
 800b62e:	9b04      	ldr	r3, [sp, #16]
 800b630:	2b00      	cmp	r3, #0
 800b632:	da07      	bge.n	800b644 <__ieee754_pow+0xfc>
 800b634:	9a00      	ldr	r2, [sp, #0]
 800b636:	9b01      	ldr	r3, [sp, #4]
 800b638:	2000      	movs	r0, #0
 800b63a:	495e      	ldr	r1, [pc, #376]	; (800b7b4 <__ieee754_pow+0x26c>)
 800b63c:	f7f6 f814 	bl	8001668 <__aeabi_ddiv>
 800b640:	9000      	str	r0, [sp, #0]
 800b642:	9101      	str	r1, [sp, #4]
 800b644:	9b08      	ldr	r3, [sp, #32]
 800b646:	2b00      	cmp	r3, #0
 800b648:	da55      	bge.n	800b6f6 <__ieee754_pow+0x1ae>
 800b64a:	4b56      	ldr	r3, [pc, #344]	; (800b7a4 <__ieee754_pow+0x25c>)
 800b64c:	18e4      	adds	r4, r4, r3
 800b64e:	9b06      	ldr	r3, [sp, #24]
 800b650:	431c      	orrs	r4, r3
 800b652:	d000      	beq.n	800b656 <__ieee754_pow+0x10e>
 800b654:	e06c      	b.n	800b730 <__ieee754_pow+0x1e8>
 800b656:	9a00      	ldr	r2, [sp, #0]
 800b658:	9b01      	ldr	r3, [sp, #4]
 800b65a:	0010      	movs	r0, r2
 800b65c:	0019      	movs	r1, r3
 800b65e:	f7f6 fe71 	bl	8002344 <__aeabi_dsub>
 800b662:	0002      	movs	r2, r0
 800b664:	000b      	movs	r3, r1
 800b666:	e01c      	b.n	800b6a2 <__ieee754_pow+0x15a>
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1cf      	bne.n	800b60c <__ieee754_pow+0xc4>
 800b66c:	3314      	adds	r3, #20
 800b66e:	1a9a      	subs	r2, r3, r2
 800b670:	0033      	movs	r3, r6
 800b672:	4113      	asrs	r3, r2
 800b674:	0019      	movs	r1, r3
 800b676:	4091      	lsls	r1, r2
 800b678:	42b1      	cmp	r1, r6
 800b67a:	d104      	bne.n	800b686 <__ieee754_pow+0x13e>
 800b67c:	2201      	movs	r2, #1
 800b67e:	4013      	ands	r3, r2
 800b680:	1892      	adds	r2, r2, r2
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	9306      	str	r3, [sp, #24]
 800b686:	4b4b      	ldr	r3, [pc, #300]	; (800b7b4 <__ieee754_pow+0x26c>)
 800b688:	429e      	cmp	r6, r3
 800b68a:	d138      	bne.n	800b6fe <__ieee754_pow+0x1b6>
 800b68c:	0038      	movs	r0, r7
 800b68e:	0029      	movs	r1, r5
 800b690:	9b04      	ldr	r3, [sp, #16]
 800b692:	9000      	str	r0, [sp, #0]
 800b694:	9101      	str	r1, [sp, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	da2d      	bge.n	800b6f6 <__ieee754_pow+0x1ae>
 800b69a:	003a      	movs	r2, r7
 800b69c:	002b      	movs	r3, r5
 800b69e:	2000      	movs	r0, #0
 800b6a0:	4944      	ldr	r1, [pc, #272]	; (800b7b4 <__ieee754_pow+0x26c>)
 800b6a2:	f7f5 ffe1 	bl	8001668 <__aeabi_ddiv>
 800b6a6:	e775      	b.n	800b594 <__ieee754_pow+0x4c>
 800b6a8:	2202      	movs	r2, #2
 800b6aa:	9206      	str	r2, [sp, #24]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1ad      	bne.n	800b60c <__ieee754_pow+0xc4>
 800b6b0:	4b3b      	ldr	r3, [pc, #236]	; (800b7a0 <__ieee754_pow+0x258>)
 800b6b2:	429e      	cmp	r6, r3
 800b6b4:	d1e7      	bne.n	800b686 <__ieee754_pow+0x13e>
 800b6b6:	4b3b      	ldr	r3, [pc, #236]	; (800b7a4 <__ieee754_pow+0x25c>)
 800b6b8:	18e3      	adds	r3, r4, r3
 800b6ba:	431f      	orrs	r7, r3
 800b6bc:	d101      	bne.n	800b6c2 <__ieee754_pow+0x17a>
 800b6be:	f000 fc15 	bl	800beec <__ieee754_pow+0x9a4>
 800b6c2:	4b3a      	ldr	r3, [pc, #232]	; (800b7ac <__ieee754_pow+0x264>)
 800b6c4:	429c      	cmp	r4, r3
 800b6c6:	dd09      	ble.n	800b6dc <__ieee754_pow+0x194>
 800b6c8:	9b04      	ldr	r3, [sp, #16]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	da01      	bge.n	800b6d2 <__ieee754_pow+0x18a>
 800b6ce:	f000 fc11 	bl	800bef4 <__ieee754_pow+0x9ac>
 800b6d2:	9b02      	ldr	r3, [sp, #8]
 800b6d4:	9c03      	ldr	r4, [sp, #12]
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	9401      	str	r4, [sp, #4]
 800b6da:	e00c      	b.n	800b6f6 <__ieee754_pow+0x1ae>
 800b6dc:	9b04      	ldr	r3, [sp, #16]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	db01      	blt.n	800b6e6 <__ieee754_pow+0x19e>
 800b6e2:	f000 fc07 	bl	800bef4 <__ieee754_pow+0x9ac>
 800b6e6:	2280      	movs	r2, #128	; 0x80
 800b6e8:	0612      	lsls	r2, r2, #24
 800b6ea:	4694      	mov	ip, r2
 800b6ec:	9b02      	ldr	r3, [sp, #8]
 800b6ee:	9300      	str	r3, [sp, #0]
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	4463      	add	r3, ip
 800b6f4:	9301      	str	r3, [sp, #4]
 800b6f6:	9800      	ldr	r0, [sp, #0]
 800b6f8:	9901      	ldr	r1, [sp, #4]
 800b6fa:	b015      	add	sp, #84	; 0x54
 800b6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6fe:	2380      	movs	r3, #128	; 0x80
 800b700:	9a04      	ldr	r2, [sp, #16]
 800b702:	05db      	lsls	r3, r3, #23
 800b704:	429a      	cmp	r2, r3
 800b706:	d106      	bne.n	800b716 <__ieee754_pow+0x1ce>
 800b708:	003a      	movs	r2, r7
 800b70a:	002b      	movs	r3, r5
 800b70c:	0038      	movs	r0, r7
 800b70e:	0029      	movs	r1, r5
 800b710:	f7f6 fbac 	bl	8001e6c <__aeabi_dmul>
 800b714:	e73e      	b.n	800b594 <__ieee754_pow+0x4c>
 800b716:	4b28      	ldr	r3, [pc, #160]	; (800b7b8 <__ieee754_pow+0x270>)
 800b718:	9a04      	ldr	r2, [sp, #16]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d000      	beq.n	800b720 <__ieee754_pow+0x1d8>
 800b71e:	e775      	b.n	800b60c <__ieee754_pow+0xc4>
 800b720:	2d00      	cmp	r5, #0
 800b722:	da00      	bge.n	800b726 <__ieee754_pow+0x1de>
 800b724:	e772      	b.n	800b60c <__ieee754_pow+0xc4>
 800b726:	0038      	movs	r0, r7
 800b728:	0029      	movs	r1, r5
 800b72a:	f000 fc17 	bl	800bf5c <__ieee754_sqrt>
 800b72e:	e731      	b.n	800b594 <__ieee754_pow+0x4c>
 800b730:	9b06      	ldr	r3, [sp, #24]
 800b732:	2b01      	cmp	r3, #1
 800b734:	d1df      	bne.n	800b6f6 <__ieee754_pow+0x1ae>
 800b736:	9800      	ldr	r0, [sp, #0]
 800b738:	2180      	movs	r1, #128	; 0x80
 800b73a:	0002      	movs	r2, r0
 800b73c:	9801      	ldr	r0, [sp, #4]
 800b73e:	0609      	lsls	r1, r1, #24
 800b740:	1843      	adds	r3, r0, r1
 800b742:	9200      	str	r2, [sp, #0]
 800b744:	9301      	str	r3, [sp, #4]
 800b746:	e7d6      	b.n	800b6f6 <__ieee754_pow+0x1ae>
 800b748:	0feb      	lsrs	r3, r5, #31
 800b74a:	3b01      	subs	r3, #1
 800b74c:	930e      	str	r3, [sp, #56]	; 0x38
 800b74e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b750:	9b06      	ldr	r3, [sp, #24]
 800b752:	4313      	orrs	r3, r2
 800b754:	d104      	bne.n	800b760 <__ieee754_pow+0x218>
 800b756:	003a      	movs	r2, r7
 800b758:	002b      	movs	r3, r5
 800b75a:	0038      	movs	r0, r7
 800b75c:	0029      	movs	r1, r5
 800b75e:	e77e      	b.n	800b65e <__ieee754_pow+0x116>
 800b760:	4b16      	ldr	r3, [pc, #88]	; (800b7bc <__ieee754_pow+0x274>)
 800b762:	429e      	cmp	r6, r3
 800b764:	dc00      	bgt.n	800b768 <__ieee754_pow+0x220>
 800b766:	e0ef      	b.n	800b948 <__ieee754_pow+0x400>
 800b768:	4b15      	ldr	r3, [pc, #84]	; (800b7c0 <__ieee754_pow+0x278>)
 800b76a:	429e      	cmp	r6, r3
 800b76c:	dd09      	ble.n	800b782 <__ieee754_pow+0x23a>
 800b76e:	4b0f      	ldr	r3, [pc, #60]	; (800b7ac <__ieee754_pow+0x264>)
 800b770:	429c      	cmp	r4, r3
 800b772:	dc0c      	bgt.n	800b78e <__ieee754_pow+0x246>
 800b774:	9b04      	ldr	r3, [sp, #16]
 800b776:	2b00      	cmp	r3, #0
 800b778:	da0c      	bge.n	800b794 <__ieee754_pow+0x24c>
 800b77a:	2000      	movs	r0, #0
 800b77c:	f000 fcce 	bl	800c11c <__math_oflow>
 800b780:	e708      	b.n	800b594 <__ieee754_pow+0x4c>
 800b782:	4b10      	ldr	r3, [pc, #64]	; (800b7c4 <__ieee754_pow+0x27c>)
 800b784:	429c      	cmp	r4, r3
 800b786:	ddf5      	ble.n	800b774 <__ieee754_pow+0x22c>
 800b788:	4b0a      	ldr	r3, [pc, #40]	; (800b7b4 <__ieee754_pow+0x26c>)
 800b78a:	429c      	cmp	r4, r3
 800b78c:	dd1c      	ble.n	800b7c8 <__ieee754_pow+0x280>
 800b78e:	9b04      	ldr	r3, [sp, #16]
 800b790:	2b00      	cmp	r3, #0
 800b792:	dcf2      	bgt.n	800b77a <__ieee754_pow+0x232>
 800b794:	2000      	movs	r0, #0
 800b796:	f000 fcba 	bl	800c10e <__math_uflow>
 800b79a:	e6fb      	b.n	800b594 <__ieee754_pow+0x4c>
 800b79c:	fff00000 	.word	0xfff00000
 800b7a0:	7ff00000 	.word	0x7ff00000
 800b7a4:	c0100000 	.word	0xc0100000
 800b7a8:	433fffff 	.word	0x433fffff
 800b7ac:	3fefffff 	.word	0x3fefffff
 800b7b0:	fffffc01 	.word	0xfffffc01
 800b7b4:	3ff00000 	.word	0x3ff00000
 800b7b8:	3fe00000 	.word	0x3fe00000
 800b7bc:	41e00000 	.word	0x41e00000
 800b7c0:	43f00000 	.word	0x43f00000
 800b7c4:	3feffffe 	.word	0x3feffffe
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	9800      	ldr	r0, [sp, #0]
 800b7cc:	9901      	ldr	r1, [sp, #4]
 800b7ce:	4b52      	ldr	r3, [pc, #328]	; (800b918 <__ieee754_pow+0x3d0>)
 800b7d0:	f7f6 fdb8 	bl	8002344 <__aeabi_dsub>
 800b7d4:	22c0      	movs	r2, #192	; 0xc0
 800b7d6:	4b51      	ldr	r3, [pc, #324]	; (800b91c <__ieee754_pow+0x3d4>)
 800b7d8:	05d2      	lsls	r2, r2, #23
 800b7da:	0004      	movs	r4, r0
 800b7dc:	000d      	movs	r5, r1
 800b7de:	f7f6 fb45 	bl	8001e6c <__aeabi_dmul>
 800b7e2:	4a4f      	ldr	r2, [pc, #316]	; (800b920 <__ieee754_pow+0x3d8>)
 800b7e4:	9000      	str	r0, [sp, #0]
 800b7e6:	9101      	str	r1, [sp, #4]
 800b7e8:	4b4e      	ldr	r3, [pc, #312]	; (800b924 <__ieee754_pow+0x3dc>)
 800b7ea:	0020      	movs	r0, r4
 800b7ec:	0029      	movs	r1, r5
 800b7ee:	f7f6 fb3d 	bl	8001e6c <__aeabi_dmul>
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	9004      	str	r0, [sp, #16]
 800b7f6:	9105      	str	r1, [sp, #20]
 800b7f8:	4b4b      	ldr	r3, [pc, #300]	; (800b928 <__ieee754_pow+0x3e0>)
 800b7fa:	0020      	movs	r0, r4
 800b7fc:	0029      	movs	r1, r5
 800b7fe:	f7f6 fb35 	bl	8001e6c <__aeabi_dmul>
 800b802:	0002      	movs	r2, r0
 800b804:	000b      	movs	r3, r1
 800b806:	4849      	ldr	r0, [pc, #292]	; (800b92c <__ieee754_pow+0x3e4>)
 800b808:	4949      	ldr	r1, [pc, #292]	; (800b930 <__ieee754_pow+0x3e8>)
 800b80a:	f7f6 fd9b 	bl	8002344 <__aeabi_dsub>
 800b80e:	0022      	movs	r2, r4
 800b810:	002b      	movs	r3, r5
 800b812:	f7f6 fb2b 	bl	8001e6c <__aeabi_dmul>
 800b816:	0002      	movs	r2, r0
 800b818:	000b      	movs	r3, r1
 800b81a:	2000      	movs	r0, #0
 800b81c:	4945      	ldr	r1, [pc, #276]	; (800b934 <__ieee754_pow+0x3ec>)
 800b81e:	f7f6 fd91 	bl	8002344 <__aeabi_dsub>
 800b822:	0022      	movs	r2, r4
 800b824:	0006      	movs	r6, r0
 800b826:	000f      	movs	r7, r1
 800b828:	002b      	movs	r3, r5
 800b82a:	0020      	movs	r0, r4
 800b82c:	0029      	movs	r1, r5
 800b82e:	f7f6 fb1d 	bl	8001e6c <__aeabi_dmul>
 800b832:	0002      	movs	r2, r0
 800b834:	000b      	movs	r3, r1
 800b836:	0030      	movs	r0, r6
 800b838:	0039      	movs	r1, r7
 800b83a:	f7f6 fb17 	bl	8001e6c <__aeabi_dmul>
 800b83e:	4a3e      	ldr	r2, [pc, #248]	; (800b938 <__ieee754_pow+0x3f0>)
 800b840:	4b36      	ldr	r3, [pc, #216]	; (800b91c <__ieee754_pow+0x3d4>)
 800b842:	f7f6 fb13 	bl	8001e6c <__aeabi_dmul>
 800b846:	0002      	movs	r2, r0
 800b848:	000b      	movs	r3, r1
 800b84a:	9804      	ldr	r0, [sp, #16]
 800b84c:	9905      	ldr	r1, [sp, #20]
 800b84e:	f7f6 fd79 	bl	8002344 <__aeabi_dsub>
 800b852:	0002      	movs	r2, r0
 800b854:	000b      	movs	r3, r1
 800b856:	0004      	movs	r4, r0
 800b858:	000d      	movs	r5, r1
 800b85a:	9800      	ldr	r0, [sp, #0]
 800b85c:	9901      	ldr	r1, [sp, #4]
 800b85e:	f7f5 fbc7 	bl	8000ff0 <__aeabi_dadd>
 800b862:	9a00      	ldr	r2, [sp, #0]
 800b864:	9b01      	ldr	r3, [sp, #4]
 800b866:	2000      	movs	r0, #0
 800b868:	000f      	movs	r7, r1
 800b86a:	0006      	movs	r6, r0
 800b86c:	f7f6 fd6a 	bl	8002344 <__aeabi_dsub>
 800b870:	0002      	movs	r2, r0
 800b872:	000b      	movs	r3, r1
 800b874:	0020      	movs	r0, r4
 800b876:	0029      	movs	r1, r5
 800b878:	f7f6 fd64 	bl	8002344 <__aeabi_dsub>
 800b87c:	9b06      	ldr	r3, [sp, #24]
 800b87e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b880:	3b01      	subs	r3, #1
 800b882:	9004      	str	r0, [sp, #16]
 800b884:	9105      	str	r1, [sp, #20]
 800b886:	4313      	orrs	r3, r2
 800b888:	d000      	beq.n	800b88c <__ieee754_pow+0x344>
 800b88a:	e1db      	b.n	800bc44 <__ieee754_pow+0x6fc>
 800b88c:	2300      	movs	r3, #0
 800b88e:	4c2b      	ldr	r4, [pc, #172]	; (800b93c <__ieee754_pow+0x3f4>)
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	9401      	str	r4, [sp, #4]
 800b894:	9c02      	ldr	r4, [sp, #8]
 800b896:	9d03      	ldr	r5, [sp, #12]
 800b898:	9802      	ldr	r0, [sp, #8]
 800b89a:	9903      	ldr	r1, [sp, #12]
 800b89c:	2400      	movs	r4, #0
 800b89e:	002b      	movs	r3, r5
 800b8a0:	0022      	movs	r2, r4
 800b8a2:	f7f6 fd4f 	bl	8002344 <__aeabi_dsub>
 800b8a6:	0032      	movs	r2, r6
 800b8a8:	003b      	movs	r3, r7
 800b8aa:	f7f6 fadf 	bl	8001e6c <__aeabi_dmul>
 800b8ae:	9a02      	ldr	r2, [sp, #8]
 800b8b0:	9b03      	ldr	r3, [sp, #12]
 800b8b2:	9006      	str	r0, [sp, #24]
 800b8b4:	9107      	str	r1, [sp, #28]
 800b8b6:	9804      	ldr	r0, [sp, #16]
 800b8b8:	9905      	ldr	r1, [sp, #20]
 800b8ba:	f7f6 fad7 	bl	8001e6c <__aeabi_dmul>
 800b8be:	0002      	movs	r2, r0
 800b8c0:	000b      	movs	r3, r1
 800b8c2:	9806      	ldr	r0, [sp, #24]
 800b8c4:	9907      	ldr	r1, [sp, #28]
 800b8c6:	f7f5 fb93 	bl	8000ff0 <__aeabi_dadd>
 800b8ca:	0022      	movs	r2, r4
 800b8cc:	002b      	movs	r3, r5
 800b8ce:	9004      	str	r0, [sp, #16]
 800b8d0:	9105      	str	r1, [sp, #20]
 800b8d2:	0030      	movs	r0, r6
 800b8d4:	0039      	movs	r1, r7
 800b8d6:	f7f6 fac9 	bl	8001e6c <__aeabi_dmul>
 800b8da:	0006      	movs	r6, r0
 800b8dc:	000f      	movs	r7, r1
 800b8de:	000b      	movs	r3, r1
 800b8e0:	0002      	movs	r2, r0
 800b8e2:	9804      	ldr	r0, [sp, #16]
 800b8e4:	9905      	ldr	r1, [sp, #20]
 800b8e6:	9606      	str	r6, [sp, #24]
 800b8e8:	9707      	str	r7, [sp, #28]
 800b8ea:	f7f5 fb81 	bl	8000ff0 <__aeabi_dadd>
 800b8ee:	4b14      	ldr	r3, [pc, #80]	; (800b940 <__ieee754_pow+0x3f8>)
 800b8f0:	0005      	movs	r5, r0
 800b8f2:	000c      	movs	r4, r1
 800b8f4:	9108      	str	r1, [sp, #32]
 800b8f6:	4299      	cmp	r1, r3
 800b8f8:	dc00      	bgt.n	800b8fc <__ieee754_pow+0x3b4>
 800b8fa:	e2d6      	b.n	800beaa <__ieee754_pow+0x962>
 800b8fc:	4b11      	ldr	r3, [pc, #68]	; (800b944 <__ieee754_pow+0x3fc>)
 800b8fe:	18cb      	adds	r3, r1, r3
 800b900:	4303      	orrs	r3, r0
 800b902:	d100      	bne.n	800b906 <__ieee754_pow+0x3be>
 800b904:	e1d8      	b.n	800bcb8 <__ieee754_pow+0x770>
 800b906:	9800      	ldr	r0, [sp, #0]
 800b908:	9901      	ldr	r1, [sp, #4]
 800b90a:	2300      	movs	r3, #0
 800b90c:	2200      	movs	r2, #0
 800b90e:	f7f4 fda3 	bl	8000458 <__aeabi_dcmplt>
 800b912:	1e43      	subs	r3, r0, #1
 800b914:	4198      	sbcs	r0, r3
 800b916:	e731      	b.n	800b77c <__ieee754_pow+0x234>
 800b918:	3ff00000 	.word	0x3ff00000
 800b91c:	3ff71547 	.word	0x3ff71547
 800b920:	f85ddf44 	.word	0xf85ddf44
 800b924:	3e54ae0b 	.word	0x3e54ae0b
 800b928:	3fd00000 	.word	0x3fd00000
 800b92c:	55555555 	.word	0x55555555
 800b930:	3fd55555 	.word	0x3fd55555
 800b934:	3fe00000 	.word	0x3fe00000
 800b938:	652b82fe 	.word	0x652b82fe
 800b93c:	bff00000 	.word	0xbff00000
 800b940:	408fffff 	.word	0x408fffff
 800b944:	bf700000 	.word	0xbf700000
 800b948:	4bc0      	ldr	r3, [pc, #768]	; (800bc4c <__ieee754_pow+0x704>)
 800b94a:	2200      	movs	r2, #0
 800b94c:	422b      	tst	r3, r5
 800b94e:	d10a      	bne.n	800b966 <__ieee754_pow+0x41e>
 800b950:	9800      	ldr	r0, [sp, #0]
 800b952:	9901      	ldr	r1, [sp, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	4bbe      	ldr	r3, [pc, #760]	; (800bc50 <__ieee754_pow+0x708>)
 800b958:	f7f6 fa88 	bl	8001e6c <__aeabi_dmul>
 800b95c:	2235      	movs	r2, #53	; 0x35
 800b95e:	9000      	str	r0, [sp, #0]
 800b960:	9101      	str	r1, [sp, #4]
 800b962:	9c01      	ldr	r4, [sp, #4]
 800b964:	4252      	negs	r2, r2
 800b966:	49bb      	ldr	r1, [pc, #748]	; (800bc54 <__ieee754_pow+0x70c>)
 800b968:	1523      	asrs	r3, r4, #20
 800b96a:	185b      	adds	r3, r3, r1
 800b96c:	189b      	adds	r3, r3, r2
 800b96e:	0324      	lsls	r4, r4, #12
 800b970:	4db9      	ldr	r5, [pc, #740]	; (800bc58 <__ieee754_pow+0x710>)
 800b972:	930d      	str	r3, [sp, #52]	; 0x34
 800b974:	4bb9      	ldr	r3, [pc, #740]	; (800bc5c <__ieee754_pow+0x714>)
 800b976:	0b22      	lsrs	r2, r4, #12
 800b978:	4315      	orrs	r5, r2
 800b97a:	2400      	movs	r4, #0
 800b97c:	429a      	cmp	r2, r3
 800b97e:	dd09      	ble.n	800b994 <__ieee754_pow+0x44c>
 800b980:	4bb7      	ldr	r3, [pc, #732]	; (800bc60 <__ieee754_pow+0x718>)
 800b982:	3401      	adds	r4, #1
 800b984:	429a      	cmp	r2, r3
 800b986:	dd05      	ble.n	800b994 <__ieee754_pow+0x44c>
 800b988:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b98a:	191b      	adds	r3, r3, r4
 800b98c:	2400      	movs	r4, #0
 800b98e:	930d      	str	r3, [sp, #52]	; 0x34
 800b990:	4bb4      	ldr	r3, [pc, #720]	; (800bc64 <__ieee754_pow+0x71c>)
 800b992:	18ed      	adds	r5, r5, r3
 800b994:	00e3      	lsls	r3, r4, #3
 800b996:	930f      	str	r3, [sp, #60]	; 0x3c
 800b998:	4bb3      	ldr	r3, [pc, #716]	; (800bc68 <__ieee754_pow+0x720>)
 800b99a:	00e2      	lsls	r2, r4, #3
 800b99c:	189b      	adds	r3, r3, r2
 800b99e:	9800      	ldr	r0, [sp, #0]
 800b9a0:	9901      	ldr	r1, [sp, #4]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	0029      	movs	r1, r5
 800b9a8:	0006      	movs	r6, r0
 800b9aa:	920a      	str	r2, [sp, #40]	; 0x28
 800b9ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9ae:	f7f6 fcc9 	bl	8002344 <__aeabi_dsub>
 800b9b2:	0032      	movs	r2, r6
 800b9b4:	002b      	movs	r3, r5
 800b9b6:	9010      	str	r0, [sp, #64]	; 0x40
 800b9b8:	9111      	str	r1, [sp, #68]	; 0x44
 800b9ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b9bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b9be:	f7f5 fb17 	bl	8000ff0 <__aeabi_dadd>
 800b9c2:	0002      	movs	r2, r0
 800b9c4:	000b      	movs	r3, r1
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	49a3      	ldr	r1, [pc, #652]	; (800bc58 <__ieee754_pow+0x710>)
 800b9ca:	f7f5 fe4d 	bl	8001668 <__aeabi_ddiv>
 800b9ce:	0002      	movs	r2, r0
 800b9d0:	000b      	movs	r3, r1
 800b9d2:	9012      	str	r0, [sp, #72]	; 0x48
 800b9d4:	9113      	str	r1, [sp, #76]	; 0x4c
 800b9d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b9d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b9da:	f7f6 fa47 	bl	8001e6c <__aeabi_dmul>
 800b9de:	9008      	str	r0, [sp, #32]
 800b9e0:	9109      	str	r1, [sp, #36]	; 0x24
 800b9e2:	9a08      	ldr	r2, [sp, #32]
 800b9e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e6:	2180      	movs	r1, #128	; 0x80
 800b9e8:	9204      	str	r2, [sp, #16]
 800b9ea:	9305      	str	r3, [sp, #20]
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	002f      	movs	r7, r5
 800b9f0:	0589      	lsls	r1, r1, #22
 800b9f2:	106d      	asrs	r5, r5, #1
 800b9f4:	430d      	orrs	r5, r1
 800b9f6:	2180      	movs	r1, #128	; 0x80
 800b9f8:	9304      	str	r3, [sp, #16]
 800b9fa:	9a04      	ldr	r2, [sp, #16]
 800b9fc:	9b05      	ldr	r3, [sp, #20]
 800b9fe:	9200      	str	r2, [sp, #0]
 800ba00:	9301      	str	r3, [sp, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	0309      	lsls	r1, r1, #12
 800ba06:	186d      	adds	r5, r5, r1
 800ba08:	04a1      	lsls	r1, r4, #18
 800ba0a:	186b      	adds	r3, r5, r1
 800ba0c:	9800      	ldr	r0, [sp, #0]
 800ba0e:	9901      	ldr	r1, [sp, #4]
 800ba10:	0014      	movs	r4, r2
 800ba12:	001d      	movs	r5, r3
 800ba14:	f7f6 fa2a 	bl	8001e6c <__aeabi_dmul>
 800ba18:	0002      	movs	r2, r0
 800ba1a:	000b      	movs	r3, r1
 800ba1c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ba1e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ba20:	f7f6 fc90 	bl	8002344 <__aeabi_dsub>
 800ba24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba28:	9010      	str	r0, [sp, #64]	; 0x40
 800ba2a:	9111      	str	r1, [sp, #68]	; 0x44
 800ba2c:	0020      	movs	r0, r4
 800ba2e:	0029      	movs	r1, r5
 800ba30:	f7f6 fc88 	bl	8002344 <__aeabi_dsub>
 800ba34:	0002      	movs	r2, r0
 800ba36:	000b      	movs	r3, r1
 800ba38:	0030      	movs	r0, r6
 800ba3a:	0039      	movs	r1, r7
 800ba3c:	f7f6 fc82 	bl	8002344 <__aeabi_dsub>
 800ba40:	9a00      	ldr	r2, [sp, #0]
 800ba42:	9b01      	ldr	r3, [sp, #4]
 800ba44:	f7f6 fa12 	bl	8001e6c <__aeabi_dmul>
 800ba48:	0002      	movs	r2, r0
 800ba4a:	000b      	movs	r3, r1
 800ba4c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ba4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ba50:	f7f6 fc78 	bl	8002344 <__aeabi_dsub>
 800ba54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ba56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba58:	f7f6 fa08 	bl	8001e6c <__aeabi_dmul>
 800ba5c:	9a08      	ldr	r2, [sp, #32]
 800ba5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba60:	900a      	str	r0, [sp, #40]	; 0x28
 800ba62:	910b      	str	r1, [sp, #44]	; 0x2c
 800ba64:	0010      	movs	r0, r2
 800ba66:	0019      	movs	r1, r3
 800ba68:	f7f6 fa00 	bl	8001e6c <__aeabi_dmul>
 800ba6c:	0006      	movs	r6, r0
 800ba6e:	000f      	movs	r7, r1
 800ba70:	4a7e      	ldr	r2, [pc, #504]	; (800bc6c <__ieee754_pow+0x724>)
 800ba72:	4b7f      	ldr	r3, [pc, #508]	; (800bc70 <__ieee754_pow+0x728>)
 800ba74:	f7f6 f9fa 	bl	8001e6c <__aeabi_dmul>
 800ba78:	4a7e      	ldr	r2, [pc, #504]	; (800bc74 <__ieee754_pow+0x72c>)
 800ba7a:	4b7f      	ldr	r3, [pc, #508]	; (800bc78 <__ieee754_pow+0x730>)
 800ba7c:	f7f5 fab8 	bl	8000ff0 <__aeabi_dadd>
 800ba80:	0032      	movs	r2, r6
 800ba82:	003b      	movs	r3, r7
 800ba84:	f7f6 f9f2 	bl	8001e6c <__aeabi_dmul>
 800ba88:	4a7c      	ldr	r2, [pc, #496]	; (800bc7c <__ieee754_pow+0x734>)
 800ba8a:	4b7d      	ldr	r3, [pc, #500]	; (800bc80 <__ieee754_pow+0x738>)
 800ba8c:	f7f5 fab0 	bl	8000ff0 <__aeabi_dadd>
 800ba90:	0032      	movs	r2, r6
 800ba92:	003b      	movs	r3, r7
 800ba94:	f7f6 f9ea 	bl	8001e6c <__aeabi_dmul>
 800ba98:	4a7a      	ldr	r2, [pc, #488]	; (800bc84 <__ieee754_pow+0x73c>)
 800ba9a:	4b7b      	ldr	r3, [pc, #492]	; (800bc88 <__ieee754_pow+0x740>)
 800ba9c:	f7f5 faa8 	bl	8000ff0 <__aeabi_dadd>
 800baa0:	0032      	movs	r2, r6
 800baa2:	003b      	movs	r3, r7
 800baa4:	f7f6 f9e2 	bl	8001e6c <__aeabi_dmul>
 800baa8:	4a78      	ldr	r2, [pc, #480]	; (800bc8c <__ieee754_pow+0x744>)
 800baaa:	4b79      	ldr	r3, [pc, #484]	; (800bc90 <__ieee754_pow+0x748>)
 800baac:	f7f5 faa0 	bl	8000ff0 <__aeabi_dadd>
 800bab0:	0032      	movs	r2, r6
 800bab2:	003b      	movs	r3, r7
 800bab4:	f7f6 f9da 	bl	8001e6c <__aeabi_dmul>
 800bab8:	4a76      	ldr	r2, [pc, #472]	; (800bc94 <__ieee754_pow+0x74c>)
 800baba:	4b77      	ldr	r3, [pc, #476]	; (800bc98 <__ieee754_pow+0x750>)
 800babc:	f7f5 fa98 	bl	8000ff0 <__aeabi_dadd>
 800bac0:	0032      	movs	r2, r6
 800bac2:	0004      	movs	r4, r0
 800bac4:	000d      	movs	r5, r1
 800bac6:	003b      	movs	r3, r7
 800bac8:	0030      	movs	r0, r6
 800baca:	0039      	movs	r1, r7
 800bacc:	f7f6 f9ce 	bl	8001e6c <__aeabi_dmul>
 800bad0:	0002      	movs	r2, r0
 800bad2:	000b      	movs	r3, r1
 800bad4:	0020      	movs	r0, r4
 800bad6:	0029      	movs	r1, r5
 800bad8:	f7f6 f9c8 	bl	8001e6c <__aeabi_dmul>
 800badc:	9a00      	ldr	r2, [sp, #0]
 800bade:	9b01      	ldr	r3, [sp, #4]
 800bae0:	0004      	movs	r4, r0
 800bae2:	000d      	movs	r5, r1
 800bae4:	9808      	ldr	r0, [sp, #32]
 800bae6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bae8:	f7f5 fa82 	bl	8000ff0 <__aeabi_dadd>
 800baec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800baee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baf0:	f7f6 f9bc 	bl	8001e6c <__aeabi_dmul>
 800baf4:	0022      	movs	r2, r4
 800baf6:	002b      	movs	r3, r5
 800baf8:	f7f5 fa7a 	bl	8000ff0 <__aeabi_dadd>
 800bafc:	9a00      	ldr	r2, [sp, #0]
 800bafe:	9b01      	ldr	r3, [sp, #4]
 800bb00:	9010      	str	r0, [sp, #64]	; 0x40
 800bb02:	9111      	str	r1, [sp, #68]	; 0x44
 800bb04:	0010      	movs	r0, r2
 800bb06:	0019      	movs	r1, r3
 800bb08:	f7f6 f9b0 	bl	8001e6c <__aeabi_dmul>
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4b63      	ldr	r3, [pc, #396]	; (800bc9c <__ieee754_pow+0x754>)
 800bb10:	0004      	movs	r4, r0
 800bb12:	000d      	movs	r5, r1
 800bb14:	f7f5 fa6c 	bl	8000ff0 <__aeabi_dadd>
 800bb18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bb1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb1c:	f7f5 fa68 	bl	8000ff0 <__aeabi_dadd>
 800bb20:	2600      	movs	r6, #0
 800bb22:	000f      	movs	r7, r1
 800bb24:	0032      	movs	r2, r6
 800bb26:	000b      	movs	r3, r1
 800bb28:	9800      	ldr	r0, [sp, #0]
 800bb2a:	9901      	ldr	r1, [sp, #4]
 800bb2c:	f7f6 f99e 	bl	8001e6c <__aeabi_dmul>
 800bb30:	2200      	movs	r2, #0
 800bb32:	9000      	str	r0, [sp, #0]
 800bb34:	9101      	str	r1, [sp, #4]
 800bb36:	4b59      	ldr	r3, [pc, #356]	; (800bc9c <__ieee754_pow+0x754>)
 800bb38:	0030      	movs	r0, r6
 800bb3a:	0039      	movs	r1, r7
 800bb3c:	f7f6 fc02 	bl	8002344 <__aeabi_dsub>
 800bb40:	0022      	movs	r2, r4
 800bb42:	002b      	movs	r3, r5
 800bb44:	f7f6 fbfe 	bl	8002344 <__aeabi_dsub>
 800bb48:	0002      	movs	r2, r0
 800bb4a:	000b      	movs	r3, r1
 800bb4c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bb4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bb50:	f7f6 fbf8 	bl	8002344 <__aeabi_dsub>
 800bb54:	9a08      	ldr	r2, [sp, #32]
 800bb56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb58:	f7f6 f988 	bl	8001e6c <__aeabi_dmul>
 800bb5c:	0032      	movs	r2, r6
 800bb5e:	0004      	movs	r4, r0
 800bb60:	000d      	movs	r5, r1
 800bb62:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bb64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb66:	003b      	movs	r3, r7
 800bb68:	f7f6 f980 	bl	8001e6c <__aeabi_dmul>
 800bb6c:	0002      	movs	r2, r0
 800bb6e:	000b      	movs	r3, r1
 800bb70:	0020      	movs	r0, r4
 800bb72:	0029      	movs	r1, r5
 800bb74:	f7f5 fa3c 	bl	8000ff0 <__aeabi_dadd>
 800bb78:	0004      	movs	r4, r0
 800bb7a:	000d      	movs	r5, r1
 800bb7c:	0002      	movs	r2, r0
 800bb7e:	000b      	movs	r3, r1
 800bb80:	9800      	ldr	r0, [sp, #0]
 800bb82:	9901      	ldr	r1, [sp, #4]
 800bb84:	f7f5 fa34 	bl	8000ff0 <__aeabi_dadd>
 800bb88:	2600      	movs	r6, #0
 800bb8a:	22e0      	movs	r2, #224	; 0xe0
 800bb8c:	4b44      	ldr	r3, [pc, #272]	; (800bca0 <__ieee754_pow+0x758>)
 800bb8e:	0612      	lsls	r2, r2, #24
 800bb90:	0030      	movs	r0, r6
 800bb92:	000f      	movs	r7, r1
 800bb94:	f7f6 f96a 	bl	8001e6c <__aeabi_dmul>
 800bb98:	9008      	str	r0, [sp, #32]
 800bb9a:	9109      	str	r1, [sp, #36]	; 0x24
 800bb9c:	9a00      	ldr	r2, [sp, #0]
 800bb9e:	9b01      	ldr	r3, [sp, #4]
 800bba0:	0039      	movs	r1, r7
 800bba2:	0030      	movs	r0, r6
 800bba4:	f7f6 fbce 	bl	8002344 <__aeabi_dsub>
 800bba8:	0002      	movs	r2, r0
 800bbaa:	000b      	movs	r3, r1
 800bbac:	0020      	movs	r0, r4
 800bbae:	0029      	movs	r1, r5
 800bbb0:	f7f6 fbc8 	bl	8002344 <__aeabi_dsub>
 800bbb4:	4a3b      	ldr	r2, [pc, #236]	; (800bca4 <__ieee754_pow+0x75c>)
 800bbb6:	4b3a      	ldr	r3, [pc, #232]	; (800bca0 <__ieee754_pow+0x758>)
 800bbb8:	f7f6 f958 	bl	8001e6c <__aeabi_dmul>
 800bbbc:	4a3a      	ldr	r2, [pc, #232]	; (800bca8 <__ieee754_pow+0x760>)
 800bbbe:	0004      	movs	r4, r0
 800bbc0:	000d      	movs	r5, r1
 800bbc2:	4b3a      	ldr	r3, [pc, #232]	; (800bcac <__ieee754_pow+0x764>)
 800bbc4:	0039      	movs	r1, r7
 800bbc6:	0030      	movs	r0, r6
 800bbc8:	f7f6 f950 	bl	8001e6c <__aeabi_dmul>
 800bbcc:	0002      	movs	r2, r0
 800bbce:	000b      	movs	r3, r1
 800bbd0:	0020      	movs	r0, r4
 800bbd2:	0029      	movs	r1, r5
 800bbd4:	f7f5 fa0c 	bl	8000ff0 <__aeabi_dadd>
 800bbd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bbda:	4b35      	ldr	r3, [pc, #212]	; (800bcb0 <__ieee754_pow+0x768>)
 800bbdc:	189b      	adds	r3, r3, r2
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	f7f5 fa05 	bl	8000ff0 <__aeabi_dadd>
 800bbe6:	900a      	str	r0, [sp, #40]	; 0x28
 800bbe8:	910b      	str	r1, [sp, #44]	; 0x2c
 800bbea:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bbec:	f7f6 ff90 	bl	8002b10 <__aeabi_i2d>
 800bbf0:	0004      	movs	r4, r0
 800bbf2:	000d      	movs	r5, r1
 800bbf4:	9808      	ldr	r0, [sp, #32]
 800bbf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bbfa:	4b2e      	ldr	r3, [pc, #184]	; (800bcb4 <__ieee754_pow+0x76c>)
 800bbfc:	189b      	adds	r3, r3, r2
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	9200      	str	r2, [sp, #0]
 800bc04:	9301      	str	r3, [sp, #4]
 800bc06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc0a:	f7f5 f9f1 	bl	8000ff0 <__aeabi_dadd>
 800bc0e:	9a00      	ldr	r2, [sp, #0]
 800bc10:	9b01      	ldr	r3, [sp, #4]
 800bc12:	f7f5 f9ed 	bl	8000ff0 <__aeabi_dadd>
 800bc16:	0022      	movs	r2, r4
 800bc18:	002b      	movs	r3, r5
 800bc1a:	f7f5 f9e9 	bl	8000ff0 <__aeabi_dadd>
 800bc1e:	0022      	movs	r2, r4
 800bc20:	002b      	movs	r3, r5
 800bc22:	0030      	movs	r0, r6
 800bc24:	000f      	movs	r7, r1
 800bc26:	f7f6 fb8d 	bl	8002344 <__aeabi_dsub>
 800bc2a:	9a00      	ldr	r2, [sp, #0]
 800bc2c:	9b01      	ldr	r3, [sp, #4]
 800bc2e:	f7f6 fb89 	bl	8002344 <__aeabi_dsub>
 800bc32:	9a08      	ldr	r2, [sp, #32]
 800bc34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc36:	f7f6 fb85 	bl	8002344 <__aeabi_dsub>
 800bc3a:	0002      	movs	r2, r0
 800bc3c:	000b      	movs	r3, r1
 800bc3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bc40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc42:	e619      	b.n	800b878 <__ieee754_pow+0x330>
 800bc44:	2300      	movs	r3, #0
 800bc46:	4c04      	ldr	r4, [pc, #16]	; (800bc58 <__ieee754_pow+0x710>)
 800bc48:	e622      	b.n	800b890 <__ieee754_pow+0x348>
 800bc4a:	46c0      	nop			; (mov r8, r8)
 800bc4c:	7ff00000 	.word	0x7ff00000
 800bc50:	43400000 	.word	0x43400000
 800bc54:	fffffc01 	.word	0xfffffc01
 800bc58:	3ff00000 	.word	0x3ff00000
 800bc5c:	0003988e 	.word	0x0003988e
 800bc60:	000bb679 	.word	0x000bb679
 800bc64:	fff00000 	.word	0xfff00000
 800bc68:	0800c898 	.word	0x0800c898
 800bc6c:	4a454eef 	.word	0x4a454eef
 800bc70:	3fca7e28 	.word	0x3fca7e28
 800bc74:	93c9db65 	.word	0x93c9db65
 800bc78:	3fcd864a 	.word	0x3fcd864a
 800bc7c:	a91d4101 	.word	0xa91d4101
 800bc80:	3fd17460 	.word	0x3fd17460
 800bc84:	518f264d 	.word	0x518f264d
 800bc88:	3fd55555 	.word	0x3fd55555
 800bc8c:	db6fabff 	.word	0xdb6fabff
 800bc90:	3fdb6db6 	.word	0x3fdb6db6
 800bc94:	33333303 	.word	0x33333303
 800bc98:	3fe33333 	.word	0x3fe33333
 800bc9c:	40080000 	.word	0x40080000
 800bca0:	3feec709 	.word	0x3feec709
 800bca4:	dc3a03fd 	.word	0xdc3a03fd
 800bca8:	145b01f5 	.word	0x145b01f5
 800bcac:	be3e2fe0 	.word	0xbe3e2fe0
 800bcb0:	0800c8b8 	.word	0x0800c8b8
 800bcb4:	0800c8a8 	.word	0x0800c8a8
 800bcb8:	4a90      	ldr	r2, [pc, #576]	; (800befc <__ieee754_pow+0x9b4>)
 800bcba:	4b91      	ldr	r3, [pc, #580]	; (800bf00 <__ieee754_pow+0x9b8>)
 800bcbc:	9804      	ldr	r0, [sp, #16]
 800bcbe:	9905      	ldr	r1, [sp, #20]
 800bcc0:	f7f5 f996 	bl	8000ff0 <__aeabi_dadd>
 800bcc4:	0032      	movs	r2, r6
 800bcc6:	9002      	str	r0, [sp, #8]
 800bcc8:	9103      	str	r1, [sp, #12]
 800bcca:	003b      	movs	r3, r7
 800bccc:	0028      	movs	r0, r5
 800bcce:	0021      	movs	r1, r4
 800bcd0:	f7f6 fb38 	bl	8002344 <__aeabi_dsub>
 800bcd4:	0002      	movs	r2, r0
 800bcd6:	000b      	movs	r3, r1
 800bcd8:	9802      	ldr	r0, [sp, #8]
 800bcda:	9903      	ldr	r1, [sp, #12]
 800bcdc:	f7f4 fbd0 	bl	8000480 <__aeabi_dcmpgt>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d000      	beq.n	800bce6 <__ieee754_pow+0x79e>
 800bce4:	e60f      	b.n	800b906 <__ieee754_pow+0x3be>
 800bce6:	2100      	movs	r1, #0
 800bce8:	4a86      	ldr	r2, [pc, #536]	; (800bf04 <__ieee754_pow+0x9bc>)
 800bcea:	0063      	lsls	r3, r4, #1
 800bcec:	085b      	lsrs	r3, r3, #1
 800bcee:	9102      	str	r1, [sp, #8]
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	dd25      	ble.n	800bd40 <__ieee754_pow+0x7f8>
 800bcf4:	4a84      	ldr	r2, [pc, #528]	; (800bf08 <__ieee754_pow+0x9c0>)
 800bcf6:	151b      	asrs	r3, r3, #20
 800bcf8:	189b      	adds	r3, r3, r2
 800bcfa:	2280      	movs	r2, #128	; 0x80
 800bcfc:	0352      	lsls	r2, r2, #13
 800bcfe:	4694      	mov	ip, r2
 800bd00:	411a      	asrs	r2, r3
 800bd02:	1914      	adds	r4, r2, r4
 800bd04:	4b81      	ldr	r3, [pc, #516]	; (800bf0c <__ieee754_pow+0x9c4>)
 800bd06:	0060      	lsls	r0, r4, #1
 800bd08:	4d81      	ldr	r5, [pc, #516]	; (800bf10 <__ieee754_pow+0x9c8>)
 800bd0a:	0d40      	lsrs	r0, r0, #21
 800bd0c:	18c0      	adds	r0, r0, r3
 800bd0e:	4105      	asrs	r5, r0
 800bd10:	0021      	movs	r1, r4
 800bd12:	43a9      	bics	r1, r5
 800bd14:	000b      	movs	r3, r1
 800bd16:	4661      	mov	r1, ip
 800bd18:	0324      	lsls	r4, r4, #12
 800bd1a:	0b24      	lsrs	r4, r4, #12
 800bd1c:	4321      	orrs	r1, r4
 800bd1e:	2414      	movs	r4, #20
 800bd20:	1a20      	subs	r0, r4, r0
 800bd22:	4101      	asrs	r1, r0
 800bd24:	9102      	str	r1, [sp, #8]
 800bd26:	9908      	ldr	r1, [sp, #32]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2900      	cmp	r1, #0
 800bd2c:	da02      	bge.n	800bd34 <__ieee754_pow+0x7ec>
 800bd2e:	9902      	ldr	r1, [sp, #8]
 800bd30:	4249      	negs	r1, r1
 800bd32:	9102      	str	r1, [sp, #8]
 800bd34:	0030      	movs	r0, r6
 800bd36:	0039      	movs	r1, r7
 800bd38:	f7f6 fb04 	bl	8002344 <__aeabi_dsub>
 800bd3c:	9006      	str	r0, [sp, #24]
 800bd3e:	9107      	str	r1, [sp, #28]
 800bd40:	9a04      	ldr	r2, [sp, #16]
 800bd42:	9b05      	ldr	r3, [sp, #20]
 800bd44:	9806      	ldr	r0, [sp, #24]
 800bd46:	9907      	ldr	r1, [sp, #28]
 800bd48:	2600      	movs	r6, #0
 800bd4a:	f7f5 f951 	bl	8000ff0 <__aeabi_dadd>
 800bd4e:	2200      	movs	r2, #0
 800bd50:	0030      	movs	r0, r6
 800bd52:	4b70      	ldr	r3, [pc, #448]	; (800bf14 <__ieee754_pow+0x9cc>)
 800bd54:	000f      	movs	r7, r1
 800bd56:	f7f6 f889 	bl	8001e6c <__aeabi_dmul>
 800bd5a:	9a06      	ldr	r2, [sp, #24]
 800bd5c:	9b07      	ldr	r3, [sp, #28]
 800bd5e:	9008      	str	r0, [sp, #32]
 800bd60:	9109      	str	r1, [sp, #36]	; 0x24
 800bd62:	0030      	movs	r0, r6
 800bd64:	0039      	movs	r1, r7
 800bd66:	f7f6 faed 	bl	8002344 <__aeabi_dsub>
 800bd6a:	0002      	movs	r2, r0
 800bd6c:	000b      	movs	r3, r1
 800bd6e:	9804      	ldr	r0, [sp, #16]
 800bd70:	9905      	ldr	r1, [sp, #20]
 800bd72:	f7f6 fae7 	bl	8002344 <__aeabi_dsub>
 800bd76:	4a68      	ldr	r2, [pc, #416]	; (800bf18 <__ieee754_pow+0x9d0>)
 800bd78:	4b68      	ldr	r3, [pc, #416]	; (800bf1c <__ieee754_pow+0x9d4>)
 800bd7a:	f7f6 f877 	bl	8001e6c <__aeabi_dmul>
 800bd7e:	4a68      	ldr	r2, [pc, #416]	; (800bf20 <__ieee754_pow+0x9d8>)
 800bd80:	0004      	movs	r4, r0
 800bd82:	000d      	movs	r5, r1
 800bd84:	0030      	movs	r0, r6
 800bd86:	0039      	movs	r1, r7
 800bd88:	4b66      	ldr	r3, [pc, #408]	; (800bf24 <__ieee754_pow+0x9dc>)
 800bd8a:	f7f6 f86f 	bl	8001e6c <__aeabi_dmul>
 800bd8e:	0002      	movs	r2, r0
 800bd90:	000b      	movs	r3, r1
 800bd92:	0020      	movs	r0, r4
 800bd94:	0029      	movs	r1, r5
 800bd96:	f7f5 f92b 	bl	8000ff0 <__aeabi_dadd>
 800bd9a:	0004      	movs	r4, r0
 800bd9c:	000d      	movs	r5, r1
 800bd9e:	0002      	movs	r2, r0
 800bda0:	000b      	movs	r3, r1
 800bda2:	9808      	ldr	r0, [sp, #32]
 800bda4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bda6:	f7f5 f923 	bl	8000ff0 <__aeabi_dadd>
 800bdaa:	9a08      	ldr	r2, [sp, #32]
 800bdac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdae:	0006      	movs	r6, r0
 800bdb0:	000f      	movs	r7, r1
 800bdb2:	f7f6 fac7 	bl	8002344 <__aeabi_dsub>
 800bdb6:	0002      	movs	r2, r0
 800bdb8:	000b      	movs	r3, r1
 800bdba:	0020      	movs	r0, r4
 800bdbc:	0029      	movs	r1, r5
 800bdbe:	f7f6 fac1 	bl	8002344 <__aeabi_dsub>
 800bdc2:	0032      	movs	r2, r6
 800bdc4:	9004      	str	r0, [sp, #16]
 800bdc6:	9105      	str	r1, [sp, #20]
 800bdc8:	003b      	movs	r3, r7
 800bdca:	0030      	movs	r0, r6
 800bdcc:	0039      	movs	r1, r7
 800bdce:	f7f6 f84d 	bl	8001e6c <__aeabi_dmul>
 800bdd2:	0004      	movs	r4, r0
 800bdd4:	000d      	movs	r5, r1
 800bdd6:	4a54      	ldr	r2, [pc, #336]	; (800bf28 <__ieee754_pow+0x9e0>)
 800bdd8:	4b54      	ldr	r3, [pc, #336]	; (800bf2c <__ieee754_pow+0x9e4>)
 800bdda:	f7f6 f847 	bl	8001e6c <__aeabi_dmul>
 800bdde:	4a54      	ldr	r2, [pc, #336]	; (800bf30 <__ieee754_pow+0x9e8>)
 800bde0:	4b54      	ldr	r3, [pc, #336]	; (800bf34 <__ieee754_pow+0x9ec>)
 800bde2:	f7f6 faaf 	bl	8002344 <__aeabi_dsub>
 800bde6:	0022      	movs	r2, r4
 800bde8:	002b      	movs	r3, r5
 800bdea:	f7f6 f83f 	bl	8001e6c <__aeabi_dmul>
 800bdee:	4a52      	ldr	r2, [pc, #328]	; (800bf38 <__ieee754_pow+0x9f0>)
 800bdf0:	4b52      	ldr	r3, [pc, #328]	; (800bf3c <__ieee754_pow+0x9f4>)
 800bdf2:	f7f5 f8fd 	bl	8000ff0 <__aeabi_dadd>
 800bdf6:	0022      	movs	r2, r4
 800bdf8:	002b      	movs	r3, r5
 800bdfa:	f7f6 f837 	bl	8001e6c <__aeabi_dmul>
 800bdfe:	4a50      	ldr	r2, [pc, #320]	; (800bf40 <__ieee754_pow+0x9f8>)
 800be00:	4b50      	ldr	r3, [pc, #320]	; (800bf44 <__ieee754_pow+0x9fc>)
 800be02:	f7f6 fa9f 	bl	8002344 <__aeabi_dsub>
 800be06:	0022      	movs	r2, r4
 800be08:	002b      	movs	r3, r5
 800be0a:	f7f6 f82f 	bl	8001e6c <__aeabi_dmul>
 800be0e:	4a4e      	ldr	r2, [pc, #312]	; (800bf48 <__ieee754_pow+0xa00>)
 800be10:	4b4e      	ldr	r3, [pc, #312]	; (800bf4c <__ieee754_pow+0xa04>)
 800be12:	f7f5 f8ed 	bl	8000ff0 <__aeabi_dadd>
 800be16:	0022      	movs	r2, r4
 800be18:	002b      	movs	r3, r5
 800be1a:	f7f6 f827 	bl	8001e6c <__aeabi_dmul>
 800be1e:	0002      	movs	r2, r0
 800be20:	000b      	movs	r3, r1
 800be22:	0030      	movs	r0, r6
 800be24:	0039      	movs	r1, r7
 800be26:	f7f6 fa8d 	bl	8002344 <__aeabi_dsub>
 800be2a:	0004      	movs	r4, r0
 800be2c:	000d      	movs	r5, r1
 800be2e:	0002      	movs	r2, r0
 800be30:	000b      	movs	r3, r1
 800be32:	0030      	movs	r0, r6
 800be34:	0039      	movs	r1, r7
 800be36:	f7f6 f819 	bl	8001e6c <__aeabi_dmul>
 800be3a:	2380      	movs	r3, #128	; 0x80
 800be3c:	9006      	str	r0, [sp, #24]
 800be3e:	9107      	str	r1, [sp, #28]
 800be40:	2200      	movs	r2, #0
 800be42:	0020      	movs	r0, r4
 800be44:	0029      	movs	r1, r5
 800be46:	05db      	lsls	r3, r3, #23
 800be48:	f7f6 fa7c 	bl	8002344 <__aeabi_dsub>
 800be4c:	0002      	movs	r2, r0
 800be4e:	000b      	movs	r3, r1
 800be50:	9806      	ldr	r0, [sp, #24]
 800be52:	9907      	ldr	r1, [sp, #28]
 800be54:	f7f5 fc08 	bl	8001668 <__aeabi_ddiv>
 800be58:	9a04      	ldr	r2, [sp, #16]
 800be5a:	9b05      	ldr	r3, [sp, #20]
 800be5c:	0004      	movs	r4, r0
 800be5e:	000d      	movs	r5, r1
 800be60:	0030      	movs	r0, r6
 800be62:	0039      	movs	r1, r7
 800be64:	f7f6 f802 	bl	8001e6c <__aeabi_dmul>
 800be68:	9a04      	ldr	r2, [sp, #16]
 800be6a:	9b05      	ldr	r3, [sp, #20]
 800be6c:	f7f5 f8c0 	bl	8000ff0 <__aeabi_dadd>
 800be70:	0002      	movs	r2, r0
 800be72:	000b      	movs	r3, r1
 800be74:	0020      	movs	r0, r4
 800be76:	0029      	movs	r1, r5
 800be78:	f7f6 fa64 	bl	8002344 <__aeabi_dsub>
 800be7c:	0032      	movs	r2, r6
 800be7e:	003b      	movs	r3, r7
 800be80:	f7f6 fa60 	bl	8002344 <__aeabi_dsub>
 800be84:	0002      	movs	r2, r0
 800be86:	000b      	movs	r3, r1
 800be88:	2000      	movs	r0, #0
 800be8a:	4931      	ldr	r1, [pc, #196]	; (800bf50 <__ieee754_pow+0xa08>)
 800be8c:	f7f6 fa5a 	bl	8002344 <__aeabi_dsub>
 800be90:	9b02      	ldr	r3, [sp, #8]
 800be92:	051b      	lsls	r3, r3, #20
 800be94:	185b      	adds	r3, r3, r1
 800be96:	151a      	asrs	r2, r3, #20
 800be98:	2a00      	cmp	r2, #0
 800be9a:	dc25      	bgt.n	800bee8 <__ieee754_pow+0x9a0>
 800be9c:	9a02      	ldr	r2, [sp, #8]
 800be9e:	f000 f94f 	bl	800c140 <scalbn>
 800bea2:	9a00      	ldr	r2, [sp, #0]
 800bea4:	9b01      	ldr	r3, [sp, #4]
 800bea6:	f7ff fc33 	bl	800b710 <__ieee754_pow+0x1c8>
 800beaa:	4a2a      	ldr	r2, [pc, #168]	; (800bf54 <__ieee754_pow+0xa0c>)
 800beac:	004b      	lsls	r3, r1, #1
 800beae:	085b      	lsrs	r3, r3, #1
 800beb0:	4293      	cmp	r3, r2
 800beb2:	dc00      	bgt.n	800beb6 <__ieee754_pow+0x96e>
 800beb4:	e717      	b.n	800bce6 <__ieee754_pow+0x79e>
 800beb6:	4b28      	ldr	r3, [pc, #160]	; (800bf58 <__ieee754_pow+0xa10>)
 800beb8:	18cb      	adds	r3, r1, r3
 800beba:	4303      	orrs	r3, r0
 800bebc:	d008      	beq.n	800bed0 <__ieee754_pow+0x988>
 800bebe:	9800      	ldr	r0, [sp, #0]
 800bec0:	9901      	ldr	r1, [sp, #4]
 800bec2:	2300      	movs	r3, #0
 800bec4:	2200      	movs	r2, #0
 800bec6:	f7f4 fac7 	bl	8000458 <__aeabi_dcmplt>
 800beca:	1e43      	subs	r3, r0, #1
 800becc:	4198      	sbcs	r0, r3
 800bece:	e462      	b.n	800b796 <__ieee754_pow+0x24e>
 800bed0:	0032      	movs	r2, r6
 800bed2:	003b      	movs	r3, r7
 800bed4:	f7f6 fa36 	bl	8002344 <__aeabi_dsub>
 800bed8:	9a04      	ldr	r2, [sp, #16]
 800beda:	9b05      	ldr	r3, [sp, #20]
 800bedc:	f7f4 fada 	bl	8000494 <__aeabi_dcmpge>
 800bee0:	2800      	cmp	r0, #0
 800bee2:	d100      	bne.n	800bee6 <__ieee754_pow+0x99e>
 800bee4:	e6ff      	b.n	800bce6 <__ieee754_pow+0x79e>
 800bee6:	e7ea      	b.n	800bebe <__ieee754_pow+0x976>
 800bee8:	0019      	movs	r1, r3
 800beea:	e7da      	b.n	800bea2 <__ieee754_pow+0x95a>
 800beec:	2300      	movs	r3, #0
 800beee:	4c18      	ldr	r4, [pc, #96]	; (800bf50 <__ieee754_pow+0xa08>)
 800bef0:	f7ff fbf1 	bl	800b6d6 <__ieee754_pow+0x18e>
 800bef4:	2300      	movs	r3, #0
 800bef6:	2400      	movs	r4, #0
 800bef8:	f7ff fbed 	bl	800b6d6 <__ieee754_pow+0x18e>
 800befc:	652b82fe 	.word	0x652b82fe
 800bf00:	3c971547 	.word	0x3c971547
 800bf04:	3fe00000 	.word	0x3fe00000
 800bf08:	fffffc02 	.word	0xfffffc02
 800bf0c:	fffffc01 	.word	0xfffffc01
 800bf10:	000fffff 	.word	0x000fffff
 800bf14:	3fe62e43 	.word	0x3fe62e43
 800bf18:	fefa39ef 	.word	0xfefa39ef
 800bf1c:	3fe62e42 	.word	0x3fe62e42
 800bf20:	0ca86c39 	.word	0x0ca86c39
 800bf24:	be205c61 	.word	0xbe205c61
 800bf28:	72bea4d0 	.word	0x72bea4d0
 800bf2c:	3e663769 	.word	0x3e663769
 800bf30:	c5d26bf1 	.word	0xc5d26bf1
 800bf34:	3ebbbd41 	.word	0x3ebbbd41
 800bf38:	af25de2c 	.word	0xaf25de2c
 800bf3c:	3f11566a 	.word	0x3f11566a
 800bf40:	16bebd93 	.word	0x16bebd93
 800bf44:	3f66c16c 	.word	0x3f66c16c
 800bf48:	5555553e 	.word	0x5555553e
 800bf4c:	3fc55555 	.word	0x3fc55555
 800bf50:	3ff00000 	.word	0x3ff00000
 800bf54:	4090cbff 	.word	0x4090cbff
 800bf58:	3f6f3400 	.word	0x3f6f3400

0800bf5c <__ieee754_sqrt>:
 800bf5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf5e:	000b      	movs	r3, r1
 800bf60:	000c      	movs	r4, r1
 800bf62:	4956      	ldr	r1, [pc, #344]	; (800c0bc <__ieee754_sqrt+0x160>)
 800bf64:	0005      	movs	r5, r0
 800bf66:	0002      	movs	r2, r0
 800bf68:	0008      	movs	r0, r1
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	4020      	ands	r0, r4
 800bf6e:	4288      	cmp	r0, r1
 800bf70:	d10f      	bne.n	800bf92 <__ieee754_sqrt+0x36>
 800bf72:	0028      	movs	r0, r5
 800bf74:	0021      	movs	r1, r4
 800bf76:	f7f5 ff79 	bl	8001e6c <__aeabi_dmul>
 800bf7a:	0002      	movs	r2, r0
 800bf7c:	000b      	movs	r3, r1
 800bf7e:	0028      	movs	r0, r5
 800bf80:	0021      	movs	r1, r4
 800bf82:	f7f5 f835 	bl	8000ff0 <__aeabi_dadd>
 800bf86:	0005      	movs	r5, r0
 800bf88:	000c      	movs	r4, r1
 800bf8a:	0028      	movs	r0, r5
 800bf8c:	0021      	movs	r1, r4
 800bf8e:	b005      	add	sp, #20
 800bf90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf92:	2c00      	cmp	r4, #0
 800bf94:	dc10      	bgt.n	800bfb8 <__ieee754_sqrt+0x5c>
 800bf96:	0061      	lsls	r1, r4, #1
 800bf98:	0849      	lsrs	r1, r1, #1
 800bf9a:	4329      	orrs	r1, r5
 800bf9c:	d0f5      	beq.n	800bf8a <__ieee754_sqrt+0x2e>
 800bf9e:	2100      	movs	r1, #0
 800bfa0:	428c      	cmp	r4, r1
 800bfa2:	d100      	bne.n	800bfa6 <__ieee754_sqrt+0x4a>
 800bfa4:	e080      	b.n	800c0a8 <__ieee754_sqrt+0x14c>
 800bfa6:	0028      	movs	r0, r5
 800bfa8:	0021      	movs	r1, r4
 800bfaa:	f7f6 f9cb 	bl	8002344 <__aeabi_dsub>
 800bfae:	0002      	movs	r2, r0
 800bfb0:	000b      	movs	r3, r1
 800bfb2:	f7f5 fb59 	bl	8001668 <__aeabi_ddiv>
 800bfb6:	e7e6      	b.n	800bf86 <__ieee754_sqrt+0x2a>
 800bfb8:	1521      	asrs	r1, r4, #20
 800bfba:	d075      	beq.n	800c0a8 <__ieee754_sqrt+0x14c>
 800bfbc:	4840      	ldr	r0, [pc, #256]	; (800c0c0 <__ieee754_sqrt+0x164>)
 800bfbe:	031b      	lsls	r3, r3, #12
 800bfc0:	180c      	adds	r4, r1, r0
 800bfc2:	2080      	movs	r0, #128	; 0x80
 800bfc4:	0b1b      	lsrs	r3, r3, #12
 800bfc6:	0340      	lsls	r0, r0, #13
 800bfc8:	4303      	orrs	r3, r0
 800bfca:	07c9      	lsls	r1, r1, #31
 800bfcc:	d403      	bmi.n	800bfd6 <__ieee754_sqrt+0x7a>
 800bfce:	0fd1      	lsrs	r1, r2, #31
 800bfd0:	005b      	lsls	r3, r3, #1
 800bfd2:	185b      	adds	r3, r3, r1
 800bfd4:	0052      	lsls	r2, r2, #1
 800bfd6:	1061      	asrs	r1, r4, #1
 800bfd8:	2400      	movs	r4, #0
 800bfda:	9103      	str	r1, [sp, #12]
 800bfdc:	005b      	lsls	r3, r3, #1
 800bfde:	0fd1      	lsrs	r1, r2, #31
 800bfe0:	185b      	adds	r3, r3, r1
 800bfe2:	2180      	movs	r1, #128	; 0x80
 800bfe4:	2516      	movs	r5, #22
 800bfe6:	0020      	movs	r0, r4
 800bfe8:	0052      	lsls	r2, r2, #1
 800bfea:	0389      	lsls	r1, r1, #14
 800bfec:	1846      	adds	r6, r0, r1
 800bfee:	429e      	cmp	r6, r3
 800bff0:	dc02      	bgt.n	800bff8 <__ieee754_sqrt+0x9c>
 800bff2:	1870      	adds	r0, r6, r1
 800bff4:	1b9b      	subs	r3, r3, r6
 800bff6:	1864      	adds	r4, r4, r1
 800bff8:	0fd6      	lsrs	r6, r2, #31
 800bffa:	005b      	lsls	r3, r3, #1
 800bffc:	3d01      	subs	r5, #1
 800bffe:	18f3      	adds	r3, r6, r3
 800c000:	0052      	lsls	r2, r2, #1
 800c002:	0849      	lsrs	r1, r1, #1
 800c004:	2d00      	cmp	r5, #0
 800c006:	d1f1      	bne.n	800bfec <__ieee754_sqrt+0x90>
 800c008:	2620      	movs	r6, #32
 800c00a:	2780      	movs	r7, #128	; 0x80
 800c00c:	0029      	movs	r1, r5
 800c00e:	9601      	str	r6, [sp, #4]
 800c010:	063f      	lsls	r7, r7, #24
 800c012:	197e      	adds	r6, r7, r5
 800c014:	46b4      	mov	ip, r6
 800c016:	4283      	cmp	r3, r0
 800c018:	dc02      	bgt.n	800c020 <__ieee754_sqrt+0xc4>
 800c01a:	d114      	bne.n	800c046 <__ieee754_sqrt+0xea>
 800c01c:	4296      	cmp	r6, r2
 800c01e:	d812      	bhi.n	800c046 <__ieee754_sqrt+0xea>
 800c020:	4665      	mov	r5, ip
 800c022:	4666      	mov	r6, ip
 800c024:	19ed      	adds	r5, r5, r7
 800c026:	9002      	str	r0, [sp, #8]
 800c028:	2e00      	cmp	r6, #0
 800c02a:	da03      	bge.n	800c034 <__ieee754_sqrt+0xd8>
 800c02c:	43ee      	mvns	r6, r5
 800c02e:	0ff6      	lsrs	r6, r6, #31
 800c030:	1986      	adds	r6, r0, r6
 800c032:	9602      	str	r6, [sp, #8]
 800c034:	1a1b      	subs	r3, r3, r0
 800c036:	4562      	cmp	r2, ip
 800c038:	4180      	sbcs	r0, r0
 800c03a:	4240      	negs	r0, r0
 800c03c:	1a1b      	subs	r3, r3, r0
 800c03e:	4660      	mov	r0, ip
 800c040:	1a12      	subs	r2, r2, r0
 800c042:	9802      	ldr	r0, [sp, #8]
 800c044:	19c9      	adds	r1, r1, r7
 800c046:	0fd6      	lsrs	r6, r2, #31
 800c048:	005b      	lsls	r3, r3, #1
 800c04a:	199b      	adds	r3, r3, r6
 800c04c:	9e01      	ldr	r6, [sp, #4]
 800c04e:	0052      	lsls	r2, r2, #1
 800c050:	3e01      	subs	r6, #1
 800c052:	087f      	lsrs	r7, r7, #1
 800c054:	9601      	str	r6, [sp, #4]
 800c056:	2e00      	cmp	r6, #0
 800c058:	d1db      	bne.n	800c012 <__ieee754_sqrt+0xb6>
 800c05a:	4313      	orrs	r3, r2
 800c05c:	d003      	beq.n	800c066 <__ieee754_sqrt+0x10a>
 800c05e:	1c4b      	adds	r3, r1, #1
 800c060:	d127      	bne.n	800c0b2 <__ieee754_sqrt+0x156>
 800c062:	0031      	movs	r1, r6
 800c064:	3401      	adds	r4, #1
 800c066:	4b17      	ldr	r3, [pc, #92]	; (800c0c4 <__ieee754_sqrt+0x168>)
 800c068:	1060      	asrs	r0, r4, #1
 800c06a:	18c0      	adds	r0, r0, r3
 800c06c:	0849      	lsrs	r1, r1, #1
 800c06e:	07e3      	lsls	r3, r4, #31
 800c070:	d502      	bpl.n	800c078 <__ieee754_sqrt+0x11c>
 800c072:	2380      	movs	r3, #128	; 0x80
 800c074:	061b      	lsls	r3, r3, #24
 800c076:	4319      	orrs	r1, r3
 800c078:	9b03      	ldr	r3, [sp, #12]
 800c07a:	000d      	movs	r5, r1
 800c07c:	051c      	lsls	r4, r3, #20
 800c07e:	1823      	adds	r3, r4, r0
 800c080:	001c      	movs	r4, r3
 800c082:	e782      	b.n	800bf8a <__ieee754_sqrt+0x2e>
 800c084:	0ad3      	lsrs	r3, r2, #11
 800c086:	3815      	subs	r0, #21
 800c088:	0552      	lsls	r2, r2, #21
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d0fa      	beq.n	800c084 <__ieee754_sqrt+0x128>
 800c08e:	2480      	movs	r4, #128	; 0x80
 800c090:	0364      	lsls	r4, r4, #13
 800c092:	4223      	tst	r3, r4
 800c094:	d00a      	beq.n	800c0ac <__ieee754_sqrt+0x150>
 800c096:	2420      	movs	r4, #32
 800c098:	0016      	movs	r6, r2
 800c09a:	1a64      	subs	r4, r4, r1
 800c09c:	40e6      	lsrs	r6, r4
 800c09e:	1e4d      	subs	r5, r1, #1
 800c0a0:	408a      	lsls	r2, r1
 800c0a2:	4333      	orrs	r3, r6
 800c0a4:	1b41      	subs	r1, r0, r5
 800c0a6:	e789      	b.n	800bfbc <__ieee754_sqrt+0x60>
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	e7ee      	b.n	800c08a <__ieee754_sqrt+0x12e>
 800c0ac:	005b      	lsls	r3, r3, #1
 800c0ae:	3101      	adds	r1, #1
 800c0b0:	e7ef      	b.n	800c092 <__ieee754_sqrt+0x136>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	3101      	adds	r1, #1
 800c0b6:	4399      	bics	r1, r3
 800c0b8:	e7d5      	b.n	800c066 <__ieee754_sqrt+0x10a>
 800c0ba:	46c0      	nop			; (mov r8, r8)
 800c0bc:	7ff00000 	.word	0x7ff00000
 800c0c0:	fffffc01 	.word	0xfffffc01
 800c0c4:	3fe00000 	.word	0x3fe00000

0800c0c8 <with_errno>:
 800c0c8:	b570      	push	{r4, r5, r6, lr}
 800c0ca:	000d      	movs	r5, r1
 800c0cc:	0016      	movs	r6, r2
 800c0ce:	0004      	movs	r4, r0
 800c0d0:	f7fc fa00 	bl	80084d4 <__errno>
 800c0d4:	0029      	movs	r1, r5
 800c0d6:	6006      	str	r6, [r0, #0]
 800c0d8:	0020      	movs	r0, r4
 800c0da:	bd70      	pop	{r4, r5, r6, pc}

0800c0dc <xflow>:
 800c0dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0de:	0015      	movs	r5, r2
 800c0e0:	001c      	movs	r4, r3
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d010      	beq.n	800c108 <xflow+0x2c>
 800c0e6:	2380      	movs	r3, #128	; 0x80
 800c0e8:	0010      	movs	r0, r2
 800c0ea:	061b      	lsls	r3, r3, #24
 800c0ec:	18e1      	adds	r1, r4, r3
 800c0ee:	9000      	str	r0, [sp, #0]
 800c0f0:	9101      	str	r1, [sp, #4]
 800c0f2:	9a00      	ldr	r2, [sp, #0]
 800c0f4:	9b01      	ldr	r3, [sp, #4]
 800c0f6:	0028      	movs	r0, r5
 800c0f8:	0021      	movs	r1, r4
 800c0fa:	f7f5 feb7 	bl	8001e6c <__aeabi_dmul>
 800c0fe:	2222      	movs	r2, #34	; 0x22
 800c100:	f7ff ffe2 	bl	800c0c8 <with_errno>
 800c104:	b003      	add	sp, #12
 800c106:	bd30      	pop	{r4, r5, pc}
 800c108:	0010      	movs	r0, r2
 800c10a:	0019      	movs	r1, r3
 800c10c:	e7ef      	b.n	800c0ee <xflow+0x12>

0800c10e <__math_uflow>:
 800c10e:	2380      	movs	r3, #128	; 0x80
 800c110:	b510      	push	{r4, lr}
 800c112:	2200      	movs	r2, #0
 800c114:	055b      	lsls	r3, r3, #21
 800c116:	f7ff ffe1 	bl	800c0dc <xflow>
 800c11a:	bd10      	pop	{r4, pc}

0800c11c <__math_oflow>:
 800c11c:	23e0      	movs	r3, #224	; 0xe0
 800c11e:	b510      	push	{r4, lr}
 800c120:	2200      	movs	r2, #0
 800c122:	05db      	lsls	r3, r3, #23
 800c124:	f7ff ffda 	bl	800c0dc <xflow>
 800c128:	bd10      	pop	{r4, pc}

0800c12a <fabs>:
 800c12a:	004b      	lsls	r3, r1, #1
 800c12c:	0859      	lsrs	r1, r3, #1
 800c12e:	4770      	bx	lr

0800c130 <finite>:
 800c130:	4b02      	ldr	r3, [pc, #8]	; (800c13c <finite+0xc>)
 800c132:	0048      	lsls	r0, r1, #1
 800c134:	0840      	lsrs	r0, r0, #1
 800c136:	18c0      	adds	r0, r0, r3
 800c138:	0fc0      	lsrs	r0, r0, #31
 800c13a:	4770      	bx	lr
 800c13c:	80100000 	.word	0x80100000

0800c140 <scalbn>:
 800c140:	004b      	lsls	r3, r1, #1
 800c142:	b570      	push	{r4, r5, r6, lr}
 800c144:	0d5b      	lsrs	r3, r3, #21
 800c146:	0014      	movs	r4, r2
 800c148:	000a      	movs	r2, r1
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10d      	bne.n	800c16a <scalbn+0x2a>
 800c14e:	004b      	lsls	r3, r1, #1
 800c150:	085b      	lsrs	r3, r3, #1
 800c152:	4303      	orrs	r3, r0
 800c154:	d010      	beq.n	800c178 <scalbn+0x38>
 800c156:	4b27      	ldr	r3, [pc, #156]	; (800c1f4 <scalbn+0xb4>)
 800c158:	2200      	movs	r2, #0
 800c15a:	f7f5 fe87 	bl	8001e6c <__aeabi_dmul>
 800c15e:	4b26      	ldr	r3, [pc, #152]	; (800c1f8 <scalbn+0xb8>)
 800c160:	429c      	cmp	r4, r3
 800c162:	da0a      	bge.n	800c17a <scalbn+0x3a>
 800c164:	4a25      	ldr	r2, [pc, #148]	; (800c1fc <scalbn+0xbc>)
 800c166:	4b26      	ldr	r3, [pc, #152]	; (800c200 <scalbn+0xc0>)
 800c168:	e019      	b.n	800c19e <scalbn+0x5e>
 800c16a:	4d26      	ldr	r5, [pc, #152]	; (800c204 <scalbn+0xc4>)
 800c16c:	42ab      	cmp	r3, r5
 800c16e:	d108      	bne.n	800c182 <scalbn+0x42>
 800c170:	0002      	movs	r2, r0
 800c172:	000b      	movs	r3, r1
 800c174:	f7f4 ff3c 	bl	8000ff0 <__aeabi_dadd>
 800c178:	bd70      	pop	{r4, r5, r6, pc}
 800c17a:	000a      	movs	r2, r1
 800c17c:	004b      	lsls	r3, r1, #1
 800c17e:	0d5b      	lsrs	r3, r3, #21
 800c180:	3b36      	subs	r3, #54	; 0x36
 800c182:	4d21      	ldr	r5, [pc, #132]	; (800c208 <scalbn+0xc8>)
 800c184:	18e3      	adds	r3, r4, r3
 800c186:	42ab      	cmp	r3, r5
 800c188:	dd0c      	ble.n	800c1a4 <scalbn+0x64>
 800c18a:	4c20      	ldr	r4, [pc, #128]	; (800c20c <scalbn+0xcc>)
 800c18c:	4d20      	ldr	r5, [pc, #128]	; (800c210 <scalbn+0xd0>)
 800c18e:	2900      	cmp	r1, #0
 800c190:	da01      	bge.n	800c196 <scalbn+0x56>
 800c192:	4c1e      	ldr	r4, [pc, #120]	; (800c20c <scalbn+0xcc>)
 800c194:	4d1f      	ldr	r5, [pc, #124]	; (800c214 <scalbn+0xd4>)
 800c196:	0020      	movs	r0, r4
 800c198:	0029      	movs	r1, r5
 800c19a:	4a1c      	ldr	r2, [pc, #112]	; (800c20c <scalbn+0xcc>)
 800c19c:	4b1c      	ldr	r3, [pc, #112]	; (800c210 <scalbn+0xd0>)
 800c19e:	f7f5 fe65 	bl	8001e6c <__aeabi_dmul>
 800c1a2:	e7e9      	b.n	800c178 <scalbn+0x38>
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	dd05      	ble.n	800c1b4 <scalbn+0x74>
 800c1a8:	4c1b      	ldr	r4, [pc, #108]	; (800c218 <scalbn+0xd8>)
 800c1aa:	051b      	lsls	r3, r3, #20
 800c1ac:	4022      	ands	r2, r4
 800c1ae:	431a      	orrs	r2, r3
 800c1b0:	0011      	movs	r1, r2
 800c1b2:	e7e1      	b.n	800c178 <scalbn+0x38>
 800c1b4:	001d      	movs	r5, r3
 800c1b6:	3535      	adds	r5, #53	; 0x35
 800c1b8:	da13      	bge.n	800c1e2 <scalbn+0xa2>
 800c1ba:	4a18      	ldr	r2, [pc, #96]	; (800c21c <scalbn+0xdc>)
 800c1bc:	0fcb      	lsrs	r3, r1, #31
 800c1be:	4294      	cmp	r4, r2
 800c1c0:	dd08      	ble.n	800c1d4 <scalbn+0x94>
 800c1c2:	4812      	ldr	r0, [pc, #72]	; (800c20c <scalbn+0xcc>)
 800c1c4:	4912      	ldr	r1, [pc, #72]	; (800c210 <scalbn+0xd0>)
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d001      	beq.n	800c1ce <scalbn+0x8e>
 800c1ca:	4810      	ldr	r0, [pc, #64]	; (800c20c <scalbn+0xcc>)
 800c1cc:	4911      	ldr	r1, [pc, #68]	; (800c214 <scalbn+0xd4>)
 800c1ce:	4a0f      	ldr	r2, [pc, #60]	; (800c20c <scalbn+0xcc>)
 800c1d0:	4b0f      	ldr	r3, [pc, #60]	; (800c210 <scalbn+0xd0>)
 800c1d2:	e7e4      	b.n	800c19e <scalbn+0x5e>
 800c1d4:	4809      	ldr	r0, [pc, #36]	; (800c1fc <scalbn+0xbc>)
 800c1d6:	490a      	ldr	r1, [pc, #40]	; (800c200 <scalbn+0xc0>)
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d0c3      	beq.n	800c164 <scalbn+0x24>
 800c1dc:	4807      	ldr	r0, [pc, #28]	; (800c1fc <scalbn+0xbc>)
 800c1de:	4910      	ldr	r1, [pc, #64]	; (800c220 <scalbn+0xe0>)
 800c1e0:	e7c0      	b.n	800c164 <scalbn+0x24>
 800c1e2:	4c0d      	ldr	r4, [pc, #52]	; (800c218 <scalbn+0xd8>)
 800c1e4:	3336      	adds	r3, #54	; 0x36
 800c1e6:	4022      	ands	r2, r4
 800c1e8:	051b      	lsls	r3, r3, #20
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	0019      	movs	r1, r3
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	4b0c      	ldr	r3, [pc, #48]	; (800c224 <scalbn+0xe4>)
 800c1f2:	e7d4      	b.n	800c19e <scalbn+0x5e>
 800c1f4:	43500000 	.word	0x43500000
 800c1f8:	ffff3cb0 	.word	0xffff3cb0
 800c1fc:	c2f8f359 	.word	0xc2f8f359
 800c200:	01a56e1f 	.word	0x01a56e1f
 800c204:	000007ff 	.word	0x000007ff
 800c208:	000007fe 	.word	0x000007fe
 800c20c:	8800759c 	.word	0x8800759c
 800c210:	7e37e43c 	.word	0x7e37e43c
 800c214:	fe37e43c 	.word	0xfe37e43c
 800c218:	800fffff 	.word	0x800fffff
 800c21c:	0000c350 	.word	0x0000c350
 800c220:	81a56e1f 	.word	0x81a56e1f
 800c224:	3c900000 	.word	0x3c900000

0800c228 <_init>:
 800c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22a:	46c0      	nop			; (mov r8, r8)
 800c22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c22e:	bc08      	pop	{r3}
 800c230:	469e      	mov	lr, r3
 800c232:	4770      	bx	lr

0800c234 <_fini>:
 800c234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c236:	46c0      	nop			; (mov r8, r8)
 800c238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c23a:	bc08      	pop	{r3}
 800c23c:	469e      	mov	lr, r3
 800c23e:	4770      	bx	lr
