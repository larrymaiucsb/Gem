
Code_Chip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb00  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  0800bbc0  0800bbc0  0001bbc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1b8  0800c1b8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1b8  0800c1b8  0001c1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1c0  0800c1c0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1c0  0800c1c0  0001c1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1c4  0800c1c4  0001c1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c1c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001dc  0800c3a4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  0800c3a4  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001204b  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ea  00000000  00000000  0003224f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00034940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00035990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d26  00000000  00000000  000368c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013dd8  00000000  00000000  0004d5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a0ef  00000000  00000000  000613c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb4b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe4  00000000  00000000  000eb508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bba8 	.word	0x0800bba8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800bba8 	.word	0x0800bba8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fcb1 	bl	8001da4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc01 	bl	8001c54 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fca3 	bl	8001da4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc99 	bl	8001da4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc29 	bl	8001cd8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc1f 	bl	8001cd8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f852 	bl	8000580 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 faa3 	bl	8002aa4 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 feec 	bl	8002344 <__aeabi_dsub>
 800056c:	f002 fa9a 	bl	8002aa4 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__udivmoddi4>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	4657      	mov	r7, sl
 8000584:	464e      	mov	r6, r9
 8000586:	4645      	mov	r5, r8
 8000588:	46de      	mov	lr, fp
 800058a:	b5e0      	push	{r5, r6, r7, lr}
 800058c:	0004      	movs	r4, r0
 800058e:	000d      	movs	r5, r1
 8000590:	4692      	mov	sl, r2
 8000592:	4699      	mov	r9, r3
 8000594:	b083      	sub	sp, #12
 8000596:	428b      	cmp	r3, r1
 8000598:	d830      	bhi.n	80005fc <__udivmoddi4+0x7c>
 800059a:	d02d      	beq.n	80005f8 <__udivmoddi4+0x78>
 800059c:	4649      	mov	r1, r9
 800059e:	4650      	mov	r0, sl
 80005a0:	f002 fbfa 	bl	8002d98 <__clzdi2>
 80005a4:	0029      	movs	r1, r5
 80005a6:	0006      	movs	r6, r0
 80005a8:	0020      	movs	r0, r4
 80005aa:	f002 fbf5 	bl	8002d98 <__clzdi2>
 80005ae:	1a33      	subs	r3, r6, r0
 80005b0:	4698      	mov	r8, r3
 80005b2:	3b20      	subs	r3, #32
 80005b4:	469b      	mov	fp, r3
 80005b6:	d433      	bmi.n	8000620 <__udivmoddi4+0xa0>
 80005b8:	465a      	mov	r2, fp
 80005ba:	4653      	mov	r3, sl
 80005bc:	4093      	lsls	r3, r2
 80005be:	4642      	mov	r2, r8
 80005c0:	001f      	movs	r7, r3
 80005c2:	4653      	mov	r3, sl
 80005c4:	4093      	lsls	r3, r2
 80005c6:	001e      	movs	r6, r3
 80005c8:	42af      	cmp	r7, r5
 80005ca:	d83a      	bhi.n	8000642 <__udivmoddi4+0xc2>
 80005cc:	42af      	cmp	r7, r5
 80005ce:	d100      	bne.n	80005d2 <__udivmoddi4+0x52>
 80005d0:	e078      	b.n	80006c4 <__udivmoddi4+0x144>
 80005d2:	465b      	mov	r3, fp
 80005d4:	1ba4      	subs	r4, r4, r6
 80005d6:	41bd      	sbcs	r5, r7
 80005d8:	2b00      	cmp	r3, #0
 80005da:	da00      	bge.n	80005de <__udivmoddi4+0x5e>
 80005dc:	e075      	b.n	80006ca <__udivmoddi4+0x14a>
 80005de:	2200      	movs	r2, #0
 80005e0:	2300      	movs	r3, #0
 80005e2:	9200      	str	r2, [sp, #0]
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2301      	movs	r3, #1
 80005e8:	465a      	mov	r2, fp
 80005ea:	4093      	lsls	r3, r2
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	4642      	mov	r2, r8
 80005f2:	4093      	lsls	r3, r2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	e028      	b.n	800064a <__udivmoddi4+0xca>
 80005f8:	4282      	cmp	r2, r0
 80005fa:	d9cf      	bls.n	800059c <__udivmoddi4+0x1c>
 80005fc:	2200      	movs	r2, #0
 80005fe:	2300      	movs	r3, #0
 8000600:	9200      	str	r2, [sp, #0]
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <__udivmoddi4+0x8e>
 800060a:	601c      	str	r4, [r3, #0]
 800060c:	605d      	str	r5, [r3, #4]
 800060e:	9800      	ldr	r0, [sp, #0]
 8000610:	9901      	ldr	r1, [sp, #4]
 8000612:	b003      	add	sp, #12
 8000614:	bcf0      	pop	{r4, r5, r6, r7}
 8000616:	46bb      	mov	fp, r7
 8000618:	46b2      	mov	sl, r6
 800061a:	46a9      	mov	r9, r5
 800061c:	46a0      	mov	r8, r4
 800061e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000620:	4642      	mov	r2, r8
 8000622:	2320      	movs	r3, #32
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	4652      	mov	r2, sl
 8000628:	40da      	lsrs	r2, r3
 800062a:	4641      	mov	r1, r8
 800062c:	0013      	movs	r3, r2
 800062e:	464a      	mov	r2, r9
 8000630:	408a      	lsls	r2, r1
 8000632:	0017      	movs	r7, r2
 8000634:	4642      	mov	r2, r8
 8000636:	431f      	orrs	r7, r3
 8000638:	4653      	mov	r3, sl
 800063a:	4093      	lsls	r3, r2
 800063c:	001e      	movs	r6, r3
 800063e:	42af      	cmp	r7, r5
 8000640:	d9c4      	bls.n	80005cc <__udivmoddi4+0x4c>
 8000642:	2200      	movs	r2, #0
 8000644:	2300      	movs	r3, #0
 8000646:	9200      	str	r2, [sp, #0]
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	4643      	mov	r3, r8
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0d9      	beq.n	8000604 <__udivmoddi4+0x84>
 8000650:	07fb      	lsls	r3, r7, #31
 8000652:	0872      	lsrs	r2, r6, #1
 8000654:	431a      	orrs	r2, r3
 8000656:	4646      	mov	r6, r8
 8000658:	087b      	lsrs	r3, r7, #1
 800065a:	e00e      	b.n	800067a <__udivmoddi4+0xfa>
 800065c:	42ab      	cmp	r3, r5
 800065e:	d101      	bne.n	8000664 <__udivmoddi4+0xe4>
 8000660:	42a2      	cmp	r2, r4
 8000662:	d80c      	bhi.n	800067e <__udivmoddi4+0xfe>
 8000664:	1aa4      	subs	r4, r4, r2
 8000666:	419d      	sbcs	r5, r3
 8000668:	2001      	movs	r0, #1
 800066a:	1924      	adds	r4, r4, r4
 800066c:	416d      	adcs	r5, r5
 800066e:	2100      	movs	r1, #0
 8000670:	3e01      	subs	r6, #1
 8000672:	1824      	adds	r4, r4, r0
 8000674:	414d      	adcs	r5, r1
 8000676:	2e00      	cmp	r6, #0
 8000678:	d006      	beq.n	8000688 <__udivmoddi4+0x108>
 800067a:	42ab      	cmp	r3, r5
 800067c:	d9ee      	bls.n	800065c <__udivmoddi4+0xdc>
 800067e:	3e01      	subs	r6, #1
 8000680:	1924      	adds	r4, r4, r4
 8000682:	416d      	adcs	r5, r5
 8000684:	2e00      	cmp	r6, #0
 8000686:	d1f8      	bne.n	800067a <__udivmoddi4+0xfa>
 8000688:	9800      	ldr	r0, [sp, #0]
 800068a:	9901      	ldr	r1, [sp, #4]
 800068c:	465b      	mov	r3, fp
 800068e:	1900      	adds	r0, r0, r4
 8000690:	4169      	adcs	r1, r5
 8000692:	2b00      	cmp	r3, #0
 8000694:	db24      	blt.n	80006e0 <__udivmoddi4+0x160>
 8000696:	002b      	movs	r3, r5
 8000698:	465a      	mov	r2, fp
 800069a:	4644      	mov	r4, r8
 800069c:	40d3      	lsrs	r3, r2
 800069e:	002a      	movs	r2, r5
 80006a0:	40e2      	lsrs	r2, r4
 80006a2:	001c      	movs	r4, r3
 80006a4:	465b      	mov	r3, fp
 80006a6:	0015      	movs	r5, r2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db2a      	blt.n	8000702 <__udivmoddi4+0x182>
 80006ac:	0026      	movs	r6, r4
 80006ae:	409e      	lsls	r6, r3
 80006b0:	0033      	movs	r3, r6
 80006b2:	0026      	movs	r6, r4
 80006b4:	4647      	mov	r7, r8
 80006b6:	40be      	lsls	r6, r7
 80006b8:	0032      	movs	r2, r6
 80006ba:	1a80      	subs	r0, r0, r2
 80006bc:	4199      	sbcs	r1, r3
 80006be:	9000      	str	r0, [sp, #0]
 80006c0:	9101      	str	r1, [sp, #4]
 80006c2:	e79f      	b.n	8000604 <__udivmoddi4+0x84>
 80006c4:	42a3      	cmp	r3, r4
 80006c6:	d8bc      	bhi.n	8000642 <__udivmoddi4+0xc2>
 80006c8:	e783      	b.n	80005d2 <__udivmoddi4+0x52>
 80006ca:	4642      	mov	r2, r8
 80006cc:	2320      	movs	r3, #32
 80006ce:	2100      	movs	r1, #0
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	2200      	movs	r2, #0
 80006d4:	9100      	str	r1, [sp, #0]
 80006d6:	9201      	str	r2, [sp, #4]
 80006d8:	2201      	movs	r2, #1
 80006da:	40da      	lsrs	r2, r3
 80006dc:	9201      	str	r2, [sp, #4]
 80006de:	e786      	b.n	80005ee <__udivmoddi4+0x6e>
 80006e0:	4642      	mov	r2, r8
 80006e2:	2320      	movs	r3, #32
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	002a      	movs	r2, r5
 80006e8:	4646      	mov	r6, r8
 80006ea:	409a      	lsls	r2, r3
 80006ec:	0023      	movs	r3, r4
 80006ee:	40f3      	lsrs	r3, r6
 80006f0:	4644      	mov	r4, r8
 80006f2:	4313      	orrs	r3, r2
 80006f4:	002a      	movs	r2, r5
 80006f6:	40e2      	lsrs	r2, r4
 80006f8:	001c      	movs	r4, r3
 80006fa:	465b      	mov	r3, fp
 80006fc:	0015      	movs	r5, r2
 80006fe:	2b00      	cmp	r3, #0
 8000700:	dad4      	bge.n	80006ac <__udivmoddi4+0x12c>
 8000702:	4642      	mov	r2, r8
 8000704:	002f      	movs	r7, r5
 8000706:	2320      	movs	r3, #32
 8000708:	0026      	movs	r6, r4
 800070a:	4097      	lsls	r7, r2
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	40de      	lsrs	r6, r3
 8000710:	003b      	movs	r3, r7
 8000712:	4333      	orrs	r3, r6
 8000714:	e7cd      	b.n	80006b2 <__udivmoddi4+0x132>
 8000716:	46c0      	nop			; (mov r8, r8)

08000718 <__aeabi_fadd>:
 8000718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071a:	46c6      	mov	lr, r8
 800071c:	0243      	lsls	r3, r0, #9
 800071e:	0a5b      	lsrs	r3, r3, #9
 8000720:	024e      	lsls	r6, r1, #9
 8000722:	0045      	lsls	r5, r0, #1
 8000724:	004f      	lsls	r7, r1, #1
 8000726:	00da      	lsls	r2, r3, #3
 8000728:	0fc4      	lsrs	r4, r0, #31
 800072a:	469c      	mov	ip, r3
 800072c:	0a70      	lsrs	r0, r6, #9
 800072e:	4690      	mov	r8, r2
 8000730:	b500      	push	{lr}
 8000732:	0e2d      	lsrs	r5, r5, #24
 8000734:	0e3f      	lsrs	r7, r7, #24
 8000736:	0fc9      	lsrs	r1, r1, #31
 8000738:	09b6      	lsrs	r6, r6, #6
 800073a:	428c      	cmp	r4, r1
 800073c:	d04b      	beq.n	80007d6 <__aeabi_fadd+0xbe>
 800073e:	1bea      	subs	r2, r5, r7
 8000740:	2a00      	cmp	r2, #0
 8000742:	dd36      	ble.n	80007b2 <__aeabi_fadd+0x9a>
 8000744:	2f00      	cmp	r7, #0
 8000746:	d061      	beq.n	800080c <__aeabi_fadd+0xf4>
 8000748:	2dff      	cmp	r5, #255	; 0xff
 800074a:	d100      	bne.n	800074e <__aeabi_fadd+0x36>
 800074c:	e0ad      	b.n	80008aa <__aeabi_fadd+0x192>
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	04db      	lsls	r3, r3, #19
 8000752:	431e      	orrs	r6, r3
 8000754:	2a1b      	cmp	r2, #27
 8000756:	dc00      	bgt.n	800075a <__aeabi_fadd+0x42>
 8000758:	e0d3      	b.n	8000902 <__aeabi_fadd+0x1ea>
 800075a:	2001      	movs	r0, #1
 800075c:	4643      	mov	r3, r8
 800075e:	1a18      	subs	r0, r3, r0
 8000760:	0143      	lsls	r3, r0, #5
 8000762:	d400      	bmi.n	8000766 <__aeabi_fadd+0x4e>
 8000764:	e08c      	b.n	8000880 <__aeabi_fadd+0x168>
 8000766:	0180      	lsls	r0, r0, #6
 8000768:	0987      	lsrs	r7, r0, #6
 800076a:	0038      	movs	r0, r7
 800076c:	f002 faf6 	bl	8002d5c <__clzsi2>
 8000770:	3805      	subs	r0, #5
 8000772:	4087      	lsls	r7, r0
 8000774:	4285      	cmp	r5, r0
 8000776:	dc00      	bgt.n	800077a <__aeabi_fadd+0x62>
 8000778:	e0b6      	b.n	80008e8 <__aeabi_fadd+0x1d0>
 800077a:	1a2d      	subs	r5, r5, r0
 800077c:	48b3      	ldr	r0, [pc, #716]	; (8000a4c <__aeabi_fadd+0x334>)
 800077e:	4038      	ands	r0, r7
 8000780:	0743      	lsls	r3, r0, #29
 8000782:	d004      	beq.n	800078e <__aeabi_fadd+0x76>
 8000784:	230f      	movs	r3, #15
 8000786:	4003      	ands	r3, r0
 8000788:	2b04      	cmp	r3, #4
 800078a:	d000      	beq.n	800078e <__aeabi_fadd+0x76>
 800078c:	3004      	adds	r0, #4
 800078e:	0143      	lsls	r3, r0, #5
 8000790:	d400      	bmi.n	8000794 <__aeabi_fadd+0x7c>
 8000792:	e078      	b.n	8000886 <__aeabi_fadd+0x16e>
 8000794:	1c6a      	adds	r2, r5, #1
 8000796:	2dfe      	cmp	r5, #254	; 0xfe
 8000798:	d065      	beq.n	8000866 <__aeabi_fadd+0x14e>
 800079a:	0180      	lsls	r0, r0, #6
 800079c:	0a43      	lsrs	r3, r0, #9
 800079e:	469c      	mov	ip, r3
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	4663      	mov	r3, ip
 80007a4:	05d0      	lsls	r0, r2, #23
 80007a6:	4318      	orrs	r0, r3
 80007a8:	07e4      	lsls	r4, r4, #31
 80007aa:	4320      	orrs	r0, r4
 80007ac:	bc80      	pop	{r7}
 80007ae:	46b8      	mov	r8, r7
 80007b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b2:	2a00      	cmp	r2, #0
 80007b4:	d035      	beq.n	8000822 <__aeabi_fadd+0x10a>
 80007b6:	1b7a      	subs	r2, r7, r5
 80007b8:	2d00      	cmp	r5, #0
 80007ba:	d000      	beq.n	80007be <__aeabi_fadd+0xa6>
 80007bc:	e0af      	b.n	800091e <__aeabi_fadd+0x206>
 80007be:	4643      	mov	r3, r8
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fadd+0xae>
 80007c4:	e0a7      	b.n	8000916 <__aeabi_fadd+0x1fe>
 80007c6:	1e53      	subs	r3, r2, #1
 80007c8:	2a01      	cmp	r2, #1
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0xb6>
 80007cc:	e12f      	b.n	8000a2e <__aeabi_fadd+0x316>
 80007ce:	2aff      	cmp	r2, #255	; 0xff
 80007d0:	d069      	beq.n	80008a6 <__aeabi_fadd+0x18e>
 80007d2:	001a      	movs	r2, r3
 80007d4:	e0aa      	b.n	800092c <__aeabi_fadd+0x214>
 80007d6:	1be9      	subs	r1, r5, r7
 80007d8:	2900      	cmp	r1, #0
 80007da:	dd70      	ble.n	80008be <__aeabi_fadd+0x1a6>
 80007dc:	2f00      	cmp	r7, #0
 80007de:	d037      	beq.n	8000850 <__aeabi_fadd+0x138>
 80007e0:	2dff      	cmp	r5, #255	; 0xff
 80007e2:	d062      	beq.n	80008aa <__aeabi_fadd+0x192>
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	04db      	lsls	r3, r3, #19
 80007e8:	431e      	orrs	r6, r3
 80007ea:	291b      	cmp	r1, #27
 80007ec:	dc00      	bgt.n	80007f0 <__aeabi_fadd+0xd8>
 80007ee:	e0b0      	b.n	8000952 <__aeabi_fadd+0x23a>
 80007f0:	2001      	movs	r0, #1
 80007f2:	4440      	add	r0, r8
 80007f4:	0143      	lsls	r3, r0, #5
 80007f6:	d543      	bpl.n	8000880 <__aeabi_fadd+0x168>
 80007f8:	3501      	adds	r5, #1
 80007fa:	2dff      	cmp	r5, #255	; 0xff
 80007fc:	d033      	beq.n	8000866 <__aeabi_fadd+0x14e>
 80007fe:	2301      	movs	r3, #1
 8000800:	4a93      	ldr	r2, [pc, #588]	; (8000a50 <__aeabi_fadd+0x338>)
 8000802:	4003      	ands	r3, r0
 8000804:	0840      	lsrs	r0, r0, #1
 8000806:	4010      	ands	r0, r2
 8000808:	4318      	orrs	r0, r3
 800080a:	e7b9      	b.n	8000780 <__aeabi_fadd+0x68>
 800080c:	2e00      	cmp	r6, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fadd+0xfa>
 8000810:	e083      	b.n	800091a <__aeabi_fadd+0x202>
 8000812:	1e51      	subs	r1, r2, #1
 8000814:	2a01      	cmp	r2, #1
 8000816:	d100      	bne.n	800081a <__aeabi_fadd+0x102>
 8000818:	e0d8      	b.n	80009cc <__aeabi_fadd+0x2b4>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d045      	beq.n	80008aa <__aeabi_fadd+0x192>
 800081e:	000a      	movs	r2, r1
 8000820:	e798      	b.n	8000754 <__aeabi_fadd+0x3c>
 8000822:	27fe      	movs	r7, #254	; 0xfe
 8000824:	1c6a      	adds	r2, r5, #1
 8000826:	4217      	tst	r7, r2
 8000828:	d000      	beq.n	800082c <__aeabi_fadd+0x114>
 800082a:	e086      	b.n	800093a <__aeabi_fadd+0x222>
 800082c:	2d00      	cmp	r5, #0
 800082e:	d000      	beq.n	8000832 <__aeabi_fadd+0x11a>
 8000830:	e0b7      	b.n	80009a2 <__aeabi_fadd+0x28a>
 8000832:	4643      	mov	r3, r8
 8000834:	2b00      	cmp	r3, #0
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x122>
 8000838:	e0f3      	b.n	8000a22 <__aeabi_fadd+0x30a>
 800083a:	2200      	movs	r2, #0
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0b0      	beq.n	80007a2 <__aeabi_fadd+0x8a>
 8000840:	1b98      	subs	r0, r3, r6
 8000842:	0143      	lsls	r3, r0, #5
 8000844:	d400      	bmi.n	8000848 <__aeabi_fadd+0x130>
 8000846:	e0fa      	b.n	8000a3e <__aeabi_fadd+0x326>
 8000848:	4643      	mov	r3, r8
 800084a:	000c      	movs	r4, r1
 800084c:	1af0      	subs	r0, r6, r3
 800084e:	e797      	b.n	8000780 <__aeabi_fadd+0x68>
 8000850:	2e00      	cmp	r6, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fadd+0x13e>
 8000854:	e0c8      	b.n	80009e8 <__aeabi_fadd+0x2d0>
 8000856:	1e4a      	subs	r2, r1, #1
 8000858:	2901      	cmp	r1, #1
 800085a:	d100      	bne.n	800085e <__aeabi_fadd+0x146>
 800085c:	e0ae      	b.n	80009bc <__aeabi_fadd+0x2a4>
 800085e:	29ff      	cmp	r1, #255	; 0xff
 8000860:	d023      	beq.n	80008aa <__aeabi_fadd+0x192>
 8000862:	0011      	movs	r1, r2
 8000864:	e7c1      	b.n	80007ea <__aeabi_fadd+0xd2>
 8000866:	2300      	movs	r3, #0
 8000868:	22ff      	movs	r2, #255	; 0xff
 800086a:	469c      	mov	ip, r3
 800086c:	e799      	b.n	80007a2 <__aeabi_fadd+0x8a>
 800086e:	21fe      	movs	r1, #254	; 0xfe
 8000870:	1c6a      	adds	r2, r5, #1
 8000872:	4211      	tst	r1, r2
 8000874:	d077      	beq.n	8000966 <__aeabi_fadd+0x24e>
 8000876:	2aff      	cmp	r2, #255	; 0xff
 8000878:	d0f5      	beq.n	8000866 <__aeabi_fadd+0x14e>
 800087a:	0015      	movs	r5, r2
 800087c:	4446      	add	r6, r8
 800087e:	0870      	lsrs	r0, r6, #1
 8000880:	0743      	lsls	r3, r0, #29
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0x16e>
 8000884:	e77e      	b.n	8000784 <__aeabi_fadd+0x6c>
 8000886:	08c3      	lsrs	r3, r0, #3
 8000888:	2dff      	cmp	r5, #255	; 0xff
 800088a:	d00e      	beq.n	80008aa <__aeabi_fadd+0x192>
 800088c:	025b      	lsls	r3, r3, #9
 800088e:	0a5b      	lsrs	r3, r3, #9
 8000890:	469c      	mov	ip, r3
 8000892:	b2ea      	uxtb	r2, r5
 8000894:	e785      	b.n	80007a2 <__aeabi_fadd+0x8a>
 8000896:	2e00      	cmp	r6, #0
 8000898:	d007      	beq.n	80008aa <__aeabi_fadd+0x192>
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	03d2      	lsls	r2, r2, #15
 800089e:	4213      	tst	r3, r2
 80008a0:	d003      	beq.n	80008aa <__aeabi_fadd+0x192>
 80008a2:	4210      	tst	r0, r2
 80008a4:	d101      	bne.n	80008aa <__aeabi_fadd+0x192>
 80008a6:	000c      	movs	r4, r1
 80008a8:	0003      	movs	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0db      	beq.n	8000866 <__aeabi_fadd+0x14e>
 80008ae:	2080      	movs	r0, #128	; 0x80
 80008b0:	03c0      	lsls	r0, r0, #15
 80008b2:	4318      	orrs	r0, r3
 80008b4:	0240      	lsls	r0, r0, #9
 80008b6:	0a43      	lsrs	r3, r0, #9
 80008b8:	469c      	mov	ip, r3
 80008ba:	22ff      	movs	r2, #255	; 0xff
 80008bc:	e771      	b.n	80007a2 <__aeabi_fadd+0x8a>
 80008be:	2900      	cmp	r1, #0
 80008c0:	d0d5      	beq.n	800086e <__aeabi_fadd+0x156>
 80008c2:	1b7a      	subs	r2, r7, r5
 80008c4:	2d00      	cmp	r5, #0
 80008c6:	d160      	bne.n	800098a <__aeabi_fadd+0x272>
 80008c8:	4643      	mov	r3, r8
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d024      	beq.n	8000918 <__aeabi_fadd+0x200>
 80008ce:	1e53      	subs	r3, r2, #1
 80008d0:	2a01      	cmp	r2, #1
 80008d2:	d073      	beq.n	80009bc <__aeabi_fadd+0x2a4>
 80008d4:	2aff      	cmp	r2, #255	; 0xff
 80008d6:	d0e7      	beq.n	80008a8 <__aeabi_fadd+0x190>
 80008d8:	001a      	movs	r2, r3
 80008da:	2a1b      	cmp	r2, #27
 80008dc:	dc00      	bgt.n	80008e0 <__aeabi_fadd+0x1c8>
 80008de:	e085      	b.n	80009ec <__aeabi_fadd+0x2d4>
 80008e0:	2001      	movs	r0, #1
 80008e2:	003d      	movs	r5, r7
 80008e4:	1980      	adds	r0, r0, r6
 80008e6:	e785      	b.n	80007f4 <__aeabi_fadd+0xdc>
 80008e8:	2320      	movs	r3, #32
 80008ea:	003a      	movs	r2, r7
 80008ec:	1b45      	subs	r5, r0, r5
 80008ee:	0038      	movs	r0, r7
 80008f0:	3501      	adds	r5, #1
 80008f2:	40ea      	lsrs	r2, r5
 80008f4:	1b5d      	subs	r5, r3, r5
 80008f6:	40a8      	lsls	r0, r5
 80008f8:	1e43      	subs	r3, r0, #1
 80008fa:	4198      	sbcs	r0, r3
 80008fc:	2500      	movs	r5, #0
 80008fe:	4310      	orrs	r0, r2
 8000900:	e73e      	b.n	8000780 <__aeabi_fadd+0x68>
 8000902:	2320      	movs	r3, #32
 8000904:	0030      	movs	r0, r6
 8000906:	1a9b      	subs	r3, r3, r2
 8000908:	0031      	movs	r1, r6
 800090a:	4098      	lsls	r0, r3
 800090c:	40d1      	lsrs	r1, r2
 800090e:	1e43      	subs	r3, r0, #1
 8000910:	4198      	sbcs	r0, r3
 8000912:	4308      	orrs	r0, r1
 8000914:	e722      	b.n	800075c <__aeabi_fadd+0x44>
 8000916:	000c      	movs	r4, r1
 8000918:	0003      	movs	r3, r0
 800091a:	0015      	movs	r5, r2
 800091c:	e7b4      	b.n	8000888 <__aeabi_fadd+0x170>
 800091e:	2fff      	cmp	r7, #255	; 0xff
 8000920:	d0c1      	beq.n	80008a6 <__aeabi_fadd+0x18e>
 8000922:	2380      	movs	r3, #128	; 0x80
 8000924:	4640      	mov	r0, r8
 8000926:	04db      	lsls	r3, r3, #19
 8000928:	4318      	orrs	r0, r3
 800092a:	4680      	mov	r8, r0
 800092c:	2a1b      	cmp	r2, #27
 800092e:	dd51      	ble.n	80009d4 <__aeabi_fadd+0x2bc>
 8000930:	2001      	movs	r0, #1
 8000932:	000c      	movs	r4, r1
 8000934:	003d      	movs	r5, r7
 8000936:	1a30      	subs	r0, r6, r0
 8000938:	e712      	b.n	8000760 <__aeabi_fadd+0x48>
 800093a:	4643      	mov	r3, r8
 800093c:	1b9f      	subs	r7, r3, r6
 800093e:	017b      	lsls	r3, r7, #5
 8000940:	d42b      	bmi.n	800099a <__aeabi_fadd+0x282>
 8000942:	2f00      	cmp	r7, #0
 8000944:	d000      	beq.n	8000948 <__aeabi_fadd+0x230>
 8000946:	e710      	b.n	800076a <__aeabi_fadd+0x52>
 8000948:	2300      	movs	r3, #0
 800094a:	2400      	movs	r4, #0
 800094c:	2200      	movs	r2, #0
 800094e:	469c      	mov	ip, r3
 8000950:	e727      	b.n	80007a2 <__aeabi_fadd+0x8a>
 8000952:	2320      	movs	r3, #32
 8000954:	0032      	movs	r2, r6
 8000956:	0030      	movs	r0, r6
 8000958:	40ca      	lsrs	r2, r1
 800095a:	1a59      	subs	r1, r3, r1
 800095c:	4088      	lsls	r0, r1
 800095e:	1e43      	subs	r3, r0, #1
 8000960:	4198      	sbcs	r0, r3
 8000962:	4310      	orrs	r0, r2
 8000964:	e745      	b.n	80007f2 <__aeabi_fadd+0xda>
 8000966:	2d00      	cmp	r5, #0
 8000968:	d14a      	bne.n	8000a00 <__aeabi_fadd+0x2e8>
 800096a:	4643      	mov	r3, r8
 800096c:	2b00      	cmp	r3, #0
 800096e:	d063      	beq.n	8000a38 <__aeabi_fadd+0x320>
 8000970:	2200      	movs	r2, #0
 8000972:	2e00      	cmp	r6, #0
 8000974:	d100      	bne.n	8000978 <__aeabi_fadd+0x260>
 8000976:	e714      	b.n	80007a2 <__aeabi_fadd+0x8a>
 8000978:	0030      	movs	r0, r6
 800097a:	4440      	add	r0, r8
 800097c:	0143      	lsls	r3, r0, #5
 800097e:	d400      	bmi.n	8000982 <__aeabi_fadd+0x26a>
 8000980:	e77e      	b.n	8000880 <__aeabi_fadd+0x168>
 8000982:	4b32      	ldr	r3, [pc, #200]	; (8000a4c <__aeabi_fadd+0x334>)
 8000984:	3501      	adds	r5, #1
 8000986:	4018      	ands	r0, r3
 8000988:	e77a      	b.n	8000880 <__aeabi_fadd+0x168>
 800098a:	2fff      	cmp	r7, #255	; 0xff
 800098c:	d08c      	beq.n	80008a8 <__aeabi_fadd+0x190>
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	4641      	mov	r1, r8
 8000992:	04db      	lsls	r3, r3, #19
 8000994:	4319      	orrs	r1, r3
 8000996:	4688      	mov	r8, r1
 8000998:	e79f      	b.n	80008da <__aeabi_fadd+0x1c2>
 800099a:	4643      	mov	r3, r8
 800099c:	000c      	movs	r4, r1
 800099e:	1af7      	subs	r7, r6, r3
 80009a0:	e6e3      	b.n	800076a <__aeabi_fadd+0x52>
 80009a2:	4642      	mov	r2, r8
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	d000      	beq.n	80009aa <__aeabi_fadd+0x292>
 80009a8:	e775      	b.n	8000896 <__aeabi_fadd+0x17e>
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fadd+0x298>
 80009ae:	e77a      	b.n	80008a6 <__aeabi_fadd+0x18e>
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	03db      	lsls	r3, r3, #15
 80009b4:	2400      	movs	r4, #0
 80009b6:	469c      	mov	ip, r3
 80009b8:	22ff      	movs	r2, #255	; 0xff
 80009ba:	e6f2      	b.n	80007a2 <__aeabi_fadd+0x8a>
 80009bc:	0030      	movs	r0, r6
 80009be:	4440      	add	r0, r8
 80009c0:	2501      	movs	r5, #1
 80009c2:	0143      	lsls	r3, r0, #5
 80009c4:	d400      	bmi.n	80009c8 <__aeabi_fadd+0x2b0>
 80009c6:	e75b      	b.n	8000880 <__aeabi_fadd+0x168>
 80009c8:	2502      	movs	r5, #2
 80009ca:	e718      	b.n	80007fe <__aeabi_fadd+0xe6>
 80009cc:	4643      	mov	r3, r8
 80009ce:	2501      	movs	r5, #1
 80009d0:	1b98      	subs	r0, r3, r6
 80009d2:	e6c5      	b.n	8000760 <__aeabi_fadd+0x48>
 80009d4:	2320      	movs	r3, #32
 80009d6:	4644      	mov	r4, r8
 80009d8:	4640      	mov	r0, r8
 80009da:	40d4      	lsrs	r4, r2
 80009dc:	1a9a      	subs	r2, r3, r2
 80009de:	4090      	lsls	r0, r2
 80009e0:	1e43      	subs	r3, r0, #1
 80009e2:	4198      	sbcs	r0, r3
 80009e4:	4320      	orrs	r0, r4
 80009e6:	e7a4      	b.n	8000932 <__aeabi_fadd+0x21a>
 80009e8:	000d      	movs	r5, r1
 80009ea:	e74d      	b.n	8000888 <__aeabi_fadd+0x170>
 80009ec:	2320      	movs	r3, #32
 80009ee:	4641      	mov	r1, r8
 80009f0:	4640      	mov	r0, r8
 80009f2:	40d1      	lsrs	r1, r2
 80009f4:	1a9a      	subs	r2, r3, r2
 80009f6:	4090      	lsls	r0, r2
 80009f8:	1e43      	subs	r3, r0, #1
 80009fa:	4198      	sbcs	r0, r3
 80009fc:	4308      	orrs	r0, r1
 80009fe:	e770      	b.n	80008e2 <__aeabi_fadd+0x1ca>
 8000a00:	4642      	mov	r2, r8
 8000a02:	2a00      	cmp	r2, #0
 8000a04:	d100      	bne.n	8000a08 <__aeabi_fadd+0x2f0>
 8000a06:	e74f      	b.n	80008a8 <__aeabi_fadd+0x190>
 8000a08:	2e00      	cmp	r6, #0
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_fadd+0x2f6>
 8000a0c:	e74d      	b.n	80008aa <__aeabi_fadd+0x192>
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	03d2      	lsls	r2, r2, #15
 8000a12:	4213      	tst	r3, r2
 8000a14:	d100      	bne.n	8000a18 <__aeabi_fadd+0x300>
 8000a16:	e748      	b.n	80008aa <__aeabi_fadd+0x192>
 8000a18:	4210      	tst	r0, r2
 8000a1a:	d000      	beq.n	8000a1e <__aeabi_fadd+0x306>
 8000a1c:	e745      	b.n	80008aa <__aeabi_fadd+0x192>
 8000a1e:	0003      	movs	r3, r0
 8000a20:	e743      	b.n	80008aa <__aeabi_fadd+0x192>
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d090      	beq.n	8000948 <__aeabi_fadd+0x230>
 8000a26:	000c      	movs	r4, r1
 8000a28:	4684      	mov	ip, r0
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	e6b9      	b.n	80007a2 <__aeabi_fadd+0x8a>
 8000a2e:	4643      	mov	r3, r8
 8000a30:	000c      	movs	r4, r1
 8000a32:	1af0      	subs	r0, r6, r3
 8000a34:	3501      	adds	r5, #1
 8000a36:	e693      	b.n	8000760 <__aeabi_fadd+0x48>
 8000a38:	4684      	mov	ip, r0
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	e6b1      	b.n	80007a2 <__aeabi_fadd+0x8a>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	d000      	beq.n	8000a44 <__aeabi_fadd+0x32c>
 8000a42:	e71d      	b.n	8000880 <__aeabi_fadd+0x168>
 8000a44:	2300      	movs	r3, #0
 8000a46:	2400      	movs	r4, #0
 8000a48:	469c      	mov	ip, r3
 8000a4a:	e6aa      	b.n	80007a2 <__aeabi_fadd+0x8a>
 8000a4c:	fbffffff 	.word	0xfbffffff
 8000a50:	7dffffff 	.word	0x7dffffff

08000a54 <__aeabi_fdiv>:
 8000a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a56:	464f      	mov	r7, r9
 8000a58:	4646      	mov	r6, r8
 8000a5a:	46d6      	mov	lr, sl
 8000a5c:	0245      	lsls	r5, r0, #9
 8000a5e:	b5c0      	push	{r6, r7, lr}
 8000a60:	0047      	lsls	r7, r0, #1
 8000a62:	1c0c      	adds	r4, r1, #0
 8000a64:	0a6d      	lsrs	r5, r5, #9
 8000a66:	0e3f      	lsrs	r7, r7, #24
 8000a68:	0fc6      	lsrs	r6, r0, #31
 8000a6a:	2f00      	cmp	r7, #0
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_fdiv+0x1c>
 8000a6e:	e070      	b.n	8000b52 <__aeabi_fdiv+0xfe>
 8000a70:	2fff      	cmp	r7, #255	; 0xff
 8000a72:	d100      	bne.n	8000a76 <__aeabi_fdiv+0x22>
 8000a74:	e075      	b.n	8000b62 <__aeabi_fdiv+0x10e>
 8000a76:	00eb      	lsls	r3, r5, #3
 8000a78:	2580      	movs	r5, #128	; 0x80
 8000a7a:	04ed      	lsls	r5, r5, #19
 8000a7c:	431d      	orrs	r5, r3
 8000a7e:	2300      	movs	r3, #0
 8000a80:	4699      	mov	r9, r3
 8000a82:	469a      	mov	sl, r3
 8000a84:	3f7f      	subs	r7, #127	; 0x7f
 8000a86:	0260      	lsls	r0, r4, #9
 8000a88:	0a43      	lsrs	r3, r0, #9
 8000a8a:	4698      	mov	r8, r3
 8000a8c:	0063      	lsls	r3, r4, #1
 8000a8e:	0e1b      	lsrs	r3, r3, #24
 8000a90:	0fe4      	lsrs	r4, r4, #31
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d04e      	beq.n	8000b34 <__aeabi_fdiv+0xe0>
 8000a96:	2bff      	cmp	r3, #255	; 0xff
 8000a98:	d046      	beq.n	8000b28 <__aeabi_fdiv+0xd4>
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	00d0      	lsls	r0, r2, #3
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	04d2      	lsls	r2, r2, #19
 8000aa2:	4302      	orrs	r2, r0
 8000aa4:	4690      	mov	r8, r2
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	3b7f      	subs	r3, #127	; 0x7f
 8000aaa:	0031      	movs	r1, r6
 8000aac:	1aff      	subs	r7, r7, r3
 8000aae:	464b      	mov	r3, r9
 8000ab0:	4061      	eors	r1, r4
 8000ab2:	b2c9      	uxtb	r1, r1
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	2b0f      	cmp	r3, #15
 8000ab8:	d900      	bls.n	8000abc <__aeabi_fdiv+0x68>
 8000aba:	e0b5      	b.n	8000c28 <__aeabi_fdiv+0x1d4>
 8000abc:	486e      	ldr	r0, [pc, #440]	; (8000c78 <__aeabi_fdiv+0x224>)
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	58c3      	ldr	r3, [r0, r3]
 8000ac2:	469f      	mov	pc, r3
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	4698      	mov	r8, r3
 8000ac8:	0026      	movs	r6, r4
 8000aca:	4645      	mov	r5, r8
 8000acc:	4692      	mov	sl, r2
 8000ace:	4653      	mov	r3, sl
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_fdiv+0x82>
 8000ad4:	e089      	b.n	8000bea <__aeabi_fdiv+0x196>
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fdiv+0x88>
 8000ada:	e09e      	b.n	8000c1a <__aeabi_fdiv+0x1c6>
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d018      	beq.n	8000b12 <__aeabi_fdiv+0xbe>
 8000ae0:	003b      	movs	r3, r7
 8000ae2:	337f      	adds	r3, #127	; 0x7f
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	dd69      	ble.n	8000bbc <__aeabi_fdiv+0x168>
 8000ae8:	076a      	lsls	r2, r5, #29
 8000aea:	d004      	beq.n	8000af6 <__aeabi_fdiv+0xa2>
 8000aec:	220f      	movs	r2, #15
 8000aee:	402a      	ands	r2, r5
 8000af0:	2a04      	cmp	r2, #4
 8000af2:	d000      	beq.n	8000af6 <__aeabi_fdiv+0xa2>
 8000af4:	3504      	adds	r5, #4
 8000af6:	012a      	lsls	r2, r5, #4
 8000af8:	d503      	bpl.n	8000b02 <__aeabi_fdiv+0xae>
 8000afa:	4b60      	ldr	r3, [pc, #384]	; (8000c7c <__aeabi_fdiv+0x228>)
 8000afc:	401d      	ands	r5, r3
 8000afe:	003b      	movs	r3, r7
 8000b00:	3380      	adds	r3, #128	; 0x80
 8000b02:	2bfe      	cmp	r3, #254	; 0xfe
 8000b04:	dd00      	ble.n	8000b08 <__aeabi_fdiv+0xb4>
 8000b06:	e070      	b.n	8000bea <__aeabi_fdiv+0x196>
 8000b08:	01ad      	lsls	r5, r5, #6
 8000b0a:	0a6d      	lsrs	r5, r5, #9
 8000b0c:	b2d8      	uxtb	r0, r3
 8000b0e:	e002      	b.n	8000b16 <__aeabi_fdiv+0xc2>
 8000b10:	000e      	movs	r6, r1
 8000b12:	2000      	movs	r0, #0
 8000b14:	2500      	movs	r5, #0
 8000b16:	05c0      	lsls	r0, r0, #23
 8000b18:	4328      	orrs	r0, r5
 8000b1a:	07f6      	lsls	r6, r6, #31
 8000b1c:	4330      	orrs	r0, r6
 8000b1e:	bce0      	pop	{r5, r6, r7}
 8000b20:	46ba      	mov	sl, r7
 8000b22:	46b1      	mov	r9, r6
 8000b24:	46a8      	mov	r8, r5
 8000b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b28:	4643      	mov	r3, r8
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d13f      	bne.n	8000bae <__aeabi_fdiv+0x15a>
 8000b2e:	2202      	movs	r2, #2
 8000b30:	3fff      	subs	r7, #255	; 0xff
 8000b32:	e003      	b.n	8000b3c <__aeabi_fdiv+0xe8>
 8000b34:	4643      	mov	r3, r8
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d12d      	bne.n	8000b96 <__aeabi_fdiv+0x142>
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	0031      	movs	r1, r6
 8000b3e:	464b      	mov	r3, r9
 8000b40:	4061      	eors	r1, r4
 8000b42:	b2c9      	uxtb	r1, r1
 8000b44:	4313      	orrs	r3, r2
 8000b46:	2b0f      	cmp	r3, #15
 8000b48:	d834      	bhi.n	8000bb4 <__aeabi_fdiv+0x160>
 8000b4a:	484d      	ldr	r0, [pc, #308]	; (8000c80 <__aeabi_fdiv+0x22c>)
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	58c3      	ldr	r3, [r0, r3]
 8000b50:	469f      	mov	pc, r3
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d113      	bne.n	8000b7e <__aeabi_fdiv+0x12a>
 8000b56:	2304      	movs	r3, #4
 8000b58:	4699      	mov	r9, r3
 8000b5a:	3b03      	subs	r3, #3
 8000b5c:	2700      	movs	r7, #0
 8000b5e:	469a      	mov	sl, r3
 8000b60:	e791      	b.n	8000a86 <__aeabi_fdiv+0x32>
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d105      	bne.n	8000b72 <__aeabi_fdiv+0x11e>
 8000b66:	2308      	movs	r3, #8
 8000b68:	4699      	mov	r9, r3
 8000b6a:	3b06      	subs	r3, #6
 8000b6c:	27ff      	movs	r7, #255	; 0xff
 8000b6e:	469a      	mov	sl, r3
 8000b70:	e789      	b.n	8000a86 <__aeabi_fdiv+0x32>
 8000b72:	230c      	movs	r3, #12
 8000b74:	4699      	mov	r9, r3
 8000b76:	3b09      	subs	r3, #9
 8000b78:	27ff      	movs	r7, #255	; 0xff
 8000b7a:	469a      	mov	sl, r3
 8000b7c:	e783      	b.n	8000a86 <__aeabi_fdiv+0x32>
 8000b7e:	0028      	movs	r0, r5
 8000b80:	f002 f8ec 	bl	8002d5c <__clzsi2>
 8000b84:	2776      	movs	r7, #118	; 0x76
 8000b86:	1f43      	subs	r3, r0, #5
 8000b88:	409d      	lsls	r5, r3
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	427f      	negs	r7, r7
 8000b8e:	4699      	mov	r9, r3
 8000b90:	469a      	mov	sl, r3
 8000b92:	1a3f      	subs	r7, r7, r0
 8000b94:	e777      	b.n	8000a86 <__aeabi_fdiv+0x32>
 8000b96:	4640      	mov	r0, r8
 8000b98:	f002 f8e0 	bl	8002d5c <__clzsi2>
 8000b9c:	4642      	mov	r2, r8
 8000b9e:	1f43      	subs	r3, r0, #5
 8000ba0:	409a      	lsls	r2, r3
 8000ba2:	2376      	movs	r3, #118	; 0x76
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	4690      	mov	r8, r2
 8000ba8:	1a1b      	subs	r3, r3, r0
 8000baa:	2200      	movs	r2, #0
 8000bac:	e77d      	b.n	8000aaa <__aeabi_fdiv+0x56>
 8000bae:	23ff      	movs	r3, #255	; 0xff
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	e77a      	b.n	8000aaa <__aeabi_fdiv+0x56>
 8000bb4:	000e      	movs	r6, r1
 8000bb6:	20ff      	movs	r0, #255	; 0xff
 8000bb8:	2500      	movs	r5, #0
 8000bba:	e7ac      	b.n	8000b16 <__aeabi_fdiv+0xc2>
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	1ac0      	subs	r0, r0, r3
 8000bc0:	281b      	cmp	r0, #27
 8000bc2:	dca6      	bgt.n	8000b12 <__aeabi_fdiv+0xbe>
 8000bc4:	379e      	adds	r7, #158	; 0x9e
 8000bc6:	002a      	movs	r2, r5
 8000bc8:	40bd      	lsls	r5, r7
 8000bca:	40c2      	lsrs	r2, r0
 8000bcc:	1e6b      	subs	r3, r5, #1
 8000bce:	419d      	sbcs	r5, r3
 8000bd0:	4315      	orrs	r5, r2
 8000bd2:	076b      	lsls	r3, r5, #29
 8000bd4:	d004      	beq.n	8000be0 <__aeabi_fdiv+0x18c>
 8000bd6:	230f      	movs	r3, #15
 8000bd8:	402b      	ands	r3, r5
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	d000      	beq.n	8000be0 <__aeabi_fdiv+0x18c>
 8000bde:	3504      	adds	r5, #4
 8000be0:	016b      	lsls	r3, r5, #5
 8000be2:	d544      	bpl.n	8000c6e <__aeabi_fdiv+0x21a>
 8000be4:	2001      	movs	r0, #1
 8000be6:	2500      	movs	r5, #0
 8000be8:	e795      	b.n	8000b16 <__aeabi_fdiv+0xc2>
 8000bea:	20ff      	movs	r0, #255	; 0xff
 8000bec:	2500      	movs	r5, #0
 8000bee:	e792      	b.n	8000b16 <__aeabi_fdiv+0xc2>
 8000bf0:	2580      	movs	r5, #128	; 0x80
 8000bf2:	2600      	movs	r6, #0
 8000bf4:	20ff      	movs	r0, #255	; 0xff
 8000bf6:	03ed      	lsls	r5, r5, #15
 8000bf8:	e78d      	b.n	8000b16 <__aeabi_fdiv+0xc2>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	4698      	mov	r8, r3
 8000bfe:	2080      	movs	r0, #128	; 0x80
 8000c00:	03c0      	lsls	r0, r0, #15
 8000c02:	4205      	tst	r5, r0
 8000c04:	d009      	beq.n	8000c1a <__aeabi_fdiv+0x1c6>
 8000c06:	4643      	mov	r3, r8
 8000c08:	4203      	tst	r3, r0
 8000c0a:	d106      	bne.n	8000c1a <__aeabi_fdiv+0x1c6>
 8000c0c:	4645      	mov	r5, r8
 8000c0e:	4305      	orrs	r5, r0
 8000c10:	026d      	lsls	r5, r5, #9
 8000c12:	0026      	movs	r6, r4
 8000c14:	20ff      	movs	r0, #255	; 0xff
 8000c16:	0a6d      	lsrs	r5, r5, #9
 8000c18:	e77d      	b.n	8000b16 <__aeabi_fdiv+0xc2>
 8000c1a:	2080      	movs	r0, #128	; 0x80
 8000c1c:	03c0      	lsls	r0, r0, #15
 8000c1e:	4305      	orrs	r5, r0
 8000c20:	026d      	lsls	r5, r5, #9
 8000c22:	20ff      	movs	r0, #255	; 0xff
 8000c24:	0a6d      	lsrs	r5, r5, #9
 8000c26:	e776      	b.n	8000b16 <__aeabi_fdiv+0xc2>
 8000c28:	4642      	mov	r2, r8
 8000c2a:	016b      	lsls	r3, r5, #5
 8000c2c:	0150      	lsls	r0, r2, #5
 8000c2e:	4283      	cmp	r3, r0
 8000c30:	d219      	bcs.n	8000c66 <__aeabi_fdiv+0x212>
 8000c32:	221b      	movs	r2, #27
 8000c34:	2500      	movs	r5, #0
 8000c36:	3f01      	subs	r7, #1
 8000c38:	2601      	movs	r6, #1
 8000c3a:	001c      	movs	r4, r3
 8000c3c:	006d      	lsls	r5, r5, #1
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	2c00      	cmp	r4, #0
 8000c42:	db01      	blt.n	8000c48 <__aeabi_fdiv+0x1f4>
 8000c44:	4298      	cmp	r0, r3
 8000c46:	d801      	bhi.n	8000c4c <__aeabi_fdiv+0x1f8>
 8000c48:	1a1b      	subs	r3, r3, r0
 8000c4a:	4335      	orrs	r5, r6
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	d1f3      	bne.n	8000c3a <__aeabi_fdiv+0x1e6>
 8000c52:	1e5a      	subs	r2, r3, #1
 8000c54:	4193      	sbcs	r3, r2
 8000c56:	431d      	orrs	r5, r3
 8000c58:	003b      	movs	r3, r7
 8000c5a:	337f      	adds	r3, #127	; 0x7f
 8000c5c:	000e      	movs	r6, r1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	dd00      	ble.n	8000c64 <__aeabi_fdiv+0x210>
 8000c62:	e741      	b.n	8000ae8 <__aeabi_fdiv+0x94>
 8000c64:	e7aa      	b.n	8000bbc <__aeabi_fdiv+0x168>
 8000c66:	221a      	movs	r2, #26
 8000c68:	2501      	movs	r5, #1
 8000c6a:	1a1b      	subs	r3, r3, r0
 8000c6c:	e7e4      	b.n	8000c38 <__aeabi_fdiv+0x1e4>
 8000c6e:	01ad      	lsls	r5, r5, #6
 8000c70:	2000      	movs	r0, #0
 8000c72:	0a6d      	lsrs	r5, r5, #9
 8000c74:	e74f      	b.n	8000b16 <__aeabi_fdiv+0xc2>
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	0800bbfc 	.word	0x0800bbfc
 8000c7c:	f7ffffff 	.word	0xf7ffffff
 8000c80:	0800bc3c 	.word	0x0800bc3c

08000c84 <__aeabi_fmul>:
 8000c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c86:	464f      	mov	r7, r9
 8000c88:	4646      	mov	r6, r8
 8000c8a:	46d6      	mov	lr, sl
 8000c8c:	0244      	lsls	r4, r0, #9
 8000c8e:	0045      	lsls	r5, r0, #1
 8000c90:	b5c0      	push	{r6, r7, lr}
 8000c92:	0a64      	lsrs	r4, r4, #9
 8000c94:	1c0f      	adds	r7, r1, #0
 8000c96:	0e2d      	lsrs	r5, r5, #24
 8000c98:	0fc6      	lsrs	r6, r0, #31
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_fmul+0x1c>
 8000c9e:	e08d      	b.n	8000dbc <__aeabi_fmul+0x138>
 8000ca0:	2dff      	cmp	r5, #255	; 0xff
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_fmul+0x22>
 8000ca4:	e092      	b.n	8000dcc <__aeabi_fmul+0x148>
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	2080      	movs	r0, #128	; 0x80
 8000caa:	4699      	mov	r9, r3
 8000cac:	469a      	mov	sl, r3
 8000cae:	00e4      	lsls	r4, r4, #3
 8000cb0:	04c0      	lsls	r0, r0, #19
 8000cb2:	4304      	orrs	r4, r0
 8000cb4:	3d7f      	subs	r5, #127	; 0x7f
 8000cb6:	0278      	lsls	r0, r7, #9
 8000cb8:	0a43      	lsrs	r3, r0, #9
 8000cba:	4698      	mov	r8, r3
 8000cbc:	007b      	lsls	r3, r7, #1
 8000cbe:	0e1b      	lsrs	r3, r3, #24
 8000cc0:	0fff      	lsrs	r7, r7, #31
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_fmul+0x44>
 8000cc6:	e070      	b.n	8000daa <__aeabi_fmul+0x126>
 8000cc8:	2bff      	cmp	r3, #255	; 0xff
 8000cca:	d100      	bne.n	8000cce <__aeabi_fmul+0x4a>
 8000ccc:	e086      	b.n	8000ddc <__aeabi_fmul+0x158>
 8000cce:	4642      	mov	r2, r8
 8000cd0:	00d0      	lsls	r0, r2, #3
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	3b7f      	subs	r3, #127	; 0x7f
 8000cd6:	18ed      	adds	r5, r5, r3
 8000cd8:	2300      	movs	r3, #0
 8000cda:	04d2      	lsls	r2, r2, #19
 8000cdc:	4302      	orrs	r2, r0
 8000cde:	4690      	mov	r8, r2
 8000ce0:	469c      	mov	ip, r3
 8000ce2:	0031      	movs	r1, r6
 8000ce4:	464b      	mov	r3, r9
 8000ce6:	4079      	eors	r1, r7
 8000ce8:	1c68      	adds	r0, r5, #1
 8000cea:	2b0f      	cmp	r3, #15
 8000cec:	d81c      	bhi.n	8000d28 <__aeabi_fmul+0xa4>
 8000cee:	4a76      	ldr	r2, [pc, #472]	; (8000ec8 <__aeabi_fmul+0x244>)
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	58d3      	ldr	r3, [r2, r3]
 8000cf4:	469f      	mov	pc, r3
 8000cf6:	0039      	movs	r1, r7
 8000cf8:	4644      	mov	r4, r8
 8000cfa:	46e2      	mov	sl, ip
 8000cfc:	4653      	mov	r3, sl
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d00f      	beq.n	8000d22 <__aeabi_fmul+0x9e>
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d100      	bne.n	8000d08 <__aeabi_fmul+0x84>
 8000d06:	e0d7      	b.n	8000eb8 <__aeabi_fmul+0x234>
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d137      	bne.n	8000d7c <__aeabi_fmul+0xf8>
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	2400      	movs	r4, #0
 8000d10:	05c0      	lsls	r0, r0, #23
 8000d12:	4320      	orrs	r0, r4
 8000d14:	07c9      	lsls	r1, r1, #31
 8000d16:	4308      	orrs	r0, r1
 8000d18:	bce0      	pop	{r5, r6, r7}
 8000d1a:	46ba      	mov	sl, r7
 8000d1c:	46b1      	mov	r9, r6
 8000d1e:	46a8      	mov	r8, r5
 8000d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d22:	20ff      	movs	r0, #255	; 0xff
 8000d24:	2400      	movs	r4, #0
 8000d26:	e7f3      	b.n	8000d10 <__aeabi_fmul+0x8c>
 8000d28:	0c26      	lsrs	r6, r4, #16
 8000d2a:	0424      	lsls	r4, r4, #16
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	4644      	mov	r4, r8
 8000d30:	0424      	lsls	r4, r4, #16
 8000d32:	0c24      	lsrs	r4, r4, #16
 8000d34:	4643      	mov	r3, r8
 8000d36:	0027      	movs	r7, r4
 8000d38:	0c1b      	lsrs	r3, r3, #16
 8000d3a:	4357      	muls	r7, r2
 8000d3c:	4374      	muls	r4, r6
 8000d3e:	435a      	muls	r2, r3
 8000d40:	435e      	muls	r6, r3
 8000d42:	1912      	adds	r2, r2, r4
 8000d44:	0c3b      	lsrs	r3, r7, #16
 8000d46:	189b      	adds	r3, r3, r2
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d903      	bls.n	8000d54 <__aeabi_fmul+0xd0>
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	0252      	lsls	r2, r2, #9
 8000d50:	4694      	mov	ip, r2
 8000d52:	4466      	add	r6, ip
 8000d54:	043f      	lsls	r7, r7, #16
 8000d56:	041a      	lsls	r2, r3, #16
 8000d58:	0c3f      	lsrs	r7, r7, #16
 8000d5a:	19d2      	adds	r2, r2, r7
 8000d5c:	0194      	lsls	r4, r2, #6
 8000d5e:	1e67      	subs	r7, r4, #1
 8000d60:	41bc      	sbcs	r4, r7
 8000d62:	0c1b      	lsrs	r3, r3, #16
 8000d64:	0e92      	lsrs	r2, r2, #26
 8000d66:	199b      	adds	r3, r3, r6
 8000d68:	4314      	orrs	r4, r2
 8000d6a:	019b      	lsls	r3, r3, #6
 8000d6c:	431c      	orrs	r4, r3
 8000d6e:	011b      	lsls	r3, r3, #4
 8000d70:	d400      	bmi.n	8000d74 <__aeabi_fmul+0xf0>
 8000d72:	e09b      	b.n	8000eac <__aeabi_fmul+0x228>
 8000d74:	2301      	movs	r3, #1
 8000d76:	0862      	lsrs	r2, r4, #1
 8000d78:	401c      	ands	r4, r3
 8000d7a:	4314      	orrs	r4, r2
 8000d7c:	0002      	movs	r2, r0
 8000d7e:	327f      	adds	r2, #127	; 0x7f
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	dd64      	ble.n	8000e4e <__aeabi_fmul+0x1ca>
 8000d84:	0763      	lsls	r3, r4, #29
 8000d86:	d004      	beq.n	8000d92 <__aeabi_fmul+0x10e>
 8000d88:	230f      	movs	r3, #15
 8000d8a:	4023      	ands	r3, r4
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d000      	beq.n	8000d92 <__aeabi_fmul+0x10e>
 8000d90:	3404      	adds	r4, #4
 8000d92:	0123      	lsls	r3, r4, #4
 8000d94:	d503      	bpl.n	8000d9e <__aeabi_fmul+0x11a>
 8000d96:	0002      	movs	r2, r0
 8000d98:	4b4c      	ldr	r3, [pc, #304]	; (8000ecc <__aeabi_fmul+0x248>)
 8000d9a:	3280      	adds	r2, #128	; 0x80
 8000d9c:	401c      	ands	r4, r3
 8000d9e:	2afe      	cmp	r2, #254	; 0xfe
 8000da0:	dcbf      	bgt.n	8000d22 <__aeabi_fmul+0x9e>
 8000da2:	01a4      	lsls	r4, r4, #6
 8000da4:	0a64      	lsrs	r4, r4, #9
 8000da6:	b2d0      	uxtb	r0, r2
 8000da8:	e7b2      	b.n	8000d10 <__aeabi_fmul+0x8c>
 8000daa:	4643      	mov	r3, r8
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d13d      	bne.n	8000e2c <__aeabi_fmul+0x1a8>
 8000db0:	464a      	mov	r2, r9
 8000db2:	3301      	adds	r3, #1
 8000db4:	431a      	orrs	r2, r3
 8000db6:	4691      	mov	r9, r2
 8000db8:	469c      	mov	ip, r3
 8000dba:	e792      	b.n	8000ce2 <__aeabi_fmul+0x5e>
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d129      	bne.n	8000e14 <__aeabi_fmul+0x190>
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b03      	subs	r3, #3
 8000dc6:	2500      	movs	r5, #0
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e774      	b.n	8000cb6 <__aeabi_fmul+0x32>
 8000dcc:	2c00      	cmp	r4, #0
 8000dce:	d11b      	bne.n	8000e08 <__aeabi_fmul+0x184>
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	4699      	mov	r9, r3
 8000dd4:	3b06      	subs	r3, #6
 8000dd6:	25ff      	movs	r5, #255	; 0xff
 8000dd8:	469a      	mov	sl, r3
 8000dda:	e76c      	b.n	8000cb6 <__aeabi_fmul+0x32>
 8000ddc:	4643      	mov	r3, r8
 8000dde:	35ff      	adds	r5, #255	; 0xff
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d10b      	bne.n	8000dfc <__aeabi_fmul+0x178>
 8000de4:	2302      	movs	r3, #2
 8000de6:	464a      	mov	r2, r9
 8000de8:	431a      	orrs	r2, r3
 8000dea:	4691      	mov	r9, r2
 8000dec:	469c      	mov	ip, r3
 8000dee:	e778      	b.n	8000ce2 <__aeabi_fmul+0x5e>
 8000df0:	4653      	mov	r3, sl
 8000df2:	0031      	movs	r1, r6
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d000      	beq.n	8000dfa <__aeabi_fmul+0x176>
 8000df8:	e783      	b.n	8000d02 <__aeabi_fmul+0x7e>
 8000dfa:	e792      	b.n	8000d22 <__aeabi_fmul+0x9e>
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	464a      	mov	r2, r9
 8000e00:	431a      	orrs	r2, r3
 8000e02:	4691      	mov	r9, r2
 8000e04:	469c      	mov	ip, r3
 8000e06:	e76c      	b.n	8000ce2 <__aeabi_fmul+0x5e>
 8000e08:	230c      	movs	r3, #12
 8000e0a:	4699      	mov	r9, r3
 8000e0c:	3b09      	subs	r3, #9
 8000e0e:	25ff      	movs	r5, #255	; 0xff
 8000e10:	469a      	mov	sl, r3
 8000e12:	e750      	b.n	8000cb6 <__aeabi_fmul+0x32>
 8000e14:	0020      	movs	r0, r4
 8000e16:	f001 ffa1 	bl	8002d5c <__clzsi2>
 8000e1a:	2576      	movs	r5, #118	; 0x76
 8000e1c:	1f43      	subs	r3, r0, #5
 8000e1e:	409c      	lsls	r4, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	426d      	negs	r5, r5
 8000e24:	4699      	mov	r9, r3
 8000e26:	469a      	mov	sl, r3
 8000e28:	1a2d      	subs	r5, r5, r0
 8000e2a:	e744      	b.n	8000cb6 <__aeabi_fmul+0x32>
 8000e2c:	4640      	mov	r0, r8
 8000e2e:	f001 ff95 	bl	8002d5c <__clzsi2>
 8000e32:	4642      	mov	r2, r8
 8000e34:	1f43      	subs	r3, r0, #5
 8000e36:	409a      	lsls	r2, r3
 8000e38:	2300      	movs	r3, #0
 8000e3a:	1a2d      	subs	r5, r5, r0
 8000e3c:	4690      	mov	r8, r2
 8000e3e:	469c      	mov	ip, r3
 8000e40:	3d76      	subs	r5, #118	; 0x76
 8000e42:	e74e      	b.n	8000ce2 <__aeabi_fmul+0x5e>
 8000e44:	2480      	movs	r4, #128	; 0x80
 8000e46:	2100      	movs	r1, #0
 8000e48:	20ff      	movs	r0, #255	; 0xff
 8000e4a:	03e4      	lsls	r4, r4, #15
 8000e4c:	e760      	b.n	8000d10 <__aeabi_fmul+0x8c>
 8000e4e:	2301      	movs	r3, #1
 8000e50:	1a9b      	subs	r3, r3, r2
 8000e52:	2b1b      	cmp	r3, #27
 8000e54:	dd00      	ble.n	8000e58 <__aeabi_fmul+0x1d4>
 8000e56:	e759      	b.n	8000d0c <__aeabi_fmul+0x88>
 8000e58:	0022      	movs	r2, r4
 8000e5a:	309e      	adds	r0, #158	; 0x9e
 8000e5c:	40da      	lsrs	r2, r3
 8000e5e:	4084      	lsls	r4, r0
 8000e60:	0013      	movs	r3, r2
 8000e62:	1e62      	subs	r2, r4, #1
 8000e64:	4194      	sbcs	r4, r2
 8000e66:	431c      	orrs	r4, r3
 8000e68:	0763      	lsls	r3, r4, #29
 8000e6a:	d004      	beq.n	8000e76 <__aeabi_fmul+0x1f2>
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	4023      	ands	r3, r4
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d000      	beq.n	8000e76 <__aeabi_fmul+0x1f2>
 8000e74:	3404      	adds	r4, #4
 8000e76:	0163      	lsls	r3, r4, #5
 8000e78:	d51a      	bpl.n	8000eb0 <__aeabi_fmul+0x22c>
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	2400      	movs	r4, #0
 8000e7e:	e747      	b.n	8000d10 <__aeabi_fmul+0x8c>
 8000e80:	2080      	movs	r0, #128	; 0x80
 8000e82:	03c0      	lsls	r0, r0, #15
 8000e84:	4204      	tst	r4, r0
 8000e86:	d009      	beq.n	8000e9c <__aeabi_fmul+0x218>
 8000e88:	4643      	mov	r3, r8
 8000e8a:	4203      	tst	r3, r0
 8000e8c:	d106      	bne.n	8000e9c <__aeabi_fmul+0x218>
 8000e8e:	4644      	mov	r4, r8
 8000e90:	4304      	orrs	r4, r0
 8000e92:	0264      	lsls	r4, r4, #9
 8000e94:	0039      	movs	r1, r7
 8000e96:	20ff      	movs	r0, #255	; 0xff
 8000e98:	0a64      	lsrs	r4, r4, #9
 8000e9a:	e739      	b.n	8000d10 <__aeabi_fmul+0x8c>
 8000e9c:	2080      	movs	r0, #128	; 0x80
 8000e9e:	03c0      	lsls	r0, r0, #15
 8000ea0:	4304      	orrs	r4, r0
 8000ea2:	0264      	lsls	r4, r4, #9
 8000ea4:	0031      	movs	r1, r6
 8000ea6:	20ff      	movs	r0, #255	; 0xff
 8000ea8:	0a64      	lsrs	r4, r4, #9
 8000eaa:	e731      	b.n	8000d10 <__aeabi_fmul+0x8c>
 8000eac:	0028      	movs	r0, r5
 8000eae:	e765      	b.n	8000d7c <__aeabi_fmul+0xf8>
 8000eb0:	01a4      	lsls	r4, r4, #6
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	0a64      	lsrs	r4, r4, #9
 8000eb6:	e72b      	b.n	8000d10 <__aeabi_fmul+0x8c>
 8000eb8:	2080      	movs	r0, #128	; 0x80
 8000eba:	03c0      	lsls	r0, r0, #15
 8000ebc:	4304      	orrs	r4, r0
 8000ebe:	0264      	lsls	r4, r4, #9
 8000ec0:	20ff      	movs	r0, #255	; 0xff
 8000ec2:	0a64      	lsrs	r4, r4, #9
 8000ec4:	e724      	b.n	8000d10 <__aeabi_fmul+0x8c>
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	0800bc7c 	.word	0x0800bc7c
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__aeabi_i2f>:
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	d013      	beq.n	8000efe <__aeabi_i2f+0x2e>
 8000ed6:	17c3      	asrs	r3, r0, #31
 8000ed8:	18c6      	adds	r6, r0, r3
 8000eda:	405e      	eors	r6, r3
 8000edc:	0fc4      	lsrs	r4, r0, #31
 8000ede:	0030      	movs	r0, r6
 8000ee0:	f001 ff3c 	bl	8002d5c <__clzsi2>
 8000ee4:	239e      	movs	r3, #158	; 0x9e
 8000ee6:	0005      	movs	r5, r0
 8000ee8:	1a1b      	subs	r3, r3, r0
 8000eea:	2b96      	cmp	r3, #150	; 0x96
 8000eec:	dc0f      	bgt.n	8000f0e <__aeabi_i2f+0x3e>
 8000eee:	2808      	cmp	r0, #8
 8000ef0:	dd01      	ble.n	8000ef6 <__aeabi_i2f+0x26>
 8000ef2:	3d08      	subs	r5, #8
 8000ef4:	40ae      	lsls	r6, r5
 8000ef6:	0276      	lsls	r6, r6, #9
 8000ef8:	0a76      	lsrs	r6, r6, #9
 8000efa:	b2d8      	uxtb	r0, r3
 8000efc:	e002      	b.n	8000f04 <__aeabi_i2f+0x34>
 8000efe:	2400      	movs	r4, #0
 8000f00:	2000      	movs	r0, #0
 8000f02:	2600      	movs	r6, #0
 8000f04:	05c0      	lsls	r0, r0, #23
 8000f06:	4330      	orrs	r0, r6
 8000f08:	07e4      	lsls	r4, r4, #31
 8000f0a:	4320      	orrs	r0, r4
 8000f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f0e:	2b99      	cmp	r3, #153	; 0x99
 8000f10:	dd0c      	ble.n	8000f2c <__aeabi_i2f+0x5c>
 8000f12:	2205      	movs	r2, #5
 8000f14:	0031      	movs	r1, r6
 8000f16:	1a12      	subs	r2, r2, r0
 8000f18:	40d1      	lsrs	r1, r2
 8000f1a:	000a      	movs	r2, r1
 8000f1c:	0001      	movs	r1, r0
 8000f1e:	0030      	movs	r0, r6
 8000f20:	311b      	adds	r1, #27
 8000f22:	4088      	lsls	r0, r1
 8000f24:	1e41      	subs	r1, r0, #1
 8000f26:	4188      	sbcs	r0, r1
 8000f28:	4302      	orrs	r2, r0
 8000f2a:	0016      	movs	r6, r2
 8000f2c:	2d05      	cmp	r5, #5
 8000f2e:	dc12      	bgt.n	8000f56 <__aeabi_i2f+0x86>
 8000f30:	0031      	movs	r1, r6
 8000f32:	4f0d      	ldr	r7, [pc, #52]	; (8000f68 <__aeabi_i2f+0x98>)
 8000f34:	4039      	ands	r1, r7
 8000f36:	0772      	lsls	r2, r6, #29
 8000f38:	d009      	beq.n	8000f4e <__aeabi_i2f+0x7e>
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	4030      	ands	r0, r6
 8000f3e:	2804      	cmp	r0, #4
 8000f40:	d005      	beq.n	8000f4e <__aeabi_i2f+0x7e>
 8000f42:	3104      	adds	r1, #4
 8000f44:	014a      	lsls	r2, r1, #5
 8000f46:	d502      	bpl.n	8000f4e <__aeabi_i2f+0x7e>
 8000f48:	239f      	movs	r3, #159	; 0x9f
 8000f4a:	4039      	ands	r1, r7
 8000f4c:	1b5b      	subs	r3, r3, r5
 8000f4e:	0189      	lsls	r1, r1, #6
 8000f50:	0a4e      	lsrs	r6, r1, #9
 8000f52:	b2d8      	uxtb	r0, r3
 8000f54:	e7d6      	b.n	8000f04 <__aeabi_i2f+0x34>
 8000f56:	1f6a      	subs	r2, r5, #5
 8000f58:	4096      	lsls	r6, r2
 8000f5a:	0031      	movs	r1, r6
 8000f5c:	4f02      	ldr	r7, [pc, #8]	; (8000f68 <__aeabi_i2f+0x98>)
 8000f5e:	4039      	ands	r1, r7
 8000f60:	0772      	lsls	r2, r6, #29
 8000f62:	d0f4      	beq.n	8000f4e <__aeabi_i2f+0x7e>
 8000f64:	e7e9      	b.n	8000f3a <__aeabi_i2f+0x6a>
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	fbffffff 	.word	0xfbffffff

08000f6c <__aeabi_ui2f>:
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	1e05      	subs	r5, r0, #0
 8000f70:	d00e      	beq.n	8000f90 <__aeabi_ui2f+0x24>
 8000f72:	f001 fef3 	bl	8002d5c <__clzsi2>
 8000f76:	239e      	movs	r3, #158	; 0x9e
 8000f78:	0004      	movs	r4, r0
 8000f7a:	1a1b      	subs	r3, r3, r0
 8000f7c:	2b96      	cmp	r3, #150	; 0x96
 8000f7e:	dc0c      	bgt.n	8000f9a <__aeabi_ui2f+0x2e>
 8000f80:	2808      	cmp	r0, #8
 8000f82:	dd01      	ble.n	8000f88 <__aeabi_ui2f+0x1c>
 8000f84:	3c08      	subs	r4, #8
 8000f86:	40a5      	lsls	r5, r4
 8000f88:	026d      	lsls	r5, r5, #9
 8000f8a:	0a6d      	lsrs	r5, r5, #9
 8000f8c:	b2d8      	uxtb	r0, r3
 8000f8e:	e001      	b.n	8000f94 <__aeabi_ui2f+0x28>
 8000f90:	2000      	movs	r0, #0
 8000f92:	2500      	movs	r5, #0
 8000f94:	05c0      	lsls	r0, r0, #23
 8000f96:	4328      	orrs	r0, r5
 8000f98:	bd70      	pop	{r4, r5, r6, pc}
 8000f9a:	2b99      	cmp	r3, #153	; 0x99
 8000f9c:	dd09      	ble.n	8000fb2 <__aeabi_ui2f+0x46>
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	0029      	movs	r1, r5
 8000fa2:	321b      	adds	r2, #27
 8000fa4:	4091      	lsls	r1, r2
 8000fa6:	1e4a      	subs	r2, r1, #1
 8000fa8:	4191      	sbcs	r1, r2
 8000faa:	2205      	movs	r2, #5
 8000fac:	1a12      	subs	r2, r2, r0
 8000fae:	40d5      	lsrs	r5, r2
 8000fb0:	430d      	orrs	r5, r1
 8000fb2:	2c05      	cmp	r4, #5
 8000fb4:	dc12      	bgt.n	8000fdc <__aeabi_ui2f+0x70>
 8000fb6:	0029      	movs	r1, r5
 8000fb8:	4e0c      	ldr	r6, [pc, #48]	; (8000fec <__aeabi_ui2f+0x80>)
 8000fba:	4031      	ands	r1, r6
 8000fbc:	076a      	lsls	r2, r5, #29
 8000fbe:	d009      	beq.n	8000fd4 <__aeabi_ui2f+0x68>
 8000fc0:	200f      	movs	r0, #15
 8000fc2:	4028      	ands	r0, r5
 8000fc4:	2804      	cmp	r0, #4
 8000fc6:	d005      	beq.n	8000fd4 <__aeabi_ui2f+0x68>
 8000fc8:	3104      	adds	r1, #4
 8000fca:	014a      	lsls	r2, r1, #5
 8000fcc:	d502      	bpl.n	8000fd4 <__aeabi_ui2f+0x68>
 8000fce:	239f      	movs	r3, #159	; 0x9f
 8000fd0:	4031      	ands	r1, r6
 8000fd2:	1b1b      	subs	r3, r3, r4
 8000fd4:	0189      	lsls	r1, r1, #6
 8000fd6:	0a4d      	lsrs	r5, r1, #9
 8000fd8:	b2d8      	uxtb	r0, r3
 8000fda:	e7db      	b.n	8000f94 <__aeabi_ui2f+0x28>
 8000fdc:	1f62      	subs	r2, r4, #5
 8000fde:	4095      	lsls	r5, r2
 8000fe0:	0029      	movs	r1, r5
 8000fe2:	4e02      	ldr	r6, [pc, #8]	; (8000fec <__aeabi_ui2f+0x80>)
 8000fe4:	4031      	ands	r1, r6
 8000fe6:	076a      	lsls	r2, r5, #29
 8000fe8:	d0f4      	beq.n	8000fd4 <__aeabi_ui2f+0x68>
 8000fea:	e7e9      	b.n	8000fc0 <__aeabi_ui2f+0x54>
 8000fec:	fbffffff 	.word	0xfbffffff

08000ff0 <__aeabi_dadd>:
 8000ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff2:	464f      	mov	r7, r9
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	000d      	movs	r5, r1
 8000ffa:	0004      	movs	r4, r0
 8000ffc:	b5c0      	push	{r6, r7, lr}
 8000ffe:	001f      	movs	r7, r3
 8001000:	0011      	movs	r1, r2
 8001002:	0328      	lsls	r0, r5, #12
 8001004:	0f62      	lsrs	r2, r4, #29
 8001006:	0a40      	lsrs	r0, r0, #9
 8001008:	4310      	orrs	r0, r2
 800100a:	007a      	lsls	r2, r7, #1
 800100c:	0d52      	lsrs	r2, r2, #21
 800100e:	00e3      	lsls	r3, r4, #3
 8001010:	033c      	lsls	r4, r7, #12
 8001012:	4691      	mov	r9, r2
 8001014:	0a64      	lsrs	r4, r4, #9
 8001016:	0ffa      	lsrs	r2, r7, #31
 8001018:	0f4f      	lsrs	r7, r1, #29
 800101a:	006e      	lsls	r6, r5, #1
 800101c:	4327      	orrs	r7, r4
 800101e:	4692      	mov	sl, r2
 8001020:	46b8      	mov	r8, r7
 8001022:	0d76      	lsrs	r6, r6, #21
 8001024:	0fed      	lsrs	r5, r5, #31
 8001026:	00c9      	lsls	r1, r1, #3
 8001028:	4295      	cmp	r5, r2
 800102a:	d100      	bne.n	800102e <__aeabi_dadd+0x3e>
 800102c:	e099      	b.n	8001162 <__aeabi_dadd+0x172>
 800102e:	464c      	mov	r4, r9
 8001030:	1b34      	subs	r4, r6, r4
 8001032:	46a4      	mov	ip, r4
 8001034:	2c00      	cmp	r4, #0
 8001036:	dc00      	bgt.n	800103a <__aeabi_dadd+0x4a>
 8001038:	e07c      	b.n	8001134 <__aeabi_dadd+0x144>
 800103a:	464a      	mov	r2, r9
 800103c:	2a00      	cmp	r2, #0
 800103e:	d100      	bne.n	8001042 <__aeabi_dadd+0x52>
 8001040:	e0b8      	b.n	80011b4 <__aeabi_dadd+0x1c4>
 8001042:	4ac5      	ldr	r2, [pc, #788]	; (8001358 <__aeabi_dadd+0x368>)
 8001044:	4296      	cmp	r6, r2
 8001046:	d100      	bne.n	800104a <__aeabi_dadd+0x5a>
 8001048:	e11c      	b.n	8001284 <__aeabi_dadd+0x294>
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	003c      	movs	r4, r7
 800104e:	0412      	lsls	r2, r2, #16
 8001050:	4314      	orrs	r4, r2
 8001052:	46a0      	mov	r8, r4
 8001054:	4662      	mov	r2, ip
 8001056:	2a38      	cmp	r2, #56	; 0x38
 8001058:	dd00      	ble.n	800105c <__aeabi_dadd+0x6c>
 800105a:	e161      	b.n	8001320 <__aeabi_dadd+0x330>
 800105c:	2a1f      	cmp	r2, #31
 800105e:	dd00      	ble.n	8001062 <__aeabi_dadd+0x72>
 8001060:	e1cc      	b.n	80013fc <__aeabi_dadd+0x40c>
 8001062:	4664      	mov	r4, ip
 8001064:	2220      	movs	r2, #32
 8001066:	1b12      	subs	r2, r2, r4
 8001068:	4644      	mov	r4, r8
 800106a:	4094      	lsls	r4, r2
 800106c:	000f      	movs	r7, r1
 800106e:	46a1      	mov	r9, r4
 8001070:	4664      	mov	r4, ip
 8001072:	4091      	lsls	r1, r2
 8001074:	40e7      	lsrs	r7, r4
 8001076:	464c      	mov	r4, r9
 8001078:	1e4a      	subs	r2, r1, #1
 800107a:	4191      	sbcs	r1, r2
 800107c:	433c      	orrs	r4, r7
 800107e:	4642      	mov	r2, r8
 8001080:	4321      	orrs	r1, r4
 8001082:	4664      	mov	r4, ip
 8001084:	40e2      	lsrs	r2, r4
 8001086:	1a80      	subs	r0, r0, r2
 8001088:	1a5c      	subs	r4, r3, r1
 800108a:	42a3      	cmp	r3, r4
 800108c:	419b      	sbcs	r3, r3
 800108e:	425f      	negs	r7, r3
 8001090:	1bc7      	subs	r7, r0, r7
 8001092:	023b      	lsls	r3, r7, #8
 8001094:	d400      	bmi.n	8001098 <__aeabi_dadd+0xa8>
 8001096:	e0d0      	b.n	800123a <__aeabi_dadd+0x24a>
 8001098:	027f      	lsls	r7, r7, #9
 800109a:	0a7f      	lsrs	r7, r7, #9
 800109c:	2f00      	cmp	r7, #0
 800109e:	d100      	bne.n	80010a2 <__aeabi_dadd+0xb2>
 80010a0:	e0ff      	b.n	80012a2 <__aeabi_dadd+0x2b2>
 80010a2:	0038      	movs	r0, r7
 80010a4:	f001 fe5a 	bl	8002d5c <__clzsi2>
 80010a8:	0001      	movs	r1, r0
 80010aa:	3908      	subs	r1, #8
 80010ac:	2320      	movs	r3, #32
 80010ae:	0022      	movs	r2, r4
 80010b0:	1a5b      	subs	r3, r3, r1
 80010b2:	408f      	lsls	r7, r1
 80010b4:	40da      	lsrs	r2, r3
 80010b6:	408c      	lsls	r4, r1
 80010b8:	4317      	orrs	r7, r2
 80010ba:	42b1      	cmp	r1, r6
 80010bc:	da00      	bge.n	80010c0 <__aeabi_dadd+0xd0>
 80010be:	e0ff      	b.n	80012c0 <__aeabi_dadd+0x2d0>
 80010c0:	1b89      	subs	r1, r1, r6
 80010c2:	1c4b      	adds	r3, r1, #1
 80010c4:	2b1f      	cmp	r3, #31
 80010c6:	dd00      	ble.n	80010ca <__aeabi_dadd+0xda>
 80010c8:	e0a8      	b.n	800121c <__aeabi_dadd+0x22c>
 80010ca:	2220      	movs	r2, #32
 80010cc:	0039      	movs	r1, r7
 80010ce:	1ad2      	subs	r2, r2, r3
 80010d0:	0020      	movs	r0, r4
 80010d2:	4094      	lsls	r4, r2
 80010d4:	4091      	lsls	r1, r2
 80010d6:	40d8      	lsrs	r0, r3
 80010d8:	1e62      	subs	r2, r4, #1
 80010da:	4194      	sbcs	r4, r2
 80010dc:	40df      	lsrs	r7, r3
 80010de:	2600      	movs	r6, #0
 80010e0:	4301      	orrs	r1, r0
 80010e2:	430c      	orrs	r4, r1
 80010e4:	0763      	lsls	r3, r4, #29
 80010e6:	d009      	beq.n	80010fc <__aeabi_dadd+0x10c>
 80010e8:	230f      	movs	r3, #15
 80010ea:	4023      	ands	r3, r4
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d005      	beq.n	80010fc <__aeabi_dadd+0x10c>
 80010f0:	1d23      	adds	r3, r4, #4
 80010f2:	42a3      	cmp	r3, r4
 80010f4:	41a4      	sbcs	r4, r4
 80010f6:	4264      	negs	r4, r4
 80010f8:	193f      	adds	r7, r7, r4
 80010fa:	001c      	movs	r4, r3
 80010fc:	023b      	lsls	r3, r7, #8
 80010fe:	d400      	bmi.n	8001102 <__aeabi_dadd+0x112>
 8001100:	e09e      	b.n	8001240 <__aeabi_dadd+0x250>
 8001102:	4b95      	ldr	r3, [pc, #596]	; (8001358 <__aeabi_dadd+0x368>)
 8001104:	3601      	adds	r6, #1
 8001106:	429e      	cmp	r6, r3
 8001108:	d100      	bne.n	800110c <__aeabi_dadd+0x11c>
 800110a:	e0b7      	b.n	800127c <__aeabi_dadd+0x28c>
 800110c:	4a93      	ldr	r2, [pc, #588]	; (800135c <__aeabi_dadd+0x36c>)
 800110e:	08e4      	lsrs	r4, r4, #3
 8001110:	4017      	ands	r7, r2
 8001112:	077b      	lsls	r3, r7, #29
 8001114:	0571      	lsls	r1, r6, #21
 8001116:	027f      	lsls	r7, r7, #9
 8001118:	4323      	orrs	r3, r4
 800111a:	0b3f      	lsrs	r7, r7, #12
 800111c:	0d4a      	lsrs	r2, r1, #21
 800111e:	0512      	lsls	r2, r2, #20
 8001120:	433a      	orrs	r2, r7
 8001122:	07ed      	lsls	r5, r5, #31
 8001124:	432a      	orrs	r2, r5
 8001126:	0018      	movs	r0, r3
 8001128:	0011      	movs	r1, r2
 800112a:	bce0      	pop	{r5, r6, r7}
 800112c:	46ba      	mov	sl, r7
 800112e:	46b1      	mov	r9, r6
 8001130:	46a8      	mov	r8, r5
 8001132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001134:	2c00      	cmp	r4, #0
 8001136:	d04b      	beq.n	80011d0 <__aeabi_dadd+0x1e0>
 8001138:	464c      	mov	r4, r9
 800113a:	1ba4      	subs	r4, r4, r6
 800113c:	46a4      	mov	ip, r4
 800113e:	2e00      	cmp	r6, #0
 8001140:	d000      	beq.n	8001144 <__aeabi_dadd+0x154>
 8001142:	e123      	b.n	800138c <__aeabi_dadd+0x39c>
 8001144:	0004      	movs	r4, r0
 8001146:	431c      	orrs	r4, r3
 8001148:	d100      	bne.n	800114c <__aeabi_dadd+0x15c>
 800114a:	e1af      	b.n	80014ac <__aeabi_dadd+0x4bc>
 800114c:	4662      	mov	r2, ip
 800114e:	1e54      	subs	r4, r2, #1
 8001150:	2a01      	cmp	r2, #1
 8001152:	d100      	bne.n	8001156 <__aeabi_dadd+0x166>
 8001154:	e215      	b.n	8001582 <__aeabi_dadd+0x592>
 8001156:	4d80      	ldr	r5, [pc, #512]	; (8001358 <__aeabi_dadd+0x368>)
 8001158:	45ac      	cmp	ip, r5
 800115a:	d100      	bne.n	800115e <__aeabi_dadd+0x16e>
 800115c:	e1c8      	b.n	80014f0 <__aeabi_dadd+0x500>
 800115e:	46a4      	mov	ip, r4
 8001160:	e11b      	b.n	800139a <__aeabi_dadd+0x3aa>
 8001162:	464a      	mov	r2, r9
 8001164:	1ab2      	subs	r2, r6, r2
 8001166:	4694      	mov	ip, r2
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_dadd+0x17e>
 800116c:	e0ac      	b.n	80012c8 <__aeabi_dadd+0x2d8>
 800116e:	464a      	mov	r2, r9
 8001170:	2a00      	cmp	r2, #0
 8001172:	d043      	beq.n	80011fc <__aeabi_dadd+0x20c>
 8001174:	4a78      	ldr	r2, [pc, #480]	; (8001358 <__aeabi_dadd+0x368>)
 8001176:	4296      	cmp	r6, r2
 8001178:	d100      	bne.n	800117c <__aeabi_dadd+0x18c>
 800117a:	e1af      	b.n	80014dc <__aeabi_dadd+0x4ec>
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	003c      	movs	r4, r7
 8001180:	0412      	lsls	r2, r2, #16
 8001182:	4314      	orrs	r4, r2
 8001184:	46a0      	mov	r8, r4
 8001186:	4662      	mov	r2, ip
 8001188:	2a38      	cmp	r2, #56	; 0x38
 800118a:	dc67      	bgt.n	800125c <__aeabi_dadd+0x26c>
 800118c:	2a1f      	cmp	r2, #31
 800118e:	dc00      	bgt.n	8001192 <__aeabi_dadd+0x1a2>
 8001190:	e15f      	b.n	8001452 <__aeabi_dadd+0x462>
 8001192:	4647      	mov	r7, r8
 8001194:	3a20      	subs	r2, #32
 8001196:	40d7      	lsrs	r7, r2
 8001198:	4662      	mov	r2, ip
 800119a:	2a20      	cmp	r2, #32
 800119c:	d005      	beq.n	80011aa <__aeabi_dadd+0x1ba>
 800119e:	4664      	mov	r4, ip
 80011a0:	2240      	movs	r2, #64	; 0x40
 80011a2:	1b12      	subs	r2, r2, r4
 80011a4:	4644      	mov	r4, r8
 80011a6:	4094      	lsls	r4, r2
 80011a8:	4321      	orrs	r1, r4
 80011aa:	1e4a      	subs	r2, r1, #1
 80011ac:	4191      	sbcs	r1, r2
 80011ae:	000c      	movs	r4, r1
 80011b0:	433c      	orrs	r4, r7
 80011b2:	e057      	b.n	8001264 <__aeabi_dadd+0x274>
 80011b4:	003a      	movs	r2, r7
 80011b6:	430a      	orrs	r2, r1
 80011b8:	d100      	bne.n	80011bc <__aeabi_dadd+0x1cc>
 80011ba:	e105      	b.n	80013c8 <__aeabi_dadd+0x3d8>
 80011bc:	0022      	movs	r2, r4
 80011be:	3a01      	subs	r2, #1
 80011c0:	2c01      	cmp	r4, #1
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dadd+0x1d6>
 80011c4:	e182      	b.n	80014cc <__aeabi_dadd+0x4dc>
 80011c6:	4c64      	ldr	r4, [pc, #400]	; (8001358 <__aeabi_dadd+0x368>)
 80011c8:	45a4      	cmp	ip, r4
 80011ca:	d05b      	beq.n	8001284 <__aeabi_dadd+0x294>
 80011cc:	4694      	mov	ip, r2
 80011ce:	e741      	b.n	8001054 <__aeabi_dadd+0x64>
 80011d0:	4c63      	ldr	r4, [pc, #396]	; (8001360 <__aeabi_dadd+0x370>)
 80011d2:	1c77      	adds	r7, r6, #1
 80011d4:	4227      	tst	r7, r4
 80011d6:	d000      	beq.n	80011da <__aeabi_dadd+0x1ea>
 80011d8:	e0c4      	b.n	8001364 <__aeabi_dadd+0x374>
 80011da:	0004      	movs	r4, r0
 80011dc:	431c      	orrs	r4, r3
 80011de:	2e00      	cmp	r6, #0
 80011e0:	d000      	beq.n	80011e4 <__aeabi_dadd+0x1f4>
 80011e2:	e169      	b.n	80014b8 <__aeabi_dadd+0x4c8>
 80011e4:	2c00      	cmp	r4, #0
 80011e6:	d100      	bne.n	80011ea <__aeabi_dadd+0x1fa>
 80011e8:	e1bf      	b.n	800156a <__aeabi_dadd+0x57a>
 80011ea:	4644      	mov	r4, r8
 80011ec:	430c      	orrs	r4, r1
 80011ee:	d000      	beq.n	80011f2 <__aeabi_dadd+0x202>
 80011f0:	e1d0      	b.n	8001594 <__aeabi_dadd+0x5a4>
 80011f2:	0742      	lsls	r2, r0, #29
 80011f4:	08db      	lsrs	r3, r3, #3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	08c0      	lsrs	r0, r0, #3
 80011fa:	e029      	b.n	8001250 <__aeabi_dadd+0x260>
 80011fc:	003a      	movs	r2, r7
 80011fe:	430a      	orrs	r2, r1
 8001200:	d100      	bne.n	8001204 <__aeabi_dadd+0x214>
 8001202:	e170      	b.n	80014e6 <__aeabi_dadd+0x4f6>
 8001204:	4662      	mov	r2, ip
 8001206:	4664      	mov	r4, ip
 8001208:	3a01      	subs	r2, #1
 800120a:	2c01      	cmp	r4, #1
 800120c:	d100      	bne.n	8001210 <__aeabi_dadd+0x220>
 800120e:	e0e0      	b.n	80013d2 <__aeabi_dadd+0x3e2>
 8001210:	4c51      	ldr	r4, [pc, #324]	; (8001358 <__aeabi_dadd+0x368>)
 8001212:	45a4      	cmp	ip, r4
 8001214:	d100      	bne.n	8001218 <__aeabi_dadd+0x228>
 8001216:	e161      	b.n	80014dc <__aeabi_dadd+0x4ec>
 8001218:	4694      	mov	ip, r2
 800121a:	e7b4      	b.n	8001186 <__aeabi_dadd+0x196>
 800121c:	003a      	movs	r2, r7
 800121e:	391f      	subs	r1, #31
 8001220:	40ca      	lsrs	r2, r1
 8001222:	0011      	movs	r1, r2
 8001224:	2b20      	cmp	r3, #32
 8001226:	d003      	beq.n	8001230 <__aeabi_dadd+0x240>
 8001228:	2240      	movs	r2, #64	; 0x40
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	409f      	lsls	r7, r3
 800122e:	433c      	orrs	r4, r7
 8001230:	1e63      	subs	r3, r4, #1
 8001232:	419c      	sbcs	r4, r3
 8001234:	2700      	movs	r7, #0
 8001236:	2600      	movs	r6, #0
 8001238:	430c      	orrs	r4, r1
 800123a:	0763      	lsls	r3, r4, #29
 800123c:	d000      	beq.n	8001240 <__aeabi_dadd+0x250>
 800123e:	e753      	b.n	80010e8 <__aeabi_dadd+0xf8>
 8001240:	46b4      	mov	ip, r6
 8001242:	08e4      	lsrs	r4, r4, #3
 8001244:	077b      	lsls	r3, r7, #29
 8001246:	4323      	orrs	r3, r4
 8001248:	08f8      	lsrs	r0, r7, #3
 800124a:	4a43      	ldr	r2, [pc, #268]	; (8001358 <__aeabi_dadd+0x368>)
 800124c:	4594      	cmp	ip, r2
 800124e:	d01d      	beq.n	800128c <__aeabi_dadd+0x29c>
 8001250:	4662      	mov	r2, ip
 8001252:	0307      	lsls	r7, r0, #12
 8001254:	0552      	lsls	r2, r2, #21
 8001256:	0b3f      	lsrs	r7, r7, #12
 8001258:	0d52      	lsrs	r2, r2, #21
 800125a:	e760      	b.n	800111e <__aeabi_dadd+0x12e>
 800125c:	4644      	mov	r4, r8
 800125e:	430c      	orrs	r4, r1
 8001260:	1e62      	subs	r2, r4, #1
 8001262:	4194      	sbcs	r4, r2
 8001264:	18e4      	adds	r4, r4, r3
 8001266:	429c      	cmp	r4, r3
 8001268:	419b      	sbcs	r3, r3
 800126a:	425f      	negs	r7, r3
 800126c:	183f      	adds	r7, r7, r0
 800126e:	023b      	lsls	r3, r7, #8
 8001270:	d5e3      	bpl.n	800123a <__aeabi_dadd+0x24a>
 8001272:	4b39      	ldr	r3, [pc, #228]	; (8001358 <__aeabi_dadd+0x368>)
 8001274:	3601      	adds	r6, #1
 8001276:	429e      	cmp	r6, r3
 8001278:	d000      	beq.n	800127c <__aeabi_dadd+0x28c>
 800127a:	e0b5      	b.n	80013e8 <__aeabi_dadd+0x3f8>
 800127c:	0032      	movs	r2, r6
 800127e:	2700      	movs	r7, #0
 8001280:	2300      	movs	r3, #0
 8001282:	e74c      	b.n	800111e <__aeabi_dadd+0x12e>
 8001284:	0742      	lsls	r2, r0, #29
 8001286:	08db      	lsrs	r3, r3, #3
 8001288:	4313      	orrs	r3, r2
 800128a:	08c0      	lsrs	r0, r0, #3
 800128c:	001a      	movs	r2, r3
 800128e:	4302      	orrs	r2, r0
 8001290:	d100      	bne.n	8001294 <__aeabi_dadd+0x2a4>
 8001292:	e1e1      	b.n	8001658 <__aeabi_dadd+0x668>
 8001294:	2780      	movs	r7, #128	; 0x80
 8001296:	033f      	lsls	r7, r7, #12
 8001298:	4307      	orrs	r7, r0
 800129a:	033f      	lsls	r7, r7, #12
 800129c:	4a2e      	ldr	r2, [pc, #184]	; (8001358 <__aeabi_dadd+0x368>)
 800129e:	0b3f      	lsrs	r7, r7, #12
 80012a0:	e73d      	b.n	800111e <__aeabi_dadd+0x12e>
 80012a2:	0020      	movs	r0, r4
 80012a4:	f001 fd5a 	bl	8002d5c <__clzsi2>
 80012a8:	0001      	movs	r1, r0
 80012aa:	3118      	adds	r1, #24
 80012ac:	291f      	cmp	r1, #31
 80012ae:	dc00      	bgt.n	80012b2 <__aeabi_dadd+0x2c2>
 80012b0:	e6fc      	b.n	80010ac <__aeabi_dadd+0xbc>
 80012b2:	3808      	subs	r0, #8
 80012b4:	4084      	lsls	r4, r0
 80012b6:	0027      	movs	r7, r4
 80012b8:	2400      	movs	r4, #0
 80012ba:	42b1      	cmp	r1, r6
 80012bc:	db00      	blt.n	80012c0 <__aeabi_dadd+0x2d0>
 80012be:	e6ff      	b.n	80010c0 <__aeabi_dadd+0xd0>
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <__aeabi_dadd+0x36c>)
 80012c2:	1a76      	subs	r6, r6, r1
 80012c4:	4017      	ands	r7, r2
 80012c6:	e70d      	b.n	80010e4 <__aeabi_dadd+0xf4>
 80012c8:	2a00      	cmp	r2, #0
 80012ca:	d02f      	beq.n	800132c <__aeabi_dadd+0x33c>
 80012cc:	464a      	mov	r2, r9
 80012ce:	1b92      	subs	r2, r2, r6
 80012d0:	4694      	mov	ip, r2
 80012d2:	2e00      	cmp	r6, #0
 80012d4:	d100      	bne.n	80012d8 <__aeabi_dadd+0x2e8>
 80012d6:	e0ad      	b.n	8001434 <__aeabi_dadd+0x444>
 80012d8:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <__aeabi_dadd+0x368>)
 80012da:	4591      	cmp	r9, r2
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dadd+0x2f0>
 80012de:	e10f      	b.n	8001500 <__aeabi_dadd+0x510>
 80012e0:	2280      	movs	r2, #128	; 0x80
 80012e2:	0412      	lsls	r2, r2, #16
 80012e4:	4310      	orrs	r0, r2
 80012e6:	4662      	mov	r2, ip
 80012e8:	2a38      	cmp	r2, #56	; 0x38
 80012ea:	dd00      	ble.n	80012ee <__aeabi_dadd+0x2fe>
 80012ec:	e10f      	b.n	800150e <__aeabi_dadd+0x51e>
 80012ee:	2a1f      	cmp	r2, #31
 80012f0:	dd00      	ble.n	80012f4 <__aeabi_dadd+0x304>
 80012f2:	e180      	b.n	80015f6 <__aeabi_dadd+0x606>
 80012f4:	4664      	mov	r4, ip
 80012f6:	2220      	movs	r2, #32
 80012f8:	001e      	movs	r6, r3
 80012fa:	1b12      	subs	r2, r2, r4
 80012fc:	4667      	mov	r7, ip
 80012fe:	0004      	movs	r4, r0
 8001300:	4093      	lsls	r3, r2
 8001302:	4094      	lsls	r4, r2
 8001304:	40fe      	lsrs	r6, r7
 8001306:	1e5a      	subs	r2, r3, #1
 8001308:	4193      	sbcs	r3, r2
 800130a:	40f8      	lsrs	r0, r7
 800130c:	4334      	orrs	r4, r6
 800130e:	431c      	orrs	r4, r3
 8001310:	4480      	add	r8, r0
 8001312:	1864      	adds	r4, r4, r1
 8001314:	428c      	cmp	r4, r1
 8001316:	41bf      	sbcs	r7, r7
 8001318:	427f      	negs	r7, r7
 800131a:	464e      	mov	r6, r9
 800131c:	4447      	add	r7, r8
 800131e:	e7a6      	b.n	800126e <__aeabi_dadd+0x27e>
 8001320:	4642      	mov	r2, r8
 8001322:	430a      	orrs	r2, r1
 8001324:	0011      	movs	r1, r2
 8001326:	1e4a      	subs	r2, r1, #1
 8001328:	4191      	sbcs	r1, r2
 800132a:	e6ad      	b.n	8001088 <__aeabi_dadd+0x98>
 800132c:	4c0c      	ldr	r4, [pc, #48]	; (8001360 <__aeabi_dadd+0x370>)
 800132e:	1c72      	adds	r2, r6, #1
 8001330:	4222      	tst	r2, r4
 8001332:	d000      	beq.n	8001336 <__aeabi_dadd+0x346>
 8001334:	e0a1      	b.n	800147a <__aeabi_dadd+0x48a>
 8001336:	0002      	movs	r2, r0
 8001338:	431a      	orrs	r2, r3
 800133a:	2e00      	cmp	r6, #0
 800133c:	d000      	beq.n	8001340 <__aeabi_dadd+0x350>
 800133e:	e0fa      	b.n	8001536 <__aeabi_dadd+0x546>
 8001340:	2a00      	cmp	r2, #0
 8001342:	d100      	bne.n	8001346 <__aeabi_dadd+0x356>
 8001344:	e145      	b.n	80015d2 <__aeabi_dadd+0x5e2>
 8001346:	003a      	movs	r2, r7
 8001348:	430a      	orrs	r2, r1
 800134a:	d000      	beq.n	800134e <__aeabi_dadd+0x35e>
 800134c:	e146      	b.n	80015dc <__aeabi_dadd+0x5ec>
 800134e:	0742      	lsls	r2, r0, #29
 8001350:	08db      	lsrs	r3, r3, #3
 8001352:	4313      	orrs	r3, r2
 8001354:	08c0      	lsrs	r0, r0, #3
 8001356:	e77b      	b.n	8001250 <__aeabi_dadd+0x260>
 8001358:	000007ff 	.word	0x000007ff
 800135c:	ff7fffff 	.word	0xff7fffff
 8001360:	000007fe 	.word	0x000007fe
 8001364:	4647      	mov	r7, r8
 8001366:	1a5c      	subs	r4, r3, r1
 8001368:	1bc2      	subs	r2, r0, r7
 800136a:	42a3      	cmp	r3, r4
 800136c:	41bf      	sbcs	r7, r7
 800136e:	427f      	negs	r7, r7
 8001370:	46b9      	mov	r9, r7
 8001372:	0017      	movs	r7, r2
 8001374:	464a      	mov	r2, r9
 8001376:	1abf      	subs	r7, r7, r2
 8001378:	023a      	lsls	r2, r7, #8
 800137a:	d500      	bpl.n	800137e <__aeabi_dadd+0x38e>
 800137c:	e08d      	b.n	800149a <__aeabi_dadd+0x4aa>
 800137e:	0023      	movs	r3, r4
 8001380:	433b      	orrs	r3, r7
 8001382:	d000      	beq.n	8001386 <__aeabi_dadd+0x396>
 8001384:	e68a      	b.n	800109c <__aeabi_dadd+0xac>
 8001386:	2000      	movs	r0, #0
 8001388:	2500      	movs	r5, #0
 800138a:	e761      	b.n	8001250 <__aeabi_dadd+0x260>
 800138c:	4cb4      	ldr	r4, [pc, #720]	; (8001660 <__aeabi_dadd+0x670>)
 800138e:	45a1      	cmp	r9, r4
 8001390:	d100      	bne.n	8001394 <__aeabi_dadd+0x3a4>
 8001392:	e0ad      	b.n	80014f0 <__aeabi_dadd+0x500>
 8001394:	2480      	movs	r4, #128	; 0x80
 8001396:	0424      	lsls	r4, r4, #16
 8001398:	4320      	orrs	r0, r4
 800139a:	4664      	mov	r4, ip
 800139c:	2c38      	cmp	r4, #56	; 0x38
 800139e:	dc3d      	bgt.n	800141c <__aeabi_dadd+0x42c>
 80013a0:	4662      	mov	r2, ip
 80013a2:	2c1f      	cmp	r4, #31
 80013a4:	dd00      	ble.n	80013a8 <__aeabi_dadd+0x3b8>
 80013a6:	e0b7      	b.n	8001518 <__aeabi_dadd+0x528>
 80013a8:	2520      	movs	r5, #32
 80013aa:	001e      	movs	r6, r3
 80013ac:	1b2d      	subs	r5, r5, r4
 80013ae:	0004      	movs	r4, r0
 80013b0:	40ab      	lsls	r3, r5
 80013b2:	40ac      	lsls	r4, r5
 80013b4:	40d6      	lsrs	r6, r2
 80013b6:	40d0      	lsrs	r0, r2
 80013b8:	4642      	mov	r2, r8
 80013ba:	1e5d      	subs	r5, r3, #1
 80013bc:	41ab      	sbcs	r3, r5
 80013be:	4334      	orrs	r4, r6
 80013c0:	1a12      	subs	r2, r2, r0
 80013c2:	4690      	mov	r8, r2
 80013c4:	4323      	orrs	r3, r4
 80013c6:	e02c      	b.n	8001422 <__aeabi_dadd+0x432>
 80013c8:	0742      	lsls	r2, r0, #29
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	08c0      	lsrs	r0, r0, #3
 80013d0:	e73b      	b.n	800124a <__aeabi_dadd+0x25a>
 80013d2:	185c      	adds	r4, r3, r1
 80013d4:	429c      	cmp	r4, r3
 80013d6:	419b      	sbcs	r3, r3
 80013d8:	4440      	add	r0, r8
 80013da:	425b      	negs	r3, r3
 80013dc:	18c7      	adds	r7, r0, r3
 80013de:	2601      	movs	r6, #1
 80013e0:	023b      	lsls	r3, r7, #8
 80013e2:	d400      	bmi.n	80013e6 <__aeabi_dadd+0x3f6>
 80013e4:	e729      	b.n	800123a <__aeabi_dadd+0x24a>
 80013e6:	2602      	movs	r6, #2
 80013e8:	4a9e      	ldr	r2, [pc, #632]	; (8001664 <__aeabi_dadd+0x674>)
 80013ea:	0863      	lsrs	r3, r4, #1
 80013ec:	4017      	ands	r7, r2
 80013ee:	2201      	movs	r2, #1
 80013f0:	4014      	ands	r4, r2
 80013f2:	431c      	orrs	r4, r3
 80013f4:	07fb      	lsls	r3, r7, #31
 80013f6:	431c      	orrs	r4, r3
 80013f8:	087f      	lsrs	r7, r7, #1
 80013fa:	e673      	b.n	80010e4 <__aeabi_dadd+0xf4>
 80013fc:	4644      	mov	r4, r8
 80013fe:	3a20      	subs	r2, #32
 8001400:	40d4      	lsrs	r4, r2
 8001402:	4662      	mov	r2, ip
 8001404:	2a20      	cmp	r2, #32
 8001406:	d005      	beq.n	8001414 <__aeabi_dadd+0x424>
 8001408:	4667      	mov	r7, ip
 800140a:	2240      	movs	r2, #64	; 0x40
 800140c:	1bd2      	subs	r2, r2, r7
 800140e:	4647      	mov	r7, r8
 8001410:	4097      	lsls	r7, r2
 8001412:	4339      	orrs	r1, r7
 8001414:	1e4a      	subs	r2, r1, #1
 8001416:	4191      	sbcs	r1, r2
 8001418:	4321      	orrs	r1, r4
 800141a:	e635      	b.n	8001088 <__aeabi_dadd+0x98>
 800141c:	4303      	orrs	r3, r0
 800141e:	1e58      	subs	r0, r3, #1
 8001420:	4183      	sbcs	r3, r0
 8001422:	1acc      	subs	r4, r1, r3
 8001424:	42a1      	cmp	r1, r4
 8001426:	41bf      	sbcs	r7, r7
 8001428:	4643      	mov	r3, r8
 800142a:	427f      	negs	r7, r7
 800142c:	4655      	mov	r5, sl
 800142e:	464e      	mov	r6, r9
 8001430:	1bdf      	subs	r7, r3, r7
 8001432:	e62e      	b.n	8001092 <__aeabi_dadd+0xa2>
 8001434:	0002      	movs	r2, r0
 8001436:	431a      	orrs	r2, r3
 8001438:	d100      	bne.n	800143c <__aeabi_dadd+0x44c>
 800143a:	e0bd      	b.n	80015b8 <__aeabi_dadd+0x5c8>
 800143c:	4662      	mov	r2, ip
 800143e:	4664      	mov	r4, ip
 8001440:	3a01      	subs	r2, #1
 8001442:	2c01      	cmp	r4, #1
 8001444:	d100      	bne.n	8001448 <__aeabi_dadd+0x458>
 8001446:	e0e5      	b.n	8001614 <__aeabi_dadd+0x624>
 8001448:	4c85      	ldr	r4, [pc, #532]	; (8001660 <__aeabi_dadd+0x670>)
 800144a:	45a4      	cmp	ip, r4
 800144c:	d058      	beq.n	8001500 <__aeabi_dadd+0x510>
 800144e:	4694      	mov	ip, r2
 8001450:	e749      	b.n	80012e6 <__aeabi_dadd+0x2f6>
 8001452:	4664      	mov	r4, ip
 8001454:	2220      	movs	r2, #32
 8001456:	1b12      	subs	r2, r2, r4
 8001458:	4644      	mov	r4, r8
 800145a:	4094      	lsls	r4, r2
 800145c:	000f      	movs	r7, r1
 800145e:	46a1      	mov	r9, r4
 8001460:	4664      	mov	r4, ip
 8001462:	4091      	lsls	r1, r2
 8001464:	40e7      	lsrs	r7, r4
 8001466:	464c      	mov	r4, r9
 8001468:	1e4a      	subs	r2, r1, #1
 800146a:	4191      	sbcs	r1, r2
 800146c:	433c      	orrs	r4, r7
 800146e:	4642      	mov	r2, r8
 8001470:	430c      	orrs	r4, r1
 8001472:	4661      	mov	r1, ip
 8001474:	40ca      	lsrs	r2, r1
 8001476:	1880      	adds	r0, r0, r2
 8001478:	e6f4      	b.n	8001264 <__aeabi_dadd+0x274>
 800147a:	4c79      	ldr	r4, [pc, #484]	; (8001660 <__aeabi_dadd+0x670>)
 800147c:	42a2      	cmp	r2, r4
 800147e:	d100      	bne.n	8001482 <__aeabi_dadd+0x492>
 8001480:	e6fd      	b.n	800127e <__aeabi_dadd+0x28e>
 8001482:	1859      	adds	r1, r3, r1
 8001484:	4299      	cmp	r1, r3
 8001486:	419b      	sbcs	r3, r3
 8001488:	4440      	add	r0, r8
 800148a:	425f      	negs	r7, r3
 800148c:	19c7      	adds	r7, r0, r7
 800148e:	07fc      	lsls	r4, r7, #31
 8001490:	0849      	lsrs	r1, r1, #1
 8001492:	0016      	movs	r6, r2
 8001494:	430c      	orrs	r4, r1
 8001496:	087f      	lsrs	r7, r7, #1
 8001498:	e6cf      	b.n	800123a <__aeabi_dadd+0x24a>
 800149a:	1acc      	subs	r4, r1, r3
 800149c:	42a1      	cmp	r1, r4
 800149e:	41bf      	sbcs	r7, r7
 80014a0:	4643      	mov	r3, r8
 80014a2:	427f      	negs	r7, r7
 80014a4:	1a18      	subs	r0, r3, r0
 80014a6:	4655      	mov	r5, sl
 80014a8:	1bc7      	subs	r7, r0, r7
 80014aa:	e5f7      	b.n	800109c <__aeabi_dadd+0xac>
 80014ac:	08c9      	lsrs	r1, r1, #3
 80014ae:	077b      	lsls	r3, r7, #29
 80014b0:	4655      	mov	r5, sl
 80014b2:	430b      	orrs	r3, r1
 80014b4:	08f8      	lsrs	r0, r7, #3
 80014b6:	e6c8      	b.n	800124a <__aeabi_dadd+0x25a>
 80014b8:	2c00      	cmp	r4, #0
 80014ba:	d000      	beq.n	80014be <__aeabi_dadd+0x4ce>
 80014bc:	e081      	b.n	80015c2 <__aeabi_dadd+0x5d2>
 80014be:	4643      	mov	r3, r8
 80014c0:	430b      	orrs	r3, r1
 80014c2:	d115      	bne.n	80014f0 <__aeabi_dadd+0x500>
 80014c4:	2080      	movs	r0, #128	; 0x80
 80014c6:	2500      	movs	r5, #0
 80014c8:	0300      	lsls	r0, r0, #12
 80014ca:	e6e3      	b.n	8001294 <__aeabi_dadd+0x2a4>
 80014cc:	1a5c      	subs	r4, r3, r1
 80014ce:	42a3      	cmp	r3, r4
 80014d0:	419b      	sbcs	r3, r3
 80014d2:	1bc7      	subs	r7, r0, r7
 80014d4:	425b      	negs	r3, r3
 80014d6:	2601      	movs	r6, #1
 80014d8:	1aff      	subs	r7, r7, r3
 80014da:	e5da      	b.n	8001092 <__aeabi_dadd+0xa2>
 80014dc:	0742      	lsls	r2, r0, #29
 80014de:	08db      	lsrs	r3, r3, #3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	08c0      	lsrs	r0, r0, #3
 80014e4:	e6d2      	b.n	800128c <__aeabi_dadd+0x29c>
 80014e6:	0742      	lsls	r2, r0, #29
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	08c0      	lsrs	r0, r0, #3
 80014ee:	e6ac      	b.n	800124a <__aeabi_dadd+0x25a>
 80014f0:	4643      	mov	r3, r8
 80014f2:	4642      	mov	r2, r8
 80014f4:	08c9      	lsrs	r1, r1, #3
 80014f6:	075b      	lsls	r3, r3, #29
 80014f8:	4655      	mov	r5, sl
 80014fa:	430b      	orrs	r3, r1
 80014fc:	08d0      	lsrs	r0, r2, #3
 80014fe:	e6c5      	b.n	800128c <__aeabi_dadd+0x29c>
 8001500:	4643      	mov	r3, r8
 8001502:	4642      	mov	r2, r8
 8001504:	075b      	lsls	r3, r3, #29
 8001506:	08c9      	lsrs	r1, r1, #3
 8001508:	430b      	orrs	r3, r1
 800150a:	08d0      	lsrs	r0, r2, #3
 800150c:	e6be      	b.n	800128c <__aeabi_dadd+0x29c>
 800150e:	4303      	orrs	r3, r0
 8001510:	001c      	movs	r4, r3
 8001512:	1e63      	subs	r3, r4, #1
 8001514:	419c      	sbcs	r4, r3
 8001516:	e6fc      	b.n	8001312 <__aeabi_dadd+0x322>
 8001518:	0002      	movs	r2, r0
 800151a:	3c20      	subs	r4, #32
 800151c:	40e2      	lsrs	r2, r4
 800151e:	0014      	movs	r4, r2
 8001520:	4662      	mov	r2, ip
 8001522:	2a20      	cmp	r2, #32
 8001524:	d003      	beq.n	800152e <__aeabi_dadd+0x53e>
 8001526:	2540      	movs	r5, #64	; 0x40
 8001528:	1aad      	subs	r5, r5, r2
 800152a:	40a8      	lsls	r0, r5
 800152c:	4303      	orrs	r3, r0
 800152e:	1e58      	subs	r0, r3, #1
 8001530:	4183      	sbcs	r3, r0
 8001532:	4323      	orrs	r3, r4
 8001534:	e775      	b.n	8001422 <__aeabi_dadd+0x432>
 8001536:	2a00      	cmp	r2, #0
 8001538:	d0e2      	beq.n	8001500 <__aeabi_dadd+0x510>
 800153a:	003a      	movs	r2, r7
 800153c:	430a      	orrs	r2, r1
 800153e:	d0cd      	beq.n	80014dc <__aeabi_dadd+0x4ec>
 8001540:	0742      	lsls	r2, r0, #29
 8001542:	08db      	lsrs	r3, r3, #3
 8001544:	4313      	orrs	r3, r2
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	08c0      	lsrs	r0, r0, #3
 800154a:	0312      	lsls	r2, r2, #12
 800154c:	4210      	tst	r0, r2
 800154e:	d006      	beq.n	800155e <__aeabi_dadd+0x56e>
 8001550:	08fc      	lsrs	r4, r7, #3
 8001552:	4214      	tst	r4, r2
 8001554:	d103      	bne.n	800155e <__aeabi_dadd+0x56e>
 8001556:	0020      	movs	r0, r4
 8001558:	08cb      	lsrs	r3, r1, #3
 800155a:	077a      	lsls	r2, r7, #29
 800155c:	4313      	orrs	r3, r2
 800155e:	0f5a      	lsrs	r2, r3, #29
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	0752      	lsls	r2, r2, #29
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	4313      	orrs	r3, r2
 8001568:	e690      	b.n	800128c <__aeabi_dadd+0x29c>
 800156a:	4643      	mov	r3, r8
 800156c:	430b      	orrs	r3, r1
 800156e:	d100      	bne.n	8001572 <__aeabi_dadd+0x582>
 8001570:	e709      	b.n	8001386 <__aeabi_dadd+0x396>
 8001572:	4643      	mov	r3, r8
 8001574:	4642      	mov	r2, r8
 8001576:	08c9      	lsrs	r1, r1, #3
 8001578:	075b      	lsls	r3, r3, #29
 800157a:	4655      	mov	r5, sl
 800157c:	430b      	orrs	r3, r1
 800157e:	08d0      	lsrs	r0, r2, #3
 8001580:	e666      	b.n	8001250 <__aeabi_dadd+0x260>
 8001582:	1acc      	subs	r4, r1, r3
 8001584:	42a1      	cmp	r1, r4
 8001586:	4189      	sbcs	r1, r1
 8001588:	1a3f      	subs	r7, r7, r0
 800158a:	4249      	negs	r1, r1
 800158c:	4655      	mov	r5, sl
 800158e:	2601      	movs	r6, #1
 8001590:	1a7f      	subs	r7, r7, r1
 8001592:	e57e      	b.n	8001092 <__aeabi_dadd+0xa2>
 8001594:	4642      	mov	r2, r8
 8001596:	1a5c      	subs	r4, r3, r1
 8001598:	1a87      	subs	r7, r0, r2
 800159a:	42a3      	cmp	r3, r4
 800159c:	4192      	sbcs	r2, r2
 800159e:	4252      	negs	r2, r2
 80015a0:	1abf      	subs	r7, r7, r2
 80015a2:	023a      	lsls	r2, r7, #8
 80015a4:	d53d      	bpl.n	8001622 <__aeabi_dadd+0x632>
 80015a6:	1acc      	subs	r4, r1, r3
 80015a8:	42a1      	cmp	r1, r4
 80015aa:	4189      	sbcs	r1, r1
 80015ac:	4643      	mov	r3, r8
 80015ae:	4249      	negs	r1, r1
 80015b0:	1a1f      	subs	r7, r3, r0
 80015b2:	4655      	mov	r5, sl
 80015b4:	1a7f      	subs	r7, r7, r1
 80015b6:	e595      	b.n	80010e4 <__aeabi_dadd+0xf4>
 80015b8:	077b      	lsls	r3, r7, #29
 80015ba:	08c9      	lsrs	r1, r1, #3
 80015bc:	430b      	orrs	r3, r1
 80015be:	08f8      	lsrs	r0, r7, #3
 80015c0:	e643      	b.n	800124a <__aeabi_dadd+0x25a>
 80015c2:	4644      	mov	r4, r8
 80015c4:	08db      	lsrs	r3, r3, #3
 80015c6:	430c      	orrs	r4, r1
 80015c8:	d130      	bne.n	800162c <__aeabi_dadd+0x63c>
 80015ca:	0742      	lsls	r2, r0, #29
 80015cc:	4313      	orrs	r3, r2
 80015ce:	08c0      	lsrs	r0, r0, #3
 80015d0:	e65c      	b.n	800128c <__aeabi_dadd+0x29c>
 80015d2:	077b      	lsls	r3, r7, #29
 80015d4:	08c9      	lsrs	r1, r1, #3
 80015d6:	430b      	orrs	r3, r1
 80015d8:	08f8      	lsrs	r0, r7, #3
 80015da:	e639      	b.n	8001250 <__aeabi_dadd+0x260>
 80015dc:	185c      	adds	r4, r3, r1
 80015de:	429c      	cmp	r4, r3
 80015e0:	419b      	sbcs	r3, r3
 80015e2:	4440      	add	r0, r8
 80015e4:	425b      	negs	r3, r3
 80015e6:	18c7      	adds	r7, r0, r3
 80015e8:	023b      	lsls	r3, r7, #8
 80015ea:	d400      	bmi.n	80015ee <__aeabi_dadd+0x5fe>
 80015ec:	e625      	b.n	800123a <__aeabi_dadd+0x24a>
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <__aeabi_dadd+0x674>)
 80015f0:	2601      	movs	r6, #1
 80015f2:	401f      	ands	r7, r3
 80015f4:	e621      	b.n	800123a <__aeabi_dadd+0x24a>
 80015f6:	0004      	movs	r4, r0
 80015f8:	3a20      	subs	r2, #32
 80015fa:	40d4      	lsrs	r4, r2
 80015fc:	4662      	mov	r2, ip
 80015fe:	2a20      	cmp	r2, #32
 8001600:	d004      	beq.n	800160c <__aeabi_dadd+0x61c>
 8001602:	2240      	movs	r2, #64	; 0x40
 8001604:	4666      	mov	r6, ip
 8001606:	1b92      	subs	r2, r2, r6
 8001608:	4090      	lsls	r0, r2
 800160a:	4303      	orrs	r3, r0
 800160c:	1e5a      	subs	r2, r3, #1
 800160e:	4193      	sbcs	r3, r2
 8001610:	431c      	orrs	r4, r3
 8001612:	e67e      	b.n	8001312 <__aeabi_dadd+0x322>
 8001614:	185c      	adds	r4, r3, r1
 8001616:	428c      	cmp	r4, r1
 8001618:	4189      	sbcs	r1, r1
 800161a:	4440      	add	r0, r8
 800161c:	4249      	negs	r1, r1
 800161e:	1847      	adds	r7, r0, r1
 8001620:	e6dd      	b.n	80013de <__aeabi_dadd+0x3ee>
 8001622:	0023      	movs	r3, r4
 8001624:	433b      	orrs	r3, r7
 8001626:	d100      	bne.n	800162a <__aeabi_dadd+0x63a>
 8001628:	e6ad      	b.n	8001386 <__aeabi_dadd+0x396>
 800162a:	e606      	b.n	800123a <__aeabi_dadd+0x24a>
 800162c:	0744      	lsls	r4, r0, #29
 800162e:	4323      	orrs	r3, r4
 8001630:	2480      	movs	r4, #128	; 0x80
 8001632:	08c0      	lsrs	r0, r0, #3
 8001634:	0324      	lsls	r4, r4, #12
 8001636:	4220      	tst	r0, r4
 8001638:	d008      	beq.n	800164c <__aeabi_dadd+0x65c>
 800163a:	4642      	mov	r2, r8
 800163c:	08d6      	lsrs	r6, r2, #3
 800163e:	4226      	tst	r6, r4
 8001640:	d104      	bne.n	800164c <__aeabi_dadd+0x65c>
 8001642:	4655      	mov	r5, sl
 8001644:	0030      	movs	r0, r6
 8001646:	08cb      	lsrs	r3, r1, #3
 8001648:	0751      	lsls	r1, r2, #29
 800164a:	430b      	orrs	r3, r1
 800164c:	0f5a      	lsrs	r2, r3, #29
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	08db      	lsrs	r3, r3, #3
 8001652:	0752      	lsls	r2, r2, #29
 8001654:	4313      	orrs	r3, r2
 8001656:	e619      	b.n	800128c <__aeabi_dadd+0x29c>
 8001658:	2300      	movs	r3, #0
 800165a:	4a01      	ldr	r2, [pc, #4]	; (8001660 <__aeabi_dadd+0x670>)
 800165c:	001f      	movs	r7, r3
 800165e:	e55e      	b.n	800111e <__aeabi_dadd+0x12e>
 8001660:	000007ff 	.word	0x000007ff
 8001664:	ff7fffff 	.word	0xff7fffff

08001668 <__aeabi_ddiv>:
 8001668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166a:	4657      	mov	r7, sl
 800166c:	464e      	mov	r6, r9
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	b5e0      	push	{r5, r6, r7, lr}
 8001674:	4681      	mov	r9, r0
 8001676:	0005      	movs	r5, r0
 8001678:	030c      	lsls	r4, r1, #12
 800167a:	0048      	lsls	r0, r1, #1
 800167c:	4692      	mov	sl, r2
 800167e:	001f      	movs	r7, r3
 8001680:	b085      	sub	sp, #20
 8001682:	0b24      	lsrs	r4, r4, #12
 8001684:	0d40      	lsrs	r0, r0, #21
 8001686:	0fce      	lsrs	r6, r1, #31
 8001688:	2800      	cmp	r0, #0
 800168a:	d100      	bne.n	800168e <__aeabi_ddiv+0x26>
 800168c:	e156      	b.n	800193c <__aeabi_ddiv+0x2d4>
 800168e:	4bd4      	ldr	r3, [pc, #848]	; (80019e0 <__aeabi_ddiv+0x378>)
 8001690:	4298      	cmp	r0, r3
 8001692:	d100      	bne.n	8001696 <__aeabi_ddiv+0x2e>
 8001694:	e172      	b.n	800197c <__aeabi_ddiv+0x314>
 8001696:	0f6b      	lsrs	r3, r5, #29
 8001698:	00e4      	lsls	r4, r4, #3
 800169a:	431c      	orrs	r4, r3
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	4323      	orrs	r3, r4
 80016a2:	4698      	mov	r8, r3
 80016a4:	4bcf      	ldr	r3, [pc, #828]	; (80019e4 <__aeabi_ddiv+0x37c>)
 80016a6:	00ed      	lsls	r5, r5, #3
 80016a8:	469b      	mov	fp, r3
 80016aa:	2300      	movs	r3, #0
 80016ac:	4699      	mov	r9, r3
 80016ae:	4483      	add	fp, r0
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	033c      	lsls	r4, r7, #12
 80016b4:	007b      	lsls	r3, r7, #1
 80016b6:	4650      	mov	r0, sl
 80016b8:	0b24      	lsrs	r4, r4, #12
 80016ba:	0d5b      	lsrs	r3, r3, #21
 80016bc:	0fff      	lsrs	r7, r7, #31
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_ddiv+0x5c>
 80016c2:	e11f      	b.n	8001904 <__aeabi_ddiv+0x29c>
 80016c4:	4ac6      	ldr	r2, [pc, #792]	; (80019e0 <__aeabi_ddiv+0x378>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d100      	bne.n	80016cc <__aeabi_ddiv+0x64>
 80016ca:	e162      	b.n	8001992 <__aeabi_ddiv+0x32a>
 80016cc:	49c5      	ldr	r1, [pc, #788]	; (80019e4 <__aeabi_ddiv+0x37c>)
 80016ce:	0f42      	lsrs	r2, r0, #29
 80016d0:	468c      	mov	ip, r1
 80016d2:	00e4      	lsls	r4, r4, #3
 80016d4:	4659      	mov	r1, fp
 80016d6:	4314      	orrs	r4, r2
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	4463      	add	r3, ip
 80016dc:	0412      	lsls	r2, r2, #16
 80016de:	1acb      	subs	r3, r1, r3
 80016e0:	4314      	orrs	r4, r2
 80016e2:	469b      	mov	fp, r3
 80016e4:	00c2      	lsls	r2, r0, #3
 80016e6:	2000      	movs	r0, #0
 80016e8:	0033      	movs	r3, r6
 80016ea:	407b      	eors	r3, r7
 80016ec:	469a      	mov	sl, r3
 80016ee:	464b      	mov	r3, r9
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d827      	bhi.n	8001744 <__aeabi_ddiv+0xdc>
 80016f4:	49bc      	ldr	r1, [pc, #752]	; (80019e8 <__aeabi_ddiv+0x380>)
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	58cb      	ldr	r3, [r1, r3]
 80016fa:	469f      	mov	pc, r3
 80016fc:	46b2      	mov	sl, r6
 80016fe:	9b00      	ldr	r3, [sp, #0]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d016      	beq.n	8001732 <__aeabi_ddiv+0xca>
 8001704:	2b03      	cmp	r3, #3
 8001706:	d100      	bne.n	800170a <__aeabi_ddiv+0xa2>
 8001708:	e28e      	b.n	8001c28 <__aeabi_ddiv+0x5c0>
 800170a:	2b01      	cmp	r3, #1
 800170c:	d000      	beq.n	8001710 <__aeabi_ddiv+0xa8>
 800170e:	e0d9      	b.n	80018c4 <__aeabi_ddiv+0x25c>
 8001710:	2300      	movs	r3, #0
 8001712:	2400      	movs	r4, #0
 8001714:	2500      	movs	r5, #0
 8001716:	4652      	mov	r2, sl
 8001718:	051b      	lsls	r3, r3, #20
 800171a:	4323      	orrs	r3, r4
 800171c:	07d2      	lsls	r2, r2, #31
 800171e:	4313      	orrs	r3, r2
 8001720:	0028      	movs	r0, r5
 8001722:	0019      	movs	r1, r3
 8001724:	b005      	add	sp, #20
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2400      	movs	r4, #0
 8001734:	2500      	movs	r5, #0
 8001736:	4baa      	ldr	r3, [pc, #680]	; (80019e0 <__aeabi_ddiv+0x378>)
 8001738:	e7ed      	b.n	8001716 <__aeabi_ddiv+0xae>
 800173a:	46ba      	mov	sl, r7
 800173c:	46a0      	mov	r8, r4
 800173e:	0015      	movs	r5, r2
 8001740:	9000      	str	r0, [sp, #0]
 8001742:	e7dc      	b.n	80016fe <__aeabi_ddiv+0x96>
 8001744:	4544      	cmp	r4, r8
 8001746:	d200      	bcs.n	800174a <__aeabi_ddiv+0xe2>
 8001748:	e1c7      	b.n	8001ada <__aeabi_ddiv+0x472>
 800174a:	d100      	bne.n	800174e <__aeabi_ddiv+0xe6>
 800174c:	e1c2      	b.n	8001ad4 <__aeabi_ddiv+0x46c>
 800174e:	2301      	movs	r3, #1
 8001750:	425b      	negs	r3, r3
 8001752:	469c      	mov	ip, r3
 8001754:	002e      	movs	r6, r5
 8001756:	4640      	mov	r0, r8
 8001758:	2500      	movs	r5, #0
 800175a:	44e3      	add	fp, ip
 800175c:	0223      	lsls	r3, r4, #8
 800175e:	0e14      	lsrs	r4, r2, #24
 8001760:	431c      	orrs	r4, r3
 8001762:	0c1b      	lsrs	r3, r3, #16
 8001764:	4699      	mov	r9, r3
 8001766:	0423      	lsls	r3, r4, #16
 8001768:	0c1f      	lsrs	r7, r3, #16
 800176a:	0212      	lsls	r2, r2, #8
 800176c:	4649      	mov	r1, r9
 800176e:	9200      	str	r2, [sp, #0]
 8001770:	9701      	str	r7, [sp, #4]
 8001772:	f7fe fd6b 	bl	800024c <__aeabi_uidivmod>
 8001776:	0002      	movs	r2, r0
 8001778:	437a      	muls	r2, r7
 800177a:	040b      	lsls	r3, r1, #16
 800177c:	0c31      	lsrs	r1, r6, #16
 800177e:	4680      	mov	r8, r0
 8001780:	4319      	orrs	r1, r3
 8001782:	428a      	cmp	r2, r1
 8001784:	d907      	bls.n	8001796 <__aeabi_ddiv+0x12e>
 8001786:	2301      	movs	r3, #1
 8001788:	425b      	negs	r3, r3
 800178a:	469c      	mov	ip, r3
 800178c:	1909      	adds	r1, r1, r4
 800178e:	44e0      	add	r8, ip
 8001790:	428c      	cmp	r4, r1
 8001792:	d800      	bhi.n	8001796 <__aeabi_ddiv+0x12e>
 8001794:	e207      	b.n	8001ba6 <__aeabi_ddiv+0x53e>
 8001796:	1a88      	subs	r0, r1, r2
 8001798:	4649      	mov	r1, r9
 800179a:	f7fe fd57 	bl	800024c <__aeabi_uidivmod>
 800179e:	0409      	lsls	r1, r1, #16
 80017a0:	468c      	mov	ip, r1
 80017a2:	0431      	lsls	r1, r6, #16
 80017a4:	4666      	mov	r6, ip
 80017a6:	9a01      	ldr	r2, [sp, #4]
 80017a8:	0c09      	lsrs	r1, r1, #16
 80017aa:	4342      	muls	r2, r0
 80017ac:	0003      	movs	r3, r0
 80017ae:	4331      	orrs	r1, r6
 80017b0:	428a      	cmp	r2, r1
 80017b2:	d904      	bls.n	80017be <__aeabi_ddiv+0x156>
 80017b4:	1909      	adds	r1, r1, r4
 80017b6:	3b01      	subs	r3, #1
 80017b8:	428c      	cmp	r4, r1
 80017ba:	d800      	bhi.n	80017be <__aeabi_ddiv+0x156>
 80017bc:	e1ed      	b.n	8001b9a <__aeabi_ddiv+0x532>
 80017be:	1a88      	subs	r0, r1, r2
 80017c0:	4642      	mov	r2, r8
 80017c2:	0412      	lsls	r2, r2, #16
 80017c4:	431a      	orrs	r2, r3
 80017c6:	4690      	mov	r8, r2
 80017c8:	4641      	mov	r1, r8
 80017ca:	9b00      	ldr	r3, [sp, #0]
 80017cc:	040e      	lsls	r6, r1, #16
 80017ce:	0c1b      	lsrs	r3, r3, #16
 80017d0:	001f      	movs	r7, r3
 80017d2:	9302      	str	r3, [sp, #8]
 80017d4:	9b00      	ldr	r3, [sp, #0]
 80017d6:	0c36      	lsrs	r6, r6, #16
 80017d8:	041b      	lsls	r3, r3, #16
 80017da:	0c19      	lsrs	r1, r3, #16
 80017dc:	000b      	movs	r3, r1
 80017de:	4373      	muls	r3, r6
 80017e0:	0c12      	lsrs	r2, r2, #16
 80017e2:	437e      	muls	r6, r7
 80017e4:	9103      	str	r1, [sp, #12]
 80017e6:	4351      	muls	r1, r2
 80017e8:	437a      	muls	r2, r7
 80017ea:	0c1f      	lsrs	r7, r3, #16
 80017ec:	46bc      	mov	ip, r7
 80017ee:	1876      	adds	r6, r6, r1
 80017f0:	4466      	add	r6, ip
 80017f2:	42b1      	cmp	r1, r6
 80017f4:	d903      	bls.n	80017fe <__aeabi_ddiv+0x196>
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	0249      	lsls	r1, r1, #9
 80017fa:	468c      	mov	ip, r1
 80017fc:	4462      	add	r2, ip
 80017fe:	0c31      	lsrs	r1, r6, #16
 8001800:	188a      	adds	r2, r1, r2
 8001802:	0431      	lsls	r1, r6, #16
 8001804:	041e      	lsls	r6, r3, #16
 8001806:	0c36      	lsrs	r6, r6, #16
 8001808:	198e      	adds	r6, r1, r6
 800180a:	4290      	cmp	r0, r2
 800180c:	d302      	bcc.n	8001814 <__aeabi_ddiv+0x1ac>
 800180e:	d112      	bne.n	8001836 <__aeabi_ddiv+0x1ce>
 8001810:	42b5      	cmp	r5, r6
 8001812:	d210      	bcs.n	8001836 <__aeabi_ddiv+0x1ce>
 8001814:	4643      	mov	r3, r8
 8001816:	1e59      	subs	r1, r3, #1
 8001818:	9b00      	ldr	r3, [sp, #0]
 800181a:	469c      	mov	ip, r3
 800181c:	4465      	add	r5, ip
 800181e:	001f      	movs	r7, r3
 8001820:	429d      	cmp	r5, r3
 8001822:	419b      	sbcs	r3, r3
 8001824:	425b      	negs	r3, r3
 8001826:	191b      	adds	r3, r3, r4
 8001828:	18c0      	adds	r0, r0, r3
 800182a:	4284      	cmp	r4, r0
 800182c:	d200      	bcs.n	8001830 <__aeabi_ddiv+0x1c8>
 800182e:	e1a0      	b.n	8001b72 <__aeabi_ddiv+0x50a>
 8001830:	d100      	bne.n	8001834 <__aeabi_ddiv+0x1cc>
 8001832:	e19b      	b.n	8001b6c <__aeabi_ddiv+0x504>
 8001834:	4688      	mov	r8, r1
 8001836:	1bae      	subs	r6, r5, r6
 8001838:	42b5      	cmp	r5, r6
 800183a:	41ad      	sbcs	r5, r5
 800183c:	1a80      	subs	r0, r0, r2
 800183e:	426d      	negs	r5, r5
 8001840:	1b40      	subs	r0, r0, r5
 8001842:	4284      	cmp	r4, r0
 8001844:	d100      	bne.n	8001848 <__aeabi_ddiv+0x1e0>
 8001846:	e1d5      	b.n	8001bf4 <__aeabi_ddiv+0x58c>
 8001848:	4649      	mov	r1, r9
 800184a:	f7fe fcff 	bl	800024c <__aeabi_uidivmod>
 800184e:	9a01      	ldr	r2, [sp, #4]
 8001850:	040b      	lsls	r3, r1, #16
 8001852:	4342      	muls	r2, r0
 8001854:	0c31      	lsrs	r1, r6, #16
 8001856:	0005      	movs	r5, r0
 8001858:	4319      	orrs	r1, r3
 800185a:	428a      	cmp	r2, r1
 800185c:	d900      	bls.n	8001860 <__aeabi_ddiv+0x1f8>
 800185e:	e16c      	b.n	8001b3a <__aeabi_ddiv+0x4d2>
 8001860:	1a88      	subs	r0, r1, r2
 8001862:	4649      	mov	r1, r9
 8001864:	f7fe fcf2 	bl	800024c <__aeabi_uidivmod>
 8001868:	9a01      	ldr	r2, [sp, #4]
 800186a:	0436      	lsls	r6, r6, #16
 800186c:	4342      	muls	r2, r0
 800186e:	0409      	lsls	r1, r1, #16
 8001870:	0c36      	lsrs	r6, r6, #16
 8001872:	0003      	movs	r3, r0
 8001874:	430e      	orrs	r6, r1
 8001876:	42b2      	cmp	r2, r6
 8001878:	d900      	bls.n	800187c <__aeabi_ddiv+0x214>
 800187a:	e153      	b.n	8001b24 <__aeabi_ddiv+0x4bc>
 800187c:	9803      	ldr	r0, [sp, #12]
 800187e:	1ab6      	subs	r6, r6, r2
 8001880:	0002      	movs	r2, r0
 8001882:	042d      	lsls	r5, r5, #16
 8001884:	431d      	orrs	r5, r3
 8001886:	9f02      	ldr	r7, [sp, #8]
 8001888:	042b      	lsls	r3, r5, #16
 800188a:	0c1b      	lsrs	r3, r3, #16
 800188c:	435a      	muls	r2, r3
 800188e:	437b      	muls	r3, r7
 8001890:	469c      	mov	ip, r3
 8001892:	0c29      	lsrs	r1, r5, #16
 8001894:	4348      	muls	r0, r1
 8001896:	0c13      	lsrs	r3, r2, #16
 8001898:	4484      	add	ip, r0
 800189a:	4463      	add	r3, ip
 800189c:	4379      	muls	r1, r7
 800189e:	4298      	cmp	r0, r3
 80018a0:	d903      	bls.n	80018aa <__aeabi_ddiv+0x242>
 80018a2:	2080      	movs	r0, #128	; 0x80
 80018a4:	0240      	lsls	r0, r0, #9
 80018a6:	4684      	mov	ip, r0
 80018a8:	4461      	add	r1, ip
 80018aa:	0c18      	lsrs	r0, r3, #16
 80018ac:	0412      	lsls	r2, r2, #16
 80018ae:	041b      	lsls	r3, r3, #16
 80018b0:	0c12      	lsrs	r2, r2, #16
 80018b2:	1841      	adds	r1, r0, r1
 80018b4:	189b      	adds	r3, r3, r2
 80018b6:	428e      	cmp	r6, r1
 80018b8:	d200      	bcs.n	80018bc <__aeabi_ddiv+0x254>
 80018ba:	e0ff      	b.n	8001abc <__aeabi_ddiv+0x454>
 80018bc:	d100      	bne.n	80018c0 <__aeabi_ddiv+0x258>
 80018be:	e0fa      	b.n	8001ab6 <__aeabi_ddiv+0x44e>
 80018c0:	2301      	movs	r3, #1
 80018c2:	431d      	orrs	r5, r3
 80018c4:	4a49      	ldr	r2, [pc, #292]	; (80019ec <__aeabi_ddiv+0x384>)
 80018c6:	445a      	add	r2, fp
 80018c8:	2a00      	cmp	r2, #0
 80018ca:	dc00      	bgt.n	80018ce <__aeabi_ddiv+0x266>
 80018cc:	e0aa      	b.n	8001a24 <__aeabi_ddiv+0x3bc>
 80018ce:	076b      	lsls	r3, r5, #29
 80018d0:	d000      	beq.n	80018d4 <__aeabi_ddiv+0x26c>
 80018d2:	e13d      	b.n	8001b50 <__aeabi_ddiv+0x4e8>
 80018d4:	08ed      	lsrs	r5, r5, #3
 80018d6:	4643      	mov	r3, r8
 80018d8:	01db      	lsls	r3, r3, #7
 80018da:	d506      	bpl.n	80018ea <__aeabi_ddiv+0x282>
 80018dc:	4642      	mov	r2, r8
 80018de:	4b44      	ldr	r3, [pc, #272]	; (80019f0 <__aeabi_ddiv+0x388>)
 80018e0:	401a      	ands	r2, r3
 80018e2:	4690      	mov	r8, r2
 80018e4:	2280      	movs	r2, #128	; 0x80
 80018e6:	00d2      	lsls	r2, r2, #3
 80018e8:	445a      	add	r2, fp
 80018ea:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <__aeabi_ddiv+0x38c>)
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dd00      	ble.n	80018f2 <__aeabi_ddiv+0x28a>
 80018f0:	e71f      	b.n	8001732 <__aeabi_ddiv+0xca>
 80018f2:	4643      	mov	r3, r8
 80018f4:	075b      	lsls	r3, r3, #29
 80018f6:	431d      	orrs	r5, r3
 80018f8:	4643      	mov	r3, r8
 80018fa:	0552      	lsls	r2, r2, #21
 80018fc:	025c      	lsls	r4, r3, #9
 80018fe:	0b24      	lsrs	r4, r4, #12
 8001900:	0d53      	lsrs	r3, r2, #21
 8001902:	e708      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001904:	4652      	mov	r2, sl
 8001906:	4322      	orrs	r2, r4
 8001908:	d100      	bne.n	800190c <__aeabi_ddiv+0x2a4>
 800190a:	e07b      	b.n	8001a04 <__aeabi_ddiv+0x39c>
 800190c:	2c00      	cmp	r4, #0
 800190e:	d100      	bne.n	8001912 <__aeabi_ddiv+0x2aa>
 8001910:	e0fa      	b.n	8001b08 <__aeabi_ddiv+0x4a0>
 8001912:	0020      	movs	r0, r4
 8001914:	f001 fa22 	bl	8002d5c <__clzsi2>
 8001918:	0002      	movs	r2, r0
 800191a:	3a0b      	subs	r2, #11
 800191c:	231d      	movs	r3, #29
 800191e:	0001      	movs	r1, r0
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	4652      	mov	r2, sl
 8001924:	3908      	subs	r1, #8
 8001926:	40da      	lsrs	r2, r3
 8001928:	408c      	lsls	r4, r1
 800192a:	4314      	orrs	r4, r2
 800192c:	4652      	mov	r2, sl
 800192e:	408a      	lsls	r2, r1
 8001930:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <__aeabi_ddiv+0x390>)
 8001932:	4458      	add	r0, fp
 8001934:	469b      	mov	fp, r3
 8001936:	4483      	add	fp, r0
 8001938:	2000      	movs	r0, #0
 800193a:	e6d5      	b.n	80016e8 <__aeabi_ddiv+0x80>
 800193c:	464b      	mov	r3, r9
 800193e:	4323      	orrs	r3, r4
 8001940:	4698      	mov	r8, r3
 8001942:	d044      	beq.n	80019ce <__aeabi_ddiv+0x366>
 8001944:	2c00      	cmp	r4, #0
 8001946:	d100      	bne.n	800194a <__aeabi_ddiv+0x2e2>
 8001948:	e0ce      	b.n	8001ae8 <__aeabi_ddiv+0x480>
 800194a:	0020      	movs	r0, r4
 800194c:	f001 fa06 	bl	8002d5c <__clzsi2>
 8001950:	0001      	movs	r1, r0
 8001952:	0002      	movs	r2, r0
 8001954:	390b      	subs	r1, #11
 8001956:	231d      	movs	r3, #29
 8001958:	1a5b      	subs	r3, r3, r1
 800195a:	4649      	mov	r1, r9
 800195c:	0010      	movs	r0, r2
 800195e:	40d9      	lsrs	r1, r3
 8001960:	3808      	subs	r0, #8
 8001962:	4084      	lsls	r4, r0
 8001964:	000b      	movs	r3, r1
 8001966:	464d      	mov	r5, r9
 8001968:	4323      	orrs	r3, r4
 800196a:	4698      	mov	r8, r3
 800196c:	4085      	lsls	r5, r0
 800196e:	4823      	ldr	r0, [pc, #140]	; (80019fc <__aeabi_ddiv+0x394>)
 8001970:	1a83      	subs	r3, r0, r2
 8001972:	469b      	mov	fp, r3
 8001974:	2300      	movs	r3, #0
 8001976:	4699      	mov	r9, r3
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	e69a      	b.n	80016b2 <__aeabi_ddiv+0x4a>
 800197c:	464b      	mov	r3, r9
 800197e:	4323      	orrs	r3, r4
 8001980:	4698      	mov	r8, r3
 8001982:	d11d      	bne.n	80019c0 <__aeabi_ddiv+0x358>
 8001984:	2308      	movs	r3, #8
 8001986:	4699      	mov	r9, r3
 8001988:	3b06      	subs	r3, #6
 800198a:	2500      	movs	r5, #0
 800198c:	4683      	mov	fp, r0
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	e68f      	b.n	80016b2 <__aeabi_ddiv+0x4a>
 8001992:	4652      	mov	r2, sl
 8001994:	4322      	orrs	r2, r4
 8001996:	d109      	bne.n	80019ac <__aeabi_ddiv+0x344>
 8001998:	2302      	movs	r3, #2
 800199a:	4649      	mov	r1, r9
 800199c:	4319      	orrs	r1, r3
 800199e:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <__aeabi_ddiv+0x398>)
 80019a0:	4689      	mov	r9, r1
 80019a2:	469c      	mov	ip, r3
 80019a4:	2400      	movs	r4, #0
 80019a6:	2002      	movs	r0, #2
 80019a8:	44e3      	add	fp, ip
 80019aa:	e69d      	b.n	80016e8 <__aeabi_ddiv+0x80>
 80019ac:	2303      	movs	r3, #3
 80019ae:	464a      	mov	r2, r9
 80019b0:	431a      	orrs	r2, r3
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <__aeabi_ddiv+0x398>)
 80019b4:	4691      	mov	r9, r2
 80019b6:	469c      	mov	ip, r3
 80019b8:	4652      	mov	r2, sl
 80019ba:	2003      	movs	r0, #3
 80019bc:	44e3      	add	fp, ip
 80019be:	e693      	b.n	80016e8 <__aeabi_ddiv+0x80>
 80019c0:	230c      	movs	r3, #12
 80019c2:	4699      	mov	r9, r3
 80019c4:	3b09      	subs	r3, #9
 80019c6:	46a0      	mov	r8, r4
 80019c8:	4683      	mov	fp, r0
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	e671      	b.n	80016b2 <__aeabi_ddiv+0x4a>
 80019ce:	2304      	movs	r3, #4
 80019d0:	4699      	mov	r9, r3
 80019d2:	2300      	movs	r3, #0
 80019d4:	469b      	mov	fp, r3
 80019d6:	3301      	adds	r3, #1
 80019d8:	2500      	movs	r5, #0
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	e669      	b.n	80016b2 <__aeabi_ddiv+0x4a>
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	000007ff 	.word	0x000007ff
 80019e4:	fffffc01 	.word	0xfffffc01
 80019e8:	0800bcbc 	.word	0x0800bcbc
 80019ec:	000003ff 	.word	0x000003ff
 80019f0:	feffffff 	.word	0xfeffffff
 80019f4:	000007fe 	.word	0x000007fe
 80019f8:	000003f3 	.word	0x000003f3
 80019fc:	fffffc0d 	.word	0xfffffc0d
 8001a00:	fffff801 	.word	0xfffff801
 8001a04:	4649      	mov	r1, r9
 8001a06:	2301      	movs	r3, #1
 8001a08:	4319      	orrs	r1, r3
 8001a0a:	4689      	mov	r9, r1
 8001a0c:	2400      	movs	r4, #0
 8001a0e:	2001      	movs	r0, #1
 8001a10:	e66a      	b.n	80016e8 <__aeabi_ddiv+0x80>
 8001a12:	2300      	movs	r3, #0
 8001a14:	2480      	movs	r4, #128	; 0x80
 8001a16:	469a      	mov	sl, r3
 8001a18:	2500      	movs	r5, #0
 8001a1a:	4b8a      	ldr	r3, [pc, #552]	; (8001c44 <__aeabi_ddiv+0x5dc>)
 8001a1c:	0324      	lsls	r4, r4, #12
 8001a1e:	e67a      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001a20:	2501      	movs	r5, #1
 8001a22:	426d      	negs	r5, r5
 8001a24:	2301      	movs	r3, #1
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	2b38      	cmp	r3, #56	; 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_ddiv+0x3c6>
 8001a2c:	e670      	b.n	8001710 <__aeabi_ddiv+0xa8>
 8001a2e:	2b1f      	cmp	r3, #31
 8001a30:	dc00      	bgt.n	8001a34 <__aeabi_ddiv+0x3cc>
 8001a32:	e0bf      	b.n	8001bb4 <__aeabi_ddiv+0x54c>
 8001a34:	211f      	movs	r1, #31
 8001a36:	4249      	negs	r1, r1
 8001a38:	1a8a      	subs	r2, r1, r2
 8001a3a:	4641      	mov	r1, r8
 8001a3c:	40d1      	lsrs	r1, r2
 8001a3e:	000a      	movs	r2, r1
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	d004      	beq.n	8001a4e <__aeabi_ddiv+0x3e6>
 8001a44:	4641      	mov	r1, r8
 8001a46:	4b80      	ldr	r3, [pc, #512]	; (8001c48 <__aeabi_ddiv+0x5e0>)
 8001a48:	445b      	add	r3, fp
 8001a4a:	4099      	lsls	r1, r3
 8001a4c:	430d      	orrs	r5, r1
 8001a4e:	1e6b      	subs	r3, r5, #1
 8001a50:	419d      	sbcs	r5, r3
 8001a52:	2307      	movs	r3, #7
 8001a54:	432a      	orrs	r2, r5
 8001a56:	001d      	movs	r5, r3
 8001a58:	2400      	movs	r4, #0
 8001a5a:	4015      	ands	r5, r2
 8001a5c:	4213      	tst	r3, r2
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_ddiv+0x3fa>
 8001a60:	e0d4      	b.n	8001c0c <__aeabi_ddiv+0x5a4>
 8001a62:	210f      	movs	r1, #15
 8001a64:	2300      	movs	r3, #0
 8001a66:	4011      	ands	r1, r2
 8001a68:	2904      	cmp	r1, #4
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_ddiv+0x406>
 8001a6c:	e0cb      	b.n	8001c06 <__aeabi_ddiv+0x59e>
 8001a6e:	1d11      	adds	r1, r2, #4
 8001a70:	4291      	cmp	r1, r2
 8001a72:	4192      	sbcs	r2, r2
 8001a74:	4252      	negs	r2, r2
 8001a76:	189b      	adds	r3, r3, r2
 8001a78:	000a      	movs	r2, r1
 8001a7a:	0219      	lsls	r1, r3, #8
 8001a7c:	d400      	bmi.n	8001a80 <__aeabi_ddiv+0x418>
 8001a7e:	e0c2      	b.n	8001c06 <__aeabi_ddiv+0x59e>
 8001a80:	2301      	movs	r3, #1
 8001a82:	2400      	movs	r4, #0
 8001a84:	2500      	movs	r5, #0
 8001a86:	e646      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	4641      	mov	r1, r8
 8001a8c:	031b      	lsls	r3, r3, #12
 8001a8e:	4219      	tst	r1, r3
 8001a90:	d008      	beq.n	8001aa4 <__aeabi_ddiv+0x43c>
 8001a92:	421c      	tst	r4, r3
 8001a94:	d106      	bne.n	8001aa4 <__aeabi_ddiv+0x43c>
 8001a96:	431c      	orrs	r4, r3
 8001a98:	0324      	lsls	r4, r4, #12
 8001a9a:	46ba      	mov	sl, r7
 8001a9c:	0015      	movs	r5, r2
 8001a9e:	4b69      	ldr	r3, [pc, #420]	; (8001c44 <__aeabi_ddiv+0x5dc>)
 8001aa0:	0b24      	lsrs	r4, r4, #12
 8001aa2:	e638      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001aa4:	2480      	movs	r4, #128	; 0x80
 8001aa6:	4643      	mov	r3, r8
 8001aa8:	0324      	lsls	r4, r4, #12
 8001aaa:	431c      	orrs	r4, r3
 8001aac:	0324      	lsls	r4, r4, #12
 8001aae:	46b2      	mov	sl, r6
 8001ab0:	4b64      	ldr	r3, [pc, #400]	; (8001c44 <__aeabi_ddiv+0x5dc>)
 8001ab2:	0b24      	lsrs	r4, r4, #12
 8001ab4:	e62f      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d100      	bne.n	8001abc <__aeabi_ddiv+0x454>
 8001aba:	e703      	b.n	80018c4 <__aeabi_ddiv+0x25c>
 8001abc:	19a6      	adds	r6, r4, r6
 8001abe:	1e68      	subs	r0, r5, #1
 8001ac0:	42a6      	cmp	r6, r4
 8001ac2:	d200      	bcs.n	8001ac6 <__aeabi_ddiv+0x45e>
 8001ac4:	e08d      	b.n	8001be2 <__aeabi_ddiv+0x57a>
 8001ac6:	428e      	cmp	r6, r1
 8001ac8:	d200      	bcs.n	8001acc <__aeabi_ddiv+0x464>
 8001aca:	e0a3      	b.n	8001c14 <__aeabi_ddiv+0x5ac>
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_ddiv+0x468>
 8001ace:	e0b3      	b.n	8001c38 <__aeabi_ddiv+0x5d0>
 8001ad0:	0005      	movs	r5, r0
 8001ad2:	e6f5      	b.n	80018c0 <__aeabi_ddiv+0x258>
 8001ad4:	42aa      	cmp	r2, r5
 8001ad6:	d900      	bls.n	8001ada <__aeabi_ddiv+0x472>
 8001ad8:	e639      	b.n	800174e <__aeabi_ddiv+0xe6>
 8001ada:	4643      	mov	r3, r8
 8001adc:	07de      	lsls	r6, r3, #31
 8001ade:	0858      	lsrs	r0, r3, #1
 8001ae0:	086b      	lsrs	r3, r5, #1
 8001ae2:	431e      	orrs	r6, r3
 8001ae4:	07ed      	lsls	r5, r5, #31
 8001ae6:	e639      	b.n	800175c <__aeabi_ddiv+0xf4>
 8001ae8:	4648      	mov	r0, r9
 8001aea:	f001 f937 	bl	8002d5c <__clzsi2>
 8001aee:	0001      	movs	r1, r0
 8001af0:	0002      	movs	r2, r0
 8001af2:	3115      	adds	r1, #21
 8001af4:	3220      	adds	r2, #32
 8001af6:	291c      	cmp	r1, #28
 8001af8:	dc00      	bgt.n	8001afc <__aeabi_ddiv+0x494>
 8001afa:	e72c      	b.n	8001956 <__aeabi_ddiv+0x2ee>
 8001afc:	464b      	mov	r3, r9
 8001afe:	3808      	subs	r0, #8
 8001b00:	4083      	lsls	r3, r0
 8001b02:	2500      	movs	r5, #0
 8001b04:	4698      	mov	r8, r3
 8001b06:	e732      	b.n	800196e <__aeabi_ddiv+0x306>
 8001b08:	f001 f928 	bl	8002d5c <__clzsi2>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	001a      	movs	r2, r3
 8001b10:	3215      	adds	r2, #21
 8001b12:	3020      	adds	r0, #32
 8001b14:	2a1c      	cmp	r2, #28
 8001b16:	dc00      	bgt.n	8001b1a <__aeabi_ddiv+0x4b2>
 8001b18:	e700      	b.n	800191c <__aeabi_ddiv+0x2b4>
 8001b1a:	4654      	mov	r4, sl
 8001b1c:	3b08      	subs	r3, #8
 8001b1e:	2200      	movs	r2, #0
 8001b20:	409c      	lsls	r4, r3
 8001b22:	e705      	b.n	8001930 <__aeabi_ddiv+0x2c8>
 8001b24:	1936      	adds	r6, r6, r4
 8001b26:	3b01      	subs	r3, #1
 8001b28:	42b4      	cmp	r4, r6
 8001b2a:	d900      	bls.n	8001b2e <__aeabi_ddiv+0x4c6>
 8001b2c:	e6a6      	b.n	800187c <__aeabi_ddiv+0x214>
 8001b2e:	42b2      	cmp	r2, r6
 8001b30:	d800      	bhi.n	8001b34 <__aeabi_ddiv+0x4cc>
 8001b32:	e6a3      	b.n	800187c <__aeabi_ddiv+0x214>
 8001b34:	1e83      	subs	r3, r0, #2
 8001b36:	1936      	adds	r6, r6, r4
 8001b38:	e6a0      	b.n	800187c <__aeabi_ddiv+0x214>
 8001b3a:	1909      	adds	r1, r1, r4
 8001b3c:	3d01      	subs	r5, #1
 8001b3e:	428c      	cmp	r4, r1
 8001b40:	d900      	bls.n	8001b44 <__aeabi_ddiv+0x4dc>
 8001b42:	e68d      	b.n	8001860 <__aeabi_ddiv+0x1f8>
 8001b44:	428a      	cmp	r2, r1
 8001b46:	d800      	bhi.n	8001b4a <__aeabi_ddiv+0x4e2>
 8001b48:	e68a      	b.n	8001860 <__aeabi_ddiv+0x1f8>
 8001b4a:	1e85      	subs	r5, r0, #2
 8001b4c:	1909      	adds	r1, r1, r4
 8001b4e:	e687      	b.n	8001860 <__aeabi_ddiv+0x1f8>
 8001b50:	230f      	movs	r3, #15
 8001b52:	402b      	ands	r3, r5
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d100      	bne.n	8001b5a <__aeabi_ddiv+0x4f2>
 8001b58:	e6bc      	b.n	80018d4 <__aeabi_ddiv+0x26c>
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	425b      	negs	r3, r3
 8001b5e:	42ab      	cmp	r3, r5
 8001b60:	419b      	sbcs	r3, r3
 8001b62:	3504      	adds	r5, #4
 8001b64:	425b      	negs	r3, r3
 8001b66:	08ed      	lsrs	r5, r5, #3
 8001b68:	4498      	add	r8, r3
 8001b6a:	e6b4      	b.n	80018d6 <__aeabi_ddiv+0x26e>
 8001b6c:	42af      	cmp	r7, r5
 8001b6e:	d900      	bls.n	8001b72 <__aeabi_ddiv+0x50a>
 8001b70:	e660      	b.n	8001834 <__aeabi_ddiv+0x1cc>
 8001b72:	4282      	cmp	r2, r0
 8001b74:	d804      	bhi.n	8001b80 <__aeabi_ddiv+0x518>
 8001b76:	d000      	beq.n	8001b7a <__aeabi_ddiv+0x512>
 8001b78:	e65c      	b.n	8001834 <__aeabi_ddiv+0x1cc>
 8001b7a:	42ae      	cmp	r6, r5
 8001b7c:	d800      	bhi.n	8001b80 <__aeabi_ddiv+0x518>
 8001b7e:	e659      	b.n	8001834 <__aeabi_ddiv+0x1cc>
 8001b80:	2302      	movs	r3, #2
 8001b82:	425b      	negs	r3, r3
 8001b84:	469c      	mov	ip, r3
 8001b86:	9b00      	ldr	r3, [sp, #0]
 8001b88:	44e0      	add	r8, ip
 8001b8a:	469c      	mov	ip, r3
 8001b8c:	4465      	add	r5, ip
 8001b8e:	429d      	cmp	r5, r3
 8001b90:	419b      	sbcs	r3, r3
 8001b92:	425b      	negs	r3, r3
 8001b94:	191b      	adds	r3, r3, r4
 8001b96:	18c0      	adds	r0, r0, r3
 8001b98:	e64d      	b.n	8001836 <__aeabi_ddiv+0x1ce>
 8001b9a:	428a      	cmp	r2, r1
 8001b9c:	d800      	bhi.n	8001ba0 <__aeabi_ddiv+0x538>
 8001b9e:	e60e      	b.n	80017be <__aeabi_ddiv+0x156>
 8001ba0:	1e83      	subs	r3, r0, #2
 8001ba2:	1909      	adds	r1, r1, r4
 8001ba4:	e60b      	b.n	80017be <__aeabi_ddiv+0x156>
 8001ba6:	428a      	cmp	r2, r1
 8001ba8:	d800      	bhi.n	8001bac <__aeabi_ddiv+0x544>
 8001baa:	e5f4      	b.n	8001796 <__aeabi_ddiv+0x12e>
 8001bac:	1e83      	subs	r3, r0, #2
 8001bae:	4698      	mov	r8, r3
 8001bb0:	1909      	adds	r1, r1, r4
 8001bb2:	e5f0      	b.n	8001796 <__aeabi_ddiv+0x12e>
 8001bb4:	4925      	ldr	r1, [pc, #148]	; (8001c4c <__aeabi_ddiv+0x5e4>)
 8001bb6:	0028      	movs	r0, r5
 8001bb8:	4459      	add	r1, fp
 8001bba:	408d      	lsls	r5, r1
 8001bbc:	4642      	mov	r2, r8
 8001bbe:	408a      	lsls	r2, r1
 8001bc0:	1e69      	subs	r1, r5, #1
 8001bc2:	418d      	sbcs	r5, r1
 8001bc4:	4641      	mov	r1, r8
 8001bc6:	40d8      	lsrs	r0, r3
 8001bc8:	40d9      	lsrs	r1, r3
 8001bca:	4302      	orrs	r2, r0
 8001bcc:	432a      	orrs	r2, r5
 8001bce:	000b      	movs	r3, r1
 8001bd0:	0751      	lsls	r1, r2, #29
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_ddiv+0x56e>
 8001bd4:	e751      	b.n	8001a7a <__aeabi_ddiv+0x412>
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	4011      	ands	r1, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d000      	beq.n	8001be0 <__aeabi_ddiv+0x578>
 8001bde:	e746      	b.n	8001a6e <__aeabi_ddiv+0x406>
 8001be0:	e74b      	b.n	8001a7a <__aeabi_ddiv+0x412>
 8001be2:	0005      	movs	r5, r0
 8001be4:	428e      	cmp	r6, r1
 8001be6:	d000      	beq.n	8001bea <__aeabi_ddiv+0x582>
 8001be8:	e66a      	b.n	80018c0 <__aeabi_ddiv+0x258>
 8001bea:	9a00      	ldr	r2, [sp, #0]
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d000      	beq.n	8001bf2 <__aeabi_ddiv+0x58a>
 8001bf0:	e666      	b.n	80018c0 <__aeabi_ddiv+0x258>
 8001bf2:	e667      	b.n	80018c4 <__aeabi_ddiv+0x25c>
 8001bf4:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <__aeabi_ddiv+0x5e8>)
 8001bf6:	445a      	add	r2, fp
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	dc00      	bgt.n	8001bfe <__aeabi_ddiv+0x596>
 8001bfc:	e710      	b.n	8001a20 <__aeabi_ddiv+0x3b8>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	2500      	movs	r5, #0
 8001c02:	4498      	add	r8, r3
 8001c04:	e667      	b.n	80018d6 <__aeabi_ddiv+0x26e>
 8001c06:	075d      	lsls	r5, r3, #29
 8001c08:	025b      	lsls	r3, r3, #9
 8001c0a:	0b1c      	lsrs	r4, r3, #12
 8001c0c:	08d2      	lsrs	r2, r2, #3
 8001c0e:	2300      	movs	r3, #0
 8001c10:	4315      	orrs	r5, r2
 8001c12:	e580      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001c14:	9800      	ldr	r0, [sp, #0]
 8001c16:	3d02      	subs	r5, #2
 8001c18:	0042      	lsls	r2, r0, #1
 8001c1a:	4282      	cmp	r2, r0
 8001c1c:	41bf      	sbcs	r7, r7
 8001c1e:	427f      	negs	r7, r7
 8001c20:	193c      	adds	r4, r7, r4
 8001c22:	1936      	adds	r6, r6, r4
 8001c24:	9200      	str	r2, [sp, #0]
 8001c26:	e7dd      	b.n	8001be4 <__aeabi_ddiv+0x57c>
 8001c28:	2480      	movs	r4, #128	; 0x80
 8001c2a:	4643      	mov	r3, r8
 8001c2c:	0324      	lsls	r4, r4, #12
 8001c2e:	431c      	orrs	r4, r3
 8001c30:	0324      	lsls	r4, r4, #12
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <__aeabi_ddiv+0x5dc>)
 8001c34:	0b24      	lsrs	r4, r4, #12
 8001c36:	e56e      	b.n	8001716 <__aeabi_ddiv+0xae>
 8001c38:	9a00      	ldr	r2, [sp, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d3ea      	bcc.n	8001c14 <__aeabi_ddiv+0x5ac>
 8001c3e:	0005      	movs	r5, r0
 8001c40:	e7d3      	b.n	8001bea <__aeabi_ddiv+0x582>
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	000007ff 	.word	0x000007ff
 8001c48:	0000043e 	.word	0x0000043e
 8001c4c:	0000041e 	.word	0x0000041e
 8001c50:	000003ff 	.word	0x000003ff

08001c54 <__eqdf2>:
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c56:	464e      	mov	r6, r9
 8001c58:	4645      	mov	r5, r8
 8001c5a:	46de      	mov	lr, fp
 8001c5c:	4657      	mov	r7, sl
 8001c5e:	4690      	mov	r8, r2
 8001c60:	b5e0      	push	{r5, r6, r7, lr}
 8001c62:	0017      	movs	r7, r2
 8001c64:	031a      	lsls	r2, r3, #12
 8001c66:	0b12      	lsrs	r2, r2, #12
 8001c68:	0005      	movs	r5, r0
 8001c6a:	4684      	mov	ip, r0
 8001c6c:	4819      	ldr	r0, [pc, #100]	; (8001cd4 <__eqdf2+0x80>)
 8001c6e:	030e      	lsls	r6, r1, #12
 8001c70:	004c      	lsls	r4, r1, #1
 8001c72:	4691      	mov	r9, r2
 8001c74:	005a      	lsls	r2, r3, #1
 8001c76:	0fdb      	lsrs	r3, r3, #31
 8001c78:	469b      	mov	fp, r3
 8001c7a:	0b36      	lsrs	r6, r6, #12
 8001c7c:	0d64      	lsrs	r4, r4, #21
 8001c7e:	0fc9      	lsrs	r1, r1, #31
 8001c80:	0d52      	lsrs	r2, r2, #21
 8001c82:	4284      	cmp	r4, r0
 8001c84:	d019      	beq.n	8001cba <__eqdf2+0x66>
 8001c86:	4282      	cmp	r2, r0
 8001c88:	d010      	beq.n	8001cac <__eqdf2+0x58>
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	4294      	cmp	r4, r2
 8001c8e:	d10e      	bne.n	8001cae <__eqdf2+0x5a>
 8001c90:	454e      	cmp	r6, r9
 8001c92:	d10c      	bne.n	8001cae <__eqdf2+0x5a>
 8001c94:	2001      	movs	r0, #1
 8001c96:	45c4      	cmp	ip, r8
 8001c98:	d109      	bne.n	8001cae <__eqdf2+0x5a>
 8001c9a:	4559      	cmp	r1, fp
 8001c9c:	d017      	beq.n	8001cce <__eqdf2+0x7a>
 8001c9e:	2c00      	cmp	r4, #0
 8001ca0:	d105      	bne.n	8001cae <__eqdf2+0x5a>
 8001ca2:	0030      	movs	r0, r6
 8001ca4:	4328      	orrs	r0, r5
 8001ca6:	1e43      	subs	r3, r0, #1
 8001ca8:	4198      	sbcs	r0, r3
 8001caa:	e000      	b.n	8001cae <__eqdf2+0x5a>
 8001cac:	2001      	movs	r0, #1
 8001cae:	bcf0      	pop	{r4, r5, r6, r7}
 8001cb0:	46bb      	mov	fp, r7
 8001cb2:	46b2      	mov	sl, r6
 8001cb4:	46a9      	mov	r9, r5
 8001cb6:	46a0      	mov	r8, r4
 8001cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cba:	0033      	movs	r3, r6
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	432b      	orrs	r3, r5
 8001cc0:	d1f5      	bne.n	8001cae <__eqdf2+0x5a>
 8001cc2:	42a2      	cmp	r2, r4
 8001cc4:	d1f3      	bne.n	8001cae <__eqdf2+0x5a>
 8001cc6:	464b      	mov	r3, r9
 8001cc8:	433b      	orrs	r3, r7
 8001cca:	d1f0      	bne.n	8001cae <__eqdf2+0x5a>
 8001ccc:	e7e2      	b.n	8001c94 <__eqdf2+0x40>
 8001cce:	2000      	movs	r0, #0
 8001cd0:	e7ed      	b.n	8001cae <__eqdf2+0x5a>
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	000007ff 	.word	0x000007ff

08001cd8 <__gedf2>:
 8001cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cda:	4647      	mov	r7, r8
 8001cdc:	46ce      	mov	lr, r9
 8001cde:	0004      	movs	r4, r0
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	0016      	movs	r6, r2
 8001ce4:	031b      	lsls	r3, r3, #12
 8001ce6:	0b1b      	lsrs	r3, r3, #12
 8001ce8:	4d2d      	ldr	r5, [pc, #180]	; (8001da0 <__gedf2+0xc8>)
 8001cea:	004a      	lsls	r2, r1, #1
 8001cec:	4699      	mov	r9, r3
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	0043      	lsls	r3, r0, #1
 8001cf2:	030f      	lsls	r7, r1, #12
 8001cf4:	46a4      	mov	ip, r4
 8001cf6:	46b0      	mov	r8, r6
 8001cf8:	0b3f      	lsrs	r7, r7, #12
 8001cfa:	0d52      	lsrs	r2, r2, #21
 8001cfc:	0fc9      	lsrs	r1, r1, #31
 8001cfe:	0d5b      	lsrs	r3, r3, #21
 8001d00:	0fc0      	lsrs	r0, r0, #31
 8001d02:	42aa      	cmp	r2, r5
 8001d04:	d021      	beq.n	8001d4a <__gedf2+0x72>
 8001d06:	42ab      	cmp	r3, r5
 8001d08:	d013      	beq.n	8001d32 <__gedf2+0x5a>
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	d122      	bne.n	8001d54 <__gedf2+0x7c>
 8001d0e:	433c      	orrs	r4, r7
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <__gedf2+0x42>
 8001d14:	464d      	mov	r5, r9
 8001d16:	432e      	orrs	r6, r5
 8001d18:	d022      	beq.n	8001d60 <__gedf2+0x88>
 8001d1a:	2c00      	cmp	r4, #0
 8001d1c:	d010      	beq.n	8001d40 <__gedf2+0x68>
 8001d1e:	4281      	cmp	r1, r0
 8001d20:	d022      	beq.n	8001d68 <__gedf2+0x90>
 8001d22:	2002      	movs	r0, #2
 8001d24:	3901      	subs	r1, #1
 8001d26:	4008      	ands	r0, r1
 8001d28:	3801      	subs	r0, #1
 8001d2a:	bcc0      	pop	{r6, r7}
 8001d2c:	46b9      	mov	r9, r7
 8001d2e:	46b0      	mov	r8, r6
 8001d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d32:	464d      	mov	r5, r9
 8001d34:	432e      	orrs	r6, r5
 8001d36:	d129      	bne.n	8001d8c <__gedf2+0xb4>
 8001d38:	2a00      	cmp	r2, #0
 8001d3a:	d1f0      	bne.n	8001d1e <__gedf2+0x46>
 8001d3c:	433c      	orrs	r4, r7
 8001d3e:	d1ee      	bne.n	8001d1e <__gedf2+0x46>
 8001d40:	2800      	cmp	r0, #0
 8001d42:	d1f2      	bne.n	8001d2a <__gedf2+0x52>
 8001d44:	2001      	movs	r0, #1
 8001d46:	4240      	negs	r0, r0
 8001d48:	e7ef      	b.n	8001d2a <__gedf2+0x52>
 8001d4a:	003d      	movs	r5, r7
 8001d4c:	4325      	orrs	r5, r4
 8001d4e:	d11d      	bne.n	8001d8c <__gedf2+0xb4>
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d0ee      	beq.n	8001d32 <__gedf2+0x5a>
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1e2      	bne.n	8001d1e <__gedf2+0x46>
 8001d58:	464c      	mov	r4, r9
 8001d5a:	4326      	orrs	r6, r4
 8001d5c:	d1df      	bne.n	8001d1e <__gedf2+0x46>
 8001d5e:	e7e0      	b.n	8001d22 <__gedf2+0x4a>
 8001d60:	2000      	movs	r0, #0
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	d0e1      	beq.n	8001d2a <__gedf2+0x52>
 8001d66:	e7dc      	b.n	8001d22 <__gedf2+0x4a>
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dc0a      	bgt.n	8001d82 <__gedf2+0xaa>
 8001d6c:	dbe8      	blt.n	8001d40 <__gedf2+0x68>
 8001d6e:	454f      	cmp	r7, r9
 8001d70:	d8d7      	bhi.n	8001d22 <__gedf2+0x4a>
 8001d72:	d00e      	beq.n	8001d92 <__gedf2+0xba>
 8001d74:	2000      	movs	r0, #0
 8001d76:	454f      	cmp	r7, r9
 8001d78:	d2d7      	bcs.n	8001d2a <__gedf2+0x52>
 8001d7a:	2900      	cmp	r1, #0
 8001d7c:	d0e2      	beq.n	8001d44 <__gedf2+0x6c>
 8001d7e:	0008      	movs	r0, r1
 8001d80:	e7d3      	b.n	8001d2a <__gedf2+0x52>
 8001d82:	4243      	negs	r3, r0
 8001d84:	4158      	adcs	r0, r3
 8001d86:	0040      	lsls	r0, r0, #1
 8001d88:	3801      	subs	r0, #1
 8001d8a:	e7ce      	b.n	8001d2a <__gedf2+0x52>
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	4240      	negs	r0, r0
 8001d90:	e7cb      	b.n	8001d2a <__gedf2+0x52>
 8001d92:	45c4      	cmp	ip, r8
 8001d94:	d8c5      	bhi.n	8001d22 <__gedf2+0x4a>
 8001d96:	2000      	movs	r0, #0
 8001d98:	45c4      	cmp	ip, r8
 8001d9a:	d2c6      	bcs.n	8001d2a <__gedf2+0x52>
 8001d9c:	e7ed      	b.n	8001d7a <__gedf2+0xa2>
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	000007ff 	.word	0x000007ff

08001da4 <__ledf2>:
 8001da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da6:	4647      	mov	r7, r8
 8001da8:	46ce      	mov	lr, r9
 8001daa:	0004      	movs	r4, r0
 8001dac:	0018      	movs	r0, r3
 8001dae:	0016      	movs	r6, r2
 8001db0:	031b      	lsls	r3, r3, #12
 8001db2:	0b1b      	lsrs	r3, r3, #12
 8001db4:	4d2c      	ldr	r5, [pc, #176]	; (8001e68 <__ledf2+0xc4>)
 8001db6:	004a      	lsls	r2, r1, #1
 8001db8:	4699      	mov	r9, r3
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	0043      	lsls	r3, r0, #1
 8001dbe:	030f      	lsls	r7, r1, #12
 8001dc0:	46a4      	mov	ip, r4
 8001dc2:	46b0      	mov	r8, r6
 8001dc4:	0b3f      	lsrs	r7, r7, #12
 8001dc6:	0d52      	lsrs	r2, r2, #21
 8001dc8:	0fc9      	lsrs	r1, r1, #31
 8001dca:	0d5b      	lsrs	r3, r3, #21
 8001dcc:	0fc0      	lsrs	r0, r0, #31
 8001dce:	42aa      	cmp	r2, r5
 8001dd0:	d00d      	beq.n	8001dee <__ledf2+0x4a>
 8001dd2:	42ab      	cmp	r3, r5
 8001dd4:	d010      	beq.n	8001df8 <__ledf2+0x54>
 8001dd6:	2a00      	cmp	r2, #0
 8001dd8:	d127      	bne.n	8001e2a <__ledf2+0x86>
 8001dda:	433c      	orrs	r4, r7
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d111      	bne.n	8001e04 <__ledf2+0x60>
 8001de0:	464d      	mov	r5, r9
 8001de2:	432e      	orrs	r6, r5
 8001de4:	d10e      	bne.n	8001e04 <__ledf2+0x60>
 8001de6:	2000      	movs	r0, #0
 8001de8:	2c00      	cmp	r4, #0
 8001dea:	d015      	beq.n	8001e18 <__ledf2+0x74>
 8001dec:	e00e      	b.n	8001e0c <__ledf2+0x68>
 8001dee:	003d      	movs	r5, r7
 8001df0:	4325      	orrs	r5, r4
 8001df2:	d110      	bne.n	8001e16 <__ledf2+0x72>
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d118      	bne.n	8001e2a <__ledf2+0x86>
 8001df8:	464d      	mov	r5, r9
 8001dfa:	432e      	orrs	r6, r5
 8001dfc:	d10b      	bne.n	8001e16 <__ledf2+0x72>
 8001dfe:	2a00      	cmp	r2, #0
 8001e00:	d102      	bne.n	8001e08 <__ledf2+0x64>
 8001e02:	433c      	orrs	r4, r7
 8001e04:	2c00      	cmp	r4, #0
 8001e06:	d00b      	beq.n	8001e20 <__ledf2+0x7c>
 8001e08:	4281      	cmp	r1, r0
 8001e0a:	d014      	beq.n	8001e36 <__ledf2+0x92>
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	3901      	subs	r1, #1
 8001e10:	4008      	ands	r0, r1
 8001e12:	3801      	subs	r0, #1
 8001e14:	e000      	b.n	8001e18 <__ledf2+0x74>
 8001e16:	2002      	movs	r0, #2
 8001e18:	bcc0      	pop	{r6, r7}
 8001e1a:	46b9      	mov	r9, r7
 8001e1c:	46b0      	mov	r8, r6
 8001e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d1f9      	bne.n	8001e18 <__ledf2+0x74>
 8001e24:	2001      	movs	r0, #1
 8001e26:	4240      	negs	r0, r0
 8001e28:	e7f6      	b.n	8001e18 <__ledf2+0x74>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ec      	bne.n	8001e08 <__ledf2+0x64>
 8001e2e:	464c      	mov	r4, r9
 8001e30:	4326      	orrs	r6, r4
 8001e32:	d1e9      	bne.n	8001e08 <__ledf2+0x64>
 8001e34:	e7ea      	b.n	8001e0c <__ledf2+0x68>
 8001e36:	429a      	cmp	r2, r3
 8001e38:	dd04      	ble.n	8001e44 <__ledf2+0xa0>
 8001e3a:	4243      	negs	r3, r0
 8001e3c:	4158      	adcs	r0, r3
 8001e3e:	0040      	lsls	r0, r0, #1
 8001e40:	3801      	subs	r0, #1
 8001e42:	e7e9      	b.n	8001e18 <__ledf2+0x74>
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dbeb      	blt.n	8001e20 <__ledf2+0x7c>
 8001e48:	454f      	cmp	r7, r9
 8001e4a:	d8df      	bhi.n	8001e0c <__ledf2+0x68>
 8001e4c:	d006      	beq.n	8001e5c <__ledf2+0xb8>
 8001e4e:	2000      	movs	r0, #0
 8001e50:	454f      	cmp	r7, r9
 8001e52:	d2e1      	bcs.n	8001e18 <__ledf2+0x74>
 8001e54:	2900      	cmp	r1, #0
 8001e56:	d0e5      	beq.n	8001e24 <__ledf2+0x80>
 8001e58:	0008      	movs	r0, r1
 8001e5a:	e7dd      	b.n	8001e18 <__ledf2+0x74>
 8001e5c:	45c4      	cmp	ip, r8
 8001e5e:	d8d5      	bhi.n	8001e0c <__ledf2+0x68>
 8001e60:	2000      	movs	r0, #0
 8001e62:	45c4      	cmp	ip, r8
 8001e64:	d2d8      	bcs.n	8001e18 <__ledf2+0x74>
 8001e66:	e7f5      	b.n	8001e54 <__ledf2+0xb0>
 8001e68:	000007ff 	.word	0x000007ff

08001e6c <__aeabi_dmul>:
 8001e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e6e:	4657      	mov	r7, sl
 8001e70:	464e      	mov	r6, r9
 8001e72:	4645      	mov	r5, r8
 8001e74:	46de      	mov	lr, fp
 8001e76:	b5e0      	push	{r5, r6, r7, lr}
 8001e78:	4698      	mov	r8, r3
 8001e7a:	030c      	lsls	r4, r1, #12
 8001e7c:	004b      	lsls	r3, r1, #1
 8001e7e:	0006      	movs	r6, r0
 8001e80:	4692      	mov	sl, r2
 8001e82:	b087      	sub	sp, #28
 8001e84:	0b24      	lsrs	r4, r4, #12
 8001e86:	0d5b      	lsrs	r3, r3, #21
 8001e88:	0fcf      	lsrs	r7, r1, #31
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x24>
 8001e8e:	e15c      	b.n	800214a <__aeabi_dmul+0x2de>
 8001e90:	4ad9      	ldr	r2, [pc, #868]	; (80021f8 <__aeabi_dmul+0x38c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x2c>
 8001e96:	e175      	b.n	8002184 <__aeabi_dmul+0x318>
 8001e98:	0f42      	lsrs	r2, r0, #29
 8001e9a:	00e4      	lsls	r4, r4, #3
 8001e9c:	4314      	orrs	r4, r2
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	0412      	lsls	r2, r2, #16
 8001ea2:	4314      	orrs	r4, r2
 8001ea4:	4ad5      	ldr	r2, [pc, #852]	; (80021fc <__aeabi_dmul+0x390>)
 8001ea6:	00c5      	lsls	r5, r0, #3
 8001ea8:	4694      	mov	ip, r2
 8001eaa:	4463      	add	r3, ip
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	4699      	mov	r9, r3
 8001eb2:	469b      	mov	fp, r3
 8001eb4:	4643      	mov	r3, r8
 8001eb6:	4642      	mov	r2, r8
 8001eb8:	031e      	lsls	r6, r3, #12
 8001eba:	0fd2      	lsrs	r2, r2, #31
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4650      	mov	r0, sl
 8001ec0:	4690      	mov	r8, r2
 8001ec2:	0b36      	lsrs	r6, r6, #12
 8001ec4:	0d5b      	lsrs	r3, r3, #21
 8001ec6:	d100      	bne.n	8001eca <__aeabi_dmul+0x5e>
 8001ec8:	e120      	b.n	800210c <__aeabi_dmul+0x2a0>
 8001eca:	4acb      	ldr	r2, [pc, #812]	; (80021f8 <__aeabi_dmul+0x38c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_dmul+0x66>
 8001ed0:	e162      	b.n	8002198 <__aeabi_dmul+0x32c>
 8001ed2:	49ca      	ldr	r1, [pc, #808]	; (80021fc <__aeabi_dmul+0x390>)
 8001ed4:	0f42      	lsrs	r2, r0, #29
 8001ed6:	468c      	mov	ip, r1
 8001ed8:	9900      	ldr	r1, [sp, #0]
 8001eda:	4463      	add	r3, ip
 8001edc:	00f6      	lsls	r6, r6, #3
 8001ede:	468c      	mov	ip, r1
 8001ee0:	4316      	orrs	r6, r2
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	449c      	add	ip, r3
 8001ee6:	0412      	lsls	r2, r2, #16
 8001ee8:	4663      	mov	r3, ip
 8001eea:	4316      	orrs	r6, r2
 8001eec:	00c2      	lsls	r2, r0, #3
 8001eee:	2000      	movs	r0, #0
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	9900      	ldr	r1, [sp, #0]
 8001ef4:	4643      	mov	r3, r8
 8001ef6:	3101      	adds	r1, #1
 8001ef8:	468c      	mov	ip, r1
 8001efa:	4649      	mov	r1, r9
 8001efc:	407b      	eors	r3, r7
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	290f      	cmp	r1, #15
 8001f02:	d826      	bhi.n	8001f52 <__aeabi_dmul+0xe6>
 8001f04:	4bbe      	ldr	r3, [pc, #760]	; (8002200 <__aeabi_dmul+0x394>)
 8001f06:	0089      	lsls	r1, r1, #2
 8001f08:	5859      	ldr	r1, [r3, r1]
 8001f0a:	468f      	mov	pc, r1
 8001f0c:	4643      	mov	r3, r8
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	0034      	movs	r4, r6
 8001f12:	0015      	movs	r5, r2
 8001f14:	4683      	mov	fp, r0
 8001f16:	465b      	mov	r3, fp
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d016      	beq.n	8001f4a <__aeabi_dmul+0xde>
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_dmul+0xb6>
 8001f20:	e203      	b.n	800232a <__aeabi_dmul+0x4be>
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dmul+0xbc>
 8001f26:	e0cd      	b.n	80020c4 <__aeabi_dmul+0x258>
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2400      	movs	r4, #0
 8001f2c:	2500      	movs	r5, #0
 8001f2e:	9b01      	ldr	r3, [sp, #4]
 8001f30:	0512      	lsls	r2, r2, #20
 8001f32:	4322      	orrs	r2, r4
 8001f34:	07db      	lsls	r3, r3, #31
 8001f36:	431a      	orrs	r2, r3
 8001f38:	0028      	movs	r0, r5
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	b007      	add	sp, #28
 8001f3e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f40:	46bb      	mov	fp, r7
 8001f42:	46b2      	mov	sl, r6
 8001f44:	46a9      	mov	r9, r5
 8001f46:	46a0      	mov	r8, r4
 8001f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f4a:	2400      	movs	r4, #0
 8001f4c:	2500      	movs	r5, #0
 8001f4e:	4aaa      	ldr	r2, [pc, #680]	; (80021f8 <__aeabi_dmul+0x38c>)
 8001f50:	e7ed      	b.n	8001f2e <__aeabi_dmul+0xc2>
 8001f52:	0c28      	lsrs	r0, r5, #16
 8001f54:	042d      	lsls	r5, r5, #16
 8001f56:	0c2d      	lsrs	r5, r5, #16
 8001f58:	002b      	movs	r3, r5
 8001f5a:	0c11      	lsrs	r1, r2, #16
 8001f5c:	0412      	lsls	r2, r2, #16
 8001f5e:	0c12      	lsrs	r2, r2, #16
 8001f60:	4353      	muls	r3, r2
 8001f62:	4698      	mov	r8, r3
 8001f64:	0013      	movs	r3, r2
 8001f66:	002f      	movs	r7, r5
 8001f68:	4343      	muls	r3, r0
 8001f6a:	4699      	mov	r9, r3
 8001f6c:	434f      	muls	r7, r1
 8001f6e:	444f      	add	r7, r9
 8001f70:	46bb      	mov	fp, r7
 8001f72:	4647      	mov	r7, r8
 8001f74:	000b      	movs	r3, r1
 8001f76:	0c3f      	lsrs	r7, r7, #16
 8001f78:	46ba      	mov	sl, r7
 8001f7a:	4343      	muls	r3, r0
 8001f7c:	44da      	add	sl, fp
 8001f7e:	9302      	str	r3, [sp, #8]
 8001f80:	45d1      	cmp	r9, sl
 8001f82:	d904      	bls.n	8001f8e <__aeabi_dmul+0x122>
 8001f84:	2780      	movs	r7, #128	; 0x80
 8001f86:	027f      	lsls	r7, r7, #9
 8001f88:	46b9      	mov	r9, r7
 8001f8a:	444b      	add	r3, r9
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	4653      	mov	r3, sl
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	469b      	mov	fp, r3
 8001f94:	4653      	mov	r3, sl
 8001f96:	041f      	lsls	r7, r3, #16
 8001f98:	4643      	mov	r3, r8
 8001f9a:	041b      	lsls	r3, r3, #16
 8001f9c:	0c1b      	lsrs	r3, r3, #16
 8001f9e:	4698      	mov	r8, r3
 8001fa0:	003b      	movs	r3, r7
 8001fa2:	4443      	add	r3, r8
 8001fa4:	9304      	str	r3, [sp, #16]
 8001fa6:	0c33      	lsrs	r3, r6, #16
 8001fa8:	0436      	lsls	r6, r6, #16
 8001faa:	0c36      	lsrs	r6, r6, #16
 8001fac:	4698      	mov	r8, r3
 8001fae:	0033      	movs	r3, r6
 8001fb0:	4343      	muls	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	4643      	mov	r3, r8
 8001fb6:	4343      	muls	r3, r0
 8001fb8:	002f      	movs	r7, r5
 8001fba:	469a      	mov	sl, r3
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	4377      	muls	r7, r6
 8001fc0:	435d      	muls	r5, r3
 8001fc2:	0c38      	lsrs	r0, r7, #16
 8001fc4:	444d      	add	r5, r9
 8001fc6:	1945      	adds	r5, r0, r5
 8001fc8:	45a9      	cmp	r9, r5
 8001fca:	d903      	bls.n	8001fd4 <__aeabi_dmul+0x168>
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	025b      	lsls	r3, r3, #9
 8001fd0:	4699      	mov	r9, r3
 8001fd2:	44ca      	add	sl, r9
 8001fd4:	043f      	lsls	r7, r7, #16
 8001fd6:	0c28      	lsrs	r0, r5, #16
 8001fd8:	0c3f      	lsrs	r7, r7, #16
 8001fda:	042d      	lsls	r5, r5, #16
 8001fdc:	19ed      	adds	r5, r5, r7
 8001fde:	0c27      	lsrs	r7, r4, #16
 8001fe0:	0424      	lsls	r4, r4, #16
 8001fe2:	0c24      	lsrs	r4, r4, #16
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	0020      	movs	r0, r4
 8001fe8:	4350      	muls	r0, r2
 8001fea:	437a      	muls	r2, r7
 8001fec:	4691      	mov	r9, r2
 8001fee:	003a      	movs	r2, r7
 8001ff0:	4453      	add	r3, sl
 8001ff2:	9305      	str	r3, [sp, #20]
 8001ff4:	0c03      	lsrs	r3, r0, #16
 8001ff6:	469a      	mov	sl, r3
 8001ff8:	434a      	muls	r2, r1
 8001ffa:	4361      	muls	r1, r4
 8001ffc:	4449      	add	r1, r9
 8001ffe:	4451      	add	r1, sl
 8002000:	44ab      	add	fp, r5
 8002002:	4589      	cmp	r9, r1
 8002004:	d903      	bls.n	800200e <__aeabi_dmul+0x1a2>
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	025b      	lsls	r3, r3, #9
 800200a:	4699      	mov	r9, r3
 800200c:	444a      	add	r2, r9
 800200e:	0400      	lsls	r0, r0, #16
 8002010:	0c0b      	lsrs	r3, r1, #16
 8002012:	0c00      	lsrs	r0, r0, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	1809      	adds	r1, r1, r0
 8002018:	0020      	movs	r0, r4
 800201a:	4699      	mov	r9, r3
 800201c:	4643      	mov	r3, r8
 800201e:	4370      	muls	r0, r6
 8002020:	435c      	muls	r4, r3
 8002022:	437e      	muls	r6, r7
 8002024:	435f      	muls	r7, r3
 8002026:	0c03      	lsrs	r3, r0, #16
 8002028:	4698      	mov	r8, r3
 800202a:	19a4      	adds	r4, r4, r6
 800202c:	4444      	add	r4, r8
 800202e:	444a      	add	r2, r9
 8002030:	9703      	str	r7, [sp, #12]
 8002032:	42a6      	cmp	r6, r4
 8002034:	d904      	bls.n	8002040 <__aeabi_dmul+0x1d4>
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	025b      	lsls	r3, r3, #9
 800203a:	4698      	mov	r8, r3
 800203c:	4447      	add	r7, r8
 800203e:	9703      	str	r7, [sp, #12]
 8002040:	0423      	lsls	r3, r4, #16
 8002042:	9e02      	ldr	r6, [sp, #8]
 8002044:	469a      	mov	sl, r3
 8002046:	9b05      	ldr	r3, [sp, #20]
 8002048:	445e      	add	r6, fp
 800204a:	4698      	mov	r8, r3
 800204c:	42ae      	cmp	r6, r5
 800204e:	41ad      	sbcs	r5, r5
 8002050:	1876      	adds	r6, r6, r1
 8002052:	428e      	cmp	r6, r1
 8002054:	4189      	sbcs	r1, r1
 8002056:	0400      	lsls	r0, r0, #16
 8002058:	0c00      	lsrs	r0, r0, #16
 800205a:	4450      	add	r0, sl
 800205c:	4440      	add	r0, r8
 800205e:	426d      	negs	r5, r5
 8002060:	1947      	adds	r7, r0, r5
 8002062:	46b8      	mov	r8, r7
 8002064:	4693      	mov	fp, r2
 8002066:	4249      	negs	r1, r1
 8002068:	4689      	mov	r9, r1
 800206a:	44c3      	add	fp, r8
 800206c:	44d9      	add	r9, fp
 800206e:	4298      	cmp	r0, r3
 8002070:	4180      	sbcs	r0, r0
 8002072:	45a8      	cmp	r8, r5
 8002074:	41ad      	sbcs	r5, r5
 8002076:	4593      	cmp	fp, r2
 8002078:	4192      	sbcs	r2, r2
 800207a:	4589      	cmp	r9, r1
 800207c:	4189      	sbcs	r1, r1
 800207e:	426d      	negs	r5, r5
 8002080:	4240      	negs	r0, r0
 8002082:	4328      	orrs	r0, r5
 8002084:	0c24      	lsrs	r4, r4, #16
 8002086:	4252      	negs	r2, r2
 8002088:	4249      	negs	r1, r1
 800208a:	430a      	orrs	r2, r1
 800208c:	9b03      	ldr	r3, [sp, #12]
 800208e:	1900      	adds	r0, r0, r4
 8002090:	1880      	adds	r0, r0, r2
 8002092:	18c7      	adds	r7, r0, r3
 8002094:	464b      	mov	r3, r9
 8002096:	0ddc      	lsrs	r4, r3, #23
 8002098:	9b04      	ldr	r3, [sp, #16]
 800209a:	0275      	lsls	r5, r6, #9
 800209c:	431d      	orrs	r5, r3
 800209e:	1e6a      	subs	r2, r5, #1
 80020a0:	4195      	sbcs	r5, r2
 80020a2:	464b      	mov	r3, r9
 80020a4:	0df6      	lsrs	r6, r6, #23
 80020a6:	027f      	lsls	r7, r7, #9
 80020a8:	4335      	orrs	r5, r6
 80020aa:	025a      	lsls	r2, r3, #9
 80020ac:	433c      	orrs	r4, r7
 80020ae:	4315      	orrs	r5, r2
 80020b0:	01fb      	lsls	r3, r7, #7
 80020b2:	d400      	bmi.n	80020b6 <__aeabi_dmul+0x24a>
 80020b4:	e11c      	b.n	80022f0 <__aeabi_dmul+0x484>
 80020b6:	2101      	movs	r1, #1
 80020b8:	086a      	lsrs	r2, r5, #1
 80020ba:	400d      	ands	r5, r1
 80020bc:	4315      	orrs	r5, r2
 80020be:	07e2      	lsls	r2, r4, #31
 80020c0:	4315      	orrs	r5, r2
 80020c2:	0864      	lsrs	r4, r4, #1
 80020c4:	494f      	ldr	r1, [pc, #316]	; (8002204 <__aeabi_dmul+0x398>)
 80020c6:	4461      	add	r1, ip
 80020c8:	2900      	cmp	r1, #0
 80020ca:	dc00      	bgt.n	80020ce <__aeabi_dmul+0x262>
 80020cc:	e0b0      	b.n	8002230 <__aeabi_dmul+0x3c4>
 80020ce:	076b      	lsls	r3, r5, #29
 80020d0:	d009      	beq.n	80020e6 <__aeabi_dmul+0x27a>
 80020d2:	220f      	movs	r2, #15
 80020d4:	402a      	ands	r2, r5
 80020d6:	2a04      	cmp	r2, #4
 80020d8:	d005      	beq.n	80020e6 <__aeabi_dmul+0x27a>
 80020da:	1d2a      	adds	r2, r5, #4
 80020dc:	42aa      	cmp	r2, r5
 80020de:	41ad      	sbcs	r5, r5
 80020e0:	426d      	negs	r5, r5
 80020e2:	1964      	adds	r4, r4, r5
 80020e4:	0015      	movs	r5, r2
 80020e6:	01e3      	lsls	r3, r4, #7
 80020e8:	d504      	bpl.n	80020f4 <__aeabi_dmul+0x288>
 80020ea:	2180      	movs	r1, #128	; 0x80
 80020ec:	4a46      	ldr	r2, [pc, #280]	; (8002208 <__aeabi_dmul+0x39c>)
 80020ee:	00c9      	lsls	r1, r1, #3
 80020f0:	4014      	ands	r4, r2
 80020f2:	4461      	add	r1, ip
 80020f4:	4a45      	ldr	r2, [pc, #276]	; (800220c <__aeabi_dmul+0x3a0>)
 80020f6:	4291      	cmp	r1, r2
 80020f8:	dd00      	ble.n	80020fc <__aeabi_dmul+0x290>
 80020fa:	e726      	b.n	8001f4a <__aeabi_dmul+0xde>
 80020fc:	0762      	lsls	r2, r4, #29
 80020fe:	08ed      	lsrs	r5, r5, #3
 8002100:	0264      	lsls	r4, r4, #9
 8002102:	0549      	lsls	r1, r1, #21
 8002104:	4315      	orrs	r5, r2
 8002106:	0b24      	lsrs	r4, r4, #12
 8002108:	0d4a      	lsrs	r2, r1, #21
 800210a:	e710      	b.n	8001f2e <__aeabi_dmul+0xc2>
 800210c:	4652      	mov	r2, sl
 800210e:	4332      	orrs	r2, r6
 8002110:	d100      	bne.n	8002114 <__aeabi_dmul+0x2a8>
 8002112:	e07f      	b.n	8002214 <__aeabi_dmul+0x3a8>
 8002114:	2e00      	cmp	r6, #0
 8002116:	d100      	bne.n	800211a <__aeabi_dmul+0x2ae>
 8002118:	e0dc      	b.n	80022d4 <__aeabi_dmul+0x468>
 800211a:	0030      	movs	r0, r6
 800211c:	f000 fe1e 	bl	8002d5c <__clzsi2>
 8002120:	0002      	movs	r2, r0
 8002122:	3a0b      	subs	r2, #11
 8002124:	231d      	movs	r3, #29
 8002126:	0001      	movs	r1, r0
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	4652      	mov	r2, sl
 800212c:	3908      	subs	r1, #8
 800212e:	40da      	lsrs	r2, r3
 8002130:	408e      	lsls	r6, r1
 8002132:	4316      	orrs	r6, r2
 8002134:	4652      	mov	r2, sl
 8002136:	408a      	lsls	r2, r1
 8002138:	9b00      	ldr	r3, [sp, #0]
 800213a:	4935      	ldr	r1, [pc, #212]	; (8002210 <__aeabi_dmul+0x3a4>)
 800213c:	1a18      	subs	r0, r3, r0
 800213e:	0003      	movs	r3, r0
 8002140:	468c      	mov	ip, r1
 8002142:	4463      	add	r3, ip
 8002144:	2000      	movs	r0, #0
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	e6d3      	b.n	8001ef2 <__aeabi_dmul+0x86>
 800214a:	0025      	movs	r5, r4
 800214c:	4305      	orrs	r5, r0
 800214e:	d04a      	beq.n	80021e6 <__aeabi_dmul+0x37a>
 8002150:	2c00      	cmp	r4, #0
 8002152:	d100      	bne.n	8002156 <__aeabi_dmul+0x2ea>
 8002154:	e0b0      	b.n	80022b8 <__aeabi_dmul+0x44c>
 8002156:	0020      	movs	r0, r4
 8002158:	f000 fe00 	bl	8002d5c <__clzsi2>
 800215c:	0001      	movs	r1, r0
 800215e:	0002      	movs	r2, r0
 8002160:	390b      	subs	r1, #11
 8002162:	231d      	movs	r3, #29
 8002164:	0010      	movs	r0, r2
 8002166:	1a5b      	subs	r3, r3, r1
 8002168:	0031      	movs	r1, r6
 800216a:	0035      	movs	r5, r6
 800216c:	3808      	subs	r0, #8
 800216e:	4084      	lsls	r4, r0
 8002170:	40d9      	lsrs	r1, r3
 8002172:	4085      	lsls	r5, r0
 8002174:	430c      	orrs	r4, r1
 8002176:	4826      	ldr	r0, [pc, #152]	; (8002210 <__aeabi_dmul+0x3a4>)
 8002178:	1a83      	subs	r3, r0, r2
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2300      	movs	r3, #0
 800217e:	4699      	mov	r9, r3
 8002180:	469b      	mov	fp, r3
 8002182:	e697      	b.n	8001eb4 <__aeabi_dmul+0x48>
 8002184:	0005      	movs	r5, r0
 8002186:	4325      	orrs	r5, r4
 8002188:	d126      	bne.n	80021d8 <__aeabi_dmul+0x36c>
 800218a:	2208      	movs	r2, #8
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2302      	movs	r3, #2
 8002190:	2400      	movs	r4, #0
 8002192:	4691      	mov	r9, r2
 8002194:	469b      	mov	fp, r3
 8002196:	e68d      	b.n	8001eb4 <__aeabi_dmul+0x48>
 8002198:	4652      	mov	r2, sl
 800219a:	9b00      	ldr	r3, [sp, #0]
 800219c:	4332      	orrs	r2, r6
 800219e:	d110      	bne.n	80021c2 <__aeabi_dmul+0x356>
 80021a0:	4915      	ldr	r1, [pc, #84]	; (80021f8 <__aeabi_dmul+0x38c>)
 80021a2:	2600      	movs	r6, #0
 80021a4:	468c      	mov	ip, r1
 80021a6:	4463      	add	r3, ip
 80021a8:	4649      	mov	r1, r9
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2302      	movs	r3, #2
 80021ae:	4319      	orrs	r1, r3
 80021b0:	4689      	mov	r9, r1
 80021b2:	2002      	movs	r0, #2
 80021b4:	e69d      	b.n	8001ef2 <__aeabi_dmul+0x86>
 80021b6:	465b      	mov	r3, fp
 80021b8:	9701      	str	r7, [sp, #4]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d000      	beq.n	80021c0 <__aeabi_dmul+0x354>
 80021be:	e6ad      	b.n	8001f1c <__aeabi_dmul+0xb0>
 80021c0:	e6c3      	b.n	8001f4a <__aeabi_dmul+0xde>
 80021c2:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <__aeabi_dmul+0x38c>)
 80021c4:	2003      	movs	r0, #3
 80021c6:	4694      	mov	ip, r2
 80021c8:	4463      	add	r3, ip
 80021ca:	464a      	mov	r2, r9
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2303      	movs	r3, #3
 80021d0:	431a      	orrs	r2, r3
 80021d2:	4691      	mov	r9, r2
 80021d4:	4652      	mov	r2, sl
 80021d6:	e68c      	b.n	8001ef2 <__aeabi_dmul+0x86>
 80021d8:	220c      	movs	r2, #12
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2303      	movs	r3, #3
 80021de:	0005      	movs	r5, r0
 80021e0:	4691      	mov	r9, r2
 80021e2:	469b      	mov	fp, r3
 80021e4:	e666      	b.n	8001eb4 <__aeabi_dmul+0x48>
 80021e6:	2304      	movs	r3, #4
 80021e8:	4699      	mov	r9, r3
 80021ea:	2300      	movs	r3, #0
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	3301      	adds	r3, #1
 80021f0:	2400      	movs	r4, #0
 80021f2:	469b      	mov	fp, r3
 80021f4:	e65e      	b.n	8001eb4 <__aeabi_dmul+0x48>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	000007ff 	.word	0x000007ff
 80021fc:	fffffc01 	.word	0xfffffc01
 8002200:	0800bcfc 	.word	0x0800bcfc
 8002204:	000003ff 	.word	0x000003ff
 8002208:	feffffff 	.word	0xfeffffff
 800220c:	000007fe 	.word	0x000007fe
 8002210:	fffffc0d 	.word	0xfffffc0d
 8002214:	4649      	mov	r1, r9
 8002216:	2301      	movs	r3, #1
 8002218:	4319      	orrs	r1, r3
 800221a:	4689      	mov	r9, r1
 800221c:	2600      	movs	r6, #0
 800221e:	2001      	movs	r0, #1
 8002220:	e667      	b.n	8001ef2 <__aeabi_dmul+0x86>
 8002222:	2300      	movs	r3, #0
 8002224:	2480      	movs	r4, #128	; 0x80
 8002226:	2500      	movs	r5, #0
 8002228:	4a43      	ldr	r2, [pc, #268]	; (8002338 <__aeabi_dmul+0x4cc>)
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	0324      	lsls	r4, r4, #12
 800222e:	e67e      	b.n	8001f2e <__aeabi_dmul+0xc2>
 8002230:	2001      	movs	r0, #1
 8002232:	1a40      	subs	r0, r0, r1
 8002234:	2838      	cmp	r0, #56	; 0x38
 8002236:	dd00      	ble.n	800223a <__aeabi_dmul+0x3ce>
 8002238:	e676      	b.n	8001f28 <__aeabi_dmul+0xbc>
 800223a:	281f      	cmp	r0, #31
 800223c:	dd5b      	ble.n	80022f6 <__aeabi_dmul+0x48a>
 800223e:	221f      	movs	r2, #31
 8002240:	0023      	movs	r3, r4
 8002242:	4252      	negs	r2, r2
 8002244:	1a51      	subs	r1, r2, r1
 8002246:	40cb      	lsrs	r3, r1
 8002248:	0019      	movs	r1, r3
 800224a:	2820      	cmp	r0, #32
 800224c:	d003      	beq.n	8002256 <__aeabi_dmul+0x3ea>
 800224e:	4a3b      	ldr	r2, [pc, #236]	; (800233c <__aeabi_dmul+0x4d0>)
 8002250:	4462      	add	r2, ip
 8002252:	4094      	lsls	r4, r2
 8002254:	4325      	orrs	r5, r4
 8002256:	1e6a      	subs	r2, r5, #1
 8002258:	4195      	sbcs	r5, r2
 800225a:	002a      	movs	r2, r5
 800225c:	430a      	orrs	r2, r1
 800225e:	2107      	movs	r1, #7
 8002260:	000d      	movs	r5, r1
 8002262:	2400      	movs	r4, #0
 8002264:	4015      	ands	r5, r2
 8002266:	4211      	tst	r1, r2
 8002268:	d05b      	beq.n	8002322 <__aeabi_dmul+0x4b6>
 800226a:	210f      	movs	r1, #15
 800226c:	2400      	movs	r4, #0
 800226e:	4011      	ands	r1, r2
 8002270:	2904      	cmp	r1, #4
 8002272:	d053      	beq.n	800231c <__aeabi_dmul+0x4b0>
 8002274:	1d11      	adds	r1, r2, #4
 8002276:	4291      	cmp	r1, r2
 8002278:	4192      	sbcs	r2, r2
 800227a:	4252      	negs	r2, r2
 800227c:	18a4      	adds	r4, r4, r2
 800227e:	000a      	movs	r2, r1
 8002280:	0223      	lsls	r3, r4, #8
 8002282:	d54b      	bpl.n	800231c <__aeabi_dmul+0x4b0>
 8002284:	2201      	movs	r2, #1
 8002286:	2400      	movs	r4, #0
 8002288:	2500      	movs	r5, #0
 800228a:	e650      	b.n	8001f2e <__aeabi_dmul+0xc2>
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	031b      	lsls	r3, r3, #12
 8002290:	421c      	tst	r4, r3
 8002292:	d009      	beq.n	80022a8 <__aeabi_dmul+0x43c>
 8002294:	421e      	tst	r6, r3
 8002296:	d107      	bne.n	80022a8 <__aeabi_dmul+0x43c>
 8002298:	4333      	orrs	r3, r6
 800229a:	031c      	lsls	r4, r3, #12
 800229c:	4643      	mov	r3, r8
 800229e:	0015      	movs	r5, r2
 80022a0:	0b24      	lsrs	r4, r4, #12
 80022a2:	4a25      	ldr	r2, [pc, #148]	; (8002338 <__aeabi_dmul+0x4cc>)
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	e642      	b.n	8001f2e <__aeabi_dmul+0xc2>
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	0312      	lsls	r2, r2, #12
 80022ac:	4314      	orrs	r4, r2
 80022ae:	0324      	lsls	r4, r4, #12
 80022b0:	4a21      	ldr	r2, [pc, #132]	; (8002338 <__aeabi_dmul+0x4cc>)
 80022b2:	0b24      	lsrs	r4, r4, #12
 80022b4:	9701      	str	r7, [sp, #4]
 80022b6:	e63a      	b.n	8001f2e <__aeabi_dmul+0xc2>
 80022b8:	f000 fd50 	bl	8002d5c <__clzsi2>
 80022bc:	0001      	movs	r1, r0
 80022be:	0002      	movs	r2, r0
 80022c0:	3115      	adds	r1, #21
 80022c2:	3220      	adds	r2, #32
 80022c4:	291c      	cmp	r1, #28
 80022c6:	dc00      	bgt.n	80022ca <__aeabi_dmul+0x45e>
 80022c8:	e74b      	b.n	8002162 <__aeabi_dmul+0x2f6>
 80022ca:	0034      	movs	r4, r6
 80022cc:	3808      	subs	r0, #8
 80022ce:	2500      	movs	r5, #0
 80022d0:	4084      	lsls	r4, r0
 80022d2:	e750      	b.n	8002176 <__aeabi_dmul+0x30a>
 80022d4:	f000 fd42 	bl	8002d5c <__clzsi2>
 80022d8:	0003      	movs	r3, r0
 80022da:	001a      	movs	r2, r3
 80022dc:	3215      	adds	r2, #21
 80022de:	3020      	adds	r0, #32
 80022e0:	2a1c      	cmp	r2, #28
 80022e2:	dc00      	bgt.n	80022e6 <__aeabi_dmul+0x47a>
 80022e4:	e71e      	b.n	8002124 <__aeabi_dmul+0x2b8>
 80022e6:	4656      	mov	r6, sl
 80022e8:	3b08      	subs	r3, #8
 80022ea:	2200      	movs	r2, #0
 80022ec:	409e      	lsls	r6, r3
 80022ee:	e723      	b.n	8002138 <__aeabi_dmul+0x2cc>
 80022f0:	9b00      	ldr	r3, [sp, #0]
 80022f2:	469c      	mov	ip, r3
 80022f4:	e6e6      	b.n	80020c4 <__aeabi_dmul+0x258>
 80022f6:	4912      	ldr	r1, [pc, #72]	; (8002340 <__aeabi_dmul+0x4d4>)
 80022f8:	0022      	movs	r2, r4
 80022fa:	4461      	add	r1, ip
 80022fc:	002e      	movs	r6, r5
 80022fe:	408d      	lsls	r5, r1
 8002300:	408a      	lsls	r2, r1
 8002302:	40c6      	lsrs	r6, r0
 8002304:	1e69      	subs	r1, r5, #1
 8002306:	418d      	sbcs	r5, r1
 8002308:	4332      	orrs	r2, r6
 800230a:	432a      	orrs	r2, r5
 800230c:	40c4      	lsrs	r4, r0
 800230e:	0753      	lsls	r3, r2, #29
 8002310:	d0b6      	beq.n	8002280 <__aeabi_dmul+0x414>
 8002312:	210f      	movs	r1, #15
 8002314:	4011      	ands	r1, r2
 8002316:	2904      	cmp	r1, #4
 8002318:	d1ac      	bne.n	8002274 <__aeabi_dmul+0x408>
 800231a:	e7b1      	b.n	8002280 <__aeabi_dmul+0x414>
 800231c:	0765      	lsls	r5, r4, #29
 800231e:	0264      	lsls	r4, r4, #9
 8002320:	0b24      	lsrs	r4, r4, #12
 8002322:	08d2      	lsrs	r2, r2, #3
 8002324:	4315      	orrs	r5, r2
 8002326:	2200      	movs	r2, #0
 8002328:	e601      	b.n	8001f2e <__aeabi_dmul+0xc2>
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	0312      	lsls	r2, r2, #12
 800232e:	4314      	orrs	r4, r2
 8002330:	0324      	lsls	r4, r4, #12
 8002332:	4a01      	ldr	r2, [pc, #4]	; (8002338 <__aeabi_dmul+0x4cc>)
 8002334:	0b24      	lsrs	r4, r4, #12
 8002336:	e5fa      	b.n	8001f2e <__aeabi_dmul+0xc2>
 8002338:	000007ff 	.word	0x000007ff
 800233c:	0000043e 	.word	0x0000043e
 8002340:	0000041e 	.word	0x0000041e

08002344 <__aeabi_dsub>:
 8002344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002346:	4657      	mov	r7, sl
 8002348:	464e      	mov	r6, r9
 800234a:	4645      	mov	r5, r8
 800234c:	46de      	mov	lr, fp
 800234e:	b5e0      	push	{r5, r6, r7, lr}
 8002350:	001e      	movs	r6, r3
 8002352:	0017      	movs	r7, r2
 8002354:	004a      	lsls	r2, r1, #1
 8002356:	030b      	lsls	r3, r1, #12
 8002358:	0d52      	lsrs	r2, r2, #21
 800235a:	0a5b      	lsrs	r3, r3, #9
 800235c:	4690      	mov	r8, r2
 800235e:	0f42      	lsrs	r2, r0, #29
 8002360:	431a      	orrs	r2, r3
 8002362:	0fcd      	lsrs	r5, r1, #31
 8002364:	4ccd      	ldr	r4, [pc, #820]	; (800269c <__aeabi_dsub+0x358>)
 8002366:	0331      	lsls	r1, r6, #12
 8002368:	00c3      	lsls	r3, r0, #3
 800236a:	4694      	mov	ip, r2
 800236c:	0070      	lsls	r0, r6, #1
 800236e:	0f7a      	lsrs	r2, r7, #29
 8002370:	0a49      	lsrs	r1, r1, #9
 8002372:	00ff      	lsls	r7, r7, #3
 8002374:	469a      	mov	sl, r3
 8002376:	46b9      	mov	r9, r7
 8002378:	0d40      	lsrs	r0, r0, #21
 800237a:	0ff6      	lsrs	r6, r6, #31
 800237c:	4311      	orrs	r1, r2
 800237e:	42a0      	cmp	r0, r4
 8002380:	d100      	bne.n	8002384 <__aeabi_dsub+0x40>
 8002382:	e0b1      	b.n	80024e8 <__aeabi_dsub+0x1a4>
 8002384:	2201      	movs	r2, #1
 8002386:	4056      	eors	r6, r2
 8002388:	46b3      	mov	fp, r6
 800238a:	42b5      	cmp	r5, r6
 800238c:	d100      	bne.n	8002390 <__aeabi_dsub+0x4c>
 800238e:	e088      	b.n	80024a2 <__aeabi_dsub+0x15e>
 8002390:	4642      	mov	r2, r8
 8002392:	1a12      	subs	r2, r2, r0
 8002394:	2a00      	cmp	r2, #0
 8002396:	dc00      	bgt.n	800239a <__aeabi_dsub+0x56>
 8002398:	e0ae      	b.n	80024f8 <__aeabi_dsub+0x1b4>
 800239a:	2800      	cmp	r0, #0
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x5c>
 800239e:	e0c1      	b.n	8002524 <__aeabi_dsub+0x1e0>
 80023a0:	48be      	ldr	r0, [pc, #760]	; (800269c <__aeabi_dsub+0x358>)
 80023a2:	4580      	cmp	r8, r0
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x64>
 80023a6:	e151      	b.n	800264c <__aeabi_dsub+0x308>
 80023a8:	2080      	movs	r0, #128	; 0x80
 80023aa:	0400      	lsls	r0, r0, #16
 80023ac:	4301      	orrs	r1, r0
 80023ae:	2a38      	cmp	r2, #56	; 0x38
 80023b0:	dd00      	ble.n	80023b4 <__aeabi_dsub+0x70>
 80023b2:	e17b      	b.n	80026ac <__aeabi_dsub+0x368>
 80023b4:	2a1f      	cmp	r2, #31
 80023b6:	dd00      	ble.n	80023ba <__aeabi_dsub+0x76>
 80023b8:	e1ee      	b.n	8002798 <__aeabi_dsub+0x454>
 80023ba:	2020      	movs	r0, #32
 80023bc:	003e      	movs	r6, r7
 80023be:	1a80      	subs	r0, r0, r2
 80023c0:	000c      	movs	r4, r1
 80023c2:	40d6      	lsrs	r6, r2
 80023c4:	40d1      	lsrs	r1, r2
 80023c6:	4087      	lsls	r7, r0
 80023c8:	4662      	mov	r2, ip
 80023ca:	4084      	lsls	r4, r0
 80023cc:	1a52      	subs	r2, r2, r1
 80023ce:	1e78      	subs	r0, r7, #1
 80023d0:	4187      	sbcs	r7, r0
 80023d2:	4694      	mov	ip, r2
 80023d4:	4334      	orrs	r4, r6
 80023d6:	4327      	orrs	r7, r4
 80023d8:	1bdc      	subs	r4, r3, r7
 80023da:	42a3      	cmp	r3, r4
 80023dc:	419b      	sbcs	r3, r3
 80023de:	4662      	mov	r2, ip
 80023e0:	425b      	negs	r3, r3
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	4699      	mov	r9, r3
 80023e6:	464b      	mov	r3, r9
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	d400      	bmi.n	80023ee <__aeabi_dsub+0xaa>
 80023ec:	e118      	b.n	8002620 <__aeabi_dsub+0x2dc>
 80023ee:	464b      	mov	r3, r9
 80023f0:	0258      	lsls	r0, r3, #9
 80023f2:	0a43      	lsrs	r3, r0, #9
 80023f4:	4699      	mov	r9, r3
 80023f6:	464b      	mov	r3, r9
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d100      	bne.n	80023fe <__aeabi_dsub+0xba>
 80023fc:	e137      	b.n	800266e <__aeabi_dsub+0x32a>
 80023fe:	4648      	mov	r0, r9
 8002400:	f000 fcac 	bl	8002d5c <__clzsi2>
 8002404:	0001      	movs	r1, r0
 8002406:	3908      	subs	r1, #8
 8002408:	2320      	movs	r3, #32
 800240a:	0022      	movs	r2, r4
 800240c:	4648      	mov	r0, r9
 800240e:	1a5b      	subs	r3, r3, r1
 8002410:	40da      	lsrs	r2, r3
 8002412:	4088      	lsls	r0, r1
 8002414:	408c      	lsls	r4, r1
 8002416:	4643      	mov	r3, r8
 8002418:	4310      	orrs	r0, r2
 800241a:	4588      	cmp	r8, r1
 800241c:	dd00      	ble.n	8002420 <__aeabi_dsub+0xdc>
 800241e:	e136      	b.n	800268e <__aeabi_dsub+0x34a>
 8002420:	1ac9      	subs	r1, r1, r3
 8002422:	1c4b      	adds	r3, r1, #1
 8002424:	2b1f      	cmp	r3, #31
 8002426:	dd00      	ble.n	800242a <__aeabi_dsub+0xe6>
 8002428:	e0ea      	b.n	8002600 <__aeabi_dsub+0x2bc>
 800242a:	2220      	movs	r2, #32
 800242c:	0026      	movs	r6, r4
 800242e:	1ad2      	subs	r2, r2, r3
 8002430:	0001      	movs	r1, r0
 8002432:	4094      	lsls	r4, r2
 8002434:	40de      	lsrs	r6, r3
 8002436:	40d8      	lsrs	r0, r3
 8002438:	2300      	movs	r3, #0
 800243a:	4091      	lsls	r1, r2
 800243c:	1e62      	subs	r2, r4, #1
 800243e:	4194      	sbcs	r4, r2
 8002440:	4681      	mov	r9, r0
 8002442:	4698      	mov	r8, r3
 8002444:	4331      	orrs	r1, r6
 8002446:	430c      	orrs	r4, r1
 8002448:	0763      	lsls	r3, r4, #29
 800244a:	d009      	beq.n	8002460 <__aeabi_dsub+0x11c>
 800244c:	230f      	movs	r3, #15
 800244e:	4023      	ands	r3, r4
 8002450:	2b04      	cmp	r3, #4
 8002452:	d005      	beq.n	8002460 <__aeabi_dsub+0x11c>
 8002454:	1d23      	adds	r3, r4, #4
 8002456:	42a3      	cmp	r3, r4
 8002458:	41a4      	sbcs	r4, r4
 800245a:	4264      	negs	r4, r4
 800245c:	44a1      	add	r9, r4
 800245e:	001c      	movs	r4, r3
 8002460:	464b      	mov	r3, r9
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	d400      	bmi.n	8002468 <__aeabi_dsub+0x124>
 8002466:	e0de      	b.n	8002626 <__aeabi_dsub+0x2e2>
 8002468:	4641      	mov	r1, r8
 800246a:	4b8c      	ldr	r3, [pc, #560]	; (800269c <__aeabi_dsub+0x358>)
 800246c:	3101      	adds	r1, #1
 800246e:	4299      	cmp	r1, r3
 8002470:	d100      	bne.n	8002474 <__aeabi_dsub+0x130>
 8002472:	e0e7      	b.n	8002644 <__aeabi_dsub+0x300>
 8002474:	464b      	mov	r3, r9
 8002476:	488a      	ldr	r0, [pc, #552]	; (80026a0 <__aeabi_dsub+0x35c>)
 8002478:	08e4      	lsrs	r4, r4, #3
 800247a:	4003      	ands	r3, r0
 800247c:	0018      	movs	r0, r3
 800247e:	0549      	lsls	r1, r1, #21
 8002480:	075b      	lsls	r3, r3, #29
 8002482:	0240      	lsls	r0, r0, #9
 8002484:	4323      	orrs	r3, r4
 8002486:	0d4a      	lsrs	r2, r1, #21
 8002488:	0b04      	lsrs	r4, r0, #12
 800248a:	0512      	lsls	r2, r2, #20
 800248c:	07ed      	lsls	r5, r5, #31
 800248e:	4322      	orrs	r2, r4
 8002490:	432a      	orrs	r2, r5
 8002492:	0018      	movs	r0, r3
 8002494:	0011      	movs	r1, r2
 8002496:	bcf0      	pop	{r4, r5, r6, r7}
 8002498:	46bb      	mov	fp, r7
 800249a:	46b2      	mov	sl, r6
 800249c:	46a9      	mov	r9, r5
 800249e:	46a0      	mov	r8, r4
 80024a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024a2:	4642      	mov	r2, r8
 80024a4:	1a12      	subs	r2, r2, r0
 80024a6:	2a00      	cmp	r2, #0
 80024a8:	dd52      	ble.n	8002550 <__aeabi_dsub+0x20c>
 80024aa:	2800      	cmp	r0, #0
 80024ac:	d100      	bne.n	80024b0 <__aeabi_dsub+0x16c>
 80024ae:	e09c      	b.n	80025ea <__aeabi_dsub+0x2a6>
 80024b0:	45a0      	cmp	r8, r4
 80024b2:	d100      	bne.n	80024b6 <__aeabi_dsub+0x172>
 80024b4:	e0ca      	b.n	800264c <__aeabi_dsub+0x308>
 80024b6:	2080      	movs	r0, #128	; 0x80
 80024b8:	0400      	lsls	r0, r0, #16
 80024ba:	4301      	orrs	r1, r0
 80024bc:	2a38      	cmp	r2, #56	; 0x38
 80024be:	dd00      	ble.n	80024c2 <__aeabi_dsub+0x17e>
 80024c0:	e149      	b.n	8002756 <__aeabi_dsub+0x412>
 80024c2:	2a1f      	cmp	r2, #31
 80024c4:	dc00      	bgt.n	80024c8 <__aeabi_dsub+0x184>
 80024c6:	e197      	b.n	80027f8 <__aeabi_dsub+0x4b4>
 80024c8:	0010      	movs	r0, r2
 80024ca:	000e      	movs	r6, r1
 80024cc:	3820      	subs	r0, #32
 80024ce:	40c6      	lsrs	r6, r0
 80024d0:	2a20      	cmp	r2, #32
 80024d2:	d004      	beq.n	80024de <__aeabi_dsub+0x19a>
 80024d4:	2040      	movs	r0, #64	; 0x40
 80024d6:	1a82      	subs	r2, r0, r2
 80024d8:	4091      	lsls	r1, r2
 80024da:	430f      	orrs	r7, r1
 80024dc:	46b9      	mov	r9, r7
 80024de:	464c      	mov	r4, r9
 80024e0:	1e62      	subs	r2, r4, #1
 80024e2:	4194      	sbcs	r4, r2
 80024e4:	4334      	orrs	r4, r6
 80024e6:	e13a      	b.n	800275e <__aeabi_dsub+0x41a>
 80024e8:	000a      	movs	r2, r1
 80024ea:	433a      	orrs	r2, r7
 80024ec:	d028      	beq.n	8002540 <__aeabi_dsub+0x1fc>
 80024ee:	46b3      	mov	fp, r6
 80024f0:	42b5      	cmp	r5, r6
 80024f2:	d02b      	beq.n	800254c <__aeabi_dsub+0x208>
 80024f4:	4a6b      	ldr	r2, [pc, #428]	; (80026a4 <__aeabi_dsub+0x360>)
 80024f6:	4442      	add	r2, r8
 80024f8:	2a00      	cmp	r2, #0
 80024fa:	d05d      	beq.n	80025b8 <__aeabi_dsub+0x274>
 80024fc:	4642      	mov	r2, r8
 80024fe:	4644      	mov	r4, r8
 8002500:	1a82      	subs	r2, r0, r2
 8002502:	2c00      	cmp	r4, #0
 8002504:	d000      	beq.n	8002508 <__aeabi_dsub+0x1c4>
 8002506:	e0f5      	b.n	80026f4 <__aeabi_dsub+0x3b0>
 8002508:	4665      	mov	r5, ip
 800250a:	431d      	orrs	r5, r3
 800250c:	d100      	bne.n	8002510 <__aeabi_dsub+0x1cc>
 800250e:	e19c      	b.n	800284a <__aeabi_dsub+0x506>
 8002510:	1e55      	subs	r5, r2, #1
 8002512:	2a01      	cmp	r2, #1
 8002514:	d100      	bne.n	8002518 <__aeabi_dsub+0x1d4>
 8002516:	e1fb      	b.n	8002910 <__aeabi_dsub+0x5cc>
 8002518:	4c60      	ldr	r4, [pc, #384]	; (800269c <__aeabi_dsub+0x358>)
 800251a:	42a2      	cmp	r2, r4
 800251c:	d100      	bne.n	8002520 <__aeabi_dsub+0x1dc>
 800251e:	e1bd      	b.n	800289c <__aeabi_dsub+0x558>
 8002520:	002a      	movs	r2, r5
 8002522:	e0f0      	b.n	8002706 <__aeabi_dsub+0x3c2>
 8002524:	0008      	movs	r0, r1
 8002526:	4338      	orrs	r0, r7
 8002528:	d100      	bne.n	800252c <__aeabi_dsub+0x1e8>
 800252a:	e0c3      	b.n	80026b4 <__aeabi_dsub+0x370>
 800252c:	1e50      	subs	r0, r2, #1
 800252e:	2a01      	cmp	r2, #1
 8002530:	d100      	bne.n	8002534 <__aeabi_dsub+0x1f0>
 8002532:	e1a8      	b.n	8002886 <__aeabi_dsub+0x542>
 8002534:	4c59      	ldr	r4, [pc, #356]	; (800269c <__aeabi_dsub+0x358>)
 8002536:	42a2      	cmp	r2, r4
 8002538:	d100      	bne.n	800253c <__aeabi_dsub+0x1f8>
 800253a:	e087      	b.n	800264c <__aeabi_dsub+0x308>
 800253c:	0002      	movs	r2, r0
 800253e:	e736      	b.n	80023ae <__aeabi_dsub+0x6a>
 8002540:	2201      	movs	r2, #1
 8002542:	4056      	eors	r6, r2
 8002544:	46b3      	mov	fp, r6
 8002546:	42b5      	cmp	r5, r6
 8002548:	d000      	beq.n	800254c <__aeabi_dsub+0x208>
 800254a:	e721      	b.n	8002390 <__aeabi_dsub+0x4c>
 800254c:	4a55      	ldr	r2, [pc, #340]	; (80026a4 <__aeabi_dsub+0x360>)
 800254e:	4442      	add	r2, r8
 8002550:	2a00      	cmp	r2, #0
 8002552:	d100      	bne.n	8002556 <__aeabi_dsub+0x212>
 8002554:	e0b5      	b.n	80026c2 <__aeabi_dsub+0x37e>
 8002556:	4642      	mov	r2, r8
 8002558:	4644      	mov	r4, r8
 800255a:	1a82      	subs	r2, r0, r2
 800255c:	2c00      	cmp	r4, #0
 800255e:	d100      	bne.n	8002562 <__aeabi_dsub+0x21e>
 8002560:	e138      	b.n	80027d4 <__aeabi_dsub+0x490>
 8002562:	4e4e      	ldr	r6, [pc, #312]	; (800269c <__aeabi_dsub+0x358>)
 8002564:	42b0      	cmp	r0, r6
 8002566:	d100      	bne.n	800256a <__aeabi_dsub+0x226>
 8002568:	e1de      	b.n	8002928 <__aeabi_dsub+0x5e4>
 800256a:	2680      	movs	r6, #128	; 0x80
 800256c:	4664      	mov	r4, ip
 800256e:	0436      	lsls	r6, r6, #16
 8002570:	4334      	orrs	r4, r6
 8002572:	46a4      	mov	ip, r4
 8002574:	2a38      	cmp	r2, #56	; 0x38
 8002576:	dd00      	ble.n	800257a <__aeabi_dsub+0x236>
 8002578:	e196      	b.n	80028a8 <__aeabi_dsub+0x564>
 800257a:	2a1f      	cmp	r2, #31
 800257c:	dd00      	ble.n	8002580 <__aeabi_dsub+0x23c>
 800257e:	e224      	b.n	80029ca <__aeabi_dsub+0x686>
 8002580:	2620      	movs	r6, #32
 8002582:	1ab4      	subs	r4, r6, r2
 8002584:	46a2      	mov	sl, r4
 8002586:	4664      	mov	r4, ip
 8002588:	4656      	mov	r6, sl
 800258a:	40b4      	lsls	r4, r6
 800258c:	46a1      	mov	r9, r4
 800258e:	001c      	movs	r4, r3
 8002590:	464e      	mov	r6, r9
 8002592:	40d4      	lsrs	r4, r2
 8002594:	4326      	orrs	r6, r4
 8002596:	0034      	movs	r4, r6
 8002598:	4656      	mov	r6, sl
 800259a:	40b3      	lsls	r3, r6
 800259c:	1e5e      	subs	r6, r3, #1
 800259e:	41b3      	sbcs	r3, r6
 80025a0:	431c      	orrs	r4, r3
 80025a2:	4663      	mov	r3, ip
 80025a4:	40d3      	lsrs	r3, r2
 80025a6:	18c9      	adds	r1, r1, r3
 80025a8:	19e4      	adds	r4, r4, r7
 80025aa:	42bc      	cmp	r4, r7
 80025ac:	41bf      	sbcs	r7, r7
 80025ae:	427f      	negs	r7, r7
 80025b0:	46b9      	mov	r9, r7
 80025b2:	4680      	mov	r8, r0
 80025b4:	4489      	add	r9, r1
 80025b6:	e0d8      	b.n	800276a <__aeabi_dsub+0x426>
 80025b8:	4640      	mov	r0, r8
 80025ba:	4c3b      	ldr	r4, [pc, #236]	; (80026a8 <__aeabi_dsub+0x364>)
 80025bc:	3001      	adds	r0, #1
 80025be:	4220      	tst	r0, r4
 80025c0:	d000      	beq.n	80025c4 <__aeabi_dsub+0x280>
 80025c2:	e0b4      	b.n	800272e <__aeabi_dsub+0x3ea>
 80025c4:	4640      	mov	r0, r8
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d000      	beq.n	80025cc <__aeabi_dsub+0x288>
 80025ca:	e144      	b.n	8002856 <__aeabi_dsub+0x512>
 80025cc:	4660      	mov	r0, ip
 80025ce:	4318      	orrs	r0, r3
 80025d0:	d100      	bne.n	80025d4 <__aeabi_dsub+0x290>
 80025d2:	e190      	b.n	80028f6 <__aeabi_dsub+0x5b2>
 80025d4:	0008      	movs	r0, r1
 80025d6:	4338      	orrs	r0, r7
 80025d8:	d000      	beq.n	80025dc <__aeabi_dsub+0x298>
 80025da:	e1aa      	b.n	8002932 <__aeabi_dsub+0x5ee>
 80025dc:	4661      	mov	r1, ip
 80025de:	08db      	lsrs	r3, r3, #3
 80025e0:	0749      	lsls	r1, r1, #29
 80025e2:	430b      	orrs	r3, r1
 80025e4:	4661      	mov	r1, ip
 80025e6:	08cc      	lsrs	r4, r1, #3
 80025e8:	e027      	b.n	800263a <__aeabi_dsub+0x2f6>
 80025ea:	0008      	movs	r0, r1
 80025ec:	4338      	orrs	r0, r7
 80025ee:	d061      	beq.n	80026b4 <__aeabi_dsub+0x370>
 80025f0:	1e50      	subs	r0, r2, #1
 80025f2:	2a01      	cmp	r2, #1
 80025f4:	d100      	bne.n	80025f8 <__aeabi_dsub+0x2b4>
 80025f6:	e139      	b.n	800286c <__aeabi_dsub+0x528>
 80025f8:	42a2      	cmp	r2, r4
 80025fa:	d027      	beq.n	800264c <__aeabi_dsub+0x308>
 80025fc:	0002      	movs	r2, r0
 80025fe:	e75d      	b.n	80024bc <__aeabi_dsub+0x178>
 8002600:	0002      	movs	r2, r0
 8002602:	391f      	subs	r1, #31
 8002604:	40ca      	lsrs	r2, r1
 8002606:	0011      	movs	r1, r2
 8002608:	2b20      	cmp	r3, #32
 800260a:	d003      	beq.n	8002614 <__aeabi_dsub+0x2d0>
 800260c:	2240      	movs	r2, #64	; 0x40
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	4098      	lsls	r0, r3
 8002612:	4304      	orrs	r4, r0
 8002614:	1e63      	subs	r3, r4, #1
 8002616:	419c      	sbcs	r4, r3
 8002618:	2300      	movs	r3, #0
 800261a:	4699      	mov	r9, r3
 800261c:	4698      	mov	r8, r3
 800261e:	430c      	orrs	r4, r1
 8002620:	0763      	lsls	r3, r4, #29
 8002622:	d000      	beq.n	8002626 <__aeabi_dsub+0x2e2>
 8002624:	e712      	b.n	800244c <__aeabi_dsub+0x108>
 8002626:	464b      	mov	r3, r9
 8002628:	464a      	mov	r2, r9
 800262a:	08e4      	lsrs	r4, r4, #3
 800262c:	075b      	lsls	r3, r3, #29
 800262e:	4323      	orrs	r3, r4
 8002630:	08d4      	lsrs	r4, r2, #3
 8002632:	4642      	mov	r2, r8
 8002634:	4919      	ldr	r1, [pc, #100]	; (800269c <__aeabi_dsub+0x358>)
 8002636:	428a      	cmp	r2, r1
 8002638:	d00e      	beq.n	8002658 <__aeabi_dsub+0x314>
 800263a:	0324      	lsls	r4, r4, #12
 800263c:	0552      	lsls	r2, r2, #21
 800263e:	0b24      	lsrs	r4, r4, #12
 8002640:	0d52      	lsrs	r2, r2, #21
 8002642:	e722      	b.n	800248a <__aeabi_dsub+0x146>
 8002644:	000a      	movs	r2, r1
 8002646:	2400      	movs	r4, #0
 8002648:	2300      	movs	r3, #0
 800264a:	e71e      	b.n	800248a <__aeabi_dsub+0x146>
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	4662      	mov	r2, ip
 8002650:	0752      	lsls	r2, r2, #29
 8002652:	4313      	orrs	r3, r2
 8002654:	4662      	mov	r2, ip
 8002656:	08d4      	lsrs	r4, r2, #3
 8002658:	001a      	movs	r2, r3
 800265a:	4322      	orrs	r2, r4
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x31c>
 800265e:	e1fc      	b.n	8002a5a <__aeabi_dsub+0x716>
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	0312      	lsls	r2, r2, #12
 8002664:	4314      	orrs	r4, r2
 8002666:	0324      	lsls	r4, r4, #12
 8002668:	4a0c      	ldr	r2, [pc, #48]	; (800269c <__aeabi_dsub+0x358>)
 800266a:	0b24      	lsrs	r4, r4, #12
 800266c:	e70d      	b.n	800248a <__aeabi_dsub+0x146>
 800266e:	0020      	movs	r0, r4
 8002670:	f000 fb74 	bl	8002d5c <__clzsi2>
 8002674:	0001      	movs	r1, r0
 8002676:	3118      	adds	r1, #24
 8002678:	291f      	cmp	r1, #31
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x33a>
 800267c:	e6c4      	b.n	8002408 <__aeabi_dsub+0xc4>
 800267e:	3808      	subs	r0, #8
 8002680:	4084      	lsls	r4, r0
 8002682:	4643      	mov	r3, r8
 8002684:	0020      	movs	r0, r4
 8002686:	2400      	movs	r4, #0
 8002688:	4588      	cmp	r8, r1
 800268a:	dc00      	bgt.n	800268e <__aeabi_dsub+0x34a>
 800268c:	e6c8      	b.n	8002420 <__aeabi_dsub+0xdc>
 800268e:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <__aeabi_dsub+0x35c>)
 8002690:	1a5b      	subs	r3, r3, r1
 8002692:	4010      	ands	r0, r2
 8002694:	4698      	mov	r8, r3
 8002696:	4681      	mov	r9, r0
 8002698:	e6d6      	b.n	8002448 <__aeabi_dsub+0x104>
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	000007ff 	.word	0x000007ff
 80026a0:	ff7fffff 	.word	0xff7fffff
 80026a4:	fffff801 	.word	0xfffff801
 80026a8:	000007fe 	.word	0x000007fe
 80026ac:	430f      	orrs	r7, r1
 80026ae:	1e7a      	subs	r2, r7, #1
 80026b0:	4197      	sbcs	r7, r2
 80026b2:	e691      	b.n	80023d8 <__aeabi_dsub+0x94>
 80026b4:	4661      	mov	r1, ip
 80026b6:	08db      	lsrs	r3, r3, #3
 80026b8:	0749      	lsls	r1, r1, #29
 80026ba:	430b      	orrs	r3, r1
 80026bc:	4661      	mov	r1, ip
 80026be:	08cc      	lsrs	r4, r1, #3
 80026c0:	e7b8      	b.n	8002634 <__aeabi_dsub+0x2f0>
 80026c2:	4640      	mov	r0, r8
 80026c4:	4cd3      	ldr	r4, [pc, #844]	; (8002a14 <__aeabi_dsub+0x6d0>)
 80026c6:	3001      	adds	r0, #1
 80026c8:	4220      	tst	r0, r4
 80026ca:	d000      	beq.n	80026ce <__aeabi_dsub+0x38a>
 80026cc:	e0a2      	b.n	8002814 <__aeabi_dsub+0x4d0>
 80026ce:	4640      	mov	r0, r8
 80026d0:	2800      	cmp	r0, #0
 80026d2:	d000      	beq.n	80026d6 <__aeabi_dsub+0x392>
 80026d4:	e101      	b.n	80028da <__aeabi_dsub+0x596>
 80026d6:	4660      	mov	r0, ip
 80026d8:	4318      	orrs	r0, r3
 80026da:	d100      	bne.n	80026de <__aeabi_dsub+0x39a>
 80026dc:	e15e      	b.n	800299c <__aeabi_dsub+0x658>
 80026de:	0008      	movs	r0, r1
 80026e0:	4338      	orrs	r0, r7
 80026e2:	d000      	beq.n	80026e6 <__aeabi_dsub+0x3a2>
 80026e4:	e15f      	b.n	80029a6 <__aeabi_dsub+0x662>
 80026e6:	4661      	mov	r1, ip
 80026e8:	08db      	lsrs	r3, r3, #3
 80026ea:	0749      	lsls	r1, r1, #29
 80026ec:	430b      	orrs	r3, r1
 80026ee:	4661      	mov	r1, ip
 80026f0:	08cc      	lsrs	r4, r1, #3
 80026f2:	e7a2      	b.n	800263a <__aeabi_dsub+0x2f6>
 80026f4:	4dc8      	ldr	r5, [pc, #800]	; (8002a18 <__aeabi_dsub+0x6d4>)
 80026f6:	42a8      	cmp	r0, r5
 80026f8:	d100      	bne.n	80026fc <__aeabi_dsub+0x3b8>
 80026fa:	e0cf      	b.n	800289c <__aeabi_dsub+0x558>
 80026fc:	2580      	movs	r5, #128	; 0x80
 80026fe:	4664      	mov	r4, ip
 8002700:	042d      	lsls	r5, r5, #16
 8002702:	432c      	orrs	r4, r5
 8002704:	46a4      	mov	ip, r4
 8002706:	2a38      	cmp	r2, #56	; 0x38
 8002708:	dc56      	bgt.n	80027b8 <__aeabi_dsub+0x474>
 800270a:	2a1f      	cmp	r2, #31
 800270c:	dd00      	ble.n	8002710 <__aeabi_dsub+0x3cc>
 800270e:	e0d1      	b.n	80028b4 <__aeabi_dsub+0x570>
 8002710:	2520      	movs	r5, #32
 8002712:	001e      	movs	r6, r3
 8002714:	1aad      	subs	r5, r5, r2
 8002716:	4664      	mov	r4, ip
 8002718:	40ab      	lsls	r3, r5
 800271a:	40ac      	lsls	r4, r5
 800271c:	40d6      	lsrs	r6, r2
 800271e:	1e5d      	subs	r5, r3, #1
 8002720:	41ab      	sbcs	r3, r5
 8002722:	4334      	orrs	r4, r6
 8002724:	4323      	orrs	r3, r4
 8002726:	4664      	mov	r4, ip
 8002728:	40d4      	lsrs	r4, r2
 800272a:	1b09      	subs	r1, r1, r4
 800272c:	e049      	b.n	80027c2 <__aeabi_dsub+0x47e>
 800272e:	4660      	mov	r0, ip
 8002730:	1bdc      	subs	r4, r3, r7
 8002732:	1a46      	subs	r6, r0, r1
 8002734:	42a3      	cmp	r3, r4
 8002736:	4180      	sbcs	r0, r0
 8002738:	4240      	negs	r0, r0
 800273a:	4681      	mov	r9, r0
 800273c:	0030      	movs	r0, r6
 800273e:	464e      	mov	r6, r9
 8002740:	1b80      	subs	r0, r0, r6
 8002742:	4681      	mov	r9, r0
 8002744:	0200      	lsls	r0, r0, #8
 8002746:	d476      	bmi.n	8002836 <__aeabi_dsub+0x4f2>
 8002748:	464b      	mov	r3, r9
 800274a:	4323      	orrs	r3, r4
 800274c:	d000      	beq.n	8002750 <__aeabi_dsub+0x40c>
 800274e:	e652      	b.n	80023f6 <__aeabi_dsub+0xb2>
 8002750:	2400      	movs	r4, #0
 8002752:	2500      	movs	r5, #0
 8002754:	e771      	b.n	800263a <__aeabi_dsub+0x2f6>
 8002756:	4339      	orrs	r1, r7
 8002758:	000c      	movs	r4, r1
 800275a:	1e62      	subs	r2, r4, #1
 800275c:	4194      	sbcs	r4, r2
 800275e:	18e4      	adds	r4, r4, r3
 8002760:	429c      	cmp	r4, r3
 8002762:	419b      	sbcs	r3, r3
 8002764:	425b      	negs	r3, r3
 8002766:	4463      	add	r3, ip
 8002768:	4699      	mov	r9, r3
 800276a:	464b      	mov	r3, r9
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	d400      	bmi.n	8002772 <__aeabi_dsub+0x42e>
 8002770:	e756      	b.n	8002620 <__aeabi_dsub+0x2dc>
 8002772:	2301      	movs	r3, #1
 8002774:	469c      	mov	ip, r3
 8002776:	4ba8      	ldr	r3, [pc, #672]	; (8002a18 <__aeabi_dsub+0x6d4>)
 8002778:	44e0      	add	r8, ip
 800277a:	4598      	cmp	r8, r3
 800277c:	d038      	beq.n	80027f0 <__aeabi_dsub+0x4ac>
 800277e:	464b      	mov	r3, r9
 8002780:	48a6      	ldr	r0, [pc, #664]	; (8002a1c <__aeabi_dsub+0x6d8>)
 8002782:	2201      	movs	r2, #1
 8002784:	4003      	ands	r3, r0
 8002786:	0018      	movs	r0, r3
 8002788:	0863      	lsrs	r3, r4, #1
 800278a:	4014      	ands	r4, r2
 800278c:	431c      	orrs	r4, r3
 800278e:	07c3      	lsls	r3, r0, #31
 8002790:	431c      	orrs	r4, r3
 8002792:	0843      	lsrs	r3, r0, #1
 8002794:	4699      	mov	r9, r3
 8002796:	e657      	b.n	8002448 <__aeabi_dsub+0x104>
 8002798:	0010      	movs	r0, r2
 800279a:	000e      	movs	r6, r1
 800279c:	3820      	subs	r0, #32
 800279e:	40c6      	lsrs	r6, r0
 80027a0:	2a20      	cmp	r2, #32
 80027a2:	d004      	beq.n	80027ae <__aeabi_dsub+0x46a>
 80027a4:	2040      	movs	r0, #64	; 0x40
 80027a6:	1a82      	subs	r2, r0, r2
 80027a8:	4091      	lsls	r1, r2
 80027aa:	430f      	orrs	r7, r1
 80027ac:	46b9      	mov	r9, r7
 80027ae:	464f      	mov	r7, r9
 80027b0:	1e7a      	subs	r2, r7, #1
 80027b2:	4197      	sbcs	r7, r2
 80027b4:	4337      	orrs	r7, r6
 80027b6:	e60f      	b.n	80023d8 <__aeabi_dsub+0x94>
 80027b8:	4662      	mov	r2, ip
 80027ba:	431a      	orrs	r2, r3
 80027bc:	0013      	movs	r3, r2
 80027be:	1e5a      	subs	r2, r3, #1
 80027c0:	4193      	sbcs	r3, r2
 80027c2:	1afc      	subs	r4, r7, r3
 80027c4:	42a7      	cmp	r7, r4
 80027c6:	41bf      	sbcs	r7, r7
 80027c8:	427f      	negs	r7, r7
 80027ca:	1bcb      	subs	r3, r1, r7
 80027cc:	4699      	mov	r9, r3
 80027ce:	465d      	mov	r5, fp
 80027d0:	4680      	mov	r8, r0
 80027d2:	e608      	b.n	80023e6 <__aeabi_dsub+0xa2>
 80027d4:	4666      	mov	r6, ip
 80027d6:	431e      	orrs	r6, r3
 80027d8:	d100      	bne.n	80027dc <__aeabi_dsub+0x498>
 80027da:	e0be      	b.n	800295a <__aeabi_dsub+0x616>
 80027dc:	1e56      	subs	r6, r2, #1
 80027de:	2a01      	cmp	r2, #1
 80027e0:	d100      	bne.n	80027e4 <__aeabi_dsub+0x4a0>
 80027e2:	e109      	b.n	80029f8 <__aeabi_dsub+0x6b4>
 80027e4:	4c8c      	ldr	r4, [pc, #560]	; (8002a18 <__aeabi_dsub+0x6d4>)
 80027e6:	42a2      	cmp	r2, r4
 80027e8:	d100      	bne.n	80027ec <__aeabi_dsub+0x4a8>
 80027ea:	e119      	b.n	8002a20 <__aeabi_dsub+0x6dc>
 80027ec:	0032      	movs	r2, r6
 80027ee:	e6c1      	b.n	8002574 <__aeabi_dsub+0x230>
 80027f0:	4642      	mov	r2, r8
 80027f2:	2400      	movs	r4, #0
 80027f4:	2300      	movs	r3, #0
 80027f6:	e648      	b.n	800248a <__aeabi_dsub+0x146>
 80027f8:	2020      	movs	r0, #32
 80027fa:	000c      	movs	r4, r1
 80027fc:	1a80      	subs	r0, r0, r2
 80027fe:	003e      	movs	r6, r7
 8002800:	4087      	lsls	r7, r0
 8002802:	4084      	lsls	r4, r0
 8002804:	40d6      	lsrs	r6, r2
 8002806:	1e78      	subs	r0, r7, #1
 8002808:	4187      	sbcs	r7, r0
 800280a:	40d1      	lsrs	r1, r2
 800280c:	4334      	orrs	r4, r6
 800280e:	433c      	orrs	r4, r7
 8002810:	448c      	add	ip, r1
 8002812:	e7a4      	b.n	800275e <__aeabi_dsub+0x41a>
 8002814:	4a80      	ldr	r2, [pc, #512]	; (8002a18 <__aeabi_dsub+0x6d4>)
 8002816:	4290      	cmp	r0, r2
 8002818:	d100      	bne.n	800281c <__aeabi_dsub+0x4d8>
 800281a:	e0e9      	b.n	80029f0 <__aeabi_dsub+0x6ac>
 800281c:	19df      	adds	r7, r3, r7
 800281e:	429f      	cmp	r7, r3
 8002820:	419b      	sbcs	r3, r3
 8002822:	4461      	add	r1, ip
 8002824:	425b      	negs	r3, r3
 8002826:	18c9      	adds	r1, r1, r3
 8002828:	07cc      	lsls	r4, r1, #31
 800282a:	087f      	lsrs	r7, r7, #1
 800282c:	084b      	lsrs	r3, r1, #1
 800282e:	4699      	mov	r9, r3
 8002830:	4680      	mov	r8, r0
 8002832:	433c      	orrs	r4, r7
 8002834:	e6f4      	b.n	8002620 <__aeabi_dsub+0x2dc>
 8002836:	1afc      	subs	r4, r7, r3
 8002838:	42a7      	cmp	r7, r4
 800283a:	41bf      	sbcs	r7, r7
 800283c:	4663      	mov	r3, ip
 800283e:	427f      	negs	r7, r7
 8002840:	1ac9      	subs	r1, r1, r3
 8002842:	1bcb      	subs	r3, r1, r7
 8002844:	4699      	mov	r9, r3
 8002846:	465d      	mov	r5, fp
 8002848:	e5d5      	b.n	80023f6 <__aeabi_dsub+0xb2>
 800284a:	08ff      	lsrs	r7, r7, #3
 800284c:	074b      	lsls	r3, r1, #29
 800284e:	465d      	mov	r5, fp
 8002850:	433b      	orrs	r3, r7
 8002852:	08cc      	lsrs	r4, r1, #3
 8002854:	e6ee      	b.n	8002634 <__aeabi_dsub+0x2f0>
 8002856:	4662      	mov	r2, ip
 8002858:	431a      	orrs	r2, r3
 800285a:	d000      	beq.n	800285e <__aeabi_dsub+0x51a>
 800285c:	e082      	b.n	8002964 <__aeabi_dsub+0x620>
 800285e:	000b      	movs	r3, r1
 8002860:	433b      	orrs	r3, r7
 8002862:	d11b      	bne.n	800289c <__aeabi_dsub+0x558>
 8002864:	2480      	movs	r4, #128	; 0x80
 8002866:	2500      	movs	r5, #0
 8002868:	0324      	lsls	r4, r4, #12
 800286a:	e6f9      	b.n	8002660 <__aeabi_dsub+0x31c>
 800286c:	19dc      	adds	r4, r3, r7
 800286e:	429c      	cmp	r4, r3
 8002870:	419b      	sbcs	r3, r3
 8002872:	4461      	add	r1, ip
 8002874:	4689      	mov	r9, r1
 8002876:	425b      	negs	r3, r3
 8002878:	4499      	add	r9, r3
 800287a:	464b      	mov	r3, r9
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	d444      	bmi.n	800290a <__aeabi_dsub+0x5c6>
 8002880:	2301      	movs	r3, #1
 8002882:	4698      	mov	r8, r3
 8002884:	e6cc      	b.n	8002620 <__aeabi_dsub+0x2dc>
 8002886:	1bdc      	subs	r4, r3, r7
 8002888:	4662      	mov	r2, ip
 800288a:	42a3      	cmp	r3, r4
 800288c:	419b      	sbcs	r3, r3
 800288e:	1a51      	subs	r1, r2, r1
 8002890:	425b      	negs	r3, r3
 8002892:	1acb      	subs	r3, r1, r3
 8002894:	4699      	mov	r9, r3
 8002896:	2301      	movs	r3, #1
 8002898:	4698      	mov	r8, r3
 800289a:	e5a4      	b.n	80023e6 <__aeabi_dsub+0xa2>
 800289c:	08ff      	lsrs	r7, r7, #3
 800289e:	074b      	lsls	r3, r1, #29
 80028a0:	465d      	mov	r5, fp
 80028a2:	433b      	orrs	r3, r7
 80028a4:	08cc      	lsrs	r4, r1, #3
 80028a6:	e6d7      	b.n	8002658 <__aeabi_dsub+0x314>
 80028a8:	4662      	mov	r2, ip
 80028aa:	431a      	orrs	r2, r3
 80028ac:	0014      	movs	r4, r2
 80028ae:	1e63      	subs	r3, r4, #1
 80028b0:	419c      	sbcs	r4, r3
 80028b2:	e679      	b.n	80025a8 <__aeabi_dsub+0x264>
 80028b4:	0015      	movs	r5, r2
 80028b6:	4664      	mov	r4, ip
 80028b8:	3d20      	subs	r5, #32
 80028ba:	40ec      	lsrs	r4, r5
 80028bc:	46a0      	mov	r8, r4
 80028be:	2a20      	cmp	r2, #32
 80028c0:	d005      	beq.n	80028ce <__aeabi_dsub+0x58a>
 80028c2:	2540      	movs	r5, #64	; 0x40
 80028c4:	4664      	mov	r4, ip
 80028c6:	1aaa      	subs	r2, r5, r2
 80028c8:	4094      	lsls	r4, r2
 80028ca:	4323      	orrs	r3, r4
 80028cc:	469a      	mov	sl, r3
 80028ce:	4654      	mov	r4, sl
 80028d0:	1e63      	subs	r3, r4, #1
 80028d2:	419c      	sbcs	r4, r3
 80028d4:	4643      	mov	r3, r8
 80028d6:	4323      	orrs	r3, r4
 80028d8:	e773      	b.n	80027c2 <__aeabi_dsub+0x47e>
 80028da:	4662      	mov	r2, ip
 80028dc:	431a      	orrs	r2, r3
 80028de:	d023      	beq.n	8002928 <__aeabi_dsub+0x5e4>
 80028e0:	000a      	movs	r2, r1
 80028e2:	433a      	orrs	r2, r7
 80028e4:	d000      	beq.n	80028e8 <__aeabi_dsub+0x5a4>
 80028e6:	e0a0      	b.n	8002a2a <__aeabi_dsub+0x6e6>
 80028e8:	4662      	mov	r2, ip
 80028ea:	08db      	lsrs	r3, r3, #3
 80028ec:	0752      	lsls	r2, r2, #29
 80028ee:	4313      	orrs	r3, r2
 80028f0:	4662      	mov	r2, ip
 80028f2:	08d4      	lsrs	r4, r2, #3
 80028f4:	e6b0      	b.n	8002658 <__aeabi_dsub+0x314>
 80028f6:	000b      	movs	r3, r1
 80028f8:	433b      	orrs	r3, r7
 80028fa:	d100      	bne.n	80028fe <__aeabi_dsub+0x5ba>
 80028fc:	e728      	b.n	8002750 <__aeabi_dsub+0x40c>
 80028fe:	08ff      	lsrs	r7, r7, #3
 8002900:	074b      	lsls	r3, r1, #29
 8002902:	465d      	mov	r5, fp
 8002904:	433b      	orrs	r3, r7
 8002906:	08cc      	lsrs	r4, r1, #3
 8002908:	e697      	b.n	800263a <__aeabi_dsub+0x2f6>
 800290a:	2302      	movs	r3, #2
 800290c:	4698      	mov	r8, r3
 800290e:	e736      	b.n	800277e <__aeabi_dsub+0x43a>
 8002910:	1afc      	subs	r4, r7, r3
 8002912:	42a7      	cmp	r7, r4
 8002914:	41bf      	sbcs	r7, r7
 8002916:	4663      	mov	r3, ip
 8002918:	427f      	negs	r7, r7
 800291a:	1ac9      	subs	r1, r1, r3
 800291c:	1bcb      	subs	r3, r1, r7
 800291e:	4699      	mov	r9, r3
 8002920:	2301      	movs	r3, #1
 8002922:	465d      	mov	r5, fp
 8002924:	4698      	mov	r8, r3
 8002926:	e55e      	b.n	80023e6 <__aeabi_dsub+0xa2>
 8002928:	074b      	lsls	r3, r1, #29
 800292a:	08ff      	lsrs	r7, r7, #3
 800292c:	433b      	orrs	r3, r7
 800292e:	08cc      	lsrs	r4, r1, #3
 8002930:	e692      	b.n	8002658 <__aeabi_dsub+0x314>
 8002932:	1bdc      	subs	r4, r3, r7
 8002934:	4660      	mov	r0, ip
 8002936:	42a3      	cmp	r3, r4
 8002938:	41b6      	sbcs	r6, r6
 800293a:	1a40      	subs	r0, r0, r1
 800293c:	4276      	negs	r6, r6
 800293e:	1b80      	subs	r0, r0, r6
 8002940:	4681      	mov	r9, r0
 8002942:	0200      	lsls	r0, r0, #8
 8002944:	d560      	bpl.n	8002a08 <__aeabi_dsub+0x6c4>
 8002946:	1afc      	subs	r4, r7, r3
 8002948:	42a7      	cmp	r7, r4
 800294a:	41bf      	sbcs	r7, r7
 800294c:	4663      	mov	r3, ip
 800294e:	427f      	negs	r7, r7
 8002950:	1ac9      	subs	r1, r1, r3
 8002952:	1bcb      	subs	r3, r1, r7
 8002954:	4699      	mov	r9, r3
 8002956:	465d      	mov	r5, fp
 8002958:	e576      	b.n	8002448 <__aeabi_dsub+0x104>
 800295a:	08ff      	lsrs	r7, r7, #3
 800295c:	074b      	lsls	r3, r1, #29
 800295e:	433b      	orrs	r3, r7
 8002960:	08cc      	lsrs	r4, r1, #3
 8002962:	e667      	b.n	8002634 <__aeabi_dsub+0x2f0>
 8002964:	000a      	movs	r2, r1
 8002966:	08db      	lsrs	r3, r3, #3
 8002968:	433a      	orrs	r2, r7
 800296a:	d100      	bne.n	800296e <__aeabi_dsub+0x62a>
 800296c:	e66f      	b.n	800264e <__aeabi_dsub+0x30a>
 800296e:	4662      	mov	r2, ip
 8002970:	0752      	lsls	r2, r2, #29
 8002972:	4313      	orrs	r3, r2
 8002974:	4662      	mov	r2, ip
 8002976:	08d4      	lsrs	r4, r2, #3
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	0312      	lsls	r2, r2, #12
 800297c:	4214      	tst	r4, r2
 800297e:	d007      	beq.n	8002990 <__aeabi_dsub+0x64c>
 8002980:	08c8      	lsrs	r0, r1, #3
 8002982:	4210      	tst	r0, r2
 8002984:	d104      	bne.n	8002990 <__aeabi_dsub+0x64c>
 8002986:	465d      	mov	r5, fp
 8002988:	0004      	movs	r4, r0
 800298a:	08fb      	lsrs	r3, r7, #3
 800298c:	0749      	lsls	r1, r1, #29
 800298e:	430b      	orrs	r3, r1
 8002990:	0f5a      	lsrs	r2, r3, #29
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	08db      	lsrs	r3, r3, #3
 8002996:	0752      	lsls	r2, r2, #29
 8002998:	4313      	orrs	r3, r2
 800299a:	e65d      	b.n	8002658 <__aeabi_dsub+0x314>
 800299c:	074b      	lsls	r3, r1, #29
 800299e:	08ff      	lsrs	r7, r7, #3
 80029a0:	433b      	orrs	r3, r7
 80029a2:	08cc      	lsrs	r4, r1, #3
 80029a4:	e649      	b.n	800263a <__aeabi_dsub+0x2f6>
 80029a6:	19dc      	adds	r4, r3, r7
 80029a8:	429c      	cmp	r4, r3
 80029aa:	419b      	sbcs	r3, r3
 80029ac:	4461      	add	r1, ip
 80029ae:	4689      	mov	r9, r1
 80029b0:	425b      	negs	r3, r3
 80029b2:	4499      	add	r9, r3
 80029b4:	464b      	mov	r3, r9
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	d400      	bmi.n	80029bc <__aeabi_dsub+0x678>
 80029ba:	e631      	b.n	8002620 <__aeabi_dsub+0x2dc>
 80029bc:	464a      	mov	r2, r9
 80029be:	4b17      	ldr	r3, [pc, #92]	; (8002a1c <__aeabi_dsub+0x6d8>)
 80029c0:	401a      	ands	r2, r3
 80029c2:	2301      	movs	r3, #1
 80029c4:	4691      	mov	r9, r2
 80029c6:	4698      	mov	r8, r3
 80029c8:	e62a      	b.n	8002620 <__aeabi_dsub+0x2dc>
 80029ca:	0016      	movs	r6, r2
 80029cc:	4664      	mov	r4, ip
 80029ce:	3e20      	subs	r6, #32
 80029d0:	40f4      	lsrs	r4, r6
 80029d2:	46a0      	mov	r8, r4
 80029d4:	2a20      	cmp	r2, #32
 80029d6:	d005      	beq.n	80029e4 <__aeabi_dsub+0x6a0>
 80029d8:	2640      	movs	r6, #64	; 0x40
 80029da:	4664      	mov	r4, ip
 80029dc:	1ab2      	subs	r2, r6, r2
 80029de:	4094      	lsls	r4, r2
 80029e0:	4323      	orrs	r3, r4
 80029e2:	469a      	mov	sl, r3
 80029e4:	4654      	mov	r4, sl
 80029e6:	1e63      	subs	r3, r4, #1
 80029e8:	419c      	sbcs	r4, r3
 80029ea:	4643      	mov	r3, r8
 80029ec:	431c      	orrs	r4, r3
 80029ee:	e5db      	b.n	80025a8 <__aeabi_dsub+0x264>
 80029f0:	0002      	movs	r2, r0
 80029f2:	2400      	movs	r4, #0
 80029f4:	2300      	movs	r3, #0
 80029f6:	e548      	b.n	800248a <__aeabi_dsub+0x146>
 80029f8:	19dc      	adds	r4, r3, r7
 80029fa:	42bc      	cmp	r4, r7
 80029fc:	41bf      	sbcs	r7, r7
 80029fe:	4461      	add	r1, ip
 8002a00:	4689      	mov	r9, r1
 8002a02:	427f      	negs	r7, r7
 8002a04:	44b9      	add	r9, r7
 8002a06:	e738      	b.n	800287a <__aeabi_dsub+0x536>
 8002a08:	464b      	mov	r3, r9
 8002a0a:	4323      	orrs	r3, r4
 8002a0c:	d100      	bne.n	8002a10 <__aeabi_dsub+0x6cc>
 8002a0e:	e69f      	b.n	8002750 <__aeabi_dsub+0x40c>
 8002a10:	e606      	b.n	8002620 <__aeabi_dsub+0x2dc>
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	000007fe 	.word	0x000007fe
 8002a18:	000007ff 	.word	0x000007ff
 8002a1c:	ff7fffff 	.word	0xff7fffff
 8002a20:	08ff      	lsrs	r7, r7, #3
 8002a22:	074b      	lsls	r3, r1, #29
 8002a24:	433b      	orrs	r3, r7
 8002a26:	08cc      	lsrs	r4, r1, #3
 8002a28:	e616      	b.n	8002658 <__aeabi_dsub+0x314>
 8002a2a:	4662      	mov	r2, ip
 8002a2c:	08db      	lsrs	r3, r3, #3
 8002a2e:	0752      	lsls	r2, r2, #29
 8002a30:	4313      	orrs	r3, r2
 8002a32:	4662      	mov	r2, ip
 8002a34:	08d4      	lsrs	r4, r2, #3
 8002a36:	2280      	movs	r2, #128	; 0x80
 8002a38:	0312      	lsls	r2, r2, #12
 8002a3a:	4214      	tst	r4, r2
 8002a3c:	d007      	beq.n	8002a4e <__aeabi_dsub+0x70a>
 8002a3e:	08c8      	lsrs	r0, r1, #3
 8002a40:	4210      	tst	r0, r2
 8002a42:	d104      	bne.n	8002a4e <__aeabi_dsub+0x70a>
 8002a44:	465d      	mov	r5, fp
 8002a46:	0004      	movs	r4, r0
 8002a48:	08fb      	lsrs	r3, r7, #3
 8002a4a:	0749      	lsls	r1, r1, #29
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	0f5a      	lsrs	r2, r3, #29
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	0752      	lsls	r2, r2, #29
 8002a54:	08db      	lsrs	r3, r3, #3
 8002a56:	4313      	orrs	r3, r2
 8002a58:	e5fe      	b.n	8002658 <__aeabi_dsub+0x314>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	4a01      	ldr	r2, [pc, #4]	; (8002a64 <__aeabi_dsub+0x720>)
 8002a5e:	001c      	movs	r4, r3
 8002a60:	e513      	b.n	800248a <__aeabi_dsub+0x146>
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	000007ff 	.word	0x000007ff

08002a68 <__aeabi_dcmpun>:
 8002a68:	b570      	push	{r4, r5, r6, lr}
 8002a6a:	0005      	movs	r5, r0
 8002a6c:	480c      	ldr	r0, [pc, #48]	; (8002aa0 <__aeabi_dcmpun+0x38>)
 8002a6e:	031c      	lsls	r4, r3, #12
 8002a70:	0016      	movs	r6, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	030a      	lsls	r2, r1, #12
 8002a76:	0049      	lsls	r1, r1, #1
 8002a78:	0b12      	lsrs	r2, r2, #12
 8002a7a:	0d49      	lsrs	r1, r1, #21
 8002a7c:	0b24      	lsrs	r4, r4, #12
 8002a7e:	0d5b      	lsrs	r3, r3, #21
 8002a80:	4281      	cmp	r1, r0
 8002a82:	d008      	beq.n	8002a96 <__aeabi_dcmpun+0x2e>
 8002a84:	4a06      	ldr	r2, [pc, #24]	; (8002aa0 <__aeabi_dcmpun+0x38>)
 8002a86:	2000      	movs	r0, #0
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d103      	bne.n	8002a94 <__aeabi_dcmpun+0x2c>
 8002a8c:	0020      	movs	r0, r4
 8002a8e:	4330      	orrs	r0, r6
 8002a90:	1e43      	subs	r3, r0, #1
 8002a92:	4198      	sbcs	r0, r3
 8002a94:	bd70      	pop	{r4, r5, r6, pc}
 8002a96:	2001      	movs	r0, #1
 8002a98:	432a      	orrs	r2, r5
 8002a9a:	d1fb      	bne.n	8002a94 <__aeabi_dcmpun+0x2c>
 8002a9c:	e7f2      	b.n	8002a84 <__aeabi_dcmpun+0x1c>
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	000007ff 	.word	0x000007ff

08002aa4 <__aeabi_d2iz>:
 8002aa4:	000a      	movs	r2, r1
 8002aa6:	b530      	push	{r4, r5, lr}
 8002aa8:	4c13      	ldr	r4, [pc, #76]	; (8002af8 <__aeabi_d2iz+0x54>)
 8002aaa:	0053      	lsls	r3, r2, #1
 8002aac:	0309      	lsls	r1, r1, #12
 8002aae:	0005      	movs	r5, r0
 8002ab0:	0b09      	lsrs	r1, r1, #12
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	0d5b      	lsrs	r3, r3, #21
 8002ab6:	0fd2      	lsrs	r2, r2, #31
 8002ab8:	42a3      	cmp	r3, r4
 8002aba:	dd04      	ble.n	8002ac6 <__aeabi_d2iz+0x22>
 8002abc:	480f      	ldr	r0, [pc, #60]	; (8002afc <__aeabi_d2iz+0x58>)
 8002abe:	4283      	cmp	r3, r0
 8002ac0:	dd02      	ble.n	8002ac8 <__aeabi_d2iz+0x24>
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <__aeabi_d2iz+0x5c>)
 8002ac4:	18d0      	adds	r0, r2, r3
 8002ac6:	bd30      	pop	{r4, r5, pc}
 8002ac8:	2080      	movs	r0, #128	; 0x80
 8002aca:	0340      	lsls	r0, r0, #13
 8002acc:	4301      	orrs	r1, r0
 8002ace:	480d      	ldr	r0, [pc, #52]	; (8002b04 <__aeabi_d2iz+0x60>)
 8002ad0:	1ac0      	subs	r0, r0, r3
 8002ad2:	281f      	cmp	r0, #31
 8002ad4:	dd08      	ble.n	8002ae8 <__aeabi_d2iz+0x44>
 8002ad6:	480c      	ldr	r0, [pc, #48]	; (8002b08 <__aeabi_d2iz+0x64>)
 8002ad8:	1ac3      	subs	r3, r0, r3
 8002ada:	40d9      	lsrs	r1, r3
 8002adc:	000b      	movs	r3, r1
 8002ade:	4258      	negs	r0, r3
 8002ae0:	2a00      	cmp	r2, #0
 8002ae2:	d1f0      	bne.n	8002ac6 <__aeabi_d2iz+0x22>
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	e7ee      	b.n	8002ac6 <__aeabi_d2iz+0x22>
 8002ae8:	4c08      	ldr	r4, [pc, #32]	; (8002b0c <__aeabi_d2iz+0x68>)
 8002aea:	40c5      	lsrs	r5, r0
 8002aec:	46a4      	mov	ip, r4
 8002aee:	4463      	add	r3, ip
 8002af0:	4099      	lsls	r1, r3
 8002af2:	000b      	movs	r3, r1
 8002af4:	432b      	orrs	r3, r5
 8002af6:	e7f2      	b.n	8002ade <__aeabi_d2iz+0x3a>
 8002af8:	000003fe 	.word	0x000003fe
 8002afc:	0000041d 	.word	0x0000041d
 8002b00:	7fffffff 	.word	0x7fffffff
 8002b04:	00000433 	.word	0x00000433
 8002b08:	00000413 	.word	0x00000413
 8002b0c:	fffffbed 	.word	0xfffffbed

08002b10 <__aeabi_i2d>:
 8002b10:	b570      	push	{r4, r5, r6, lr}
 8002b12:	2800      	cmp	r0, #0
 8002b14:	d016      	beq.n	8002b44 <__aeabi_i2d+0x34>
 8002b16:	17c3      	asrs	r3, r0, #31
 8002b18:	18c5      	adds	r5, r0, r3
 8002b1a:	405d      	eors	r5, r3
 8002b1c:	0fc4      	lsrs	r4, r0, #31
 8002b1e:	0028      	movs	r0, r5
 8002b20:	f000 f91c 	bl	8002d5c <__clzsi2>
 8002b24:	4a11      	ldr	r2, [pc, #68]	; (8002b6c <__aeabi_i2d+0x5c>)
 8002b26:	1a12      	subs	r2, r2, r0
 8002b28:	280a      	cmp	r0, #10
 8002b2a:	dc16      	bgt.n	8002b5a <__aeabi_i2d+0x4a>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	002e      	movs	r6, r5
 8002b30:	3315      	adds	r3, #21
 8002b32:	409e      	lsls	r6, r3
 8002b34:	230b      	movs	r3, #11
 8002b36:	1a18      	subs	r0, r3, r0
 8002b38:	40c5      	lsrs	r5, r0
 8002b3a:	0552      	lsls	r2, r2, #21
 8002b3c:	032d      	lsls	r5, r5, #12
 8002b3e:	0b2d      	lsrs	r5, r5, #12
 8002b40:	0d53      	lsrs	r3, r2, #21
 8002b42:	e003      	b.n	8002b4c <__aeabi_i2d+0x3c>
 8002b44:	2400      	movs	r4, #0
 8002b46:	2300      	movs	r3, #0
 8002b48:	2500      	movs	r5, #0
 8002b4a:	2600      	movs	r6, #0
 8002b4c:	051b      	lsls	r3, r3, #20
 8002b4e:	432b      	orrs	r3, r5
 8002b50:	07e4      	lsls	r4, r4, #31
 8002b52:	4323      	orrs	r3, r4
 8002b54:	0030      	movs	r0, r6
 8002b56:	0019      	movs	r1, r3
 8002b58:	bd70      	pop	{r4, r5, r6, pc}
 8002b5a:	380b      	subs	r0, #11
 8002b5c:	4085      	lsls	r5, r0
 8002b5e:	0552      	lsls	r2, r2, #21
 8002b60:	032d      	lsls	r5, r5, #12
 8002b62:	2600      	movs	r6, #0
 8002b64:	0b2d      	lsrs	r5, r5, #12
 8002b66:	0d53      	lsrs	r3, r2, #21
 8002b68:	e7f0      	b.n	8002b4c <__aeabi_i2d+0x3c>
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	0000041e 	.word	0x0000041e

08002b70 <__aeabi_ui2d>:
 8002b70:	b510      	push	{r4, lr}
 8002b72:	1e04      	subs	r4, r0, #0
 8002b74:	d010      	beq.n	8002b98 <__aeabi_ui2d+0x28>
 8002b76:	f000 f8f1 	bl	8002d5c <__clzsi2>
 8002b7a:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <__aeabi_ui2d+0x48>)
 8002b7c:	1a1b      	subs	r3, r3, r0
 8002b7e:	280a      	cmp	r0, #10
 8002b80:	dc11      	bgt.n	8002ba6 <__aeabi_ui2d+0x36>
 8002b82:	220b      	movs	r2, #11
 8002b84:	0021      	movs	r1, r4
 8002b86:	1a12      	subs	r2, r2, r0
 8002b88:	40d1      	lsrs	r1, r2
 8002b8a:	3015      	adds	r0, #21
 8002b8c:	030a      	lsls	r2, r1, #12
 8002b8e:	055b      	lsls	r3, r3, #21
 8002b90:	4084      	lsls	r4, r0
 8002b92:	0b12      	lsrs	r2, r2, #12
 8002b94:	0d5b      	lsrs	r3, r3, #21
 8002b96:	e001      	b.n	8002b9c <__aeabi_ui2d+0x2c>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	051b      	lsls	r3, r3, #20
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	0020      	movs	r0, r4
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	bd10      	pop	{r4, pc}
 8002ba6:	0022      	movs	r2, r4
 8002ba8:	380b      	subs	r0, #11
 8002baa:	4082      	lsls	r2, r0
 8002bac:	055b      	lsls	r3, r3, #21
 8002bae:	0312      	lsls	r2, r2, #12
 8002bb0:	2400      	movs	r4, #0
 8002bb2:	0b12      	lsrs	r2, r2, #12
 8002bb4:	0d5b      	lsrs	r3, r3, #21
 8002bb6:	e7f1      	b.n	8002b9c <__aeabi_ui2d+0x2c>
 8002bb8:	0000041e 	.word	0x0000041e

08002bbc <__aeabi_f2d>:
 8002bbc:	b570      	push	{r4, r5, r6, lr}
 8002bbe:	0043      	lsls	r3, r0, #1
 8002bc0:	0246      	lsls	r6, r0, #9
 8002bc2:	0fc4      	lsrs	r4, r0, #31
 8002bc4:	20fe      	movs	r0, #254	; 0xfe
 8002bc6:	0e1b      	lsrs	r3, r3, #24
 8002bc8:	1c59      	adds	r1, r3, #1
 8002bca:	0a75      	lsrs	r5, r6, #9
 8002bcc:	4208      	tst	r0, r1
 8002bce:	d00c      	beq.n	8002bea <__aeabi_f2d+0x2e>
 8002bd0:	22e0      	movs	r2, #224	; 0xe0
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	4694      	mov	ip, r2
 8002bd6:	076d      	lsls	r5, r5, #29
 8002bd8:	0b36      	lsrs	r6, r6, #12
 8002bda:	4463      	add	r3, ip
 8002bdc:	051b      	lsls	r3, r3, #20
 8002bde:	4333      	orrs	r3, r6
 8002be0:	07e4      	lsls	r4, r4, #31
 8002be2:	4323      	orrs	r3, r4
 8002be4:	0028      	movs	r0, r5
 8002be6:	0019      	movs	r1, r3
 8002be8:	bd70      	pop	{r4, r5, r6, pc}
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d114      	bne.n	8002c18 <__aeabi_f2d+0x5c>
 8002bee:	2d00      	cmp	r5, #0
 8002bf0:	d01b      	beq.n	8002c2a <__aeabi_f2d+0x6e>
 8002bf2:	0028      	movs	r0, r5
 8002bf4:	f000 f8b2 	bl	8002d5c <__clzsi2>
 8002bf8:	280a      	cmp	r0, #10
 8002bfa:	dc1c      	bgt.n	8002c36 <__aeabi_f2d+0x7a>
 8002bfc:	230b      	movs	r3, #11
 8002bfe:	002e      	movs	r6, r5
 8002c00:	1a1b      	subs	r3, r3, r0
 8002c02:	40de      	lsrs	r6, r3
 8002c04:	0003      	movs	r3, r0
 8002c06:	3315      	adds	r3, #21
 8002c08:	409d      	lsls	r5, r3
 8002c0a:	4a0e      	ldr	r2, [pc, #56]	; (8002c44 <__aeabi_f2d+0x88>)
 8002c0c:	0336      	lsls	r6, r6, #12
 8002c0e:	1a12      	subs	r2, r2, r0
 8002c10:	0552      	lsls	r2, r2, #21
 8002c12:	0b36      	lsrs	r6, r6, #12
 8002c14:	0d53      	lsrs	r3, r2, #21
 8002c16:	e7e1      	b.n	8002bdc <__aeabi_f2d+0x20>
 8002c18:	2d00      	cmp	r5, #0
 8002c1a:	d009      	beq.n	8002c30 <__aeabi_f2d+0x74>
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	0b36      	lsrs	r6, r6, #12
 8002c20:	0312      	lsls	r2, r2, #12
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <__aeabi_f2d+0x8c>)
 8002c24:	076d      	lsls	r5, r5, #29
 8002c26:	4316      	orrs	r6, r2
 8002c28:	e7d8      	b.n	8002bdc <__aeabi_f2d+0x20>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2600      	movs	r6, #0
 8002c2e:	e7d5      	b.n	8002bdc <__aeabi_f2d+0x20>
 8002c30:	2600      	movs	r6, #0
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <__aeabi_f2d+0x8c>)
 8002c34:	e7d2      	b.n	8002bdc <__aeabi_f2d+0x20>
 8002c36:	0003      	movs	r3, r0
 8002c38:	3b0b      	subs	r3, #11
 8002c3a:	409d      	lsls	r5, r3
 8002c3c:	002e      	movs	r6, r5
 8002c3e:	2500      	movs	r5, #0
 8002c40:	e7e3      	b.n	8002c0a <__aeabi_f2d+0x4e>
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	00000389 	.word	0x00000389
 8002c48:	000007ff 	.word	0x000007ff

08002c4c <__aeabi_d2f>:
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	004b      	lsls	r3, r1, #1
 8002c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c52:	0d5b      	lsrs	r3, r3, #21
 8002c54:	030c      	lsls	r4, r1, #12
 8002c56:	4e3d      	ldr	r6, [pc, #244]	; (8002d4c <__aeabi_d2f+0x100>)
 8002c58:	0a64      	lsrs	r4, r4, #9
 8002c5a:	0f40      	lsrs	r0, r0, #29
 8002c5c:	1c5f      	adds	r7, r3, #1
 8002c5e:	0fc9      	lsrs	r1, r1, #31
 8002c60:	4304      	orrs	r4, r0
 8002c62:	00d5      	lsls	r5, r2, #3
 8002c64:	4237      	tst	r7, r6
 8002c66:	d00a      	beq.n	8002c7e <__aeabi_d2f+0x32>
 8002c68:	4839      	ldr	r0, [pc, #228]	; (8002d50 <__aeabi_d2f+0x104>)
 8002c6a:	181e      	adds	r6, r3, r0
 8002c6c:	2efe      	cmp	r6, #254	; 0xfe
 8002c6e:	dd16      	ble.n	8002c9e <__aeabi_d2f+0x52>
 8002c70:	20ff      	movs	r0, #255	; 0xff
 8002c72:	2400      	movs	r4, #0
 8002c74:	05c0      	lsls	r0, r0, #23
 8002c76:	4320      	orrs	r0, r4
 8002c78:	07c9      	lsls	r1, r1, #31
 8002c7a:	4308      	orrs	r0, r1
 8002c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <__aeabi_d2f+0x44>
 8002c82:	432c      	orrs	r4, r5
 8002c84:	d026      	beq.n	8002cd4 <__aeabi_d2f+0x88>
 8002c86:	2205      	movs	r2, #5
 8002c88:	0192      	lsls	r2, r2, #6
 8002c8a:	0a54      	lsrs	r4, r2, #9
 8002c8c:	b2d8      	uxtb	r0, r3
 8002c8e:	e7f1      	b.n	8002c74 <__aeabi_d2f+0x28>
 8002c90:	4325      	orrs	r5, r4
 8002c92:	d0ed      	beq.n	8002c70 <__aeabi_d2f+0x24>
 8002c94:	2080      	movs	r0, #128	; 0x80
 8002c96:	03c0      	lsls	r0, r0, #15
 8002c98:	4304      	orrs	r4, r0
 8002c9a:	20ff      	movs	r0, #255	; 0xff
 8002c9c:	e7ea      	b.n	8002c74 <__aeabi_d2f+0x28>
 8002c9e:	2e00      	cmp	r6, #0
 8002ca0:	dd1b      	ble.n	8002cda <__aeabi_d2f+0x8e>
 8002ca2:	0192      	lsls	r2, r2, #6
 8002ca4:	1e53      	subs	r3, r2, #1
 8002ca6:	419a      	sbcs	r2, r3
 8002ca8:	00e4      	lsls	r4, r4, #3
 8002caa:	0f6d      	lsrs	r5, r5, #29
 8002cac:	4322      	orrs	r2, r4
 8002cae:	432a      	orrs	r2, r5
 8002cb0:	0753      	lsls	r3, r2, #29
 8002cb2:	d048      	beq.n	8002d46 <__aeabi_d2f+0xfa>
 8002cb4:	230f      	movs	r3, #15
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d000      	beq.n	8002cbe <__aeabi_d2f+0x72>
 8002cbc:	3204      	adds	r2, #4
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	04db      	lsls	r3, r3, #19
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d03f      	beq.n	8002d46 <__aeabi_d2f+0xfa>
 8002cc6:	1c70      	adds	r0, r6, #1
 8002cc8:	2efe      	cmp	r6, #254	; 0xfe
 8002cca:	d0d1      	beq.n	8002c70 <__aeabi_d2f+0x24>
 8002ccc:	0192      	lsls	r2, r2, #6
 8002cce:	0a54      	lsrs	r4, r2, #9
 8002cd0:	b2c0      	uxtb	r0, r0
 8002cd2:	e7cf      	b.n	8002c74 <__aeabi_d2f+0x28>
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	2400      	movs	r4, #0
 8002cd8:	e7cc      	b.n	8002c74 <__aeabi_d2f+0x28>
 8002cda:	0032      	movs	r2, r6
 8002cdc:	3217      	adds	r2, #23
 8002cde:	db22      	blt.n	8002d26 <__aeabi_d2f+0xda>
 8002ce0:	2080      	movs	r0, #128	; 0x80
 8002ce2:	0400      	lsls	r0, r0, #16
 8002ce4:	4320      	orrs	r0, r4
 8002ce6:	241e      	movs	r4, #30
 8002ce8:	1ba4      	subs	r4, r4, r6
 8002cea:	2c1f      	cmp	r4, #31
 8002cec:	dd1d      	ble.n	8002d2a <__aeabi_d2f+0xde>
 8002cee:	2202      	movs	r2, #2
 8002cf0:	4252      	negs	r2, r2
 8002cf2:	1b96      	subs	r6, r2, r6
 8002cf4:	0002      	movs	r2, r0
 8002cf6:	40f2      	lsrs	r2, r6
 8002cf8:	0016      	movs	r6, r2
 8002cfa:	2c20      	cmp	r4, #32
 8002cfc:	d004      	beq.n	8002d08 <__aeabi_d2f+0xbc>
 8002cfe:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <__aeabi_d2f+0x108>)
 8002d00:	4694      	mov	ip, r2
 8002d02:	4463      	add	r3, ip
 8002d04:	4098      	lsls	r0, r3
 8002d06:	4305      	orrs	r5, r0
 8002d08:	002a      	movs	r2, r5
 8002d0a:	1e53      	subs	r3, r2, #1
 8002d0c:	419a      	sbcs	r2, r3
 8002d0e:	4332      	orrs	r2, r6
 8002d10:	2600      	movs	r6, #0
 8002d12:	0753      	lsls	r3, r2, #29
 8002d14:	d1ce      	bne.n	8002cb4 <__aeabi_d2f+0x68>
 8002d16:	2480      	movs	r4, #128	; 0x80
 8002d18:	0013      	movs	r3, r2
 8002d1a:	04e4      	lsls	r4, r4, #19
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	4023      	ands	r3, r4
 8002d20:	4222      	tst	r2, r4
 8002d22:	d1d3      	bne.n	8002ccc <__aeabi_d2f+0x80>
 8002d24:	e7b0      	b.n	8002c88 <__aeabi_d2f+0x3c>
 8002d26:	2300      	movs	r3, #0
 8002d28:	e7ad      	b.n	8002c86 <__aeabi_d2f+0x3a>
 8002d2a:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <__aeabi_d2f+0x10c>)
 8002d2c:	4694      	mov	ip, r2
 8002d2e:	002a      	movs	r2, r5
 8002d30:	40e2      	lsrs	r2, r4
 8002d32:	0014      	movs	r4, r2
 8002d34:	002a      	movs	r2, r5
 8002d36:	4463      	add	r3, ip
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	4098      	lsls	r0, r3
 8002d3c:	1e55      	subs	r5, r2, #1
 8002d3e:	41aa      	sbcs	r2, r5
 8002d40:	4302      	orrs	r2, r0
 8002d42:	4322      	orrs	r2, r4
 8002d44:	e7e4      	b.n	8002d10 <__aeabi_d2f+0xc4>
 8002d46:	0033      	movs	r3, r6
 8002d48:	e79e      	b.n	8002c88 <__aeabi_d2f+0x3c>
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	000007fe 	.word	0x000007fe
 8002d50:	fffffc80 	.word	0xfffffc80
 8002d54:	fffffca2 	.word	0xfffffca2
 8002d58:	fffffc82 	.word	0xfffffc82

08002d5c <__clzsi2>:
 8002d5c:	211c      	movs	r1, #28
 8002d5e:	2301      	movs	r3, #1
 8002d60:	041b      	lsls	r3, r3, #16
 8002d62:	4298      	cmp	r0, r3
 8002d64:	d301      	bcc.n	8002d6a <__clzsi2+0xe>
 8002d66:	0c00      	lsrs	r0, r0, #16
 8002d68:	3910      	subs	r1, #16
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	4298      	cmp	r0, r3
 8002d6e:	d301      	bcc.n	8002d74 <__clzsi2+0x18>
 8002d70:	0a00      	lsrs	r0, r0, #8
 8002d72:	3908      	subs	r1, #8
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	4298      	cmp	r0, r3
 8002d78:	d301      	bcc.n	8002d7e <__clzsi2+0x22>
 8002d7a:	0900      	lsrs	r0, r0, #4
 8002d7c:	3904      	subs	r1, #4
 8002d7e:	a202      	add	r2, pc, #8	; (adr r2, 8002d88 <__clzsi2+0x2c>)
 8002d80:	5c10      	ldrb	r0, [r2, r0]
 8002d82:	1840      	adds	r0, r0, r1
 8002d84:	4770      	bx	lr
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	02020304 	.word	0x02020304
 8002d8c:	01010101 	.word	0x01010101
	...

08002d98 <__clzdi2>:
 8002d98:	b510      	push	{r4, lr}
 8002d9a:	2900      	cmp	r1, #0
 8002d9c:	d103      	bne.n	8002da6 <__clzdi2+0xe>
 8002d9e:	f7ff ffdd 	bl	8002d5c <__clzsi2>
 8002da2:	3020      	adds	r0, #32
 8002da4:	e002      	b.n	8002dac <__clzdi2+0x14>
 8002da6:	0008      	movs	r0, r1
 8002da8:	f7ff ffd8 	bl	8002d5c <__clzsi2>
 8002dac:	bd10      	pop	{r4, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)

08002db0 <dataCalibration>:
long B6 = 0;
unsigned long B7 = 0;
long Pressure = 0;
long TE = 0;

void dataCalibration() {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af04      	add	r7, sp, #16
	uint8_t dataCalibration[22] = {0};
 8002db6:	003b      	movs	r3, r7
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	2212      	movs	r2, #18
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f005 f870 	bl	8007ea8 <memset>
	uint16_t startCalibration = 0xAA;
 8002dc8:	2116      	movs	r1, #22
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	22aa      	movs	r2, #170	; 0xaa
 8002dce:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, 0xEE, startCalibration, 1, dataCalibration, 22, HAL_MAX_DELAY);
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	881a      	ldrh	r2, [r3, #0]
 8002dd4:	4845      	ldr	r0, [pc, #276]	; (8002eec <dataCalibration+0x13c>)
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	425b      	negs	r3, r3
 8002dda:	9302      	str	r3, [sp, #8]
 8002ddc:	2316      	movs	r3, #22
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	003b      	movs	r3, r7
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	2301      	movs	r3, #1
 8002de6:	21ee      	movs	r1, #238	; 0xee
 8002de8:	f002 fcb8 	bl	800575c <HAL_I2C_Mem_Read>
	AC1 = ((dataCalibration[0] << 8) | dataCalibration[1]);
 8002dec:	003b      	movs	r3, r7
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	b21a      	sxth	r2, r3
 8002df4:	003b      	movs	r3, r7
 8002df6:	785b      	ldrb	r3, [r3, #1]
 8002df8:	b21b      	sxth	r3, r3
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	b21a      	sxth	r2, r3
 8002dfe:	4b3c      	ldr	r3, [pc, #240]	; (8002ef0 <dataCalibration+0x140>)
 8002e00:	801a      	strh	r2, [r3, #0]
	AC2 = ((dataCalibration[2] << 8) | dataCalibration[3]);
 8002e02:	003b      	movs	r3, r7
 8002e04:	789b      	ldrb	r3, [r3, #2]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	b21a      	sxth	r2, r3
 8002e0a:	003b      	movs	r3, r7
 8002e0c:	78db      	ldrb	r3, [r3, #3]
 8002e0e:	b21b      	sxth	r3, r3
 8002e10:	4313      	orrs	r3, r2
 8002e12:	b21a      	sxth	r2, r3
 8002e14:	4b37      	ldr	r3, [pc, #220]	; (8002ef4 <dataCalibration+0x144>)
 8002e16:	801a      	strh	r2, [r3, #0]
	AC3 = ((dataCalibration[4] << 8) | dataCalibration[5]);
 8002e18:	003b      	movs	r3, r7
 8002e1a:	791b      	ldrb	r3, [r3, #4]
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	b21a      	sxth	r2, r3
 8002e20:	003b      	movs	r3, r7
 8002e22:	795b      	ldrb	r3, [r3, #5]
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	4313      	orrs	r3, r2
 8002e28:	b21a      	sxth	r2, r3
 8002e2a:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <dataCalibration+0x148>)
 8002e2c:	801a      	strh	r2, [r3, #0]
	AC4 = ((dataCalibration[6] << 8) | dataCalibration[7]);
 8002e2e:	003b      	movs	r3, r7
 8002e30:	799b      	ldrb	r3, [r3, #6]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	b21a      	sxth	r2, r3
 8002e36:	003b      	movs	r3, r7
 8002e38:	79db      	ldrb	r3, [r3, #7]
 8002e3a:	b21b      	sxth	r3, r3
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	b21b      	sxth	r3, r3
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	4b2e      	ldr	r3, [pc, #184]	; (8002efc <dataCalibration+0x14c>)
 8002e44:	801a      	strh	r2, [r3, #0]
	AC5 = ((dataCalibration[8] << 8) | dataCalibration[9]);
 8002e46:	003b      	movs	r3, r7
 8002e48:	7a1b      	ldrb	r3, [r3, #8]
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	b21a      	sxth	r2, r3
 8002e4e:	003b      	movs	r3, r7
 8002e50:	7a5b      	ldrb	r3, [r3, #9]
 8002e52:	b21b      	sxth	r3, r3
 8002e54:	4313      	orrs	r3, r2
 8002e56:	b21b      	sxth	r3, r3
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <dataCalibration+0x150>)
 8002e5c:	801a      	strh	r2, [r3, #0]
	AC6 = ((dataCalibration[10] << 8) | dataCalibration[11]);
 8002e5e:	003b      	movs	r3, r7
 8002e60:	7a9b      	ldrb	r3, [r3, #10]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	003b      	movs	r3, r7
 8002e68:	7adb      	ldrb	r3, [r3, #11]
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <dataCalibration+0x154>)
 8002e74:	801a      	strh	r2, [r3, #0]
	B1 = ((dataCalibration[12] << 8) | dataCalibration[13]);
 8002e76:	003b      	movs	r3, r7
 8002e78:	7b1b      	ldrb	r3, [r3, #12]
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	b21a      	sxth	r2, r3
 8002e7e:	003b      	movs	r3, r7
 8002e80:	7b5b      	ldrb	r3, [r3, #13]
 8002e82:	b21b      	sxth	r3, r3
 8002e84:	4313      	orrs	r3, r2
 8002e86:	b21a      	sxth	r2, r3
 8002e88:	4b1f      	ldr	r3, [pc, #124]	; (8002f08 <dataCalibration+0x158>)
 8002e8a:	801a      	strh	r2, [r3, #0]
	B2 = ((dataCalibration[14] << 8) | dataCalibration[15]);
 8002e8c:	003b      	movs	r3, r7
 8002e8e:	7b9b      	ldrb	r3, [r3, #14]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	b21a      	sxth	r2, r3
 8002e94:	003b      	movs	r3, r7
 8002e96:	7bdb      	ldrb	r3, [r3, #15]
 8002e98:	b21b      	sxth	r3, r3
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	b21a      	sxth	r2, r3
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <dataCalibration+0x15c>)
 8002ea0:	801a      	strh	r2, [r3, #0]
	MB = ((dataCalibration[16] << 8) | dataCalibration[17]);
 8002ea2:	003b      	movs	r3, r7
 8002ea4:	7c1b      	ldrb	r3, [r3, #16]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	b21a      	sxth	r2, r3
 8002eaa:	003b      	movs	r3, r7
 8002eac:	7c5b      	ldrb	r3, [r3, #17]
 8002eae:	b21b      	sxth	r3, r3
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	b21a      	sxth	r2, r3
 8002eb4:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <dataCalibration+0x160>)
 8002eb6:	801a      	strh	r2, [r3, #0]
	MC = ((dataCalibration[18] << 8) | dataCalibration[19]);
 8002eb8:	003b      	movs	r3, r7
 8002eba:	7c9b      	ldrb	r3, [r3, #18]
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	b21a      	sxth	r2, r3
 8002ec0:	003b      	movs	r3, r7
 8002ec2:	7cdb      	ldrb	r3, [r3, #19]
 8002ec4:	b21b      	sxth	r3, r3
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	b21a      	sxth	r2, r3
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <dataCalibration+0x164>)
 8002ecc:	801a      	strh	r2, [r3, #0]
	MD = ((dataCalibration[20] << 8) | dataCalibration[21]);
 8002ece:	003b      	movs	r3, r7
 8002ed0:	7d1b      	ldrb	r3, [r3, #20]
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	b21a      	sxth	r2, r3
 8002ed6:	003b      	movs	r3, r7
 8002ed8:	7d5b      	ldrb	r3, [r3, #21]
 8002eda:	b21b      	sxth	r3, r3
 8002edc:	4313      	orrs	r3, r2
 8002ede:	b21a      	sxth	r2, r3
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <dataCalibration+0x168>)
 8002ee2:	801a      	strh	r2, [r3, #0]
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b006      	add	sp, #24
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	200002a0 	.word	0x200002a0
 8002ef0:	200001f8 	.word	0x200001f8
 8002ef4:	200001fa 	.word	0x200001fa
 8002ef8:	200001fc 	.word	0x200001fc
 8002efc:	200001fe 	.word	0x200001fe
 8002f00:	20000200 	.word	0x20000200
 8002f04:	20000202 	.word	0x20000202
 8002f08:	20000204 	.word	0x20000204
 8002f0c:	20000206 	.word	0x20000206
 8002f10:	20000208 	.word	0x20000208
 8002f14:	2000020a 	.word	0x2000020a
 8002f18:	2000020c 	.word	0x2000020c

08002f1c <utemp>:

uint16_t utemp() {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 8002f22:	1dfb      	adds	r3, r7, #7
 8002f24:	222e      	movs	r2, #46	; 0x2e
 8002f26:	701a      	strb	r2, [r3, #0]
	uint8_t rawtemp[2] = {0};
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, 0xEE, 0xF4, 1, &data, 1, 1000);
 8002f2e:	4815      	ldr	r0, [pc, #84]	; (8002f84 <utemp+0x68>)
 8002f30:	23fa      	movs	r3, #250	; 0xfa
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	9302      	str	r3, [sp, #8]
 8002f36:	2301      	movs	r3, #1
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	1dfb      	adds	r3, r7, #7
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	2301      	movs	r3, #1
 8002f40:	22f4      	movs	r2, #244	; 0xf4
 8002f42:	21ee      	movs	r1, #238	; 0xee
 8002f44:	f002 fadc 	bl	8005500 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8002f48:	2005      	movs	r0, #5
 8002f4a:	f001 fc19 	bl	8004780 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, 0xEE, 0xF6, 1, rawtemp, 2, 1000);
 8002f4e:	480d      	ldr	r0, [pc, #52]	; (8002f84 <utemp+0x68>)
 8002f50:	23fa      	movs	r3, #250	; 0xfa
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	9302      	str	r3, [sp, #8]
 8002f56:	2302      	movs	r3, #2
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	2301      	movs	r3, #1
 8002f60:	22f6      	movs	r2, #246	; 0xf6
 8002f62:	21ee      	movs	r1, #238	; 0xee
 8002f64:	f002 fbfa 	bl	800575c <HAL_I2C_Mem_Read>
	return (rawtemp[0] << 8) + rawtemp[1];
 8002f68:	1d3b      	adds	r3, r7, #4
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	785b      	ldrb	r3, [r3, #1]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	18d3      	adds	r3, r2, r3
 8002f7a:	b29b      	uxth	r3, r3
}
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	200002a0 	.word	0x200002a0

08002f88 <getTemp>:

uint16_t getTemp() {
 8002f88:	b5b0      	push	{r4, r5, r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
	UT = utemp();
 8002f8c:	f7ff ffc6 	bl	8002f1c <utemp>
 8002f90:	0003      	movs	r3, r0
 8002f92:	001a      	movs	r2, r3
 8002f94:	4b3c      	ldr	r3, [pc, #240]	; (8003088 <getTemp+0x100>)
 8002f96:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8002f98:	4b3b      	ldr	r3, [pc, #236]	; (8003088 <getTemp+0x100>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a3b      	ldr	r2, [pc, #236]	; (800308c <getTemp+0x104>)
 8002f9e:	8812      	ldrh	r2, [r2, #0]
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f7ff fdb4 	bl	8002b10 <__aeabi_i2d>
 8002fa8:	0004      	movs	r4, r0
 8002faa:	000d      	movs	r5, r1
 8002fac:	4b38      	ldr	r3, [pc, #224]	; (8003090 <getTemp+0x108>)
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7ff fdad 	bl	8002b10 <__aeabi_i2d>
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	4b36      	ldr	r3, [pc, #216]	; (8003094 <getTemp+0x10c>)
 8002fba:	f7fe fb55 	bl	8001668 <__aeabi_ddiv>
 8002fbe:	0002      	movs	r2, r0
 8002fc0:	000b      	movs	r3, r1
 8002fc2:	0020      	movs	r0, r4
 8002fc4:	0029      	movs	r1, r5
 8002fc6:	f7fe ff51 	bl	8001e6c <__aeabi_dmul>
 8002fca:	0002      	movs	r2, r0
 8002fcc:	000b      	movs	r3, r1
 8002fce:	0010      	movs	r0, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	f7ff fd67 	bl	8002aa4 <__aeabi_d2iz>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <getTemp+0x110>)
 8002fda:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8002fdc:	4b2f      	ldr	r3, [pc, #188]	; (800309c <getTemp+0x114>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	5e9b      	ldrsh	r3, [r3, r2]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7ff fd94 	bl	8002b10 <__aeabi_i2d>
 8002fe8:	2200      	movs	r2, #0
 8002fea:	4b2d      	ldr	r3, [pc, #180]	; (80030a0 <getTemp+0x118>)
 8002fec:	f7fe ff3e 	bl	8001e6c <__aeabi_dmul>
 8002ff0:	0002      	movs	r2, r0
 8002ff2:	000b      	movs	r3, r1
 8002ff4:	0014      	movs	r4, r2
 8002ff6:	001d      	movs	r5, r3
 8002ff8:	4b2a      	ldr	r3, [pc, #168]	; (80030a4 <getTemp+0x11c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	5e9b      	ldrsh	r3, [r3, r2]
 8002ffe:	001a      	movs	r2, r3
 8003000:	4b25      	ldr	r3, [pc, #148]	; (8003098 <getTemp+0x110>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	18d3      	adds	r3, r2, r3
 8003006:	0018      	movs	r0, r3
 8003008:	f7ff fd82 	bl	8002b10 <__aeabi_i2d>
 800300c:	0002      	movs	r2, r0
 800300e:	000b      	movs	r3, r1
 8003010:	0020      	movs	r0, r4
 8003012:	0029      	movs	r1, r5
 8003014:	f7fe fb28 	bl	8001668 <__aeabi_ddiv>
 8003018:	0002      	movs	r2, r0
 800301a:	000b      	movs	r3, r1
 800301c:	0010      	movs	r0, r2
 800301e:	0019      	movs	r1, r3
 8003020:	f7ff fd40 	bl	8002aa4 <__aeabi_d2iz>
 8003024:	0002      	movs	r2, r0
 8003026:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <getTemp+0x120>)
 8003028:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <getTemp+0x110>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <getTemp+0x120>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	18d2      	adds	r2, r2, r3
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <getTemp+0x124>)
 8003036:	601a      	str	r2, [r3, #0]
	TE = (B5+8)/(pow(2,4));
 8003038:	4b1c      	ldr	r3, [pc, #112]	; (80030ac <getTemp+0x124>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3308      	adds	r3, #8
 800303e:	0018      	movs	r0, r3
 8003040:	f7ff fd66 	bl	8002b10 <__aeabi_i2d>
 8003044:	2200      	movs	r2, #0
 8003046:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <getTemp+0x128>)
 8003048:	f7fe fb0e 	bl	8001668 <__aeabi_ddiv>
 800304c:	0002      	movs	r2, r0
 800304e:	000b      	movs	r3, r1
 8003050:	0010      	movs	r0, r2
 8003052:	0019      	movs	r1, r3
 8003054:	f7ff fd26 	bl	8002aa4 <__aeabi_d2iz>
 8003058:	0002      	movs	r2, r0
 800305a:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <getTemp+0x12c>)
 800305c:	601a      	str	r2, [r3, #0]
	return TE/10.0;
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <getTemp+0x12c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	0018      	movs	r0, r3
 8003064:	f7ff fd54 	bl	8002b10 <__aeabi_i2d>
 8003068:	2200      	movs	r2, #0
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <getTemp+0x130>)
 800306c:	f7fe fafc 	bl	8001668 <__aeabi_ddiv>
 8003070:	0002      	movs	r2, r0
 8003072:	000b      	movs	r3, r1
 8003074:	0010      	movs	r0, r2
 8003076:	0019      	movs	r1, r3
 8003078:	f7fd fa64 	bl	8000544 <__aeabi_d2uiz>
 800307c:	0003      	movs	r3, r0
 800307e:	b29b      	uxth	r3, r3
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	bdb0      	pop	{r4, r5, r7, pc}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	20000210 	.word	0x20000210
 800308c:	20000202 	.word	0x20000202
 8003090:	20000200 	.word	0x20000200
 8003094:	40e00000 	.word	0x40e00000
 8003098:	2000021c 	.word	0x2000021c
 800309c:	2000020a 	.word	0x2000020a
 80030a0:	40a00000 	.word	0x40a00000
 80030a4:	2000020c 	.word	0x2000020c
 80030a8:	20000220 	.word	0x20000220
 80030ac:	2000022c 	.word	0x2000022c
 80030b0:	40300000 	.word	0x40300000
 80030b4:	20000240 	.word	0x20000240
 80030b8:	40240000 	.word	0x40240000

080030bc <upress>:

uint32_t upress(int s) {
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af04      	add	r7, sp, #16
 80030c2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x34 + (s << 6);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	019b      	lsls	r3, r3, #6
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	3334      	adds	r3, #52	; 0x34
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	240f      	movs	r4, #15
 80030d2:	193b      	adds	r3, r7, r4
 80030d4:	701a      	strb	r2, [r3, #0]
	uint8_t rawpress[3] = {0};
 80030d6:	230c      	movs	r3, #12
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	4a2c      	ldr	r2, [pc, #176]	; (800318c <upress+0xd0>)
 80030dc:	8812      	ldrh	r2, [r2, #0]
 80030de:	801a      	strh	r2, [r3, #0]
 80030e0:	2202      	movs	r2, #2
 80030e2:	2100      	movs	r1, #0
 80030e4:	5499      	strb	r1, [r3, r2]
	HAL_I2C_Mem_Write(&hi2c1, 0xEE, 0xF4, 1, &data, 1, 1000);
 80030e6:	482a      	ldr	r0, [pc, #168]	; (8003190 <upress+0xd4>)
 80030e8:	23fa      	movs	r3, #250	; 0xfa
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	9302      	str	r3, [sp, #8]
 80030ee:	2301      	movs	r3, #1
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	193b      	adds	r3, r7, r4
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	2301      	movs	r3, #1
 80030f8:	22f4      	movs	r2, #244	; 0xf4
 80030fa:	21ee      	movs	r1, #238	; 0xee
 80030fc:	f002 fa00 	bl	8005500 <HAL_I2C_Mem_Write>
	switch(s) {
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d01b      	beq.n	800313e <upress+0x82>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b03      	cmp	r3, #3
 800310a:	dc1c      	bgt.n	8003146 <upress+0x8a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d011      	beq.n	8003136 <upress+0x7a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b02      	cmp	r3, #2
 8003116:	dc16      	bgt.n	8003146 <upress+0x8a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <upress+0x6a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d004      	beq.n	800312e <upress+0x72>
 8003124:	e00f      	b.n	8003146 <upress+0x8a>
	case(0):
			HAL_Delay(5);
 8003126:	2005      	movs	r0, #5
 8003128:	f001 fb2a 	bl	8004780 <HAL_Delay>
	break;
 800312c:	e00b      	b.n	8003146 <upress+0x8a>
	case(1):
			HAL_Delay(8);
 800312e:	2008      	movs	r0, #8
 8003130:	f001 fb26 	bl	8004780 <HAL_Delay>
	break;
 8003134:	e007      	b.n	8003146 <upress+0x8a>
	case(2):
			HAL_Delay(14);
 8003136:	200e      	movs	r0, #14
 8003138:	f001 fb22 	bl	8004780 <HAL_Delay>
	break;
 800313c:	e003      	b.n	8003146 <upress+0x8a>
	case(3):
			HAL_Delay(26);
 800313e:	201a      	movs	r0, #26
 8003140:	f001 fb1e 	bl	8004780 <HAL_Delay>
	break;
 8003144:	46c0      	nop			; (mov r8, r8)
	}
	HAL_I2C_Mem_Read(&hi2c1, 0xEE, 0xF6, 1, rawpress, 3, 1000);
 8003146:	4812      	ldr	r0, [pc, #72]	; (8003190 <upress+0xd4>)
 8003148:	23fa      	movs	r3, #250	; 0xfa
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	9302      	str	r3, [sp, #8]
 800314e:	2303      	movs	r3, #3
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	240c      	movs	r4, #12
 8003154:	193b      	adds	r3, r7, r4
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2301      	movs	r3, #1
 800315a:	22f6      	movs	r2, #246	; 0xf6
 800315c:	21ee      	movs	r1, #238	; 0xee
 800315e:	f002 fafd 	bl	800575c <HAL_I2C_Mem_Read>
	return (((rawpress[0] << 16) + (rawpress[1] << 8) + rawpress[2]) >> (8-s));
 8003162:	0021      	movs	r1, r4
 8003164:	187b      	adds	r3, r7, r1
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	041a      	lsls	r2, r3, #16
 800316a:	187b      	adds	r3, r7, r1
 800316c:	785b      	ldrb	r3, [r3, #1]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	18d3      	adds	r3, r2, r3
 8003172:	187a      	adds	r2, r7, r1
 8003174:	7892      	ldrb	r2, [r2, #2]
 8003176:	189a      	adds	r2, r3, r2
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2108      	movs	r1, #8
 800317c:	1acb      	subs	r3, r1, r3
 800317e:	411a      	asrs	r2, r3
 8003180:	0013      	movs	r3, r2
}
 8003182:	0018      	movs	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	b005      	add	sp, #20
 8003188:	bd90      	pop	{r4, r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	0800bbc0 	.word	0x0800bbc0
 8003190:	200002a0 	.word	0x200002a0

08003194 <getPressure>:

float getPressure(int s) {
 8003194:	b5b0      	push	{r4, r5, r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	UP = upress(s);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	0018      	movs	r0, r3
 80031a0:	f7ff ff8c 	bl	80030bc <upress>
 80031a4:	0003      	movs	r3, r0
 80031a6:	001a      	movs	r2, r3
 80031a8:	4bea      	ldr	r3, [pc, #936]	; (8003554 <getPressure+0x3c0>)
 80031aa:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80031ac:	4bea      	ldr	r3, [pc, #936]	; (8003558 <getPressure+0x3c4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4aea      	ldr	r2, [pc, #936]	; (800355c <getPressure+0x3c8>)
 80031b2:	8812      	ldrh	r2, [r2, #0]
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	0018      	movs	r0, r3
 80031b8:	f7ff fcaa 	bl	8002b10 <__aeabi_i2d>
 80031bc:	0004      	movs	r4, r0
 80031be:	000d      	movs	r5, r1
 80031c0:	4be7      	ldr	r3, [pc, #924]	; (8003560 <getPressure+0x3cc>)
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7ff fca3 	bl	8002b10 <__aeabi_i2d>
 80031ca:	2200      	movs	r2, #0
 80031cc:	4be5      	ldr	r3, [pc, #916]	; (8003564 <getPressure+0x3d0>)
 80031ce:	f7fe fa4b 	bl	8001668 <__aeabi_ddiv>
 80031d2:	0002      	movs	r2, r0
 80031d4:	000b      	movs	r3, r1
 80031d6:	0020      	movs	r0, r4
 80031d8:	0029      	movs	r1, r5
 80031da:	f7fe fe47 	bl	8001e6c <__aeabi_dmul>
 80031de:	0002      	movs	r2, r0
 80031e0:	000b      	movs	r3, r1
 80031e2:	0010      	movs	r0, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	f7ff fc5d 	bl	8002aa4 <__aeabi_d2iz>
 80031ea:	0002      	movs	r2, r0
 80031ec:	4bde      	ldr	r3, [pc, #888]	; (8003568 <getPressure+0x3d4>)
 80031ee:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80031f0:	4bde      	ldr	r3, [pc, #888]	; (800356c <getPressure+0x3d8>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	5e9b      	ldrsh	r3, [r3, r2]
 80031f6:	0018      	movs	r0, r3
 80031f8:	f7ff fc8a 	bl	8002b10 <__aeabi_i2d>
 80031fc:	2200      	movs	r2, #0
 80031fe:	4bdc      	ldr	r3, [pc, #880]	; (8003570 <getPressure+0x3dc>)
 8003200:	f7fe fe34 	bl	8001e6c <__aeabi_dmul>
 8003204:	0002      	movs	r2, r0
 8003206:	000b      	movs	r3, r1
 8003208:	0014      	movs	r4, r2
 800320a:	001d      	movs	r5, r3
 800320c:	4bd9      	ldr	r3, [pc, #868]	; (8003574 <getPressure+0x3e0>)
 800320e:	2200      	movs	r2, #0
 8003210:	5e9b      	ldrsh	r3, [r3, r2]
 8003212:	001a      	movs	r2, r3
 8003214:	4bd4      	ldr	r3, [pc, #848]	; (8003568 <getPressure+0x3d4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	18d3      	adds	r3, r2, r3
 800321a:	0018      	movs	r0, r3
 800321c:	f7ff fc78 	bl	8002b10 <__aeabi_i2d>
 8003220:	0002      	movs	r2, r0
 8003222:	000b      	movs	r3, r1
 8003224:	0020      	movs	r0, r4
 8003226:	0029      	movs	r1, r5
 8003228:	f7fe fa1e 	bl	8001668 <__aeabi_ddiv>
 800322c:	0002      	movs	r2, r0
 800322e:	000b      	movs	r3, r1
 8003230:	0010      	movs	r0, r2
 8003232:	0019      	movs	r1, r3
 8003234:	f7ff fc36 	bl	8002aa4 <__aeabi_d2iz>
 8003238:	0002      	movs	r2, r0
 800323a:	4bcf      	ldr	r3, [pc, #828]	; (8003578 <getPressure+0x3e4>)
 800323c:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 800323e:	4bca      	ldr	r3, [pc, #808]	; (8003568 <getPressure+0x3d4>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4bcd      	ldr	r3, [pc, #820]	; (8003578 <getPressure+0x3e4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	18d2      	adds	r2, r2, r3
 8003248:	4bcc      	ldr	r3, [pc, #816]	; (800357c <getPressure+0x3e8>)
 800324a:	601a      	str	r2, [r3, #0]
	B6 = B5-4000;
 800324c:	4bcb      	ldr	r3, [pc, #812]	; (800357c <getPressure+0x3e8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4acb      	ldr	r2, [pc, #812]	; (8003580 <getPressure+0x3ec>)
 8003252:	189a      	adds	r2, r3, r2
 8003254:	4bcb      	ldr	r3, [pc, #812]	; (8003584 <getPressure+0x3f0>)
 8003256:	601a      	str	r2, [r3, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8003258:	4bcb      	ldr	r3, [pc, #812]	; (8003588 <getPressure+0x3f4>)
 800325a:	2200      	movs	r2, #0
 800325c:	5e9b      	ldrsh	r3, [r3, r2]
 800325e:	0018      	movs	r0, r3
 8003260:	f7ff fc56 	bl	8002b10 <__aeabi_i2d>
 8003264:	0004      	movs	r4, r0
 8003266:	000d      	movs	r5, r1
 8003268:	4bc6      	ldr	r3, [pc, #792]	; (8003584 <getPressure+0x3f0>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4bc5      	ldr	r3, [pc, #788]	; (8003584 <getPressure+0x3f0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4353      	muls	r3, r2
 8003272:	0018      	movs	r0, r3
 8003274:	f7ff fc4c 	bl	8002b10 <__aeabi_i2d>
 8003278:	2200      	movs	r2, #0
 800327a:	4bc4      	ldr	r3, [pc, #784]	; (800358c <getPressure+0x3f8>)
 800327c:	f7fe f9f4 	bl	8001668 <__aeabi_ddiv>
 8003280:	0002      	movs	r2, r0
 8003282:	000b      	movs	r3, r1
 8003284:	0020      	movs	r0, r4
 8003286:	0029      	movs	r1, r5
 8003288:	f7fe fdf0 	bl	8001e6c <__aeabi_dmul>
 800328c:	0002      	movs	r2, r0
 800328e:	000b      	movs	r3, r1
 8003290:	0010      	movs	r0, r2
 8003292:	0019      	movs	r1, r3
 8003294:	2200      	movs	r2, #0
 8003296:	4bb6      	ldr	r3, [pc, #728]	; (8003570 <getPressure+0x3dc>)
 8003298:	f7fe f9e6 	bl	8001668 <__aeabi_ddiv>
 800329c:	0002      	movs	r2, r0
 800329e:	000b      	movs	r3, r1
 80032a0:	0010      	movs	r0, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	f7ff fbfe 	bl	8002aa4 <__aeabi_d2iz>
 80032a8:	0002      	movs	r2, r0
 80032aa:	4baf      	ldr	r3, [pc, #700]	; (8003568 <getPressure+0x3d4>)
 80032ac:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(pow(2,11));
 80032ae:	4bb8      	ldr	r3, [pc, #736]	; (8003590 <getPressure+0x3fc>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	5e9b      	ldrsh	r3, [r3, r2]
 80032b4:	001a      	movs	r2, r3
 80032b6:	4bb3      	ldr	r3, [pc, #716]	; (8003584 <getPressure+0x3f0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4353      	muls	r3, r2
 80032bc:	0018      	movs	r0, r3
 80032be:	f7ff fc27 	bl	8002b10 <__aeabi_i2d>
 80032c2:	2200      	movs	r2, #0
 80032c4:	4baa      	ldr	r3, [pc, #680]	; (8003570 <getPressure+0x3dc>)
 80032c6:	f7fe f9cf 	bl	8001668 <__aeabi_ddiv>
 80032ca:	0002      	movs	r2, r0
 80032cc:	000b      	movs	r3, r1
 80032ce:	0010      	movs	r0, r2
 80032d0:	0019      	movs	r1, r3
 80032d2:	f7ff fbe7 	bl	8002aa4 <__aeabi_d2iz>
 80032d6:	0002      	movs	r2, r0
 80032d8:	4ba7      	ldr	r3, [pc, #668]	; (8003578 <getPressure+0x3e4>)
 80032da:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 80032dc:	4ba2      	ldr	r3, [pc, #648]	; (8003568 <getPressure+0x3d4>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4ba5      	ldr	r3, [pc, #660]	; (8003578 <getPressure+0x3e4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	18d2      	adds	r2, r2, r3
 80032e6:	4bab      	ldr	r3, [pc, #684]	; (8003594 <getPressure+0x400>)
 80032e8:	601a      	str	r2, [r3, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80032ea:	4bab      	ldr	r3, [pc, #684]	; (8003598 <getPressure+0x404>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	5e9b      	ldrsh	r3, [r3, r2]
 80032f0:	009a      	lsls	r2, r3, #2
 80032f2:	4ba8      	ldr	r3, [pc, #672]	; (8003594 <getPressure+0x400>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	18d3      	adds	r3, r2, r3
 80032f8:	4aa8      	ldr	r2, [pc, #672]	; (800359c <getPressure+0x408>)
 80032fa:	2100      	movs	r1, #0
 80032fc:	5e52      	ldrsh	r2, [r2, r1]
 80032fe:	4093      	lsls	r3, r2
 8003300:	3302      	adds	r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	da00      	bge.n	8003308 <getPressure+0x174>
 8003306:	3303      	adds	r3, #3
 8003308:	109b      	asrs	r3, r3, #2
 800330a:	001a      	movs	r2, r3
 800330c:	4ba4      	ldr	r3, [pc, #656]	; (80035a0 <getPressure+0x40c>)
 800330e:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8003310:	4ba4      	ldr	r3, [pc, #656]	; (80035a4 <getPressure+0x410>)
 8003312:	2200      	movs	r2, #0
 8003314:	5e9b      	ldrsh	r3, [r3, r2]
 8003316:	001a      	movs	r2, r3
 8003318:	4b9a      	ldr	r3, [pc, #616]	; (8003584 <getPressure+0x3f0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4353      	muls	r3, r2
 800331e:	0018      	movs	r0, r3
 8003320:	f7ff fbf6 	bl	8002b10 <__aeabi_i2d>
 8003324:	2200      	movs	r2, #0
 8003326:	4ba0      	ldr	r3, [pc, #640]	; (80035a8 <getPressure+0x414>)
 8003328:	f7fe f99e 	bl	8001668 <__aeabi_ddiv>
 800332c:	0002      	movs	r2, r0
 800332e:	000b      	movs	r3, r1
 8003330:	0010      	movs	r0, r2
 8003332:	0019      	movs	r1, r3
 8003334:	f7ff fbb6 	bl	8002aa4 <__aeabi_d2iz>
 8003338:	0002      	movs	r2, r0
 800333a:	4b8b      	ldr	r3, [pc, #556]	; (8003568 <getPressure+0x3d4>)
 800333c:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 800333e:	4b9b      	ldr	r3, [pc, #620]	; (80035ac <getPressure+0x418>)
 8003340:	2200      	movs	r2, #0
 8003342:	5e9b      	ldrsh	r3, [r3, r2]
 8003344:	0018      	movs	r0, r3
 8003346:	f7ff fbe3 	bl	8002b10 <__aeabi_i2d>
 800334a:	0004      	movs	r4, r0
 800334c:	000d      	movs	r5, r1
 800334e:	4b8d      	ldr	r3, [pc, #564]	; (8003584 <getPressure+0x3f0>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4b8c      	ldr	r3, [pc, #560]	; (8003584 <getPressure+0x3f0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4353      	muls	r3, r2
 8003358:	0018      	movs	r0, r3
 800335a:	f7ff fbd9 	bl	8002b10 <__aeabi_i2d>
 800335e:	2200      	movs	r2, #0
 8003360:	4b8a      	ldr	r3, [pc, #552]	; (800358c <getPressure+0x3f8>)
 8003362:	f7fe f981 	bl	8001668 <__aeabi_ddiv>
 8003366:	0002      	movs	r2, r0
 8003368:	000b      	movs	r3, r1
 800336a:	0020      	movs	r0, r4
 800336c:	0029      	movs	r1, r5
 800336e:	f7fe fd7d 	bl	8001e6c <__aeabi_dmul>
 8003372:	0002      	movs	r2, r0
 8003374:	000b      	movs	r3, r1
 8003376:	0010      	movs	r0, r2
 8003378:	0019      	movs	r1, r3
 800337a:	2200      	movs	r2, #0
 800337c:	4b8c      	ldr	r3, [pc, #560]	; (80035b0 <getPressure+0x41c>)
 800337e:	f7fe f973 	bl	8001668 <__aeabi_ddiv>
 8003382:	0002      	movs	r2, r0
 8003384:	000b      	movs	r3, r1
 8003386:	0010      	movs	r0, r2
 8003388:	0019      	movs	r1, r3
 800338a:	f7ff fb8b 	bl	8002aa4 <__aeabi_d2iz>
 800338e:	0002      	movs	r2, r0
 8003390:	4b79      	ldr	r3, [pc, #484]	; (8003578 <getPressure+0x3e4>)
 8003392:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8003394:	4b74      	ldr	r3, [pc, #464]	; (8003568 <getPressure+0x3d4>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b77      	ldr	r3, [pc, #476]	; (8003578 <getPressure+0x3e4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	18d3      	adds	r3, r2, r3
 800339e:	3302      	adds	r3, #2
 80033a0:	0018      	movs	r0, r3
 80033a2:	f7ff fbb5 	bl	8002b10 <__aeabi_i2d>
 80033a6:	2200      	movs	r2, #0
 80033a8:	4b82      	ldr	r3, [pc, #520]	; (80035b4 <getPressure+0x420>)
 80033aa:	f7fe f95d 	bl	8001668 <__aeabi_ddiv>
 80033ae:	0002      	movs	r2, r0
 80033b0:	000b      	movs	r3, r1
 80033b2:	0010      	movs	r0, r2
 80033b4:	0019      	movs	r1, r3
 80033b6:	f7ff fb75 	bl	8002aa4 <__aeabi_d2iz>
 80033ba:	0002      	movs	r2, r0
 80033bc:	4b75      	ldr	r3, [pc, #468]	; (8003594 <getPressure+0x400>)
 80033be:	601a      	str	r2, [r3, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80033c0:	4b7d      	ldr	r3, [pc, #500]	; (80035b8 <getPressure+0x424>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	001a      	movs	r2, r3
 80033c6:	4b73      	ldr	r3, [pc, #460]	; (8003594 <getPressure+0x400>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	0209      	lsls	r1, r1, #8
 80033ce:	468c      	mov	ip, r1
 80033d0:	4463      	add	r3, ip
 80033d2:	4353      	muls	r3, r2
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7ff fbcb 	bl	8002b70 <__aeabi_ui2d>
 80033da:	2200      	movs	r2, #0
 80033dc:	4b61      	ldr	r3, [pc, #388]	; (8003564 <getPressure+0x3d0>)
 80033de:	f7fe f943 	bl	8001668 <__aeabi_ddiv>
 80033e2:	0002      	movs	r2, r0
 80033e4:	000b      	movs	r3, r1
 80033e6:	0010      	movs	r0, r2
 80033e8:	0019      	movs	r1, r3
 80033ea:	f7fd f8ab 	bl	8000544 <__aeabi_d2uiz>
 80033ee:	0002      	movs	r2, r0
 80033f0:	4b72      	ldr	r3, [pc, #456]	; (80035bc <getPressure+0x428>)
 80033f2:	601a      	str	r2, [r3, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>s);
 80033f4:	4b57      	ldr	r3, [pc, #348]	; (8003554 <getPressure+0x3c0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	001a      	movs	r2, r3
 80033fa:	4b69      	ldr	r3, [pc, #420]	; (80035a0 <getPressure+0x40c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	496f      	ldr	r1, [pc, #444]	; (80035c0 <getPressure+0x42c>)
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4111      	asrs	r1, r2
 8003406:	000a      	movs	r2, r1
 8003408:	435a      	muls	r2, r3
 800340a:	4b6e      	ldr	r3, [pc, #440]	; (80035c4 <getPressure+0x430>)
 800340c:	601a      	str	r2, [r3, #0]
	if(B7 < 0x80000000) {
 800340e:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <getPressure+0x430>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	db0d      	blt.n	8003432 <getPressure+0x29e>
		Pressure = (B7*2) / B4;
 8003416:	4b6b      	ldr	r3, [pc, #428]	; (80035c4 <getPressure+0x430>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	005a      	lsls	r2, r3, #1
 800341c:	4b67      	ldr	r3, [pc, #412]	; (80035bc <getPressure+0x428>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	0019      	movs	r1, r3
 8003422:	0010      	movs	r0, r2
 8003424:	f7fc fe8c 	bl	8000140 <__udivsi3>
 8003428:	0003      	movs	r3, r0
 800342a:	001a      	movs	r2, r3
 800342c:	4b66      	ldr	r3, [pc, #408]	; (80035c8 <getPressure+0x434>)
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e00c      	b.n	800344c <getPressure+0x2b8>
	} else {
		Pressure = (B7/B4)*2;
 8003432:	4b64      	ldr	r3, [pc, #400]	; (80035c4 <getPressure+0x430>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4b61      	ldr	r3, [pc, #388]	; (80035bc <getPressure+0x428>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	0019      	movs	r1, r3
 800343c:	0010      	movs	r0, r2
 800343e:	f7fc fe7f 	bl	8000140 <__udivsi3>
 8003442:	0003      	movs	r3, r0
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	001a      	movs	r2, r3
 8003448:	4b5f      	ldr	r3, [pc, #380]	; (80035c8 <getPressure+0x434>)
 800344a:	601a      	str	r2, [r3, #0]
	}
	X1 = (Pressure/(pow(2,8)))*(Pressure/(pow(2,8)));
 800344c:	4b5e      	ldr	r3, [pc, #376]	; (80035c8 <getPressure+0x434>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0018      	movs	r0, r3
 8003452:	f7ff fb5d 	bl	8002b10 <__aeabi_i2d>
 8003456:	2200      	movs	r2, #0
 8003458:	4b5c      	ldr	r3, [pc, #368]	; (80035cc <getPressure+0x438>)
 800345a:	f7fe f905 	bl	8001668 <__aeabi_ddiv>
 800345e:	0002      	movs	r2, r0
 8003460:	000b      	movs	r3, r1
 8003462:	0014      	movs	r4, r2
 8003464:	001d      	movs	r5, r3
 8003466:	4b58      	ldr	r3, [pc, #352]	; (80035c8 <getPressure+0x434>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	0018      	movs	r0, r3
 800346c:	f7ff fb50 	bl	8002b10 <__aeabi_i2d>
 8003470:	2200      	movs	r2, #0
 8003472:	4b56      	ldr	r3, [pc, #344]	; (80035cc <getPressure+0x438>)
 8003474:	f7fe f8f8 	bl	8001668 <__aeabi_ddiv>
 8003478:	0002      	movs	r2, r0
 800347a:	000b      	movs	r3, r1
 800347c:	0020      	movs	r0, r4
 800347e:	0029      	movs	r1, r5
 8003480:	f7fe fcf4 	bl	8001e6c <__aeabi_dmul>
 8003484:	0002      	movs	r2, r0
 8003486:	000b      	movs	r3, r1
 8003488:	0010      	movs	r0, r2
 800348a:	0019      	movs	r1, r3
 800348c:	f7ff fb0a 	bl	8002aa4 <__aeabi_d2iz>
 8003490:	0002      	movs	r2, r0
 8003492:	4b35      	ldr	r3, [pc, #212]	; (8003568 <getPressure+0x3d4>)
 8003494:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(pow(2,16));
 8003496:	4b34      	ldr	r3, [pc, #208]	; (8003568 <getPressure+0x3d4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a4d      	ldr	r2, [pc, #308]	; (80035d0 <getPressure+0x43c>)
 800349c:	4353      	muls	r3, r2
 800349e:	0018      	movs	r0, r3
 80034a0:	f7ff fb36 	bl	8002b10 <__aeabi_i2d>
 80034a4:	2200      	movs	r2, #0
 80034a6:	4b42      	ldr	r3, [pc, #264]	; (80035b0 <getPressure+0x41c>)
 80034a8:	f7fe f8de 	bl	8001668 <__aeabi_ddiv>
 80034ac:	0002      	movs	r2, r0
 80034ae:	000b      	movs	r3, r1
 80034b0:	0010      	movs	r0, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	f7ff faf6 	bl	8002aa4 <__aeabi_d2iz>
 80034b8:	0002      	movs	r2, r0
 80034ba:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <getPressure+0x3d4>)
 80034bc:	601a      	str	r2, [r3, #0]
	X2 = (-7357*Pressure)/(pow(2,16));
 80034be:	4b42      	ldr	r3, [pc, #264]	; (80035c8 <getPressure+0x434>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	0013      	movs	r3, r2
 80034c4:	015b      	lsls	r3, r3, #5
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	00da      	lsls	r2, r3, #3
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	425b      	negs	r3, r3
 80034d6:	0018      	movs	r0, r3
 80034d8:	f7ff fb1a 	bl	8002b10 <__aeabi_i2d>
 80034dc:	2200      	movs	r2, #0
 80034de:	4b34      	ldr	r3, [pc, #208]	; (80035b0 <getPressure+0x41c>)
 80034e0:	f7fe f8c2 	bl	8001668 <__aeabi_ddiv>
 80034e4:	0002      	movs	r2, r0
 80034e6:	000b      	movs	r3, r1
 80034e8:	0010      	movs	r0, r2
 80034ea:	0019      	movs	r1, r3
 80034ec:	f7ff fada 	bl	8002aa4 <__aeabi_d2iz>
 80034f0:	0002      	movs	r2, r0
 80034f2:	4b21      	ldr	r3, [pc, #132]	; (8003578 <getPressure+0x3e4>)
 80034f4:	601a      	str	r2, [r3, #0]
	Pressure = Pressure + (X1+X2+3791)/(pow(2,4));
 80034f6:	4b34      	ldr	r3, [pc, #208]	; (80035c8 <getPressure+0x434>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7ff fb08 	bl	8002b10 <__aeabi_i2d>
 8003500:	0004      	movs	r4, r0
 8003502:	000d      	movs	r5, r1
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <getPressure+0x3d4>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4b1b      	ldr	r3, [pc, #108]	; (8003578 <getPressure+0x3e4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	18d3      	adds	r3, r2, r3
 800350e:	4a31      	ldr	r2, [pc, #196]	; (80035d4 <getPressure+0x440>)
 8003510:	4694      	mov	ip, r2
 8003512:	4463      	add	r3, ip
 8003514:	0018      	movs	r0, r3
 8003516:	f7ff fafb 	bl	8002b10 <__aeabi_i2d>
 800351a:	2200      	movs	r2, #0
 800351c:	4b2e      	ldr	r3, [pc, #184]	; (80035d8 <getPressure+0x444>)
 800351e:	f7fe f8a3 	bl	8001668 <__aeabi_ddiv>
 8003522:	0002      	movs	r2, r0
 8003524:	000b      	movs	r3, r1
 8003526:	0020      	movs	r0, r4
 8003528:	0029      	movs	r1, r5
 800352a:	f7fd fd61 	bl	8000ff0 <__aeabi_dadd>
 800352e:	0002      	movs	r2, r0
 8003530:	000b      	movs	r3, r1
 8003532:	0010      	movs	r0, r2
 8003534:	0019      	movs	r1, r3
 8003536:	f7ff fab5 	bl	8002aa4 <__aeabi_d2iz>
 800353a:	0002      	movs	r2, r0
 800353c:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <getPressure+0x434>)
 800353e:	601a      	str	r2, [r3, #0]
	return Pressure;
 8003540:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <getPressure+0x434>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0018      	movs	r0, r3
 8003546:	f7fd fcc3 	bl	8000ed0 <__aeabi_i2f>
 800354a:	1c03      	adds	r3, r0, #0
}
 800354c:	1c18      	adds	r0, r3, #0
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bdb0      	pop	{r4, r5, r7, pc}
 8003554:	20000218 	.word	0x20000218
 8003558:	20000210 	.word	0x20000210
 800355c:	20000202 	.word	0x20000202
 8003560:	20000200 	.word	0x20000200
 8003564:	40e00000 	.word	0x40e00000
 8003568:	2000021c 	.word	0x2000021c
 800356c:	2000020a 	.word	0x2000020a
 8003570:	40a00000 	.word	0x40a00000
 8003574:	2000020c 	.word	0x2000020c
 8003578:	20000220 	.word	0x20000220
 800357c:	2000022c 	.word	0x2000022c
 8003580:	fffff060 	.word	0xfffff060
 8003584:	20000234 	.word	0x20000234
 8003588:	20000206 	.word	0x20000206
 800358c:	40b00000 	.word	0x40b00000
 8003590:	200001fa 	.word	0x200001fa
 8003594:	20000224 	.word	0x20000224
 8003598:	200001f8 	.word	0x200001f8
 800359c:	20000214 	.word	0x20000214
 80035a0:	20000228 	.word	0x20000228
 80035a4:	200001fc 	.word	0x200001fc
 80035a8:	40c00000 	.word	0x40c00000
 80035ac:	20000204 	.word	0x20000204
 80035b0:	40f00000 	.word	0x40f00000
 80035b4:	40100000 	.word	0x40100000
 80035b8:	200001fe 	.word	0x200001fe
 80035bc:	20000230 	.word	0x20000230
 80035c0:	0000c350 	.word	0x0000c350
 80035c4:	20000238 	.word	0x20000238
 80035c8:	2000023c 	.word	0x2000023c
 80035cc:	40700000 	.word	0x40700000
 80035d0:	00000bde 	.word	0x00000bde
 80035d4:	00000ecf 	.word	0x00000ecf
 80035d8:	40300000 	.word	0x40300000

080035dc <getAlt>:

float getAlt(int s) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	getPressure(s);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7ff fdd4 	bl	8003194 <getPressure>
	return 44330*(1-(pow((Pressure/(float)101325), 0.19029495718)));
 80035ec:	4b15      	ldr	r3, [pc, #84]	; (8003644 <getAlt+0x68>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7fd fc6d 	bl	8000ed0 <__aeabi_i2f>
 80035f6:	1c03      	adds	r3, r0, #0
 80035f8:	4913      	ldr	r1, [pc, #76]	; (8003648 <getAlt+0x6c>)
 80035fa:	1c18      	adds	r0, r3, #0
 80035fc:	f7fd fa2a 	bl	8000a54 <__aeabi_fdiv>
 8003600:	1c03      	adds	r3, r0, #0
 8003602:	1c18      	adds	r0, r3, #0
 8003604:	f7ff fada 	bl	8002bbc <__aeabi_f2d>
 8003608:	4a10      	ldr	r2, [pc, #64]	; (800364c <getAlt+0x70>)
 800360a:	4b11      	ldr	r3, [pc, #68]	; (8003650 <getAlt+0x74>)
 800360c:	f007 fbee 	bl	800adec <pow>
 8003610:	0002      	movs	r2, r0
 8003612:	000b      	movs	r3, r1
 8003614:	2000      	movs	r0, #0
 8003616:	490f      	ldr	r1, [pc, #60]	; (8003654 <getAlt+0x78>)
 8003618:	f7fe fe94 	bl	8002344 <__aeabi_dsub>
 800361c:	0002      	movs	r2, r0
 800361e:	000b      	movs	r3, r1
 8003620:	0010      	movs	r0, r2
 8003622:	0019      	movs	r1, r3
 8003624:	2200      	movs	r2, #0
 8003626:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <getAlt+0x7c>)
 8003628:	f7fe fc20 	bl	8001e6c <__aeabi_dmul>
 800362c:	0002      	movs	r2, r0
 800362e:	000b      	movs	r3, r1
 8003630:	0010      	movs	r0, r2
 8003632:	0019      	movs	r1, r3
 8003634:	f7ff fb0a 	bl	8002c4c <__aeabi_d2f>
 8003638:	1c03      	adds	r3, r0, #0
}
 800363a:	1c18      	adds	r0, r3, #0
 800363c:	46bd      	mov	sp, r7
 800363e:	b002      	add	sp, #8
 8003640:	bd80      	pop	{r7, pc}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	2000023c 	.word	0x2000023c
 8003648:	47c5e680 	.word	0x47c5e680
 800364c:	ccd745e4 	.word	0xccd745e4
 8003650:	3fc85b95 	.word	0x3fc85b95
 8003654:	3ff00000 	.word	0x3ff00000
 8003658:	40e5a540 	.word	0x40e5a540

0800365c <setOut>:
 *      Author: Michael
 */

#include "delay.h"

void setOut(GPIO_TypeDef* GPIOx) { //set gpio output mode
 800365c:	b590      	push	{r4, r7, lr}
 800365e:	b089      	sub	sp, #36	; 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003664:	240c      	movs	r4, #12
 8003666:	193b      	adds	r3, r7, r4
 8003668:	0018      	movs	r0, r3
 800366a:	2314      	movs	r3, #20
 800366c:	001a      	movs	r2, r3
 800366e:	2100      	movs	r1, #0
 8003670:	f004 fc1a 	bl	8007ea8 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003674:	193b      	adds	r3, r7, r4
 8003676:	2202      	movs	r2, #2
 8003678:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367a:	193b      	adds	r3, r7, r4
 800367c:	2201      	movs	r2, #1
 800367e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003680:	193b      	adds	r3, r7, r4
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003686:	193a      	adds	r2, r7, r4
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	0011      	movs	r1, r2
 800368c:	0018      	movs	r0, r3
 800368e:	f001 fccd 	bl	800502c <HAL_GPIO_Init>
}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	46bd      	mov	sp, r7
 8003696:	b009      	add	sp, #36	; 0x24
 8003698:	bd90      	pop	{r4, r7, pc}

0800369a <setIn>:

void setIn(GPIO_TypeDef* GPIOx) { //set gpio input mode
 800369a:	b590      	push	{r4, r7, lr}
 800369c:	b089      	sub	sp, #36	; 0x24
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a2:	240c      	movs	r4, #12
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	0018      	movs	r0, r3
 80036a8:	2314      	movs	r3, #20
 80036aa:	001a      	movs	r2, r3
 80036ac:	2100      	movs	r1, #0
 80036ae:	f004 fbfb 	bl	8007ea8 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036b2:	193b      	adds	r3, r7, r4
 80036b4:	2202      	movs	r2, #2
 80036b6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036b8:	193b      	adds	r3, r7, r4
 80036ba:	2200      	movs	r2, #0
 80036bc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036be:	193b      	adds	r3, r7, r4
 80036c0:	2201      	movs	r2, #1
 80036c2:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80036c4:	193a      	adds	r2, r7, r4
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0011      	movs	r1, r2
 80036ca:	0018      	movs	r0, r3
 80036cc:	f001 fcae 	bl	800502c <HAL_GPIO_Init>
}
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b009      	add	sp, #36	; 0x24
 80036d6:	bd90      	pop	{r4, r7, pc}

080036d8 <sensorInit>:

#define PC GPIOC

void sensorInit() {
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
	setOut(PC); //set output mode
 80036dc:	4b12      	ldr	r3, [pc, #72]	; (8003728 <sensorInit+0x50>)
 80036de:	0018      	movs	r0, r3
 80036e0:	f7ff ffbc 	bl	800365c <setOut>
	HAL_GPIO_WritePin(PC, GPIO_PIN_1, 1);
 80036e4:	4b10      	ldr	r3, [pc, #64]	; (8003728 <sensorInit+0x50>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	2102      	movs	r1, #2
 80036ea:	0018      	movs	r0, r3
 80036ec:	f001 fe39 	bl	8005362 <HAL_GPIO_WritePin>
	//HAL_Delay(200);
	HAL_Delay(200); //wait two seconds before doing anything. just keep the pin high
 80036f0:	20c8      	movs	r0, #200	; 0xc8
 80036f2:	f001 f845 	bl	8004780 <HAL_Delay>
	HAL_GPIO_WritePin(PC, GPIO_PIN_1, 0);
 80036f6:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <sensorInit+0x50>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	2102      	movs	r1, #2
 80036fc:	0018      	movs	r0, r3
 80036fe:	f001 fe30 	bl	8005362 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8003702:	2005      	movs	r0, #5
 8003704:	f001 f83c 	bl	8004780 <HAL_Delay>
	//delay(5000); //5ms. wait 5 miliseconds
	HAL_GPIO_WritePin(PC, GPIO_PIN_1, 1);
 8003708:	4b07      	ldr	r3, [pc, #28]	; (8003728 <sensorInit+0x50>)
 800370a:	2201      	movs	r2, #1
 800370c:	2102      	movs	r1, #2
 800370e:	0018      	movs	r0, r3
 8003710:	f001 fe27 	bl	8005362 <HAL_GPIO_WritePin>
	delay(20); //wait 20 microseconds
 8003714:	2014      	movs	r0, #20
 8003716:	f000 f88f 	bl	8003838 <delay>
	setIn(PC); //set input to read the sensor response in next function
 800371a:	4b03      	ldr	r3, [pc, #12]	; (8003728 <sensorInit+0x50>)
 800371c:	0018      	movs	r0, r3
 800371e:	f7ff ffbc 	bl	800369a <setIn>
}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	50000800 	.word	0x50000800

0800372c <sensorVerify>:

uint8_t sensorVerify() {
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
	//setIn(PA);
	uint8_t r = 0;
 8003732:	1dfb      	adds	r3, r7, #7
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
	delay(40);
 8003738:	2028      	movs	r0, #40	; 0x28
 800373a:	f000 f87d 	bl	8003838 <delay>
	if(HAL_GPIO_ReadPin(PC, GPIO_PIN_1) == GPIO_PIN_RESET) {  //if the pin is low
 800373e:	4b13      	ldr	r3, [pc, #76]	; (800378c <sensorVerify+0x60>)
 8003740:	2102      	movs	r1, #2
 8003742:	0018      	movs	r0, r3
 8003744:	f001 fdf0 	bl	8005328 <HAL_GPIO_ReadPin>
 8003748:	1e03      	subs	r3, r0, #0
 800374a:	d110      	bne.n	800376e <sensorVerify+0x42>
		delay(80);
 800374c:	2050      	movs	r0, #80	; 0x50
 800374e:	f000 f873 	bl	8003838 <delay>
		if((HAL_GPIO_ReadPin(PC, GPIO_PIN_1))) { //if the pin is high
 8003752:	4b0e      	ldr	r3, [pc, #56]	; (800378c <sensorVerify+0x60>)
 8003754:	2102      	movs	r1, #2
 8003756:	0018      	movs	r0, r3
 8003758:	f001 fde6 	bl	8005328 <HAL_GPIO_ReadPin>
 800375c:	1e03      	subs	r3, r0, #0
 800375e:	d003      	beq.n	8003768 <sensorVerify+0x3c>
			r = 1;
 8003760:	1dfb      	adds	r3, r7, #7
 8003762:	2201      	movs	r2, #1
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	e002      	b.n	800376e <sensorVerify+0x42>
		} else {
			r = -1;
 8003768:	1dfb      	adds	r3, r7, #7
 800376a:	22ff      	movs	r2, #255	; 0xff
 800376c:	701a      	strb	r2, [r3, #0]
		}
	}
	while((HAL_GPIO_ReadPin(PC, GPIO_PIN_1)));
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <sensorVerify+0x60>)
 8003772:	2102      	movs	r1, #2
 8003774:	0018      	movs	r0, r3
 8003776:	f001 fdd7 	bl	8005328 <HAL_GPIO_ReadPin>
 800377a:	1e03      	subs	r3, r0, #0
 800377c:	d1f8      	bne.n	8003770 <sensorVerify+0x44>
	//sensor does not send back response?
	//r = 0 indicates that the pin is always high and never pulls down.
	return r;
 800377e:	1dfb      	adds	r3, r7, #7
 8003780:	781b      	ldrb	r3, [r3, #0]
}
 8003782:	0018      	movs	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	b002      	add	sp, #8
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	50000800 	.word	0x50000800

08003790 <sensorRead>:

uint8_t sensorRead() {
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for(j = 0; j < 8; j++) {
 8003796:	1dbb      	adds	r3, r7, #6
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]
 800379c:	e03f      	b.n	800381e <sensorRead+0x8e>
		while(!(HAL_GPIO_ReadPin(PC, GPIO_PIN_1)));
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	4b24      	ldr	r3, [pc, #144]	; (8003834 <sensorRead+0xa4>)
 80037a2:	2102      	movs	r1, #2
 80037a4:	0018      	movs	r0, r3
 80037a6:	f001 fdbf 	bl	8005328 <HAL_GPIO_ReadPin>
 80037aa:	1e03      	subs	r3, r0, #0
 80037ac:	d0f8      	beq.n	80037a0 <sensorRead+0x10>
		delay(40);
 80037ae:	2028      	movs	r0, #40	; 0x28
 80037b0:	f000 f842 	bl	8003838 <delay>
		if(!(HAL_GPIO_ReadPin(PC, GPIO_PIN_1))) {
 80037b4:	4b1f      	ldr	r3, [pc, #124]	; (8003834 <sensorRead+0xa4>)
 80037b6:	2102      	movs	r1, #2
 80037b8:	0018      	movs	r0, r3
 80037ba:	f001 fdb5 	bl	8005328 <HAL_GPIO_ReadPin>
 80037be:	1e03      	subs	r3, r0, #0
 80037c0:	d111      	bne.n	80037e6 <sensorRead+0x56>
			i &= ~(1<<(7-j));
 80037c2:	1dbb      	adds	r3, r7, #6
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2207      	movs	r2, #7
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2201      	movs	r2, #1
 80037cc:	409a      	lsls	r2, r3
 80037ce:	0013      	movs	r3, r2
 80037d0:	b25b      	sxtb	r3, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	b25b      	sxtb	r3, r3
 80037d6:	1dfa      	adds	r2, r7, #7
 80037d8:	7812      	ldrb	r2, [r2, #0]
 80037da:	b252      	sxtb	r2, r2
 80037dc:	4013      	ands	r3, r2
 80037de:	b25a      	sxtb	r2, r3
 80037e0:	1dfb      	adds	r3, r7, #7
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e00e      	b.n	8003804 <sensorRead+0x74>
		} else {
			i |= (1<<(7-j));
 80037e6:	1dbb      	adds	r3, r7, #6
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2207      	movs	r2, #7
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2201      	movs	r2, #1
 80037f0:	409a      	lsls	r2, r3
 80037f2:	0013      	movs	r3, r2
 80037f4:	b25a      	sxtb	r2, r3
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	b25b      	sxtb	r3, r3
 80037fc:	4313      	orrs	r3, r2
 80037fe:	b25a      	sxtb	r2, r3
 8003800:	1dfb      	adds	r3, r7, #7
 8003802:	701a      	strb	r2, [r3, #0]
		}
		while((HAL_GPIO_ReadPin(PC, GPIO_PIN_1)));
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <sensorRead+0xa4>)
 8003808:	2102      	movs	r1, #2
 800380a:	0018      	movs	r0, r3
 800380c:	f001 fd8c 	bl	8005328 <HAL_GPIO_ReadPin>
 8003810:	1e03      	subs	r3, r0, #0
 8003812:	d1f8      	bne.n	8003806 <sensorRead+0x76>
	for(j = 0; j < 8; j++) {
 8003814:	1dbb      	adds	r3, r7, #6
 8003816:	781a      	ldrb	r2, [r3, #0]
 8003818:	1dbb      	adds	r3, r7, #6
 800381a:	3201      	adds	r2, #1
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	1dbb      	adds	r3, r7, #6
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b07      	cmp	r3, #7
 8003824:	d9bb      	bls.n	800379e <sensorRead+0xe>
	}
	return i;
 8003826:	1dfb      	adds	r3, r7, #7
 8003828:	781b      	ldrb	r3, [r3, #0]
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	50000800 	.word	0x50000800

08003838 <delay>:
 */

#include "stm32l0xx_hal.h"
extern TIM_HandleTypeDef htim2;

void delay(uint16_t time) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	0002      	movs	r2, r0
 8003840:	1dbb      	adds	r3, r7, #6
 8003842:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003844:	4b08      	ldr	r3, [pc, #32]	; (8003868 <delay+0x30>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2200      	movs	r2, #0
 800384a:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim2)) < time);
 800384c:	46c0      	nop			; (mov r8, r8)
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <delay+0x30>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003854:	1dbb      	adds	r3, r7, #6
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d3f8      	bcc.n	800384e <delay+0x16>
}
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	46bd      	mov	sp, r7
 8003862:	b002      	add	sp, #8
 8003864:	bd80      	pop	{r7, pc}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	200002ec 	.word	0x200002ec

0800386c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800386c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800386e:	b0db      	sub	sp, #364	; 0x16c
 8003870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003872:	23a0      	movs	r3, #160	; 0xa0
 8003874:	05db      	lsls	r3, r3, #23
 8003876:	2120      	movs	r1, #32
 8003878:	0018      	movs	r0, r3
 800387a:	f001 fd8f 	bl	800539c <HAL_GPIO_TogglePin>
	float BMP_TempC, BMP_Alt, BMP_Pressure;
	char BMP180_PressBuffer[50];
	char BMP180_AltBuffer[50];
	char BMP180_TempBuffer[50];
	//-------------------------------------DHT22
	float DHT_TempC = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	22bc      	movs	r2, #188	; 0xbc
 8003882:	18ba      	adds	r2, r7, r2
 8003884:	6013      	str	r3, [r2, #0]
	float DHT_Hum = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	22b8      	movs	r2, #184	; 0xb8
 800388a:	18ba      	adds	r2, r7, r2
 800388c:	6013      	str	r3, [r2, #0]
	uint8_t thp[] = {0, 0, 0, 0, 0};			//t1, t2, h1, h2, p
 800388e:	23b0      	movs	r3, #176	; 0xb0
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	4a98      	ldr	r2, [pc, #608]	; (8003af4 <main+0x288>)
 8003894:	6811      	ldr	r1, [r2, #0]
 8003896:	6019      	str	r1, [r3, #0]
 8003898:	7912      	ldrb	r2, [r2, #4]
 800389a:	711a      	strb	r2, [r3, #4]
	uint16_t temphumsum[] = {0, 0, 0};			//temp, hum, sum
 800389c:	21a8      	movs	r1, #168	; 0xa8
 800389e:	187b      	adds	r3, r7, r1
 80038a0:	2200      	movs	r2, #0
 80038a2:	801a      	strh	r2, [r3, #0]
 80038a4:	187b      	adds	r3, r7, r1
 80038a6:	2200      	movs	r2, #0
 80038a8:	805a      	strh	r2, [r3, #2]
 80038aa:	187b      	adds	r3, r7, r1
 80038ac:	2200      	movs	r2, #0
 80038ae:	809a      	strh	r2, [r3, #4]
	//char voltBuffer[50];
	ADC_ChannelConfTypeDef sConfig = {0};
	sConfig.Channel = ADC_CHANNEL_0;
	sConfig.Rank = 1;*/
	//-------------------------------------moisture
	uint16_t  moisture = 0;
 80038b0:	4b91      	ldr	r3, [pc, #580]	; (8003af8 <main+0x28c>)
 80038b2:	24b4      	movs	r4, #180	; 0xb4
 80038b4:	0064      	lsls	r4, r4, #1
 80038b6:	191b      	adds	r3, r3, r4
 80038b8:	19db      	adds	r3, r3, r7
 80038ba:	2200      	movs	r2, #0
 80038bc:	801a      	strh	r2, [r3, #0]
	char moistbuffer[50];
	ADC_ChannelConfTypeDef sConfig2 = {13};
 80038be:	4b8f      	ldr	r3, [pc, #572]	; (8003afc <main+0x290>)
 80038c0:	191b      	adds	r3, r3, r4
 80038c2:	19db      	adds	r3, r3, r7
 80038c4:	0018      	movs	r0, r3
 80038c6:	2308      	movs	r3, #8
 80038c8:	001a      	movs	r2, r3
 80038ca:	2100      	movs	r1, #0
 80038cc:	f004 faec 	bl	8007ea8 <memset>
 80038d0:	4b8a      	ldr	r3, [pc, #552]	; (8003afc <main+0x290>)
 80038d2:	191b      	adds	r3, r3, r4
 80038d4:	19db      	adds	r3, r3, r7
 80038d6:	220d      	movs	r2, #13
 80038d8:	601a      	str	r2, [r3, #0]
	sConfig2.Channel = ADC_CHANNEL_13;
 80038da:	4b88      	ldr	r3, [pc, #544]	; (8003afc <main+0x290>)
 80038dc:	191b      	adds	r3, r3, r4
 80038de:	19db      	adds	r3, r3, r7
 80038e0:	4a87      	ldr	r2, [pc, #540]	; (8003b00 <main+0x294>)
 80038e2:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038e4:	f000 fedc 	bl	80046a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038e8:	f000 f926 	bl	8003b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80038ec:	f000 fa4c 	bl	8003d88 <MX_TIM2_Init>
  MX_GPIO_Init();
 80038f0:	f000 fafe 	bl	8003ef0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80038f4:	f000 fa08 	bl	8003d08 <MX_I2C1_Init>
  MX_ADC_Init();
 80038f8:	f000 f994 	bl	8003c24 <MX_ADC_Init>
  MX_USART1_UART_Init();
 80038fc:	f000 fa98 	bl	8003e30 <MX_USART1_UART_Init>
  MX_USART5_UART_Init();
 8003900:	f000 fac6 	bl	8003e90 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8003904:	4b7f      	ldr	r3, [pc, #508]	; (8003b04 <main+0x298>)
 8003906:	0018      	movs	r0, r3
 8003908:	f003 fad4 	bl	8006eb4 <HAL_TIM_Base_Start>
	dataCalibration();
 800390c:	f7ff fa50 	bl	8002db0 <dataCalibration>
  	//HAL_UART_Transmit(&huart5, command, 45, 4000);

  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003910:	23a0      	movs	r3, #160	; 0xa0
 8003912:	05db      	lsls	r3, r3, #23
 8003914:	2120      	movs	r1, #32
 8003916:	0018      	movs	r0, r3
 8003918:	f001 fd40 	bl	800539c <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit(&huart5, msg2, 32, 1000);
	  HAL_UART_Transmit(&huart5, LatT, 12, 1000);
*/

	  //------------------------------------------------------------BMP180
	  get_BMP180Readings(&BMP_TempC, &BMP_Pressure, &BMP_Alt);
 800391c:	25b0      	movs	r5, #176	; 0xb0
 800391e:	006d      	lsls	r5, r5, #1
 8003920:	197a      	adds	r2, r7, r5
 8003922:	24ae      	movs	r4, #174	; 0xae
 8003924:	0064      	lsls	r4, r4, #1
 8003926:	1939      	adds	r1, r7, r4
 8003928:	26b2      	movs	r6, #178	; 0xb2
 800392a:	0076      	lsls	r6, r6, #1
 800392c:	19bb      	adds	r3, r7, r6
 800392e:	0018      	movs	r0, r3
 8003930:	f000 fb6a 	bl	8004008 <get_BMP180Readings>
	  //-------------REMOVING THIS LINE TRIGGERS BMP-DHT CONFLICT
	  HAL_Delay(1000);
 8003934:	23fa      	movs	r3, #250	; 0xfa
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	0018      	movs	r0, r3
 800393a:	f000 ff21 	bl	8004780 <HAL_Delay>
	  // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  //-----------------------------------------//
	  //------------------------------------------------------------DHT22
	  get_DHT22Readings(&DHT_TempC, &DHT_Hum, thp, temphumsum);
 800393e:	23a8      	movs	r3, #168	; 0xa8
 8003940:	18fb      	adds	r3, r7, r3
 8003942:	22b0      	movs	r2, #176	; 0xb0
 8003944:	18ba      	adds	r2, r7, r2
 8003946:	21b8      	movs	r1, #184	; 0xb8
 8003948:	1879      	adds	r1, r7, r1
 800394a:	20bc      	movs	r0, #188	; 0xbc
 800394c:	1838      	adds	r0, r7, r0
 800394e:	f000 fb7b 	bl	8004048 <get_DHT22Readings>
	  //------------------------------------------------------------DS18B20
//	  get_DS18B20Readings(&thp[4], DS18B20_tempArr, &DS18B20_T, &internalTemp);
	  //------------------------------------------------------------LDR
//	  get_LDRReadings(&sConfig, &voltage, &light);
	  //-----------------------------------------------------------moisture
	  get_moistureReadings(&sConfig2, &moisture);
 8003952:	233e      	movs	r3, #62	; 0x3e
 8003954:	18fa      	adds	r2, r7, r3
 8003956:	1d3b      	adds	r3, r7, #4
 8003958:	0011      	movs	r1, r2
 800395a:	0018      	movs	r0, r3
 800395c:	f000 fc08 	bl	8004170 <get_moistureReadings>



	  //------------------------------------------------------------------float to string
	  sprintf(BMP180_PressBuffer, "%.1f", BMP_Pressure);
 8003960:	193b      	adds	r3, r7, r4
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	1c18      	adds	r0, r3, #0
 8003966:	f7ff f929 	bl	8002bbc <__aeabi_f2d>
 800396a:	0002      	movs	r2, r0
 800396c:	000b      	movs	r3, r1
 800396e:	4966      	ldr	r1, [pc, #408]	; (8003b08 <main+0x29c>)
 8003970:	2494      	movs	r4, #148	; 0x94
 8003972:	0064      	lsls	r4, r4, #1
 8003974:	1938      	adds	r0, r7, r4
 8003976:	f004 ff0d 	bl	8008794 <siprintf>
	  sprintf(BMP180_AltBuffer, "%.1f", BMP_Alt);
 800397a:	197b      	adds	r3, r7, r5
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	1c18      	adds	r0, r3, #0
 8003980:	f7ff f91c 	bl	8002bbc <__aeabi_f2d>
 8003984:	0002      	movs	r2, r0
 8003986:	000b      	movs	r3, r1
 8003988:	495f      	ldr	r1, [pc, #380]	; (8003b08 <main+0x29c>)
 800398a:	25f4      	movs	r5, #244	; 0xf4
 800398c:	1978      	adds	r0, r7, r5
 800398e:	f004 ff01 	bl	8008794 <siprintf>
	  sprintf(BMP180_TempBuffer, "%.1f", BMP_TempC);
 8003992:	19bb      	adds	r3, r7, r6
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	1c18      	adds	r0, r3, #0
 8003998:	f7ff f910 	bl	8002bbc <__aeabi_f2d>
 800399c:	0002      	movs	r2, r0
 800399e:	000b      	movs	r3, r1
 80039a0:	4959      	ldr	r1, [pc, #356]	; (8003b08 <main+0x29c>)
 80039a2:	26c0      	movs	r6, #192	; 0xc0
 80039a4:	19b8      	adds	r0, r7, r6
 80039a6:	f004 fef5 	bl	8008794 <siprintf>
	  sprintf(DHT22_TempBuffer, "%.1f", DHT_TempC);
 80039aa:	20bc      	movs	r0, #188	; 0xbc
 80039ac:	183b      	adds	r3, r7, r0
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	1c18      	adds	r0, r3, #0
 80039b2:	f7ff f903 	bl	8002bbc <__aeabi_f2d>
 80039b6:	0002      	movs	r2, r0
 80039b8:	000b      	movs	r3, r1
 80039ba:	4953      	ldr	r1, [pc, #332]	; (8003b08 <main+0x29c>)
 80039bc:	2674      	movs	r6, #116	; 0x74
 80039be:	19b8      	adds	r0, r7, r6
 80039c0:	f004 fee8 	bl	8008794 <siprintf>
	  sprintf(DHT22_HumBuffer, "%.1f", DHT_Hum);
 80039c4:	21b8      	movs	r1, #184	; 0xb8
 80039c6:	187b      	adds	r3, r7, r1
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	1c18      	adds	r0, r3, #0
 80039cc:	f7ff f8f6 	bl	8002bbc <__aeabi_f2d>
 80039d0:	0002      	movs	r2, r0
 80039d2:	000b      	movs	r3, r1
 80039d4:	494c      	ldr	r1, [pc, #304]	; (8003b08 <main+0x29c>)
 80039d6:	2040      	movs	r0, #64	; 0x40
 80039d8:	1838      	adds	r0, r7, r0
 80039da:	f004 fedb 	bl	8008794 <siprintf>
//	  sprintf(DS18B20_TempBuffer, "%.1f", internalTemp);
	  sprintf(moistbuffer, "%d", moisture);
 80039de:	4b46      	ldr	r3, [pc, #280]	; (8003af8 <main+0x28c>)
 80039e0:	22b4      	movs	r2, #180	; 0xb4
 80039e2:	0052      	lsls	r2, r2, #1
 80039e4:	189b      	adds	r3, r3, r2
 80039e6:	19db      	adds	r3, r3, r7
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	001a      	movs	r2, r3
 80039ec:	4947      	ldr	r1, [pc, #284]	; (8003b0c <main+0x2a0>)
 80039ee:	230c      	movs	r3, #12
 80039f0:	18fb      	adds	r3, r7, r3
 80039f2:	0018      	movs	r0, r3
 80039f4:	f004 fece 	bl	8008794 <siprintf>
	  //BMP180 - alt -> A
	  //BMP180 - pres -> P
	  //Moisture -> M
	  //close -> #
	  //-----------------------------------------------------------------------------message frame - head
	  HAL_UART_Transmit(&huart5, (uint8_t*)"@", strlen("@"), HAL_MAX_DELAY);
 80039f8:	2301      	movs	r3, #1
 80039fa:	425b      	negs	r3, r3
 80039fc:	4944      	ldr	r1, [pc, #272]	; (8003b10 <main+0x2a4>)
 80039fe:	4845      	ldr	r0, [pc, #276]	; (8003b14 <main+0x2a8>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	f003 fd1f 	bl	8007444 <HAL_UART_Transmit>
	  //-------------------------------------------------------------------------------------hardcoded ID
	  HAL_UART_Transmit(&huart5, (uint8_t*)"N3", strlen("N3"), HAL_MAX_DELAY);
 8003a06:	2301      	movs	r3, #1
 8003a08:	425b      	negs	r3, r3
 8003a0a:	4943      	ldr	r1, [pc, #268]	; (8003b18 <main+0x2ac>)
 8003a0c:	4841      	ldr	r0, [pc, #260]	; (8003b14 <main+0x2a8>)
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f003 fd18 	bl	8007444 <HAL_UART_Transmit>
	  //--------------------------------------------------------------------------------------------DHT22
	  //------------------------------------------------------------------------------temp
	  HAL_UART_Transmit(&huart5, (uint8_t*)DHT22_TempBuffer, strlen(DHT22_TempBuffer), HAL_MAX_DELAY);
 8003a14:	19bb      	adds	r3, r7, r6
 8003a16:	0018      	movs	r0, r3
 8003a18:	f7fc fb76 	bl	8000108 <strlen>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	2301      	movs	r3, #1
 8003a22:	425b      	negs	r3, r3
 8003a24:	19b9      	adds	r1, r7, r6
 8003a26:	483b      	ldr	r0, [pc, #236]	; (8003b14 <main+0x2a8>)
 8003a28:	f003 fd0c 	bl	8007444 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart5, (uint8_t*)"T", strlen("T"), HAL_MAX_DELAY);
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	425b      	negs	r3, r3
 8003a30:	493a      	ldr	r1, [pc, #232]	; (8003b1c <main+0x2b0>)
 8003a32:	4838      	ldr	r0, [pc, #224]	; (8003b14 <main+0x2a8>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	f003 fd05 	bl	8007444 <HAL_UART_Transmit>
	  //-----------------------------------------------------------------------------humidity
	  HAL_UART_Transmit(&huart5, (uint8_t*)DHT22_HumBuffer, strlen(DHT22_HumBuffer), HAL_MAX_DELAY);
 8003a3a:	2640      	movs	r6, #64	; 0x40
 8003a3c:	19bb      	adds	r3, r7, r6
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7fc fb62 	bl	8000108 <strlen>
 8003a44:	0003      	movs	r3, r0
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	2301      	movs	r3, #1
 8003a4a:	425b      	negs	r3, r3
 8003a4c:	19b9      	adds	r1, r7, r6
 8003a4e:	4831      	ldr	r0, [pc, #196]	; (8003b14 <main+0x2a8>)
 8003a50:	f003 fcf8 	bl	8007444 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart5, (uint8_t*)"H", strlen("H"), HAL_MAX_DELAY);
 8003a54:	2301      	movs	r3, #1
 8003a56:	425b      	negs	r3, r3
 8003a58:	4931      	ldr	r1, [pc, #196]	; (8003b20 <main+0x2b4>)
 8003a5a:	482e      	ldr	r0, [pc, #184]	; (8003b14 <main+0x2a8>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f003 fcf1 	bl	8007444 <HAL_UART_Transmit>
	  //------------------------------------------------------------------------------------------DS18B20
//	  HAL_UART_Transmit(&huart5, (uint8_t*)DS18B20_TempBuffer, strlen(DHT22_TempBuffer), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart5, (uint8_t*)"S", strlen("S"), HAL_MAX_DELAY);
 8003a62:	2301      	movs	r3, #1
 8003a64:	425b      	negs	r3, r3
 8003a66:	492f      	ldr	r1, [pc, #188]	; (8003b24 <main+0x2b8>)
 8003a68:	482a      	ldr	r0, [pc, #168]	; (8003b14 <main+0x2a8>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f003 fcea 	bl	8007444 <HAL_UART_Transmit>
	  //------------------------------------------------------------------------------------------BMP180
	  //-----------------------------------------altitude
	  HAL_UART_Transmit(&huart5, (uint8_t*)BMP180_AltBuffer, strlen(BMP180_AltBuffer), HAL_MAX_DELAY);
 8003a70:	197b      	adds	r3, r7, r5
 8003a72:	0018      	movs	r0, r3
 8003a74:	f7fc fb48 	bl	8000108 <strlen>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	425b      	negs	r3, r3
 8003a80:	1979      	adds	r1, r7, r5
 8003a82:	4824      	ldr	r0, [pc, #144]	; (8003b14 <main+0x2a8>)
 8003a84:	f003 fcde 	bl	8007444 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart5, (uint8_t*)"A", strlen("A"), HAL_MAX_DELAY);
 8003a88:	2301      	movs	r3, #1
 8003a8a:	425b      	negs	r3, r3
 8003a8c:	4926      	ldr	r1, [pc, #152]	; (8003b28 <main+0x2bc>)
 8003a8e:	4821      	ldr	r0, [pc, #132]	; (8003b14 <main+0x2a8>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	f003 fcd7 	bl	8007444 <HAL_UART_Transmit>
	  //-----------------------------------------pressure
	  HAL_UART_Transmit(&huart5, (uint8_t*)BMP180_PressBuffer, strlen(BMP180_PressBuffer), HAL_MAX_DELAY);
 8003a96:	193b      	adds	r3, r7, r4
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f7fc fb35 	bl	8000108 <strlen>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	425b      	negs	r3, r3
 8003aa6:	1939      	adds	r1, r7, r4
 8003aa8:	481a      	ldr	r0, [pc, #104]	; (8003b14 <main+0x2a8>)
 8003aaa:	f003 fccb 	bl	8007444 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart5, (uint8_t*)"P", strlen("P"), HAL_MAX_DELAY);
 8003aae:	2301      	movs	r3, #1
 8003ab0:	425b      	negs	r3, r3
 8003ab2:	491e      	ldr	r1, [pc, #120]	; (8003b2c <main+0x2c0>)
 8003ab4:	4817      	ldr	r0, [pc, #92]	; (8003b14 <main+0x2a8>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f003 fcc4 	bl	8007444 <HAL_UART_Transmit>
	  //------------------------------------------------------------------------------------------moisture
	  HAL_UART_Transmit(&huart5, (uint8_t*)moistbuffer, strlen(moistbuffer), HAL_MAX_DELAY);
 8003abc:	240c      	movs	r4, #12
 8003abe:	193b      	adds	r3, r7, r4
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f7fc fb21 	bl	8000108 <strlen>
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	2301      	movs	r3, #1
 8003acc:	425b      	negs	r3, r3
 8003ace:	1939      	adds	r1, r7, r4
 8003ad0:	4810      	ldr	r0, [pc, #64]	; (8003b14 <main+0x2a8>)
 8003ad2:	f003 fcb7 	bl	8007444 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart5, (uint8_t*)"M", strlen("M"), HAL_MAX_DELAY);
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	425b      	negs	r3, r3
 8003ada:	4915      	ldr	r1, [pc, #84]	; (8003b30 <main+0x2c4>)
 8003adc:	480d      	ldr	r0, [pc, #52]	; (8003b14 <main+0x2a8>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f003 fcb0 	bl	8007444 <HAL_UART_Transmit>
	  //-------------------------------------------------------------------------------message frame - tail
	  HAL_UART_Transmit(&huart5, (uint8_t*)"#", strlen("#"), HAL_MAX_DELAY);
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	425b      	negs	r3, r3
 8003ae8:	4912      	ldr	r1, [pc, #72]	; (8003b34 <main+0x2c8>)
 8003aea:	480a      	ldr	r0, [pc, #40]	; (8003b14 <main+0x2a8>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	f003 fca9 	bl	8007444 <HAL_UART_Transmit>
	  get_BMP180Readings(&BMP_TempC, &BMP_Pressure, &BMP_Alt);
 8003af2:	e713      	b.n	800391c <main+0xb0>
 8003af4:	0800bbf4 	.word	0x0800bbf4
 8003af8:	fffffed6 	.word	0xfffffed6
 8003afc:	fffffe9c 	.word	0xfffffe9c
 8003b00:	34002000 	.word	0x34002000
 8003b04:	200002ec 	.word	0x200002ec
 8003b08:	0800bbc4 	.word	0x0800bbc4
 8003b0c:	0800bbcc 	.word	0x0800bbcc
 8003b10:	0800bbd0 	.word	0x0800bbd0
 8003b14:	200003b0 	.word	0x200003b0
 8003b18:	0800bbd4 	.word	0x0800bbd4
 8003b1c:	0800bbd8 	.word	0x0800bbd8
 8003b20:	0800bbdc 	.word	0x0800bbdc
 8003b24:	0800bbe0 	.word	0x0800bbe0
 8003b28:	0800bbe4 	.word	0x0800bbe4
 8003b2c:	0800bbe8 	.word	0x0800bbe8
 8003b30:	0800bbec 	.word	0x0800bbec
 8003b34:	0800bbf0 	.word	0x0800bbf0

08003b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b38:	b590      	push	{r4, r7, lr}
 8003b3a:	b09d      	sub	sp, #116	; 0x74
 8003b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b3e:	2438      	movs	r4, #56	; 0x38
 8003b40:	193b      	adds	r3, r7, r4
 8003b42:	0018      	movs	r0, r3
 8003b44:	2338      	movs	r3, #56	; 0x38
 8003b46:	001a      	movs	r2, r3
 8003b48:	2100      	movs	r1, #0
 8003b4a:	f004 f9ad 	bl	8007ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b4e:	2324      	movs	r3, #36	; 0x24
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	0018      	movs	r0, r3
 8003b54:	2314      	movs	r3, #20
 8003b56:	001a      	movs	r2, r3
 8003b58:	2100      	movs	r1, #0
 8003b5a:	f004 f9a5 	bl	8007ea8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b5e:	003b      	movs	r3, r7
 8003b60:	0018      	movs	r0, r3
 8003b62:	2324      	movs	r3, #36	; 0x24
 8003b64:	001a      	movs	r2, r3
 8003b66:	2100      	movs	r1, #0
 8003b68:	f004 f99e 	bl	8007ea8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b6c:	4b2b      	ldr	r3, [pc, #172]	; (8003c1c <SystemClock_Config+0xe4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a2b      	ldr	r2, [pc, #172]	; (8003c20 <SystemClock_Config+0xe8>)
 8003b72:	401a      	ands	r2, r3
 8003b74:	4b29      	ldr	r3, [pc, #164]	; (8003c1c <SystemClock_Config+0xe4>)
 8003b76:	2180      	movs	r1, #128	; 0x80
 8003b78:	0109      	lsls	r1, r1, #4
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b7e:	0021      	movs	r1, r4
 8003b80:	187b      	adds	r3, r7, r1
 8003b82:	2202      	movs	r2, #2
 8003b84:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b86:	187b      	adds	r3, r7, r1
 8003b88:	2201      	movs	r2, #1
 8003b8a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b8c:	187b      	adds	r3, r7, r1
 8003b8e:	2210      	movs	r2, #16
 8003b90:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b92:	187b      	adds	r3, r7, r1
 8003b94:	2202      	movs	r2, #2
 8003b96:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b98:	187b      	adds	r3, r7, r1
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003b9e:	187b      	adds	r3, r7, r1
 8003ba0:	2280      	movs	r2, #128	; 0x80
 8003ba2:	02d2      	lsls	r2, r2, #11
 8003ba4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003ba6:	187b      	adds	r3, r7, r1
 8003ba8:	2280      	movs	r2, #128	; 0x80
 8003baa:	03d2      	lsls	r2, r2, #15
 8003bac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bae:	187b      	adds	r3, r7, r1
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f002 f9f1 	bl	8005f98 <HAL_RCC_OscConfig>
 8003bb6:	1e03      	subs	r3, r0, #0
 8003bb8:	d001      	beq.n	8003bbe <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003bba:	f000 fb01 	bl	80041c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bbe:	2124      	movs	r1, #36	; 0x24
 8003bc0:	187b      	adds	r3, r7, r1
 8003bc2:	220f      	movs	r2, #15
 8003bc4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	2203      	movs	r2, #3
 8003bca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	2200      	movs	r2, #0
 8003bd0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bd2:	187b      	adds	r3, r7, r1
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bd8:	187b      	adds	r3, r7, r1
 8003bda:	2200      	movs	r2, #0
 8003bdc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003bde:	187b      	adds	r3, r7, r1
 8003be0:	2101      	movs	r1, #1
 8003be2:	0018      	movs	r0, r3
 8003be4:	f002 fdac 	bl	8006740 <HAL_RCC_ClockConfig>
 8003be8:	1e03      	subs	r3, r0, #0
 8003bea:	d001      	beq.n	8003bf0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003bec:	f000 fae8 	bl	80041c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003bf0:	003b      	movs	r3, r7
 8003bf2:	2209      	movs	r2, #9
 8003bf4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003bf6:	003b      	movs	r3, r7
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003bfc:	003b      	movs	r3, r7
 8003bfe:	2200      	movs	r2, #0
 8003c00:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c02:	003b      	movs	r3, r7
 8003c04:	0018      	movs	r0, r3
 8003c06:	f002 ffbf 	bl	8006b88 <HAL_RCCEx_PeriphCLKConfig>
 8003c0a:	1e03      	subs	r3, r0, #0
 8003c0c:	d001      	beq.n	8003c12 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8003c0e:	f000 fad7 	bl	80041c0 <Error_Handler>
  }
}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b01d      	add	sp, #116	; 0x74
 8003c18:	bd90      	pop	{r4, r7, pc}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	40007000 	.word	0x40007000
 8003c20:	ffffe7ff 	.word	0xffffe7ff

08003c24 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c2a:	003b      	movs	r3, r7
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	2308      	movs	r3, #8
 8003c30:	001a      	movs	r2, r3
 8003c32:	2100      	movs	r1, #0
 8003c34:	f004 f938 	bl	8007ea8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003c38:	4b30      	ldr	r3, [pc, #192]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003c3a:	4a31      	ldr	r2, [pc, #196]	; (8003d00 <MX_ADC_Init+0xdc>)
 8003c3c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003c3e:	4b2f      	ldr	r3, [pc, #188]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003c44:	4b2d      	ldr	r3, [pc, #180]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003c46:	2280      	movs	r2, #128	; 0x80
 8003c48:	05d2      	lsls	r2, r2, #23
 8003c4a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003c4c:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003c52:	4b2a      	ldr	r3, [pc, #168]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003c58:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c5e:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003c64:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003c66:	2220      	movs	r2, #32
 8003c68:	2100      	movs	r1, #0
 8003c6a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003c6c:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003c6e:	2221      	movs	r2, #33	; 0x21
 8003c70:	2100      	movs	r1, #0
 8003c72:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c74:	4b21      	ldr	r3, [pc, #132]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003c7c:	22c2      	movs	r2, #194	; 0xc2
 8003c7e:	32ff      	adds	r2, #255	; 0xff
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003c82:	4b1e      	ldr	r3, [pc, #120]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003c84:	222c      	movs	r2, #44	; 0x2c
 8003c86:	2100      	movs	r1, #0
 8003c88:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c8a:	4b1c      	ldr	r3, [pc, #112]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003c90:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003c96:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003c9c:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003ca2:	4b16      	ldr	r3, [pc, #88]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003ca8:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003caa:	0018      	movs	r0, r3
 8003cac:	f000 fd8c 	bl	80047c8 <HAL_ADC_Init>
 8003cb0:	1e03      	subs	r3, r0, #0
 8003cb2:	d001      	beq.n	8003cb8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003cb4:	f000 fa84 	bl	80041c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003cb8:	003b      	movs	r3, r7
 8003cba:	2201      	movs	r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003cbe:	003b      	movs	r3, r7
 8003cc0:	2280      	movs	r2, #128	; 0x80
 8003cc2:	0152      	lsls	r2, r2, #5
 8003cc4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003cc6:	003a      	movs	r2, r7
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003cca:	0011      	movs	r1, r2
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f000 ffeb 	bl	8004ca8 <HAL_ADC_ConfigChannel>
 8003cd2:	1e03      	subs	r3, r0, #0
 8003cd4:	d001      	beq.n	8003cda <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003cd6:	f000 fa73 	bl	80041c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003cda:	003b      	movs	r3, r7
 8003cdc:	4a09      	ldr	r2, [pc, #36]	; (8003d04 <MX_ADC_Init+0xe0>)
 8003cde:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003ce0:	003a      	movs	r2, r7
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <MX_ADC_Init+0xd8>)
 8003ce4:	0011      	movs	r1, r2
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f000 ffde 	bl	8004ca8 <HAL_ADC_ConfigChannel>
 8003cec:	1e03      	subs	r3, r0, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8003cf0:	f000 fa66 	bl	80041c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b002      	add	sp, #8
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	20000244 	.word	0x20000244
 8003d00:	40012400 	.word	0x40012400
 8003d04:	34002000 	.word	0x34002000

08003d08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003d0c:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <MX_I2C1_Init+0x74>)
 8003d0e:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <MX_I2C1_Init+0x78>)
 8003d10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8003d12:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <MX_I2C1_Init+0x74>)
 8003d14:	4a1b      	ldr	r2, [pc, #108]	; (8003d84 <MX_I2C1_Init+0x7c>)
 8003d16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003d18:	4b18      	ldr	r3, [pc, #96]	; (8003d7c <MX_I2C1_Init+0x74>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d1e:	4b17      	ldr	r3, [pc, #92]	; (8003d7c <MX_I2C1_Init+0x74>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d24:	4b15      	ldr	r3, [pc, #84]	; (8003d7c <MX_I2C1_Init+0x74>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003d2a:	4b14      	ldr	r3, [pc, #80]	; (8003d7c <MX_I2C1_Init+0x74>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003d30:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <MX_I2C1_Init+0x74>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d36:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <MX_I2C1_Init+0x74>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <MX_I2C1_Init+0x74>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d42:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <MX_I2C1_Init+0x74>)
 8003d44:	0018      	movs	r0, r3
 8003d46:	f001 fb45 	bl	80053d4 <HAL_I2C_Init>
 8003d4a:	1e03      	subs	r3, r0, #0
 8003d4c:	d001      	beq.n	8003d52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003d4e:	f000 fa37 	bl	80041c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d52:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <MX_I2C1_Init+0x74>)
 8003d54:	2100      	movs	r1, #0
 8003d56:	0018      	movs	r0, r3
 8003d58:	f002 f886 	bl	8005e68 <HAL_I2CEx_ConfigAnalogFilter>
 8003d5c:	1e03      	subs	r3, r0, #0
 8003d5e:	d001      	beq.n	8003d64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003d60:	f000 fa2e 	bl	80041c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <MX_I2C1_Init+0x74>)
 8003d66:	2100      	movs	r1, #0
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f002 f8c9 	bl	8005f00 <HAL_I2CEx_ConfigDigitalFilter>
 8003d6e:	1e03      	subs	r3, r0, #0
 8003d70:	d001      	beq.n	8003d76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003d72:	f000 fa25 	bl	80041c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	200002a0 	.word	0x200002a0
 8003d80:	40005400 	.word	0x40005400
 8003d84:	00707cbb 	.word	0x00707cbb

08003d88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d8e:	2308      	movs	r3, #8
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	0018      	movs	r0, r3
 8003d94:	2310      	movs	r3, #16
 8003d96:	001a      	movs	r2, r3
 8003d98:	2100      	movs	r1, #0
 8003d9a:	f004 f885 	bl	8007ea8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d9e:	003b      	movs	r3, r7
 8003da0:	0018      	movs	r0, r3
 8003da2:	2308      	movs	r3, #8
 8003da4:	001a      	movs	r2, r3
 8003da6:	2100      	movs	r1, #0
 8003da8:	f004 f87e 	bl	8007ea8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003dac:	4b1e      	ldr	r3, [pc, #120]	; (8003e28 <MX_TIM2_Init+0xa0>)
 8003dae:	2280      	movs	r2, #128	; 0x80
 8003db0:	05d2      	lsls	r2, r2, #23
 8003db2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8003db4:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <MX_TIM2_Init+0xa0>)
 8003db6:	221f      	movs	r2, #31
 8003db8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dba:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <MX_TIM2_Init+0xa0>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65534;
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <MX_TIM2_Init+0xa0>)
 8003dc2:	4a1a      	ldr	r2, [pc, #104]	; (8003e2c <MX_TIM2_Init+0xa4>)
 8003dc4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dc6:	4b18      	ldr	r3, [pc, #96]	; (8003e28 <MX_TIM2_Init+0xa0>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dcc:	4b16      	ldr	r3, [pc, #88]	; (8003e28 <MX_TIM2_Init+0xa0>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003dd2:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <MX_TIM2_Init+0xa0>)
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f003 f82d 	bl	8006e34 <HAL_TIM_Base_Init>
 8003dda:	1e03      	subs	r3, r0, #0
 8003ddc:	d001      	beq.n	8003de2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003dde:	f000 f9ef 	bl	80041c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003de2:	2108      	movs	r1, #8
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	0152      	lsls	r2, r2, #5
 8003dea:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003dec:	187a      	adds	r2, r7, r1
 8003dee:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <MX_TIM2_Init+0xa0>)
 8003df0:	0011      	movs	r1, r2
 8003df2:	0018      	movs	r0, r3
 8003df4:	f003 f8a8 	bl	8006f48 <HAL_TIM_ConfigClockSource>
 8003df8:	1e03      	subs	r3, r0, #0
 8003dfa:	d001      	beq.n	8003e00 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003dfc:	f000 f9e0 	bl	80041c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e00:	003b      	movs	r3, r7
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e06:	003b      	movs	r3, r7
 8003e08:	2200      	movs	r2, #0
 8003e0a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e0c:	003a      	movs	r2, r7
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <MX_TIM2_Init+0xa0>)
 8003e10:	0011      	movs	r1, r2
 8003e12:	0018      	movs	r0, r3
 8003e14:	f003 fa64 	bl	80072e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e18:	1e03      	subs	r3, r0, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003e1c:	f000 f9d0 	bl	80041c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003e20:	46c0      	nop			; (mov r8, r8)
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b006      	add	sp, #24
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	200002ec 	.word	0x200002ec
 8003e2c:	0000fffe 	.word	0x0000fffe

08003e30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e34:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <MX_USART1_UART_Init+0x58>)
 8003e36:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <MX_USART1_UART_Init+0x5c>)
 8003e38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <MX_USART1_UART_Init+0x58>)
 8003e3c:	22e1      	movs	r2, #225	; 0xe1
 8003e3e:	0252      	lsls	r2, r2, #9
 8003e40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e42:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <MX_USART1_UART_Init+0x58>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e48:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <MX_USART1_UART_Init+0x58>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e4e:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <MX_USART1_UART_Init+0x58>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e54:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <MX_USART1_UART_Init+0x58>)
 8003e56:	220c      	movs	r2, #12
 8003e58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <MX_USART1_UART_Init+0x58>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <MX_USART1_UART_Init+0x58>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <MX_USART1_UART_Init+0x58>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <MX_USART1_UART_Init+0x58>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e72:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <MX_USART1_UART_Init+0x58>)
 8003e74:	0018      	movs	r0, r3
 8003e76:	f003 fa91 	bl	800739c <HAL_UART_Init>
 8003e7a:	1e03      	subs	r3, r0, #0
 8003e7c:	d001      	beq.n	8003e82 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003e7e:	f000 f99f 	bl	80041c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	2000032c 	.word	0x2000032c
 8003e8c:	40013800 	.word	0x40013800

08003e90 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8003e94:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <MX_USART5_UART_Init+0x58>)
 8003e96:	4a15      	ldr	r2, [pc, #84]	; (8003eec <MX_USART5_UART_Init+0x5c>)
 8003e98:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003e9a:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <MX_USART5_UART_Init+0x58>)
 8003e9c:	22e1      	movs	r2, #225	; 0xe1
 8003e9e:	0252      	lsls	r2, r2, #9
 8003ea0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <MX_USART5_UART_Init+0x58>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <MX_USART5_UART_Init+0x58>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003eae:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <MX_USART5_UART_Init+0x58>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <MX_USART5_UART_Init+0x58>)
 8003eb6:	220c      	movs	r2, #12
 8003eb8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <MX_USART5_UART_Init+0x58>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ec0:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <MX_USART5_UART_Init+0x58>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ec6:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <MX_USART5_UART_Init+0x58>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <MX_USART5_UART_Init+0x58>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003ed2:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <MX_USART5_UART_Init+0x58>)
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f003 fa61 	bl	800739c <HAL_UART_Init>
 8003eda:	1e03      	subs	r3, r0, #0
 8003edc:	d001      	beq.n	8003ee2 <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 8003ede:	f000 f96f 	bl	80041c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	200003b0 	.word	0x200003b0
 8003eec:	40005000 	.word	0x40005000

08003ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ef0:	b590      	push	{r4, r7, lr}
 8003ef2:	b08b      	sub	sp, #44	; 0x2c
 8003ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef6:	2414      	movs	r4, #20
 8003ef8:	193b      	adds	r3, r7, r4
 8003efa:	0018      	movs	r0, r3
 8003efc:	2314      	movs	r3, #20
 8003efe:	001a      	movs	r2, r3
 8003f00:	2100      	movs	r1, #0
 8003f02:	f003 ffd1 	bl	8007ea8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f06:	4b3e      	ldr	r3, [pc, #248]	; (8004000 <MX_GPIO_Init+0x110>)
 8003f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0a:	4b3d      	ldr	r3, [pc, #244]	; (8004000 <MX_GPIO_Init+0x110>)
 8003f0c:	2104      	movs	r1, #4
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f12:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <MX_GPIO_Init+0x110>)
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	2204      	movs	r2, #4
 8003f18:	4013      	ands	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f1e:	4b38      	ldr	r3, [pc, #224]	; (8004000 <MX_GPIO_Init+0x110>)
 8003f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f22:	4b37      	ldr	r3, [pc, #220]	; (8004000 <MX_GPIO_Init+0x110>)
 8003f24:	2101      	movs	r1, #1
 8003f26:	430a      	orrs	r2, r1
 8003f28:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f2a:	4b35      	ldr	r3, [pc, #212]	; (8004000 <MX_GPIO_Init+0x110>)
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2e:	2201      	movs	r2, #1
 8003f30:	4013      	ands	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f36:	4b32      	ldr	r3, [pc, #200]	; (8004000 <MX_GPIO_Init+0x110>)
 8003f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3a:	4b31      	ldr	r3, [pc, #196]	; (8004000 <MX_GPIO_Init+0x110>)
 8003f3c:	2108      	movs	r1, #8
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f42:	4b2f      	ldr	r3, [pc, #188]	; (8004000 <MX_GPIO_Init+0x110>)
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	2208      	movs	r2, #8
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f4e:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <MX_GPIO_Init+0x110>)
 8003f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f52:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <MX_GPIO_Init+0x110>)
 8003f54:	2102      	movs	r1, #2
 8003f56:	430a      	orrs	r2, r1
 8003f58:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f5a:	4b29      	ldr	r3, [pc, #164]	; (8004000 <MX_GPIO_Init+0x110>)
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	2202      	movs	r2, #2
 8003f60:	4013      	ands	r3, r2
 8003f62:	607b      	str	r3, [r7, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8003f66:	4b27      	ldr	r3, [pc, #156]	; (8004004 <MX_GPIO_Init+0x114>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2106      	movs	r1, #6
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f001 f9f8 	bl	8005362 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003f72:	23a0      	movs	r3, #160	; 0xa0
 8003f74:	05db      	lsls	r3, r3, #23
 8003f76:	2200      	movs	r2, #0
 8003f78:	2120      	movs	r1, #32
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f001 f9f1 	bl	8005362 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003f80:	193b      	adds	r3, r7, r4
 8003f82:	2206      	movs	r2, #6
 8003f84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f86:	193b      	adds	r3, r7, r4
 8003f88:	2201      	movs	r2, #1
 8003f8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	193b      	adds	r3, r7, r4
 8003f8e:	2200      	movs	r2, #0
 8003f90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f92:	193b      	adds	r3, r7, r4
 8003f94:	2200      	movs	r2, #0
 8003f96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f98:	193b      	adds	r3, r7, r4
 8003f9a:	4a1a      	ldr	r2, [pc, #104]	; (8004004 <MX_GPIO_Init+0x114>)
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	0010      	movs	r0, r2
 8003fa0:	f001 f844 	bl	800502c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003fa4:	193b      	adds	r3, r7, r4
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003faa:	193b      	adds	r3, r7, r4
 8003fac:	2201      	movs	r2, #1
 8003fae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb0:	193b      	adds	r3, r7, r4
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb6:	193b      	adds	r3, r7, r4
 8003fb8:	2200      	movs	r2, #0
 8003fba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fbc:	193a      	adds	r2, r7, r4
 8003fbe:	23a0      	movs	r3, #160	; 0xa0
 8003fc0:	05db      	lsls	r3, r3, #23
 8003fc2:	0011      	movs	r1, r2
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f001 f831 	bl	800502c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003fca:	0021      	movs	r1, r4
 8003fcc:	187b      	adds	r3, r7, r1
 8003fce:	22c0      	movs	r2, #192	; 0xc0
 8003fd0:	0112      	lsls	r2, r2, #4
 8003fd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	2200      	movs	r2, #0
 8003fde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe0:	187b      	adds	r3, r7, r1
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8003fe6:	187b      	adds	r3, r7, r1
 8003fe8:	2206      	movs	r2, #6
 8003fea:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	4a05      	ldr	r2, [pc, #20]	; (8004004 <MX_GPIO_Init+0x114>)
 8003ff0:	0019      	movs	r1, r3
 8003ff2:	0010      	movs	r0, r2
 8003ff4:	f001 f81a 	bl	800502c <HAL_GPIO_Init>

}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b00b      	add	sp, #44	; 0x2c
 8003ffe:	bd90      	pop	{r4, r7, pc}
 8004000:	40021000 	.word	0x40021000
 8004004:	50000800 	.word	0x50000800

08004008 <get_BMP180Readings>:

/* USER CODE BEGIN 4 */
void get_BMP180Readings(float *tempPtr, float *pressurePtr, float *altPtr){
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
	*tempPtr = getTemp(); 						//Get Temperature
 8004014:	f7fe ffb8 	bl	8002f88 <getTemp>
 8004018:	0003      	movs	r3, r0
 800401a:	0018      	movs	r0, r3
 800401c:	f7fc ffa6 	bl	8000f6c <__aeabi_ui2f>
 8004020:	1c02      	adds	r2, r0, #0
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]
	//BMP_TempF = ((BMP_TempC * 9) / 5) + 32; 	//Convert to F
	*pressurePtr = getPressure(0); 				//Get Pressure
 8004026:	2000      	movs	r0, #0
 8004028:	f7ff f8b4 	bl	8003194 <getPressure>
 800402c:	1c02      	adds	r2, r0, #0
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	601a      	str	r2, [r3, #0]
	*altPtr = getAlt(0); 							//Get Altitude
 8004032:	2000      	movs	r0, #0
 8004034:	f7ff fad2 	bl	80035dc <getAlt>
 8004038:	1c02      	adds	r2, r0, #0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	601a      	str	r2, [r3, #0]
}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	46bd      	mov	sp, r7
 8004042:	b004      	add	sp, #16
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <get_DHT22Readings>:
void get_DHT22Readings(float *tempPtr, float *humPtr, uint8_t *u8Arr, uint16_t *u16Arr){
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
	sensorInit();
 8004056:	f7ff fb3f 	bl	80036d8 <sensorInit>
	u8Arr[4] = sensorVerify();
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	1d1c      	adds	r4, r3, #4
 800405e:	f7ff fb65 	bl	800372c <sensorVerify>
 8004062:	0003      	movs	r3, r0
 8004064:	7023      	strb	r3, [r4, #0]
	if(u8Arr[4]) {
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3304      	adds	r3, #4
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d075      	beq.n	800415c <get_DHT22Readings+0x114>
		u8Arr[2] = sensorRead(); 						//Read Lower 8 Humidity
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	1c9c      	adds	r4, r3, #2
 8004074:	f7ff fb8c 	bl	8003790 <sensorRead>
 8004078:	0003      	movs	r3, r0
 800407a:	7023      	strb	r3, [r4, #0]
	  	u8Arr[3] = sensorRead(); 						//Read Upper 8 Humidity
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	1cdc      	adds	r4, r3, #3
 8004080:	f7ff fb86 	bl	8003790 <sensorRead>
 8004084:	0003      	movs	r3, r0
 8004086:	7023      	strb	r3, [r4, #0]
	  	u8Arr[0] = sensorRead(); 						//Read Lower 8 Temperature
 8004088:	f7ff fb82 	bl	8003790 <sensorRead>
 800408c:	0003      	movs	r3, r0
 800408e:	001a      	movs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	701a      	strb	r2, [r3, #0]
	  	u8Arr[1] = sensorRead(); 						//Read Upper 8 Temperature
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	1c5c      	adds	r4, r3, #1
 8004098:	f7ff fb7a 	bl	8003790 <sensorRead>
 800409c:	0003      	movs	r3, r0
 800409e:	7023      	strb	r3, [r4, #0]
	  	u16Arr[2] = sensorRead(); 					//Read Checksum
 80040a0:	f7ff fb76 	bl	8003790 <sensorRead>
 80040a4:	0003      	movs	r3, r0
 80040a6:	001a      	movs	r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	3304      	adds	r3, #4
 80040ac:	b292      	uxth	r2, r2
 80040ae:	801a      	strh	r2, [r3, #0]

	  	u16Arr[0] = ((u8Arr[0] << 8) | u8Arr[1]); 	//Assemble Temperature
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	b21a      	sxth	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3301      	adds	r3, #1
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	b21b      	sxth	r3, r3
 80040c0:	4313      	orrs	r3, r2
 80040c2:	b21b      	sxth	r3, r3
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	801a      	strh	r2, [r3, #0]
	  	u16Arr[1] = ((u8Arr[2] << 8 | u8Arr[3])); 	//Assemble Humidity
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3302      	adds	r3, #2
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	b21a      	sxth	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3303      	adds	r3, #3
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	b21b      	sxth	r3, r3
 80040dc:	4313      	orrs	r3, r2
 80040de:	b21a      	sxth	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	3302      	adds	r3, #2
 80040e4:	b292      	uxth	r2, r2
 80040e6:	801a      	strh	r2, [r3, #0]

	  	*tempPtr = (float) (u16Arr[0]/10.0);			//Get Temperature
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	0018      	movs	r0, r3
 80040ee:	f7fe fd0f 	bl	8002b10 <__aeabi_i2d>
 80040f2:	2200      	movs	r2, #0
 80040f4:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <get_DHT22Readings+0x11c>)
 80040f6:	f7fd fab7 	bl	8001668 <__aeabi_ddiv>
 80040fa:	0002      	movs	r2, r0
 80040fc:	000b      	movs	r3, r1
 80040fe:	0010      	movs	r0, r2
 8004100:	0019      	movs	r1, r3
 8004102:	f7fe fda3 	bl	8002c4c <__aeabi_d2f>
 8004106:	1c02      	adds	r2, r0, #0
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	601a      	str	r2, [r3, #0]
	   	*tempPtr = ((*tempPtr * 9) / 5) + 32; 		//Convert from Celsius
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4915      	ldr	r1, [pc, #84]	; (8004168 <get_DHT22Readings+0x120>)
 8004112:	1c18      	adds	r0, r3, #0
 8004114:	f7fc fdb6 	bl	8000c84 <__aeabi_fmul>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	4914      	ldr	r1, [pc, #80]	; (800416c <get_DHT22Readings+0x124>)
 800411c:	1c18      	adds	r0, r3, #0
 800411e:	f7fc fc99 	bl	8000a54 <__aeabi_fdiv>
 8004122:	1c03      	adds	r3, r0, #0
 8004124:	2184      	movs	r1, #132	; 0x84
 8004126:	05c9      	lsls	r1, r1, #23
 8004128:	1c18      	adds	r0, r3, #0
 800412a:	f7fc faf5 	bl	8000718 <__aeabi_fadd>
 800412e:	1c03      	adds	r3, r0, #0
 8004130:	1c1a      	adds	r2, r3, #0
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	601a      	str	r2, [r3, #0]
	   	*humPtr = (float) (u16Arr[1]/10.0); 			//Get Humidity
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	3302      	adds	r3, #2
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	0018      	movs	r0, r3
 800413e:	f7fe fce7 	bl	8002b10 <__aeabi_i2d>
 8004142:	2200      	movs	r2, #0
 8004144:	4b07      	ldr	r3, [pc, #28]	; (8004164 <get_DHT22Readings+0x11c>)
 8004146:	f7fd fa8f 	bl	8001668 <__aeabi_ddiv>
 800414a:	0002      	movs	r2, r0
 800414c:	000b      	movs	r3, r1
 800414e:	0010      	movs	r0, r2
 8004150:	0019      	movs	r1, r3
 8004152:	f7fe fd7b 	bl	8002c4c <__aeabi_d2f>
 8004156:	1c02      	adds	r2, r0, #0
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	601a      	str	r2, [r3, #0]
	   	}
}
 800415c:	46c0      	nop			; (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	b005      	add	sp, #20
 8004162:	bd90      	pop	{r4, r7, pc}
 8004164:	40240000 	.word	0x40240000
 8004168:	41100000 	.word	0x41100000
 800416c:	40a00000 	.word	0x40a00000

08004170 <get_moistureReadings>:
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
	*lightPtr = HAL_ADC_GetValue(&hadc);
	*voltagePtr = 3.3 * (*lightPtr);
	*voltagePtr = *voltagePtr / 4095;
}
void get_moistureReadings(ADC_ChannelConfTypeDef *ADC_configPtr, uint16_t *moisturePtr){
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
	//ADC_configPtr->Channel = ADC_CHANNEL_13;
	if(HAL_ADC_ConfigChannel(&hadc, ADC_configPtr) != HAL_OK) {
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <get_moistureReadings+0x4c>)
 800417e:	0011      	movs	r1, r2
 8004180:	0018      	movs	r0, r3
 8004182:	f000 fd91 	bl	8004ca8 <HAL_ADC_ConfigChannel>
 8004186:	1e03      	subs	r3, r0, #0
 8004188:	d001      	beq.n	800418e <get_moistureReadings+0x1e>
		Error_Handler();
 800418a:	f000 f819 	bl	80041c0 <Error_Handler>
	}
	HAL_ADC_Start(&hadc); 									//Start Soil ADC
 800418e:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <get_moistureReadings+0x4c>)
 8004190:	0018      	movs	r0, r3
 8004192:	f000 fc8d 	bl	8004ab0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8004196:	2301      	movs	r3, #1
 8004198:	425a      	negs	r2, r3
 800419a:	4b08      	ldr	r3, [pc, #32]	; (80041bc <get_moistureReadings+0x4c>)
 800419c:	0011      	movs	r1, r2
 800419e:	0018      	movs	r0, r3
 80041a0:	f000 fcda 	bl	8004b58 <HAL_ADC_PollForConversion>
	*moisturePtr = HAL_ADC_GetValue(&hadc);
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <get_moistureReadings+0x4c>)
 80041a6:	0018      	movs	r0, r3
 80041a8:	f000 fd72 	bl	8004c90 <HAL_ADC_GetValue>
 80041ac:	0003      	movs	r3, r0
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	801a      	strh	r2, [r3, #0]
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000244 	.word	0x20000244

080041c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041c4:	b672      	cpsid	i
}
 80041c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041c8:	e7fe      	b.n	80041c8 <Error_Handler+0x8>
	...

080041cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041d0:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <HAL_MspInit+0x24>)
 80041d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d4:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <HAL_MspInit+0x24>)
 80041d6:	2101      	movs	r1, #1
 80041d8:	430a      	orrs	r2, r1
 80041da:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80041dc:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <HAL_MspInit+0x24>)
 80041de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041e0:	4b03      	ldr	r3, [pc, #12]	; (80041f0 <HAL_MspInit+0x24>)
 80041e2:	2180      	movs	r1, #128	; 0x80
 80041e4:	0549      	lsls	r1, r1, #21
 80041e6:	430a      	orrs	r2, r1
 80041e8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40021000 	.word	0x40021000

080041f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041f4:	b590      	push	{r4, r7, lr}
 80041f6:	b08b      	sub	sp, #44	; 0x2c
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041fc:	2414      	movs	r4, #20
 80041fe:	193b      	adds	r3, r7, r4
 8004200:	0018      	movs	r0, r3
 8004202:	2314      	movs	r3, #20
 8004204:	001a      	movs	r2, r3
 8004206:	2100      	movs	r1, #0
 8004208:	f003 fe4e 	bl	8007ea8 <memset>
  if(hadc->Instance==ADC1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a22      	ldr	r2, [pc, #136]	; (800429c <HAL_ADC_MspInit+0xa8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d13e      	bne.n	8004294 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004216:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <HAL_ADC_MspInit+0xac>)
 8004218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421a:	4b21      	ldr	r3, [pc, #132]	; (80042a0 <HAL_ADC_MspInit+0xac>)
 800421c:	2180      	movs	r1, #128	; 0x80
 800421e:	0089      	lsls	r1, r1, #2
 8004220:	430a      	orrs	r2, r1
 8004222:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004224:	4b1e      	ldr	r3, [pc, #120]	; (80042a0 <HAL_ADC_MspInit+0xac>)
 8004226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004228:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <HAL_ADC_MspInit+0xac>)
 800422a:	2104      	movs	r1, #4
 800422c:	430a      	orrs	r2, r1
 800422e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <HAL_ADC_MspInit+0xac>)
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	2204      	movs	r2, #4
 8004236:	4013      	ands	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800423c:	4b18      	ldr	r3, [pc, #96]	; (80042a0 <HAL_ADC_MspInit+0xac>)
 800423e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004240:	4b17      	ldr	r3, [pc, #92]	; (80042a0 <HAL_ADC_MspInit+0xac>)
 8004242:	2101      	movs	r1, #1
 8004244:	430a      	orrs	r2, r1
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c
 8004248:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <HAL_ADC_MspInit+0xac>)
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	2201      	movs	r2, #1
 800424e:	4013      	ands	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC3     ------> ADC_IN13
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004254:	193b      	adds	r3, r7, r4
 8004256:	2208      	movs	r2, #8
 8004258:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800425a:	193b      	adds	r3, r7, r4
 800425c:	2203      	movs	r2, #3
 800425e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004260:	193b      	adds	r3, r7, r4
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004266:	193b      	adds	r3, r7, r4
 8004268:	4a0e      	ldr	r2, [pc, #56]	; (80042a4 <HAL_ADC_MspInit+0xb0>)
 800426a:	0019      	movs	r1, r3
 800426c:	0010      	movs	r0, r2
 800426e:	f000 fedd 	bl	800502c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004272:	0021      	movs	r1, r4
 8004274:	187b      	adds	r3, r7, r1
 8004276:	2201      	movs	r2, #1
 8004278:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800427a:	187b      	adds	r3, r7, r1
 800427c:	2203      	movs	r2, #3
 800427e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004280:	187b      	adds	r3, r7, r1
 8004282:	2200      	movs	r2, #0
 8004284:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004286:	187a      	adds	r2, r7, r1
 8004288:	23a0      	movs	r3, #160	; 0xa0
 800428a:	05db      	lsls	r3, r3, #23
 800428c:	0011      	movs	r1, r2
 800428e:	0018      	movs	r0, r3
 8004290:	f000 fecc 	bl	800502c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004294:	46c0      	nop			; (mov r8, r8)
 8004296:	46bd      	mov	sp, r7
 8004298:	b00b      	add	sp, #44	; 0x2c
 800429a:	bd90      	pop	{r4, r7, pc}
 800429c:	40012400 	.word	0x40012400
 80042a0:	40021000 	.word	0x40021000
 80042a4:	50000800 	.word	0x50000800

080042a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b089      	sub	sp, #36	; 0x24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b0:	240c      	movs	r4, #12
 80042b2:	193b      	adds	r3, r7, r4
 80042b4:	0018      	movs	r0, r3
 80042b6:	2314      	movs	r3, #20
 80042b8:	001a      	movs	r2, r3
 80042ba:	2100      	movs	r1, #0
 80042bc:	f003 fdf4 	bl	8007ea8 <memset>
  if(hi2c->Instance==I2C1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a17      	ldr	r2, [pc, #92]	; (8004324 <HAL_I2C_MspInit+0x7c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d128      	bne.n	800431c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ca:	4b17      	ldr	r3, [pc, #92]	; (8004328 <HAL_I2C_MspInit+0x80>)
 80042cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ce:	4b16      	ldr	r3, [pc, #88]	; (8004328 <HAL_I2C_MspInit+0x80>)
 80042d0:	2102      	movs	r1, #2
 80042d2:	430a      	orrs	r2, r1
 80042d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80042d6:	4b14      	ldr	r3, [pc, #80]	; (8004328 <HAL_I2C_MspInit+0x80>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	2202      	movs	r2, #2
 80042dc:	4013      	ands	r3, r2
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042e2:	0021      	movs	r1, r4
 80042e4:	187b      	adds	r3, r7, r1
 80042e6:	22c0      	movs	r2, #192	; 0xc0
 80042e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042ea:	187b      	adds	r3, r7, r1
 80042ec:	2212      	movs	r2, #18
 80042ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f0:	187b      	adds	r3, r7, r1
 80042f2:	2200      	movs	r2, #0
 80042f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f6:	187b      	adds	r3, r7, r1
 80042f8:	2203      	movs	r2, #3
 80042fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80042fc:	187b      	adds	r3, r7, r1
 80042fe:	2201      	movs	r2, #1
 8004300:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004302:	187b      	adds	r3, r7, r1
 8004304:	4a09      	ldr	r2, [pc, #36]	; (800432c <HAL_I2C_MspInit+0x84>)
 8004306:	0019      	movs	r1, r3
 8004308:	0010      	movs	r0, r2
 800430a:	f000 fe8f 	bl	800502c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800430e:	4b06      	ldr	r3, [pc, #24]	; (8004328 <HAL_I2C_MspInit+0x80>)
 8004310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <HAL_I2C_MspInit+0x80>)
 8004314:	2180      	movs	r1, #128	; 0x80
 8004316:	0389      	lsls	r1, r1, #14
 8004318:	430a      	orrs	r2, r1
 800431a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	b009      	add	sp, #36	; 0x24
 8004322:	bd90      	pop	{r4, r7, pc}
 8004324:	40005400 	.word	0x40005400
 8004328:	40021000 	.word	0x40021000
 800432c:	50000400 	.word	0x50000400

08004330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	2380      	movs	r3, #128	; 0x80
 800433e:	05db      	lsls	r3, r3, #23
 8004340:	429a      	cmp	r2, r3
 8004342:	d105      	bne.n	8004350 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004344:	4b04      	ldr	r3, [pc, #16]	; (8004358 <HAL_TIM_Base_MspInit+0x28>)
 8004346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <HAL_TIM_Base_MspInit+0x28>)
 800434a:	2101      	movs	r1, #1
 800434c:	430a      	orrs	r2, r1
 800434e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004350:	46c0      	nop			; (mov r8, r8)
 8004352:	46bd      	mov	sp, r7
 8004354:	b002      	add	sp, #8
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40021000 	.word	0x40021000

0800435c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b08b      	sub	sp, #44	; 0x2c
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004364:	2414      	movs	r4, #20
 8004366:	193b      	adds	r3, r7, r4
 8004368:	0018      	movs	r0, r3
 800436a:	2314      	movs	r3, #20
 800436c:	001a      	movs	r2, r3
 800436e:	2100      	movs	r1, #0
 8004370:	f003 fd9a 	bl	8007ea8 <memset>
  if(huart->Instance==USART1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a42      	ldr	r2, [pc, #264]	; (8004484 <HAL_UART_MspInit+0x128>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d12b      	bne.n	80043d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800437e:	4b42      	ldr	r3, [pc, #264]	; (8004488 <HAL_UART_MspInit+0x12c>)
 8004380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004382:	4b41      	ldr	r3, [pc, #260]	; (8004488 <HAL_UART_MspInit+0x12c>)
 8004384:	2180      	movs	r1, #128	; 0x80
 8004386:	01c9      	lsls	r1, r1, #7
 8004388:	430a      	orrs	r2, r1
 800438a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800438c:	4b3e      	ldr	r3, [pc, #248]	; (8004488 <HAL_UART_MspInit+0x12c>)
 800438e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004390:	4b3d      	ldr	r3, [pc, #244]	; (8004488 <HAL_UART_MspInit+0x12c>)
 8004392:	2101      	movs	r1, #1
 8004394:	430a      	orrs	r2, r1
 8004396:	62da      	str	r2, [r3, #44]	; 0x2c
 8004398:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <HAL_UART_MspInit+0x12c>)
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	2201      	movs	r2, #1
 800439e:	4013      	ands	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043a4:	193b      	adds	r3, r7, r4
 80043a6:	22c0      	movs	r2, #192	; 0xc0
 80043a8:	00d2      	lsls	r2, r2, #3
 80043aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ac:	0021      	movs	r1, r4
 80043ae:	187b      	adds	r3, r7, r1
 80043b0:	2202      	movs	r2, #2
 80043b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b4:	187b      	adds	r3, r7, r1
 80043b6:	2200      	movs	r2, #0
 80043b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ba:	187b      	adds	r3, r7, r1
 80043bc:	2203      	movs	r2, #3
 80043be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80043c0:	187b      	adds	r3, r7, r1
 80043c2:	2204      	movs	r2, #4
 80043c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c6:	187a      	adds	r2, r7, r1
 80043c8:	23a0      	movs	r3, #160	; 0xa0
 80043ca:	05db      	lsls	r3, r3, #23
 80043cc:	0011      	movs	r1, r2
 80043ce:	0018      	movs	r0, r3
 80043d0:	f000 fe2c 	bl	800502c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 80043d4:	e051      	b.n	800447a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART5)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2c      	ldr	r2, [pc, #176]	; (800448c <HAL_UART_MspInit+0x130>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d14c      	bne.n	800447a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART5_CLK_ENABLE();
 80043e0:	4b29      	ldr	r3, [pc, #164]	; (8004488 <HAL_UART_MspInit+0x12c>)
 80043e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e4:	4b28      	ldr	r3, [pc, #160]	; (8004488 <HAL_UART_MspInit+0x12c>)
 80043e6:	2180      	movs	r1, #128	; 0x80
 80043e8:	0349      	lsls	r1, r1, #13
 80043ea:	430a      	orrs	r2, r1
 80043ec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ee:	4b26      	ldr	r3, [pc, #152]	; (8004488 <HAL_UART_MspInit+0x12c>)
 80043f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f2:	4b25      	ldr	r3, [pc, #148]	; (8004488 <HAL_UART_MspInit+0x12c>)
 80043f4:	2104      	movs	r1, #4
 80043f6:	430a      	orrs	r2, r1
 80043f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80043fa:	4b23      	ldr	r3, [pc, #140]	; (8004488 <HAL_UART_MspInit+0x12c>)
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	2204      	movs	r2, #4
 8004400:	4013      	ands	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <HAL_UART_MspInit+0x12c>)
 8004408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440a:	4b1f      	ldr	r3, [pc, #124]	; (8004488 <HAL_UART_MspInit+0x12c>)
 800440c:	2108      	movs	r1, #8
 800440e:	430a      	orrs	r2, r1
 8004410:	62da      	str	r2, [r3, #44]	; 0x2c
 8004412:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <HAL_UART_MspInit+0x12c>)
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	2208      	movs	r2, #8
 8004418:	4013      	ands	r3, r2
 800441a:	60bb      	str	r3, [r7, #8]
 800441c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800441e:	2114      	movs	r1, #20
 8004420:	187b      	adds	r3, r7, r1
 8004422:	2280      	movs	r2, #128	; 0x80
 8004424:	0152      	lsls	r2, r2, #5
 8004426:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004428:	000c      	movs	r4, r1
 800442a:	193b      	adds	r3, r7, r4
 800442c:	2202      	movs	r2, #2
 800442e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004430:	193b      	adds	r3, r7, r4
 8004432:	2200      	movs	r2, #0
 8004434:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004436:	193b      	adds	r3, r7, r4
 8004438:	2203      	movs	r2, #3
 800443a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART5;
 800443c:	193b      	adds	r3, r7, r4
 800443e:	2202      	movs	r2, #2
 8004440:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004442:	193b      	adds	r3, r7, r4
 8004444:	4a12      	ldr	r2, [pc, #72]	; (8004490 <HAL_UART_MspInit+0x134>)
 8004446:	0019      	movs	r1, r3
 8004448:	0010      	movs	r0, r2
 800444a:	f000 fdef 	bl	800502c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800444e:	0021      	movs	r1, r4
 8004450:	187b      	adds	r3, r7, r1
 8004452:	2204      	movs	r2, #4
 8004454:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004456:	187b      	adds	r3, r7, r1
 8004458:	2202      	movs	r2, #2
 800445a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445c:	187b      	adds	r3, r7, r1
 800445e:	2200      	movs	r2, #0
 8004460:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004462:	187b      	adds	r3, r7, r1
 8004464:	2203      	movs	r2, #3
 8004466:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8004468:	187b      	adds	r3, r7, r1
 800446a:	2206      	movs	r2, #6
 800446c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800446e:	187b      	adds	r3, r7, r1
 8004470:	4a08      	ldr	r2, [pc, #32]	; (8004494 <HAL_UART_MspInit+0x138>)
 8004472:	0019      	movs	r1, r3
 8004474:	0010      	movs	r0, r2
 8004476:	f000 fdd9 	bl	800502c <HAL_GPIO_Init>
}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	46bd      	mov	sp, r7
 800447e:	b00b      	add	sp, #44	; 0x2c
 8004480:	bd90      	pop	{r4, r7, pc}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	40013800 	.word	0x40013800
 8004488:	40021000 	.word	0x40021000
 800448c:	40005000 	.word	0x40005000
 8004490:	50000800 	.word	0x50000800
 8004494:	50000c00 	.word	0x50000c00

08004498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800449c:	e7fe      	b.n	800449c <NMI_Handler+0x4>

0800449e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044a2:	e7fe      	b.n	80044a2 <HardFault_Handler+0x4>

080044a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80044a8:	46c0      	nop			; (mov r8, r8)
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044bc:	f000 f944 	bl	8004748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044c0:	46c0      	nop			; (mov r8, r8)
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	af00      	add	r7, sp, #0
	return 1;
 80044ca:	2301      	movs	r3, #1
}
 80044cc:	0018      	movs	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <_kill>:

int _kill(int pid, int sig)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80044dc:	f003 fcba 	bl	8007e54 <__errno>
 80044e0:	0003      	movs	r3, r0
 80044e2:	2216      	movs	r2, #22
 80044e4:	601a      	str	r2, [r3, #0]
	return -1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	425b      	negs	r3, r3
}
 80044ea:	0018      	movs	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b002      	add	sp, #8
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <_exit>:

void _exit (int status)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80044fa:	2301      	movs	r3, #1
 80044fc:	425a      	negs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	0011      	movs	r1, r2
 8004502:	0018      	movs	r0, r3
 8004504:	f7ff ffe5 	bl	80044d2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004508:	e7fe      	b.n	8004508 <_exit+0x16>

0800450a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b086      	sub	sp, #24
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	e00a      	b.n	8004532 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800451c:	e000      	b.n	8004520 <_read+0x16>
 800451e:	bf00      	nop
 8004520:	0001      	movs	r1, r0
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	60ba      	str	r2, [r7, #8]
 8004528:	b2ca      	uxtb	r2, r1
 800452a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	3301      	adds	r3, #1
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	dbf0      	blt.n	800451c <_read+0x12>
	}

return len;
 800453a:	687b      	ldr	r3, [r7, #4]
}
 800453c:	0018      	movs	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	b006      	add	sp, #24
 8004542:	bd80      	pop	{r7, pc}

08004544 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	e009      	b.n	800456a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	60ba      	str	r2, [r7, #8]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	0018      	movs	r0, r3
 8004560:	e000      	b.n	8004564 <_write+0x20>
 8004562:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	3301      	adds	r3, #1
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	429a      	cmp	r2, r3
 8004570:	dbf1      	blt.n	8004556 <_write+0x12>
	}
	return len;
 8004572:	687b      	ldr	r3, [r7, #4]
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b006      	add	sp, #24
 800457a:	bd80      	pop	{r7, pc}

0800457c <_close>:

int _close(int file)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	return -1;
 8004584:	2301      	movs	r3, #1
 8004586:	425b      	negs	r3, r3
}
 8004588:	0018      	movs	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	b002      	add	sp, #8
 800458e:	bd80      	pop	{r7, pc}

08004590 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2280      	movs	r2, #128	; 0x80
 800459e:	0192      	lsls	r2, r2, #6
 80045a0:	605a      	str	r2, [r3, #4]
	return 0;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	0018      	movs	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b002      	add	sp, #8
 80045aa:	bd80      	pop	{r7, pc}

080045ac <_isatty>:

int _isatty(int file)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
	return 1;
 80045b4:	2301      	movs	r3, #1
}
 80045b6:	0018      	movs	r0, r3
 80045b8:	46bd      	mov	sp, r7
 80045ba:	b002      	add	sp, #8
 80045bc:	bd80      	pop	{r7, pc}

080045be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	607a      	str	r2, [r7, #4]
	return 0;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	0018      	movs	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b004      	add	sp, #16
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045dc:	4a14      	ldr	r2, [pc, #80]	; (8004630 <_sbrk+0x5c>)
 80045de:	4b15      	ldr	r3, [pc, #84]	; (8004634 <_sbrk+0x60>)
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045e8:	4b13      	ldr	r3, [pc, #76]	; (8004638 <_sbrk+0x64>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d102      	bne.n	80045f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045f0:	4b11      	ldr	r3, [pc, #68]	; (8004638 <_sbrk+0x64>)
 80045f2:	4a12      	ldr	r2, [pc, #72]	; (800463c <_sbrk+0x68>)
 80045f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <_sbrk+0x64>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	18d3      	adds	r3, r2, r3
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	429a      	cmp	r2, r3
 8004602:	d207      	bcs.n	8004614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004604:	f003 fc26 	bl	8007e54 <__errno>
 8004608:	0003      	movs	r3, r0
 800460a:	220c      	movs	r2, #12
 800460c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800460e:	2301      	movs	r3, #1
 8004610:	425b      	negs	r3, r3
 8004612:	e009      	b.n	8004628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004614:	4b08      	ldr	r3, [pc, #32]	; (8004638 <_sbrk+0x64>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800461a:	4b07      	ldr	r3, [pc, #28]	; (8004638 <_sbrk+0x64>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	18d2      	adds	r2, r2, r3
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <_sbrk+0x64>)
 8004624:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004626:	68fb      	ldr	r3, [r7, #12]
}
 8004628:	0018      	movs	r0, r3
 800462a:	46bd      	mov	sp, r7
 800462c:	b006      	add	sp, #24
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20005000 	.word	0x20005000
 8004634:	00000400 	.word	0x00000400
 8004638:	20000434 	.word	0x20000434
 800463c:	20000450 	.word	0x20000450

08004640 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004644:	46c0      	nop			; (mov r8, r8)
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800464c:	480d      	ldr	r0, [pc, #52]	; (8004684 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800464e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004650:	480d      	ldr	r0, [pc, #52]	; (8004688 <LoopForever+0x6>)
  ldr r1, =_edata
 8004652:	490e      	ldr	r1, [pc, #56]	; (800468c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004654:	4a0e      	ldr	r2, [pc, #56]	; (8004690 <LoopForever+0xe>)
  movs r3, #0
 8004656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004658:	e002      	b.n	8004660 <LoopCopyDataInit>

0800465a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800465a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800465c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800465e:	3304      	adds	r3, #4

08004660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004664:	d3f9      	bcc.n	800465a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004666:	4a0b      	ldr	r2, [pc, #44]	; (8004694 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004668:	4c0b      	ldr	r4, [pc, #44]	; (8004698 <LoopForever+0x16>)
  movs r3, #0
 800466a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800466c:	e001      	b.n	8004672 <LoopFillZerobss>

0800466e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800466e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004670:	3204      	adds	r2, #4

08004672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004674:	d3fb      	bcc.n	800466e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004676:	f7ff ffe3 	bl	8004640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800467a:	f003 fbf1 	bl	8007e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800467e:	f7ff f8f5 	bl	800386c <main>

08004682 <LoopForever>:

LoopForever:
    b LoopForever
 8004682:	e7fe      	b.n	8004682 <LoopForever>
   ldr   r0, =_estack
 8004684:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800468c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004690:	0800c1c8 	.word	0x0800c1c8
  ldr r2, =_sbss
 8004694:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8004698:	2000044c 	.word	0x2000044c

0800469c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800469c:	e7fe      	b.n	800469c <ADC1_COMP_IRQHandler>
	...

080046a0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80046a6:	1dfb      	adds	r3, r7, #7
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80046ac:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <HAL_Init+0x3c>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <HAL_Init+0x3c>)
 80046b2:	2140      	movs	r1, #64	; 0x40
 80046b4:	430a      	orrs	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046b8:	2003      	movs	r0, #3
 80046ba:	f000 f811 	bl	80046e0 <HAL_InitTick>
 80046be:	1e03      	subs	r3, r0, #0
 80046c0:	d003      	beq.n	80046ca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80046c2:	1dfb      	adds	r3, r7, #7
 80046c4:	2201      	movs	r2, #1
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	e001      	b.n	80046ce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80046ca:	f7ff fd7f 	bl	80041cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80046ce:	1dfb      	adds	r3, r7, #7
 80046d0:	781b      	ldrb	r3, [r3, #0]
}
 80046d2:	0018      	movs	r0, r3
 80046d4:	46bd      	mov	sp, r7
 80046d6:	b002      	add	sp, #8
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	40022000 	.word	0x40022000

080046e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046e8:	4b14      	ldr	r3, [pc, #80]	; (800473c <HAL_InitTick+0x5c>)
 80046ea:	681c      	ldr	r4, [r3, #0]
 80046ec:	4b14      	ldr	r3, [pc, #80]	; (8004740 <HAL_InitTick+0x60>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	0019      	movs	r1, r3
 80046f2:	23fa      	movs	r3, #250	; 0xfa
 80046f4:	0098      	lsls	r0, r3, #2
 80046f6:	f7fb fd23 	bl	8000140 <__udivsi3>
 80046fa:	0003      	movs	r3, r0
 80046fc:	0019      	movs	r1, r3
 80046fe:	0020      	movs	r0, r4
 8004700:	f7fb fd1e 	bl	8000140 <__udivsi3>
 8004704:	0003      	movs	r3, r0
 8004706:	0018      	movs	r0, r3
 8004708:	f000 fc83 	bl	8005012 <HAL_SYSTICK_Config>
 800470c:	1e03      	subs	r3, r0, #0
 800470e:	d001      	beq.n	8004714 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e00f      	b.n	8004734 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d80b      	bhi.n	8004732 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	2301      	movs	r3, #1
 800471e:	425b      	negs	r3, r3
 8004720:	2200      	movs	r2, #0
 8004722:	0018      	movs	r0, r3
 8004724:	f000 fc60 	bl	8004fe8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <HAL_InitTick+0x64>)
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	e000      	b.n	8004734 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
}
 8004734:	0018      	movs	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	b003      	add	sp, #12
 800473a:	bd90      	pop	{r4, r7, pc}
 800473c:	20000000 	.word	0x20000000
 8004740:	20000008 	.word	0x20000008
 8004744:	20000004 	.word	0x20000004

08004748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_IncTick+0x1c>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	001a      	movs	r2, r3
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <HAL_IncTick+0x20>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	18d2      	adds	r2, r2, r3
 8004758:	4b03      	ldr	r3, [pc, #12]	; (8004768 <HAL_IncTick+0x20>)
 800475a:	601a      	str	r2, [r3, #0]
}
 800475c:	46c0      	nop			; (mov r8, r8)
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	20000008 	.word	0x20000008
 8004768:	20000438 	.word	0x20000438

0800476c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  return uwTick;
 8004770:	4b02      	ldr	r3, [pc, #8]	; (800477c <HAL_GetTick+0x10>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	0018      	movs	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	20000438 	.word	0x20000438

08004780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004788:	f7ff fff0 	bl	800476c <HAL_GetTick>
 800478c:	0003      	movs	r3, r0
 800478e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3301      	adds	r3, #1
 8004798:	d005      	beq.n	80047a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <HAL_Delay+0x44>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	001a      	movs	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	189b      	adds	r3, r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	f7ff ffe0 	bl	800476c <HAL_GetTick>
 80047ac:	0002      	movs	r2, r0
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d8f7      	bhi.n	80047a8 <HAL_Delay+0x28>
  {
  }
}
 80047b8:	46c0      	nop			; (mov r8, r8)
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	46bd      	mov	sp, r7
 80047be:	b004      	add	sp, #16
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	20000008 	.word	0x20000008

080047c8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e159      	b.n	8004a8e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2250      	movs	r2, #80	; 0x50
 80047ec:	2100      	movs	r1, #0
 80047ee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	0018      	movs	r0, r3
 80047f4:	f7ff fcfe 	bl	80041f4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fc:	2210      	movs	r2, #16
 80047fe:	4013      	ands	r3, r2
 8004800:	2b10      	cmp	r3, #16
 8004802:	d005      	beq.n	8004810 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2204      	movs	r2, #4
 800480c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800480e:	d00b      	beq.n	8004828 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004814:	2210      	movs	r2, #16
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2250      	movs	r2, #80	; 0x50
 8004820:	2100      	movs	r1, #0
 8004822:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e132      	b.n	8004a8e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482c:	4a9a      	ldr	r2, [pc, #616]	; (8004a98 <HAL_ADC_Init+0x2d0>)
 800482e:	4013      	ands	r3, r2
 8004830:	2202      	movs	r2, #2
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2203      	movs	r2, #3
 8004840:	4013      	ands	r3, r2
 8004842:	2b01      	cmp	r3, #1
 8004844:	d108      	bne.n	8004858 <HAL_ADC_Init+0x90>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2201      	movs	r2, #1
 800484e:	4013      	ands	r3, r2
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_ADC_Init+0x90>
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <HAL_ADC_Init+0x92>
 8004858:	2300      	movs	r3, #0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d149      	bne.n	80048f2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	23c0      	movs	r3, #192	; 0xc0
 8004864:	061b      	lsls	r3, r3, #24
 8004866:	429a      	cmp	r2, r3
 8004868:	d00b      	beq.n	8004882 <HAL_ADC_Init+0xba>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	2380      	movs	r3, #128	; 0x80
 8004870:	05db      	lsls	r3, r3, #23
 8004872:	429a      	cmp	r2, r3
 8004874:	d005      	beq.n	8004882 <HAL_ADC_Init+0xba>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	061b      	lsls	r3, r3, #24
 800487e:	429a      	cmp	r2, r3
 8004880:	d111      	bne.n	80048a6 <HAL_ADC_Init+0xde>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	0092      	lsls	r2, r2, #2
 800488e:	0892      	lsrs	r2, r2, #2
 8004890:	611a      	str	r2, [r3, #16]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6919      	ldr	r1, [r3, #16]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	611a      	str	r2, [r3, #16]
 80048a4:	e014      	b.n	80048d0 <HAL_ADC_Init+0x108>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	0092      	lsls	r2, r2, #2
 80048b2:	0892      	lsrs	r2, r2, #2
 80048b4:	611a      	str	r2, [r3, #16]
 80048b6:	4b79      	ldr	r3, [pc, #484]	; (8004a9c <HAL_ADC_Init+0x2d4>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4b78      	ldr	r3, [pc, #480]	; (8004a9c <HAL_ADC_Init+0x2d4>)
 80048bc:	4978      	ldr	r1, [pc, #480]	; (8004aa0 <HAL_ADC_Init+0x2d8>)
 80048be:	400a      	ands	r2, r1
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	4b76      	ldr	r3, [pc, #472]	; (8004a9c <HAL_ADC_Init+0x2d4>)
 80048c4:	6819      	ldr	r1, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	4b74      	ldr	r3, [pc, #464]	; (8004a9c <HAL_ADC_Init+0x2d4>)
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2118      	movs	r1, #24
 80048dc:	438a      	bics	r2, r1
 80048de:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68d9      	ldr	r1, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80048f2:	4b6a      	ldr	r3, [pc, #424]	; (8004a9c <HAL_ADC_Init+0x2d4>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b69      	ldr	r3, [pc, #420]	; (8004a9c <HAL_ADC_Init+0x2d4>)
 80048f8:	496a      	ldr	r1, [pc, #424]	; (8004aa4 <HAL_ADC_Init+0x2dc>)
 80048fa:	400a      	ands	r2, r1
 80048fc:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80048fe:	4b67      	ldr	r3, [pc, #412]	; (8004a9c <HAL_ADC_Init+0x2d4>)
 8004900:	6819      	ldr	r1, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	065a      	lsls	r2, r3, #25
 8004908:	4b64      	ldr	r3, [pc, #400]	; (8004a9c <HAL_ADC_Init+0x2d4>)
 800490a:	430a      	orrs	r2, r1
 800490c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	055b      	lsls	r3, r3, #21
 8004918:	4013      	ands	r3, r2
 800491a:	d108      	bne.n	800492e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2180      	movs	r1, #128	; 0x80
 8004928:	0549      	lsls	r1, r1, #21
 800492a:	430a      	orrs	r2, r1
 800492c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	495b      	ldr	r1, [pc, #364]	; (8004aa8 <HAL_ADC_Init+0x2e0>)
 800493a:	400a      	ands	r2, r1
 800493c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68d9      	ldr	r1, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d101      	bne.n	8004954 <HAL_ADC_Init+0x18c>
 8004950:	2304      	movs	r3, #4
 8004952:	e000      	b.n	8004956 <HAL_ADC_Init+0x18e>
 8004954:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004956:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2020      	movs	r0, #32
 800495c:	5c1b      	ldrb	r3, [r3, r0]
 800495e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004960:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	202c      	movs	r0, #44	; 0x2c
 8004966:	5c1b      	ldrb	r3, [r3, r0]
 8004968:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800496a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004970:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004978:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004980:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800498e:	23c2      	movs	r3, #194	; 0xc2
 8004990:	33ff      	adds	r3, #255	; 0xff
 8004992:	429a      	cmp	r2, r3
 8004994:	d00b      	beq.n	80049ae <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68d9      	ldr	r1, [r3, #12]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2221      	movs	r2, #33	; 0x21
 80049b2:	5c9b      	ldrb	r3, [r3, r2]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d11a      	bne.n	80049ee <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	5c9b      	ldrb	r3, [r3, r2]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2180      	movs	r1, #128	; 0x80
 80049ce:	0249      	lsls	r1, r1, #9
 80049d0:	430a      	orrs	r2, r1
 80049d2:	60da      	str	r2, [r3, #12]
 80049d4:	e00b      	b.n	80049ee <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	2220      	movs	r2, #32
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e6:	2201      	movs	r2, #1
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d11f      	bne.n	8004a36 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	492a      	ldr	r1, [pc, #168]	; (8004aac <HAL_ADC_Init+0x2e4>)
 8004a02:	400a      	ands	r2, r1
 8004a04:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6919      	ldr	r1, [r3, #16]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004a14:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8004a1a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2101      	movs	r1, #1
 8004a30:	430a      	orrs	r2, r1
 8004a32:	611a      	str	r2, [r3, #16]
 8004a34:	e00e      	b.n	8004a54 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d107      	bne.n	8004a54 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2101      	movs	r1, #1
 8004a50:	438a      	bics	r2, r1
 8004a52:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695a      	ldr	r2, [r3, #20]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2107      	movs	r1, #7
 8004a60:	438a      	bics	r2, r1
 8004a62:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6959      	ldr	r1, [r3, #20]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a80:	2203      	movs	r2, #3
 8004a82:	4393      	bics	r3, r2
 8004a84:	2201      	movs	r2, #1
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	0018      	movs	r0, r3
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b002      	add	sp, #8
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	fffffefd 	.word	0xfffffefd
 8004a9c:	40012708 	.word	0x40012708
 8004aa0:	ffc3ffff 	.word	0xffc3ffff
 8004aa4:	fdffffff 	.word	0xfdffffff
 8004aa8:	fffe0219 	.word	0xfffe0219
 8004aac:	fffffc03 	.word	0xfffffc03

08004ab0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004ab0:	b590      	push	{r4, r7, lr}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ab8:	230f      	movs	r3, #15
 8004aba:	18fb      	adds	r3, r7, r3
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	2204      	movs	r2, #4
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d138      	bne.n	8004b3e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2250      	movs	r2, #80	; 0x50
 8004ad0:	5c9b      	ldrb	r3, [r3, r2]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_ADC_Start+0x2a>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e038      	b.n	8004b4c <HAL_ADC_Start+0x9c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2250      	movs	r2, #80	; 0x50
 8004ade:	2101      	movs	r1, #1
 8004ae0:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d007      	beq.n	8004afa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004aea:	230f      	movs	r3, #15
 8004aec:	18fc      	adds	r4, r7, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	0018      	movs	r0, r3
 8004af2:	f000 f95f 	bl	8004db4 <ADC_Enable>
 8004af6:	0003      	movs	r3, r0
 8004af8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004afa:	230f      	movs	r3, #15
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d120      	bne.n	8004b46 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b08:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <HAL_ADC_Start+0xa4>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2280      	movs	r2, #128	; 0x80
 8004b0e:	0052      	lsls	r2, r2, #1
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2250      	movs	r2, #80	; 0x50
 8004b20:	2100      	movs	r1, #0
 8004b22:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	221c      	movs	r2, #28
 8004b2a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2104      	movs	r1, #4
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	e003      	b.n	8004b46 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b3e:	230f      	movs	r3, #15
 8004b40:	18fb      	adds	r3, r7, r3
 8004b42:	2202      	movs	r2, #2
 8004b44:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004b46:	230f      	movs	r3, #15
 8004b48:	18fb      	adds	r3, r7, r3
 8004b4a:	781b      	ldrb	r3, [r3, #0]
}
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b005      	add	sp, #20
 8004b52:	bd90      	pop	{r4, r7, pc}
 8004b54:	fffff0fe 	.word	0xfffff0fe

08004b58 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d102      	bne.n	8004b78 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8004b72:	2308      	movs	r3, #8
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e014      	b.n	8004ba2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d10b      	bne.n	8004b9e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2250      	movs	r2, #80	; 0x50
 8004b96:	2100      	movs	r1, #0
 8004b98:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e072      	b.n	8004c84 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004b9e:	230c      	movs	r3, #12
 8004ba0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004ba2:	f7ff fde3 	bl	800476c <HAL_GetTick>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004baa:	e01f      	b.n	8004bec <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	d01c      	beq.n	8004bec <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <HAL_ADC_PollForConversion+0x70>
 8004bb8:	f7ff fdd8 	bl	800476c <HAL_GetTick>
 8004bbc:	0002      	movs	r2, r0
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d211      	bcs.n	8004bec <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d10b      	bne.n	8004bec <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd8:	2204      	movs	r2, #4
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2250      	movs	r2, #80	; 0x50
 8004be4:	2100      	movs	r1, #0
 8004be6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e04b      	b.n	8004c84 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d0d9      	beq.n	8004bac <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfc:	2280      	movs	r2, #128	; 0x80
 8004bfe:	0092      	lsls	r2, r2, #2
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	23c0      	movs	r3, #192	; 0xc0
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	4013      	ands	r3, r2
 8004c12:	d12e      	bne.n	8004c72 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2220      	movs	r2, #32
 8004c18:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d129      	bne.n	8004c72 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2208      	movs	r2, #8
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d122      	bne.n	8004c72 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2204      	movs	r2, #4
 8004c34:	4013      	ands	r3, r2
 8004c36:	d110      	bne.n	8004c5a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	210c      	movs	r1, #12
 8004c44:	438a      	bics	r2, r1
 8004c46:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4c:	4a0f      	ldr	r2, [pc, #60]	; (8004c8c <HAL_ADC_PollForConversion+0x134>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	2201      	movs	r2, #1
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
 8004c58:	e00b      	b.n	8004c72 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5e:	2220      	movs	r2, #32
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d103      	bne.n	8004c82 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	220c      	movs	r2, #12
 8004c80:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	0018      	movs	r0, r3
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b004      	add	sp, #16
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	fffffefe 	.word	0xfffffefe

08004c90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b002      	add	sp, #8
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2250      	movs	r2, #80	; 0x50
 8004cb6:	5c9b      	ldrb	r3, [r3, r2]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x18>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e06c      	b.n	8004d9a <HAL_ADC_ConfigChannel+0xf2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2250      	movs	r2, #80	; 0x50
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2204      	movs	r2, #4
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d00b      	beq.n	8004cec <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	2220      	movs	r2, #32
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2250      	movs	r2, #80	; 0x50
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e056      	b.n	8004d9a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	4a2c      	ldr	r2, [pc, #176]	; (8004da4 <HAL_ADC_ConfigChannel+0xfc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d028      	beq.n	8004d48 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	035b      	lsls	r3, r3, #13
 8004d02:	0b5a      	lsrs	r2, r3, #13
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	2380      	movs	r3, #128	; 0x80
 8004d12:	02db      	lsls	r3, r3, #11
 8004d14:	4013      	ands	r3, r2
 8004d16:	d009      	beq.n	8004d2c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8004d18:	4b23      	ldr	r3, [pc, #140]	; (8004da8 <HAL_ADC_ConfigChannel+0x100>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	4b22      	ldr	r3, [pc, #136]	; (8004da8 <HAL_ADC_ConfigChannel+0x100>)
 8004d1e:	2180      	movs	r1, #128	; 0x80
 8004d20:	0409      	lsls	r1, r1, #16
 8004d22:	430a      	orrs	r2, r1
 8004d24:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004d26:	200a      	movs	r0, #10
 8004d28:	f000 f8ac 	bl	8004e84 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	2380      	movs	r3, #128	; 0x80
 8004d32:	029b      	lsls	r3, r3, #10
 8004d34:	4013      	ands	r3, r2
 8004d36:	d02b      	beq.n	8004d90 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004d38:	4b1b      	ldr	r3, [pc, #108]	; (8004da8 <HAL_ADC_ConfigChannel+0x100>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <HAL_ADC_ConfigChannel+0x100>)
 8004d3e:	2180      	movs	r1, #128	; 0x80
 8004d40:	03c9      	lsls	r1, r1, #15
 8004d42:	430a      	orrs	r2, r1
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	e023      	b.n	8004d90 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	035b      	lsls	r3, r3, #13
 8004d54:	0b5b      	lsrs	r3, r3, #13
 8004d56:	43d9      	mvns	r1, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	2380      	movs	r3, #128	; 0x80
 8004d66:	02db      	lsls	r3, r3, #11
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d005      	beq.n	8004d78 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <HAL_ADC_ConfigChannel+0x100>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <HAL_ADC_ConfigChannel+0x100>)
 8004d72:	490e      	ldr	r1, [pc, #56]	; (8004dac <HAL_ADC_ConfigChannel+0x104>)
 8004d74:	400a      	ands	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	029b      	lsls	r3, r3, #10
 8004d80:	4013      	ands	r3, r2
 8004d82:	d005      	beq.n	8004d90 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004d84:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <HAL_ADC_ConfigChannel+0x100>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <HAL_ADC_ConfigChannel+0x100>)
 8004d8a:	4909      	ldr	r1, [pc, #36]	; (8004db0 <HAL_ADC_ConfigChannel+0x108>)
 8004d8c:	400a      	ands	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2250      	movs	r2, #80	; 0x50
 8004d94:	2100      	movs	r1, #0
 8004d96:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	b002      	add	sp, #8
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	00001001 	.word	0x00001001
 8004da8:	40012708 	.word	0x40012708
 8004dac:	ff7fffff 	.word	0xff7fffff
 8004db0:	ffbfffff 	.word	0xffbfffff

08004db4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2203      	movs	r2, #3
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d108      	bne.n	8004de0 <ADC_Enable+0x2c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <ADC_Enable+0x2c>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <ADC_Enable+0x2e>
 8004de0:	2300      	movs	r3, #0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d146      	bne.n	8004e74 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	4a24      	ldr	r2, [pc, #144]	; (8004e80 <ADC_Enable+0xcc>)
 8004dee:	4013      	ands	r3, r2
 8004df0:	d00d      	beq.n	8004e0e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df6:	2210      	movs	r2, #16
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e02:	2201      	movs	r2, #1
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e033      	b.n	8004e76 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2101      	movs	r1, #1
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004e1e:	2001      	movs	r0, #1
 8004e20:	f000 f830 	bl	8004e84 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e24:	f7ff fca2 	bl	800476c <HAL_GetTick>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004e2c:	e01b      	b.n	8004e66 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e2e:	f7ff fc9d 	bl	800476c <HAL_GetTick>
 8004e32:	0002      	movs	r2, r0
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b0a      	cmp	r3, #10
 8004e3a:	d914      	bls.n	8004e66 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2201      	movs	r2, #1
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d00d      	beq.n	8004e66 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	2210      	movs	r2, #16
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e007      	b.n	8004e76 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	4013      	ands	r3, r2
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d1dc      	bne.n	8004e2e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	0018      	movs	r0, r3
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	b004      	add	sp, #16
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	80000017 	.word	0x80000017

08004e84 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <ADC_DelayMicroSecond+0x38>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	490b      	ldr	r1, [pc, #44]	; (8004ec0 <ADC_DelayMicroSecond+0x3c>)
 8004e92:	0018      	movs	r0, r3
 8004e94:	f7fb f954 	bl	8000140 <__udivsi3>
 8004e98:	0003      	movs	r3, r0
 8004e9a:	001a      	movs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4353      	muls	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8004ea2:	e002      	b.n	8004eaa <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f9      	bne.n	8004ea4 <ADC_DelayMicroSecond+0x20>
  } 
}
 8004eb0:	46c0      	nop			; (mov r8, r8)
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	b004      	add	sp, #16
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	20000000 	.word	0x20000000
 8004ec0:	000f4240 	.word	0x000f4240

08004ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ec4:	b590      	push	{r4, r7, lr}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	0002      	movs	r2, r0
 8004ecc:	6039      	str	r1, [r7, #0]
 8004ece:	1dfb      	adds	r3, r7, #7
 8004ed0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004ed2:	1dfb      	adds	r3, r7, #7
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ed8:	d828      	bhi.n	8004f2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004eda:	4a2f      	ldr	r2, [pc, #188]	; (8004f98 <__NVIC_SetPriority+0xd4>)
 8004edc:	1dfb      	adds	r3, r7, #7
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	b25b      	sxtb	r3, r3
 8004ee2:	089b      	lsrs	r3, r3, #2
 8004ee4:	33c0      	adds	r3, #192	; 0xc0
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	589b      	ldr	r3, [r3, r2]
 8004eea:	1dfa      	adds	r2, r7, #7
 8004eec:	7812      	ldrb	r2, [r2, #0]
 8004eee:	0011      	movs	r1, r2
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	400a      	ands	r2, r1
 8004ef4:	00d2      	lsls	r2, r2, #3
 8004ef6:	21ff      	movs	r1, #255	; 0xff
 8004ef8:	4091      	lsls	r1, r2
 8004efa:	000a      	movs	r2, r1
 8004efc:	43d2      	mvns	r2, r2
 8004efe:	401a      	ands	r2, r3
 8004f00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	019b      	lsls	r3, r3, #6
 8004f06:	22ff      	movs	r2, #255	; 0xff
 8004f08:	401a      	ands	r2, r3
 8004f0a:	1dfb      	adds	r3, r7, #7
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	0018      	movs	r0, r3
 8004f10:	2303      	movs	r3, #3
 8004f12:	4003      	ands	r3, r0
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f18:	481f      	ldr	r0, [pc, #124]	; (8004f98 <__NVIC_SetPriority+0xd4>)
 8004f1a:	1dfb      	adds	r3, r7, #7
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	b25b      	sxtb	r3, r3
 8004f20:	089b      	lsrs	r3, r3, #2
 8004f22:	430a      	orrs	r2, r1
 8004f24:	33c0      	adds	r3, #192	; 0xc0
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004f2a:	e031      	b.n	8004f90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f2c:	4a1b      	ldr	r2, [pc, #108]	; (8004f9c <__NVIC_SetPriority+0xd8>)
 8004f2e:	1dfb      	adds	r3, r7, #7
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	0019      	movs	r1, r3
 8004f34:	230f      	movs	r3, #15
 8004f36:	400b      	ands	r3, r1
 8004f38:	3b08      	subs	r3, #8
 8004f3a:	089b      	lsrs	r3, r3, #2
 8004f3c:	3306      	adds	r3, #6
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	18d3      	adds	r3, r2, r3
 8004f42:	3304      	adds	r3, #4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	1dfa      	adds	r2, r7, #7
 8004f48:	7812      	ldrb	r2, [r2, #0]
 8004f4a:	0011      	movs	r1, r2
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	400a      	ands	r2, r1
 8004f50:	00d2      	lsls	r2, r2, #3
 8004f52:	21ff      	movs	r1, #255	; 0xff
 8004f54:	4091      	lsls	r1, r2
 8004f56:	000a      	movs	r2, r1
 8004f58:	43d2      	mvns	r2, r2
 8004f5a:	401a      	ands	r2, r3
 8004f5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	019b      	lsls	r3, r3, #6
 8004f62:	22ff      	movs	r2, #255	; 0xff
 8004f64:	401a      	ands	r2, r3
 8004f66:	1dfb      	adds	r3, r7, #7
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	4003      	ands	r3, r0
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f74:	4809      	ldr	r0, [pc, #36]	; (8004f9c <__NVIC_SetPriority+0xd8>)
 8004f76:	1dfb      	adds	r3, r7, #7
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	001c      	movs	r4, r3
 8004f7c:	230f      	movs	r3, #15
 8004f7e:	4023      	ands	r3, r4
 8004f80:	3b08      	subs	r3, #8
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	430a      	orrs	r2, r1
 8004f86:	3306      	adds	r3, #6
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	18c3      	adds	r3, r0, r3
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	601a      	str	r2, [r3, #0]
}
 8004f90:	46c0      	nop			; (mov r8, r8)
 8004f92:	46bd      	mov	sp, r7
 8004f94:	b003      	add	sp, #12
 8004f96:	bd90      	pop	{r4, r7, pc}
 8004f98:	e000e100 	.word	0xe000e100
 8004f9c:	e000ed00 	.word	0xe000ed00

08004fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	1e5a      	subs	r2, r3, #1
 8004fac:	2380      	movs	r3, #128	; 0x80
 8004fae:	045b      	lsls	r3, r3, #17
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d301      	bcc.n	8004fb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e010      	b.n	8004fda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <SysTick_Config+0x44>)
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	3a01      	subs	r2, #1
 8004fbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	425b      	negs	r3, r3
 8004fc4:	2103      	movs	r1, #3
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f7ff ff7c 	bl	8004ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <SysTick_Config+0x44>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fd2:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <SysTick_Config+0x44>)
 8004fd4:	2207      	movs	r2, #7
 8004fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	0018      	movs	r0, r3
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	b002      	add	sp, #8
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	e000e010 	.word	0xe000e010

08004fe8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	210f      	movs	r1, #15
 8004ff4:	187b      	adds	r3, r7, r1
 8004ff6:	1c02      	adds	r2, r0, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	187b      	adds	r3, r7, r1
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	b25b      	sxtb	r3, r3
 8005002:	0011      	movs	r1, r2
 8005004:	0018      	movs	r0, r3
 8005006:	f7ff ff5d 	bl	8004ec4 <__NVIC_SetPriority>
}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	46bd      	mov	sp, r7
 800500e:	b004      	add	sp, #16
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	0018      	movs	r0, r3
 800501e:	f7ff ffbf 	bl	8004fa0 <SysTick_Config>
 8005022:	0003      	movs	r3, r0
}
 8005024:	0018      	movs	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	b002      	add	sp, #8
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005042:	e155      	b.n	80052f0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2101      	movs	r1, #1
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4091      	lsls	r1, r2
 800504e:	000a      	movs	r2, r1
 8005050:	4013      	ands	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d100      	bne.n	800505c <HAL_GPIO_Init+0x30>
 800505a:	e146      	b.n	80052ea <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2203      	movs	r2, #3
 8005062:	4013      	ands	r3, r2
 8005064:	2b01      	cmp	r3, #1
 8005066:	d005      	beq.n	8005074 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2203      	movs	r2, #3
 800506e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005070:	2b02      	cmp	r3, #2
 8005072:	d130      	bne.n	80050d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	2203      	movs	r2, #3
 8005080:	409a      	lsls	r2, r3
 8005082:	0013      	movs	r3, r2
 8005084:	43da      	mvns	r2, r3
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	4013      	ands	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	409a      	lsls	r2, r3
 8005096:	0013      	movs	r3, r2
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050aa:	2201      	movs	r2, #1
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	409a      	lsls	r2, r3
 80050b0:	0013      	movs	r3, r2
 80050b2:	43da      	mvns	r2, r3
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	4013      	ands	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	091b      	lsrs	r3, r3, #4
 80050c0:	2201      	movs	r2, #1
 80050c2:	401a      	ands	r2, r3
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	409a      	lsls	r2, r3
 80050c8:	0013      	movs	r3, r2
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2203      	movs	r2, #3
 80050dc:	4013      	ands	r3, r2
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d017      	beq.n	8005112 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	2203      	movs	r2, #3
 80050ee:	409a      	lsls	r2, r3
 80050f0:	0013      	movs	r3, r2
 80050f2:	43da      	mvns	r2, r3
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4013      	ands	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	409a      	lsls	r2, r3
 8005104:	0013      	movs	r3, r2
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2203      	movs	r2, #3
 8005118:	4013      	ands	r3, r2
 800511a:	2b02      	cmp	r3, #2
 800511c:	d123      	bne.n	8005166 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	08da      	lsrs	r2, r3, #3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3208      	adds	r2, #8
 8005126:	0092      	lsls	r2, r2, #2
 8005128:	58d3      	ldr	r3, [r2, r3]
 800512a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2207      	movs	r2, #7
 8005130:	4013      	ands	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	220f      	movs	r2, #15
 8005136:	409a      	lsls	r2, r3
 8005138:	0013      	movs	r3, r2
 800513a:	43da      	mvns	r2, r3
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	4013      	ands	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2107      	movs	r1, #7
 800514a:	400b      	ands	r3, r1
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	409a      	lsls	r2, r3
 8005150:	0013      	movs	r3, r2
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	08da      	lsrs	r2, r3, #3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3208      	adds	r2, #8
 8005160:	0092      	lsls	r2, r2, #2
 8005162:	6939      	ldr	r1, [r7, #16]
 8005164:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	2203      	movs	r2, #3
 8005172:	409a      	lsls	r2, r3
 8005174:	0013      	movs	r3, r2
 8005176:	43da      	mvns	r2, r3
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4013      	ands	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2203      	movs	r2, #3
 8005184:	401a      	ands	r2, r3
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	409a      	lsls	r2, r3
 800518c:	0013      	movs	r3, r2
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	23c0      	movs	r3, #192	; 0xc0
 80051a0:	029b      	lsls	r3, r3, #10
 80051a2:	4013      	ands	r3, r2
 80051a4:	d100      	bne.n	80051a8 <HAL_GPIO_Init+0x17c>
 80051a6:	e0a0      	b.n	80052ea <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051a8:	4b57      	ldr	r3, [pc, #348]	; (8005308 <HAL_GPIO_Init+0x2dc>)
 80051aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ac:	4b56      	ldr	r3, [pc, #344]	; (8005308 <HAL_GPIO_Init+0x2dc>)
 80051ae:	2101      	movs	r1, #1
 80051b0:	430a      	orrs	r2, r1
 80051b2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80051b4:	4a55      	ldr	r2, [pc, #340]	; (800530c <HAL_GPIO_Init+0x2e0>)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	089b      	lsrs	r3, r3, #2
 80051ba:	3302      	adds	r3, #2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	589b      	ldr	r3, [r3, r2]
 80051c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2203      	movs	r2, #3
 80051c6:	4013      	ands	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	220f      	movs	r2, #15
 80051cc:	409a      	lsls	r2, r3
 80051ce:	0013      	movs	r3, r2
 80051d0:	43da      	mvns	r2, r3
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4013      	ands	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	23a0      	movs	r3, #160	; 0xa0
 80051dc:	05db      	lsls	r3, r3, #23
 80051de:	429a      	cmp	r2, r3
 80051e0:	d01f      	beq.n	8005222 <HAL_GPIO_Init+0x1f6>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a4a      	ldr	r2, [pc, #296]	; (8005310 <HAL_GPIO_Init+0x2e4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d019      	beq.n	800521e <HAL_GPIO_Init+0x1f2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a49      	ldr	r2, [pc, #292]	; (8005314 <HAL_GPIO_Init+0x2e8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d013      	beq.n	800521a <HAL_GPIO_Init+0x1ee>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a48      	ldr	r2, [pc, #288]	; (8005318 <HAL_GPIO_Init+0x2ec>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00d      	beq.n	8005216 <HAL_GPIO_Init+0x1ea>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a47      	ldr	r2, [pc, #284]	; (800531c <HAL_GPIO_Init+0x2f0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d007      	beq.n	8005212 <HAL_GPIO_Init+0x1e6>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a46      	ldr	r2, [pc, #280]	; (8005320 <HAL_GPIO_Init+0x2f4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d101      	bne.n	800520e <HAL_GPIO_Init+0x1e2>
 800520a:	2305      	movs	r3, #5
 800520c:	e00a      	b.n	8005224 <HAL_GPIO_Init+0x1f8>
 800520e:	2306      	movs	r3, #6
 8005210:	e008      	b.n	8005224 <HAL_GPIO_Init+0x1f8>
 8005212:	2304      	movs	r3, #4
 8005214:	e006      	b.n	8005224 <HAL_GPIO_Init+0x1f8>
 8005216:	2303      	movs	r3, #3
 8005218:	e004      	b.n	8005224 <HAL_GPIO_Init+0x1f8>
 800521a:	2302      	movs	r3, #2
 800521c:	e002      	b.n	8005224 <HAL_GPIO_Init+0x1f8>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <HAL_GPIO_Init+0x1f8>
 8005222:	2300      	movs	r3, #0
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	2103      	movs	r1, #3
 8005228:	400a      	ands	r2, r1
 800522a:	0092      	lsls	r2, r2, #2
 800522c:	4093      	lsls	r3, r2
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005234:	4935      	ldr	r1, [pc, #212]	; (800530c <HAL_GPIO_Init+0x2e0>)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	089b      	lsrs	r3, r3, #2
 800523a:	3302      	adds	r3, #2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005242:	4b38      	ldr	r3, [pc, #224]	; (8005324 <HAL_GPIO_Init+0x2f8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	43da      	mvns	r2, r3
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4013      	ands	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	2380      	movs	r3, #128	; 0x80
 8005258:	025b      	lsls	r3, r3, #9
 800525a:	4013      	ands	r3, r2
 800525c:	d003      	beq.n	8005266 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005266:	4b2f      	ldr	r3, [pc, #188]	; (8005324 <HAL_GPIO_Init+0x2f8>)
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800526c:	4b2d      	ldr	r3, [pc, #180]	; (8005324 <HAL_GPIO_Init+0x2f8>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	43da      	mvns	r2, r3
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	4013      	ands	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	2380      	movs	r3, #128	; 0x80
 8005282:	029b      	lsls	r3, r3, #10
 8005284:	4013      	ands	r3, r2
 8005286:	d003      	beq.n	8005290 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005290:	4b24      	ldr	r3, [pc, #144]	; (8005324 <HAL_GPIO_Init+0x2f8>)
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005296:	4b23      	ldr	r3, [pc, #140]	; (8005324 <HAL_GPIO_Init+0x2f8>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	43da      	mvns	r2, r3
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4013      	ands	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	2380      	movs	r3, #128	; 0x80
 80052ac:	035b      	lsls	r3, r3, #13
 80052ae:	4013      	ands	r3, r2
 80052b0:	d003      	beq.n	80052ba <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80052ba:	4b1a      	ldr	r3, [pc, #104]	; (8005324 <HAL_GPIO_Init+0x2f8>)
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80052c0:	4b18      	ldr	r3, [pc, #96]	; (8005324 <HAL_GPIO_Init+0x2f8>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	43da      	mvns	r2, r3
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4013      	ands	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	039b      	lsls	r3, r3, #14
 80052d8:	4013      	ands	r3, r2
 80052da:	d003      	beq.n	80052e4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80052e4:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <HAL_GPIO_Init+0x2f8>)
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	3301      	adds	r3, #1
 80052ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	40da      	lsrs	r2, r3
 80052f8:	1e13      	subs	r3, r2, #0
 80052fa:	d000      	beq.n	80052fe <HAL_GPIO_Init+0x2d2>
 80052fc:	e6a2      	b.n	8005044 <HAL_GPIO_Init+0x18>
  }
}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	46c0      	nop			; (mov r8, r8)
 8005302:	46bd      	mov	sp, r7
 8005304:	b006      	add	sp, #24
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40021000 	.word	0x40021000
 800530c:	40010000 	.word	0x40010000
 8005310:	50000400 	.word	0x50000400
 8005314:	50000800 	.word	0x50000800
 8005318:	50000c00 	.word	0x50000c00
 800531c:	50001000 	.word	0x50001000
 8005320:	50001c00 	.word	0x50001c00
 8005324:	40010400 	.word	0x40010400

08005328 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	000a      	movs	r2, r1
 8005332:	1cbb      	adds	r3, r7, #2
 8005334:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	1cba      	adds	r2, r7, #2
 800533c:	8812      	ldrh	r2, [r2, #0]
 800533e:	4013      	ands	r3, r2
 8005340:	d004      	beq.n	800534c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005342:	230f      	movs	r3, #15
 8005344:	18fb      	adds	r3, r7, r3
 8005346:	2201      	movs	r2, #1
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	e003      	b.n	8005354 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800534c:	230f      	movs	r3, #15
 800534e:	18fb      	adds	r3, r7, r3
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005354:	230f      	movs	r3, #15
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	781b      	ldrb	r3, [r3, #0]
}
 800535a:	0018      	movs	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	b004      	add	sp, #16
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	0008      	movs	r0, r1
 800536c:	0011      	movs	r1, r2
 800536e:	1cbb      	adds	r3, r7, #2
 8005370:	1c02      	adds	r2, r0, #0
 8005372:	801a      	strh	r2, [r3, #0]
 8005374:	1c7b      	adds	r3, r7, #1
 8005376:	1c0a      	adds	r2, r1, #0
 8005378:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800537a:	1c7b      	adds	r3, r7, #1
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005382:	1cbb      	adds	r3, r7, #2
 8005384:	881a      	ldrh	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800538a:	e003      	b.n	8005394 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800538c:	1cbb      	adds	r3, r7, #2
 800538e:	881a      	ldrh	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005394:	46c0      	nop			; (mov r8, r8)
 8005396:	46bd      	mov	sp, r7
 8005398:	b002      	add	sp, #8
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	000a      	movs	r2, r1
 80053a6:	1cbb      	adds	r3, r7, #2
 80053a8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053b0:	1cbb      	adds	r3, r7, #2
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4013      	ands	r3, r2
 80053b8:	041a      	lsls	r2, r3, #16
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	43db      	mvns	r3, r3
 80053be:	1cb9      	adds	r1, r7, #2
 80053c0:	8809      	ldrh	r1, [r1, #0]
 80053c2:	400b      	ands	r3, r1
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	619a      	str	r2, [r3, #24]
}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b004      	add	sp, #16
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e082      	b.n	80054ec <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2241      	movs	r2, #65	; 0x41
 80053ea:	5c9b      	ldrb	r3, [r3, r2]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d107      	bne.n	8005402 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2240      	movs	r2, #64	; 0x40
 80053f6:	2100      	movs	r1, #0
 80053f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	0018      	movs	r0, r3
 80053fe:	f7fe ff53 	bl	80042a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2241      	movs	r2, #65	; 0x41
 8005406:	2124      	movs	r1, #36	; 0x24
 8005408:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2101      	movs	r1, #1
 8005416:	438a      	bics	r2, r1
 8005418:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4934      	ldr	r1, [pc, #208]	; (80054f4 <HAL_I2C_Init+0x120>)
 8005424:	400a      	ands	r2, r1
 8005426:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4931      	ldr	r1, [pc, #196]	; (80054f8 <HAL_I2C_Init+0x124>)
 8005434:	400a      	ands	r2, r1
 8005436:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d108      	bne.n	8005452 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2180      	movs	r1, #128	; 0x80
 800544a:	0209      	lsls	r1, r1, #8
 800544c:	430a      	orrs	r2, r1
 800544e:	609a      	str	r2, [r3, #8]
 8005450:	e007      	b.n	8005462 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2184      	movs	r1, #132	; 0x84
 800545c:	0209      	lsls	r1, r1, #8
 800545e:	430a      	orrs	r2, r1
 8005460:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d104      	bne.n	8005474 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2280      	movs	r2, #128	; 0x80
 8005470:	0112      	lsls	r2, r2, #4
 8005472:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	491f      	ldr	r1, [pc, #124]	; (80054fc <HAL_I2C_Init+0x128>)
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	491a      	ldr	r1, [pc, #104]	; (80054f8 <HAL_I2C_Init+0x124>)
 8005490:	400a      	ands	r2, r1
 8005492:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	431a      	orrs	r2, r3
 800549e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69d9      	ldr	r1, [r3, #28]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1a      	ldr	r2, [r3, #32]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2101      	movs	r1, #1
 80054ca:	430a      	orrs	r2, r1
 80054cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2241      	movs	r2, #65	; 0x41
 80054d8:	2120      	movs	r1, #32
 80054da:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2242      	movs	r2, #66	; 0x42
 80054e6:	2100      	movs	r1, #0
 80054e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	0018      	movs	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	b002      	add	sp, #8
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	f0ffffff 	.word	0xf0ffffff
 80054f8:	ffff7fff 	.word	0xffff7fff
 80054fc:	02008000 	.word	0x02008000

08005500 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005500:	b590      	push	{r4, r7, lr}
 8005502:	b089      	sub	sp, #36	; 0x24
 8005504:	af02      	add	r7, sp, #8
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	000c      	movs	r4, r1
 800550a:	0010      	movs	r0, r2
 800550c:	0019      	movs	r1, r3
 800550e:	230a      	movs	r3, #10
 8005510:	18fb      	adds	r3, r7, r3
 8005512:	1c22      	adds	r2, r4, #0
 8005514:	801a      	strh	r2, [r3, #0]
 8005516:	2308      	movs	r3, #8
 8005518:	18fb      	adds	r3, r7, r3
 800551a:	1c02      	adds	r2, r0, #0
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	1dbb      	adds	r3, r7, #6
 8005520:	1c0a      	adds	r2, r1, #0
 8005522:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2241      	movs	r2, #65	; 0x41
 8005528:	5c9b      	ldrb	r3, [r3, r2]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b20      	cmp	r3, #32
 800552e:	d000      	beq.n	8005532 <HAL_I2C_Mem_Write+0x32>
 8005530:	e10c      	b.n	800574c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	2b00      	cmp	r3, #0
 8005536:	d004      	beq.n	8005542 <HAL_I2C_Mem_Write+0x42>
 8005538:	232c      	movs	r3, #44	; 0x2c
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d105      	bne.n	800554e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2280      	movs	r2, #128	; 0x80
 8005546:	0092      	lsls	r2, r2, #2
 8005548:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e0ff      	b.n	800574e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2240      	movs	r2, #64	; 0x40
 8005552:	5c9b      	ldrb	r3, [r3, r2]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_I2C_Mem_Write+0x5c>
 8005558:	2302      	movs	r3, #2
 800555a:	e0f8      	b.n	800574e <HAL_I2C_Mem_Write+0x24e>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2240      	movs	r2, #64	; 0x40
 8005560:	2101      	movs	r1, #1
 8005562:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005564:	f7ff f902 	bl	800476c <HAL_GetTick>
 8005568:	0003      	movs	r3, r0
 800556a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800556c:	2380      	movs	r3, #128	; 0x80
 800556e:	0219      	lsls	r1, r3, #8
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	2319      	movs	r3, #25
 8005578:	2201      	movs	r2, #1
 800557a:	f000 fb0b 	bl	8005b94 <I2C_WaitOnFlagUntilTimeout>
 800557e:	1e03      	subs	r3, r0, #0
 8005580:	d001      	beq.n	8005586 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e0e3      	b.n	800574e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2241      	movs	r2, #65	; 0x41
 800558a:	2121      	movs	r1, #33	; 0x21
 800558c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2242      	movs	r2, #66	; 0x42
 8005592:	2140      	movs	r1, #64	; 0x40
 8005594:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	222c      	movs	r2, #44	; 0x2c
 80055a6:	18ba      	adds	r2, r7, r2
 80055a8:	8812      	ldrh	r2, [r2, #0]
 80055aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055b2:	1dbb      	adds	r3, r7, #6
 80055b4:	881c      	ldrh	r4, [r3, #0]
 80055b6:	2308      	movs	r3, #8
 80055b8:	18fb      	adds	r3, r7, r3
 80055ba:	881a      	ldrh	r2, [r3, #0]
 80055bc:	230a      	movs	r3, #10
 80055be:	18fb      	adds	r3, r7, r3
 80055c0:	8819      	ldrh	r1, [r3, #0]
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	9301      	str	r3, [sp, #4]
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	0023      	movs	r3, r4
 80055ce:	f000 f9f9 	bl	80059c4 <I2C_RequestMemoryWrite>
 80055d2:	1e03      	subs	r3, r0, #0
 80055d4:	d005      	beq.n	80055e2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2240      	movs	r2, #64	; 0x40
 80055da:	2100      	movs	r1, #0
 80055dc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e0b5      	b.n	800574e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2bff      	cmp	r3, #255	; 0xff
 80055ea:	d911      	bls.n	8005610 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	22ff      	movs	r2, #255	; 0xff
 80055f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	2380      	movs	r3, #128	; 0x80
 80055fa:	045c      	lsls	r4, r3, #17
 80055fc:	230a      	movs	r3, #10
 80055fe:	18fb      	adds	r3, r7, r3
 8005600:	8819      	ldrh	r1, [r3, #0]
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	2300      	movs	r3, #0
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	0023      	movs	r3, r4
 800560a:	f000 fbf7 	bl	8005dfc <I2C_TransferConfig>
 800560e:	e012      	b.n	8005636 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005614:	b29a      	uxth	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561e:	b2da      	uxtb	r2, r3
 8005620:	2380      	movs	r3, #128	; 0x80
 8005622:	049c      	lsls	r4, r3, #18
 8005624:	230a      	movs	r3, #10
 8005626:	18fb      	adds	r3, r7, r3
 8005628:	8819      	ldrh	r1, [r3, #0]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	2300      	movs	r3, #0
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	0023      	movs	r3, r4
 8005632:	f000 fbe3 	bl	8005dfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	0018      	movs	r0, r3
 800563e:	f000 fae8 	bl	8005c12 <I2C_WaitOnTXISFlagUntilTimeout>
 8005642:	1e03      	subs	r3, r0, #0
 8005644:	d001      	beq.n	800564a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e081      	b.n	800574e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	781a      	ldrb	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d03a      	beq.n	80056fa <HAL_I2C_Mem_Write+0x1fa>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005688:	2b00      	cmp	r3, #0
 800568a:	d136      	bne.n	80056fa <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800568c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	0013      	movs	r3, r2
 8005696:	2200      	movs	r2, #0
 8005698:	2180      	movs	r1, #128	; 0x80
 800569a:	f000 fa7b 	bl	8005b94 <I2C_WaitOnFlagUntilTimeout>
 800569e:	1e03      	subs	r3, r0, #0
 80056a0:	d001      	beq.n	80056a6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e053      	b.n	800574e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2bff      	cmp	r3, #255	; 0xff
 80056ae:	d911      	bls.n	80056d4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	22ff      	movs	r2, #255	; 0xff
 80056b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	2380      	movs	r3, #128	; 0x80
 80056be:	045c      	lsls	r4, r3, #17
 80056c0:	230a      	movs	r3, #10
 80056c2:	18fb      	adds	r3, r7, r3
 80056c4:	8819      	ldrh	r1, [r3, #0]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	2300      	movs	r3, #0
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	0023      	movs	r3, r4
 80056ce:	f000 fb95 	bl	8005dfc <I2C_TransferConfig>
 80056d2:	e012      	b.n	80056fa <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	2380      	movs	r3, #128	; 0x80
 80056e6:	049c      	lsls	r4, r3, #18
 80056e8:	230a      	movs	r3, #10
 80056ea:	18fb      	adds	r3, r7, r3
 80056ec:	8819      	ldrh	r1, [r3, #0]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	2300      	movs	r3, #0
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	0023      	movs	r3, r4
 80056f6:	f000 fb81 	bl	8005dfc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d198      	bne.n	8005636 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	0018      	movs	r0, r3
 800570c:	f000 fac0 	bl	8005c90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005710:	1e03      	subs	r3, r0, #0
 8005712:	d001      	beq.n	8005718 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e01a      	b.n	800574e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2220      	movs	r2, #32
 800571e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	490b      	ldr	r1, [pc, #44]	; (8005758 <HAL_I2C_Mem_Write+0x258>)
 800572c:	400a      	ands	r2, r1
 800572e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2241      	movs	r2, #65	; 0x41
 8005734:	2120      	movs	r1, #32
 8005736:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2242      	movs	r2, #66	; 0x42
 800573c:	2100      	movs	r1, #0
 800573e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2240      	movs	r2, #64	; 0x40
 8005744:	2100      	movs	r1, #0
 8005746:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	e000      	b.n	800574e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800574c:	2302      	movs	r3, #2
  }
}
 800574e:	0018      	movs	r0, r3
 8005750:	46bd      	mov	sp, r7
 8005752:	b007      	add	sp, #28
 8005754:	bd90      	pop	{r4, r7, pc}
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	fe00e800 	.word	0xfe00e800

0800575c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800575c:	b590      	push	{r4, r7, lr}
 800575e:	b089      	sub	sp, #36	; 0x24
 8005760:	af02      	add	r7, sp, #8
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	000c      	movs	r4, r1
 8005766:	0010      	movs	r0, r2
 8005768:	0019      	movs	r1, r3
 800576a:	230a      	movs	r3, #10
 800576c:	18fb      	adds	r3, r7, r3
 800576e:	1c22      	adds	r2, r4, #0
 8005770:	801a      	strh	r2, [r3, #0]
 8005772:	2308      	movs	r3, #8
 8005774:	18fb      	adds	r3, r7, r3
 8005776:	1c02      	adds	r2, r0, #0
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	1dbb      	adds	r3, r7, #6
 800577c:	1c0a      	adds	r2, r1, #0
 800577e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2241      	movs	r2, #65	; 0x41
 8005784:	5c9b      	ldrb	r3, [r3, r2]
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b20      	cmp	r3, #32
 800578a:	d000      	beq.n	800578e <HAL_I2C_Mem_Read+0x32>
 800578c:	e110      	b.n	80059b0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	2b00      	cmp	r3, #0
 8005792:	d004      	beq.n	800579e <HAL_I2C_Mem_Read+0x42>
 8005794:	232c      	movs	r3, #44	; 0x2c
 8005796:	18fb      	adds	r3, r7, r3
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d105      	bne.n	80057aa <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2280      	movs	r2, #128	; 0x80
 80057a2:	0092      	lsls	r2, r2, #2
 80057a4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e103      	b.n	80059b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2240      	movs	r2, #64	; 0x40
 80057ae:	5c9b      	ldrb	r3, [r3, r2]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_I2C_Mem_Read+0x5c>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e0fc      	b.n	80059b2 <HAL_I2C_Mem_Read+0x256>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2240      	movs	r2, #64	; 0x40
 80057bc:	2101      	movs	r1, #1
 80057be:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057c0:	f7fe ffd4 	bl	800476c <HAL_GetTick>
 80057c4:	0003      	movs	r3, r0
 80057c6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057c8:	2380      	movs	r3, #128	; 0x80
 80057ca:	0219      	lsls	r1, r3, #8
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	2319      	movs	r3, #25
 80057d4:	2201      	movs	r2, #1
 80057d6:	f000 f9dd 	bl	8005b94 <I2C_WaitOnFlagUntilTimeout>
 80057da:	1e03      	subs	r3, r0, #0
 80057dc:	d001      	beq.n	80057e2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e0e7      	b.n	80059b2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2241      	movs	r2, #65	; 0x41
 80057e6:	2122      	movs	r1, #34	; 0x22
 80057e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2242      	movs	r2, #66	; 0x42
 80057ee:	2140      	movs	r1, #64	; 0x40
 80057f0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	222c      	movs	r2, #44	; 0x2c
 8005802:	18ba      	adds	r2, r7, r2
 8005804:	8812      	ldrh	r2, [r2, #0]
 8005806:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800580e:	1dbb      	adds	r3, r7, #6
 8005810:	881c      	ldrh	r4, [r3, #0]
 8005812:	2308      	movs	r3, #8
 8005814:	18fb      	adds	r3, r7, r3
 8005816:	881a      	ldrh	r2, [r3, #0]
 8005818:	230a      	movs	r3, #10
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	8819      	ldrh	r1, [r3, #0]
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	9301      	str	r3, [sp, #4]
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	0023      	movs	r3, r4
 800582a:	f000 f92f 	bl	8005a8c <I2C_RequestMemoryRead>
 800582e:	1e03      	subs	r3, r0, #0
 8005830:	d005      	beq.n	800583e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2240      	movs	r2, #64	; 0x40
 8005836:	2100      	movs	r1, #0
 8005838:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e0b9      	b.n	80059b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005842:	b29b      	uxth	r3, r3
 8005844:	2bff      	cmp	r3, #255	; 0xff
 8005846:	d911      	bls.n	800586c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	22ff      	movs	r2, #255	; 0xff
 800584c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005852:	b2da      	uxtb	r2, r3
 8005854:	2380      	movs	r3, #128	; 0x80
 8005856:	045c      	lsls	r4, r3, #17
 8005858:	230a      	movs	r3, #10
 800585a:	18fb      	adds	r3, r7, r3
 800585c:	8819      	ldrh	r1, [r3, #0]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	4b56      	ldr	r3, [pc, #344]	; (80059bc <HAL_I2C_Mem_Read+0x260>)
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	0023      	movs	r3, r4
 8005866:	f000 fac9 	bl	8005dfc <I2C_TransferConfig>
 800586a:	e012      	b.n	8005892 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800587a:	b2da      	uxtb	r2, r3
 800587c:	2380      	movs	r3, #128	; 0x80
 800587e:	049c      	lsls	r4, r3, #18
 8005880:	230a      	movs	r3, #10
 8005882:	18fb      	adds	r3, r7, r3
 8005884:	8819      	ldrh	r1, [r3, #0]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	4b4c      	ldr	r3, [pc, #304]	; (80059bc <HAL_I2C_Mem_Read+0x260>)
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	0023      	movs	r3, r4
 800588e:	f000 fab5 	bl	8005dfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	0013      	movs	r3, r2
 800589c:	2200      	movs	r2, #0
 800589e:	2104      	movs	r1, #4
 80058a0:	f000 f978 	bl	8005b94 <I2C_WaitOnFlagUntilTimeout>
 80058a4:	1e03      	subs	r3, r0, #0
 80058a6:	d001      	beq.n	80058ac <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e082      	b.n	80059b2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d03a      	beq.n	800595e <HAL_I2C_Mem_Read+0x202>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d136      	bne.n	800595e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	0013      	movs	r3, r2
 80058fa:	2200      	movs	r2, #0
 80058fc:	2180      	movs	r1, #128	; 0x80
 80058fe:	f000 f949 	bl	8005b94 <I2C_WaitOnFlagUntilTimeout>
 8005902:	1e03      	subs	r3, r0, #0
 8005904:	d001      	beq.n	800590a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e053      	b.n	80059b2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590e:	b29b      	uxth	r3, r3
 8005910:	2bff      	cmp	r3, #255	; 0xff
 8005912:	d911      	bls.n	8005938 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	22ff      	movs	r2, #255	; 0xff
 8005918:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591e:	b2da      	uxtb	r2, r3
 8005920:	2380      	movs	r3, #128	; 0x80
 8005922:	045c      	lsls	r4, r3, #17
 8005924:	230a      	movs	r3, #10
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	8819      	ldrh	r1, [r3, #0]
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	2300      	movs	r3, #0
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	0023      	movs	r3, r4
 8005932:	f000 fa63 	bl	8005dfc <I2C_TransferConfig>
 8005936:	e012      	b.n	800595e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005946:	b2da      	uxtb	r2, r3
 8005948:	2380      	movs	r3, #128	; 0x80
 800594a:	049c      	lsls	r4, r3, #18
 800594c:	230a      	movs	r3, #10
 800594e:	18fb      	adds	r3, r7, r3
 8005950:	8819      	ldrh	r1, [r3, #0]
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	2300      	movs	r3, #0
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	0023      	movs	r3, r4
 800595a:	f000 fa4f 	bl	8005dfc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d194      	bne.n	8005892 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	0018      	movs	r0, r3
 8005970:	f000 f98e 	bl	8005c90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005974:	1e03      	subs	r3, r0, #0
 8005976:	d001      	beq.n	800597c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e01a      	b.n	80059b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2220      	movs	r2, #32
 8005982:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	490c      	ldr	r1, [pc, #48]	; (80059c0 <HAL_I2C_Mem_Read+0x264>)
 8005990:	400a      	ands	r2, r1
 8005992:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2241      	movs	r2, #65	; 0x41
 8005998:	2120      	movs	r1, #32
 800599a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2242      	movs	r2, #66	; 0x42
 80059a0:	2100      	movs	r1, #0
 80059a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2240      	movs	r2, #64	; 0x40
 80059a8:	2100      	movs	r1, #0
 80059aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	e000      	b.n	80059b2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80059b0:	2302      	movs	r3, #2
  }
}
 80059b2:	0018      	movs	r0, r3
 80059b4:	46bd      	mov	sp, r7
 80059b6:	b007      	add	sp, #28
 80059b8:	bd90      	pop	{r4, r7, pc}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	80002400 	.word	0x80002400
 80059c0:	fe00e800 	.word	0xfe00e800

080059c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80059c4:	b5b0      	push	{r4, r5, r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	000c      	movs	r4, r1
 80059ce:	0010      	movs	r0, r2
 80059d0:	0019      	movs	r1, r3
 80059d2:	250a      	movs	r5, #10
 80059d4:	197b      	adds	r3, r7, r5
 80059d6:	1c22      	adds	r2, r4, #0
 80059d8:	801a      	strh	r2, [r3, #0]
 80059da:	2308      	movs	r3, #8
 80059dc:	18fb      	adds	r3, r7, r3
 80059de:	1c02      	adds	r2, r0, #0
 80059e0:	801a      	strh	r2, [r3, #0]
 80059e2:	1dbb      	adds	r3, r7, #6
 80059e4:	1c0a      	adds	r2, r1, #0
 80059e6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80059e8:	1dbb      	adds	r3, r7, #6
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	2380      	movs	r3, #128	; 0x80
 80059f0:	045c      	lsls	r4, r3, #17
 80059f2:	197b      	adds	r3, r7, r5
 80059f4:	8819      	ldrh	r1, [r3, #0]
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	4b23      	ldr	r3, [pc, #140]	; (8005a88 <I2C_RequestMemoryWrite+0xc4>)
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	0023      	movs	r3, r4
 80059fe:	f000 f9fd 	bl	8005dfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a04:	6a39      	ldr	r1, [r7, #32]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	0018      	movs	r0, r3
 8005a0a:	f000 f902 	bl	8005c12 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a0e:	1e03      	subs	r3, r0, #0
 8005a10:	d001      	beq.n	8005a16 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e033      	b.n	8005a7e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a16:	1dbb      	adds	r3, r7, #6
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d107      	bne.n	8005a2e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a1e:	2308      	movs	r3, #8
 8005a20:	18fb      	adds	r3, r7, r3
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a2c:	e019      	b.n	8005a62 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a2e:	2308      	movs	r3, #8
 8005a30:	18fb      	adds	r3, r7, r3
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	0a1b      	lsrs	r3, r3, #8
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a42:	6a39      	ldr	r1, [r7, #32]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	0018      	movs	r0, r3
 8005a48:	f000 f8e3 	bl	8005c12 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a4c:	1e03      	subs	r3, r0, #0
 8005a4e:	d001      	beq.n	8005a54 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e014      	b.n	8005a7e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a54:	2308      	movs	r3, #8
 8005a56:	18fb      	adds	r3, r7, r3
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005a62:	6a3a      	ldr	r2, [r7, #32]
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	0013      	movs	r3, r2
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2180      	movs	r1, #128	; 0x80
 8005a70:	f000 f890 	bl	8005b94 <I2C_WaitOnFlagUntilTimeout>
 8005a74:	1e03      	subs	r3, r0, #0
 8005a76:	d001      	beq.n	8005a7c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	0018      	movs	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	b004      	add	sp, #16
 8005a84:	bdb0      	pop	{r4, r5, r7, pc}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	80002000 	.word	0x80002000

08005a8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005a8c:	b5b0      	push	{r4, r5, r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	000c      	movs	r4, r1
 8005a96:	0010      	movs	r0, r2
 8005a98:	0019      	movs	r1, r3
 8005a9a:	250a      	movs	r5, #10
 8005a9c:	197b      	adds	r3, r7, r5
 8005a9e:	1c22      	adds	r2, r4, #0
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	2308      	movs	r3, #8
 8005aa4:	18fb      	adds	r3, r7, r3
 8005aa6:	1c02      	adds	r2, r0, #0
 8005aa8:	801a      	strh	r2, [r3, #0]
 8005aaa:	1dbb      	adds	r3, r7, #6
 8005aac:	1c0a      	adds	r2, r1, #0
 8005aae:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005ab0:	1dbb      	adds	r3, r7, #6
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	197b      	adds	r3, r7, r5
 8005ab8:	8819      	ldrh	r1, [r3, #0]
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	4b23      	ldr	r3, [pc, #140]	; (8005b4c <I2C_RequestMemoryRead+0xc0>)
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f000 f99b 	bl	8005dfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac8:	6a39      	ldr	r1, [r7, #32]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	0018      	movs	r0, r3
 8005ace:	f000 f8a0 	bl	8005c12 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ad2:	1e03      	subs	r3, r0, #0
 8005ad4:	d001      	beq.n	8005ada <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e033      	b.n	8005b42 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ada:	1dbb      	adds	r3, r7, #6
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d107      	bne.n	8005af2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ae2:	2308      	movs	r3, #8
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	629a      	str	r2, [r3, #40]	; 0x28
 8005af0:	e019      	b.n	8005b26 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005af2:	2308      	movs	r3, #8
 8005af4:	18fb      	adds	r3, r7, r3
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	0a1b      	lsrs	r3, r3, #8
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b06:	6a39      	ldr	r1, [r7, #32]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	f000 f881 	bl	8005c12 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b10:	1e03      	subs	r3, r0, #0
 8005b12:	d001      	beq.n	8005b18 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e014      	b.n	8005b42 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b18:	2308      	movs	r3, #8
 8005b1a:	18fb      	adds	r3, r7, r3
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b26:	6a3a      	ldr	r2, [r7, #32]
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	0013      	movs	r3, r2
 8005b30:	2200      	movs	r2, #0
 8005b32:	2140      	movs	r1, #64	; 0x40
 8005b34:	f000 f82e 	bl	8005b94 <I2C_WaitOnFlagUntilTimeout>
 8005b38:	1e03      	subs	r3, r0, #0
 8005b3a:	d001      	beq.n	8005b40 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e000      	b.n	8005b42 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	0018      	movs	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b004      	add	sp, #16
 8005b48:	bdb0      	pop	{r4, r5, r7, pc}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	80002000 	.word	0x80002000

08005b50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	4013      	ands	r3, r2
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d103      	bne.n	8005b6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2201      	movs	r2, #1
 8005b76:	4013      	ands	r3, r2
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d007      	beq.n	8005b8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2101      	movs	r1, #1
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	619a      	str	r2, [r3, #24]
  }
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b002      	add	sp, #8
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	1dfb      	adds	r3, r7, #7
 8005ba2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ba4:	e021      	b.n	8005bea <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	d01e      	beq.n	8005bea <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bac:	f7fe fdde 	bl	800476c <HAL_GetTick>
 8005bb0:	0002      	movs	r2, r0
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d302      	bcc.n	8005bc2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d113      	bne.n	8005bea <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2241      	movs	r2, #65	; 0x41
 8005bd2:	2120      	movs	r1, #32
 8005bd4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2242      	movs	r2, #66	; 0x42
 8005bda:	2100      	movs	r1, #0
 8005bdc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2240      	movs	r2, #64	; 0x40
 8005be2:	2100      	movs	r1, #0
 8005be4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e00f      	b.n	8005c0a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	425a      	negs	r2, r3
 8005bfa:	4153      	adcs	r3, r2
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	001a      	movs	r2, r3
 8005c00:	1dfb      	adds	r3, r7, #7
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d0ce      	beq.n	8005ba6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	b004      	add	sp, #16
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c1e:	e02b      	b.n	8005c78 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	0018      	movs	r0, r3
 8005c28:	f000 f86e 	bl	8005d08 <I2C_IsAcknowledgeFailed>
 8005c2c:	1e03      	subs	r3, r0, #0
 8005c2e:	d001      	beq.n	8005c34 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e029      	b.n	8005c88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	3301      	adds	r3, #1
 8005c38:	d01e      	beq.n	8005c78 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c3a:	f7fe fd97 	bl	800476c <HAL_GetTick>
 8005c3e:	0002      	movs	r2, r0
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d302      	bcc.n	8005c50 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d113      	bne.n	8005c78 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c54:	2220      	movs	r2, #32
 8005c56:	431a      	orrs	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2241      	movs	r2, #65	; 0x41
 8005c60:	2120      	movs	r1, #32
 8005c62:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2242      	movs	r2, #66	; 0x42
 8005c68:	2100      	movs	r1, #0
 8005c6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2240      	movs	r2, #64	; 0x40
 8005c70:	2100      	movs	r1, #0
 8005c72:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e007      	b.n	8005c88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	4013      	ands	r3, r2
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d1cc      	bne.n	8005c20 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	0018      	movs	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	b004      	add	sp, #16
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c9c:	e028      	b.n	8005cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	f000 f82f 	bl	8005d08 <I2C_IsAcknowledgeFailed>
 8005caa:	1e03      	subs	r3, r0, #0
 8005cac:	d001      	beq.n	8005cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e026      	b.n	8005d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb2:	f7fe fd5b 	bl	800476c <HAL_GetTick>
 8005cb6:	0002      	movs	r2, r0
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d302      	bcc.n	8005cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d113      	bne.n	8005cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ccc:	2220      	movs	r2, #32
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2241      	movs	r2, #65	; 0x41
 8005cd8:	2120      	movs	r1, #32
 8005cda:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2242      	movs	r2, #66	; 0x42
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2240      	movs	r2, #64	; 0x40
 8005ce8:	2100      	movs	r1, #0
 8005cea:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e007      	b.n	8005d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d1cf      	bne.n	8005c9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	0018      	movs	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	b004      	add	sp, #16
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	2210      	movs	r2, #16
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b10      	cmp	r3, #16
 8005d20:	d164      	bne.n	8005dec <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	2380      	movs	r3, #128	; 0x80
 8005d2a:	049b      	lsls	r3, r3, #18
 8005d2c:	401a      	ands	r2, r3
 8005d2e:	2380      	movs	r3, #128	; 0x80
 8005d30:	049b      	lsls	r3, r3, #18
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d02b      	beq.n	8005d8e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2180      	movs	r1, #128	; 0x80
 8005d42:	01c9      	lsls	r1, r1, #7
 8005d44:	430a      	orrs	r2, r1
 8005d46:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d48:	e021      	b.n	8005d8e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	d01e      	beq.n	8005d8e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d50:	f7fe fd0c 	bl	800476c <HAL_GetTick>
 8005d54:	0002      	movs	r2, r0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d302      	bcc.n	8005d66 <I2C_IsAcknowledgeFailed+0x5e>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d113      	bne.n	8005d8e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2241      	movs	r2, #65	; 0x41
 8005d76:	2120      	movs	r1, #32
 8005d78:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2242      	movs	r2, #66	; 0x42
 8005d7e:	2100      	movs	r1, #0
 8005d80:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2240      	movs	r2, #64	; 0x40
 8005d86:	2100      	movs	r1, #0
 8005d88:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e02f      	b.n	8005dee <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	2220      	movs	r2, #32
 8005d96:	4013      	ands	r3, r2
 8005d98:	2b20      	cmp	r3, #32
 8005d9a:	d1d6      	bne.n	8005d4a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2210      	movs	r2, #16
 8005da2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2220      	movs	r2, #32
 8005daa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	0018      	movs	r0, r3
 8005db0:	f7ff fece 	bl	8005b50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	490e      	ldr	r1, [pc, #56]	; (8005df8 <I2C_IsAcknowledgeFailed+0xf0>)
 8005dc0:	400a      	ands	r2, r1
 8005dc2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc8:	2204      	movs	r2, #4
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2241      	movs	r2, #65	; 0x41
 8005dd4:	2120      	movs	r1, #32
 8005dd6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2242      	movs	r2, #66	; 0x42
 8005ddc:	2100      	movs	r1, #0
 8005dde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2240      	movs	r2, #64	; 0x40
 8005de4:	2100      	movs	r1, #0
 8005de6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	0018      	movs	r0, r3
 8005df0:	46bd      	mov	sp, r7
 8005df2:	b004      	add	sp, #16
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	fe00e800 	.word	0xfe00e800

08005dfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005dfc:	b590      	push	{r4, r7, lr}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	0008      	movs	r0, r1
 8005e06:	0011      	movs	r1, r2
 8005e08:	607b      	str	r3, [r7, #4]
 8005e0a:	240a      	movs	r4, #10
 8005e0c:	193b      	adds	r3, r7, r4
 8005e0e:	1c02      	adds	r2, r0, #0
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	2009      	movs	r0, #9
 8005e14:	183b      	adds	r3, r7, r0
 8005e16:	1c0a      	adds	r2, r1, #0
 8005e18:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	6a3a      	ldr	r2, [r7, #32]
 8005e22:	0d51      	lsrs	r1, r2, #21
 8005e24:	2280      	movs	r2, #128	; 0x80
 8005e26:	00d2      	lsls	r2, r2, #3
 8005e28:	400a      	ands	r2, r1
 8005e2a:	490e      	ldr	r1, [pc, #56]	; (8005e64 <I2C_TransferConfig+0x68>)
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	43d2      	mvns	r2, r2
 8005e30:	401a      	ands	r2, r3
 8005e32:	0011      	movs	r1, r2
 8005e34:	193b      	adds	r3, r7, r4
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	059b      	lsls	r3, r3, #22
 8005e3a:	0d9a      	lsrs	r2, r3, #22
 8005e3c:	183b      	adds	r3, r7, r0
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	0418      	lsls	r0, r3, #16
 8005e42:	23ff      	movs	r3, #255	; 0xff
 8005e44:	041b      	lsls	r3, r3, #16
 8005e46:	4003      	ands	r3, r0
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	431a      	orrs	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b005      	add	sp, #20
 8005e60:	bd90      	pop	{r4, r7, pc}
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	03ff63ff 	.word	0x03ff63ff

08005e68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2241      	movs	r2, #65	; 0x41
 8005e76:	5c9b      	ldrb	r3, [r3, r2]
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d138      	bne.n	8005ef0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2240      	movs	r2, #64	; 0x40
 8005e82:	5c9b      	ldrb	r3, [r3, r2]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e032      	b.n	8005ef2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2240      	movs	r2, #64	; 0x40
 8005e90:	2101      	movs	r1, #1
 8005e92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2241      	movs	r2, #65	; 0x41
 8005e98:	2124      	movs	r1, #36	; 0x24
 8005e9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	438a      	bics	r2, r1
 8005eaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4911      	ldr	r1, [pc, #68]	; (8005efc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005eb8:	400a      	ands	r2, r1
 8005eba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6819      	ldr	r1, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2241      	movs	r2, #65	; 0x41
 8005ee0:	2120      	movs	r1, #32
 8005ee2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2240      	movs	r2, #64	; 0x40
 8005ee8:	2100      	movs	r1, #0
 8005eea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	e000      	b.n	8005ef2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ef0:	2302      	movs	r3, #2
  }
}
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	b002      	add	sp, #8
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	46c0      	nop			; (mov r8, r8)
 8005efc:	ffffefff 	.word	0xffffefff

08005f00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2241      	movs	r2, #65	; 0x41
 8005f0e:	5c9b      	ldrb	r3, [r3, r2]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	d139      	bne.n	8005f8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2240      	movs	r2, #64	; 0x40
 8005f1a:	5c9b      	ldrb	r3, [r3, r2]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e033      	b.n	8005f8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2240      	movs	r2, #64	; 0x40
 8005f28:	2101      	movs	r1, #1
 8005f2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2241      	movs	r2, #65	; 0x41
 8005f30:	2124      	movs	r1, #36	; 0x24
 8005f32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2101      	movs	r1, #1
 8005f40:	438a      	bics	r2, r1
 8005f42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4a11      	ldr	r2, [pc, #68]	; (8005f94 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2101      	movs	r1, #1
 8005f72:	430a      	orrs	r2, r1
 8005f74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2241      	movs	r2, #65	; 0x41
 8005f7a:	2120      	movs	r1, #32
 8005f7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2240      	movs	r2, #64	; 0x40
 8005f82:	2100      	movs	r1, #0
 8005f84:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	e000      	b.n	8005f8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f8a:	2302      	movs	r3, #2
  }
}
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b004      	add	sp, #16
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	fffff0ff 	.word	0xfffff0ff

08005f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f98:	b5b0      	push	{r4, r5, r7, lr}
 8005f9a:	b08a      	sub	sp, #40	; 0x28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d102      	bne.n	8005fac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f000 fbbf 	bl	800672a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fac:	4bc9      	ldr	r3, [pc, #804]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	220c      	movs	r2, #12
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fb6:	4bc7      	ldr	r3, [pc, #796]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	2380      	movs	r3, #128	; 0x80
 8005fbc:	025b      	lsls	r3, r3, #9
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	4013      	ands	r3, r2
 8005fca:	d100      	bne.n	8005fce <HAL_RCC_OscConfig+0x36>
 8005fcc:	e07e      	b.n	80060cc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d007      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	2b0c      	cmp	r3, #12
 8005fd8:	d112      	bne.n	8006000 <HAL_RCC_OscConfig+0x68>
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	2380      	movs	r3, #128	; 0x80
 8005fde:	025b      	lsls	r3, r3, #9
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d10d      	bne.n	8006000 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe4:	4bbb      	ldr	r3, [pc, #748]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	2380      	movs	r3, #128	; 0x80
 8005fea:	029b      	lsls	r3, r3, #10
 8005fec:	4013      	ands	r3, r2
 8005fee:	d100      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x5a>
 8005ff0:	e06b      	b.n	80060ca <HAL_RCC_OscConfig+0x132>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d167      	bne.n	80060ca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	f000 fb95 	bl	800672a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	2380      	movs	r3, #128	; 0x80
 8006006:	025b      	lsls	r3, r3, #9
 8006008:	429a      	cmp	r2, r3
 800600a:	d107      	bne.n	800601c <HAL_RCC_OscConfig+0x84>
 800600c:	4bb1      	ldr	r3, [pc, #708]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	4bb0      	ldr	r3, [pc, #704]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006012:	2180      	movs	r1, #128	; 0x80
 8006014:	0249      	lsls	r1, r1, #9
 8006016:	430a      	orrs	r2, r1
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e027      	b.n	800606c <HAL_RCC_OscConfig+0xd4>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	23a0      	movs	r3, #160	; 0xa0
 8006022:	02db      	lsls	r3, r3, #11
 8006024:	429a      	cmp	r2, r3
 8006026:	d10e      	bne.n	8006046 <HAL_RCC_OscConfig+0xae>
 8006028:	4baa      	ldr	r3, [pc, #680]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	4ba9      	ldr	r3, [pc, #676]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 800602e:	2180      	movs	r1, #128	; 0x80
 8006030:	02c9      	lsls	r1, r1, #11
 8006032:	430a      	orrs	r2, r1
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	4ba7      	ldr	r3, [pc, #668]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4ba6      	ldr	r3, [pc, #664]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 800603c:	2180      	movs	r1, #128	; 0x80
 800603e:	0249      	lsls	r1, r1, #9
 8006040:	430a      	orrs	r2, r1
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	e012      	b.n	800606c <HAL_RCC_OscConfig+0xd4>
 8006046:	4ba3      	ldr	r3, [pc, #652]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	4ba2      	ldr	r3, [pc, #648]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 800604c:	49a2      	ldr	r1, [pc, #648]	; (80062d8 <HAL_RCC_OscConfig+0x340>)
 800604e:	400a      	ands	r2, r1
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	4ba0      	ldr	r3, [pc, #640]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	2380      	movs	r3, #128	; 0x80
 8006058:	025b      	lsls	r3, r3, #9
 800605a:	4013      	ands	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4b9c      	ldr	r3, [pc, #624]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4b9b      	ldr	r3, [pc, #620]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006066:	499d      	ldr	r1, [pc, #628]	; (80062dc <HAL_RCC_OscConfig+0x344>)
 8006068:	400a      	ands	r2, r1
 800606a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d015      	beq.n	80060a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006074:	f7fe fb7a 	bl	800476c <HAL_GetTick>
 8006078:	0003      	movs	r3, r0
 800607a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800607c:	e009      	b.n	8006092 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800607e:	f7fe fb75 	bl	800476c <HAL_GetTick>
 8006082:	0002      	movs	r2, r0
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b64      	cmp	r3, #100	; 0x64
 800608a:	d902      	bls.n	8006092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	f000 fb4c 	bl	800672a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006092:	4b90      	ldr	r3, [pc, #576]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	2380      	movs	r3, #128	; 0x80
 8006098:	029b      	lsls	r3, r3, #10
 800609a:	4013      	ands	r3, r2
 800609c:	d0ef      	beq.n	800607e <HAL_RCC_OscConfig+0xe6>
 800609e:	e015      	b.n	80060cc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a0:	f7fe fb64 	bl	800476c <HAL_GetTick>
 80060a4:	0003      	movs	r3, r0
 80060a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060a8:	e008      	b.n	80060bc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060aa:	f7fe fb5f 	bl	800476c <HAL_GetTick>
 80060ae:	0002      	movs	r2, r0
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b64      	cmp	r3, #100	; 0x64
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e336      	b.n	800672a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060bc:	4b85      	ldr	r3, [pc, #532]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	2380      	movs	r3, #128	; 0x80
 80060c2:	029b      	lsls	r3, r3, #10
 80060c4:	4013      	ands	r3, r2
 80060c6:	d1f0      	bne.n	80060aa <HAL_RCC_OscConfig+0x112>
 80060c8:	e000      	b.n	80060cc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2202      	movs	r2, #2
 80060d2:	4013      	ands	r3, r2
 80060d4:	d100      	bne.n	80060d8 <HAL_RCC_OscConfig+0x140>
 80060d6:	e099      	b.n	800620c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	2220      	movs	r2, #32
 80060e2:	4013      	ands	r3, r2
 80060e4:	d009      	beq.n	80060fa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80060e6:	4b7b      	ldr	r3, [pc, #492]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	4b7a      	ldr	r3, [pc, #488]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 80060ec:	2120      	movs	r1, #32
 80060ee:	430a      	orrs	r2, r1
 80060f0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	2220      	movs	r2, #32
 80060f6:	4393      	bics	r3, r2
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d005      	beq.n	800610c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	2b0c      	cmp	r3, #12
 8006104:	d13e      	bne.n	8006184 <HAL_RCC_OscConfig+0x1ec>
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d13b      	bne.n	8006184 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800610c:	4b71      	ldr	r3, [pc, #452]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2204      	movs	r2, #4
 8006112:	4013      	ands	r3, r2
 8006114:	d004      	beq.n	8006120 <HAL_RCC_OscConfig+0x188>
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e304      	b.n	800672a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006120:	4b6c      	ldr	r3, [pc, #432]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	4a6e      	ldr	r2, [pc, #440]	; (80062e0 <HAL_RCC_OscConfig+0x348>)
 8006126:	4013      	ands	r3, r2
 8006128:	0019      	movs	r1, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	021a      	lsls	r2, r3, #8
 8006130:	4b68      	ldr	r3, [pc, #416]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006132:	430a      	orrs	r2, r1
 8006134:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006136:	4b67      	ldr	r3, [pc, #412]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2209      	movs	r2, #9
 800613c:	4393      	bics	r3, r2
 800613e:	0019      	movs	r1, r3
 8006140:	4b64      	ldr	r3, [pc, #400]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006144:	430a      	orrs	r2, r1
 8006146:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006148:	f000 fc42 	bl	80069d0 <HAL_RCC_GetSysClockFreq>
 800614c:	0001      	movs	r1, r0
 800614e:	4b61      	ldr	r3, [pc, #388]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	091b      	lsrs	r3, r3, #4
 8006154:	220f      	movs	r2, #15
 8006156:	4013      	ands	r3, r2
 8006158:	4a62      	ldr	r2, [pc, #392]	; (80062e4 <HAL_RCC_OscConfig+0x34c>)
 800615a:	5cd3      	ldrb	r3, [r2, r3]
 800615c:	000a      	movs	r2, r1
 800615e:	40da      	lsrs	r2, r3
 8006160:	4b61      	ldr	r3, [pc, #388]	; (80062e8 <HAL_RCC_OscConfig+0x350>)
 8006162:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006164:	4b61      	ldr	r3, [pc, #388]	; (80062ec <HAL_RCC_OscConfig+0x354>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2513      	movs	r5, #19
 800616a:	197c      	adds	r4, r7, r5
 800616c:	0018      	movs	r0, r3
 800616e:	f7fe fab7 	bl	80046e0 <HAL_InitTick>
 8006172:	0003      	movs	r3, r0
 8006174:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006176:	197b      	adds	r3, r7, r5
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d046      	beq.n	800620c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800617e:	197b      	adds	r3, r7, r5
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	e2d2      	b.n	800672a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	2b00      	cmp	r3, #0
 8006188:	d027      	beq.n	80061da <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800618a:	4b52      	ldr	r3, [pc, #328]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2209      	movs	r2, #9
 8006190:	4393      	bics	r3, r2
 8006192:	0019      	movs	r1, r3
 8006194:	4b4f      	ldr	r3, [pc, #316]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006198:	430a      	orrs	r2, r1
 800619a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619c:	f7fe fae6 	bl	800476c <HAL_GetTick>
 80061a0:	0003      	movs	r3, r0
 80061a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061a6:	f7fe fae1 	bl	800476c <HAL_GetTick>
 80061aa:	0002      	movs	r2, r0
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e2b8      	b.n	800672a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061b8:	4b46      	ldr	r3, [pc, #280]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2204      	movs	r2, #4
 80061be:	4013      	ands	r3, r2
 80061c0:	d0f1      	beq.n	80061a6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061c2:	4b44      	ldr	r3, [pc, #272]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	4a46      	ldr	r2, [pc, #280]	; (80062e0 <HAL_RCC_OscConfig+0x348>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	0019      	movs	r1, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	021a      	lsls	r2, r3, #8
 80061d2:	4b40      	ldr	r3, [pc, #256]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 80061d4:	430a      	orrs	r2, r1
 80061d6:	605a      	str	r2, [r3, #4]
 80061d8:	e018      	b.n	800620c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061da:	4b3e      	ldr	r3, [pc, #248]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	4b3d      	ldr	r3, [pc, #244]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 80061e0:	2101      	movs	r1, #1
 80061e2:	438a      	bics	r2, r1
 80061e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e6:	f7fe fac1 	bl	800476c <HAL_GetTick>
 80061ea:	0003      	movs	r3, r0
 80061ec:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061f0:	f7fe fabc 	bl	800476c <HAL_GetTick>
 80061f4:	0002      	movs	r2, r0
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e293      	b.n	800672a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006202:	4b34      	ldr	r3, [pc, #208]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2204      	movs	r2, #4
 8006208:	4013      	ands	r3, r2
 800620a:	d1f1      	bne.n	80061f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2210      	movs	r2, #16
 8006212:	4013      	ands	r3, r2
 8006214:	d100      	bne.n	8006218 <HAL_RCC_OscConfig+0x280>
 8006216:	e0a2      	b.n	800635e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d140      	bne.n	80062a0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800621e:	4b2d      	ldr	r3, [pc, #180]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	2380      	movs	r3, #128	; 0x80
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4013      	ands	r3, r2
 8006228:	d005      	beq.n	8006236 <HAL_RCC_OscConfig+0x29e>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e279      	b.n	800672a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006236:	4b27      	ldr	r3, [pc, #156]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	4a2d      	ldr	r2, [pc, #180]	; (80062f0 <HAL_RCC_OscConfig+0x358>)
 800623c:	4013      	ands	r3, r2
 800623e:	0019      	movs	r1, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006244:	4b23      	ldr	r3, [pc, #140]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 8006246:	430a      	orrs	r2, r1
 8006248:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800624a:	4b22      	ldr	r3, [pc, #136]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	021b      	lsls	r3, r3, #8
 8006250:	0a19      	lsrs	r1, r3, #8
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	061a      	lsls	r2, r3, #24
 8006258:	4b1e      	ldr	r3, [pc, #120]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 800625a:	430a      	orrs	r2, r1
 800625c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	0b5b      	lsrs	r3, r3, #13
 8006264:	3301      	adds	r3, #1
 8006266:	2280      	movs	r2, #128	; 0x80
 8006268:	0212      	lsls	r2, r2, #8
 800626a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800626c:	4b19      	ldr	r3, [pc, #100]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	091b      	lsrs	r3, r3, #4
 8006272:	210f      	movs	r1, #15
 8006274:	400b      	ands	r3, r1
 8006276:	491b      	ldr	r1, [pc, #108]	; (80062e4 <HAL_RCC_OscConfig+0x34c>)
 8006278:	5ccb      	ldrb	r3, [r1, r3]
 800627a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800627c:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <HAL_RCC_OscConfig+0x350>)
 800627e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006280:	4b1a      	ldr	r3, [pc, #104]	; (80062ec <HAL_RCC_OscConfig+0x354>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2513      	movs	r5, #19
 8006286:	197c      	adds	r4, r7, r5
 8006288:	0018      	movs	r0, r3
 800628a:	f7fe fa29 	bl	80046e0 <HAL_InitTick>
 800628e:	0003      	movs	r3, r0
 8006290:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006292:	197b      	adds	r3, r7, r5
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d061      	beq.n	800635e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800629a:	197b      	adds	r3, r7, r5
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	e244      	b.n	800672a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d040      	beq.n	800632a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80062a8:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <HAL_RCC_OscConfig+0x33c>)
 80062ae:	2180      	movs	r1, #128	; 0x80
 80062b0:	0049      	lsls	r1, r1, #1
 80062b2:	430a      	orrs	r2, r1
 80062b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b6:	f7fe fa59 	bl	800476c <HAL_GetTick>
 80062ba:	0003      	movs	r3, r0
 80062bc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80062be:	e019      	b.n	80062f4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062c0:	f7fe fa54 	bl	800476c <HAL_GetTick>
 80062c4:	0002      	movs	r2, r0
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d912      	bls.n	80062f4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e22b      	b.n	800672a <HAL_RCC_OscConfig+0x792>
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	40021000 	.word	0x40021000
 80062d8:	fffeffff 	.word	0xfffeffff
 80062dc:	fffbffff 	.word	0xfffbffff
 80062e0:	ffffe0ff 	.word	0xffffe0ff
 80062e4:	0800bd3c 	.word	0x0800bd3c
 80062e8:	20000000 	.word	0x20000000
 80062ec:	20000004 	.word	0x20000004
 80062f0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80062f4:	4bca      	ldr	r3, [pc, #808]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	2380      	movs	r3, #128	; 0x80
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4013      	ands	r3, r2
 80062fe:	d0df      	beq.n	80062c0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006300:	4bc7      	ldr	r3, [pc, #796]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	4ac7      	ldr	r2, [pc, #796]	; (8006624 <HAL_RCC_OscConfig+0x68c>)
 8006306:	4013      	ands	r3, r2
 8006308:	0019      	movs	r1, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800630e:	4bc4      	ldr	r3, [pc, #784]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006310:	430a      	orrs	r2, r1
 8006312:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006314:	4bc2      	ldr	r3, [pc, #776]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	0a19      	lsrs	r1, r3, #8
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	061a      	lsls	r2, r3, #24
 8006322:	4bbf      	ldr	r3, [pc, #764]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006324:	430a      	orrs	r2, r1
 8006326:	605a      	str	r2, [r3, #4]
 8006328:	e019      	b.n	800635e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800632a:	4bbd      	ldr	r3, [pc, #756]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	4bbc      	ldr	r3, [pc, #752]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006330:	49bd      	ldr	r1, [pc, #756]	; (8006628 <HAL_RCC_OscConfig+0x690>)
 8006332:	400a      	ands	r2, r1
 8006334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006336:	f7fe fa19 	bl	800476c <HAL_GetTick>
 800633a:	0003      	movs	r3, r0
 800633c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006340:	f7fe fa14 	bl	800476c <HAL_GetTick>
 8006344:	0002      	movs	r2, r0
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e1eb      	b.n	800672a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006352:	4bb3      	ldr	r3, [pc, #716]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	2380      	movs	r3, #128	; 0x80
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4013      	ands	r3, r2
 800635c:	d1f0      	bne.n	8006340 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2208      	movs	r2, #8
 8006364:	4013      	ands	r3, r2
 8006366:	d036      	beq.n	80063d6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d019      	beq.n	80063a4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006370:	4bab      	ldr	r3, [pc, #684]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006372:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006374:	4baa      	ldr	r3, [pc, #680]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006376:	2101      	movs	r1, #1
 8006378:	430a      	orrs	r2, r1
 800637a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800637c:	f7fe f9f6 	bl	800476c <HAL_GetTick>
 8006380:	0003      	movs	r3, r0
 8006382:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006386:	f7fe f9f1 	bl	800476c <HAL_GetTick>
 800638a:	0002      	movs	r2, r0
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e1c8      	b.n	800672a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006398:	4ba1      	ldr	r3, [pc, #644]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 800639a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639c:	2202      	movs	r2, #2
 800639e:	4013      	ands	r3, r2
 80063a0:	d0f1      	beq.n	8006386 <HAL_RCC_OscConfig+0x3ee>
 80063a2:	e018      	b.n	80063d6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063a4:	4b9e      	ldr	r3, [pc, #632]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80063a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063a8:	4b9d      	ldr	r3, [pc, #628]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80063aa:	2101      	movs	r1, #1
 80063ac:	438a      	bics	r2, r1
 80063ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063b0:	f7fe f9dc 	bl	800476c <HAL_GetTick>
 80063b4:	0003      	movs	r3, r0
 80063b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063b8:	e008      	b.n	80063cc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063ba:	f7fe f9d7 	bl	800476c <HAL_GetTick>
 80063be:	0002      	movs	r2, r0
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e1ae      	b.n	800672a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063cc:	4b94      	ldr	r3, [pc, #592]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80063ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d0:	2202      	movs	r2, #2
 80063d2:	4013      	ands	r3, r2
 80063d4:	d1f1      	bne.n	80063ba <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2204      	movs	r2, #4
 80063dc:	4013      	ands	r3, r2
 80063de:	d100      	bne.n	80063e2 <HAL_RCC_OscConfig+0x44a>
 80063e0:	e0ae      	b.n	8006540 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063e2:	2023      	movs	r0, #35	; 0x23
 80063e4:	183b      	adds	r3, r7, r0
 80063e6:	2200      	movs	r2, #0
 80063e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ea:	4b8d      	ldr	r3, [pc, #564]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80063ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ee:	2380      	movs	r3, #128	; 0x80
 80063f0:	055b      	lsls	r3, r3, #21
 80063f2:	4013      	ands	r3, r2
 80063f4:	d109      	bne.n	800640a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063f6:	4b8a      	ldr	r3, [pc, #552]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80063f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063fa:	4b89      	ldr	r3, [pc, #548]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80063fc:	2180      	movs	r1, #128	; 0x80
 80063fe:	0549      	lsls	r1, r1, #21
 8006400:	430a      	orrs	r2, r1
 8006402:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006404:	183b      	adds	r3, r7, r0
 8006406:	2201      	movs	r2, #1
 8006408:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800640a:	4b88      	ldr	r3, [pc, #544]	; (800662c <HAL_RCC_OscConfig+0x694>)
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	2380      	movs	r3, #128	; 0x80
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	4013      	ands	r3, r2
 8006414:	d11a      	bne.n	800644c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006416:	4b85      	ldr	r3, [pc, #532]	; (800662c <HAL_RCC_OscConfig+0x694>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	4b84      	ldr	r3, [pc, #528]	; (800662c <HAL_RCC_OscConfig+0x694>)
 800641c:	2180      	movs	r1, #128	; 0x80
 800641e:	0049      	lsls	r1, r1, #1
 8006420:	430a      	orrs	r2, r1
 8006422:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006424:	f7fe f9a2 	bl	800476c <HAL_GetTick>
 8006428:	0003      	movs	r3, r0
 800642a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800642c:	e008      	b.n	8006440 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800642e:	f7fe f99d 	bl	800476c <HAL_GetTick>
 8006432:	0002      	movs	r2, r0
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b64      	cmp	r3, #100	; 0x64
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e174      	b.n	800672a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006440:	4b7a      	ldr	r3, [pc, #488]	; (800662c <HAL_RCC_OscConfig+0x694>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	2380      	movs	r3, #128	; 0x80
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	4013      	ands	r3, r2
 800644a:	d0f0      	beq.n	800642e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	2380      	movs	r3, #128	; 0x80
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	429a      	cmp	r2, r3
 8006456:	d107      	bne.n	8006468 <HAL_RCC_OscConfig+0x4d0>
 8006458:	4b71      	ldr	r3, [pc, #452]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 800645a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800645c:	4b70      	ldr	r3, [pc, #448]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 800645e:	2180      	movs	r1, #128	; 0x80
 8006460:	0049      	lsls	r1, r1, #1
 8006462:	430a      	orrs	r2, r1
 8006464:	651a      	str	r2, [r3, #80]	; 0x50
 8006466:	e031      	b.n	80064cc <HAL_RCC_OscConfig+0x534>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10c      	bne.n	800648a <HAL_RCC_OscConfig+0x4f2>
 8006470:	4b6b      	ldr	r3, [pc, #428]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006472:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006474:	4b6a      	ldr	r3, [pc, #424]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006476:	496c      	ldr	r1, [pc, #432]	; (8006628 <HAL_RCC_OscConfig+0x690>)
 8006478:	400a      	ands	r2, r1
 800647a:	651a      	str	r2, [r3, #80]	; 0x50
 800647c:	4b68      	ldr	r3, [pc, #416]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 800647e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006480:	4b67      	ldr	r3, [pc, #412]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006482:	496b      	ldr	r1, [pc, #428]	; (8006630 <HAL_RCC_OscConfig+0x698>)
 8006484:	400a      	ands	r2, r1
 8006486:	651a      	str	r2, [r3, #80]	; 0x50
 8006488:	e020      	b.n	80064cc <HAL_RCC_OscConfig+0x534>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	23a0      	movs	r3, #160	; 0xa0
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	429a      	cmp	r2, r3
 8006494:	d10e      	bne.n	80064b4 <HAL_RCC_OscConfig+0x51c>
 8006496:	4b62      	ldr	r3, [pc, #392]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800649a:	4b61      	ldr	r3, [pc, #388]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 800649c:	2180      	movs	r1, #128	; 0x80
 800649e:	00c9      	lsls	r1, r1, #3
 80064a0:	430a      	orrs	r2, r1
 80064a2:	651a      	str	r2, [r3, #80]	; 0x50
 80064a4:	4b5e      	ldr	r3, [pc, #376]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80064a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064a8:	4b5d      	ldr	r3, [pc, #372]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80064aa:	2180      	movs	r1, #128	; 0x80
 80064ac:	0049      	lsls	r1, r1, #1
 80064ae:	430a      	orrs	r2, r1
 80064b0:	651a      	str	r2, [r3, #80]	; 0x50
 80064b2:	e00b      	b.n	80064cc <HAL_RCC_OscConfig+0x534>
 80064b4:	4b5a      	ldr	r3, [pc, #360]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80064b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064b8:	4b59      	ldr	r3, [pc, #356]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80064ba:	495b      	ldr	r1, [pc, #364]	; (8006628 <HAL_RCC_OscConfig+0x690>)
 80064bc:	400a      	ands	r2, r1
 80064be:	651a      	str	r2, [r3, #80]	; 0x50
 80064c0:	4b57      	ldr	r3, [pc, #348]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80064c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064c4:	4b56      	ldr	r3, [pc, #344]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80064c6:	495a      	ldr	r1, [pc, #360]	; (8006630 <HAL_RCC_OscConfig+0x698>)
 80064c8:	400a      	ands	r2, r1
 80064ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d015      	beq.n	8006500 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064d4:	f7fe f94a 	bl	800476c <HAL_GetTick>
 80064d8:	0003      	movs	r3, r0
 80064da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064dc:	e009      	b.n	80064f2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064de:	f7fe f945 	bl	800476c <HAL_GetTick>
 80064e2:	0002      	movs	r2, r0
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	4a52      	ldr	r2, [pc, #328]	; (8006634 <HAL_RCC_OscConfig+0x69c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e11b      	b.n	800672a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064f2:	4b4b      	ldr	r3, [pc, #300]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80064f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064f6:	2380      	movs	r3, #128	; 0x80
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4013      	ands	r3, r2
 80064fc:	d0ef      	beq.n	80064de <HAL_RCC_OscConfig+0x546>
 80064fe:	e014      	b.n	800652a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006500:	f7fe f934 	bl	800476c <HAL_GetTick>
 8006504:	0003      	movs	r3, r0
 8006506:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006508:	e009      	b.n	800651e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800650a:	f7fe f92f 	bl	800476c <HAL_GetTick>
 800650e:	0002      	movs	r2, r0
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	4a47      	ldr	r2, [pc, #284]	; (8006634 <HAL_RCC_OscConfig+0x69c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e105      	b.n	800672a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800651e:	4b40      	ldr	r3, [pc, #256]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006520:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006522:	2380      	movs	r3, #128	; 0x80
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4013      	ands	r3, r2
 8006528:	d1ef      	bne.n	800650a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800652a:	2323      	movs	r3, #35	; 0x23
 800652c:	18fb      	adds	r3, r7, r3
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d105      	bne.n	8006540 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006534:	4b3a      	ldr	r3, [pc, #232]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006538:	4b39      	ldr	r3, [pc, #228]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 800653a:	493f      	ldr	r1, [pc, #252]	; (8006638 <HAL_RCC_OscConfig+0x6a0>)
 800653c:	400a      	ands	r2, r1
 800653e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2220      	movs	r2, #32
 8006546:	4013      	ands	r3, r2
 8006548:	d049      	beq.n	80065de <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d026      	beq.n	80065a0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006552:	4b33      	ldr	r3, [pc, #204]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	4b32      	ldr	r3, [pc, #200]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006558:	2101      	movs	r1, #1
 800655a:	430a      	orrs	r2, r1
 800655c:	609a      	str	r2, [r3, #8]
 800655e:	4b30      	ldr	r3, [pc, #192]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006562:	4b2f      	ldr	r3, [pc, #188]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006564:	2101      	movs	r1, #1
 8006566:	430a      	orrs	r2, r1
 8006568:	635a      	str	r2, [r3, #52]	; 0x34
 800656a:	4b34      	ldr	r3, [pc, #208]	; (800663c <HAL_RCC_OscConfig+0x6a4>)
 800656c:	6a1a      	ldr	r2, [r3, #32]
 800656e:	4b33      	ldr	r3, [pc, #204]	; (800663c <HAL_RCC_OscConfig+0x6a4>)
 8006570:	2180      	movs	r1, #128	; 0x80
 8006572:	0189      	lsls	r1, r1, #6
 8006574:	430a      	orrs	r2, r1
 8006576:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006578:	f7fe f8f8 	bl	800476c <HAL_GetTick>
 800657c:	0003      	movs	r3, r0
 800657e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006580:	e008      	b.n	8006594 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006582:	f7fe f8f3 	bl	800476c <HAL_GetTick>
 8006586:	0002      	movs	r2, r0
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d901      	bls.n	8006594 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e0ca      	b.n	800672a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006594:	4b22      	ldr	r3, [pc, #136]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	2202      	movs	r2, #2
 800659a:	4013      	ands	r3, r2
 800659c:	d0f1      	beq.n	8006582 <HAL_RCC_OscConfig+0x5ea>
 800659e:	e01e      	b.n	80065de <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80065a0:	4b1f      	ldr	r3, [pc, #124]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	4b1e      	ldr	r3, [pc, #120]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80065a6:	2101      	movs	r1, #1
 80065a8:	438a      	bics	r2, r1
 80065aa:	609a      	str	r2, [r3, #8]
 80065ac:	4b23      	ldr	r3, [pc, #140]	; (800663c <HAL_RCC_OscConfig+0x6a4>)
 80065ae:	6a1a      	ldr	r2, [r3, #32]
 80065b0:	4b22      	ldr	r3, [pc, #136]	; (800663c <HAL_RCC_OscConfig+0x6a4>)
 80065b2:	4923      	ldr	r1, [pc, #140]	; (8006640 <HAL_RCC_OscConfig+0x6a8>)
 80065b4:	400a      	ands	r2, r1
 80065b6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b8:	f7fe f8d8 	bl	800476c <HAL_GetTick>
 80065bc:	0003      	movs	r3, r0
 80065be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065c0:	e008      	b.n	80065d4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065c2:	f7fe f8d3 	bl	800476c <HAL_GetTick>
 80065c6:	0002      	movs	r2, r0
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d901      	bls.n	80065d4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e0aa      	b.n	800672a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065d4:	4b12      	ldr	r3, [pc, #72]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	2202      	movs	r2, #2
 80065da:	4013      	ands	r3, r2
 80065dc:	d1f1      	bne.n	80065c2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d100      	bne.n	80065e8 <HAL_RCC_OscConfig+0x650>
 80065e6:	e09f      	b.n	8006728 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	2b0c      	cmp	r3, #12
 80065ec:	d100      	bne.n	80065f0 <HAL_RCC_OscConfig+0x658>
 80065ee:	e078      	b.n	80066e2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d159      	bne.n	80066ac <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065f8:	4b09      	ldr	r3, [pc, #36]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	4b08      	ldr	r3, [pc, #32]	; (8006620 <HAL_RCC_OscConfig+0x688>)
 80065fe:	4911      	ldr	r1, [pc, #68]	; (8006644 <HAL_RCC_OscConfig+0x6ac>)
 8006600:	400a      	ands	r2, r1
 8006602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006604:	f7fe f8b2 	bl	800476c <HAL_GetTick>
 8006608:	0003      	movs	r3, r0
 800660a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800660c:	e01c      	b.n	8006648 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800660e:	f7fe f8ad 	bl	800476c <HAL_GetTick>
 8006612:	0002      	movs	r2, r0
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d915      	bls.n	8006648 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e084      	b.n	800672a <HAL_RCC_OscConfig+0x792>
 8006620:	40021000 	.word	0x40021000
 8006624:	ffff1fff 	.word	0xffff1fff
 8006628:	fffffeff 	.word	0xfffffeff
 800662c:	40007000 	.word	0x40007000
 8006630:	fffffbff 	.word	0xfffffbff
 8006634:	00001388 	.word	0x00001388
 8006638:	efffffff 	.word	0xefffffff
 800663c:	40010000 	.word	0x40010000
 8006640:	ffffdfff 	.word	0xffffdfff
 8006644:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006648:	4b3a      	ldr	r3, [pc, #232]	; (8006734 <HAL_RCC_OscConfig+0x79c>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	2380      	movs	r3, #128	; 0x80
 800664e:	049b      	lsls	r3, r3, #18
 8006650:	4013      	ands	r3, r2
 8006652:	d1dc      	bne.n	800660e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006654:	4b37      	ldr	r3, [pc, #220]	; (8006734 <HAL_RCC_OscConfig+0x79c>)
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	4a37      	ldr	r2, [pc, #220]	; (8006738 <HAL_RCC_OscConfig+0x7a0>)
 800665a:	4013      	ands	r3, r2
 800665c:	0019      	movs	r1, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666c:	431a      	orrs	r2, r3
 800666e:	4b31      	ldr	r3, [pc, #196]	; (8006734 <HAL_RCC_OscConfig+0x79c>)
 8006670:	430a      	orrs	r2, r1
 8006672:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006674:	4b2f      	ldr	r3, [pc, #188]	; (8006734 <HAL_RCC_OscConfig+0x79c>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	4b2e      	ldr	r3, [pc, #184]	; (8006734 <HAL_RCC_OscConfig+0x79c>)
 800667a:	2180      	movs	r1, #128	; 0x80
 800667c:	0449      	lsls	r1, r1, #17
 800667e:	430a      	orrs	r2, r1
 8006680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006682:	f7fe f873 	bl	800476c <HAL_GetTick>
 8006686:	0003      	movs	r3, r0
 8006688:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800668a:	e008      	b.n	800669e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800668c:	f7fe f86e 	bl	800476c <HAL_GetTick>
 8006690:	0002      	movs	r2, r0
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d901      	bls.n	800669e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e045      	b.n	800672a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800669e:	4b25      	ldr	r3, [pc, #148]	; (8006734 <HAL_RCC_OscConfig+0x79c>)
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	2380      	movs	r3, #128	; 0x80
 80066a4:	049b      	lsls	r3, r3, #18
 80066a6:	4013      	ands	r3, r2
 80066a8:	d0f0      	beq.n	800668c <HAL_RCC_OscConfig+0x6f4>
 80066aa:	e03d      	b.n	8006728 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ac:	4b21      	ldr	r3, [pc, #132]	; (8006734 <HAL_RCC_OscConfig+0x79c>)
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	4b20      	ldr	r3, [pc, #128]	; (8006734 <HAL_RCC_OscConfig+0x79c>)
 80066b2:	4922      	ldr	r1, [pc, #136]	; (800673c <HAL_RCC_OscConfig+0x7a4>)
 80066b4:	400a      	ands	r2, r1
 80066b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b8:	f7fe f858 	bl	800476c <HAL_GetTick>
 80066bc:	0003      	movs	r3, r0
 80066be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80066c0:	e008      	b.n	80066d4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066c2:	f7fe f853 	bl	800476c <HAL_GetTick>
 80066c6:	0002      	movs	r2, r0
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e02a      	b.n	800672a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80066d4:	4b17      	ldr	r3, [pc, #92]	; (8006734 <HAL_RCC_OscConfig+0x79c>)
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	049b      	lsls	r3, r3, #18
 80066dc:	4013      	ands	r3, r2
 80066de:	d1f0      	bne.n	80066c2 <HAL_RCC_OscConfig+0x72a>
 80066e0:	e022      	b.n	8006728 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d101      	bne.n	80066ee <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e01d      	b.n	800672a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80066ee:	4b11      	ldr	r3, [pc, #68]	; (8006734 <HAL_RCC_OscConfig+0x79c>)
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	2380      	movs	r3, #128	; 0x80
 80066f8:	025b      	lsls	r3, r3, #9
 80066fa:	401a      	ands	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006700:	429a      	cmp	r2, r3
 8006702:	d10f      	bne.n	8006724 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	23f0      	movs	r3, #240	; 0xf0
 8006708:	039b      	lsls	r3, r3, #14
 800670a:	401a      	ands	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006710:	429a      	cmp	r2, r3
 8006712:	d107      	bne.n	8006724 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	23c0      	movs	r3, #192	; 0xc0
 8006718:	041b      	lsls	r3, r3, #16
 800671a:	401a      	ands	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006720:	429a      	cmp	r2, r3
 8006722:	d001      	beq.n	8006728 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	0018      	movs	r0, r3
 800672c:	46bd      	mov	sp, r7
 800672e:	b00a      	add	sp, #40	; 0x28
 8006730:	bdb0      	pop	{r4, r5, r7, pc}
 8006732:	46c0      	nop			; (mov r8, r8)
 8006734:	40021000 	.word	0x40021000
 8006738:	ff02ffff 	.word	0xff02ffff
 800673c:	feffffff 	.word	0xfeffffff

08006740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006740:	b5b0      	push	{r4, r5, r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e128      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006754:	4b96      	ldr	r3, [pc, #600]	; (80069b0 <HAL_RCC_ClockConfig+0x270>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2201      	movs	r2, #1
 800675a:	4013      	ands	r3, r2
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d91e      	bls.n	80067a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006762:	4b93      	ldr	r3, [pc, #588]	; (80069b0 <HAL_RCC_ClockConfig+0x270>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2201      	movs	r2, #1
 8006768:	4393      	bics	r3, r2
 800676a:	0019      	movs	r1, r3
 800676c:	4b90      	ldr	r3, [pc, #576]	; (80069b0 <HAL_RCC_ClockConfig+0x270>)
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006774:	f7fd fffa 	bl	800476c <HAL_GetTick>
 8006778:	0003      	movs	r3, r0
 800677a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800677c:	e009      	b.n	8006792 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800677e:	f7fd fff5 	bl	800476c <HAL_GetTick>
 8006782:	0002      	movs	r2, r0
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	4a8a      	ldr	r2, [pc, #552]	; (80069b4 <HAL_RCC_ClockConfig+0x274>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e109      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006792:	4b87      	ldr	r3, [pc, #540]	; (80069b0 <HAL_RCC_ClockConfig+0x270>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2201      	movs	r2, #1
 8006798:	4013      	ands	r3, r2
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	429a      	cmp	r2, r3
 800679e:	d1ee      	bne.n	800677e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2202      	movs	r2, #2
 80067a6:	4013      	ands	r3, r2
 80067a8:	d009      	beq.n	80067be <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067aa:	4b83      	ldr	r3, [pc, #524]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	22f0      	movs	r2, #240	; 0xf0
 80067b0:	4393      	bics	r3, r2
 80067b2:	0019      	movs	r1, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	4b7f      	ldr	r3, [pc, #508]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 80067ba:	430a      	orrs	r2, r1
 80067bc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2201      	movs	r2, #1
 80067c4:	4013      	ands	r3, r2
 80067c6:	d100      	bne.n	80067ca <HAL_RCC_ClockConfig+0x8a>
 80067c8:	e089      	b.n	80068de <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d107      	bne.n	80067e2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067d2:	4b79      	ldr	r3, [pc, #484]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	2380      	movs	r3, #128	; 0x80
 80067d8:	029b      	lsls	r3, r3, #10
 80067da:	4013      	ands	r3, r2
 80067dc:	d120      	bne.n	8006820 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e0e1      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d107      	bne.n	80067fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067ea:	4b73      	ldr	r3, [pc, #460]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	2380      	movs	r3, #128	; 0x80
 80067f0:	049b      	lsls	r3, r3, #18
 80067f2:	4013      	ands	r3, r2
 80067f4:	d114      	bne.n	8006820 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e0d5      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d106      	bne.n	8006810 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006802:	4b6d      	ldr	r3, [pc, #436]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2204      	movs	r2, #4
 8006808:	4013      	ands	r3, r2
 800680a:	d109      	bne.n	8006820 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e0ca      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006810:	4b69      	ldr	r3, [pc, #420]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	2380      	movs	r3, #128	; 0x80
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4013      	ands	r3, r2
 800681a:	d101      	bne.n	8006820 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e0c2      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006820:	4b65      	ldr	r3, [pc, #404]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	2203      	movs	r2, #3
 8006826:	4393      	bics	r3, r2
 8006828:	0019      	movs	r1, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	4b62      	ldr	r3, [pc, #392]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006830:	430a      	orrs	r2, r1
 8006832:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006834:	f7fd ff9a 	bl	800476c <HAL_GetTick>
 8006838:	0003      	movs	r3, r0
 800683a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b02      	cmp	r3, #2
 8006842:	d111      	bne.n	8006868 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006844:	e009      	b.n	800685a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006846:	f7fd ff91 	bl	800476c <HAL_GetTick>
 800684a:	0002      	movs	r2, r0
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	4a58      	ldr	r2, [pc, #352]	; (80069b4 <HAL_RCC_ClockConfig+0x274>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d901      	bls.n	800685a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e0a5      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800685a:	4b57      	ldr	r3, [pc, #348]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	220c      	movs	r2, #12
 8006860:	4013      	ands	r3, r2
 8006862:	2b08      	cmp	r3, #8
 8006864:	d1ef      	bne.n	8006846 <HAL_RCC_ClockConfig+0x106>
 8006866:	e03a      	b.n	80068de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2b03      	cmp	r3, #3
 800686e:	d111      	bne.n	8006894 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006870:	e009      	b.n	8006886 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006872:	f7fd ff7b 	bl	800476c <HAL_GetTick>
 8006876:	0002      	movs	r2, r0
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	4a4d      	ldr	r2, [pc, #308]	; (80069b4 <HAL_RCC_ClockConfig+0x274>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e08f      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006886:	4b4c      	ldr	r3, [pc, #304]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	220c      	movs	r2, #12
 800688c:	4013      	ands	r3, r2
 800688e:	2b0c      	cmp	r3, #12
 8006890:	d1ef      	bne.n	8006872 <HAL_RCC_ClockConfig+0x132>
 8006892:	e024      	b.n	80068de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d11b      	bne.n	80068d4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800689c:	e009      	b.n	80068b2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800689e:	f7fd ff65 	bl	800476c <HAL_GetTick>
 80068a2:	0002      	movs	r2, r0
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	4a42      	ldr	r2, [pc, #264]	; (80069b4 <HAL_RCC_ClockConfig+0x274>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e079      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80068b2:	4b41      	ldr	r3, [pc, #260]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	220c      	movs	r2, #12
 80068b8:	4013      	ands	r3, r2
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d1ef      	bne.n	800689e <HAL_RCC_ClockConfig+0x15e>
 80068be:	e00e      	b.n	80068de <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068c0:	f7fd ff54 	bl	800476c <HAL_GetTick>
 80068c4:	0002      	movs	r2, r0
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	4a3a      	ldr	r2, [pc, #232]	; (80069b4 <HAL_RCC_ClockConfig+0x274>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e068      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80068d4:	4b38      	ldr	r3, [pc, #224]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	220c      	movs	r2, #12
 80068da:	4013      	ands	r3, r2
 80068dc:	d1f0      	bne.n	80068c0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068de:	4b34      	ldr	r3, [pc, #208]	; (80069b0 <HAL_RCC_ClockConfig+0x270>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2201      	movs	r2, #1
 80068e4:	4013      	ands	r3, r2
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d21e      	bcs.n	800692a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ec:	4b30      	ldr	r3, [pc, #192]	; (80069b0 <HAL_RCC_ClockConfig+0x270>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2201      	movs	r2, #1
 80068f2:	4393      	bics	r3, r2
 80068f4:	0019      	movs	r1, r3
 80068f6:	4b2e      	ldr	r3, [pc, #184]	; (80069b0 <HAL_RCC_ClockConfig+0x270>)
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80068fe:	f7fd ff35 	bl	800476c <HAL_GetTick>
 8006902:	0003      	movs	r3, r0
 8006904:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006906:	e009      	b.n	800691c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006908:	f7fd ff30 	bl	800476c <HAL_GetTick>
 800690c:	0002      	movs	r2, r0
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	4a28      	ldr	r2, [pc, #160]	; (80069b4 <HAL_RCC_ClockConfig+0x274>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d901      	bls.n	800691c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e044      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800691c:	4b24      	ldr	r3, [pc, #144]	; (80069b0 <HAL_RCC_ClockConfig+0x270>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2201      	movs	r2, #1
 8006922:	4013      	ands	r3, r2
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d1ee      	bne.n	8006908 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2204      	movs	r2, #4
 8006930:	4013      	ands	r3, r2
 8006932:	d009      	beq.n	8006948 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006934:	4b20      	ldr	r3, [pc, #128]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	4a20      	ldr	r2, [pc, #128]	; (80069bc <HAL_RCC_ClockConfig+0x27c>)
 800693a:	4013      	ands	r3, r2
 800693c:	0019      	movs	r1, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	4b1d      	ldr	r3, [pc, #116]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006944:	430a      	orrs	r2, r1
 8006946:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2208      	movs	r2, #8
 800694e:	4013      	ands	r3, r2
 8006950:	d00a      	beq.n	8006968 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006952:	4b19      	ldr	r3, [pc, #100]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	4a1a      	ldr	r2, [pc, #104]	; (80069c0 <HAL_RCC_ClockConfig+0x280>)
 8006958:	4013      	ands	r3, r2
 800695a:	0019      	movs	r1, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	00da      	lsls	r2, r3, #3
 8006962:	4b15      	ldr	r3, [pc, #84]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006964:	430a      	orrs	r2, r1
 8006966:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006968:	f000 f832 	bl	80069d0 <HAL_RCC_GetSysClockFreq>
 800696c:	0001      	movs	r1, r0
 800696e:	4b12      	ldr	r3, [pc, #72]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	091b      	lsrs	r3, r3, #4
 8006974:	220f      	movs	r2, #15
 8006976:	4013      	ands	r3, r2
 8006978:	4a12      	ldr	r2, [pc, #72]	; (80069c4 <HAL_RCC_ClockConfig+0x284>)
 800697a:	5cd3      	ldrb	r3, [r2, r3]
 800697c:	000a      	movs	r2, r1
 800697e:	40da      	lsrs	r2, r3
 8006980:	4b11      	ldr	r3, [pc, #68]	; (80069c8 <HAL_RCC_ClockConfig+0x288>)
 8006982:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006984:	4b11      	ldr	r3, [pc, #68]	; (80069cc <HAL_RCC_ClockConfig+0x28c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	250b      	movs	r5, #11
 800698a:	197c      	adds	r4, r7, r5
 800698c:	0018      	movs	r0, r3
 800698e:	f7fd fea7 	bl	80046e0 <HAL_InitTick>
 8006992:	0003      	movs	r3, r0
 8006994:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006996:	197b      	adds	r3, r7, r5
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800699e:	197b      	adds	r3, r7, r5
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	e000      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	0018      	movs	r0, r3
 80069a8:	46bd      	mov	sp, r7
 80069aa:	b004      	add	sp, #16
 80069ac:	bdb0      	pop	{r4, r5, r7, pc}
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	40022000 	.word	0x40022000
 80069b4:	00001388 	.word	0x00001388
 80069b8:	40021000 	.word	0x40021000
 80069bc:	fffff8ff 	.word	0xfffff8ff
 80069c0:	ffffc7ff 	.word	0xffffc7ff
 80069c4:	0800bd3c 	.word	0x0800bd3c
 80069c8:	20000000 	.word	0x20000000
 80069cc:	20000004 	.word	0x20000004

080069d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069d0:	b5b0      	push	{r4, r5, r7, lr}
 80069d2:	b08e      	sub	sp, #56	; 0x38
 80069d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80069d6:	4b4c      	ldr	r3, [pc, #304]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x138>)
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80069dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069de:	230c      	movs	r3, #12
 80069e0:	4013      	ands	r3, r2
 80069e2:	2b0c      	cmp	r3, #12
 80069e4:	d014      	beq.n	8006a10 <HAL_RCC_GetSysClockFreq+0x40>
 80069e6:	d900      	bls.n	80069ea <HAL_RCC_GetSysClockFreq+0x1a>
 80069e8:	e07b      	b.n	8006ae2 <HAL_RCC_GetSysClockFreq+0x112>
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	d002      	beq.n	80069f4 <HAL_RCC_GetSysClockFreq+0x24>
 80069ee:	2b08      	cmp	r3, #8
 80069f0:	d00b      	beq.n	8006a0a <HAL_RCC_GetSysClockFreq+0x3a>
 80069f2:	e076      	b.n	8006ae2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80069f4:	4b44      	ldr	r3, [pc, #272]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x138>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2210      	movs	r2, #16
 80069fa:	4013      	ands	r3, r2
 80069fc:	d002      	beq.n	8006a04 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80069fe:	4b43      	ldr	r3, [pc, #268]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x13c>)
 8006a00:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006a02:	e07c      	b.n	8006afe <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006a04:	4b42      	ldr	r3, [pc, #264]	; (8006b10 <HAL_RCC_GetSysClockFreq+0x140>)
 8006a06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006a08:	e079      	b.n	8006afe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a0a:	4b42      	ldr	r3, [pc, #264]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x144>)
 8006a0c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006a0e:	e076      	b.n	8006afe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a12:	0c9a      	lsrs	r2, r3, #18
 8006a14:	230f      	movs	r3, #15
 8006a16:	401a      	ands	r2, r3
 8006a18:	4b3f      	ldr	r3, [pc, #252]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x148>)
 8006a1a:	5c9b      	ldrb	r3, [r3, r2]
 8006a1c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a20:	0d9a      	lsrs	r2, r3, #22
 8006a22:	2303      	movs	r3, #3
 8006a24:	4013      	ands	r3, r2
 8006a26:	3301      	adds	r3, #1
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a2a:	4b37      	ldr	r3, [pc, #220]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x138>)
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	2380      	movs	r3, #128	; 0x80
 8006a30:	025b      	lsls	r3, r3, #9
 8006a32:	4013      	ands	r3, r2
 8006a34:	d01a      	beq.n	8006a6c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	4a35      	ldr	r2, [pc, #212]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x144>)
 8006a40:	2300      	movs	r3, #0
 8006a42:	69b8      	ldr	r0, [r7, #24]
 8006a44:	69f9      	ldr	r1, [r7, #28]
 8006a46:	f7f9 fd4f 	bl	80004e8 <__aeabi_lmul>
 8006a4a:	0002      	movs	r2, r0
 8006a4c:	000b      	movs	r3, r1
 8006a4e:	0010      	movs	r0, r2
 8006a50:	0019      	movs	r1, r3
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f7f9 fd23 	bl	80004a8 <__aeabi_uldivmod>
 8006a62:	0002      	movs	r2, r0
 8006a64:	000b      	movs	r3, r1
 8006a66:	0013      	movs	r3, r2
 8006a68:	637b      	str	r3, [r7, #52]	; 0x34
 8006a6a:	e037      	b.n	8006adc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006a6c:	4b26      	ldr	r3, [pc, #152]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x138>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2210      	movs	r2, #16
 8006a72:	4013      	ands	r3, r2
 8006a74:	d01a      	beq.n	8006aac <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	60bb      	str	r3, [r7, #8]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	4a23      	ldr	r2, [pc, #140]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x13c>)
 8006a80:	2300      	movs	r3, #0
 8006a82:	68b8      	ldr	r0, [r7, #8]
 8006a84:	68f9      	ldr	r1, [r7, #12]
 8006a86:	f7f9 fd2f 	bl	80004e8 <__aeabi_lmul>
 8006a8a:	0002      	movs	r2, r0
 8006a8c:	000b      	movs	r3, r1
 8006a8e:	0010      	movs	r0, r2
 8006a90:	0019      	movs	r1, r3
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	603b      	str	r3, [r7, #0]
 8006a96:	2300      	movs	r3, #0
 8006a98:	607b      	str	r3, [r7, #4]
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f7f9 fd03 	bl	80004a8 <__aeabi_uldivmod>
 8006aa2:	0002      	movs	r2, r0
 8006aa4:	000b      	movs	r3, r1
 8006aa6:	0013      	movs	r3, r2
 8006aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aaa:	e017      	b.n	8006adc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aae:	0018      	movs	r0, r3
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	0019      	movs	r1, r3
 8006ab4:	4a16      	ldr	r2, [pc, #88]	; (8006b10 <HAL_RCC_GetSysClockFreq+0x140>)
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f7f9 fd16 	bl	80004e8 <__aeabi_lmul>
 8006abc:	0002      	movs	r2, r0
 8006abe:	000b      	movs	r3, r1
 8006ac0:	0010      	movs	r0, r2
 8006ac2:	0019      	movs	r1, r3
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	001c      	movs	r4, r3
 8006ac8:	2300      	movs	r3, #0
 8006aca:	001d      	movs	r5, r3
 8006acc:	0022      	movs	r2, r4
 8006ace:	002b      	movs	r3, r5
 8006ad0:	f7f9 fcea 	bl	80004a8 <__aeabi_uldivmod>
 8006ad4:	0002      	movs	r2, r0
 8006ad6:	000b      	movs	r3, r1
 8006ad8:	0013      	movs	r3, r2
 8006ada:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ade:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006ae0:	e00d      	b.n	8006afe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006ae2:	4b09      	ldr	r3, [pc, #36]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x138>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	0b5b      	lsrs	r3, r3, #13
 8006ae8:	2207      	movs	r2, #7
 8006aea:	4013      	ands	r3, r2
 8006aec:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	3301      	adds	r3, #1
 8006af2:	2280      	movs	r2, #128	; 0x80
 8006af4:	0212      	lsls	r2, r2, #8
 8006af6:	409a      	lsls	r2, r3
 8006af8:	0013      	movs	r3, r2
 8006afa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006afc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006b00:	0018      	movs	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	b00e      	add	sp, #56	; 0x38
 8006b06:	bdb0      	pop	{r4, r5, r7, pc}
 8006b08:	40021000 	.word	0x40021000
 8006b0c:	003d0900 	.word	0x003d0900
 8006b10:	00f42400 	.word	0x00f42400
 8006b14:	007a1200 	.word	0x007a1200
 8006b18:	0800bd54 	.word	0x0800bd54

08006b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b20:	4b02      	ldr	r3, [pc, #8]	; (8006b2c <HAL_RCC_GetHCLKFreq+0x10>)
 8006b22:	681b      	ldr	r3, [r3, #0]
}
 8006b24:	0018      	movs	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	46c0      	nop			; (mov r8, r8)
 8006b2c:	20000000 	.word	0x20000000

08006b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b34:	f7ff fff2 	bl	8006b1c <HAL_RCC_GetHCLKFreq>
 8006b38:	0001      	movs	r1, r0
 8006b3a:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	0a1b      	lsrs	r3, r3, #8
 8006b40:	2207      	movs	r2, #7
 8006b42:	4013      	ands	r3, r2
 8006b44:	4a04      	ldr	r2, [pc, #16]	; (8006b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b46:	5cd3      	ldrb	r3, [r2, r3]
 8006b48:	40d9      	lsrs	r1, r3
 8006b4a:	000b      	movs	r3, r1
}
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	46c0      	nop			; (mov r8, r8)
 8006b54:	40021000 	.word	0x40021000
 8006b58:	0800bd4c 	.word	0x0800bd4c

08006b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b60:	f7ff ffdc 	bl	8006b1c <HAL_RCC_GetHCLKFreq>
 8006b64:	0001      	movs	r1, r0
 8006b66:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	0adb      	lsrs	r3, r3, #11
 8006b6c:	2207      	movs	r2, #7
 8006b6e:	4013      	ands	r3, r2
 8006b70:	4a04      	ldr	r2, [pc, #16]	; (8006b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b72:	5cd3      	ldrb	r3, [r2, r3]
 8006b74:	40d9      	lsrs	r1, r3
 8006b76:	000b      	movs	r3, r1
}
 8006b78:	0018      	movs	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	46c0      	nop			; (mov r8, r8)
 8006b80:	40021000 	.word	0x40021000
 8006b84:	0800bd4c 	.word	0x0800bd4c

08006b88 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006b90:	2017      	movs	r0, #23
 8006b92:	183b      	adds	r3, r7, r0
 8006b94:	2200      	movs	r2, #0
 8006b96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	d100      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8006ba2:	e0c2      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ba4:	4b98      	ldr	r3, [pc, #608]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ba8:	2380      	movs	r3, #128	; 0x80
 8006baa:	055b      	lsls	r3, r3, #21
 8006bac:	4013      	ands	r3, r2
 8006bae:	d109      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bb0:	4b95      	ldr	r3, [pc, #596]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bb4:	4b94      	ldr	r3, [pc, #592]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bb6:	2180      	movs	r1, #128	; 0x80
 8006bb8:	0549      	lsls	r1, r1, #21
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006bbe:	183b      	adds	r3, r7, r0
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc4:	4b91      	ldr	r3, [pc, #580]	; (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	2380      	movs	r3, #128	; 0x80
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	4013      	ands	r3, r2
 8006bce:	d11a      	bne.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bd0:	4b8e      	ldr	r3, [pc, #568]	; (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	4b8d      	ldr	r3, [pc, #564]	; (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006bd6:	2180      	movs	r1, #128	; 0x80
 8006bd8:	0049      	lsls	r1, r1, #1
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bde:	f7fd fdc5 	bl	800476c <HAL_GetTick>
 8006be2:	0003      	movs	r3, r0
 8006be4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006be6:	e008      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006be8:	f7fd fdc0 	bl	800476c <HAL_GetTick>
 8006bec:	0002      	movs	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b64      	cmp	r3, #100	; 0x64
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e102      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bfa:	4b84      	ldr	r3, [pc, #528]	; (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	2380      	movs	r3, #128	; 0x80
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	4013      	ands	r3, r2
 8006c04:	d0f0      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006c06:	4b80      	ldr	r3, [pc, #512]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	23c0      	movs	r3, #192	; 0xc0
 8006c0c:	039b      	lsls	r3, r3, #14
 8006c0e:	4013      	ands	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	23c0      	movs	r3, #192	; 0xc0
 8006c18:	039b      	lsls	r3, r3, #14
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d013      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	23c0      	movs	r3, #192	; 0xc0
 8006c28:	029b      	lsls	r3, r3, #10
 8006c2a:	401a      	ands	r2, r3
 8006c2c:	23c0      	movs	r3, #192	; 0xc0
 8006c2e:	029b      	lsls	r3, r3, #10
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d10a      	bne.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c34:	4b74      	ldr	r3, [pc, #464]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	2380      	movs	r3, #128	; 0x80
 8006c3a:	029b      	lsls	r3, r3, #10
 8006c3c:	401a      	ands	r2, r3
 8006c3e:	2380      	movs	r3, #128	; 0x80
 8006c40:	029b      	lsls	r3, r3, #10
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d101      	bne.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e0da      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006c4a:	4b6f      	ldr	r3, [pc, #444]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c4e:	23c0      	movs	r3, #192	; 0xc0
 8006c50:	029b      	lsls	r3, r3, #10
 8006c52:	4013      	ands	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d03b      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	23c0      	movs	r3, #192	; 0xc0
 8006c62:	029b      	lsls	r3, r3, #10
 8006c64:	4013      	ands	r3, r2
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d033      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2220      	movs	r2, #32
 8006c72:	4013      	ands	r3, r2
 8006c74:	d02e      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006c76:	4b64      	ldr	r3, [pc, #400]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7a:	4a65      	ldr	r2, [pc, #404]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c80:	4b61      	ldr	r3, [pc, #388]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c84:	4b60      	ldr	r3, [pc, #384]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c86:	2180      	movs	r1, #128	; 0x80
 8006c88:	0309      	lsls	r1, r1, #12
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c8e:	4b5e      	ldr	r3, [pc, #376]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c92:	4b5d      	ldr	r3, [pc, #372]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c94:	495f      	ldr	r1, [pc, #380]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006c96:	400a      	ands	r2, r1
 8006c98:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006c9a:	4b5b      	ldr	r3, [pc, #364]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	2380      	movs	r3, #128	; 0x80
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	d014      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006caa:	f7fd fd5f 	bl	800476c <HAL_GetTick>
 8006cae:	0003      	movs	r3, r0
 8006cb0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cb2:	e009      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cb4:	f7fd fd5a 	bl	800476c <HAL_GetTick>
 8006cb8:	0002      	movs	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	4a56      	ldr	r2, [pc, #344]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e09b      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cc8:	4b4f      	ldr	r3, [pc, #316]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ccc:	2380      	movs	r3, #128	; 0x80
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	d0ef      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	23c0      	movs	r3, #192	; 0xc0
 8006cda:	029b      	lsls	r3, r3, #10
 8006cdc:	401a      	ands	r2, r3
 8006cde:	23c0      	movs	r3, #192	; 0xc0
 8006ce0:	029b      	lsls	r3, r3, #10
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d10c      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8006ce6:	4b48      	ldr	r3, [pc, #288]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a4c      	ldr	r2, [pc, #304]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006cec:	4013      	ands	r3, r2
 8006cee:	0019      	movs	r1, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	23c0      	movs	r3, #192	; 0xc0
 8006cf6:	039b      	lsls	r3, r3, #14
 8006cf8:	401a      	ands	r2, r3
 8006cfa:	4b43      	ldr	r3, [pc, #268]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	4b41      	ldr	r3, [pc, #260]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d02:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	23c0      	movs	r3, #192	; 0xc0
 8006d0a:	029b      	lsls	r3, r3, #10
 8006d0c:	401a      	ands	r2, r3
 8006d0e:	4b3e      	ldr	r3, [pc, #248]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d10:	430a      	orrs	r2, r1
 8006d12:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006d14:	2317      	movs	r3, #23
 8006d16:	18fb      	adds	r3, r7, r3
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d105      	bne.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d1e:	4b3a      	ldr	r3, [pc, #232]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d22:	4b39      	ldr	r3, [pc, #228]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d24:	493e      	ldr	r1, [pc, #248]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006d26:	400a      	ands	r2, r1
 8006d28:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	4013      	ands	r3, r2
 8006d32:	d009      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d34:	4b34      	ldr	r3, [pc, #208]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d38:	2203      	movs	r2, #3
 8006d3a:	4393      	bics	r3, r2
 8006d3c:	0019      	movs	r1, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	4b31      	ldr	r3, [pc, #196]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d44:	430a      	orrs	r2, r1
 8006d46:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	4013      	ands	r3, r2
 8006d50:	d009      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d52:	4b2d      	ldr	r3, [pc, #180]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d56:	220c      	movs	r2, #12
 8006d58:	4393      	bics	r3, r2
 8006d5a:	0019      	movs	r1, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68da      	ldr	r2, [r3, #12]
 8006d60:	4b29      	ldr	r3, [pc, #164]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d62:	430a      	orrs	r2, r1
 8006d64:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2204      	movs	r2, #4
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	d009      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d70:	4b25      	ldr	r3, [pc, #148]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d74:	4a2b      	ldr	r2, [pc, #172]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006d76:	4013      	ands	r3, r2
 8006d78:	0019      	movs	r1, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691a      	ldr	r2, [r3, #16]
 8006d7e:	4b22      	ldr	r3, [pc, #136]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d80:	430a      	orrs	r2, r1
 8006d82:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2208      	movs	r2, #8
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	d009      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d8e:	4b1e      	ldr	r3, [pc, #120]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d92:	4a25      	ldr	r2, [pc, #148]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006d94:	4013      	ands	r3, r2
 8006d96:	0019      	movs	r1, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	695a      	ldr	r2, [r3, #20]
 8006d9c:	4b1a      	ldr	r3, [pc, #104]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	2380      	movs	r3, #128	; 0x80
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	4013      	ands	r3, r2
 8006dac:	d009      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006dae:	4b16      	ldr	r3, [pc, #88]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db2:	4a17      	ldr	r2, [pc, #92]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006db4:	4013      	ands	r3, r2
 8006db6:	0019      	movs	r1, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699a      	ldr	r2, [r3, #24]
 8006dbc:	4b12      	ldr	r3, [pc, #72]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2240      	movs	r2, #64	; 0x40
 8006dc8:	4013      	ands	r3, r2
 8006dca:	d009      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006dcc:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd0:	4a16      	ldr	r2, [pc, #88]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	0019      	movs	r1, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1a      	ldr	r2, [r3, #32]
 8006dda:	4b0b      	ldr	r3, [pc, #44]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2280      	movs	r2, #128	; 0x80
 8006de6:	4013      	ands	r3, r2
 8006de8:	d009      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006dea:	4b07      	ldr	r3, [pc, #28]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dee:	4a10      	ldr	r2, [pc, #64]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8006df0:	4013      	ands	r3, r2
 8006df2:	0019      	movs	r1, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	69da      	ldr	r2, [r3, #28]
 8006df8:	4b03      	ldr	r3, [pc, #12]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	0018      	movs	r0, r3
 8006e02:	46bd      	mov	sp, r7
 8006e04:	b006      	add	sp, #24
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	40021000 	.word	0x40021000
 8006e0c:	40007000 	.word	0x40007000
 8006e10:	fffcffff 	.word	0xfffcffff
 8006e14:	fff7ffff 	.word	0xfff7ffff
 8006e18:	00001388 	.word	0x00001388
 8006e1c:	ffcfffff 	.word	0xffcfffff
 8006e20:	efffffff 	.word	0xefffffff
 8006e24:	fffff3ff 	.word	0xfffff3ff
 8006e28:	ffffcfff 	.word	0xffffcfff
 8006e2c:	fbffffff 	.word	0xfbffffff
 8006e30:	fff3ffff 	.word	0xfff3ffff

08006e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e032      	b.n	8006eac <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2239      	movs	r2, #57	; 0x39
 8006e4a:	5c9b      	ldrb	r3, [r3, r2]
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d107      	bne.n	8006e62 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2238      	movs	r2, #56	; 0x38
 8006e56:	2100      	movs	r1, #0
 8006e58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f7fd fa67 	bl	8004330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2239      	movs	r2, #57	; 0x39
 8006e66:	2102      	movs	r1, #2
 8006e68:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3304      	adds	r3, #4
 8006e72:	0019      	movs	r1, r3
 8006e74:	0010      	movs	r0, r2
 8006e76:	f000 f93b 	bl	80070f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	223e      	movs	r2, #62	; 0x3e
 8006e7e:	2101      	movs	r1, #1
 8006e80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	223a      	movs	r2, #58	; 0x3a
 8006e86:	2101      	movs	r1, #1
 8006e88:	5499      	strb	r1, [r3, r2]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	223b      	movs	r2, #59	; 0x3b
 8006e8e:	2101      	movs	r1, #1
 8006e90:	5499      	strb	r1, [r3, r2]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	223c      	movs	r2, #60	; 0x3c
 8006e96:	2101      	movs	r1, #1
 8006e98:	5499      	strb	r1, [r3, r2]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	223d      	movs	r2, #61	; 0x3d
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2239      	movs	r2, #57	; 0x39
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	0018      	movs	r0, r3
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	b002      	add	sp, #8
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2239      	movs	r2, #57	; 0x39
 8006ec0:	5c9b      	ldrb	r3, [r3, r2]
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d001      	beq.n	8006ecc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e033      	b.n	8006f34 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2239      	movs	r2, #57	; 0x39
 8006ed0:	2102      	movs	r1, #2
 8006ed2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	2380      	movs	r3, #128	; 0x80
 8006eda:	05db      	lsls	r3, r3, #23
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d00e      	beq.n	8006efe <HAL_TIM_Base_Start+0x4a>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a15      	ldr	r2, [pc, #84]	; (8006f3c <HAL_TIM_Base_Start+0x88>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d009      	beq.n	8006efe <HAL_TIM_Base_Start+0x4a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a14      	ldr	r2, [pc, #80]	; (8006f40 <HAL_TIM_Base_Start+0x8c>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d004      	beq.n	8006efe <HAL_TIM_Base_Start+0x4a>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a12      	ldr	r2, [pc, #72]	; (8006f44 <HAL_TIM_Base_Start+0x90>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d111      	bne.n	8006f22 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	2207      	movs	r2, #7
 8006f06:	4013      	ands	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2b06      	cmp	r3, #6
 8006f0e:	d010      	beq.n	8006f32 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f20:	e007      	b.n	8006f32 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	0018      	movs	r0, r3
 8006f36:	46bd      	mov	sp, r7
 8006f38:	b004      	add	sp, #16
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	40000400 	.word	0x40000400
 8006f40:	40010800 	.word	0x40010800
 8006f44:	40011400 	.word	0x40011400

08006f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f52:	230f      	movs	r3, #15
 8006f54:	18fb      	adds	r3, r7, r3
 8006f56:	2200      	movs	r2, #0
 8006f58:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2238      	movs	r2, #56	; 0x38
 8006f5e:	5c9b      	ldrb	r3, [r3, r2]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d101      	bne.n	8006f68 <HAL_TIM_ConfigClockSource+0x20>
 8006f64:	2302      	movs	r3, #2
 8006f66:	e0bc      	b.n	80070e2 <HAL_TIM_ConfigClockSource+0x19a>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2238      	movs	r2, #56	; 0x38
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2239      	movs	r2, #57	; 0x39
 8006f74:	2102      	movs	r1, #2
 8006f76:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2277      	movs	r2, #119	; 0x77
 8006f84:	4393      	bics	r3, r2
 8006f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4a58      	ldr	r2, [pc, #352]	; (80070ec <HAL_TIM_ConfigClockSource+0x1a4>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2280      	movs	r2, #128	; 0x80
 8006f9e:	0192      	lsls	r2, r2, #6
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d040      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0xde>
 8006fa4:	2280      	movs	r2, #128	; 0x80
 8006fa6:	0192      	lsls	r2, r2, #6
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d900      	bls.n	8006fae <HAL_TIM_ConfigClockSource+0x66>
 8006fac:	e088      	b.n	80070c0 <HAL_TIM_ConfigClockSource+0x178>
 8006fae:	2280      	movs	r2, #128	; 0x80
 8006fb0:	0152      	lsls	r2, r2, #5
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d100      	bne.n	8006fb8 <HAL_TIM_ConfigClockSource+0x70>
 8006fb6:	e088      	b.n	80070ca <HAL_TIM_ConfigClockSource+0x182>
 8006fb8:	2280      	movs	r2, #128	; 0x80
 8006fba:	0152      	lsls	r2, r2, #5
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d900      	bls.n	8006fc2 <HAL_TIM_ConfigClockSource+0x7a>
 8006fc0:	e07e      	b.n	80070c0 <HAL_TIM_ConfigClockSource+0x178>
 8006fc2:	2b70      	cmp	r3, #112	; 0x70
 8006fc4:	d018      	beq.n	8006ff8 <HAL_TIM_ConfigClockSource+0xb0>
 8006fc6:	d900      	bls.n	8006fca <HAL_TIM_ConfigClockSource+0x82>
 8006fc8:	e07a      	b.n	80070c0 <HAL_TIM_ConfigClockSource+0x178>
 8006fca:	2b60      	cmp	r3, #96	; 0x60
 8006fcc:	d04f      	beq.n	800706e <HAL_TIM_ConfigClockSource+0x126>
 8006fce:	d900      	bls.n	8006fd2 <HAL_TIM_ConfigClockSource+0x8a>
 8006fd0:	e076      	b.n	80070c0 <HAL_TIM_ConfigClockSource+0x178>
 8006fd2:	2b50      	cmp	r3, #80	; 0x50
 8006fd4:	d03b      	beq.n	800704e <HAL_TIM_ConfigClockSource+0x106>
 8006fd6:	d900      	bls.n	8006fda <HAL_TIM_ConfigClockSource+0x92>
 8006fd8:	e072      	b.n	80070c0 <HAL_TIM_ConfigClockSource+0x178>
 8006fda:	2b40      	cmp	r3, #64	; 0x40
 8006fdc:	d057      	beq.n	800708e <HAL_TIM_ConfigClockSource+0x146>
 8006fde:	d900      	bls.n	8006fe2 <HAL_TIM_ConfigClockSource+0x9a>
 8006fe0:	e06e      	b.n	80070c0 <HAL_TIM_ConfigClockSource+0x178>
 8006fe2:	2b30      	cmp	r3, #48	; 0x30
 8006fe4:	d063      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x166>
 8006fe6:	d86b      	bhi.n	80070c0 <HAL_TIM_ConfigClockSource+0x178>
 8006fe8:	2b20      	cmp	r3, #32
 8006fea:	d060      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x166>
 8006fec:	d868      	bhi.n	80070c0 <HAL_TIM_ConfigClockSource+0x178>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d05d      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x166>
 8006ff2:	2b10      	cmp	r3, #16
 8006ff4:	d05b      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x166>
 8006ff6:	e063      	b.n	80070c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6818      	ldr	r0, [r3, #0]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	6899      	ldr	r1, [r3, #8]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f000 f94a 	bl	80072a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2277      	movs	r2, #119	; 0x77
 8007018:	4313      	orrs	r3, r2
 800701a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	609a      	str	r2, [r3, #8]
      break;
 8007024:	e052      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6818      	ldr	r0, [r3, #0]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	6899      	ldr	r1, [r3, #8]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f000 f933 	bl	80072a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2180      	movs	r1, #128	; 0x80
 8007046:	01c9      	lsls	r1, r1, #7
 8007048:	430a      	orrs	r2, r1
 800704a:	609a      	str	r2, [r3, #8]
      break;
 800704c:	e03e      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	6859      	ldr	r1, [r3, #4]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	001a      	movs	r2, r3
 800705c:	f000 f8a6 	bl	80071ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2150      	movs	r1, #80	; 0x50
 8007066:	0018      	movs	r0, r3
 8007068:	f000 f900 	bl	800726c <TIM_ITRx_SetConfig>
      break;
 800706c:	e02e      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	6859      	ldr	r1, [r3, #4]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	001a      	movs	r2, r3
 800707c:	f000 f8c4 	bl	8007208 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2160      	movs	r1, #96	; 0x60
 8007086:	0018      	movs	r0, r3
 8007088:	f000 f8f0 	bl	800726c <TIM_ITRx_SetConfig>
      break;
 800708c:	e01e      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	6859      	ldr	r1, [r3, #4]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	001a      	movs	r2, r3
 800709c:	f000 f886 	bl	80071ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2140      	movs	r1, #64	; 0x40
 80070a6:	0018      	movs	r0, r3
 80070a8:	f000 f8e0 	bl	800726c <TIM_ITRx_SetConfig>
      break;
 80070ac:	e00e      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	0019      	movs	r1, r3
 80070b8:	0010      	movs	r0, r2
 80070ba:	f000 f8d7 	bl	800726c <TIM_ITRx_SetConfig>
      break;
 80070be:	e005      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80070c0:	230f      	movs	r3, #15
 80070c2:	18fb      	adds	r3, r7, r3
 80070c4:	2201      	movs	r2, #1
 80070c6:	701a      	strb	r2, [r3, #0]
      break;
 80070c8:	e000      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80070ca:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2239      	movs	r2, #57	; 0x39
 80070d0:	2101      	movs	r1, #1
 80070d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2238      	movs	r2, #56	; 0x38
 80070d8:	2100      	movs	r1, #0
 80070da:	5499      	strb	r1, [r3, r2]

  return status;
 80070dc:	230f      	movs	r3, #15
 80070de:	18fb      	adds	r3, r7, r3
 80070e0:	781b      	ldrb	r3, [r3, #0]
}
 80070e2:	0018      	movs	r0, r3
 80070e4:	46bd      	mov	sp, r7
 80070e6:	b004      	add	sp, #16
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	ffff00ff 	.word	0xffff00ff

080070f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	2380      	movs	r3, #128	; 0x80
 8007104:	05db      	lsls	r3, r3, #23
 8007106:	429a      	cmp	r2, r3
 8007108:	d00b      	beq.n	8007122 <TIM_Base_SetConfig+0x32>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a23      	ldr	r2, [pc, #140]	; (800719c <TIM_Base_SetConfig+0xac>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d007      	beq.n	8007122 <TIM_Base_SetConfig+0x32>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a22      	ldr	r2, [pc, #136]	; (80071a0 <TIM_Base_SetConfig+0xb0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d003      	beq.n	8007122 <TIM_Base_SetConfig+0x32>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a21      	ldr	r2, [pc, #132]	; (80071a4 <TIM_Base_SetConfig+0xb4>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d108      	bne.n	8007134 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2270      	movs	r2, #112	; 0x70
 8007126:	4393      	bics	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4313      	orrs	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	2380      	movs	r3, #128	; 0x80
 8007138:	05db      	lsls	r3, r3, #23
 800713a:	429a      	cmp	r2, r3
 800713c:	d00b      	beq.n	8007156 <TIM_Base_SetConfig+0x66>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a16      	ldr	r2, [pc, #88]	; (800719c <TIM_Base_SetConfig+0xac>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d007      	beq.n	8007156 <TIM_Base_SetConfig+0x66>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a15      	ldr	r2, [pc, #84]	; (80071a0 <TIM_Base_SetConfig+0xb0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d003      	beq.n	8007156 <TIM_Base_SetConfig+0x66>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a14      	ldr	r2, [pc, #80]	; (80071a4 <TIM_Base_SetConfig+0xb4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d108      	bne.n	8007168 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4a13      	ldr	r2, [pc, #76]	; (80071a8 <TIM_Base_SetConfig+0xb8>)
 800715a:	4013      	ands	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	4313      	orrs	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2280      	movs	r2, #128	; 0x80
 800716c:	4393      	bics	r3, r2
 800716e:	001a      	movs	r2, r3
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	689a      	ldr	r2, [r3, #8]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	615a      	str	r2, [r3, #20]
}
 8007194:	46c0      	nop			; (mov r8, r8)
 8007196:	46bd      	mov	sp, r7
 8007198:	b004      	add	sp, #16
 800719a:	bd80      	pop	{r7, pc}
 800719c:	40000400 	.word	0x40000400
 80071a0:	40010800 	.word	0x40010800
 80071a4:	40011400 	.word	0x40011400
 80071a8:	fffffcff 	.word	0xfffffcff

080071ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	2201      	movs	r2, #1
 80071c4:	4393      	bics	r3, r2
 80071c6:	001a      	movs	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	22f0      	movs	r2, #240	; 0xf0
 80071d6:	4393      	bics	r3, r2
 80071d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	011b      	lsls	r3, r3, #4
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	220a      	movs	r2, #10
 80071e8:	4393      	bics	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	621a      	str	r2, [r3, #32]
}
 8007200:	46c0      	nop			; (mov r8, r8)
 8007202:	46bd      	mov	sp, r7
 8007204:	b006      	add	sp, #24
 8007206:	bd80      	pop	{r7, pc}

08007208 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	2210      	movs	r2, #16
 800721a:	4393      	bics	r3, r2
 800721c:	001a      	movs	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	4a0d      	ldr	r2, [pc, #52]	; (8007268 <TIM_TI2_ConfigInputStage+0x60>)
 8007232:	4013      	ands	r3, r2
 8007234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	031b      	lsls	r3, r3, #12
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4313      	orrs	r3, r2
 800723e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	22a0      	movs	r2, #160	; 0xa0
 8007244:	4393      	bics	r3, r2
 8007246:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	621a      	str	r2, [r3, #32]
}
 800725e:	46c0      	nop			; (mov r8, r8)
 8007260:	46bd      	mov	sp, r7
 8007262:	b006      	add	sp, #24
 8007264:	bd80      	pop	{r7, pc}
 8007266:	46c0      	nop			; (mov r8, r8)
 8007268:	ffff0fff 	.word	0xffff0fff

0800726c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2270      	movs	r2, #112	; 0x70
 8007280:	4393      	bics	r3, r2
 8007282:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4313      	orrs	r3, r2
 800728a:	2207      	movs	r2, #7
 800728c:	4313      	orrs	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	609a      	str	r2, [r3, #8]
}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	46bd      	mov	sp, r7
 800729a:	b004      	add	sp, #16
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	4a09      	ldr	r2, [pc, #36]	; (80072dc <TIM_ETR_SetConfig+0x3c>)
 80072b8:	4013      	ands	r3, r2
 80072ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	021a      	lsls	r2, r3, #8
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	431a      	orrs	r2, r3
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	609a      	str	r2, [r3, #8]
}
 80072d4:	46c0      	nop			; (mov r8, r8)
 80072d6:	46bd      	mov	sp, r7
 80072d8:	b006      	add	sp, #24
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	ffff00ff 	.word	0xffff00ff

080072e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2238      	movs	r2, #56	; 0x38
 80072ee:	5c9b      	ldrb	r3, [r3, r2]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e047      	b.n	8007388 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2238      	movs	r2, #56	; 0x38
 80072fc:	2101      	movs	r1, #1
 80072fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2239      	movs	r2, #57	; 0x39
 8007304:	2102      	movs	r1, #2
 8007306:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2270      	movs	r2, #112	; 0x70
 800731c:	4393      	bics	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	2380      	movs	r3, #128	; 0x80
 8007338:	05db      	lsls	r3, r3, #23
 800733a:	429a      	cmp	r2, r3
 800733c:	d00e      	beq.n	800735c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a13      	ldr	r2, [pc, #76]	; (8007390 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d009      	beq.n	800735c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a11      	ldr	r2, [pc, #68]	; (8007394 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d004      	beq.n	800735c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a10      	ldr	r2, [pc, #64]	; (8007398 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d10c      	bne.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2280      	movs	r2, #128	; 0x80
 8007360:	4393      	bics	r3, r2
 8007362:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	4313      	orrs	r3, r2
 800736c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2239      	movs	r2, #57	; 0x39
 800737a:	2101      	movs	r1, #1
 800737c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2238      	movs	r2, #56	; 0x38
 8007382:	2100      	movs	r1, #0
 8007384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	0018      	movs	r0, r3
 800738a:	46bd      	mov	sp, r7
 800738c:	b004      	add	sp, #16
 800738e:	bd80      	pop	{r7, pc}
 8007390:	40000400 	.word	0x40000400
 8007394:	40010800 	.word	0x40010800
 8007398:	40011400 	.word	0x40011400

0800739c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e044      	b.n	8007438 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d107      	bne.n	80073c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2274      	movs	r2, #116	; 0x74
 80073ba:	2100      	movs	r1, #0
 80073bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	0018      	movs	r0, r3
 80073c2:	f7fc ffcb 	bl	800435c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2224      	movs	r2, #36	; 0x24
 80073ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2101      	movs	r1, #1
 80073d8:	438a      	bics	r2, r1
 80073da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	0018      	movs	r0, r3
 80073e0:	f000 f8d8 	bl	8007594 <UART_SetConfig>
 80073e4:	0003      	movs	r3, r0
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d101      	bne.n	80073ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e024      	b.n	8007438 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	0018      	movs	r0, r3
 80073fa:	f000 fb6b 	bl	8007ad4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	490d      	ldr	r1, [pc, #52]	; (8007440 <HAL_UART_Init+0xa4>)
 800740a:	400a      	ands	r2, r1
 800740c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	212a      	movs	r1, #42	; 0x2a
 800741a:	438a      	bics	r2, r1
 800741c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2101      	movs	r1, #1
 800742a:	430a      	orrs	r2, r1
 800742c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	0018      	movs	r0, r3
 8007432:	f000 fc03 	bl	8007c3c <UART_CheckIdleState>
 8007436:	0003      	movs	r3, r0
}
 8007438:	0018      	movs	r0, r3
 800743a:	46bd      	mov	sp, r7
 800743c:	b002      	add	sp, #8
 800743e:	bd80      	pop	{r7, pc}
 8007440:	ffffb7ff 	.word	0xffffb7ff

08007444 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08a      	sub	sp, #40	; 0x28
 8007448:	af02      	add	r7, sp, #8
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	1dbb      	adds	r3, r7, #6
 8007452:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007458:	2b20      	cmp	r3, #32
 800745a:	d000      	beq.n	800745e <HAL_UART_Transmit+0x1a>
 800745c:	e095      	b.n	800758a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <HAL_UART_Transmit+0x28>
 8007464:	1dbb      	adds	r3, r7, #6
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e08d      	b.n	800758c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	2380      	movs	r3, #128	; 0x80
 8007476:	015b      	lsls	r3, r3, #5
 8007478:	429a      	cmp	r2, r3
 800747a:	d109      	bne.n	8007490 <HAL_UART_Transmit+0x4c>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d105      	bne.n	8007490 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2201      	movs	r2, #1
 8007488:	4013      	ands	r3, r2
 800748a:	d001      	beq.n	8007490 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e07d      	b.n	800758c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2274      	movs	r2, #116	; 0x74
 8007494:	5c9b      	ldrb	r3, [r3, r2]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d101      	bne.n	800749e <HAL_UART_Transmit+0x5a>
 800749a:	2302      	movs	r3, #2
 800749c:	e076      	b.n	800758c <HAL_UART_Transmit+0x148>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2274      	movs	r2, #116	; 0x74
 80074a2:	2101      	movs	r1, #1
 80074a4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2280      	movs	r2, #128	; 0x80
 80074aa:	2100      	movs	r1, #0
 80074ac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2221      	movs	r2, #33	; 0x21
 80074b2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074b4:	f7fd f95a 	bl	800476c <HAL_GetTick>
 80074b8:	0003      	movs	r3, r0
 80074ba:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	1dba      	adds	r2, r7, #6
 80074c0:	2150      	movs	r1, #80	; 0x50
 80074c2:	8812      	ldrh	r2, [r2, #0]
 80074c4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	1dba      	adds	r2, r7, #6
 80074ca:	2152      	movs	r1, #82	; 0x52
 80074cc:	8812      	ldrh	r2, [r2, #0]
 80074ce:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	2380      	movs	r3, #128	; 0x80
 80074d6:	015b      	lsls	r3, r3, #5
 80074d8:	429a      	cmp	r2, r3
 80074da:	d108      	bne.n	80074ee <HAL_UART_Transmit+0xaa>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d104      	bne.n	80074ee <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	61bb      	str	r3, [r7, #24]
 80074ec:	e003      	b.n	80074f6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2274      	movs	r2, #116	; 0x74
 80074fa:	2100      	movs	r1, #0
 80074fc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80074fe:	e02c      	b.n	800755a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	0013      	movs	r3, r2
 800750a:	2200      	movs	r2, #0
 800750c:	2180      	movs	r1, #128	; 0x80
 800750e:	f000 fbdd 	bl	8007ccc <UART_WaitOnFlagUntilTimeout>
 8007512:	1e03      	subs	r3, r0, #0
 8007514:	d001      	beq.n	800751a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e038      	b.n	800758c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10b      	bne.n	8007538 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	001a      	movs	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	05d2      	lsls	r2, r2, #23
 800752c:	0dd2      	lsrs	r2, r2, #23
 800752e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	3302      	adds	r3, #2
 8007534:	61bb      	str	r3, [r7, #24]
 8007536:	e007      	b.n	8007548 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	781a      	ldrb	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	3301      	adds	r3, #1
 8007546:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2252      	movs	r2, #82	; 0x52
 800754c:	5a9b      	ldrh	r3, [r3, r2]
 800754e:	b29b      	uxth	r3, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	b299      	uxth	r1, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2252      	movs	r2, #82	; 0x52
 8007558:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2252      	movs	r2, #82	; 0x52
 800755e:	5a9b      	ldrh	r3, [r3, r2]
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1cc      	bne.n	8007500 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	0013      	movs	r3, r2
 8007570:	2200      	movs	r2, #0
 8007572:	2140      	movs	r1, #64	; 0x40
 8007574:	f000 fbaa 	bl	8007ccc <UART_WaitOnFlagUntilTimeout>
 8007578:	1e03      	subs	r3, r0, #0
 800757a:	d001      	beq.n	8007580 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e005      	b.n	800758c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2220      	movs	r2, #32
 8007584:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	e000      	b.n	800758c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800758a:	2302      	movs	r3, #2
  }
}
 800758c:	0018      	movs	r0, r3
 800758e:	46bd      	mov	sp, r7
 8007590:	b008      	add	sp, #32
 8007592:	bd80      	pop	{r7, pc}

08007594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007594:	b5b0      	push	{r4, r5, r7, lr}
 8007596:	b08e      	sub	sp, #56	; 0x38
 8007598:	af00      	add	r7, sp, #0
 800759a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800759c:	231a      	movs	r3, #26
 800759e:	2218      	movs	r2, #24
 80075a0:	189b      	adds	r3, r3, r2
 80075a2:	19db      	adds	r3, r3, r7
 80075a4:	2200      	movs	r2, #0
 80075a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	431a      	orrs	r2, r3
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	431a      	orrs	r2, r3
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	4313      	orrs	r3, r2
 80075be:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4ac3      	ldr	r2, [pc, #780]	; (80078d4 <UART_SetConfig+0x340>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	0019      	movs	r1, r3
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075d2:	430a      	orrs	r2, r1
 80075d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	4abe      	ldr	r2, [pc, #760]	; (80078d8 <UART_SetConfig+0x344>)
 80075de:	4013      	ands	r3, r2
 80075e0:	0019      	movs	r1, r3
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4ab8      	ldr	r2, [pc, #736]	; (80078dc <UART_SetConfig+0x348>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d004      	beq.n	8007608 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007604:	4313      	orrs	r3, r2
 8007606:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	4ab4      	ldr	r2, [pc, #720]	; (80078e0 <UART_SetConfig+0x34c>)
 8007610:	4013      	ands	r3, r2
 8007612:	0019      	movs	r1, r3
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800761a:	430a      	orrs	r2, r1
 800761c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4ab0      	ldr	r2, [pc, #704]	; (80078e4 <UART_SetConfig+0x350>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d131      	bne.n	800768c <UART_SetConfig+0xf8>
 8007628:	4baf      	ldr	r3, [pc, #700]	; (80078e8 <UART_SetConfig+0x354>)
 800762a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800762c:	2203      	movs	r2, #3
 800762e:	4013      	ands	r3, r2
 8007630:	2b03      	cmp	r3, #3
 8007632:	d01d      	beq.n	8007670 <UART_SetConfig+0xdc>
 8007634:	d823      	bhi.n	800767e <UART_SetConfig+0xea>
 8007636:	2b02      	cmp	r3, #2
 8007638:	d00c      	beq.n	8007654 <UART_SetConfig+0xc0>
 800763a:	d820      	bhi.n	800767e <UART_SetConfig+0xea>
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <UART_SetConfig+0xb2>
 8007640:	2b01      	cmp	r3, #1
 8007642:	d00e      	beq.n	8007662 <UART_SetConfig+0xce>
 8007644:	e01b      	b.n	800767e <UART_SetConfig+0xea>
 8007646:	231b      	movs	r3, #27
 8007648:	2218      	movs	r2, #24
 800764a:	189b      	adds	r3, r3, r2
 800764c:	19db      	adds	r3, r3, r7
 800764e:	2201      	movs	r2, #1
 8007650:	701a      	strb	r2, [r3, #0]
 8007652:	e0b4      	b.n	80077be <UART_SetConfig+0x22a>
 8007654:	231b      	movs	r3, #27
 8007656:	2218      	movs	r2, #24
 8007658:	189b      	adds	r3, r3, r2
 800765a:	19db      	adds	r3, r3, r7
 800765c:	2202      	movs	r2, #2
 800765e:	701a      	strb	r2, [r3, #0]
 8007660:	e0ad      	b.n	80077be <UART_SetConfig+0x22a>
 8007662:	231b      	movs	r3, #27
 8007664:	2218      	movs	r2, #24
 8007666:	189b      	adds	r3, r3, r2
 8007668:	19db      	adds	r3, r3, r7
 800766a:	2204      	movs	r2, #4
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	e0a6      	b.n	80077be <UART_SetConfig+0x22a>
 8007670:	231b      	movs	r3, #27
 8007672:	2218      	movs	r2, #24
 8007674:	189b      	adds	r3, r3, r2
 8007676:	19db      	adds	r3, r3, r7
 8007678:	2208      	movs	r2, #8
 800767a:	701a      	strb	r2, [r3, #0]
 800767c:	e09f      	b.n	80077be <UART_SetConfig+0x22a>
 800767e:	231b      	movs	r3, #27
 8007680:	2218      	movs	r2, #24
 8007682:	189b      	adds	r3, r3, r2
 8007684:	19db      	adds	r3, r3, r7
 8007686:	2210      	movs	r2, #16
 8007688:	701a      	strb	r2, [r3, #0]
 800768a:	e098      	b.n	80077be <UART_SetConfig+0x22a>
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a96      	ldr	r2, [pc, #600]	; (80078ec <UART_SetConfig+0x358>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d131      	bne.n	80076fa <UART_SetConfig+0x166>
 8007696:	4b94      	ldr	r3, [pc, #592]	; (80078e8 <UART_SetConfig+0x354>)
 8007698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800769a:	220c      	movs	r2, #12
 800769c:	4013      	ands	r3, r2
 800769e:	2b0c      	cmp	r3, #12
 80076a0:	d01d      	beq.n	80076de <UART_SetConfig+0x14a>
 80076a2:	d823      	bhi.n	80076ec <UART_SetConfig+0x158>
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d00c      	beq.n	80076c2 <UART_SetConfig+0x12e>
 80076a8:	d820      	bhi.n	80076ec <UART_SetConfig+0x158>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <UART_SetConfig+0x120>
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	d00e      	beq.n	80076d0 <UART_SetConfig+0x13c>
 80076b2:	e01b      	b.n	80076ec <UART_SetConfig+0x158>
 80076b4:	231b      	movs	r3, #27
 80076b6:	2218      	movs	r2, #24
 80076b8:	189b      	adds	r3, r3, r2
 80076ba:	19db      	adds	r3, r3, r7
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
 80076c0:	e07d      	b.n	80077be <UART_SetConfig+0x22a>
 80076c2:	231b      	movs	r3, #27
 80076c4:	2218      	movs	r2, #24
 80076c6:	189b      	adds	r3, r3, r2
 80076c8:	19db      	adds	r3, r3, r7
 80076ca:	2202      	movs	r2, #2
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	e076      	b.n	80077be <UART_SetConfig+0x22a>
 80076d0:	231b      	movs	r3, #27
 80076d2:	2218      	movs	r2, #24
 80076d4:	189b      	adds	r3, r3, r2
 80076d6:	19db      	adds	r3, r3, r7
 80076d8:	2204      	movs	r2, #4
 80076da:	701a      	strb	r2, [r3, #0]
 80076dc:	e06f      	b.n	80077be <UART_SetConfig+0x22a>
 80076de:	231b      	movs	r3, #27
 80076e0:	2218      	movs	r2, #24
 80076e2:	189b      	adds	r3, r3, r2
 80076e4:	19db      	adds	r3, r3, r7
 80076e6:	2208      	movs	r2, #8
 80076e8:	701a      	strb	r2, [r3, #0]
 80076ea:	e068      	b.n	80077be <UART_SetConfig+0x22a>
 80076ec:	231b      	movs	r3, #27
 80076ee:	2218      	movs	r2, #24
 80076f0:	189b      	adds	r3, r3, r2
 80076f2:	19db      	adds	r3, r3, r7
 80076f4:	2210      	movs	r2, #16
 80076f6:	701a      	strb	r2, [r3, #0]
 80076f8:	e061      	b.n	80077be <UART_SetConfig+0x22a>
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a7c      	ldr	r2, [pc, #496]	; (80078f0 <UART_SetConfig+0x35c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d106      	bne.n	8007712 <UART_SetConfig+0x17e>
 8007704:	231b      	movs	r3, #27
 8007706:	2218      	movs	r2, #24
 8007708:	189b      	adds	r3, r3, r2
 800770a:	19db      	adds	r3, r3, r7
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]
 8007710:	e055      	b.n	80077be <UART_SetConfig+0x22a>
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a77      	ldr	r2, [pc, #476]	; (80078f4 <UART_SetConfig+0x360>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d106      	bne.n	800772a <UART_SetConfig+0x196>
 800771c:	231b      	movs	r3, #27
 800771e:	2218      	movs	r2, #24
 8007720:	189b      	adds	r3, r3, r2
 8007722:	19db      	adds	r3, r3, r7
 8007724:	2200      	movs	r2, #0
 8007726:	701a      	strb	r2, [r3, #0]
 8007728:	e049      	b.n	80077be <UART_SetConfig+0x22a>
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a6b      	ldr	r2, [pc, #428]	; (80078dc <UART_SetConfig+0x348>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d13e      	bne.n	80077b2 <UART_SetConfig+0x21e>
 8007734:	4b6c      	ldr	r3, [pc, #432]	; (80078e8 <UART_SetConfig+0x354>)
 8007736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007738:	23c0      	movs	r3, #192	; 0xc0
 800773a:	011b      	lsls	r3, r3, #4
 800773c:	4013      	ands	r3, r2
 800773e:	22c0      	movs	r2, #192	; 0xc0
 8007740:	0112      	lsls	r2, r2, #4
 8007742:	4293      	cmp	r3, r2
 8007744:	d027      	beq.n	8007796 <UART_SetConfig+0x202>
 8007746:	22c0      	movs	r2, #192	; 0xc0
 8007748:	0112      	lsls	r2, r2, #4
 800774a:	4293      	cmp	r3, r2
 800774c:	d82a      	bhi.n	80077a4 <UART_SetConfig+0x210>
 800774e:	2280      	movs	r2, #128	; 0x80
 8007750:	0112      	lsls	r2, r2, #4
 8007752:	4293      	cmp	r3, r2
 8007754:	d011      	beq.n	800777a <UART_SetConfig+0x1e6>
 8007756:	2280      	movs	r2, #128	; 0x80
 8007758:	0112      	lsls	r2, r2, #4
 800775a:	4293      	cmp	r3, r2
 800775c:	d822      	bhi.n	80077a4 <UART_SetConfig+0x210>
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <UART_SetConfig+0x1d8>
 8007762:	2280      	movs	r2, #128	; 0x80
 8007764:	00d2      	lsls	r2, r2, #3
 8007766:	4293      	cmp	r3, r2
 8007768:	d00e      	beq.n	8007788 <UART_SetConfig+0x1f4>
 800776a:	e01b      	b.n	80077a4 <UART_SetConfig+0x210>
 800776c:	231b      	movs	r3, #27
 800776e:	2218      	movs	r2, #24
 8007770:	189b      	adds	r3, r3, r2
 8007772:	19db      	adds	r3, r3, r7
 8007774:	2200      	movs	r2, #0
 8007776:	701a      	strb	r2, [r3, #0]
 8007778:	e021      	b.n	80077be <UART_SetConfig+0x22a>
 800777a:	231b      	movs	r3, #27
 800777c:	2218      	movs	r2, #24
 800777e:	189b      	adds	r3, r3, r2
 8007780:	19db      	adds	r3, r3, r7
 8007782:	2202      	movs	r2, #2
 8007784:	701a      	strb	r2, [r3, #0]
 8007786:	e01a      	b.n	80077be <UART_SetConfig+0x22a>
 8007788:	231b      	movs	r3, #27
 800778a:	2218      	movs	r2, #24
 800778c:	189b      	adds	r3, r3, r2
 800778e:	19db      	adds	r3, r3, r7
 8007790:	2204      	movs	r2, #4
 8007792:	701a      	strb	r2, [r3, #0]
 8007794:	e013      	b.n	80077be <UART_SetConfig+0x22a>
 8007796:	231b      	movs	r3, #27
 8007798:	2218      	movs	r2, #24
 800779a:	189b      	adds	r3, r3, r2
 800779c:	19db      	adds	r3, r3, r7
 800779e:	2208      	movs	r2, #8
 80077a0:	701a      	strb	r2, [r3, #0]
 80077a2:	e00c      	b.n	80077be <UART_SetConfig+0x22a>
 80077a4:	231b      	movs	r3, #27
 80077a6:	2218      	movs	r2, #24
 80077a8:	189b      	adds	r3, r3, r2
 80077aa:	19db      	adds	r3, r3, r7
 80077ac:	2210      	movs	r2, #16
 80077ae:	701a      	strb	r2, [r3, #0]
 80077b0:	e005      	b.n	80077be <UART_SetConfig+0x22a>
 80077b2:	231b      	movs	r3, #27
 80077b4:	2218      	movs	r2, #24
 80077b6:	189b      	adds	r3, r3, r2
 80077b8:	19db      	adds	r3, r3, r7
 80077ba:	2210      	movs	r2, #16
 80077bc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a46      	ldr	r2, [pc, #280]	; (80078dc <UART_SetConfig+0x348>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d000      	beq.n	80077ca <UART_SetConfig+0x236>
 80077c8:	e09a      	b.n	8007900 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077ca:	231b      	movs	r3, #27
 80077cc:	2218      	movs	r2, #24
 80077ce:	189b      	adds	r3, r3, r2
 80077d0:	19db      	adds	r3, r3, r7
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	d01d      	beq.n	8007814 <UART_SetConfig+0x280>
 80077d8:	dc20      	bgt.n	800781c <UART_SetConfig+0x288>
 80077da:	2b04      	cmp	r3, #4
 80077dc:	d015      	beq.n	800780a <UART_SetConfig+0x276>
 80077de:	dc1d      	bgt.n	800781c <UART_SetConfig+0x288>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <UART_SetConfig+0x256>
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d005      	beq.n	80077f4 <UART_SetConfig+0x260>
 80077e8:	e018      	b.n	800781c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077ea:	f7ff f9a1 	bl	8006b30 <HAL_RCC_GetPCLK1Freq>
 80077ee:	0003      	movs	r3, r0
 80077f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077f2:	e01c      	b.n	800782e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077f4:	4b3c      	ldr	r3, [pc, #240]	; (80078e8 <UART_SetConfig+0x354>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2210      	movs	r2, #16
 80077fa:	4013      	ands	r3, r2
 80077fc:	d002      	beq.n	8007804 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80077fe:	4b3e      	ldr	r3, [pc, #248]	; (80078f8 <UART_SetConfig+0x364>)
 8007800:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007802:	e014      	b.n	800782e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8007804:	4b3d      	ldr	r3, [pc, #244]	; (80078fc <UART_SetConfig+0x368>)
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007808:	e011      	b.n	800782e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800780a:	f7ff f8e1 	bl	80069d0 <HAL_RCC_GetSysClockFreq>
 800780e:	0003      	movs	r3, r0
 8007810:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007812:	e00c      	b.n	800782e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007814:	2380      	movs	r3, #128	; 0x80
 8007816:	021b      	lsls	r3, r3, #8
 8007818:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800781a:	e008      	b.n	800782e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007820:	231a      	movs	r3, #26
 8007822:	2218      	movs	r2, #24
 8007824:	189b      	adds	r3, r3, r2
 8007826:	19db      	adds	r3, r3, r7
 8007828:	2201      	movs	r2, #1
 800782a:	701a      	strb	r2, [r3, #0]
        break;
 800782c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800782e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007830:	2b00      	cmp	r3, #0
 8007832:	d100      	bne.n	8007836 <UART_SetConfig+0x2a2>
 8007834:	e134      	b.n	8007aa0 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	0013      	movs	r3, r2
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	189b      	adds	r3, r3, r2
 8007840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007842:	429a      	cmp	r2, r3
 8007844:	d305      	bcc.n	8007852 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800784c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800784e:	429a      	cmp	r2, r3
 8007850:	d906      	bls.n	8007860 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8007852:	231a      	movs	r3, #26
 8007854:	2218      	movs	r2, #24
 8007856:	189b      	adds	r3, r3, r2
 8007858:	19db      	adds	r3, r3, r7
 800785a:	2201      	movs	r2, #1
 800785c:	701a      	strb	r2, [r3, #0]
 800785e:	e11f      	b.n	8007aa0 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007862:	613b      	str	r3, [r7, #16]
 8007864:	2300      	movs	r3, #0
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	6939      	ldr	r1, [r7, #16]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	000b      	movs	r3, r1
 800786e:	0e1b      	lsrs	r3, r3, #24
 8007870:	0010      	movs	r0, r2
 8007872:	0205      	lsls	r5, r0, #8
 8007874:	431d      	orrs	r5, r3
 8007876:	000b      	movs	r3, r1
 8007878:	021c      	lsls	r4, r3, #8
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	085b      	lsrs	r3, r3, #1
 8007880:	60bb      	str	r3, [r7, #8]
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	68b8      	ldr	r0, [r7, #8]
 8007888:	68f9      	ldr	r1, [r7, #12]
 800788a:	1900      	adds	r0, r0, r4
 800788c:	4169      	adcs	r1, r5
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	603b      	str	r3, [r7, #0]
 8007894:	2300      	movs	r3, #0
 8007896:	607b      	str	r3, [r7, #4]
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f7f8 fe04 	bl	80004a8 <__aeabi_uldivmod>
 80078a0:	0002      	movs	r2, r0
 80078a2:	000b      	movs	r3, r1
 80078a4:	0013      	movs	r3, r2
 80078a6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078aa:	23c0      	movs	r3, #192	; 0xc0
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d309      	bcc.n	80078c6 <UART_SetConfig+0x332>
 80078b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078b4:	2380      	movs	r3, #128	; 0x80
 80078b6:	035b      	lsls	r3, r3, #13
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d204      	bcs.n	80078c6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078c2:	60da      	str	r2, [r3, #12]
 80078c4:	e0ec      	b.n	8007aa0 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80078c6:	231a      	movs	r3, #26
 80078c8:	2218      	movs	r2, #24
 80078ca:	189b      	adds	r3, r3, r2
 80078cc:	19db      	adds	r3, r3, r7
 80078ce:	2201      	movs	r2, #1
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	e0e5      	b.n	8007aa0 <UART_SetConfig+0x50c>
 80078d4:	efff69f3 	.word	0xefff69f3
 80078d8:	ffffcfff 	.word	0xffffcfff
 80078dc:	40004800 	.word	0x40004800
 80078e0:	fffff4ff 	.word	0xfffff4ff
 80078e4:	40013800 	.word	0x40013800
 80078e8:	40021000 	.word	0x40021000
 80078ec:	40004400 	.word	0x40004400
 80078f0:	40004c00 	.word	0x40004c00
 80078f4:	40005000 	.word	0x40005000
 80078f8:	003d0900 	.word	0x003d0900
 80078fc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	69da      	ldr	r2, [r3, #28]
 8007904:	2380      	movs	r3, #128	; 0x80
 8007906:	021b      	lsls	r3, r3, #8
 8007908:	429a      	cmp	r2, r3
 800790a:	d000      	beq.n	800790e <UART_SetConfig+0x37a>
 800790c:	e071      	b.n	80079f2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800790e:	231b      	movs	r3, #27
 8007910:	2218      	movs	r2, #24
 8007912:	189b      	adds	r3, r3, r2
 8007914:	19db      	adds	r3, r3, r7
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b08      	cmp	r3, #8
 800791a:	d822      	bhi.n	8007962 <UART_SetConfig+0x3ce>
 800791c:	009a      	lsls	r2, r3, #2
 800791e:	4b68      	ldr	r3, [pc, #416]	; (8007ac0 <UART_SetConfig+0x52c>)
 8007920:	18d3      	adds	r3, r2, r3
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007926:	f7ff f903 	bl	8006b30 <HAL_RCC_GetPCLK1Freq>
 800792a:	0003      	movs	r3, r0
 800792c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800792e:	e021      	b.n	8007974 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007930:	f7ff f914 	bl	8006b5c <HAL_RCC_GetPCLK2Freq>
 8007934:	0003      	movs	r3, r0
 8007936:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007938:	e01c      	b.n	8007974 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800793a:	4b62      	ldr	r3, [pc, #392]	; (8007ac4 <UART_SetConfig+0x530>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2210      	movs	r2, #16
 8007940:	4013      	ands	r3, r2
 8007942:	d002      	beq.n	800794a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007944:	4b60      	ldr	r3, [pc, #384]	; (8007ac8 <UART_SetConfig+0x534>)
 8007946:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007948:	e014      	b.n	8007974 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800794a:	4b60      	ldr	r3, [pc, #384]	; (8007acc <UART_SetConfig+0x538>)
 800794c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800794e:	e011      	b.n	8007974 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007950:	f7ff f83e 	bl	80069d0 <HAL_RCC_GetSysClockFreq>
 8007954:	0003      	movs	r3, r0
 8007956:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007958:	e00c      	b.n	8007974 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800795a:	2380      	movs	r3, #128	; 0x80
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007960:	e008      	b.n	8007974 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007966:	231a      	movs	r3, #26
 8007968:	2218      	movs	r2, #24
 800796a:	189b      	adds	r3, r3, r2
 800796c:	19db      	adds	r3, r3, r7
 800796e:	2201      	movs	r2, #1
 8007970:	701a      	strb	r2, [r3, #0]
        break;
 8007972:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d100      	bne.n	800797c <UART_SetConfig+0x3e8>
 800797a:	e091      	b.n	8007aa0 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	005a      	lsls	r2, r3, #1
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	085b      	lsrs	r3, r3, #1
 8007986:	18d2      	adds	r2, r2, r3
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	0019      	movs	r1, r3
 800798e:	0010      	movs	r0, r2
 8007990:	f7f8 fbd6 	bl	8000140 <__udivsi3>
 8007994:	0003      	movs	r3, r0
 8007996:	b29b      	uxth	r3, r3
 8007998:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	2b0f      	cmp	r3, #15
 800799e:	d921      	bls.n	80079e4 <UART_SetConfig+0x450>
 80079a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a2:	2380      	movs	r3, #128	; 0x80
 80079a4:	025b      	lsls	r3, r3, #9
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d21c      	bcs.n	80079e4 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	200e      	movs	r0, #14
 80079b0:	2418      	movs	r4, #24
 80079b2:	1903      	adds	r3, r0, r4
 80079b4:	19db      	adds	r3, r3, r7
 80079b6:	210f      	movs	r1, #15
 80079b8:	438a      	bics	r2, r1
 80079ba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	085b      	lsrs	r3, r3, #1
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	2207      	movs	r2, #7
 80079c4:	4013      	ands	r3, r2
 80079c6:	b299      	uxth	r1, r3
 80079c8:	1903      	adds	r3, r0, r4
 80079ca:	19db      	adds	r3, r3, r7
 80079cc:	1902      	adds	r2, r0, r4
 80079ce:	19d2      	adds	r2, r2, r7
 80079d0:	8812      	ldrh	r2, [r2, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	1902      	adds	r2, r0, r4
 80079dc:	19d2      	adds	r2, r2, r7
 80079de:	8812      	ldrh	r2, [r2, #0]
 80079e0:	60da      	str	r2, [r3, #12]
 80079e2:	e05d      	b.n	8007aa0 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80079e4:	231a      	movs	r3, #26
 80079e6:	2218      	movs	r2, #24
 80079e8:	189b      	adds	r3, r3, r2
 80079ea:	19db      	adds	r3, r3, r7
 80079ec:	2201      	movs	r2, #1
 80079ee:	701a      	strb	r2, [r3, #0]
 80079f0:	e056      	b.n	8007aa0 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079f2:	231b      	movs	r3, #27
 80079f4:	2218      	movs	r2, #24
 80079f6:	189b      	adds	r3, r3, r2
 80079f8:	19db      	adds	r3, r3, r7
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d822      	bhi.n	8007a46 <UART_SetConfig+0x4b2>
 8007a00:	009a      	lsls	r2, r3, #2
 8007a02:	4b33      	ldr	r3, [pc, #204]	; (8007ad0 <UART_SetConfig+0x53c>)
 8007a04:	18d3      	adds	r3, r2, r3
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a0a:	f7ff f891 	bl	8006b30 <HAL_RCC_GetPCLK1Freq>
 8007a0e:	0003      	movs	r3, r0
 8007a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a12:	e021      	b.n	8007a58 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a14:	f7ff f8a2 	bl	8006b5c <HAL_RCC_GetPCLK2Freq>
 8007a18:	0003      	movs	r3, r0
 8007a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a1c:	e01c      	b.n	8007a58 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a1e:	4b29      	ldr	r3, [pc, #164]	; (8007ac4 <UART_SetConfig+0x530>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2210      	movs	r2, #16
 8007a24:	4013      	ands	r3, r2
 8007a26:	d002      	beq.n	8007a2e <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007a28:	4b27      	ldr	r3, [pc, #156]	; (8007ac8 <UART_SetConfig+0x534>)
 8007a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a2c:	e014      	b.n	8007a58 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8007a2e:	4b27      	ldr	r3, [pc, #156]	; (8007acc <UART_SetConfig+0x538>)
 8007a30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a32:	e011      	b.n	8007a58 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a34:	f7fe ffcc 	bl	80069d0 <HAL_RCC_GetSysClockFreq>
 8007a38:	0003      	movs	r3, r0
 8007a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a3c:	e00c      	b.n	8007a58 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a3e:	2380      	movs	r3, #128	; 0x80
 8007a40:	021b      	lsls	r3, r3, #8
 8007a42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a44:	e008      	b.n	8007a58 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007a4a:	231a      	movs	r3, #26
 8007a4c:	2218      	movs	r2, #24
 8007a4e:	189b      	adds	r3, r3, r2
 8007a50:	19db      	adds	r3, r3, r7
 8007a52:	2201      	movs	r2, #1
 8007a54:	701a      	strb	r2, [r3, #0]
        break;
 8007a56:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d020      	beq.n	8007aa0 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	085a      	lsrs	r2, r3, #1
 8007a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a66:	18d2      	adds	r2, r2, r3
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	0019      	movs	r1, r3
 8007a6e:	0010      	movs	r0, r2
 8007a70:	f7f8 fb66 	bl	8000140 <__udivsi3>
 8007a74:	0003      	movs	r3, r0
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7c:	2b0f      	cmp	r3, #15
 8007a7e:	d909      	bls.n	8007a94 <UART_SetConfig+0x500>
 8007a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a82:	2380      	movs	r3, #128	; 0x80
 8007a84:	025b      	lsls	r3, r3, #9
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d204      	bcs.n	8007a94 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a90:	60da      	str	r2, [r3, #12]
 8007a92:	e005      	b.n	8007aa0 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a94:	231a      	movs	r3, #26
 8007a96:	2218      	movs	r2, #24
 8007a98:	189b      	adds	r3, r3, r2
 8007a9a:	19db      	adds	r3, r3, r7
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007aac:	231a      	movs	r3, #26
 8007aae:	2218      	movs	r2, #24
 8007ab0:	189b      	adds	r3, r3, r2
 8007ab2:	19db      	adds	r3, r3, r7
 8007ab4:	781b      	ldrb	r3, [r3, #0]
}
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	b00e      	add	sp, #56	; 0x38
 8007abc:	bdb0      	pop	{r4, r5, r7, pc}
 8007abe:	46c0      	nop			; (mov r8, r8)
 8007ac0:	0800bd60 	.word	0x0800bd60
 8007ac4:	40021000 	.word	0x40021000
 8007ac8:	003d0900 	.word	0x003d0900
 8007acc:	00f42400 	.word	0x00f42400
 8007ad0:	0800bd84 	.word	0x0800bd84

08007ad4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	d00b      	beq.n	8007afe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	4a4a      	ldr	r2, [pc, #296]	; (8007c18 <UART_AdvFeatureConfig+0x144>)
 8007aee:	4013      	ands	r3, r2
 8007af0:	0019      	movs	r1, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	2202      	movs	r2, #2
 8007b04:	4013      	ands	r3, r2
 8007b06:	d00b      	beq.n	8007b20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	4a43      	ldr	r2, [pc, #268]	; (8007c1c <UART_AdvFeatureConfig+0x148>)
 8007b10:	4013      	ands	r3, r2
 8007b12:	0019      	movs	r1, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	430a      	orrs	r2, r1
 8007b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	2204      	movs	r2, #4
 8007b26:	4013      	ands	r3, r2
 8007b28:	d00b      	beq.n	8007b42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	4a3b      	ldr	r2, [pc, #236]	; (8007c20 <UART_AdvFeatureConfig+0x14c>)
 8007b32:	4013      	ands	r3, r2
 8007b34:	0019      	movs	r1, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	2208      	movs	r2, #8
 8007b48:	4013      	ands	r3, r2
 8007b4a:	d00b      	beq.n	8007b64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	4a34      	ldr	r2, [pc, #208]	; (8007c24 <UART_AdvFeatureConfig+0x150>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	0019      	movs	r1, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	2210      	movs	r2, #16
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	d00b      	beq.n	8007b86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	4a2c      	ldr	r2, [pc, #176]	; (8007c28 <UART_AdvFeatureConfig+0x154>)
 8007b76:	4013      	ands	r3, r2
 8007b78:	0019      	movs	r1, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	d00b      	beq.n	8007ba8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	4a25      	ldr	r2, [pc, #148]	; (8007c2c <UART_AdvFeatureConfig+0x158>)
 8007b98:	4013      	ands	r3, r2
 8007b9a:	0019      	movs	r1, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	2240      	movs	r2, #64	; 0x40
 8007bae:	4013      	ands	r3, r2
 8007bb0:	d01d      	beq.n	8007bee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	4a1d      	ldr	r2, [pc, #116]	; (8007c30 <UART_AdvFeatureConfig+0x15c>)
 8007bba:	4013      	ands	r3, r2
 8007bbc:	0019      	movs	r1, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bce:	2380      	movs	r3, #128	; 0x80
 8007bd0:	035b      	lsls	r3, r3, #13
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d10b      	bne.n	8007bee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	4a15      	ldr	r2, [pc, #84]	; (8007c34 <UART_AdvFeatureConfig+0x160>)
 8007bde:	4013      	ands	r3, r2
 8007be0:	0019      	movs	r1, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	2280      	movs	r2, #128	; 0x80
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	d00b      	beq.n	8007c10 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	4a0e      	ldr	r2, [pc, #56]	; (8007c38 <UART_AdvFeatureConfig+0x164>)
 8007c00:	4013      	ands	r3, r2
 8007c02:	0019      	movs	r1, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	605a      	str	r2, [r3, #4]
  }
}
 8007c10:	46c0      	nop			; (mov r8, r8)
 8007c12:	46bd      	mov	sp, r7
 8007c14:	b002      	add	sp, #8
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	fffdffff 	.word	0xfffdffff
 8007c1c:	fffeffff 	.word	0xfffeffff
 8007c20:	fffbffff 	.word	0xfffbffff
 8007c24:	ffff7fff 	.word	0xffff7fff
 8007c28:	ffffefff 	.word	0xffffefff
 8007c2c:	ffffdfff 	.word	0xffffdfff
 8007c30:	ffefffff 	.word	0xffefffff
 8007c34:	ff9fffff 	.word	0xff9fffff
 8007c38:	fff7ffff 	.word	0xfff7ffff

08007c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af02      	add	r7, sp, #8
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2280      	movs	r2, #128	; 0x80
 8007c48:	2100      	movs	r1, #0
 8007c4a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c4c:	f7fc fd8e 	bl	800476c <HAL_GetTick>
 8007c50:	0003      	movs	r3, r0
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2208      	movs	r2, #8
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	2b08      	cmp	r3, #8
 8007c60:	d10c      	bne.n	8007c7c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2280      	movs	r2, #128	; 0x80
 8007c66:	0391      	lsls	r1, r2, #14
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	4a17      	ldr	r2, [pc, #92]	; (8007cc8 <UART_CheckIdleState+0x8c>)
 8007c6c:	9200      	str	r2, [sp, #0]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f000 f82c 	bl	8007ccc <UART_WaitOnFlagUntilTimeout>
 8007c74:	1e03      	subs	r3, r0, #0
 8007c76:	d001      	beq.n	8007c7c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e021      	b.n	8007cc0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2204      	movs	r2, #4
 8007c84:	4013      	ands	r3, r2
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	d10c      	bne.n	8007ca4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2280      	movs	r2, #128	; 0x80
 8007c8e:	03d1      	lsls	r1, r2, #15
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	4a0d      	ldr	r2, [pc, #52]	; (8007cc8 <UART_CheckIdleState+0x8c>)
 8007c94:	9200      	str	r2, [sp, #0]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f000 f818 	bl	8007ccc <UART_WaitOnFlagUntilTimeout>
 8007c9c:	1e03      	subs	r3, r0, #0
 8007c9e:	d001      	beq.n	8007ca4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e00d      	b.n	8007cc0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2220      	movs	r2, #32
 8007cae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2274      	movs	r2, #116	; 0x74
 8007cba:	2100      	movs	r1, #0
 8007cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	b004      	add	sp, #16
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	01ffffff 	.word	0x01ffffff

08007ccc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b094      	sub	sp, #80	; 0x50
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	603b      	str	r3, [r7, #0]
 8007cd8:	1dfb      	adds	r3, r7, #7
 8007cda:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cdc:	e0a3      	b.n	8007e26 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	d100      	bne.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007ce4:	e09f      	b.n	8007e26 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ce6:	f7fc fd41 	bl	800476c <HAL_GetTick>
 8007cea:	0002      	movs	r2, r0
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d302      	bcc.n	8007cfc <UART_WaitOnFlagUntilTimeout+0x30>
 8007cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d13d      	bne.n	8007d78 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8007d00:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d04:	647b      	str	r3, [r7, #68]	; 0x44
 8007d06:	2301      	movs	r3, #1
 8007d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0c:	f383 8810 	msr	PRIMASK, r3
}
 8007d10:	46c0      	nop			; (mov r8, r8)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	494c      	ldr	r1, [pc, #304]	; (8007e50 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007d1e:	400a      	ands	r2, r1
 8007d20:	601a      	str	r2, [r3, #0]
 8007d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d24:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d28:	f383 8810 	msr	PRIMASK, r3
}
 8007d2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d32:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d36:	643b      	str	r3, [r7, #64]	; 0x40
 8007d38:	2301      	movs	r3, #1
 8007d3a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3e:	f383 8810 	msr	PRIMASK, r3
}
 8007d42:	46c0      	nop			; (mov r8, r8)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689a      	ldr	r2, [r3, #8]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2101      	movs	r1, #1
 8007d50:	438a      	bics	r2, r1
 8007d52:	609a      	str	r2, [r3, #8]
 8007d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5a:	f383 8810 	msr	PRIMASK, r3
}
 8007d5e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2220      	movs	r2, #32
 8007d64:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2274      	movs	r2, #116	; 0x74
 8007d70:	2100      	movs	r1, #0
 8007d72:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	e067      	b.n	8007e48 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2204      	movs	r2, #4
 8007d80:	4013      	ands	r3, r2
 8007d82:	d050      	beq.n	8007e26 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	69da      	ldr	r2, [r3, #28]
 8007d8a:	2380      	movs	r3, #128	; 0x80
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	401a      	ands	r2, r3
 8007d90:	2380      	movs	r3, #128	; 0x80
 8007d92:	011b      	lsls	r3, r3, #4
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d146      	bne.n	8007e26 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2280      	movs	r2, #128	; 0x80
 8007d9e:	0112      	lsls	r2, r2, #4
 8007da0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007da2:	f3ef 8310 	mrs	r3, PRIMASK
 8007da6:	613b      	str	r3, [r7, #16]
  return(result);
 8007da8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dac:	2301      	movs	r3, #1
 8007dae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f383 8810 	msr	PRIMASK, r3
}
 8007db6:	46c0      	nop			; (mov r8, r8)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4923      	ldr	r1, [pc, #140]	; (8007e50 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007dc4:	400a      	ands	r2, r1
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	f383 8810 	msr	PRIMASK, r3
}
 8007dd2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8007dd8:	61fb      	str	r3, [r7, #28]
  return(result);
 8007dda:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ddc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dde:	2301      	movs	r3, #1
 8007de0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	f383 8810 	msr	PRIMASK, r3
}
 8007de8:	46c0      	nop			; (mov r8, r8)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2101      	movs	r1, #1
 8007df6:	438a      	bics	r2, r1
 8007df8:	609a      	str	r2, [r3, #8]
 8007dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	f383 8810 	msr	PRIMASK, r3
}
 8007e04:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2220      	movs	r2, #32
 8007e10:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2280      	movs	r2, #128	; 0x80
 8007e16:	2120      	movs	r1, #32
 8007e18:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2274      	movs	r2, #116	; 0x74
 8007e1e:	2100      	movs	r1, #0
 8007e20:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e010      	b.n	8007e48 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	69db      	ldr	r3, [r3, #28]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	425a      	negs	r2, r3
 8007e36:	4153      	adcs	r3, r2
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	001a      	movs	r2, r3
 8007e3c:	1dfb      	adds	r3, r7, #7
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d100      	bne.n	8007e46 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007e44:	e74b      	b.n	8007cde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	0018      	movs	r0, r3
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	b014      	add	sp, #80	; 0x50
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	fffffe5f 	.word	0xfffffe5f

08007e54 <__errno>:
 8007e54:	4b01      	ldr	r3, [pc, #4]	; (8007e5c <__errno+0x8>)
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	4770      	bx	lr
 8007e5a:	46c0      	nop			; (mov r8, r8)
 8007e5c:	2000000c 	.word	0x2000000c

08007e60 <__libc_init_array>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	2600      	movs	r6, #0
 8007e64:	4d0c      	ldr	r5, [pc, #48]	; (8007e98 <__libc_init_array+0x38>)
 8007e66:	4c0d      	ldr	r4, [pc, #52]	; (8007e9c <__libc_init_array+0x3c>)
 8007e68:	1b64      	subs	r4, r4, r5
 8007e6a:	10a4      	asrs	r4, r4, #2
 8007e6c:	42a6      	cmp	r6, r4
 8007e6e:	d109      	bne.n	8007e84 <__libc_init_array+0x24>
 8007e70:	2600      	movs	r6, #0
 8007e72:	f003 fe99 	bl	800bba8 <_init>
 8007e76:	4d0a      	ldr	r5, [pc, #40]	; (8007ea0 <__libc_init_array+0x40>)
 8007e78:	4c0a      	ldr	r4, [pc, #40]	; (8007ea4 <__libc_init_array+0x44>)
 8007e7a:	1b64      	subs	r4, r4, r5
 8007e7c:	10a4      	asrs	r4, r4, #2
 8007e7e:	42a6      	cmp	r6, r4
 8007e80:	d105      	bne.n	8007e8e <__libc_init_array+0x2e>
 8007e82:	bd70      	pop	{r4, r5, r6, pc}
 8007e84:	00b3      	lsls	r3, r6, #2
 8007e86:	58eb      	ldr	r3, [r5, r3]
 8007e88:	4798      	blx	r3
 8007e8a:	3601      	adds	r6, #1
 8007e8c:	e7ee      	b.n	8007e6c <__libc_init_array+0xc>
 8007e8e:	00b3      	lsls	r3, r6, #2
 8007e90:	58eb      	ldr	r3, [r5, r3]
 8007e92:	4798      	blx	r3
 8007e94:	3601      	adds	r6, #1
 8007e96:	e7f2      	b.n	8007e7e <__libc_init_array+0x1e>
 8007e98:	0800c1c0 	.word	0x0800c1c0
 8007e9c:	0800c1c0 	.word	0x0800c1c0
 8007ea0:	0800c1c0 	.word	0x0800c1c0
 8007ea4:	0800c1c4 	.word	0x0800c1c4

08007ea8 <memset>:
 8007ea8:	0003      	movs	r3, r0
 8007eaa:	1882      	adds	r2, r0, r2
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d100      	bne.n	8007eb2 <memset+0xa>
 8007eb0:	4770      	bx	lr
 8007eb2:	7019      	strb	r1, [r3, #0]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	e7f9      	b.n	8007eac <memset+0x4>

08007eb8 <__cvt>:
 8007eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eba:	001e      	movs	r6, r3
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	0014      	movs	r4, r2
 8007ec0:	b08b      	sub	sp, #44	; 0x2c
 8007ec2:	429e      	cmp	r6, r3
 8007ec4:	da04      	bge.n	8007ed0 <__cvt+0x18>
 8007ec6:	2180      	movs	r1, #128	; 0x80
 8007ec8:	0609      	lsls	r1, r1, #24
 8007eca:	1873      	adds	r3, r6, r1
 8007ecc:	001e      	movs	r6, r3
 8007ece:	232d      	movs	r3, #45	; 0x2d
 8007ed0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ed2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007ed4:	7013      	strb	r3, [r2, #0]
 8007ed6:	2320      	movs	r3, #32
 8007ed8:	2203      	movs	r2, #3
 8007eda:	439f      	bics	r7, r3
 8007edc:	2f46      	cmp	r7, #70	; 0x46
 8007ede:	d007      	beq.n	8007ef0 <__cvt+0x38>
 8007ee0:	003b      	movs	r3, r7
 8007ee2:	3b45      	subs	r3, #69	; 0x45
 8007ee4:	4259      	negs	r1, r3
 8007ee6:	414b      	adcs	r3, r1
 8007ee8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007eea:	3a01      	subs	r2, #1
 8007eec:	18cb      	adds	r3, r1, r3
 8007eee:	9310      	str	r3, [sp, #64]	; 0x40
 8007ef0:	ab09      	add	r3, sp, #36	; 0x24
 8007ef2:	9304      	str	r3, [sp, #16]
 8007ef4:	ab08      	add	r3, sp, #32
 8007ef6:	9303      	str	r3, [sp, #12]
 8007ef8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007efa:	9200      	str	r2, [sp, #0]
 8007efc:	9302      	str	r3, [sp, #8]
 8007efe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f00:	0022      	movs	r2, r4
 8007f02:	9301      	str	r3, [sp, #4]
 8007f04:	0033      	movs	r3, r6
 8007f06:	f000 fcf1 	bl	80088ec <_dtoa_r>
 8007f0a:	0005      	movs	r5, r0
 8007f0c:	2f47      	cmp	r7, #71	; 0x47
 8007f0e:	d102      	bne.n	8007f16 <__cvt+0x5e>
 8007f10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f12:	07db      	lsls	r3, r3, #31
 8007f14:	d528      	bpl.n	8007f68 <__cvt+0xb0>
 8007f16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f18:	18eb      	adds	r3, r5, r3
 8007f1a:	9307      	str	r3, [sp, #28]
 8007f1c:	2f46      	cmp	r7, #70	; 0x46
 8007f1e:	d114      	bne.n	8007f4a <__cvt+0x92>
 8007f20:	782b      	ldrb	r3, [r5, #0]
 8007f22:	2b30      	cmp	r3, #48	; 0x30
 8007f24:	d10c      	bne.n	8007f40 <__cvt+0x88>
 8007f26:	2200      	movs	r2, #0
 8007f28:	2300      	movs	r3, #0
 8007f2a:	0020      	movs	r0, r4
 8007f2c:	0031      	movs	r1, r6
 8007f2e:	f7f8 fa8d 	bl	800044c <__aeabi_dcmpeq>
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d104      	bne.n	8007f40 <__cvt+0x88>
 8007f36:	2301      	movs	r3, #1
 8007f38:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f3a:	1a9b      	subs	r3, r3, r2
 8007f3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f42:	9a07      	ldr	r2, [sp, #28]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	18d3      	adds	r3, r2, r3
 8007f48:	9307      	str	r3, [sp, #28]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	0020      	movs	r0, r4
 8007f50:	0031      	movs	r1, r6
 8007f52:	f7f8 fa7b 	bl	800044c <__aeabi_dcmpeq>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d001      	beq.n	8007f5e <__cvt+0xa6>
 8007f5a:	9b07      	ldr	r3, [sp, #28]
 8007f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f5e:	2230      	movs	r2, #48	; 0x30
 8007f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f62:	9907      	ldr	r1, [sp, #28]
 8007f64:	428b      	cmp	r3, r1
 8007f66:	d306      	bcc.n	8007f76 <__cvt+0xbe>
 8007f68:	0028      	movs	r0, r5
 8007f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007f6e:	1b5b      	subs	r3, r3, r5
 8007f70:	6013      	str	r3, [r2, #0]
 8007f72:	b00b      	add	sp, #44	; 0x2c
 8007f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f76:	1c59      	adds	r1, r3, #1
 8007f78:	9109      	str	r1, [sp, #36]	; 0x24
 8007f7a:	701a      	strb	r2, [r3, #0]
 8007f7c:	e7f0      	b.n	8007f60 <__cvt+0xa8>

08007f7e <__exponent>:
 8007f7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f80:	1c83      	adds	r3, r0, #2
 8007f82:	b087      	sub	sp, #28
 8007f84:	9303      	str	r3, [sp, #12]
 8007f86:	0005      	movs	r5, r0
 8007f88:	000c      	movs	r4, r1
 8007f8a:	232b      	movs	r3, #43	; 0x2b
 8007f8c:	7002      	strb	r2, [r0, #0]
 8007f8e:	2900      	cmp	r1, #0
 8007f90:	da01      	bge.n	8007f96 <__exponent+0x18>
 8007f92:	424c      	negs	r4, r1
 8007f94:	3302      	adds	r3, #2
 8007f96:	706b      	strb	r3, [r5, #1]
 8007f98:	2c09      	cmp	r4, #9
 8007f9a:	dd31      	ble.n	8008000 <__exponent+0x82>
 8007f9c:	270a      	movs	r7, #10
 8007f9e:	ab04      	add	r3, sp, #16
 8007fa0:	1dde      	adds	r6, r3, #7
 8007fa2:	0020      	movs	r0, r4
 8007fa4:	0039      	movs	r1, r7
 8007fa6:	9601      	str	r6, [sp, #4]
 8007fa8:	f7f8 fa3a 	bl	8000420 <__aeabi_idivmod>
 8007fac:	3e01      	subs	r6, #1
 8007fae:	3130      	adds	r1, #48	; 0x30
 8007fb0:	0020      	movs	r0, r4
 8007fb2:	7031      	strb	r1, [r6, #0]
 8007fb4:	0039      	movs	r1, r7
 8007fb6:	9402      	str	r4, [sp, #8]
 8007fb8:	f7f8 f94c 	bl	8000254 <__divsi3>
 8007fbc:	9b02      	ldr	r3, [sp, #8]
 8007fbe:	0004      	movs	r4, r0
 8007fc0:	2b63      	cmp	r3, #99	; 0x63
 8007fc2:	dcee      	bgt.n	8007fa2 <__exponent+0x24>
 8007fc4:	9b01      	ldr	r3, [sp, #4]
 8007fc6:	3430      	adds	r4, #48	; 0x30
 8007fc8:	1e9a      	subs	r2, r3, #2
 8007fca:	0013      	movs	r3, r2
 8007fcc:	9903      	ldr	r1, [sp, #12]
 8007fce:	7014      	strb	r4, [r2, #0]
 8007fd0:	a804      	add	r0, sp, #16
 8007fd2:	3007      	adds	r0, #7
 8007fd4:	4298      	cmp	r0, r3
 8007fd6:	d80e      	bhi.n	8007ff6 <__exponent+0x78>
 8007fd8:	ab04      	add	r3, sp, #16
 8007fda:	3307      	adds	r3, #7
 8007fdc:	2000      	movs	r0, #0
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d804      	bhi.n	8007fec <__exponent+0x6e>
 8007fe2:	ab04      	add	r3, sp, #16
 8007fe4:	3009      	adds	r0, #9
 8007fe6:	18c0      	adds	r0, r0, r3
 8007fe8:	9b01      	ldr	r3, [sp, #4]
 8007fea:	1ac0      	subs	r0, r0, r3
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	1818      	adds	r0, r3, r0
 8007ff0:	1b40      	subs	r0, r0, r5
 8007ff2:	b007      	add	sp, #28
 8007ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff6:	7818      	ldrb	r0, [r3, #0]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	7008      	strb	r0, [r1, #0]
 8007ffc:	3101      	adds	r1, #1
 8007ffe:	e7e7      	b.n	8007fd0 <__exponent+0x52>
 8008000:	2330      	movs	r3, #48	; 0x30
 8008002:	18e4      	adds	r4, r4, r3
 8008004:	70ab      	strb	r3, [r5, #2]
 8008006:	1d28      	adds	r0, r5, #4
 8008008:	70ec      	strb	r4, [r5, #3]
 800800a:	e7f1      	b.n	8007ff0 <__exponent+0x72>

0800800c <_printf_float>:
 800800c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800800e:	b095      	sub	sp, #84	; 0x54
 8008010:	000c      	movs	r4, r1
 8008012:	9209      	str	r2, [sp, #36]	; 0x24
 8008014:	001e      	movs	r6, r3
 8008016:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008018:	0007      	movs	r7, r0
 800801a:	f001 fa81 	bl	8009520 <_localeconv_r>
 800801e:	6803      	ldr	r3, [r0, #0]
 8008020:	0018      	movs	r0, r3
 8008022:	930c      	str	r3, [sp, #48]	; 0x30
 8008024:	f7f8 f870 	bl	8000108 <strlen>
 8008028:	2300      	movs	r3, #0
 800802a:	9312      	str	r3, [sp, #72]	; 0x48
 800802c:	7e23      	ldrb	r3, [r4, #24]
 800802e:	2207      	movs	r2, #7
 8008030:	930a      	str	r3, [sp, #40]	; 0x28
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	900e      	str	r0, [sp, #56]	; 0x38
 8008036:	930d      	str	r3, [sp, #52]	; 0x34
 8008038:	990d      	ldr	r1, [sp, #52]	; 0x34
 800803a:	682b      	ldr	r3, [r5, #0]
 800803c:	05c9      	lsls	r1, r1, #23
 800803e:	d547      	bpl.n	80080d0 <_printf_float+0xc4>
 8008040:	189b      	adds	r3, r3, r2
 8008042:	4393      	bics	r3, r2
 8008044:	001a      	movs	r2, r3
 8008046:	3208      	adds	r2, #8
 8008048:	602a      	str	r2, [r5, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	64a2      	str	r2, [r4, #72]	; 0x48
 8008050:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008052:	2201      	movs	r2, #1
 8008054:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008056:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008058:	930b      	str	r3, [sp, #44]	; 0x2c
 800805a:	006b      	lsls	r3, r5, #1
 800805c:	085b      	lsrs	r3, r3, #1
 800805e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008060:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008062:	4ba7      	ldr	r3, [pc, #668]	; (8008300 <_printf_float+0x2f4>)
 8008064:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008066:	4252      	negs	r2, r2
 8008068:	f7fa fcfe 	bl	8002a68 <__aeabi_dcmpun>
 800806c:	2800      	cmp	r0, #0
 800806e:	d131      	bne.n	80080d4 <_printf_float+0xc8>
 8008070:	2201      	movs	r2, #1
 8008072:	4ba3      	ldr	r3, [pc, #652]	; (8008300 <_printf_float+0x2f4>)
 8008074:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008076:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008078:	4252      	negs	r2, r2
 800807a:	f7f8 f9f7 	bl	800046c <__aeabi_dcmple>
 800807e:	2800      	cmp	r0, #0
 8008080:	d128      	bne.n	80080d4 <_printf_float+0xc8>
 8008082:	2200      	movs	r2, #0
 8008084:	2300      	movs	r3, #0
 8008086:	0029      	movs	r1, r5
 8008088:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800808a:	f7f8 f9e5 	bl	8000458 <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	d003      	beq.n	800809a <_printf_float+0x8e>
 8008092:	0023      	movs	r3, r4
 8008094:	222d      	movs	r2, #45	; 0x2d
 8008096:	3343      	adds	r3, #67	; 0x43
 8008098:	701a      	strb	r2, [r3, #0]
 800809a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800809c:	4d99      	ldr	r5, [pc, #612]	; (8008304 <_printf_float+0x2f8>)
 800809e:	2b47      	cmp	r3, #71	; 0x47
 80080a0:	d900      	bls.n	80080a4 <_printf_float+0x98>
 80080a2:	4d99      	ldr	r5, [pc, #612]	; (8008308 <_printf_float+0x2fc>)
 80080a4:	2303      	movs	r3, #3
 80080a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080a8:	6123      	str	r3, [r4, #16]
 80080aa:	3301      	adds	r3, #1
 80080ac:	439a      	bics	r2, r3
 80080ae:	2300      	movs	r3, #0
 80080b0:	6022      	str	r2, [r4, #0]
 80080b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80080b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b6:	0021      	movs	r1, r4
 80080b8:	0038      	movs	r0, r7
 80080ba:	9600      	str	r6, [sp, #0]
 80080bc:	aa13      	add	r2, sp, #76	; 0x4c
 80080be:	f000 f9e7 	bl	8008490 <_printf_common>
 80080c2:	1c43      	adds	r3, r0, #1
 80080c4:	d000      	beq.n	80080c8 <_printf_float+0xbc>
 80080c6:	e0a2      	b.n	800820e <_printf_float+0x202>
 80080c8:	2001      	movs	r0, #1
 80080ca:	4240      	negs	r0, r0
 80080cc:	b015      	add	sp, #84	; 0x54
 80080ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d0:	3307      	adds	r3, #7
 80080d2:	e7b6      	b.n	8008042 <_printf_float+0x36>
 80080d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080d6:	002b      	movs	r3, r5
 80080d8:	0010      	movs	r0, r2
 80080da:	0029      	movs	r1, r5
 80080dc:	f7fa fcc4 	bl	8002a68 <__aeabi_dcmpun>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d00b      	beq.n	80080fc <_printf_float+0xf0>
 80080e4:	2d00      	cmp	r5, #0
 80080e6:	da03      	bge.n	80080f0 <_printf_float+0xe4>
 80080e8:	0023      	movs	r3, r4
 80080ea:	222d      	movs	r2, #45	; 0x2d
 80080ec:	3343      	adds	r3, #67	; 0x43
 80080ee:	701a      	strb	r2, [r3, #0]
 80080f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080f2:	4d86      	ldr	r5, [pc, #536]	; (800830c <_printf_float+0x300>)
 80080f4:	2b47      	cmp	r3, #71	; 0x47
 80080f6:	d9d5      	bls.n	80080a4 <_printf_float+0x98>
 80080f8:	4d85      	ldr	r5, [pc, #532]	; (8008310 <_printf_float+0x304>)
 80080fa:	e7d3      	b.n	80080a4 <_printf_float+0x98>
 80080fc:	2220      	movs	r2, #32
 80080fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008100:	6863      	ldr	r3, [r4, #4]
 8008102:	4391      	bics	r1, r2
 8008104:	910f      	str	r1, [sp, #60]	; 0x3c
 8008106:	1c5a      	adds	r2, r3, #1
 8008108:	d149      	bne.n	800819e <_printf_float+0x192>
 800810a:	3307      	adds	r3, #7
 800810c:	6063      	str	r3, [r4, #4]
 800810e:	2380      	movs	r3, #128	; 0x80
 8008110:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008112:	00db      	lsls	r3, r3, #3
 8008114:	4313      	orrs	r3, r2
 8008116:	2200      	movs	r2, #0
 8008118:	9206      	str	r2, [sp, #24]
 800811a:	aa12      	add	r2, sp, #72	; 0x48
 800811c:	9205      	str	r2, [sp, #20]
 800811e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008120:	a908      	add	r1, sp, #32
 8008122:	9204      	str	r2, [sp, #16]
 8008124:	aa11      	add	r2, sp, #68	; 0x44
 8008126:	9203      	str	r2, [sp, #12]
 8008128:	2223      	movs	r2, #35	; 0x23
 800812a:	6023      	str	r3, [r4, #0]
 800812c:	9301      	str	r3, [sp, #4]
 800812e:	6863      	ldr	r3, [r4, #4]
 8008130:	1852      	adds	r2, r2, r1
 8008132:	9202      	str	r2, [sp, #8]
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	0038      	movs	r0, r7
 8008138:	002b      	movs	r3, r5
 800813a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800813c:	f7ff febc 	bl	8007eb8 <__cvt>
 8008140:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008142:	0005      	movs	r5, r0
 8008144:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008146:	2b47      	cmp	r3, #71	; 0x47
 8008148:	d108      	bne.n	800815c <_printf_float+0x150>
 800814a:	1ccb      	adds	r3, r1, #3
 800814c:	db02      	blt.n	8008154 <_printf_float+0x148>
 800814e:	6863      	ldr	r3, [r4, #4]
 8008150:	4299      	cmp	r1, r3
 8008152:	dd48      	ble.n	80081e6 <_printf_float+0x1da>
 8008154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008156:	3b02      	subs	r3, #2
 8008158:	b2db      	uxtb	r3, r3
 800815a:	930a      	str	r3, [sp, #40]	; 0x28
 800815c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815e:	2b65      	cmp	r3, #101	; 0x65
 8008160:	d824      	bhi.n	80081ac <_printf_float+0x1a0>
 8008162:	0020      	movs	r0, r4
 8008164:	001a      	movs	r2, r3
 8008166:	3901      	subs	r1, #1
 8008168:	3050      	adds	r0, #80	; 0x50
 800816a:	9111      	str	r1, [sp, #68]	; 0x44
 800816c:	f7ff ff07 	bl	8007f7e <__exponent>
 8008170:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008172:	900b      	str	r0, [sp, #44]	; 0x2c
 8008174:	1813      	adds	r3, r2, r0
 8008176:	6123      	str	r3, [r4, #16]
 8008178:	2a01      	cmp	r2, #1
 800817a:	dc02      	bgt.n	8008182 <_printf_float+0x176>
 800817c:	6822      	ldr	r2, [r4, #0]
 800817e:	07d2      	lsls	r2, r2, #31
 8008180:	d501      	bpl.n	8008186 <_printf_float+0x17a>
 8008182:	3301      	adds	r3, #1
 8008184:	6123      	str	r3, [r4, #16]
 8008186:	2323      	movs	r3, #35	; 0x23
 8008188:	aa08      	add	r2, sp, #32
 800818a:	189b      	adds	r3, r3, r2
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d100      	bne.n	8008194 <_printf_float+0x188>
 8008192:	e78f      	b.n	80080b4 <_printf_float+0xa8>
 8008194:	0023      	movs	r3, r4
 8008196:	222d      	movs	r2, #45	; 0x2d
 8008198:	3343      	adds	r3, #67	; 0x43
 800819a:	701a      	strb	r2, [r3, #0]
 800819c:	e78a      	b.n	80080b4 <_printf_float+0xa8>
 800819e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081a0:	2a47      	cmp	r2, #71	; 0x47
 80081a2:	d1b4      	bne.n	800810e <_printf_float+0x102>
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1b2      	bne.n	800810e <_printf_float+0x102>
 80081a8:	3301      	adds	r3, #1
 80081aa:	e7af      	b.n	800810c <_printf_float+0x100>
 80081ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ae:	2b66      	cmp	r3, #102	; 0x66
 80081b0:	d11b      	bne.n	80081ea <_printf_float+0x1de>
 80081b2:	6863      	ldr	r3, [r4, #4]
 80081b4:	2900      	cmp	r1, #0
 80081b6:	dd0d      	ble.n	80081d4 <_printf_float+0x1c8>
 80081b8:	6121      	str	r1, [r4, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d102      	bne.n	80081c4 <_printf_float+0x1b8>
 80081be:	6822      	ldr	r2, [r4, #0]
 80081c0:	07d2      	lsls	r2, r2, #31
 80081c2:	d502      	bpl.n	80081ca <_printf_float+0x1be>
 80081c4:	3301      	adds	r3, #1
 80081c6:	1859      	adds	r1, r3, r1
 80081c8:	6121      	str	r1, [r4, #16]
 80081ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80081ce:	2300      	movs	r3, #0
 80081d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80081d2:	e7d8      	b.n	8008186 <_printf_float+0x17a>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d103      	bne.n	80081e0 <_printf_float+0x1d4>
 80081d8:	2201      	movs	r2, #1
 80081da:	6821      	ldr	r1, [r4, #0]
 80081dc:	4211      	tst	r1, r2
 80081de:	d000      	beq.n	80081e2 <_printf_float+0x1d6>
 80081e0:	1c9a      	adds	r2, r3, #2
 80081e2:	6122      	str	r2, [r4, #16]
 80081e4:	e7f1      	b.n	80081ca <_printf_float+0x1be>
 80081e6:	2367      	movs	r3, #103	; 0x67
 80081e8:	930a      	str	r3, [sp, #40]	; 0x28
 80081ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081ee:	4293      	cmp	r3, r2
 80081f0:	db06      	blt.n	8008200 <_printf_float+0x1f4>
 80081f2:	6822      	ldr	r2, [r4, #0]
 80081f4:	6123      	str	r3, [r4, #16]
 80081f6:	07d2      	lsls	r2, r2, #31
 80081f8:	d5e7      	bpl.n	80081ca <_printf_float+0x1be>
 80081fa:	3301      	adds	r3, #1
 80081fc:	6123      	str	r3, [r4, #16]
 80081fe:	e7e4      	b.n	80081ca <_printf_float+0x1be>
 8008200:	2101      	movs	r1, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	dc01      	bgt.n	800820a <_printf_float+0x1fe>
 8008206:	1849      	adds	r1, r1, r1
 8008208:	1ac9      	subs	r1, r1, r3
 800820a:	1852      	adds	r2, r2, r1
 800820c:	e7e9      	b.n	80081e2 <_printf_float+0x1d6>
 800820e:	6822      	ldr	r2, [r4, #0]
 8008210:	0553      	lsls	r3, r2, #21
 8008212:	d407      	bmi.n	8008224 <_printf_float+0x218>
 8008214:	6923      	ldr	r3, [r4, #16]
 8008216:	002a      	movs	r2, r5
 8008218:	0038      	movs	r0, r7
 800821a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800821c:	47b0      	blx	r6
 800821e:	1c43      	adds	r3, r0, #1
 8008220:	d128      	bne.n	8008274 <_printf_float+0x268>
 8008222:	e751      	b.n	80080c8 <_printf_float+0xbc>
 8008224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008226:	2b65      	cmp	r3, #101	; 0x65
 8008228:	d800      	bhi.n	800822c <_printf_float+0x220>
 800822a:	e0e1      	b.n	80083f0 <_printf_float+0x3e4>
 800822c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800822e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008230:	2200      	movs	r2, #0
 8008232:	2300      	movs	r3, #0
 8008234:	f7f8 f90a 	bl	800044c <__aeabi_dcmpeq>
 8008238:	2800      	cmp	r0, #0
 800823a:	d031      	beq.n	80082a0 <_printf_float+0x294>
 800823c:	2301      	movs	r3, #1
 800823e:	0038      	movs	r0, r7
 8008240:	4a34      	ldr	r2, [pc, #208]	; (8008314 <_printf_float+0x308>)
 8008242:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008244:	47b0      	blx	r6
 8008246:	1c43      	adds	r3, r0, #1
 8008248:	d100      	bne.n	800824c <_printf_float+0x240>
 800824a:	e73d      	b.n	80080c8 <_printf_float+0xbc>
 800824c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800824e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008250:	4293      	cmp	r3, r2
 8008252:	db02      	blt.n	800825a <_printf_float+0x24e>
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	07db      	lsls	r3, r3, #31
 8008258:	d50c      	bpl.n	8008274 <_printf_float+0x268>
 800825a:	0038      	movs	r0, r7
 800825c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800825e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008260:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008262:	47b0      	blx	r6
 8008264:	2500      	movs	r5, #0
 8008266:	1c43      	adds	r3, r0, #1
 8008268:	d100      	bne.n	800826c <_printf_float+0x260>
 800826a:	e72d      	b.n	80080c8 <_printf_float+0xbc>
 800826c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800826e:	3b01      	subs	r3, #1
 8008270:	42ab      	cmp	r3, r5
 8008272:	dc0a      	bgt.n	800828a <_printf_float+0x27e>
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	079b      	lsls	r3, r3, #30
 8008278:	d500      	bpl.n	800827c <_printf_float+0x270>
 800827a:	e106      	b.n	800848a <_printf_float+0x47e>
 800827c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800827e:	68e0      	ldr	r0, [r4, #12]
 8008280:	4298      	cmp	r0, r3
 8008282:	db00      	blt.n	8008286 <_printf_float+0x27a>
 8008284:	e722      	b.n	80080cc <_printf_float+0xc0>
 8008286:	0018      	movs	r0, r3
 8008288:	e720      	b.n	80080cc <_printf_float+0xc0>
 800828a:	0022      	movs	r2, r4
 800828c:	2301      	movs	r3, #1
 800828e:	0038      	movs	r0, r7
 8008290:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008292:	321a      	adds	r2, #26
 8008294:	47b0      	blx	r6
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	d100      	bne.n	800829c <_printf_float+0x290>
 800829a:	e715      	b.n	80080c8 <_printf_float+0xbc>
 800829c:	3501      	adds	r5, #1
 800829e:	e7e5      	b.n	800826c <_printf_float+0x260>
 80082a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	dc38      	bgt.n	8008318 <_printf_float+0x30c>
 80082a6:	2301      	movs	r3, #1
 80082a8:	0038      	movs	r0, r7
 80082aa:	4a1a      	ldr	r2, [pc, #104]	; (8008314 <_printf_float+0x308>)
 80082ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082ae:	47b0      	blx	r6
 80082b0:	1c43      	adds	r3, r0, #1
 80082b2:	d100      	bne.n	80082b6 <_printf_float+0x2aa>
 80082b4:	e708      	b.n	80080c8 <_printf_float+0xbc>
 80082b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082ba:	4313      	orrs	r3, r2
 80082bc:	d102      	bne.n	80082c4 <_printf_float+0x2b8>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	07db      	lsls	r3, r3, #31
 80082c2:	d5d7      	bpl.n	8008274 <_printf_float+0x268>
 80082c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082c6:	0038      	movs	r0, r7
 80082c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082cc:	47b0      	blx	r6
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	d100      	bne.n	80082d4 <_printf_float+0x2c8>
 80082d2:	e6f9      	b.n	80080c8 <_printf_float+0xbc>
 80082d4:	2300      	movs	r3, #0
 80082d6:	930a      	str	r3, [sp, #40]	; 0x28
 80082d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082dc:	425b      	negs	r3, r3
 80082de:	4293      	cmp	r3, r2
 80082e0:	dc01      	bgt.n	80082e6 <_printf_float+0x2da>
 80082e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082e4:	e797      	b.n	8008216 <_printf_float+0x20a>
 80082e6:	0022      	movs	r2, r4
 80082e8:	2301      	movs	r3, #1
 80082ea:	0038      	movs	r0, r7
 80082ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082ee:	321a      	adds	r2, #26
 80082f0:	47b0      	blx	r6
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	d100      	bne.n	80082f8 <_printf_float+0x2ec>
 80082f6:	e6e7      	b.n	80080c8 <_printf_float+0xbc>
 80082f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082fa:	3301      	adds	r3, #1
 80082fc:	e7eb      	b.n	80082d6 <_printf_float+0x2ca>
 80082fe:	46c0      	nop			; (mov r8, r8)
 8008300:	7fefffff 	.word	0x7fefffff
 8008304:	0800bdac 	.word	0x0800bdac
 8008308:	0800bdb0 	.word	0x0800bdb0
 800830c:	0800bdb4 	.word	0x0800bdb4
 8008310:	0800bdb8 	.word	0x0800bdb8
 8008314:	0800bdbc 	.word	0x0800bdbc
 8008318:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800831a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800831c:	920a      	str	r2, [sp, #40]	; 0x28
 800831e:	429a      	cmp	r2, r3
 8008320:	dd00      	ble.n	8008324 <_printf_float+0x318>
 8008322:	930a      	str	r3, [sp, #40]	; 0x28
 8008324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008326:	2b00      	cmp	r3, #0
 8008328:	dc3c      	bgt.n	80083a4 <_printf_float+0x398>
 800832a:	2300      	movs	r3, #0
 800832c:	930d      	str	r3, [sp, #52]	; 0x34
 800832e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008330:	43db      	mvns	r3, r3
 8008332:	17db      	asrs	r3, r3, #31
 8008334:	930f      	str	r3, [sp, #60]	; 0x3c
 8008336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800833a:	930b      	str	r3, [sp, #44]	; 0x2c
 800833c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800833e:	4013      	ands	r3, r2
 8008340:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008346:	4293      	cmp	r3, r2
 8008348:	dc34      	bgt.n	80083b4 <_printf_float+0x3a8>
 800834a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800834c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800834e:	4293      	cmp	r3, r2
 8008350:	db3d      	blt.n	80083ce <_printf_float+0x3c2>
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	07db      	lsls	r3, r3, #31
 8008356:	d43a      	bmi.n	80083ce <_printf_float+0x3c2>
 8008358:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800835a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800835c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	1a52      	subs	r2, r2, r1
 8008362:	920a      	str	r2, [sp, #40]	; 0x28
 8008364:	429a      	cmp	r2, r3
 8008366:	dd00      	ble.n	800836a <_printf_float+0x35e>
 8008368:	930a      	str	r3, [sp, #40]	; 0x28
 800836a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800836c:	2b00      	cmp	r3, #0
 800836e:	dc36      	bgt.n	80083de <_printf_float+0x3d2>
 8008370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008372:	2500      	movs	r5, #0
 8008374:	43db      	mvns	r3, r3
 8008376:	17db      	asrs	r3, r3, #31
 8008378:	930b      	str	r3, [sp, #44]	; 0x2c
 800837a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800837c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800837e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008380:	1a9b      	subs	r3, r3, r2
 8008382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008384:	400a      	ands	r2, r1
 8008386:	1a9b      	subs	r3, r3, r2
 8008388:	42ab      	cmp	r3, r5
 800838a:	dc00      	bgt.n	800838e <_printf_float+0x382>
 800838c:	e772      	b.n	8008274 <_printf_float+0x268>
 800838e:	0022      	movs	r2, r4
 8008390:	2301      	movs	r3, #1
 8008392:	0038      	movs	r0, r7
 8008394:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008396:	321a      	adds	r2, #26
 8008398:	47b0      	blx	r6
 800839a:	1c43      	adds	r3, r0, #1
 800839c:	d100      	bne.n	80083a0 <_printf_float+0x394>
 800839e:	e693      	b.n	80080c8 <_printf_float+0xbc>
 80083a0:	3501      	adds	r5, #1
 80083a2:	e7ea      	b.n	800837a <_printf_float+0x36e>
 80083a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a6:	002a      	movs	r2, r5
 80083a8:	0038      	movs	r0, r7
 80083aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083ac:	47b0      	blx	r6
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	d1bb      	bne.n	800832a <_printf_float+0x31e>
 80083b2:	e689      	b.n	80080c8 <_printf_float+0xbc>
 80083b4:	0022      	movs	r2, r4
 80083b6:	2301      	movs	r3, #1
 80083b8:	0038      	movs	r0, r7
 80083ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083bc:	321a      	adds	r2, #26
 80083be:	47b0      	blx	r6
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d100      	bne.n	80083c6 <_printf_float+0x3ba>
 80083c4:	e680      	b.n	80080c8 <_printf_float+0xbc>
 80083c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083c8:	3301      	adds	r3, #1
 80083ca:	930d      	str	r3, [sp, #52]	; 0x34
 80083cc:	e7b3      	b.n	8008336 <_printf_float+0x32a>
 80083ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083d0:	0038      	movs	r0, r7
 80083d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083d6:	47b0      	blx	r6
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d1bd      	bne.n	8008358 <_printf_float+0x34c>
 80083dc:	e674      	b.n	80080c8 <_printf_float+0xbc>
 80083de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083e0:	0038      	movs	r0, r7
 80083e2:	18ea      	adds	r2, r5, r3
 80083e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083e8:	47b0      	blx	r6
 80083ea:	1c43      	adds	r3, r0, #1
 80083ec:	d1c0      	bne.n	8008370 <_printf_float+0x364>
 80083ee:	e66b      	b.n	80080c8 <_printf_float+0xbc>
 80083f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	dc02      	bgt.n	80083fc <_printf_float+0x3f0>
 80083f6:	2301      	movs	r3, #1
 80083f8:	421a      	tst	r2, r3
 80083fa:	d034      	beq.n	8008466 <_printf_float+0x45a>
 80083fc:	2301      	movs	r3, #1
 80083fe:	002a      	movs	r2, r5
 8008400:	0038      	movs	r0, r7
 8008402:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008404:	47b0      	blx	r6
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	d100      	bne.n	800840c <_printf_float+0x400>
 800840a:	e65d      	b.n	80080c8 <_printf_float+0xbc>
 800840c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800840e:	0038      	movs	r0, r7
 8008410:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008412:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008414:	47b0      	blx	r6
 8008416:	1c43      	adds	r3, r0, #1
 8008418:	d100      	bne.n	800841c <_printf_float+0x410>
 800841a:	e655      	b.n	80080c8 <_printf_float+0xbc>
 800841c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800841e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008420:	2200      	movs	r2, #0
 8008422:	2300      	movs	r3, #0
 8008424:	f7f8 f812 	bl	800044c <__aeabi_dcmpeq>
 8008428:	2800      	cmp	r0, #0
 800842a:	d11a      	bne.n	8008462 <_printf_float+0x456>
 800842c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800842e:	1c6a      	adds	r2, r5, #1
 8008430:	3b01      	subs	r3, #1
 8008432:	0038      	movs	r0, r7
 8008434:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008436:	47b0      	blx	r6
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	d10e      	bne.n	800845a <_printf_float+0x44e>
 800843c:	e644      	b.n	80080c8 <_printf_float+0xbc>
 800843e:	0022      	movs	r2, r4
 8008440:	2301      	movs	r3, #1
 8008442:	0038      	movs	r0, r7
 8008444:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008446:	321a      	adds	r2, #26
 8008448:	47b0      	blx	r6
 800844a:	1c43      	adds	r3, r0, #1
 800844c:	d100      	bne.n	8008450 <_printf_float+0x444>
 800844e:	e63b      	b.n	80080c8 <_printf_float+0xbc>
 8008450:	3501      	adds	r5, #1
 8008452:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008454:	3b01      	subs	r3, #1
 8008456:	42ab      	cmp	r3, r5
 8008458:	dcf1      	bgt.n	800843e <_printf_float+0x432>
 800845a:	0022      	movs	r2, r4
 800845c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800845e:	3250      	adds	r2, #80	; 0x50
 8008460:	e6da      	b.n	8008218 <_printf_float+0x20c>
 8008462:	2500      	movs	r5, #0
 8008464:	e7f5      	b.n	8008452 <_printf_float+0x446>
 8008466:	002a      	movs	r2, r5
 8008468:	e7e3      	b.n	8008432 <_printf_float+0x426>
 800846a:	0022      	movs	r2, r4
 800846c:	2301      	movs	r3, #1
 800846e:	0038      	movs	r0, r7
 8008470:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008472:	3219      	adds	r2, #25
 8008474:	47b0      	blx	r6
 8008476:	1c43      	adds	r3, r0, #1
 8008478:	d100      	bne.n	800847c <_printf_float+0x470>
 800847a:	e625      	b.n	80080c8 <_printf_float+0xbc>
 800847c:	3501      	adds	r5, #1
 800847e:	68e3      	ldr	r3, [r4, #12]
 8008480:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008482:	1a9b      	subs	r3, r3, r2
 8008484:	42ab      	cmp	r3, r5
 8008486:	dcf0      	bgt.n	800846a <_printf_float+0x45e>
 8008488:	e6f8      	b.n	800827c <_printf_float+0x270>
 800848a:	2500      	movs	r5, #0
 800848c:	e7f7      	b.n	800847e <_printf_float+0x472>
 800848e:	46c0      	nop			; (mov r8, r8)

08008490 <_printf_common>:
 8008490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008492:	0015      	movs	r5, r2
 8008494:	9301      	str	r3, [sp, #4]
 8008496:	688a      	ldr	r2, [r1, #8]
 8008498:	690b      	ldr	r3, [r1, #16]
 800849a:	000c      	movs	r4, r1
 800849c:	9000      	str	r0, [sp, #0]
 800849e:	4293      	cmp	r3, r2
 80084a0:	da00      	bge.n	80084a4 <_printf_common+0x14>
 80084a2:	0013      	movs	r3, r2
 80084a4:	0022      	movs	r2, r4
 80084a6:	602b      	str	r3, [r5, #0]
 80084a8:	3243      	adds	r2, #67	; 0x43
 80084aa:	7812      	ldrb	r2, [r2, #0]
 80084ac:	2a00      	cmp	r2, #0
 80084ae:	d001      	beq.n	80084b4 <_printf_common+0x24>
 80084b0:	3301      	adds	r3, #1
 80084b2:	602b      	str	r3, [r5, #0]
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	069b      	lsls	r3, r3, #26
 80084b8:	d502      	bpl.n	80084c0 <_printf_common+0x30>
 80084ba:	682b      	ldr	r3, [r5, #0]
 80084bc:	3302      	adds	r3, #2
 80084be:	602b      	str	r3, [r5, #0]
 80084c0:	6822      	ldr	r2, [r4, #0]
 80084c2:	2306      	movs	r3, #6
 80084c4:	0017      	movs	r7, r2
 80084c6:	401f      	ands	r7, r3
 80084c8:	421a      	tst	r2, r3
 80084ca:	d027      	beq.n	800851c <_printf_common+0x8c>
 80084cc:	0023      	movs	r3, r4
 80084ce:	3343      	adds	r3, #67	; 0x43
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	1e5a      	subs	r2, r3, #1
 80084d4:	4193      	sbcs	r3, r2
 80084d6:	6822      	ldr	r2, [r4, #0]
 80084d8:	0692      	lsls	r2, r2, #26
 80084da:	d430      	bmi.n	800853e <_printf_common+0xae>
 80084dc:	0022      	movs	r2, r4
 80084de:	9901      	ldr	r1, [sp, #4]
 80084e0:	9800      	ldr	r0, [sp, #0]
 80084e2:	9e08      	ldr	r6, [sp, #32]
 80084e4:	3243      	adds	r2, #67	; 0x43
 80084e6:	47b0      	blx	r6
 80084e8:	1c43      	adds	r3, r0, #1
 80084ea:	d025      	beq.n	8008538 <_printf_common+0xa8>
 80084ec:	2306      	movs	r3, #6
 80084ee:	6820      	ldr	r0, [r4, #0]
 80084f0:	682a      	ldr	r2, [r5, #0]
 80084f2:	68e1      	ldr	r1, [r4, #12]
 80084f4:	2500      	movs	r5, #0
 80084f6:	4003      	ands	r3, r0
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	d103      	bne.n	8008504 <_printf_common+0x74>
 80084fc:	1a8d      	subs	r5, r1, r2
 80084fe:	43eb      	mvns	r3, r5
 8008500:	17db      	asrs	r3, r3, #31
 8008502:	401d      	ands	r5, r3
 8008504:	68a3      	ldr	r3, [r4, #8]
 8008506:	6922      	ldr	r2, [r4, #16]
 8008508:	4293      	cmp	r3, r2
 800850a:	dd01      	ble.n	8008510 <_printf_common+0x80>
 800850c:	1a9b      	subs	r3, r3, r2
 800850e:	18ed      	adds	r5, r5, r3
 8008510:	2700      	movs	r7, #0
 8008512:	42bd      	cmp	r5, r7
 8008514:	d120      	bne.n	8008558 <_printf_common+0xc8>
 8008516:	2000      	movs	r0, #0
 8008518:	e010      	b.n	800853c <_printf_common+0xac>
 800851a:	3701      	adds	r7, #1
 800851c:	68e3      	ldr	r3, [r4, #12]
 800851e:	682a      	ldr	r2, [r5, #0]
 8008520:	1a9b      	subs	r3, r3, r2
 8008522:	42bb      	cmp	r3, r7
 8008524:	ddd2      	ble.n	80084cc <_printf_common+0x3c>
 8008526:	0022      	movs	r2, r4
 8008528:	2301      	movs	r3, #1
 800852a:	9901      	ldr	r1, [sp, #4]
 800852c:	9800      	ldr	r0, [sp, #0]
 800852e:	9e08      	ldr	r6, [sp, #32]
 8008530:	3219      	adds	r2, #25
 8008532:	47b0      	blx	r6
 8008534:	1c43      	adds	r3, r0, #1
 8008536:	d1f0      	bne.n	800851a <_printf_common+0x8a>
 8008538:	2001      	movs	r0, #1
 800853a:	4240      	negs	r0, r0
 800853c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800853e:	2030      	movs	r0, #48	; 0x30
 8008540:	18e1      	adds	r1, r4, r3
 8008542:	3143      	adds	r1, #67	; 0x43
 8008544:	7008      	strb	r0, [r1, #0]
 8008546:	0021      	movs	r1, r4
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	3145      	adds	r1, #69	; 0x45
 800854c:	7809      	ldrb	r1, [r1, #0]
 800854e:	18a2      	adds	r2, r4, r2
 8008550:	3243      	adds	r2, #67	; 0x43
 8008552:	3302      	adds	r3, #2
 8008554:	7011      	strb	r1, [r2, #0]
 8008556:	e7c1      	b.n	80084dc <_printf_common+0x4c>
 8008558:	0022      	movs	r2, r4
 800855a:	2301      	movs	r3, #1
 800855c:	9901      	ldr	r1, [sp, #4]
 800855e:	9800      	ldr	r0, [sp, #0]
 8008560:	9e08      	ldr	r6, [sp, #32]
 8008562:	321a      	adds	r2, #26
 8008564:	47b0      	blx	r6
 8008566:	1c43      	adds	r3, r0, #1
 8008568:	d0e6      	beq.n	8008538 <_printf_common+0xa8>
 800856a:	3701      	adds	r7, #1
 800856c:	e7d1      	b.n	8008512 <_printf_common+0x82>
	...

08008570 <_printf_i>:
 8008570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008572:	b08b      	sub	sp, #44	; 0x2c
 8008574:	9206      	str	r2, [sp, #24]
 8008576:	000a      	movs	r2, r1
 8008578:	3243      	adds	r2, #67	; 0x43
 800857a:	9307      	str	r3, [sp, #28]
 800857c:	9005      	str	r0, [sp, #20]
 800857e:	9204      	str	r2, [sp, #16]
 8008580:	7e0a      	ldrb	r2, [r1, #24]
 8008582:	000c      	movs	r4, r1
 8008584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008586:	2a78      	cmp	r2, #120	; 0x78
 8008588:	d807      	bhi.n	800859a <_printf_i+0x2a>
 800858a:	2a62      	cmp	r2, #98	; 0x62
 800858c:	d809      	bhi.n	80085a2 <_printf_i+0x32>
 800858e:	2a00      	cmp	r2, #0
 8008590:	d100      	bne.n	8008594 <_printf_i+0x24>
 8008592:	e0c1      	b.n	8008718 <_printf_i+0x1a8>
 8008594:	2a58      	cmp	r2, #88	; 0x58
 8008596:	d100      	bne.n	800859a <_printf_i+0x2a>
 8008598:	e08c      	b.n	80086b4 <_printf_i+0x144>
 800859a:	0026      	movs	r6, r4
 800859c:	3642      	adds	r6, #66	; 0x42
 800859e:	7032      	strb	r2, [r6, #0]
 80085a0:	e022      	b.n	80085e8 <_printf_i+0x78>
 80085a2:	0010      	movs	r0, r2
 80085a4:	3863      	subs	r0, #99	; 0x63
 80085a6:	2815      	cmp	r0, #21
 80085a8:	d8f7      	bhi.n	800859a <_printf_i+0x2a>
 80085aa:	f7f7 fdbf 	bl	800012c <__gnu_thumb1_case_shi>
 80085ae:	0016      	.short	0x0016
 80085b0:	fff6001f 	.word	0xfff6001f
 80085b4:	fff6fff6 	.word	0xfff6fff6
 80085b8:	001ffff6 	.word	0x001ffff6
 80085bc:	fff6fff6 	.word	0xfff6fff6
 80085c0:	fff6fff6 	.word	0xfff6fff6
 80085c4:	003600a8 	.word	0x003600a8
 80085c8:	fff6009a 	.word	0xfff6009a
 80085cc:	00b9fff6 	.word	0x00b9fff6
 80085d0:	0036fff6 	.word	0x0036fff6
 80085d4:	fff6fff6 	.word	0xfff6fff6
 80085d8:	009e      	.short	0x009e
 80085da:	0026      	movs	r6, r4
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	3642      	adds	r6, #66	; 0x42
 80085e0:	1d11      	adds	r1, r2, #4
 80085e2:	6019      	str	r1, [r3, #0]
 80085e4:	6813      	ldr	r3, [r2, #0]
 80085e6:	7033      	strb	r3, [r6, #0]
 80085e8:	2301      	movs	r3, #1
 80085ea:	e0a7      	b.n	800873c <_printf_i+0x1cc>
 80085ec:	6808      	ldr	r0, [r1, #0]
 80085ee:	6819      	ldr	r1, [r3, #0]
 80085f0:	1d0a      	adds	r2, r1, #4
 80085f2:	0605      	lsls	r5, r0, #24
 80085f4:	d50b      	bpl.n	800860e <_printf_i+0x9e>
 80085f6:	680d      	ldr	r5, [r1, #0]
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	2d00      	cmp	r5, #0
 80085fc:	da03      	bge.n	8008606 <_printf_i+0x96>
 80085fe:	232d      	movs	r3, #45	; 0x2d
 8008600:	9a04      	ldr	r2, [sp, #16]
 8008602:	426d      	negs	r5, r5
 8008604:	7013      	strb	r3, [r2, #0]
 8008606:	4b61      	ldr	r3, [pc, #388]	; (800878c <_printf_i+0x21c>)
 8008608:	270a      	movs	r7, #10
 800860a:	9303      	str	r3, [sp, #12]
 800860c:	e01b      	b.n	8008646 <_printf_i+0xd6>
 800860e:	680d      	ldr	r5, [r1, #0]
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	0641      	lsls	r1, r0, #25
 8008614:	d5f1      	bpl.n	80085fa <_printf_i+0x8a>
 8008616:	b22d      	sxth	r5, r5
 8008618:	e7ef      	b.n	80085fa <_printf_i+0x8a>
 800861a:	680d      	ldr	r5, [r1, #0]
 800861c:	6819      	ldr	r1, [r3, #0]
 800861e:	1d08      	adds	r0, r1, #4
 8008620:	6018      	str	r0, [r3, #0]
 8008622:	062e      	lsls	r6, r5, #24
 8008624:	d501      	bpl.n	800862a <_printf_i+0xba>
 8008626:	680d      	ldr	r5, [r1, #0]
 8008628:	e003      	b.n	8008632 <_printf_i+0xc2>
 800862a:	066d      	lsls	r5, r5, #25
 800862c:	d5fb      	bpl.n	8008626 <_printf_i+0xb6>
 800862e:	680d      	ldr	r5, [r1, #0]
 8008630:	b2ad      	uxth	r5, r5
 8008632:	4b56      	ldr	r3, [pc, #344]	; (800878c <_printf_i+0x21c>)
 8008634:	2708      	movs	r7, #8
 8008636:	9303      	str	r3, [sp, #12]
 8008638:	2a6f      	cmp	r2, #111	; 0x6f
 800863a:	d000      	beq.n	800863e <_printf_i+0xce>
 800863c:	3702      	adds	r7, #2
 800863e:	0023      	movs	r3, r4
 8008640:	2200      	movs	r2, #0
 8008642:	3343      	adds	r3, #67	; 0x43
 8008644:	701a      	strb	r2, [r3, #0]
 8008646:	6863      	ldr	r3, [r4, #4]
 8008648:	60a3      	str	r3, [r4, #8]
 800864a:	2b00      	cmp	r3, #0
 800864c:	db03      	blt.n	8008656 <_printf_i+0xe6>
 800864e:	2204      	movs	r2, #4
 8008650:	6821      	ldr	r1, [r4, #0]
 8008652:	4391      	bics	r1, r2
 8008654:	6021      	str	r1, [r4, #0]
 8008656:	2d00      	cmp	r5, #0
 8008658:	d102      	bne.n	8008660 <_printf_i+0xf0>
 800865a:	9e04      	ldr	r6, [sp, #16]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00c      	beq.n	800867a <_printf_i+0x10a>
 8008660:	9e04      	ldr	r6, [sp, #16]
 8008662:	0028      	movs	r0, r5
 8008664:	0039      	movs	r1, r7
 8008666:	f7f7 fdf1 	bl	800024c <__aeabi_uidivmod>
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	3e01      	subs	r6, #1
 800866e:	5c5b      	ldrb	r3, [r3, r1]
 8008670:	7033      	strb	r3, [r6, #0]
 8008672:	002b      	movs	r3, r5
 8008674:	0005      	movs	r5, r0
 8008676:	429f      	cmp	r7, r3
 8008678:	d9f3      	bls.n	8008662 <_printf_i+0xf2>
 800867a:	2f08      	cmp	r7, #8
 800867c:	d109      	bne.n	8008692 <_printf_i+0x122>
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	07db      	lsls	r3, r3, #31
 8008682:	d506      	bpl.n	8008692 <_printf_i+0x122>
 8008684:	6863      	ldr	r3, [r4, #4]
 8008686:	6922      	ldr	r2, [r4, #16]
 8008688:	4293      	cmp	r3, r2
 800868a:	dc02      	bgt.n	8008692 <_printf_i+0x122>
 800868c:	2330      	movs	r3, #48	; 0x30
 800868e:	3e01      	subs	r6, #1
 8008690:	7033      	strb	r3, [r6, #0]
 8008692:	9b04      	ldr	r3, [sp, #16]
 8008694:	1b9b      	subs	r3, r3, r6
 8008696:	6123      	str	r3, [r4, #16]
 8008698:	9b07      	ldr	r3, [sp, #28]
 800869a:	0021      	movs	r1, r4
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	9805      	ldr	r0, [sp, #20]
 80086a0:	9b06      	ldr	r3, [sp, #24]
 80086a2:	aa09      	add	r2, sp, #36	; 0x24
 80086a4:	f7ff fef4 	bl	8008490 <_printf_common>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	d14c      	bne.n	8008746 <_printf_i+0x1d6>
 80086ac:	2001      	movs	r0, #1
 80086ae:	4240      	negs	r0, r0
 80086b0:	b00b      	add	sp, #44	; 0x2c
 80086b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086b4:	3145      	adds	r1, #69	; 0x45
 80086b6:	700a      	strb	r2, [r1, #0]
 80086b8:	4a34      	ldr	r2, [pc, #208]	; (800878c <_printf_i+0x21c>)
 80086ba:	9203      	str	r2, [sp, #12]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	6821      	ldr	r1, [r4, #0]
 80086c0:	ca20      	ldmia	r2!, {r5}
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	0608      	lsls	r0, r1, #24
 80086c6:	d516      	bpl.n	80086f6 <_printf_i+0x186>
 80086c8:	07cb      	lsls	r3, r1, #31
 80086ca:	d502      	bpl.n	80086d2 <_printf_i+0x162>
 80086cc:	2320      	movs	r3, #32
 80086ce:	4319      	orrs	r1, r3
 80086d0:	6021      	str	r1, [r4, #0]
 80086d2:	2710      	movs	r7, #16
 80086d4:	2d00      	cmp	r5, #0
 80086d6:	d1b2      	bne.n	800863e <_printf_i+0xce>
 80086d8:	2320      	movs	r3, #32
 80086da:	6822      	ldr	r2, [r4, #0]
 80086dc:	439a      	bics	r2, r3
 80086de:	6022      	str	r2, [r4, #0]
 80086e0:	e7ad      	b.n	800863e <_printf_i+0xce>
 80086e2:	2220      	movs	r2, #32
 80086e4:	6809      	ldr	r1, [r1, #0]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	6022      	str	r2, [r4, #0]
 80086ea:	0022      	movs	r2, r4
 80086ec:	2178      	movs	r1, #120	; 0x78
 80086ee:	3245      	adds	r2, #69	; 0x45
 80086f0:	7011      	strb	r1, [r2, #0]
 80086f2:	4a27      	ldr	r2, [pc, #156]	; (8008790 <_printf_i+0x220>)
 80086f4:	e7e1      	b.n	80086ba <_printf_i+0x14a>
 80086f6:	0648      	lsls	r0, r1, #25
 80086f8:	d5e6      	bpl.n	80086c8 <_printf_i+0x158>
 80086fa:	b2ad      	uxth	r5, r5
 80086fc:	e7e4      	b.n	80086c8 <_printf_i+0x158>
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	680d      	ldr	r5, [r1, #0]
 8008702:	1d10      	adds	r0, r2, #4
 8008704:	6949      	ldr	r1, [r1, #20]
 8008706:	6018      	str	r0, [r3, #0]
 8008708:	6813      	ldr	r3, [r2, #0]
 800870a:	062e      	lsls	r6, r5, #24
 800870c:	d501      	bpl.n	8008712 <_printf_i+0x1a2>
 800870e:	6019      	str	r1, [r3, #0]
 8008710:	e002      	b.n	8008718 <_printf_i+0x1a8>
 8008712:	066d      	lsls	r5, r5, #25
 8008714:	d5fb      	bpl.n	800870e <_printf_i+0x19e>
 8008716:	8019      	strh	r1, [r3, #0]
 8008718:	2300      	movs	r3, #0
 800871a:	9e04      	ldr	r6, [sp, #16]
 800871c:	6123      	str	r3, [r4, #16]
 800871e:	e7bb      	b.n	8008698 <_printf_i+0x128>
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	1d11      	adds	r1, r2, #4
 8008724:	6019      	str	r1, [r3, #0]
 8008726:	6816      	ldr	r6, [r2, #0]
 8008728:	2100      	movs	r1, #0
 800872a:	0030      	movs	r0, r6
 800872c:	6862      	ldr	r2, [r4, #4]
 800872e:	f000 ff05 	bl	800953c <memchr>
 8008732:	2800      	cmp	r0, #0
 8008734:	d001      	beq.n	800873a <_printf_i+0x1ca>
 8008736:	1b80      	subs	r0, r0, r6
 8008738:	6060      	str	r0, [r4, #4]
 800873a:	6863      	ldr	r3, [r4, #4]
 800873c:	6123      	str	r3, [r4, #16]
 800873e:	2300      	movs	r3, #0
 8008740:	9a04      	ldr	r2, [sp, #16]
 8008742:	7013      	strb	r3, [r2, #0]
 8008744:	e7a8      	b.n	8008698 <_printf_i+0x128>
 8008746:	6923      	ldr	r3, [r4, #16]
 8008748:	0032      	movs	r2, r6
 800874a:	9906      	ldr	r1, [sp, #24]
 800874c:	9805      	ldr	r0, [sp, #20]
 800874e:	9d07      	ldr	r5, [sp, #28]
 8008750:	47a8      	blx	r5
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	d0aa      	beq.n	80086ac <_printf_i+0x13c>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	079b      	lsls	r3, r3, #30
 800875a:	d415      	bmi.n	8008788 <_printf_i+0x218>
 800875c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875e:	68e0      	ldr	r0, [r4, #12]
 8008760:	4298      	cmp	r0, r3
 8008762:	daa5      	bge.n	80086b0 <_printf_i+0x140>
 8008764:	0018      	movs	r0, r3
 8008766:	e7a3      	b.n	80086b0 <_printf_i+0x140>
 8008768:	0022      	movs	r2, r4
 800876a:	2301      	movs	r3, #1
 800876c:	9906      	ldr	r1, [sp, #24]
 800876e:	9805      	ldr	r0, [sp, #20]
 8008770:	9e07      	ldr	r6, [sp, #28]
 8008772:	3219      	adds	r2, #25
 8008774:	47b0      	blx	r6
 8008776:	1c43      	adds	r3, r0, #1
 8008778:	d098      	beq.n	80086ac <_printf_i+0x13c>
 800877a:	3501      	adds	r5, #1
 800877c:	68e3      	ldr	r3, [r4, #12]
 800877e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008780:	1a9b      	subs	r3, r3, r2
 8008782:	42ab      	cmp	r3, r5
 8008784:	dcf0      	bgt.n	8008768 <_printf_i+0x1f8>
 8008786:	e7e9      	b.n	800875c <_printf_i+0x1ec>
 8008788:	2500      	movs	r5, #0
 800878a:	e7f7      	b.n	800877c <_printf_i+0x20c>
 800878c:	0800bdbe 	.word	0x0800bdbe
 8008790:	0800bdcf 	.word	0x0800bdcf

08008794 <siprintf>:
 8008794:	b40e      	push	{r1, r2, r3}
 8008796:	b500      	push	{lr}
 8008798:	490b      	ldr	r1, [pc, #44]	; (80087c8 <siprintf+0x34>)
 800879a:	b09c      	sub	sp, #112	; 0x70
 800879c:	ab1d      	add	r3, sp, #116	; 0x74
 800879e:	9002      	str	r0, [sp, #8]
 80087a0:	9006      	str	r0, [sp, #24]
 80087a2:	9107      	str	r1, [sp, #28]
 80087a4:	9104      	str	r1, [sp, #16]
 80087a6:	4809      	ldr	r0, [pc, #36]	; (80087cc <siprintf+0x38>)
 80087a8:	4909      	ldr	r1, [pc, #36]	; (80087d0 <siprintf+0x3c>)
 80087aa:	cb04      	ldmia	r3!, {r2}
 80087ac:	9105      	str	r1, [sp, #20]
 80087ae:	6800      	ldr	r0, [r0, #0]
 80087b0:	a902      	add	r1, sp, #8
 80087b2:	9301      	str	r3, [sp, #4]
 80087b4:	f001 fbe2 	bl	8009f7c <_svfiprintf_r>
 80087b8:	2300      	movs	r3, #0
 80087ba:	9a02      	ldr	r2, [sp, #8]
 80087bc:	7013      	strb	r3, [r2, #0]
 80087be:	b01c      	add	sp, #112	; 0x70
 80087c0:	bc08      	pop	{r3}
 80087c2:	b003      	add	sp, #12
 80087c4:	4718      	bx	r3
 80087c6:	46c0      	nop			; (mov r8, r8)
 80087c8:	7fffffff 	.word	0x7fffffff
 80087cc:	2000000c 	.word	0x2000000c
 80087d0:	ffff0208 	.word	0xffff0208

080087d4 <quorem>:
 80087d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087d6:	0006      	movs	r6, r0
 80087d8:	690b      	ldr	r3, [r1, #16]
 80087da:	6932      	ldr	r2, [r6, #16]
 80087dc:	b087      	sub	sp, #28
 80087de:	2000      	movs	r0, #0
 80087e0:	9103      	str	r1, [sp, #12]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	db65      	blt.n	80088b2 <quorem+0xde>
 80087e6:	3b01      	subs	r3, #1
 80087e8:	009c      	lsls	r4, r3, #2
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	000b      	movs	r3, r1
 80087ee:	3314      	adds	r3, #20
 80087f0:	9305      	str	r3, [sp, #20]
 80087f2:	191b      	adds	r3, r3, r4
 80087f4:	9304      	str	r3, [sp, #16]
 80087f6:	0033      	movs	r3, r6
 80087f8:	3314      	adds	r3, #20
 80087fa:	9302      	str	r3, [sp, #8]
 80087fc:	191c      	adds	r4, r3, r4
 80087fe:	9b04      	ldr	r3, [sp, #16]
 8008800:	6827      	ldr	r7, [r4, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	0038      	movs	r0, r7
 8008806:	1c5d      	adds	r5, r3, #1
 8008808:	0029      	movs	r1, r5
 800880a:	9301      	str	r3, [sp, #4]
 800880c:	f7f7 fc98 	bl	8000140 <__udivsi3>
 8008810:	9001      	str	r0, [sp, #4]
 8008812:	42af      	cmp	r7, r5
 8008814:	d324      	bcc.n	8008860 <quorem+0x8c>
 8008816:	2500      	movs	r5, #0
 8008818:	46ac      	mov	ip, r5
 800881a:	9802      	ldr	r0, [sp, #8]
 800881c:	9f05      	ldr	r7, [sp, #20]
 800881e:	cf08      	ldmia	r7!, {r3}
 8008820:	9a01      	ldr	r2, [sp, #4]
 8008822:	b299      	uxth	r1, r3
 8008824:	4351      	muls	r1, r2
 8008826:	0c1b      	lsrs	r3, r3, #16
 8008828:	4353      	muls	r3, r2
 800882a:	1949      	adds	r1, r1, r5
 800882c:	0c0a      	lsrs	r2, r1, #16
 800882e:	189b      	adds	r3, r3, r2
 8008830:	6802      	ldr	r2, [r0, #0]
 8008832:	b289      	uxth	r1, r1
 8008834:	b292      	uxth	r2, r2
 8008836:	4462      	add	r2, ip
 8008838:	1a52      	subs	r2, r2, r1
 800883a:	6801      	ldr	r1, [r0, #0]
 800883c:	0c1d      	lsrs	r5, r3, #16
 800883e:	0c09      	lsrs	r1, r1, #16
 8008840:	b29b      	uxth	r3, r3
 8008842:	1acb      	subs	r3, r1, r3
 8008844:	1411      	asrs	r1, r2, #16
 8008846:	185b      	adds	r3, r3, r1
 8008848:	1419      	asrs	r1, r3, #16
 800884a:	b292      	uxth	r2, r2
 800884c:	041b      	lsls	r3, r3, #16
 800884e:	431a      	orrs	r2, r3
 8008850:	9b04      	ldr	r3, [sp, #16]
 8008852:	468c      	mov	ip, r1
 8008854:	c004      	stmia	r0!, {r2}
 8008856:	42bb      	cmp	r3, r7
 8008858:	d2e1      	bcs.n	800881e <quorem+0x4a>
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d030      	beq.n	80088c2 <quorem+0xee>
 8008860:	0030      	movs	r0, r6
 8008862:	9903      	ldr	r1, [sp, #12]
 8008864:	f001 f902 	bl	8009a6c <__mcmp>
 8008868:	2800      	cmp	r0, #0
 800886a:	db21      	blt.n	80088b0 <quorem+0xdc>
 800886c:	0030      	movs	r0, r6
 800886e:	2400      	movs	r4, #0
 8008870:	9b01      	ldr	r3, [sp, #4]
 8008872:	9903      	ldr	r1, [sp, #12]
 8008874:	3301      	adds	r3, #1
 8008876:	9301      	str	r3, [sp, #4]
 8008878:	3014      	adds	r0, #20
 800887a:	3114      	adds	r1, #20
 800887c:	6803      	ldr	r3, [r0, #0]
 800887e:	c920      	ldmia	r1!, {r5}
 8008880:	b29a      	uxth	r2, r3
 8008882:	1914      	adds	r4, r2, r4
 8008884:	b2aa      	uxth	r2, r5
 8008886:	1aa2      	subs	r2, r4, r2
 8008888:	0c1b      	lsrs	r3, r3, #16
 800888a:	0c2d      	lsrs	r5, r5, #16
 800888c:	1414      	asrs	r4, r2, #16
 800888e:	1b5b      	subs	r3, r3, r5
 8008890:	191b      	adds	r3, r3, r4
 8008892:	141c      	asrs	r4, r3, #16
 8008894:	b292      	uxth	r2, r2
 8008896:	041b      	lsls	r3, r3, #16
 8008898:	4313      	orrs	r3, r2
 800889a:	c008      	stmia	r0!, {r3}
 800889c:	9b04      	ldr	r3, [sp, #16]
 800889e:	428b      	cmp	r3, r1
 80088a0:	d2ec      	bcs.n	800887c <quorem+0xa8>
 80088a2:	9b00      	ldr	r3, [sp, #0]
 80088a4:	9a02      	ldr	r2, [sp, #8]
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	18d3      	adds	r3, r2, r3
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	2a00      	cmp	r2, #0
 80088ae:	d015      	beq.n	80088dc <quorem+0x108>
 80088b0:	9801      	ldr	r0, [sp, #4]
 80088b2:	b007      	add	sp, #28
 80088b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d106      	bne.n	80088ca <quorem+0xf6>
 80088bc:	9b00      	ldr	r3, [sp, #0]
 80088be:	3b01      	subs	r3, #1
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	9b02      	ldr	r3, [sp, #8]
 80088c4:	3c04      	subs	r4, #4
 80088c6:	42a3      	cmp	r3, r4
 80088c8:	d3f5      	bcc.n	80088b6 <quorem+0xe2>
 80088ca:	9b00      	ldr	r3, [sp, #0]
 80088cc:	6133      	str	r3, [r6, #16]
 80088ce:	e7c7      	b.n	8008860 <quorem+0x8c>
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	2a00      	cmp	r2, #0
 80088d4:	d106      	bne.n	80088e4 <quorem+0x110>
 80088d6:	9a00      	ldr	r2, [sp, #0]
 80088d8:	3a01      	subs	r2, #1
 80088da:	9200      	str	r2, [sp, #0]
 80088dc:	9a02      	ldr	r2, [sp, #8]
 80088de:	3b04      	subs	r3, #4
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d3f5      	bcc.n	80088d0 <quorem+0xfc>
 80088e4:	9b00      	ldr	r3, [sp, #0]
 80088e6:	6133      	str	r3, [r6, #16]
 80088e8:	e7e2      	b.n	80088b0 <quorem+0xdc>
	...

080088ec <_dtoa_r>:
 80088ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ee:	b09d      	sub	sp, #116	; 0x74
 80088f0:	9202      	str	r2, [sp, #8]
 80088f2:	9303      	str	r3, [sp, #12]
 80088f4:	9b02      	ldr	r3, [sp, #8]
 80088f6:	9c03      	ldr	r4, [sp, #12]
 80088f8:	9308      	str	r3, [sp, #32]
 80088fa:	9409      	str	r4, [sp, #36]	; 0x24
 80088fc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80088fe:	0007      	movs	r7, r0
 8008900:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008902:	2c00      	cmp	r4, #0
 8008904:	d10e      	bne.n	8008924 <_dtoa_r+0x38>
 8008906:	2010      	movs	r0, #16
 8008908:	f000 fe0e 	bl	8009528 <malloc>
 800890c:	1e02      	subs	r2, r0, #0
 800890e:	6278      	str	r0, [r7, #36]	; 0x24
 8008910:	d104      	bne.n	800891c <_dtoa_r+0x30>
 8008912:	21ea      	movs	r1, #234	; 0xea
 8008914:	4bc7      	ldr	r3, [pc, #796]	; (8008c34 <_dtoa_r+0x348>)
 8008916:	48c8      	ldr	r0, [pc, #800]	; (8008c38 <_dtoa_r+0x34c>)
 8008918:	f001 fc42 	bl	800a1a0 <__assert_func>
 800891c:	6044      	str	r4, [r0, #4]
 800891e:	6084      	str	r4, [r0, #8]
 8008920:	6004      	str	r4, [r0, #0]
 8008922:	60c4      	str	r4, [r0, #12]
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	6819      	ldr	r1, [r3, #0]
 8008928:	2900      	cmp	r1, #0
 800892a:	d00a      	beq.n	8008942 <_dtoa_r+0x56>
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	2301      	movs	r3, #1
 8008930:	4093      	lsls	r3, r2
 8008932:	604a      	str	r2, [r1, #4]
 8008934:	608b      	str	r3, [r1, #8]
 8008936:	0038      	movs	r0, r7
 8008938:	f000 fe58 	bl	80095ec <_Bfree>
 800893c:	2200      	movs	r2, #0
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	da20      	bge.n	800898a <_dtoa_r+0x9e>
 8008948:	2301      	movs	r3, #1
 800894a:	602b      	str	r3, [r5, #0]
 800894c:	9b03      	ldr	r3, [sp, #12]
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	085b      	lsrs	r3, r3, #1
 8008952:	9309      	str	r3, [sp, #36]	; 0x24
 8008954:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008956:	4bb9      	ldr	r3, [pc, #740]	; (8008c3c <_dtoa_r+0x350>)
 8008958:	4ab8      	ldr	r2, [pc, #736]	; (8008c3c <_dtoa_r+0x350>)
 800895a:	402b      	ands	r3, r5
 800895c:	4293      	cmp	r3, r2
 800895e:	d117      	bne.n	8008990 <_dtoa_r+0xa4>
 8008960:	4bb7      	ldr	r3, [pc, #732]	; (8008c40 <_dtoa_r+0x354>)
 8008962:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008964:	0328      	lsls	r0, r5, #12
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	9b02      	ldr	r3, [sp, #8]
 800896a:	0b00      	lsrs	r0, r0, #12
 800896c:	4318      	orrs	r0, r3
 800896e:	d101      	bne.n	8008974 <_dtoa_r+0x88>
 8008970:	f000 fdbf 	bl	80094f2 <_dtoa_r+0xc06>
 8008974:	48b3      	ldr	r0, [pc, #716]	; (8008c44 <_dtoa_r+0x358>)
 8008976:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008978:	9006      	str	r0, [sp, #24]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d002      	beq.n	8008984 <_dtoa_r+0x98>
 800897e:	4bb2      	ldr	r3, [pc, #712]	; (8008c48 <_dtoa_r+0x35c>)
 8008980:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008982:	6013      	str	r3, [r2, #0]
 8008984:	9806      	ldr	r0, [sp, #24]
 8008986:	b01d      	add	sp, #116	; 0x74
 8008988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800898a:	2300      	movs	r3, #0
 800898c:	602b      	str	r3, [r5, #0]
 800898e:	e7e1      	b.n	8008954 <_dtoa_r+0x68>
 8008990:	9b08      	ldr	r3, [sp, #32]
 8008992:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008994:	9312      	str	r3, [sp, #72]	; 0x48
 8008996:	9413      	str	r4, [sp, #76]	; 0x4c
 8008998:	9812      	ldr	r0, [sp, #72]	; 0x48
 800899a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800899c:	2200      	movs	r2, #0
 800899e:	2300      	movs	r3, #0
 80089a0:	f7f7 fd54 	bl	800044c <__aeabi_dcmpeq>
 80089a4:	1e04      	subs	r4, r0, #0
 80089a6:	d009      	beq.n	80089bc <_dtoa_r+0xd0>
 80089a8:	2301      	movs	r3, #1
 80089aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80089ac:	6013      	str	r3, [r2, #0]
 80089ae:	4ba7      	ldr	r3, [pc, #668]	; (8008c4c <_dtoa_r+0x360>)
 80089b0:	9306      	str	r3, [sp, #24]
 80089b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0e5      	beq.n	8008984 <_dtoa_r+0x98>
 80089b8:	4ba5      	ldr	r3, [pc, #660]	; (8008c50 <_dtoa_r+0x364>)
 80089ba:	e7e1      	b.n	8008980 <_dtoa_r+0x94>
 80089bc:	ab1a      	add	r3, sp, #104	; 0x68
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	ab1b      	add	r3, sp, #108	; 0x6c
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	0038      	movs	r0, r7
 80089c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089ca:	f001 f903 	bl	8009bd4 <__d2b>
 80089ce:	006e      	lsls	r6, r5, #1
 80089d0:	9005      	str	r0, [sp, #20]
 80089d2:	0d76      	lsrs	r6, r6, #21
 80089d4:	d100      	bne.n	80089d8 <_dtoa_r+0xec>
 80089d6:	e07c      	b.n	8008ad2 <_dtoa_r+0x1e6>
 80089d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80089da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80089dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089de:	4a9d      	ldr	r2, [pc, #628]	; (8008c54 <_dtoa_r+0x368>)
 80089e0:	031b      	lsls	r3, r3, #12
 80089e2:	0b1b      	lsrs	r3, r3, #12
 80089e4:	431a      	orrs	r2, r3
 80089e6:	0011      	movs	r1, r2
 80089e8:	4b9b      	ldr	r3, [pc, #620]	; (8008c58 <_dtoa_r+0x36c>)
 80089ea:	9418      	str	r4, [sp, #96]	; 0x60
 80089ec:	18f6      	adds	r6, r6, r3
 80089ee:	2200      	movs	r2, #0
 80089f0:	4b9a      	ldr	r3, [pc, #616]	; (8008c5c <_dtoa_r+0x370>)
 80089f2:	f7f9 fca7 	bl	8002344 <__aeabi_dsub>
 80089f6:	4a9a      	ldr	r2, [pc, #616]	; (8008c60 <_dtoa_r+0x374>)
 80089f8:	4b9a      	ldr	r3, [pc, #616]	; (8008c64 <_dtoa_r+0x378>)
 80089fa:	f7f9 fa37 	bl	8001e6c <__aeabi_dmul>
 80089fe:	4a9a      	ldr	r2, [pc, #616]	; (8008c68 <_dtoa_r+0x37c>)
 8008a00:	4b9a      	ldr	r3, [pc, #616]	; (8008c6c <_dtoa_r+0x380>)
 8008a02:	f7f8 faf5 	bl	8000ff0 <__aeabi_dadd>
 8008a06:	0004      	movs	r4, r0
 8008a08:	0030      	movs	r0, r6
 8008a0a:	000d      	movs	r5, r1
 8008a0c:	f7fa f880 	bl	8002b10 <__aeabi_i2d>
 8008a10:	4a97      	ldr	r2, [pc, #604]	; (8008c70 <_dtoa_r+0x384>)
 8008a12:	4b98      	ldr	r3, [pc, #608]	; (8008c74 <_dtoa_r+0x388>)
 8008a14:	f7f9 fa2a 	bl	8001e6c <__aeabi_dmul>
 8008a18:	0002      	movs	r2, r0
 8008a1a:	000b      	movs	r3, r1
 8008a1c:	0020      	movs	r0, r4
 8008a1e:	0029      	movs	r1, r5
 8008a20:	f7f8 fae6 	bl	8000ff0 <__aeabi_dadd>
 8008a24:	0004      	movs	r4, r0
 8008a26:	000d      	movs	r5, r1
 8008a28:	f7fa f83c 	bl	8002aa4 <__aeabi_d2iz>
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	9002      	str	r0, [sp, #8]
 8008a30:	2300      	movs	r3, #0
 8008a32:	0020      	movs	r0, r4
 8008a34:	0029      	movs	r1, r5
 8008a36:	f7f7 fd0f 	bl	8000458 <__aeabi_dcmplt>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d00b      	beq.n	8008a56 <_dtoa_r+0x16a>
 8008a3e:	9802      	ldr	r0, [sp, #8]
 8008a40:	f7fa f866 	bl	8002b10 <__aeabi_i2d>
 8008a44:	002b      	movs	r3, r5
 8008a46:	0022      	movs	r2, r4
 8008a48:	f7f7 fd00 	bl	800044c <__aeabi_dcmpeq>
 8008a4c:	4243      	negs	r3, r0
 8008a4e:	4158      	adcs	r0, r3
 8008a50:	9b02      	ldr	r3, [sp, #8]
 8008a52:	1a1b      	subs	r3, r3, r0
 8008a54:	9302      	str	r3, [sp, #8]
 8008a56:	2301      	movs	r3, #1
 8008a58:	9316      	str	r3, [sp, #88]	; 0x58
 8008a5a:	9b02      	ldr	r3, [sp, #8]
 8008a5c:	2b16      	cmp	r3, #22
 8008a5e:	d80f      	bhi.n	8008a80 <_dtoa_r+0x194>
 8008a60:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008a62:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008a64:	00da      	lsls	r2, r3, #3
 8008a66:	4b84      	ldr	r3, [pc, #528]	; (8008c78 <_dtoa_r+0x38c>)
 8008a68:	189b      	adds	r3, r3, r2
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f7f7 fcf3 	bl	8000458 <__aeabi_dcmplt>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d049      	beq.n	8008b0a <_dtoa_r+0x21e>
 8008a76:	9b02      	ldr	r3, [sp, #8]
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	9302      	str	r3, [sp, #8]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	9316      	str	r3, [sp, #88]	; 0x58
 8008a80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008a82:	1b9e      	subs	r6, r3, r6
 8008a84:	2300      	movs	r3, #0
 8008a86:	930a      	str	r3, [sp, #40]	; 0x28
 8008a88:	0033      	movs	r3, r6
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	930d      	str	r3, [sp, #52]	; 0x34
 8008a8e:	d504      	bpl.n	8008a9a <_dtoa_r+0x1ae>
 8008a90:	2301      	movs	r3, #1
 8008a92:	1b9b      	subs	r3, r3, r6
 8008a94:	930a      	str	r3, [sp, #40]	; 0x28
 8008a96:	2300      	movs	r3, #0
 8008a98:	930d      	str	r3, [sp, #52]	; 0x34
 8008a9a:	9b02      	ldr	r3, [sp, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	db36      	blt.n	8008b0e <_dtoa_r+0x222>
 8008aa0:	9a02      	ldr	r2, [sp, #8]
 8008aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aa4:	4694      	mov	ip, r2
 8008aa6:	4463      	add	r3, ip
 8008aa8:	930d      	str	r3, [sp, #52]	; 0x34
 8008aaa:	2300      	movs	r3, #0
 8008aac:	9215      	str	r2, [sp, #84]	; 0x54
 8008aae:	930e      	str	r3, [sp, #56]	; 0x38
 8008ab0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ab2:	2401      	movs	r4, #1
 8008ab4:	2b09      	cmp	r3, #9
 8008ab6:	d864      	bhi.n	8008b82 <_dtoa_r+0x296>
 8008ab8:	2b05      	cmp	r3, #5
 8008aba:	dd02      	ble.n	8008ac2 <_dtoa_r+0x1d6>
 8008abc:	2400      	movs	r4, #0
 8008abe:	3b04      	subs	r3, #4
 8008ac0:	9322      	str	r3, [sp, #136]	; 0x88
 8008ac2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ac4:	1e98      	subs	r0, r3, #2
 8008ac6:	2803      	cmp	r0, #3
 8008ac8:	d864      	bhi.n	8008b94 <_dtoa_r+0x2a8>
 8008aca:	f7f7 fb25 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008ace:	3829      	.short	0x3829
 8008ad0:	5836      	.short	0x5836
 8008ad2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008ad4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008ad6:	189e      	adds	r6, r3, r2
 8008ad8:	4b68      	ldr	r3, [pc, #416]	; (8008c7c <_dtoa_r+0x390>)
 8008ada:	18f2      	adds	r2, r6, r3
 8008adc:	2a20      	cmp	r2, #32
 8008ade:	dd0f      	ble.n	8008b00 <_dtoa_r+0x214>
 8008ae0:	2340      	movs	r3, #64	; 0x40
 8008ae2:	1a9b      	subs	r3, r3, r2
 8008ae4:	409d      	lsls	r5, r3
 8008ae6:	4b66      	ldr	r3, [pc, #408]	; (8008c80 <_dtoa_r+0x394>)
 8008ae8:	9802      	ldr	r0, [sp, #8]
 8008aea:	18f3      	adds	r3, r6, r3
 8008aec:	40d8      	lsrs	r0, r3
 8008aee:	4328      	orrs	r0, r5
 8008af0:	f7fa f83e 	bl	8002b70 <__aeabi_ui2d>
 8008af4:	2301      	movs	r3, #1
 8008af6:	4c63      	ldr	r4, [pc, #396]	; (8008c84 <_dtoa_r+0x398>)
 8008af8:	3e01      	subs	r6, #1
 8008afa:	1909      	adds	r1, r1, r4
 8008afc:	9318      	str	r3, [sp, #96]	; 0x60
 8008afe:	e776      	b.n	80089ee <_dtoa_r+0x102>
 8008b00:	2320      	movs	r3, #32
 8008b02:	9802      	ldr	r0, [sp, #8]
 8008b04:	1a9b      	subs	r3, r3, r2
 8008b06:	4098      	lsls	r0, r3
 8008b08:	e7f2      	b.n	8008af0 <_dtoa_r+0x204>
 8008b0a:	9016      	str	r0, [sp, #88]	; 0x58
 8008b0c:	e7b8      	b.n	8008a80 <_dtoa_r+0x194>
 8008b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b10:	9a02      	ldr	r2, [sp, #8]
 8008b12:	1a9b      	subs	r3, r3, r2
 8008b14:	930a      	str	r3, [sp, #40]	; 0x28
 8008b16:	4253      	negs	r3, r2
 8008b18:	930e      	str	r3, [sp, #56]	; 0x38
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	9315      	str	r3, [sp, #84]	; 0x54
 8008b1e:	e7c7      	b.n	8008ab0 <_dtoa_r+0x1c4>
 8008b20:	2300      	movs	r3, #0
 8008b22:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b26:	930c      	str	r3, [sp, #48]	; 0x30
 8008b28:	9307      	str	r3, [sp, #28]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	dc13      	bgt.n	8008b56 <_dtoa_r+0x26a>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	001a      	movs	r2, r3
 8008b32:	930c      	str	r3, [sp, #48]	; 0x30
 8008b34:	9307      	str	r3, [sp, #28]
 8008b36:	9223      	str	r2, [sp, #140]	; 0x8c
 8008b38:	e00d      	b.n	8008b56 <_dtoa_r+0x26a>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e7f1      	b.n	8008b22 <_dtoa_r+0x236>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008b42:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b44:	4694      	mov	ip, r2
 8008b46:	9b02      	ldr	r3, [sp, #8]
 8008b48:	4463      	add	r3, ip
 8008b4a:	930c      	str	r3, [sp, #48]	; 0x30
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	9307      	str	r3, [sp, #28]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	dc00      	bgt.n	8008b56 <_dtoa_r+0x26a>
 8008b54:	2301      	movs	r3, #1
 8008b56:	2200      	movs	r2, #0
 8008b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b5a:	6042      	str	r2, [r0, #4]
 8008b5c:	3204      	adds	r2, #4
 8008b5e:	0015      	movs	r5, r2
 8008b60:	3514      	adds	r5, #20
 8008b62:	6841      	ldr	r1, [r0, #4]
 8008b64:	429d      	cmp	r5, r3
 8008b66:	d919      	bls.n	8008b9c <_dtoa_r+0x2b0>
 8008b68:	0038      	movs	r0, r7
 8008b6a:	f000 fcfb 	bl	8009564 <_Balloc>
 8008b6e:	9006      	str	r0, [sp, #24]
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d117      	bne.n	8008ba4 <_dtoa_r+0x2b8>
 8008b74:	21d5      	movs	r1, #213	; 0xd5
 8008b76:	0002      	movs	r2, r0
 8008b78:	4b43      	ldr	r3, [pc, #268]	; (8008c88 <_dtoa_r+0x39c>)
 8008b7a:	0049      	lsls	r1, r1, #1
 8008b7c:	e6cb      	b.n	8008916 <_dtoa_r+0x2a>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e7de      	b.n	8008b40 <_dtoa_r+0x254>
 8008b82:	2300      	movs	r3, #0
 8008b84:	940f      	str	r4, [sp, #60]	; 0x3c
 8008b86:	9322      	str	r3, [sp, #136]	; 0x88
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	930c      	str	r3, [sp, #48]	; 0x30
 8008b8c:	9307      	str	r3, [sp, #28]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	3313      	adds	r3, #19
 8008b92:	e7d0      	b.n	8008b36 <_dtoa_r+0x24a>
 8008b94:	2301      	movs	r3, #1
 8008b96:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b98:	3b02      	subs	r3, #2
 8008b9a:	e7f6      	b.n	8008b8a <_dtoa_r+0x29e>
 8008b9c:	3101      	adds	r1, #1
 8008b9e:	6041      	str	r1, [r0, #4]
 8008ba0:	0052      	lsls	r2, r2, #1
 8008ba2:	e7dc      	b.n	8008b5e <_dtoa_r+0x272>
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	9a06      	ldr	r2, [sp, #24]
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	9b07      	ldr	r3, [sp, #28]
 8008bac:	2b0e      	cmp	r3, #14
 8008bae:	d900      	bls.n	8008bb2 <_dtoa_r+0x2c6>
 8008bb0:	e0eb      	b.n	8008d8a <_dtoa_r+0x49e>
 8008bb2:	2c00      	cmp	r4, #0
 8008bb4:	d100      	bne.n	8008bb8 <_dtoa_r+0x2cc>
 8008bb6:	e0e8      	b.n	8008d8a <_dtoa_r+0x49e>
 8008bb8:	9b02      	ldr	r3, [sp, #8]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	dd68      	ble.n	8008c90 <_dtoa_r+0x3a4>
 8008bbe:	001a      	movs	r2, r3
 8008bc0:	210f      	movs	r1, #15
 8008bc2:	4b2d      	ldr	r3, [pc, #180]	; (8008c78 <_dtoa_r+0x38c>)
 8008bc4:	400a      	ands	r2, r1
 8008bc6:	00d2      	lsls	r2, r2, #3
 8008bc8:	189b      	adds	r3, r3, r2
 8008bca:	681d      	ldr	r5, [r3, #0]
 8008bcc:	685e      	ldr	r6, [r3, #4]
 8008bce:	9b02      	ldr	r3, [sp, #8]
 8008bd0:	111c      	asrs	r4, r3, #4
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	9310      	str	r3, [sp, #64]	; 0x40
 8008bd6:	9b02      	ldr	r3, [sp, #8]
 8008bd8:	05db      	lsls	r3, r3, #23
 8008bda:	d50b      	bpl.n	8008bf4 <_dtoa_r+0x308>
 8008bdc:	4b2b      	ldr	r3, [pc, #172]	; (8008c8c <_dtoa_r+0x3a0>)
 8008bde:	400c      	ands	r4, r1
 8008be0:	6a1a      	ldr	r2, [r3, #32]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008be6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008be8:	f7f8 fd3e 	bl	8001668 <__aeabi_ddiv>
 8008bec:	2303      	movs	r3, #3
 8008bee:	9008      	str	r0, [sp, #32]
 8008bf0:	9109      	str	r1, [sp, #36]	; 0x24
 8008bf2:	9310      	str	r3, [sp, #64]	; 0x40
 8008bf4:	4b25      	ldr	r3, [pc, #148]	; (8008c8c <_dtoa_r+0x3a0>)
 8008bf6:	9314      	str	r3, [sp, #80]	; 0x50
 8008bf8:	2c00      	cmp	r4, #0
 8008bfa:	d108      	bne.n	8008c0e <_dtoa_r+0x322>
 8008bfc:	9808      	ldr	r0, [sp, #32]
 8008bfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c00:	002a      	movs	r2, r5
 8008c02:	0033      	movs	r3, r6
 8008c04:	f7f8 fd30 	bl	8001668 <__aeabi_ddiv>
 8008c08:	9008      	str	r0, [sp, #32]
 8008c0a:	9109      	str	r1, [sp, #36]	; 0x24
 8008c0c:	e05c      	b.n	8008cc8 <_dtoa_r+0x3dc>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	421c      	tst	r4, r3
 8008c12:	d00b      	beq.n	8008c2c <_dtoa_r+0x340>
 8008c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c16:	0028      	movs	r0, r5
 8008c18:	3301      	adds	r3, #1
 8008c1a:	9310      	str	r3, [sp, #64]	; 0x40
 8008c1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c1e:	0031      	movs	r1, r6
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f7f9 f922 	bl	8001e6c <__aeabi_dmul>
 8008c28:	0005      	movs	r5, r0
 8008c2a:	000e      	movs	r6, r1
 8008c2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c2e:	1064      	asrs	r4, r4, #1
 8008c30:	3308      	adds	r3, #8
 8008c32:	e7e0      	b.n	8008bf6 <_dtoa_r+0x30a>
 8008c34:	0800bded 	.word	0x0800bded
 8008c38:	0800be04 	.word	0x0800be04
 8008c3c:	7ff00000 	.word	0x7ff00000
 8008c40:	0000270f 	.word	0x0000270f
 8008c44:	0800bde9 	.word	0x0800bde9
 8008c48:	0800bdec 	.word	0x0800bdec
 8008c4c:	0800bdbc 	.word	0x0800bdbc
 8008c50:	0800bdbd 	.word	0x0800bdbd
 8008c54:	3ff00000 	.word	0x3ff00000
 8008c58:	fffffc01 	.word	0xfffffc01
 8008c5c:	3ff80000 	.word	0x3ff80000
 8008c60:	636f4361 	.word	0x636f4361
 8008c64:	3fd287a7 	.word	0x3fd287a7
 8008c68:	8b60c8b3 	.word	0x8b60c8b3
 8008c6c:	3fc68a28 	.word	0x3fc68a28
 8008c70:	509f79fb 	.word	0x509f79fb
 8008c74:	3fd34413 	.word	0x3fd34413
 8008c78:	0800bef8 	.word	0x0800bef8
 8008c7c:	00000432 	.word	0x00000432
 8008c80:	00000412 	.word	0x00000412
 8008c84:	fe100000 	.word	0xfe100000
 8008c88:	0800be5f 	.word	0x0800be5f
 8008c8c:	0800bed0 	.word	0x0800bed0
 8008c90:	2302      	movs	r3, #2
 8008c92:	9310      	str	r3, [sp, #64]	; 0x40
 8008c94:	9b02      	ldr	r3, [sp, #8]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d016      	beq.n	8008cc8 <_dtoa_r+0x3dc>
 8008c9a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008c9c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008c9e:	425c      	negs	r4, r3
 8008ca0:	230f      	movs	r3, #15
 8008ca2:	4ab6      	ldr	r2, [pc, #728]	; (8008f7c <_dtoa_r+0x690>)
 8008ca4:	4023      	ands	r3, r4
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	18d3      	adds	r3, r2, r3
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f7f9 f8dd 	bl	8001e6c <__aeabi_dmul>
 8008cb2:	2601      	movs	r6, #1
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	9008      	str	r0, [sp, #32]
 8008cb8:	9109      	str	r1, [sp, #36]	; 0x24
 8008cba:	4db1      	ldr	r5, [pc, #708]	; (8008f80 <_dtoa_r+0x694>)
 8008cbc:	1124      	asrs	r4, r4, #4
 8008cbe:	2c00      	cmp	r4, #0
 8008cc0:	d000      	beq.n	8008cc4 <_dtoa_r+0x3d8>
 8008cc2:	e094      	b.n	8008dee <_dtoa_r+0x502>
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d19f      	bne.n	8008c08 <_dtoa_r+0x31c>
 8008cc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d100      	bne.n	8008cd0 <_dtoa_r+0x3e4>
 8008cce:	e09b      	b.n	8008e08 <_dtoa_r+0x51c>
 8008cd0:	9c08      	ldr	r4, [sp, #32]
 8008cd2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	0020      	movs	r0, r4
 8008cd8:	0029      	movs	r1, r5
 8008cda:	4baa      	ldr	r3, [pc, #680]	; (8008f84 <_dtoa_r+0x698>)
 8008cdc:	f7f7 fbbc 	bl	8000458 <__aeabi_dcmplt>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d100      	bne.n	8008ce6 <_dtoa_r+0x3fa>
 8008ce4:	e090      	b.n	8008e08 <_dtoa_r+0x51c>
 8008ce6:	9b07      	ldr	r3, [sp, #28]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d100      	bne.n	8008cee <_dtoa_r+0x402>
 8008cec:	e08c      	b.n	8008e08 <_dtoa_r+0x51c>
 8008cee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	dd46      	ble.n	8008d82 <_dtoa_r+0x496>
 8008cf4:	9b02      	ldr	r3, [sp, #8]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	0020      	movs	r0, r4
 8008cfa:	0029      	movs	r1, r5
 8008cfc:	1e5e      	subs	r6, r3, #1
 8008cfe:	4ba2      	ldr	r3, [pc, #648]	; (8008f88 <_dtoa_r+0x69c>)
 8008d00:	f7f9 f8b4 	bl	8001e6c <__aeabi_dmul>
 8008d04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d06:	9008      	str	r0, [sp, #32]
 8008d08:	9109      	str	r1, [sp, #36]	; 0x24
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	9310      	str	r3, [sp, #64]	; 0x40
 8008d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d10:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008d12:	9c08      	ldr	r4, [sp, #32]
 8008d14:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d16:	9314      	str	r3, [sp, #80]	; 0x50
 8008d18:	f7f9 fefa 	bl	8002b10 <__aeabi_i2d>
 8008d1c:	0022      	movs	r2, r4
 8008d1e:	002b      	movs	r3, r5
 8008d20:	f7f9 f8a4 	bl	8001e6c <__aeabi_dmul>
 8008d24:	2200      	movs	r2, #0
 8008d26:	4b99      	ldr	r3, [pc, #612]	; (8008f8c <_dtoa_r+0x6a0>)
 8008d28:	f7f8 f962 	bl	8000ff0 <__aeabi_dadd>
 8008d2c:	9010      	str	r0, [sp, #64]	; 0x40
 8008d2e:	9111      	str	r1, [sp, #68]	; 0x44
 8008d30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d34:	9208      	str	r2, [sp, #32]
 8008d36:	9309      	str	r3, [sp, #36]	; 0x24
 8008d38:	4a95      	ldr	r2, [pc, #596]	; (8008f90 <_dtoa_r+0x6a4>)
 8008d3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d3c:	4694      	mov	ip, r2
 8008d3e:	4463      	add	r3, ip
 8008d40:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d42:	9309      	str	r3, [sp, #36]	; 0x24
 8008d44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d161      	bne.n	8008e0e <_dtoa_r+0x522>
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	0020      	movs	r0, r4
 8008d4e:	0029      	movs	r1, r5
 8008d50:	4b90      	ldr	r3, [pc, #576]	; (8008f94 <_dtoa_r+0x6a8>)
 8008d52:	f7f9 faf7 	bl	8002344 <__aeabi_dsub>
 8008d56:	9a08      	ldr	r2, [sp, #32]
 8008d58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d5a:	0004      	movs	r4, r0
 8008d5c:	000d      	movs	r5, r1
 8008d5e:	f7f7 fb8f 	bl	8000480 <__aeabi_dcmpgt>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d000      	beq.n	8008d68 <_dtoa_r+0x47c>
 8008d66:	e2af      	b.n	80092c8 <_dtoa_r+0x9dc>
 8008d68:	488b      	ldr	r0, [pc, #556]	; (8008f98 <_dtoa_r+0x6ac>)
 8008d6a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008d6c:	4684      	mov	ip, r0
 8008d6e:	4461      	add	r1, ip
 8008d70:	000b      	movs	r3, r1
 8008d72:	0020      	movs	r0, r4
 8008d74:	0029      	movs	r1, r5
 8008d76:	9a08      	ldr	r2, [sp, #32]
 8008d78:	f7f7 fb6e 	bl	8000458 <__aeabi_dcmplt>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d000      	beq.n	8008d82 <_dtoa_r+0x496>
 8008d80:	e29f      	b.n	80092c2 <_dtoa_r+0x9d6>
 8008d82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d84:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008d86:	9308      	str	r3, [sp, #32]
 8008d88:	9409      	str	r4, [sp, #36]	; 0x24
 8008d8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	da00      	bge.n	8008d92 <_dtoa_r+0x4a6>
 8008d90:	e172      	b.n	8009078 <_dtoa_r+0x78c>
 8008d92:	9a02      	ldr	r2, [sp, #8]
 8008d94:	2a0e      	cmp	r2, #14
 8008d96:	dd00      	ble.n	8008d9a <_dtoa_r+0x4ae>
 8008d98:	e16e      	b.n	8009078 <_dtoa_r+0x78c>
 8008d9a:	4b78      	ldr	r3, [pc, #480]	; (8008f7c <_dtoa_r+0x690>)
 8008d9c:	00d2      	lsls	r2, r2, #3
 8008d9e:	189b      	adds	r3, r3, r2
 8008da0:	685c      	ldr	r4, [r3, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	930a      	str	r3, [sp, #40]	; 0x28
 8008da6:	940b      	str	r4, [sp, #44]	; 0x2c
 8008da8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	db00      	blt.n	8008db0 <_dtoa_r+0x4c4>
 8008dae:	e0f7      	b.n	8008fa0 <_dtoa_r+0x6b4>
 8008db0:	9b07      	ldr	r3, [sp, #28]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	dd00      	ble.n	8008db8 <_dtoa_r+0x4cc>
 8008db6:	e0f3      	b.n	8008fa0 <_dtoa_r+0x6b4>
 8008db8:	d000      	beq.n	8008dbc <_dtoa_r+0x4d0>
 8008dba:	e282      	b.n	80092c2 <_dtoa_r+0x9d6>
 8008dbc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008dbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4b74      	ldr	r3, [pc, #464]	; (8008f94 <_dtoa_r+0x6a8>)
 8008dc4:	f7f9 f852 	bl	8001e6c <__aeabi_dmul>
 8008dc8:	9a08      	ldr	r2, [sp, #32]
 8008dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dcc:	f7f7 fb62 	bl	8000494 <__aeabi_dcmpge>
 8008dd0:	9e07      	ldr	r6, [sp, #28]
 8008dd2:	0035      	movs	r5, r6
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d000      	beq.n	8008dda <_dtoa_r+0x4ee>
 8008dd8:	e259      	b.n	800928e <_dtoa_r+0x9a2>
 8008dda:	9b06      	ldr	r3, [sp, #24]
 8008ddc:	9a06      	ldr	r2, [sp, #24]
 8008dde:	3301      	adds	r3, #1
 8008de0:	9308      	str	r3, [sp, #32]
 8008de2:	2331      	movs	r3, #49	; 0x31
 8008de4:	7013      	strb	r3, [r2, #0]
 8008de6:	9b02      	ldr	r3, [sp, #8]
 8008de8:	3301      	adds	r3, #1
 8008dea:	9302      	str	r3, [sp, #8]
 8008dec:	e254      	b.n	8009298 <_dtoa_r+0x9ac>
 8008dee:	4234      	tst	r4, r6
 8008df0:	d007      	beq.n	8008e02 <_dtoa_r+0x516>
 8008df2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008df4:	3301      	adds	r3, #1
 8008df6:	9310      	str	r3, [sp, #64]	; 0x40
 8008df8:	682a      	ldr	r2, [r5, #0]
 8008dfa:	686b      	ldr	r3, [r5, #4]
 8008dfc:	f7f9 f836 	bl	8001e6c <__aeabi_dmul>
 8008e00:	0033      	movs	r3, r6
 8008e02:	1064      	asrs	r4, r4, #1
 8008e04:	3508      	adds	r5, #8
 8008e06:	e75a      	b.n	8008cbe <_dtoa_r+0x3d2>
 8008e08:	9e02      	ldr	r6, [sp, #8]
 8008e0a:	9b07      	ldr	r3, [sp, #28]
 8008e0c:	e780      	b.n	8008d10 <_dtoa_r+0x424>
 8008e0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008e12:	1e5a      	subs	r2, r3, #1
 8008e14:	4b59      	ldr	r3, [pc, #356]	; (8008f7c <_dtoa_r+0x690>)
 8008e16:	00d2      	lsls	r2, r2, #3
 8008e18:	189b      	adds	r3, r3, r2
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	2900      	cmp	r1, #0
 8008e20:	d051      	beq.n	8008ec6 <_dtoa_r+0x5da>
 8008e22:	2000      	movs	r0, #0
 8008e24:	495d      	ldr	r1, [pc, #372]	; (8008f9c <_dtoa_r+0x6b0>)
 8008e26:	f7f8 fc1f 	bl	8001668 <__aeabi_ddiv>
 8008e2a:	9a08      	ldr	r2, [sp, #32]
 8008e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e2e:	f7f9 fa89 	bl	8002344 <__aeabi_dsub>
 8008e32:	9a06      	ldr	r2, [sp, #24]
 8008e34:	9b06      	ldr	r3, [sp, #24]
 8008e36:	4694      	mov	ip, r2
 8008e38:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e3c:	9010      	str	r0, [sp, #64]	; 0x40
 8008e3e:	9111      	str	r1, [sp, #68]	; 0x44
 8008e40:	4463      	add	r3, ip
 8008e42:	9319      	str	r3, [sp, #100]	; 0x64
 8008e44:	0029      	movs	r1, r5
 8008e46:	0020      	movs	r0, r4
 8008e48:	f7f9 fe2c 	bl	8002aa4 <__aeabi_d2iz>
 8008e4c:	9014      	str	r0, [sp, #80]	; 0x50
 8008e4e:	f7f9 fe5f 	bl	8002b10 <__aeabi_i2d>
 8008e52:	0002      	movs	r2, r0
 8008e54:	000b      	movs	r3, r1
 8008e56:	0020      	movs	r0, r4
 8008e58:	0029      	movs	r1, r5
 8008e5a:	f7f9 fa73 	bl	8002344 <__aeabi_dsub>
 8008e5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e62:	3301      	adds	r3, #1
 8008e64:	9308      	str	r3, [sp, #32]
 8008e66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e68:	0004      	movs	r4, r0
 8008e6a:	3330      	adds	r3, #48	; 0x30
 8008e6c:	7013      	strb	r3, [r2, #0]
 8008e6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e72:	000d      	movs	r5, r1
 8008e74:	f7f7 faf0 	bl	8000458 <__aeabi_dcmplt>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d175      	bne.n	8008f68 <_dtoa_r+0x67c>
 8008e7c:	0022      	movs	r2, r4
 8008e7e:	002b      	movs	r3, r5
 8008e80:	2000      	movs	r0, #0
 8008e82:	4940      	ldr	r1, [pc, #256]	; (8008f84 <_dtoa_r+0x698>)
 8008e84:	f7f9 fa5e 	bl	8002344 <__aeabi_dsub>
 8008e88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e8c:	f7f7 fae4 	bl	8000458 <__aeabi_dcmplt>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d000      	beq.n	8008e96 <_dtoa_r+0x5aa>
 8008e94:	e0d2      	b.n	800903c <_dtoa_r+0x750>
 8008e96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e98:	9a08      	ldr	r2, [sp, #32]
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d100      	bne.n	8008ea0 <_dtoa_r+0x5b4>
 8008e9e:	e770      	b.n	8008d82 <_dtoa_r+0x496>
 8008ea0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008ea2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	4b38      	ldr	r3, [pc, #224]	; (8008f88 <_dtoa_r+0x69c>)
 8008ea8:	f7f8 ffe0 	bl	8001e6c <__aeabi_dmul>
 8008eac:	4b36      	ldr	r3, [pc, #216]	; (8008f88 <_dtoa_r+0x69c>)
 8008eae:	9010      	str	r0, [sp, #64]	; 0x40
 8008eb0:	9111      	str	r1, [sp, #68]	; 0x44
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	0020      	movs	r0, r4
 8008eb6:	0029      	movs	r1, r5
 8008eb8:	f7f8 ffd8 	bl	8001e6c <__aeabi_dmul>
 8008ebc:	9b08      	ldr	r3, [sp, #32]
 8008ebe:	0004      	movs	r4, r0
 8008ec0:	000d      	movs	r5, r1
 8008ec2:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ec4:	e7be      	b.n	8008e44 <_dtoa_r+0x558>
 8008ec6:	9808      	ldr	r0, [sp, #32]
 8008ec8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008eca:	f7f8 ffcf 	bl	8001e6c <__aeabi_dmul>
 8008ece:	9a06      	ldr	r2, [sp, #24]
 8008ed0:	9b06      	ldr	r3, [sp, #24]
 8008ed2:	4694      	mov	ip, r2
 8008ed4:	9308      	str	r3, [sp, #32]
 8008ed6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ed8:	9010      	str	r0, [sp, #64]	; 0x40
 8008eda:	9111      	str	r1, [sp, #68]	; 0x44
 8008edc:	4463      	add	r3, ip
 8008ede:	9319      	str	r3, [sp, #100]	; 0x64
 8008ee0:	0029      	movs	r1, r5
 8008ee2:	0020      	movs	r0, r4
 8008ee4:	f7f9 fdde 	bl	8002aa4 <__aeabi_d2iz>
 8008ee8:	9017      	str	r0, [sp, #92]	; 0x5c
 8008eea:	f7f9 fe11 	bl	8002b10 <__aeabi_i2d>
 8008eee:	0002      	movs	r2, r0
 8008ef0:	000b      	movs	r3, r1
 8008ef2:	0020      	movs	r0, r4
 8008ef4:	0029      	movs	r1, r5
 8008ef6:	f7f9 fa25 	bl	8002344 <__aeabi_dsub>
 8008efa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008efc:	9a08      	ldr	r2, [sp, #32]
 8008efe:	3330      	adds	r3, #48	; 0x30
 8008f00:	7013      	strb	r3, [r2, #0]
 8008f02:	0013      	movs	r3, r2
 8008f04:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f06:	3301      	adds	r3, #1
 8008f08:	0004      	movs	r4, r0
 8008f0a:	000d      	movs	r5, r1
 8008f0c:	9308      	str	r3, [sp, #32]
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d12c      	bne.n	8008f6c <_dtoa_r+0x680>
 8008f12:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008f14:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f16:	9a06      	ldr	r2, [sp, #24]
 8008f18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f1a:	4694      	mov	ip, r2
 8008f1c:	4463      	add	r3, ip
 8008f1e:	2200      	movs	r2, #0
 8008f20:	9308      	str	r3, [sp, #32]
 8008f22:	4b1e      	ldr	r3, [pc, #120]	; (8008f9c <_dtoa_r+0x6b0>)
 8008f24:	f7f8 f864 	bl	8000ff0 <__aeabi_dadd>
 8008f28:	0002      	movs	r2, r0
 8008f2a:	000b      	movs	r3, r1
 8008f2c:	0020      	movs	r0, r4
 8008f2e:	0029      	movs	r1, r5
 8008f30:	f7f7 faa6 	bl	8000480 <__aeabi_dcmpgt>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d000      	beq.n	8008f3a <_dtoa_r+0x64e>
 8008f38:	e080      	b.n	800903c <_dtoa_r+0x750>
 8008f3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f3e:	2000      	movs	r0, #0
 8008f40:	4916      	ldr	r1, [pc, #88]	; (8008f9c <_dtoa_r+0x6b0>)
 8008f42:	f7f9 f9ff 	bl	8002344 <__aeabi_dsub>
 8008f46:	0002      	movs	r2, r0
 8008f48:	000b      	movs	r3, r1
 8008f4a:	0020      	movs	r0, r4
 8008f4c:	0029      	movs	r1, r5
 8008f4e:	f7f7 fa83 	bl	8000458 <__aeabi_dcmplt>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d100      	bne.n	8008f58 <_dtoa_r+0x66c>
 8008f56:	e714      	b.n	8008d82 <_dtoa_r+0x496>
 8008f58:	9b08      	ldr	r3, [sp, #32]
 8008f5a:	001a      	movs	r2, r3
 8008f5c:	3a01      	subs	r2, #1
 8008f5e:	9208      	str	r2, [sp, #32]
 8008f60:	7812      	ldrb	r2, [r2, #0]
 8008f62:	2a30      	cmp	r2, #48	; 0x30
 8008f64:	d0f8      	beq.n	8008f58 <_dtoa_r+0x66c>
 8008f66:	9308      	str	r3, [sp, #32]
 8008f68:	9602      	str	r6, [sp, #8]
 8008f6a:	e055      	b.n	8009018 <_dtoa_r+0x72c>
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	4b06      	ldr	r3, [pc, #24]	; (8008f88 <_dtoa_r+0x69c>)
 8008f70:	f7f8 ff7c 	bl	8001e6c <__aeabi_dmul>
 8008f74:	0004      	movs	r4, r0
 8008f76:	000d      	movs	r5, r1
 8008f78:	e7b2      	b.n	8008ee0 <_dtoa_r+0x5f4>
 8008f7a:	46c0      	nop			; (mov r8, r8)
 8008f7c:	0800bef8 	.word	0x0800bef8
 8008f80:	0800bed0 	.word	0x0800bed0
 8008f84:	3ff00000 	.word	0x3ff00000
 8008f88:	40240000 	.word	0x40240000
 8008f8c:	401c0000 	.word	0x401c0000
 8008f90:	fcc00000 	.word	0xfcc00000
 8008f94:	40140000 	.word	0x40140000
 8008f98:	7cc00000 	.word	0x7cc00000
 8008f9c:	3fe00000 	.word	0x3fe00000
 8008fa0:	9b07      	ldr	r3, [sp, #28]
 8008fa2:	9e06      	ldr	r6, [sp, #24]
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	199b      	adds	r3, r3, r6
 8008fa8:	930c      	str	r3, [sp, #48]	; 0x30
 8008faa:	9c08      	ldr	r4, [sp, #32]
 8008fac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008fae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fb2:	0020      	movs	r0, r4
 8008fb4:	0029      	movs	r1, r5
 8008fb6:	f7f8 fb57 	bl	8001668 <__aeabi_ddiv>
 8008fba:	f7f9 fd73 	bl	8002aa4 <__aeabi_d2iz>
 8008fbe:	9007      	str	r0, [sp, #28]
 8008fc0:	f7f9 fda6 	bl	8002b10 <__aeabi_i2d>
 8008fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fc8:	f7f8 ff50 	bl	8001e6c <__aeabi_dmul>
 8008fcc:	0002      	movs	r2, r0
 8008fce:	000b      	movs	r3, r1
 8008fd0:	0020      	movs	r0, r4
 8008fd2:	0029      	movs	r1, r5
 8008fd4:	f7f9 f9b6 	bl	8002344 <__aeabi_dsub>
 8008fd8:	0033      	movs	r3, r6
 8008fda:	9a07      	ldr	r2, [sp, #28]
 8008fdc:	3601      	adds	r6, #1
 8008fde:	3230      	adds	r2, #48	; 0x30
 8008fe0:	701a      	strb	r2, [r3, #0]
 8008fe2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fe4:	9608      	str	r6, [sp, #32]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d139      	bne.n	800905e <_dtoa_r+0x772>
 8008fea:	0002      	movs	r2, r0
 8008fec:	000b      	movs	r3, r1
 8008fee:	f7f7 ffff 	bl	8000ff0 <__aeabi_dadd>
 8008ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ff6:	0004      	movs	r4, r0
 8008ff8:	000d      	movs	r5, r1
 8008ffa:	f7f7 fa41 	bl	8000480 <__aeabi_dcmpgt>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d11b      	bne.n	800903a <_dtoa_r+0x74e>
 8009002:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009006:	0020      	movs	r0, r4
 8009008:	0029      	movs	r1, r5
 800900a:	f7f7 fa1f 	bl	800044c <__aeabi_dcmpeq>
 800900e:	2800      	cmp	r0, #0
 8009010:	d002      	beq.n	8009018 <_dtoa_r+0x72c>
 8009012:	9b07      	ldr	r3, [sp, #28]
 8009014:	07db      	lsls	r3, r3, #31
 8009016:	d410      	bmi.n	800903a <_dtoa_r+0x74e>
 8009018:	0038      	movs	r0, r7
 800901a:	9905      	ldr	r1, [sp, #20]
 800901c:	f000 fae6 	bl	80095ec <_Bfree>
 8009020:	2300      	movs	r3, #0
 8009022:	9a08      	ldr	r2, [sp, #32]
 8009024:	9802      	ldr	r0, [sp, #8]
 8009026:	7013      	strb	r3, [r2, #0]
 8009028:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800902a:	3001      	adds	r0, #1
 800902c:	6018      	str	r0, [r3, #0]
 800902e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009030:	2b00      	cmp	r3, #0
 8009032:	d100      	bne.n	8009036 <_dtoa_r+0x74a>
 8009034:	e4a6      	b.n	8008984 <_dtoa_r+0x98>
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	e4a4      	b.n	8008984 <_dtoa_r+0x98>
 800903a:	9e02      	ldr	r6, [sp, #8]
 800903c:	9b08      	ldr	r3, [sp, #32]
 800903e:	9308      	str	r3, [sp, #32]
 8009040:	3b01      	subs	r3, #1
 8009042:	781a      	ldrb	r2, [r3, #0]
 8009044:	2a39      	cmp	r2, #57	; 0x39
 8009046:	d106      	bne.n	8009056 <_dtoa_r+0x76a>
 8009048:	9a06      	ldr	r2, [sp, #24]
 800904a:	429a      	cmp	r2, r3
 800904c:	d1f7      	bne.n	800903e <_dtoa_r+0x752>
 800904e:	2230      	movs	r2, #48	; 0x30
 8009050:	9906      	ldr	r1, [sp, #24]
 8009052:	3601      	adds	r6, #1
 8009054:	700a      	strb	r2, [r1, #0]
 8009056:	781a      	ldrb	r2, [r3, #0]
 8009058:	3201      	adds	r2, #1
 800905a:	701a      	strb	r2, [r3, #0]
 800905c:	e784      	b.n	8008f68 <_dtoa_r+0x67c>
 800905e:	2200      	movs	r2, #0
 8009060:	4baa      	ldr	r3, [pc, #680]	; (800930c <_dtoa_r+0xa20>)
 8009062:	f7f8 ff03 	bl	8001e6c <__aeabi_dmul>
 8009066:	2200      	movs	r2, #0
 8009068:	2300      	movs	r3, #0
 800906a:	0004      	movs	r4, r0
 800906c:	000d      	movs	r5, r1
 800906e:	f7f7 f9ed 	bl	800044c <__aeabi_dcmpeq>
 8009072:	2800      	cmp	r0, #0
 8009074:	d09b      	beq.n	8008fae <_dtoa_r+0x6c2>
 8009076:	e7cf      	b.n	8009018 <_dtoa_r+0x72c>
 8009078:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800907a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800907c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800907e:	2d00      	cmp	r5, #0
 8009080:	d012      	beq.n	80090a8 <_dtoa_r+0x7bc>
 8009082:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009084:	2a01      	cmp	r2, #1
 8009086:	dc66      	bgt.n	8009156 <_dtoa_r+0x86a>
 8009088:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800908a:	2a00      	cmp	r2, #0
 800908c:	d05d      	beq.n	800914a <_dtoa_r+0x85e>
 800908e:	4aa0      	ldr	r2, [pc, #640]	; (8009310 <_dtoa_r+0xa24>)
 8009090:	189b      	adds	r3, r3, r2
 8009092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009094:	2101      	movs	r1, #1
 8009096:	18d2      	adds	r2, r2, r3
 8009098:	920a      	str	r2, [sp, #40]	; 0x28
 800909a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800909c:	0038      	movs	r0, r7
 800909e:	18d3      	adds	r3, r2, r3
 80090a0:	930d      	str	r3, [sp, #52]	; 0x34
 80090a2:	f000 fb53 	bl	800974c <__i2b>
 80090a6:	0005      	movs	r5, r0
 80090a8:	2c00      	cmp	r4, #0
 80090aa:	dd0e      	ble.n	80090ca <_dtoa_r+0x7de>
 80090ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	dd0b      	ble.n	80090ca <_dtoa_r+0x7de>
 80090b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090b4:	0023      	movs	r3, r4
 80090b6:	4294      	cmp	r4, r2
 80090b8:	dd00      	ble.n	80090bc <_dtoa_r+0x7d0>
 80090ba:	0013      	movs	r3, r2
 80090bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090be:	1ae4      	subs	r4, r4, r3
 80090c0:	1ad2      	subs	r2, r2, r3
 80090c2:	920a      	str	r2, [sp, #40]	; 0x28
 80090c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	930d      	str	r3, [sp, #52]	; 0x34
 80090ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d01f      	beq.n	8009110 <_dtoa_r+0x824>
 80090d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d054      	beq.n	8009180 <_dtoa_r+0x894>
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	dd11      	ble.n	80090fe <_dtoa_r+0x812>
 80090da:	0029      	movs	r1, r5
 80090dc:	0032      	movs	r2, r6
 80090de:	0038      	movs	r0, r7
 80090e0:	f000 fbfa 	bl	80098d8 <__pow5mult>
 80090e4:	9a05      	ldr	r2, [sp, #20]
 80090e6:	0001      	movs	r1, r0
 80090e8:	0005      	movs	r5, r0
 80090ea:	0038      	movs	r0, r7
 80090ec:	f000 fb44 	bl	8009778 <__multiply>
 80090f0:	9905      	ldr	r1, [sp, #20]
 80090f2:	9014      	str	r0, [sp, #80]	; 0x50
 80090f4:	0038      	movs	r0, r7
 80090f6:	f000 fa79 	bl	80095ec <_Bfree>
 80090fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090fc:	9305      	str	r3, [sp, #20]
 80090fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009100:	1b9a      	subs	r2, r3, r6
 8009102:	42b3      	cmp	r3, r6
 8009104:	d004      	beq.n	8009110 <_dtoa_r+0x824>
 8009106:	0038      	movs	r0, r7
 8009108:	9905      	ldr	r1, [sp, #20]
 800910a:	f000 fbe5 	bl	80098d8 <__pow5mult>
 800910e:	9005      	str	r0, [sp, #20]
 8009110:	2101      	movs	r1, #1
 8009112:	0038      	movs	r0, r7
 8009114:	f000 fb1a 	bl	800974c <__i2b>
 8009118:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800911a:	0006      	movs	r6, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	dd31      	ble.n	8009184 <_dtoa_r+0x898>
 8009120:	001a      	movs	r2, r3
 8009122:	0001      	movs	r1, r0
 8009124:	0038      	movs	r0, r7
 8009126:	f000 fbd7 	bl	80098d8 <__pow5mult>
 800912a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800912c:	0006      	movs	r6, r0
 800912e:	2b01      	cmp	r3, #1
 8009130:	dd2d      	ble.n	800918e <_dtoa_r+0x8a2>
 8009132:	2300      	movs	r3, #0
 8009134:	930e      	str	r3, [sp, #56]	; 0x38
 8009136:	6933      	ldr	r3, [r6, #16]
 8009138:	3303      	adds	r3, #3
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	18f3      	adds	r3, r6, r3
 800913e:	6858      	ldr	r0, [r3, #4]
 8009140:	f000 fabc 	bl	80096bc <__hi0bits>
 8009144:	2320      	movs	r3, #32
 8009146:	1a18      	subs	r0, r3, r0
 8009148:	e039      	b.n	80091be <_dtoa_r+0x8d2>
 800914a:	2336      	movs	r3, #54	; 0x36
 800914c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800914e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009150:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009152:	1a9b      	subs	r3, r3, r2
 8009154:	e79d      	b.n	8009092 <_dtoa_r+0x7a6>
 8009156:	9b07      	ldr	r3, [sp, #28]
 8009158:	1e5e      	subs	r6, r3, #1
 800915a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800915c:	42b3      	cmp	r3, r6
 800915e:	db07      	blt.n	8009170 <_dtoa_r+0x884>
 8009160:	1b9e      	subs	r6, r3, r6
 8009162:	9b07      	ldr	r3, [sp, #28]
 8009164:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009166:	2b00      	cmp	r3, #0
 8009168:	da93      	bge.n	8009092 <_dtoa_r+0x7a6>
 800916a:	1ae4      	subs	r4, r4, r3
 800916c:	2300      	movs	r3, #0
 800916e:	e790      	b.n	8009092 <_dtoa_r+0x7a6>
 8009170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009172:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009174:	1af3      	subs	r3, r6, r3
 8009176:	18d3      	adds	r3, r2, r3
 8009178:	960e      	str	r6, [sp, #56]	; 0x38
 800917a:	9315      	str	r3, [sp, #84]	; 0x54
 800917c:	2600      	movs	r6, #0
 800917e:	e7f0      	b.n	8009162 <_dtoa_r+0x876>
 8009180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009182:	e7c0      	b.n	8009106 <_dtoa_r+0x81a>
 8009184:	2300      	movs	r3, #0
 8009186:	930e      	str	r3, [sp, #56]	; 0x38
 8009188:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800918a:	2b01      	cmp	r3, #1
 800918c:	dc13      	bgt.n	80091b6 <_dtoa_r+0x8ca>
 800918e:	2300      	movs	r3, #0
 8009190:	930e      	str	r3, [sp, #56]	; 0x38
 8009192:	9b08      	ldr	r3, [sp, #32]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10e      	bne.n	80091b6 <_dtoa_r+0x8ca>
 8009198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800919a:	031b      	lsls	r3, r3, #12
 800919c:	d10b      	bne.n	80091b6 <_dtoa_r+0x8ca>
 800919e:	4b5d      	ldr	r3, [pc, #372]	; (8009314 <_dtoa_r+0xa28>)
 80091a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091a2:	4213      	tst	r3, r2
 80091a4:	d007      	beq.n	80091b6 <_dtoa_r+0x8ca>
 80091a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091a8:	3301      	adds	r3, #1
 80091aa:	930a      	str	r3, [sp, #40]	; 0x28
 80091ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091ae:	3301      	adds	r3, #1
 80091b0:	930d      	str	r3, [sp, #52]	; 0x34
 80091b2:	2301      	movs	r3, #1
 80091b4:	930e      	str	r3, [sp, #56]	; 0x38
 80091b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091b8:	2001      	movs	r0, #1
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1bb      	bne.n	8009136 <_dtoa_r+0x84a>
 80091be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091c0:	221f      	movs	r2, #31
 80091c2:	1818      	adds	r0, r3, r0
 80091c4:	0003      	movs	r3, r0
 80091c6:	4013      	ands	r3, r2
 80091c8:	4210      	tst	r0, r2
 80091ca:	d046      	beq.n	800925a <_dtoa_r+0x96e>
 80091cc:	3201      	adds	r2, #1
 80091ce:	1ad2      	subs	r2, r2, r3
 80091d0:	2a04      	cmp	r2, #4
 80091d2:	dd3f      	ble.n	8009254 <_dtoa_r+0x968>
 80091d4:	221c      	movs	r2, #28
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091da:	18e4      	adds	r4, r4, r3
 80091dc:	18d2      	adds	r2, r2, r3
 80091de:	920a      	str	r2, [sp, #40]	; 0x28
 80091e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091e2:	18d3      	adds	r3, r2, r3
 80091e4:	930d      	str	r3, [sp, #52]	; 0x34
 80091e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	dd05      	ble.n	80091f8 <_dtoa_r+0x90c>
 80091ec:	001a      	movs	r2, r3
 80091ee:	0038      	movs	r0, r7
 80091f0:	9905      	ldr	r1, [sp, #20]
 80091f2:	f000 fbcd 	bl	8009990 <__lshift>
 80091f6:	9005      	str	r0, [sp, #20]
 80091f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	dd05      	ble.n	800920a <_dtoa_r+0x91e>
 80091fe:	0031      	movs	r1, r6
 8009200:	001a      	movs	r2, r3
 8009202:	0038      	movs	r0, r7
 8009204:	f000 fbc4 	bl	8009990 <__lshift>
 8009208:	0006      	movs	r6, r0
 800920a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800920c:	2b00      	cmp	r3, #0
 800920e:	d026      	beq.n	800925e <_dtoa_r+0x972>
 8009210:	0031      	movs	r1, r6
 8009212:	9805      	ldr	r0, [sp, #20]
 8009214:	f000 fc2a 	bl	8009a6c <__mcmp>
 8009218:	2800      	cmp	r0, #0
 800921a:	da20      	bge.n	800925e <_dtoa_r+0x972>
 800921c:	9b02      	ldr	r3, [sp, #8]
 800921e:	220a      	movs	r2, #10
 8009220:	3b01      	subs	r3, #1
 8009222:	9302      	str	r3, [sp, #8]
 8009224:	0038      	movs	r0, r7
 8009226:	2300      	movs	r3, #0
 8009228:	9905      	ldr	r1, [sp, #20]
 800922a:	f000 fa03 	bl	8009634 <__multadd>
 800922e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009230:	9005      	str	r0, [sp, #20]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d100      	bne.n	8009238 <_dtoa_r+0x94c>
 8009236:	e166      	b.n	8009506 <_dtoa_r+0xc1a>
 8009238:	2300      	movs	r3, #0
 800923a:	0029      	movs	r1, r5
 800923c:	220a      	movs	r2, #10
 800923e:	0038      	movs	r0, r7
 8009240:	f000 f9f8 	bl	8009634 <__multadd>
 8009244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009246:	0005      	movs	r5, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	dc47      	bgt.n	80092dc <_dtoa_r+0x9f0>
 800924c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800924e:	2b02      	cmp	r3, #2
 8009250:	dc0d      	bgt.n	800926e <_dtoa_r+0x982>
 8009252:	e043      	b.n	80092dc <_dtoa_r+0x9f0>
 8009254:	2a04      	cmp	r2, #4
 8009256:	d0c6      	beq.n	80091e6 <_dtoa_r+0x8fa>
 8009258:	0013      	movs	r3, r2
 800925a:	331c      	adds	r3, #28
 800925c:	e7bc      	b.n	80091d8 <_dtoa_r+0x8ec>
 800925e:	9b07      	ldr	r3, [sp, #28]
 8009260:	2b00      	cmp	r3, #0
 8009262:	dc35      	bgt.n	80092d0 <_dtoa_r+0x9e4>
 8009264:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009266:	2b02      	cmp	r3, #2
 8009268:	dd32      	ble.n	80092d0 <_dtoa_r+0x9e4>
 800926a:	9b07      	ldr	r3, [sp, #28]
 800926c:	930c      	str	r3, [sp, #48]	; 0x30
 800926e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10c      	bne.n	800928e <_dtoa_r+0x9a2>
 8009274:	0031      	movs	r1, r6
 8009276:	2205      	movs	r2, #5
 8009278:	0038      	movs	r0, r7
 800927a:	f000 f9db 	bl	8009634 <__multadd>
 800927e:	0006      	movs	r6, r0
 8009280:	0001      	movs	r1, r0
 8009282:	9805      	ldr	r0, [sp, #20]
 8009284:	f000 fbf2 	bl	8009a6c <__mcmp>
 8009288:	2800      	cmp	r0, #0
 800928a:	dd00      	ble.n	800928e <_dtoa_r+0x9a2>
 800928c:	e5a5      	b.n	8008dda <_dtoa_r+0x4ee>
 800928e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009290:	43db      	mvns	r3, r3
 8009292:	9302      	str	r3, [sp, #8]
 8009294:	9b06      	ldr	r3, [sp, #24]
 8009296:	9308      	str	r3, [sp, #32]
 8009298:	2400      	movs	r4, #0
 800929a:	0031      	movs	r1, r6
 800929c:	0038      	movs	r0, r7
 800929e:	f000 f9a5 	bl	80095ec <_Bfree>
 80092a2:	2d00      	cmp	r5, #0
 80092a4:	d100      	bne.n	80092a8 <_dtoa_r+0x9bc>
 80092a6:	e6b7      	b.n	8009018 <_dtoa_r+0x72c>
 80092a8:	2c00      	cmp	r4, #0
 80092aa:	d005      	beq.n	80092b8 <_dtoa_r+0x9cc>
 80092ac:	42ac      	cmp	r4, r5
 80092ae:	d003      	beq.n	80092b8 <_dtoa_r+0x9cc>
 80092b0:	0021      	movs	r1, r4
 80092b2:	0038      	movs	r0, r7
 80092b4:	f000 f99a 	bl	80095ec <_Bfree>
 80092b8:	0029      	movs	r1, r5
 80092ba:	0038      	movs	r0, r7
 80092bc:	f000 f996 	bl	80095ec <_Bfree>
 80092c0:	e6aa      	b.n	8009018 <_dtoa_r+0x72c>
 80092c2:	2600      	movs	r6, #0
 80092c4:	0035      	movs	r5, r6
 80092c6:	e7e2      	b.n	800928e <_dtoa_r+0x9a2>
 80092c8:	9602      	str	r6, [sp, #8]
 80092ca:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80092cc:	0035      	movs	r5, r6
 80092ce:	e584      	b.n	8008dda <_dtoa_r+0x4ee>
 80092d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d100      	bne.n	80092d8 <_dtoa_r+0x9ec>
 80092d6:	e0ce      	b.n	8009476 <_dtoa_r+0xb8a>
 80092d8:	9b07      	ldr	r3, [sp, #28]
 80092da:	930c      	str	r3, [sp, #48]	; 0x30
 80092dc:	2c00      	cmp	r4, #0
 80092de:	dd05      	ble.n	80092ec <_dtoa_r+0xa00>
 80092e0:	0029      	movs	r1, r5
 80092e2:	0022      	movs	r2, r4
 80092e4:	0038      	movs	r0, r7
 80092e6:	f000 fb53 	bl	8009990 <__lshift>
 80092ea:	0005      	movs	r5, r0
 80092ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092ee:	0028      	movs	r0, r5
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d022      	beq.n	800933a <_dtoa_r+0xa4e>
 80092f4:	0038      	movs	r0, r7
 80092f6:	6869      	ldr	r1, [r5, #4]
 80092f8:	f000 f934 	bl	8009564 <_Balloc>
 80092fc:	1e04      	subs	r4, r0, #0
 80092fe:	d10f      	bne.n	8009320 <_dtoa_r+0xa34>
 8009300:	0002      	movs	r2, r0
 8009302:	4b05      	ldr	r3, [pc, #20]	; (8009318 <_dtoa_r+0xa2c>)
 8009304:	4905      	ldr	r1, [pc, #20]	; (800931c <_dtoa_r+0xa30>)
 8009306:	f7ff fb06 	bl	8008916 <_dtoa_r+0x2a>
 800930a:	46c0      	nop			; (mov r8, r8)
 800930c:	40240000 	.word	0x40240000
 8009310:	00000433 	.word	0x00000433
 8009314:	7ff00000 	.word	0x7ff00000
 8009318:	0800be5f 	.word	0x0800be5f
 800931c:	000002ea 	.word	0x000002ea
 8009320:	0029      	movs	r1, r5
 8009322:	692b      	ldr	r3, [r5, #16]
 8009324:	310c      	adds	r1, #12
 8009326:	1c9a      	adds	r2, r3, #2
 8009328:	0092      	lsls	r2, r2, #2
 800932a:	300c      	adds	r0, #12
 800932c:	f000 f911 	bl	8009552 <memcpy>
 8009330:	2201      	movs	r2, #1
 8009332:	0021      	movs	r1, r4
 8009334:	0038      	movs	r0, r7
 8009336:	f000 fb2b 	bl	8009990 <__lshift>
 800933a:	9b06      	ldr	r3, [sp, #24]
 800933c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800933e:	930a      	str	r3, [sp, #40]	; 0x28
 8009340:	3b01      	subs	r3, #1
 8009342:	189b      	adds	r3, r3, r2
 8009344:	2201      	movs	r2, #1
 8009346:	002c      	movs	r4, r5
 8009348:	0005      	movs	r5, r0
 800934a:	9314      	str	r3, [sp, #80]	; 0x50
 800934c:	9b08      	ldr	r3, [sp, #32]
 800934e:	4013      	ands	r3, r2
 8009350:	930f      	str	r3, [sp, #60]	; 0x3c
 8009352:	0031      	movs	r1, r6
 8009354:	9805      	ldr	r0, [sp, #20]
 8009356:	f7ff fa3d 	bl	80087d4 <quorem>
 800935a:	0003      	movs	r3, r0
 800935c:	0021      	movs	r1, r4
 800935e:	3330      	adds	r3, #48	; 0x30
 8009360:	900d      	str	r0, [sp, #52]	; 0x34
 8009362:	9805      	ldr	r0, [sp, #20]
 8009364:	9307      	str	r3, [sp, #28]
 8009366:	f000 fb81 	bl	8009a6c <__mcmp>
 800936a:	002a      	movs	r2, r5
 800936c:	900e      	str	r0, [sp, #56]	; 0x38
 800936e:	0031      	movs	r1, r6
 8009370:	0038      	movs	r0, r7
 8009372:	f000 fb97 	bl	8009aa4 <__mdiff>
 8009376:	68c3      	ldr	r3, [r0, #12]
 8009378:	9008      	str	r0, [sp, #32]
 800937a:	9310      	str	r3, [sp, #64]	; 0x40
 800937c:	2301      	movs	r3, #1
 800937e:	930c      	str	r3, [sp, #48]	; 0x30
 8009380:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009382:	2b00      	cmp	r3, #0
 8009384:	d104      	bne.n	8009390 <_dtoa_r+0xaa4>
 8009386:	0001      	movs	r1, r0
 8009388:	9805      	ldr	r0, [sp, #20]
 800938a:	f000 fb6f 	bl	8009a6c <__mcmp>
 800938e:	900c      	str	r0, [sp, #48]	; 0x30
 8009390:	0038      	movs	r0, r7
 8009392:	9908      	ldr	r1, [sp, #32]
 8009394:	f000 f92a 	bl	80095ec <_Bfree>
 8009398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800939a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800939c:	3301      	adds	r3, #1
 800939e:	9308      	str	r3, [sp, #32]
 80093a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093a2:	4313      	orrs	r3, r2
 80093a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093a6:	4313      	orrs	r3, r2
 80093a8:	d10c      	bne.n	80093c4 <_dtoa_r+0xad8>
 80093aa:	9b07      	ldr	r3, [sp, #28]
 80093ac:	2b39      	cmp	r3, #57	; 0x39
 80093ae:	d026      	beq.n	80093fe <_dtoa_r+0xb12>
 80093b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	dd02      	ble.n	80093bc <_dtoa_r+0xad0>
 80093b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093b8:	3331      	adds	r3, #49	; 0x31
 80093ba:	9307      	str	r3, [sp, #28]
 80093bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093be:	9a07      	ldr	r2, [sp, #28]
 80093c0:	701a      	strb	r2, [r3, #0]
 80093c2:	e76a      	b.n	800929a <_dtoa_r+0x9ae>
 80093c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	db04      	blt.n	80093d4 <_dtoa_r+0xae8>
 80093ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80093cc:	4313      	orrs	r3, r2
 80093ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093d0:	4313      	orrs	r3, r2
 80093d2:	d11f      	bne.n	8009414 <_dtoa_r+0xb28>
 80093d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	ddf0      	ble.n	80093bc <_dtoa_r+0xad0>
 80093da:	9905      	ldr	r1, [sp, #20]
 80093dc:	2201      	movs	r2, #1
 80093de:	0038      	movs	r0, r7
 80093e0:	f000 fad6 	bl	8009990 <__lshift>
 80093e4:	0031      	movs	r1, r6
 80093e6:	9005      	str	r0, [sp, #20]
 80093e8:	f000 fb40 	bl	8009a6c <__mcmp>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	dc03      	bgt.n	80093f8 <_dtoa_r+0xb0c>
 80093f0:	d1e4      	bne.n	80093bc <_dtoa_r+0xad0>
 80093f2:	9b07      	ldr	r3, [sp, #28]
 80093f4:	07db      	lsls	r3, r3, #31
 80093f6:	d5e1      	bpl.n	80093bc <_dtoa_r+0xad0>
 80093f8:	9b07      	ldr	r3, [sp, #28]
 80093fa:	2b39      	cmp	r3, #57	; 0x39
 80093fc:	d1db      	bne.n	80093b6 <_dtoa_r+0xaca>
 80093fe:	2339      	movs	r3, #57	; 0x39
 8009400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009402:	7013      	strb	r3, [r2, #0]
 8009404:	9b08      	ldr	r3, [sp, #32]
 8009406:	9308      	str	r3, [sp, #32]
 8009408:	3b01      	subs	r3, #1
 800940a:	781a      	ldrb	r2, [r3, #0]
 800940c:	2a39      	cmp	r2, #57	; 0x39
 800940e:	d068      	beq.n	80094e2 <_dtoa_r+0xbf6>
 8009410:	3201      	adds	r2, #1
 8009412:	e7d5      	b.n	80093c0 <_dtoa_r+0xad4>
 8009414:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009416:	2b00      	cmp	r3, #0
 8009418:	dd07      	ble.n	800942a <_dtoa_r+0xb3e>
 800941a:	9b07      	ldr	r3, [sp, #28]
 800941c:	2b39      	cmp	r3, #57	; 0x39
 800941e:	d0ee      	beq.n	80093fe <_dtoa_r+0xb12>
 8009420:	9b07      	ldr	r3, [sp, #28]
 8009422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009424:	3301      	adds	r3, #1
 8009426:	7013      	strb	r3, [r2, #0]
 8009428:	e737      	b.n	800929a <_dtoa_r+0x9ae>
 800942a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800942c:	9a07      	ldr	r2, [sp, #28]
 800942e:	701a      	strb	r2, [r3, #0]
 8009430:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009434:	4293      	cmp	r3, r2
 8009436:	d03e      	beq.n	80094b6 <_dtoa_r+0xbca>
 8009438:	2300      	movs	r3, #0
 800943a:	220a      	movs	r2, #10
 800943c:	9905      	ldr	r1, [sp, #20]
 800943e:	0038      	movs	r0, r7
 8009440:	f000 f8f8 	bl	8009634 <__multadd>
 8009444:	2300      	movs	r3, #0
 8009446:	9005      	str	r0, [sp, #20]
 8009448:	220a      	movs	r2, #10
 800944a:	0021      	movs	r1, r4
 800944c:	0038      	movs	r0, r7
 800944e:	42ac      	cmp	r4, r5
 8009450:	d106      	bne.n	8009460 <_dtoa_r+0xb74>
 8009452:	f000 f8ef 	bl	8009634 <__multadd>
 8009456:	0004      	movs	r4, r0
 8009458:	0005      	movs	r5, r0
 800945a:	9b08      	ldr	r3, [sp, #32]
 800945c:	930a      	str	r3, [sp, #40]	; 0x28
 800945e:	e778      	b.n	8009352 <_dtoa_r+0xa66>
 8009460:	f000 f8e8 	bl	8009634 <__multadd>
 8009464:	0029      	movs	r1, r5
 8009466:	0004      	movs	r4, r0
 8009468:	2300      	movs	r3, #0
 800946a:	220a      	movs	r2, #10
 800946c:	0038      	movs	r0, r7
 800946e:	f000 f8e1 	bl	8009634 <__multadd>
 8009472:	0005      	movs	r5, r0
 8009474:	e7f1      	b.n	800945a <_dtoa_r+0xb6e>
 8009476:	9b07      	ldr	r3, [sp, #28]
 8009478:	930c      	str	r3, [sp, #48]	; 0x30
 800947a:	2400      	movs	r4, #0
 800947c:	0031      	movs	r1, r6
 800947e:	9805      	ldr	r0, [sp, #20]
 8009480:	f7ff f9a8 	bl	80087d4 <quorem>
 8009484:	9b06      	ldr	r3, [sp, #24]
 8009486:	3030      	adds	r0, #48	; 0x30
 8009488:	5518      	strb	r0, [r3, r4]
 800948a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800948c:	3401      	adds	r4, #1
 800948e:	9007      	str	r0, [sp, #28]
 8009490:	42a3      	cmp	r3, r4
 8009492:	dd07      	ble.n	80094a4 <_dtoa_r+0xbb8>
 8009494:	2300      	movs	r3, #0
 8009496:	220a      	movs	r2, #10
 8009498:	0038      	movs	r0, r7
 800949a:	9905      	ldr	r1, [sp, #20]
 800949c:	f000 f8ca 	bl	8009634 <__multadd>
 80094a0:	9005      	str	r0, [sp, #20]
 80094a2:	e7eb      	b.n	800947c <_dtoa_r+0xb90>
 80094a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094a6:	2001      	movs	r0, #1
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dd00      	ble.n	80094ae <_dtoa_r+0xbc2>
 80094ac:	0018      	movs	r0, r3
 80094ae:	2400      	movs	r4, #0
 80094b0:	9b06      	ldr	r3, [sp, #24]
 80094b2:	181b      	adds	r3, r3, r0
 80094b4:	9308      	str	r3, [sp, #32]
 80094b6:	9905      	ldr	r1, [sp, #20]
 80094b8:	2201      	movs	r2, #1
 80094ba:	0038      	movs	r0, r7
 80094bc:	f000 fa68 	bl	8009990 <__lshift>
 80094c0:	0031      	movs	r1, r6
 80094c2:	9005      	str	r0, [sp, #20]
 80094c4:	f000 fad2 	bl	8009a6c <__mcmp>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	dc9b      	bgt.n	8009404 <_dtoa_r+0xb18>
 80094cc:	d102      	bne.n	80094d4 <_dtoa_r+0xbe8>
 80094ce:	9b07      	ldr	r3, [sp, #28]
 80094d0:	07db      	lsls	r3, r3, #31
 80094d2:	d497      	bmi.n	8009404 <_dtoa_r+0xb18>
 80094d4:	9b08      	ldr	r3, [sp, #32]
 80094d6:	9308      	str	r3, [sp, #32]
 80094d8:	3b01      	subs	r3, #1
 80094da:	781a      	ldrb	r2, [r3, #0]
 80094dc:	2a30      	cmp	r2, #48	; 0x30
 80094de:	d0fa      	beq.n	80094d6 <_dtoa_r+0xbea>
 80094e0:	e6db      	b.n	800929a <_dtoa_r+0x9ae>
 80094e2:	9a06      	ldr	r2, [sp, #24]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d18e      	bne.n	8009406 <_dtoa_r+0xb1a>
 80094e8:	9b02      	ldr	r3, [sp, #8]
 80094ea:	3301      	adds	r3, #1
 80094ec:	9302      	str	r3, [sp, #8]
 80094ee:	2331      	movs	r3, #49	; 0x31
 80094f0:	e799      	b.n	8009426 <_dtoa_r+0xb3a>
 80094f2:	4b09      	ldr	r3, [pc, #36]	; (8009518 <_dtoa_r+0xc2c>)
 80094f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80094f6:	9306      	str	r3, [sp, #24]
 80094f8:	4b08      	ldr	r3, [pc, #32]	; (800951c <_dtoa_r+0xc30>)
 80094fa:	2a00      	cmp	r2, #0
 80094fc:	d001      	beq.n	8009502 <_dtoa_r+0xc16>
 80094fe:	f7ff fa3f 	bl	8008980 <_dtoa_r+0x94>
 8009502:	f7ff fa3f 	bl	8008984 <_dtoa_r+0x98>
 8009506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009508:	2b00      	cmp	r3, #0
 800950a:	dcb6      	bgt.n	800947a <_dtoa_r+0xb8e>
 800950c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800950e:	2b02      	cmp	r3, #2
 8009510:	dd00      	ble.n	8009514 <_dtoa_r+0xc28>
 8009512:	e6ac      	b.n	800926e <_dtoa_r+0x982>
 8009514:	e7b1      	b.n	800947a <_dtoa_r+0xb8e>
 8009516:	46c0      	nop			; (mov r8, r8)
 8009518:	0800bde0 	.word	0x0800bde0
 800951c:	0800bde8 	.word	0x0800bde8

08009520 <_localeconv_r>:
 8009520:	4800      	ldr	r0, [pc, #0]	; (8009524 <_localeconv_r+0x4>)
 8009522:	4770      	bx	lr
 8009524:	20000160 	.word	0x20000160

08009528 <malloc>:
 8009528:	b510      	push	{r4, lr}
 800952a:	4b03      	ldr	r3, [pc, #12]	; (8009538 <malloc+0x10>)
 800952c:	0001      	movs	r1, r0
 800952e:	6818      	ldr	r0, [r3, #0]
 8009530:	f000 fc4c 	bl	8009dcc <_malloc_r>
 8009534:	bd10      	pop	{r4, pc}
 8009536:	46c0      	nop			; (mov r8, r8)
 8009538:	2000000c 	.word	0x2000000c

0800953c <memchr>:
 800953c:	b2c9      	uxtb	r1, r1
 800953e:	1882      	adds	r2, r0, r2
 8009540:	4290      	cmp	r0, r2
 8009542:	d101      	bne.n	8009548 <memchr+0xc>
 8009544:	2000      	movs	r0, #0
 8009546:	4770      	bx	lr
 8009548:	7803      	ldrb	r3, [r0, #0]
 800954a:	428b      	cmp	r3, r1
 800954c:	d0fb      	beq.n	8009546 <memchr+0xa>
 800954e:	3001      	adds	r0, #1
 8009550:	e7f6      	b.n	8009540 <memchr+0x4>

08009552 <memcpy>:
 8009552:	2300      	movs	r3, #0
 8009554:	b510      	push	{r4, lr}
 8009556:	429a      	cmp	r2, r3
 8009558:	d100      	bne.n	800955c <memcpy+0xa>
 800955a:	bd10      	pop	{r4, pc}
 800955c:	5ccc      	ldrb	r4, [r1, r3]
 800955e:	54c4      	strb	r4, [r0, r3]
 8009560:	3301      	adds	r3, #1
 8009562:	e7f8      	b.n	8009556 <memcpy+0x4>

08009564 <_Balloc>:
 8009564:	b570      	push	{r4, r5, r6, lr}
 8009566:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009568:	0006      	movs	r6, r0
 800956a:	000c      	movs	r4, r1
 800956c:	2d00      	cmp	r5, #0
 800956e:	d10e      	bne.n	800958e <_Balloc+0x2a>
 8009570:	2010      	movs	r0, #16
 8009572:	f7ff ffd9 	bl	8009528 <malloc>
 8009576:	1e02      	subs	r2, r0, #0
 8009578:	6270      	str	r0, [r6, #36]	; 0x24
 800957a:	d104      	bne.n	8009586 <_Balloc+0x22>
 800957c:	2166      	movs	r1, #102	; 0x66
 800957e:	4b19      	ldr	r3, [pc, #100]	; (80095e4 <_Balloc+0x80>)
 8009580:	4819      	ldr	r0, [pc, #100]	; (80095e8 <_Balloc+0x84>)
 8009582:	f000 fe0d 	bl	800a1a0 <__assert_func>
 8009586:	6045      	str	r5, [r0, #4]
 8009588:	6085      	str	r5, [r0, #8]
 800958a:	6005      	str	r5, [r0, #0]
 800958c:	60c5      	str	r5, [r0, #12]
 800958e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009590:	68eb      	ldr	r3, [r5, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d013      	beq.n	80095be <_Balloc+0x5a>
 8009596:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009598:	00a2      	lsls	r2, r4, #2
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	189b      	adds	r3, r3, r2
 800959e:	6818      	ldr	r0, [r3, #0]
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d118      	bne.n	80095d6 <_Balloc+0x72>
 80095a4:	2101      	movs	r1, #1
 80095a6:	000d      	movs	r5, r1
 80095a8:	40a5      	lsls	r5, r4
 80095aa:	1d6a      	adds	r2, r5, #5
 80095ac:	0030      	movs	r0, r6
 80095ae:	0092      	lsls	r2, r2, #2
 80095b0:	f000 fb74 	bl	8009c9c <_calloc_r>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d00c      	beq.n	80095d2 <_Balloc+0x6e>
 80095b8:	6044      	str	r4, [r0, #4]
 80095ba:	6085      	str	r5, [r0, #8]
 80095bc:	e00d      	b.n	80095da <_Balloc+0x76>
 80095be:	2221      	movs	r2, #33	; 0x21
 80095c0:	2104      	movs	r1, #4
 80095c2:	0030      	movs	r0, r6
 80095c4:	f000 fb6a 	bl	8009c9c <_calloc_r>
 80095c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80095ca:	60e8      	str	r0, [r5, #12]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e1      	bne.n	8009596 <_Balloc+0x32>
 80095d2:	2000      	movs	r0, #0
 80095d4:	bd70      	pop	{r4, r5, r6, pc}
 80095d6:	6802      	ldr	r2, [r0, #0]
 80095d8:	601a      	str	r2, [r3, #0]
 80095da:	2300      	movs	r3, #0
 80095dc:	6103      	str	r3, [r0, #16]
 80095de:	60c3      	str	r3, [r0, #12]
 80095e0:	e7f8      	b.n	80095d4 <_Balloc+0x70>
 80095e2:	46c0      	nop			; (mov r8, r8)
 80095e4:	0800bded 	.word	0x0800bded
 80095e8:	0800be70 	.word	0x0800be70

080095ec <_Bfree>:
 80095ec:	b570      	push	{r4, r5, r6, lr}
 80095ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095f0:	0005      	movs	r5, r0
 80095f2:	000c      	movs	r4, r1
 80095f4:	2e00      	cmp	r6, #0
 80095f6:	d10e      	bne.n	8009616 <_Bfree+0x2a>
 80095f8:	2010      	movs	r0, #16
 80095fa:	f7ff ff95 	bl	8009528 <malloc>
 80095fe:	1e02      	subs	r2, r0, #0
 8009600:	6268      	str	r0, [r5, #36]	; 0x24
 8009602:	d104      	bne.n	800960e <_Bfree+0x22>
 8009604:	218a      	movs	r1, #138	; 0x8a
 8009606:	4b09      	ldr	r3, [pc, #36]	; (800962c <_Bfree+0x40>)
 8009608:	4809      	ldr	r0, [pc, #36]	; (8009630 <_Bfree+0x44>)
 800960a:	f000 fdc9 	bl	800a1a0 <__assert_func>
 800960e:	6046      	str	r6, [r0, #4]
 8009610:	6086      	str	r6, [r0, #8]
 8009612:	6006      	str	r6, [r0, #0]
 8009614:	60c6      	str	r6, [r0, #12]
 8009616:	2c00      	cmp	r4, #0
 8009618:	d007      	beq.n	800962a <_Bfree+0x3e>
 800961a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800961c:	6862      	ldr	r2, [r4, #4]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	0092      	lsls	r2, r2, #2
 8009622:	189b      	adds	r3, r3, r2
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	6022      	str	r2, [r4, #0]
 8009628:	601c      	str	r4, [r3, #0]
 800962a:	bd70      	pop	{r4, r5, r6, pc}
 800962c:	0800bded 	.word	0x0800bded
 8009630:	0800be70 	.word	0x0800be70

08009634 <__multadd>:
 8009634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009636:	000e      	movs	r6, r1
 8009638:	9001      	str	r0, [sp, #4]
 800963a:	000c      	movs	r4, r1
 800963c:	001d      	movs	r5, r3
 800963e:	2000      	movs	r0, #0
 8009640:	690f      	ldr	r7, [r1, #16]
 8009642:	3614      	adds	r6, #20
 8009644:	6833      	ldr	r3, [r6, #0]
 8009646:	3001      	adds	r0, #1
 8009648:	b299      	uxth	r1, r3
 800964a:	4351      	muls	r1, r2
 800964c:	0c1b      	lsrs	r3, r3, #16
 800964e:	4353      	muls	r3, r2
 8009650:	1949      	adds	r1, r1, r5
 8009652:	0c0d      	lsrs	r5, r1, #16
 8009654:	195b      	adds	r3, r3, r5
 8009656:	0c1d      	lsrs	r5, r3, #16
 8009658:	b289      	uxth	r1, r1
 800965a:	041b      	lsls	r3, r3, #16
 800965c:	185b      	adds	r3, r3, r1
 800965e:	c608      	stmia	r6!, {r3}
 8009660:	4287      	cmp	r7, r0
 8009662:	dcef      	bgt.n	8009644 <__multadd+0x10>
 8009664:	2d00      	cmp	r5, #0
 8009666:	d022      	beq.n	80096ae <__multadd+0x7a>
 8009668:	68a3      	ldr	r3, [r4, #8]
 800966a:	42bb      	cmp	r3, r7
 800966c:	dc19      	bgt.n	80096a2 <__multadd+0x6e>
 800966e:	6863      	ldr	r3, [r4, #4]
 8009670:	9801      	ldr	r0, [sp, #4]
 8009672:	1c59      	adds	r1, r3, #1
 8009674:	f7ff ff76 	bl	8009564 <_Balloc>
 8009678:	1e06      	subs	r6, r0, #0
 800967a:	d105      	bne.n	8009688 <__multadd+0x54>
 800967c:	0002      	movs	r2, r0
 800967e:	21b5      	movs	r1, #181	; 0xb5
 8009680:	4b0c      	ldr	r3, [pc, #48]	; (80096b4 <__multadd+0x80>)
 8009682:	480d      	ldr	r0, [pc, #52]	; (80096b8 <__multadd+0x84>)
 8009684:	f000 fd8c 	bl	800a1a0 <__assert_func>
 8009688:	0021      	movs	r1, r4
 800968a:	6923      	ldr	r3, [r4, #16]
 800968c:	310c      	adds	r1, #12
 800968e:	1c9a      	adds	r2, r3, #2
 8009690:	0092      	lsls	r2, r2, #2
 8009692:	300c      	adds	r0, #12
 8009694:	f7ff ff5d 	bl	8009552 <memcpy>
 8009698:	0021      	movs	r1, r4
 800969a:	9801      	ldr	r0, [sp, #4]
 800969c:	f7ff ffa6 	bl	80095ec <_Bfree>
 80096a0:	0034      	movs	r4, r6
 80096a2:	1d3b      	adds	r3, r7, #4
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	18e3      	adds	r3, r4, r3
 80096a8:	605d      	str	r5, [r3, #4]
 80096aa:	1c7b      	adds	r3, r7, #1
 80096ac:	6123      	str	r3, [r4, #16]
 80096ae:	0020      	movs	r0, r4
 80096b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80096b2:	46c0      	nop			; (mov r8, r8)
 80096b4:	0800be5f 	.word	0x0800be5f
 80096b8:	0800be70 	.word	0x0800be70

080096bc <__hi0bits>:
 80096bc:	0003      	movs	r3, r0
 80096be:	0c02      	lsrs	r2, r0, #16
 80096c0:	2000      	movs	r0, #0
 80096c2:	4282      	cmp	r2, r0
 80096c4:	d101      	bne.n	80096ca <__hi0bits+0xe>
 80096c6:	041b      	lsls	r3, r3, #16
 80096c8:	3010      	adds	r0, #16
 80096ca:	0e1a      	lsrs	r2, r3, #24
 80096cc:	d101      	bne.n	80096d2 <__hi0bits+0x16>
 80096ce:	3008      	adds	r0, #8
 80096d0:	021b      	lsls	r3, r3, #8
 80096d2:	0f1a      	lsrs	r2, r3, #28
 80096d4:	d101      	bne.n	80096da <__hi0bits+0x1e>
 80096d6:	3004      	adds	r0, #4
 80096d8:	011b      	lsls	r3, r3, #4
 80096da:	0f9a      	lsrs	r2, r3, #30
 80096dc:	d101      	bne.n	80096e2 <__hi0bits+0x26>
 80096de:	3002      	adds	r0, #2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	db03      	blt.n	80096ee <__hi0bits+0x32>
 80096e6:	3001      	adds	r0, #1
 80096e8:	005b      	lsls	r3, r3, #1
 80096ea:	d400      	bmi.n	80096ee <__hi0bits+0x32>
 80096ec:	2020      	movs	r0, #32
 80096ee:	4770      	bx	lr

080096f0 <__lo0bits>:
 80096f0:	6803      	ldr	r3, [r0, #0]
 80096f2:	0002      	movs	r2, r0
 80096f4:	2107      	movs	r1, #7
 80096f6:	0018      	movs	r0, r3
 80096f8:	4008      	ands	r0, r1
 80096fa:	420b      	tst	r3, r1
 80096fc:	d00d      	beq.n	800971a <__lo0bits+0x2a>
 80096fe:	3906      	subs	r1, #6
 8009700:	2000      	movs	r0, #0
 8009702:	420b      	tst	r3, r1
 8009704:	d105      	bne.n	8009712 <__lo0bits+0x22>
 8009706:	3002      	adds	r0, #2
 8009708:	4203      	tst	r3, r0
 800970a:	d003      	beq.n	8009714 <__lo0bits+0x24>
 800970c:	40cb      	lsrs	r3, r1
 800970e:	0008      	movs	r0, r1
 8009710:	6013      	str	r3, [r2, #0]
 8009712:	4770      	bx	lr
 8009714:	089b      	lsrs	r3, r3, #2
 8009716:	6013      	str	r3, [r2, #0]
 8009718:	e7fb      	b.n	8009712 <__lo0bits+0x22>
 800971a:	b299      	uxth	r1, r3
 800971c:	2900      	cmp	r1, #0
 800971e:	d101      	bne.n	8009724 <__lo0bits+0x34>
 8009720:	2010      	movs	r0, #16
 8009722:	0c1b      	lsrs	r3, r3, #16
 8009724:	b2d9      	uxtb	r1, r3
 8009726:	2900      	cmp	r1, #0
 8009728:	d101      	bne.n	800972e <__lo0bits+0x3e>
 800972a:	3008      	adds	r0, #8
 800972c:	0a1b      	lsrs	r3, r3, #8
 800972e:	0719      	lsls	r1, r3, #28
 8009730:	d101      	bne.n	8009736 <__lo0bits+0x46>
 8009732:	3004      	adds	r0, #4
 8009734:	091b      	lsrs	r3, r3, #4
 8009736:	0799      	lsls	r1, r3, #30
 8009738:	d101      	bne.n	800973e <__lo0bits+0x4e>
 800973a:	3002      	adds	r0, #2
 800973c:	089b      	lsrs	r3, r3, #2
 800973e:	07d9      	lsls	r1, r3, #31
 8009740:	d4e9      	bmi.n	8009716 <__lo0bits+0x26>
 8009742:	3001      	adds	r0, #1
 8009744:	085b      	lsrs	r3, r3, #1
 8009746:	d1e6      	bne.n	8009716 <__lo0bits+0x26>
 8009748:	2020      	movs	r0, #32
 800974a:	e7e2      	b.n	8009712 <__lo0bits+0x22>

0800974c <__i2b>:
 800974c:	b510      	push	{r4, lr}
 800974e:	000c      	movs	r4, r1
 8009750:	2101      	movs	r1, #1
 8009752:	f7ff ff07 	bl	8009564 <_Balloc>
 8009756:	2800      	cmp	r0, #0
 8009758:	d106      	bne.n	8009768 <__i2b+0x1c>
 800975a:	21a0      	movs	r1, #160	; 0xa0
 800975c:	0002      	movs	r2, r0
 800975e:	4b04      	ldr	r3, [pc, #16]	; (8009770 <__i2b+0x24>)
 8009760:	4804      	ldr	r0, [pc, #16]	; (8009774 <__i2b+0x28>)
 8009762:	0049      	lsls	r1, r1, #1
 8009764:	f000 fd1c 	bl	800a1a0 <__assert_func>
 8009768:	2301      	movs	r3, #1
 800976a:	6144      	str	r4, [r0, #20]
 800976c:	6103      	str	r3, [r0, #16]
 800976e:	bd10      	pop	{r4, pc}
 8009770:	0800be5f 	.word	0x0800be5f
 8009774:	0800be70 	.word	0x0800be70

08009778 <__multiply>:
 8009778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800977a:	690b      	ldr	r3, [r1, #16]
 800977c:	0014      	movs	r4, r2
 800977e:	6912      	ldr	r2, [r2, #16]
 8009780:	000d      	movs	r5, r1
 8009782:	b089      	sub	sp, #36	; 0x24
 8009784:	4293      	cmp	r3, r2
 8009786:	da01      	bge.n	800978c <__multiply+0x14>
 8009788:	0025      	movs	r5, r4
 800978a:	000c      	movs	r4, r1
 800978c:	692f      	ldr	r7, [r5, #16]
 800978e:	6926      	ldr	r6, [r4, #16]
 8009790:	6869      	ldr	r1, [r5, #4]
 8009792:	19bb      	adds	r3, r7, r6
 8009794:	9302      	str	r3, [sp, #8]
 8009796:	68ab      	ldr	r3, [r5, #8]
 8009798:	19ba      	adds	r2, r7, r6
 800979a:	4293      	cmp	r3, r2
 800979c:	da00      	bge.n	80097a0 <__multiply+0x28>
 800979e:	3101      	adds	r1, #1
 80097a0:	f7ff fee0 	bl	8009564 <_Balloc>
 80097a4:	9001      	str	r0, [sp, #4]
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d106      	bne.n	80097b8 <__multiply+0x40>
 80097aa:	215e      	movs	r1, #94	; 0x5e
 80097ac:	0002      	movs	r2, r0
 80097ae:	4b48      	ldr	r3, [pc, #288]	; (80098d0 <__multiply+0x158>)
 80097b0:	4848      	ldr	r0, [pc, #288]	; (80098d4 <__multiply+0x15c>)
 80097b2:	31ff      	adds	r1, #255	; 0xff
 80097b4:	f000 fcf4 	bl	800a1a0 <__assert_func>
 80097b8:	9b01      	ldr	r3, [sp, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	3314      	adds	r3, #20
 80097be:	469c      	mov	ip, r3
 80097c0:	19bb      	adds	r3, r7, r6
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4463      	add	r3, ip
 80097c6:	9303      	str	r3, [sp, #12]
 80097c8:	4663      	mov	r3, ip
 80097ca:	9903      	ldr	r1, [sp, #12]
 80097cc:	428b      	cmp	r3, r1
 80097ce:	d32c      	bcc.n	800982a <__multiply+0xb2>
 80097d0:	002b      	movs	r3, r5
 80097d2:	0022      	movs	r2, r4
 80097d4:	3314      	adds	r3, #20
 80097d6:	00bf      	lsls	r7, r7, #2
 80097d8:	3214      	adds	r2, #20
 80097da:	9306      	str	r3, [sp, #24]
 80097dc:	00b6      	lsls	r6, r6, #2
 80097de:	19db      	adds	r3, r3, r7
 80097e0:	9304      	str	r3, [sp, #16]
 80097e2:	1993      	adds	r3, r2, r6
 80097e4:	9307      	str	r3, [sp, #28]
 80097e6:	2304      	movs	r3, #4
 80097e8:	9305      	str	r3, [sp, #20]
 80097ea:	002b      	movs	r3, r5
 80097ec:	9904      	ldr	r1, [sp, #16]
 80097ee:	3315      	adds	r3, #21
 80097f0:	9200      	str	r2, [sp, #0]
 80097f2:	4299      	cmp	r1, r3
 80097f4:	d305      	bcc.n	8009802 <__multiply+0x8a>
 80097f6:	1b4b      	subs	r3, r1, r5
 80097f8:	3b15      	subs	r3, #21
 80097fa:	089b      	lsrs	r3, r3, #2
 80097fc:	3301      	adds	r3, #1
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	9305      	str	r3, [sp, #20]
 8009802:	9b07      	ldr	r3, [sp, #28]
 8009804:	9a00      	ldr	r2, [sp, #0]
 8009806:	429a      	cmp	r2, r3
 8009808:	d311      	bcc.n	800982e <__multiply+0xb6>
 800980a:	9b02      	ldr	r3, [sp, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	dd06      	ble.n	800981e <__multiply+0xa6>
 8009810:	9b03      	ldr	r3, [sp, #12]
 8009812:	3b04      	subs	r3, #4
 8009814:	9303      	str	r3, [sp, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d053      	beq.n	80098c6 <__multiply+0x14e>
 800981e:	9b01      	ldr	r3, [sp, #4]
 8009820:	9a02      	ldr	r2, [sp, #8]
 8009822:	0018      	movs	r0, r3
 8009824:	611a      	str	r2, [r3, #16]
 8009826:	b009      	add	sp, #36	; 0x24
 8009828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800982a:	c304      	stmia	r3!, {r2}
 800982c:	e7cd      	b.n	80097ca <__multiply+0x52>
 800982e:	9b00      	ldr	r3, [sp, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	b298      	uxth	r0, r3
 8009834:	2800      	cmp	r0, #0
 8009836:	d01b      	beq.n	8009870 <__multiply+0xf8>
 8009838:	4667      	mov	r7, ip
 800983a:	2400      	movs	r4, #0
 800983c:	9e06      	ldr	r6, [sp, #24]
 800983e:	ce02      	ldmia	r6!, {r1}
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	b28b      	uxth	r3, r1
 8009844:	4343      	muls	r3, r0
 8009846:	b292      	uxth	r2, r2
 8009848:	189b      	adds	r3, r3, r2
 800984a:	191b      	adds	r3, r3, r4
 800984c:	0c0c      	lsrs	r4, r1, #16
 800984e:	4344      	muls	r4, r0
 8009850:	683a      	ldr	r2, [r7, #0]
 8009852:	0c11      	lsrs	r1, r2, #16
 8009854:	1861      	adds	r1, r4, r1
 8009856:	0c1c      	lsrs	r4, r3, #16
 8009858:	1909      	adds	r1, r1, r4
 800985a:	0c0c      	lsrs	r4, r1, #16
 800985c:	b29b      	uxth	r3, r3
 800985e:	0409      	lsls	r1, r1, #16
 8009860:	430b      	orrs	r3, r1
 8009862:	c708      	stmia	r7!, {r3}
 8009864:	9b04      	ldr	r3, [sp, #16]
 8009866:	42b3      	cmp	r3, r6
 8009868:	d8e9      	bhi.n	800983e <__multiply+0xc6>
 800986a:	4663      	mov	r3, ip
 800986c:	9a05      	ldr	r2, [sp, #20]
 800986e:	509c      	str	r4, [r3, r2]
 8009870:	9b00      	ldr	r3, [sp, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	0c1e      	lsrs	r6, r3, #16
 8009876:	d020      	beq.n	80098ba <__multiply+0x142>
 8009878:	4663      	mov	r3, ip
 800987a:	002c      	movs	r4, r5
 800987c:	4660      	mov	r0, ip
 800987e:	2700      	movs	r7, #0
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	3414      	adds	r4, #20
 8009884:	6822      	ldr	r2, [r4, #0]
 8009886:	b29b      	uxth	r3, r3
 8009888:	b291      	uxth	r1, r2
 800988a:	4371      	muls	r1, r6
 800988c:	6802      	ldr	r2, [r0, #0]
 800988e:	0c12      	lsrs	r2, r2, #16
 8009890:	1889      	adds	r1, r1, r2
 8009892:	19cf      	adds	r7, r1, r7
 8009894:	0439      	lsls	r1, r7, #16
 8009896:	430b      	orrs	r3, r1
 8009898:	6003      	str	r3, [r0, #0]
 800989a:	cc02      	ldmia	r4!, {r1}
 800989c:	6843      	ldr	r3, [r0, #4]
 800989e:	0c09      	lsrs	r1, r1, #16
 80098a0:	4371      	muls	r1, r6
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	0c3f      	lsrs	r7, r7, #16
 80098a6:	18cb      	adds	r3, r1, r3
 80098a8:	9a04      	ldr	r2, [sp, #16]
 80098aa:	19db      	adds	r3, r3, r7
 80098ac:	0c1f      	lsrs	r7, r3, #16
 80098ae:	3004      	adds	r0, #4
 80098b0:	42a2      	cmp	r2, r4
 80098b2:	d8e7      	bhi.n	8009884 <__multiply+0x10c>
 80098b4:	4662      	mov	r2, ip
 80098b6:	9905      	ldr	r1, [sp, #20]
 80098b8:	5053      	str	r3, [r2, r1]
 80098ba:	9b00      	ldr	r3, [sp, #0]
 80098bc:	3304      	adds	r3, #4
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	2304      	movs	r3, #4
 80098c2:	449c      	add	ip, r3
 80098c4:	e79d      	b.n	8009802 <__multiply+0x8a>
 80098c6:	9b02      	ldr	r3, [sp, #8]
 80098c8:	3b01      	subs	r3, #1
 80098ca:	9302      	str	r3, [sp, #8]
 80098cc:	e79d      	b.n	800980a <__multiply+0x92>
 80098ce:	46c0      	nop			; (mov r8, r8)
 80098d0:	0800be5f 	.word	0x0800be5f
 80098d4:	0800be70 	.word	0x0800be70

080098d8 <__pow5mult>:
 80098d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098da:	2303      	movs	r3, #3
 80098dc:	0015      	movs	r5, r2
 80098de:	0007      	movs	r7, r0
 80098e0:	000e      	movs	r6, r1
 80098e2:	401a      	ands	r2, r3
 80098e4:	421d      	tst	r5, r3
 80098e6:	d008      	beq.n	80098fa <__pow5mult+0x22>
 80098e8:	4925      	ldr	r1, [pc, #148]	; (8009980 <__pow5mult+0xa8>)
 80098ea:	3a01      	subs	r2, #1
 80098ec:	0092      	lsls	r2, r2, #2
 80098ee:	5852      	ldr	r2, [r2, r1]
 80098f0:	2300      	movs	r3, #0
 80098f2:	0031      	movs	r1, r6
 80098f4:	f7ff fe9e 	bl	8009634 <__multadd>
 80098f8:	0006      	movs	r6, r0
 80098fa:	10ad      	asrs	r5, r5, #2
 80098fc:	d03d      	beq.n	800997a <__pow5mult+0xa2>
 80098fe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009900:	2c00      	cmp	r4, #0
 8009902:	d10f      	bne.n	8009924 <__pow5mult+0x4c>
 8009904:	2010      	movs	r0, #16
 8009906:	f7ff fe0f 	bl	8009528 <malloc>
 800990a:	1e02      	subs	r2, r0, #0
 800990c:	6278      	str	r0, [r7, #36]	; 0x24
 800990e:	d105      	bne.n	800991c <__pow5mult+0x44>
 8009910:	21d7      	movs	r1, #215	; 0xd7
 8009912:	4b1c      	ldr	r3, [pc, #112]	; (8009984 <__pow5mult+0xac>)
 8009914:	481c      	ldr	r0, [pc, #112]	; (8009988 <__pow5mult+0xb0>)
 8009916:	0049      	lsls	r1, r1, #1
 8009918:	f000 fc42 	bl	800a1a0 <__assert_func>
 800991c:	6044      	str	r4, [r0, #4]
 800991e:	6084      	str	r4, [r0, #8]
 8009920:	6004      	str	r4, [r0, #0]
 8009922:	60c4      	str	r4, [r0, #12]
 8009924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009926:	689c      	ldr	r4, [r3, #8]
 8009928:	9301      	str	r3, [sp, #4]
 800992a:	2c00      	cmp	r4, #0
 800992c:	d108      	bne.n	8009940 <__pow5mult+0x68>
 800992e:	0038      	movs	r0, r7
 8009930:	4916      	ldr	r1, [pc, #88]	; (800998c <__pow5mult+0xb4>)
 8009932:	f7ff ff0b 	bl	800974c <__i2b>
 8009936:	9b01      	ldr	r3, [sp, #4]
 8009938:	0004      	movs	r4, r0
 800993a:	6098      	str	r0, [r3, #8]
 800993c:	2300      	movs	r3, #0
 800993e:	6003      	str	r3, [r0, #0]
 8009940:	2301      	movs	r3, #1
 8009942:	421d      	tst	r5, r3
 8009944:	d00a      	beq.n	800995c <__pow5mult+0x84>
 8009946:	0031      	movs	r1, r6
 8009948:	0022      	movs	r2, r4
 800994a:	0038      	movs	r0, r7
 800994c:	f7ff ff14 	bl	8009778 <__multiply>
 8009950:	0031      	movs	r1, r6
 8009952:	9001      	str	r0, [sp, #4]
 8009954:	0038      	movs	r0, r7
 8009956:	f7ff fe49 	bl	80095ec <_Bfree>
 800995a:	9e01      	ldr	r6, [sp, #4]
 800995c:	106d      	asrs	r5, r5, #1
 800995e:	d00c      	beq.n	800997a <__pow5mult+0xa2>
 8009960:	6820      	ldr	r0, [r4, #0]
 8009962:	2800      	cmp	r0, #0
 8009964:	d107      	bne.n	8009976 <__pow5mult+0x9e>
 8009966:	0022      	movs	r2, r4
 8009968:	0021      	movs	r1, r4
 800996a:	0038      	movs	r0, r7
 800996c:	f7ff ff04 	bl	8009778 <__multiply>
 8009970:	2300      	movs	r3, #0
 8009972:	6020      	str	r0, [r4, #0]
 8009974:	6003      	str	r3, [r0, #0]
 8009976:	0004      	movs	r4, r0
 8009978:	e7e2      	b.n	8009940 <__pow5mult+0x68>
 800997a:	0030      	movs	r0, r6
 800997c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800997e:	46c0      	nop			; (mov r8, r8)
 8009980:	0800bfc0 	.word	0x0800bfc0
 8009984:	0800bded 	.word	0x0800bded
 8009988:	0800be70 	.word	0x0800be70
 800998c:	00000271 	.word	0x00000271

08009990 <__lshift>:
 8009990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009992:	000c      	movs	r4, r1
 8009994:	0017      	movs	r7, r2
 8009996:	6923      	ldr	r3, [r4, #16]
 8009998:	1155      	asrs	r5, r2, #5
 800999a:	b087      	sub	sp, #28
 800999c:	18eb      	adds	r3, r5, r3
 800999e:	9302      	str	r3, [sp, #8]
 80099a0:	3301      	adds	r3, #1
 80099a2:	9301      	str	r3, [sp, #4]
 80099a4:	6849      	ldr	r1, [r1, #4]
 80099a6:	68a3      	ldr	r3, [r4, #8]
 80099a8:	9004      	str	r0, [sp, #16]
 80099aa:	9a01      	ldr	r2, [sp, #4]
 80099ac:	4293      	cmp	r3, r2
 80099ae:	db10      	blt.n	80099d2 <__lshift+0x42>
 80099b0:	9804      	ldr	r0, [sp, #16]
 80099b2:	f7ff fdd7 	bl	8009564 <_Balloc>
 80099b6:	2300      	movs	r3, #0
 80099b8:	0002      	movs	r2, r0
 80099ba:	0006      	movs	r6, r0
 80099bc:	0019      	movs	r1, r3
 80099be:	3214      	adds	r2, #20
 80099c0:	4298      	cmp	r0, r3
 80099c2:	d10c      	bne.n	80099de <__lshift+0x4e>
 80099c4:	21da      	movs	r1, #218	; 0xda
 80099c6:	0002      	movs	r2, r0
 80099c8:	4b26      	ldr	r3, [pc, #152]	; (8009a64 <__lshift+0xd4>)
 80099ca:	4827      	ldr	r0, [pc, #156]	; (8009a68 <__lshift+0xd8>)
 80099cc:	31ff      	adds	r1, #255	; 0xff
 80099ce:	f000 fbe7 	bl	800a1a0 <__assert_func>
 80099d2:	3101      	adds	r1, #1
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	e7e8      	b.n	80099aa <__lshift+0x1a>
 80099d8:	0098      	lsls	r0, r3, #2
 80099da:	5011      	str	r1, [r2, r0]
 80099dc:	3301      	adds	r3, #1
 80099de:	42ab      	cmp	r3, r5
 80099e0:	dbfa      	blt.n	80099d8 <__lshift+0x48>
 80099e2:	43eb      	mvns	r3, r5
 80099e4:	17db      	asrs	r3, r3, #31
 80099e6:	401d      	ands	r5, r3
 80099e8:	211f      	movs	r1, #31
 80099ea:	0023      	movs	r3, r4
 80099ec:	0038      	movs	r0, r7
 80099ee:	00ad      	lsls	r5, r5, #2
 80099f0:	1955      	adds	r5, r2, r5
 80099f2:	6922      	ldr	r2, [r4, #16]
 80099f4:	3314      	adds	r3, #20
 80099f6:	0092      	lsls	r2, r2, #2
 80099f8:	4008      	ands	r0, r1
 80099fa:	4684      	mov	ip, r0
 80099fc:	189a      	adds	r2, r3, r2
 80099fe:	420f      	tst	r7, r1
 8009a00:	d02a      	beq.n	8009a58 <__lshift+0xc8>
 8009a02:	3101      	adds	r1, #1
 8009a04:	1a09      	subs	r1, r1, r0
 8009a06:	9105      	str	r1, [sp, #20]
 8009a08:	2100      	movs	r1, #0
 8009a0a:	9503      	str	r5, [sp, #12]
 8009a0c:	4667      	mov	r7, ip
 8009a0e:	6818      	ldr	r0, [r3, #0]
 8009a10:	40b8      	lsls	r0, r7
 8009a12:	4301      	orrs	r1, r0
 8009a14:	9803      	ldr	r0, [sp, #12]
 8009a16:	c002      	stmia	r0!, {r1}
 8009a18:	cb02      	ldmia	r3!, {r1}
 8009a1a:	9003      	str	r0, [sp, #12]
 8009a1c:	9805      	ldr	r0, [sp, #20]
 8009a1e:	40c1      	lsrs	r1, r0
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d8f3      	bhi.n	8009a0c <__lshift+0x7c>
 8009a24:	0020      	movs	r0, r4
 8009a26:	3015      	adds	r0, #21
 8009a28:	2304      	movs	r3, #4
 8009a2a:	4282      	cmp	r2, r0
 8009a2c:	d304      	bcc.n	8009a38 <__lshift+0xa8>
 8009a2e:	1b13      	subs	r3, r2, r4
 8009a30:	3b15      	subs	r3, #21
 8009a32:	089b      	lsrs	r3, r3, #2
 8009a34:	3301      	adds	r3, #1
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	50e9      	str	r1, [r5, r3]
 8009a3a:	2900      	cmp	r1, #0
 8009a3c:	d002      	beq.n	8009a44 <__lshift+0xb4>
 8009a3e:	9b02      	ldr	r3, [sp, #8]
 8009a40:	3302      	adds	r3, #2
 8009a42:	9301      	str	r3, [sp, #4]
 8009a44:	9b01      	ldr	r3, [sp, #4]
 8009a46:	9804      	ldr	r0, [sp, #16]
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	0021      	movs	r1, r4
 8009a4c:	6133      	str	r3, [r6, #16]
 8009a4e:	f7ff fdcd 	bl	80095ec <_Bfree>
 8009a52:	0030      	movs	r0, r6
 8009a54:	b007      	add	sp, #28
 8009a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a58:	cb02      	ldmia	r3!, {r1}
 8009a5a:	c502      	stmia	r5!, {r1}
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d8fb      	bhi.n	8009a58 <__lshift+0xc8>
 8009a60:	e7f0      	b.n	8009a44 <__lshift+0xb4>
 8009a62:	46c0      	nop			; (mov r8, r8)
 8009a64:	0800be5f 	.word	0x0800be5f
 8009a68:	0800be70 	.word	0x0800be70

08009a6c <__mcmp>:
 8009a6c:	6902      	ldr	r2, [r0, #16]
 8009a6e:	690b      	ldr	r3, [r1, #16]
 8009a70:	b530      	push	{r4, r5, lr}
 8009a72:	0004      	movs	r4, r0
 8009a74:	1ad0      	subs	r0, r2, r3
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d10d      	bne.n	8009a96 <__mcmp+0x2a>
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	3414      	adds	r4, #20
 8009a7e:	3114      	adds	r1, #20
 8009a80:	18e2      	adds	r2, r4, r3
 8009a82:	18c9      	adds	r1, r1, r3
 8009a84:	3a04      	subs	r2, #4
 8009a86:	3904      	subs	r1, #4
 8009a88:	6815      	ldr	r5, [r2, #0]
 8009a8a:	680b      	ldr	r3, [r1, #0]
 8009a8c:	429d      	cmp	r5, r3
 8009a8e:	d003      	beq.n	8009a98 <__mcmp+0x2c>
 8009a90:	2001      	movs	r0, #1
 8009a92:	429d      	cmp	r5, r3
 8009a94:	d303      	bcc.n	8009a9e <__mcmp+0x32>
 8009a96:	bd30      	pop	{r4, r5, pc}
 8009a98:	4294      	cmp	r4, r2
 8009a9a:	d3f3      	bcc.n	8009a84 <__mcmp+0x18>
 8009a9c:	e7fb      	b.n	8009a96 <__mcmp+0x2a>
 8009a9e:	4240      	negs	r0, r0
 8009aa0:	e7f9      	b.n	8009a96 <__mcmp+0x2a>
	...

08009aa4 <__mdiff>:
 8009aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aa6:	000e      	movs	r6, r1
 8009aa8:	0007      	movs	r7, r0
 8009aaa:	0011      	movs	r1, r2
 8009aac:	0030      	movs	r0, r6
 8009aae:	b087      	sub	sp, #28
 8009ab0:	0014      	movs	r4, r2
 8009ab2:	f7ff ffdb 	bl	8009a6c <__mcmp>
 8009ab6:	1e05      	subs	r5, r0, #0
 8009ab8:	d110      	bne.n	8009adc <__mdiff+0x38>
 8009aba:	0001      	movs	r1, r0
 8009abc:	0038      	movs	r0, r7
 8009abe:	f7ff fd51 	bl	8009564 <_Balloc>
 8009ac2:	1e02      	subs	r2, r0, #0
 8009ac4:	d104      	bne.n	8009ad0 <__mdiff+0x2c>
 8009ac6:	4b40      	ldr	r3, [pc, #256]	; (8009bc8 <__mdiff+0x124>)
 8009ac8:	4940      	ldr	r1, [pc, #256]	; (8009bcc <__mdiff+0x128>)
 8009aca:	4841      	ldr	r0, [pc, #260]	; (8009bd0 <__mdiff+0x12c>)
 8009acc:	f000 fb68 	bl	800a1a0 <__assert_func>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	6145      	str	r5, [r0, #20]
 8009ad4:	6103      	str	r3, [r0, #16]
 8009ad6:	0010      	movs	r0, r2
 8009ad8:	b007      	add	sp, #28
 8009ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009adc:	2301      	movs	r3, #1
 8009ade:	9301      	str	r3, [sp, #4]
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	db04      	blt.n	8009aee <__mdiff+0x4a>
 8009ae4:	0023      	movs	r3, r4
 8009ae6:	0034      	movs	r4, r6
 8009ae8:	001e      	movs	r6, r3
 8009aea:	2300      	movs	r3, #0
 8009aec:	9301      	str	r3, [sp, #4]
 8009aee:	0038      	movs	r0, r7
 8009af0:	6861      	ldr	r1, [r4, #4]
 8009af2:	f7ff fd37 	bl	8009564 <_Balloc>
 8009af6:	1e02      	subs	r2, r0, #0
 8009af8:	d103      	bne.n	8009b02 <__mdiff+0x5e>
 8009afa:	2190      	movs	r1, #144	; 0x90
 8009afc:	4b32      	ldr	r3, [pc, #200]	; (8009bc8 <__mdiff+0x124>)
 8009afe:	0089      	lsls	r1, r1, #2
 8009b00:	e7e3      	b.n	8009aca <__mdiff+0x26>
 8009b02:	9b01      	ldr	r3, [sp, #4]
 8009b04:	2700      	movs	r7, #0
 8009b06:	60c3      	str	r3, [r0, #12]
 8009b08:	6920      	ldr	r0, [r4, #16]
 8009b0a:	3414      	adds	r4, #20
 8009b0c:	9401      	str	r4, [sp, #4]
 8009b0e:	9b01      	ldr	r3, [sp, #4]
 8009b10:	0084      	lsls	r4, r0, #2
 8009b12:	191b      	adds	r3, r3, r4
 8009b14:	0034      	movs	r4, r6
 8009b16:	9302      	str	r3, [sp, #8]
 8009b18:	6933      	ldr	r3, [r6, #16]
 8009b1a:	3414      	adds	r4, #20
 8009b1c:	0099      	lsls	r1, r3, #2
 8009b1e:	1863      	adds	r3, r4, r1
 8009b20:	9303      	str	r3, [sp, #12]
 8009b22:	0013      	movs	r3, r2
 8009b24:	3314      	adds	r3, #20
 8009b26:	469c      	mov	ip, r3
 8009b28:	9305      	str	r3, [sp, #20]
 8009b2a:	9b01      	ldr	r3, [sp, #4]
 8009b2c:	9304      	str	r3, [sp, #16]
 8009b2e:	9b04      	ldr	r3, [sp, #16]
 8009b30:	cc02      	ldmia	r4!, {r1}
 8009b32:	cb20      	ldmia	r3!, {r5}
 8009b34:	9304      	str	r3, [sp, #16]
 8009b36:	b2ab      	uxth	r3, r5
 8009b38:	19df      	adds	r7, r3, r7
 8009b3a:	b28b      	uxth	r3, r1
 8009b3c:	1afb      	subs	r3, r7, r3
 8009b3e:	0c09      	lsrs	r1, r1, #16
 8009b40:	0c2d      	lsrs	r5, r5, #16
 8009b42:	1a6d      	subs	r5, r5, r1
 8009b44:	1419      	asrs	r1, r3, #16
 8009b46:	186d      	adds	r5, r5, r1
 8009b48:	4661      	mov	r1, ip
 8009b4a:	142f      	asrs	r7, r5, #16
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	042d      	lsls	r5, r5, #16
 8009b50:	432b      	orrs	r3, r5
 8009b52:	c108      	stmia	r1!, {r3}
 8009b54:	9b03      	ldr	r3, [sp, #12]
 8009b56:	468c      	mov	ip, r1
 8009b58:	42a3      	cmp	r3, r4
 8009b5a:	d8e8      	bhi.n	8009b2e <__mdiff+0x8a>
 8009b5c:	0031      	movs	r1, r6
 8009b5e:	9c03      	ldr	r4, [sp, #12]
 8009b60:	3115      	adds	r1, #21
 8009b62:	2304      	movs	r3, #4
 8009b64:	428c      	cmp	r4, r1
 8009b66:	d304      	bcc.n	8009b72 <__mdiff+0xce>
 8009b68:	1ba3      	subs	r3, r4, r6
 8009b6a:	3b15      	subs	r3, #21
 8009b6c:	089b      	lsrs	r3, r3, #2
 8009b6e:	3301      	adds	r3, #1
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	9901      	ldr	r1, [sp, #4]
 8009b74:	18cc      	adds	r4, r1, r3
 8009b76:	9905      	ldr	r1, [sp, #20]
 8009b78:	0026      	movs	r6, r4
 8009b7a:	18cb      	adds	r3, r1, r3
 8009b7c:	469c      	mov	ip, r3
 8009b7e:	9902      	ldr	r1, [sp, #8]
 8009b80:	428e      	cmp	r6, r1
 8009b82:	d310      	bcc.n	8009ba6 <__mdiff+0x102>
 8009b84:	9e02      	ldr	r6, [sp, #8]
 8009b86:	1ee1      	subs	r1, r4, #3
 8009b88:	2500      	movs	r5, #0
 8009b8a:	428e      	cmp	r6, r1
 8009b8c:	d304      	bcc.n	8009b98 <__mdiff+0xf4>
 8009b8e:	0031      	movs	r1, r6
 8009b90:	3103      	adds	r1, #3
 8009b92:	1b0c      	subs	r4, r1, r4
 8009b94:	08a4      	lsrs	r4, r4, #2
 8009b96:	00a5      	lsls	r5, r4, #2
 8009b98:	195b      	adds	r3, r3, r5
 8009b9a:	3b04      	subs	r3, #4
 8009b9c:	6819      	ldr	r1, [r3, #0]
 8009b9e:	2900      	cmp	r1, #0
 8009ba0:	d00f      	beq.n	8009bc2 <__mdiff+0x11e>
 8009ba2:	6110      	str	r0, [r2, #16]
 8009ba4:	e797      	b.n	8009ad6 <__mdiff+0x32>
 8009ba6:	ce02      	ldmia	r6!, {r1}
 8009ba8:	b28d      	uxth	r5, r1
 8009baa:	19ed      	adds	r5, r5, r7
 8009bac:	0c0f      	lsrs	r7, r1, #16
 8009bae:	1429      	asrs	r1, r5, #16
 8009bb0:	1879      	adds	r1, r7, r1
 8009bb2:	140f      	asrs	r7, r1, #16
 8009bb4:	b2ad      	uxth	r5, r5
 8009bb6:	0409      	lsls	r1, r1, #16
 8009bb8:	430d      	orrs	r5, r1
 8009bba:	4661      	mov	r1, ip
 8009bbc:	c120      	stmia	r1!, {r5}
 8009bbe:	468c      	mov	ip, r1
 8009bc0:	e7dd      	b.n	8009b7e <__mdiff+0xda>
 8009bc2:	3801      	subs	r0, #1
 8009bc4:	e7e9      	b.n	8009b9a <__mdiff+0xf6>
 8009bc6:	46c0      	nop			; (mov r8, r8)
 8009bc8:	0800be5f 	.word	0x0800be5f
 8009bcc:	00000232 	.word	0x00000232
 8009bd0:	0800be70 	.word	0x0800be70

08009bd4 <__d2b>:
 8009bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bd6:	2101      	movs	r1, #1
 8009bd8:	0014      	movs	r4, r2
 8009bda:	001e      	movs	r6, r3
 8009bdc:	9f08      	ldr	r7, [sp, #32]
 8009bde:	f7ff fcc1 	bl	8009564 <_Balloc>
 8009be2:	1e05      	subs	r5, r0, #0
 8009be4:	d105      	bne.n	8009bf2 <__d2b+0x1e>
 8009be6:	0002      	movs	r2, r0
 8009be8:	4b26      	ldr	r3, [pc, #152]	; (8009c84 <__d2b+0xb0>)
 8009bea:	4927      	ldr	r1, [pc, #156]	; (8009c88 <__d2b+0xb4>)
 8009bec:	4827      	ldr	r0, [pc, #156]	; (8009c8c <__d2b+0xb8>)
 8009bee:	f000 fad7 	bl	800a1a0 <__assert_func>
 8009bf2:	0333      	lsls	r3, r6, #12
 8009bf4:	0076      	lsls	r6, r6, #1
 8009bf6:	0b1b      	lsrs	r3, r3, #12
 8009bf8:	0d76      	lsrs	r6, r6, #21
 8009bfa:	d124      	bne.n	8009c46 <__d2b+0x72>
 8009bfc:	9301      	str	r3, [sp, #4]
 8009bfe:	2c00      	cmp	r4, #0
 8009c00:	d027      	beq.n	8009c52 <__d2b+0x7e>
 8009c02:	4668      	mov	r0, sp
 8009c04:	9400      	str	r4, [sp, #0]
 8009c06:	f7ff fd73 	bl	80096f0 <__lo0bits>
 8009c0a:	9c00      	ldr	r4, [sp, #0]
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d01e      	beq.n	8009c4e <__d2b+0x7a>
 8009c10:	9b01      	ldr	r3, [sp, #4]
 8009c12:	2120      	movs	r1, #32
 8009c14:	001a      	movs	r2, r3
 8009c16:	1a09      	subs	r1, r1, r0
 8009c18:	408a      	lsls	r2, r1
 8009c1a:	40c3      	lsrs	r3, r0
 8009c1c:	4322      	orrs	r2, r4
 8009c1e:	616a      	str	r2, [r5, #20]
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	9c01      	ldr	r4, [sp, #4]
 8009c24:	61ac      	str	r4, [r5, #24]
 8009c26:	1e63      	subs	r3, r4, #1
 8009c28:	419c      	sbcs	r4, r3
 8009c2a:	3401      	adds	r4, #1
 8009c2c:	612c      	str	r4, [r5, #16]
 8009c2e:	2e00      	cmp	r6, #0
 8009c30:	d018      	beq.n	8009c64 <__d2b+0x90>
 8009c32:	4b17      	ldr	r3, [pc, #92]	; (8009c90 <__d2b+0xbc>)
 8009c34:	18f6      	adds	r6, r6, r3
 8009c36:	2335      	movs	r3, #53	; 0x35
 8009c38:	1836      	adds	r6, r6, r0
 8009c3a:	1a18      	subs	r0, r3, r0
 8009c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c3e:	603e      	str	r6, [r7, #0]
 8009c40:	6018      	str	r0, [r3, #0]
 8009c42:	0028      	movs	r0, r5
 8009c44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c46:	2280      	movs	r2, #128	; 0x80
 8009c48:	0352      	lsls	r2, r2, #13
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	e7d6      	b.n	8009bfc <__d2b+0x28>
 8009c4e:	616c      	str	r4, [r5, #20]
 8009c50:	e7e7      	b.n	8009c22 <__d2b+0x4e>
 8009c52:	a801      	add	r0, sp, #4
 8009c54:	f7ff fd4c 	bl	80096f0 <__lo0bits>
 8009c58:	2401      	movs	r4, #1
 8009c5a:	9b01      	ldr	r3, [sp, #4]
 8009c5c:	612c      	str	r4, [r5, #16]
 8009c5e:	616b      	str	r3, [r5, #20]
 8009c60:	3020      	adds	r0, #32
 8009c62:	e7e4      	b.n	8009c2e <__d2b+0x5a>
 8009c64:	4b0b      	ldr	r3, [pc, #44]	; (8009c94 <__d2b+0xc0>)
 8009c66:	18c0      	adds	r0, r0, r3
 8009c68:	4b0b      	ldr	r3, [pc, #44]	; (8009c98 <__d2b+0xc4>)
 8009c6a:	6038      	str	r0, [r7, #0]
 8009c6c:	18e3      	adds	r3, r4, r3
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	18eb      	adds	r3, r5, r3
 8009c72:	6958      	ldr	r0, [r3, #20]
 8009c74:	f7ff fd22 	bl	80096bc <__hi0bits>
 8009c78:	0164      	lsls	r4, r4, #5
 8009c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7c:	1a24      	subs	r4, r4, r0
 8009c7e:	601c      	str	r4, [r3, #0]
 8009c80:	e7df      	b.n	8009c42 <__d2b+0x6e>
 8009c82:	46c0      	nop			; (mov r8, r8)
 8009c84:	0800be5f 	.word	0x0800be5f
 8009c88:	0000030a 	.word	0x0000030a
 8009c8c:	0800be70 	.word	0x0800be70
 8009c90:	fffffbcd 	.word	0xfffffbcd
 8009c94:	fffffbce 	.word	0xfffffbce
 8009c98:	3fffffff 	.word	0x3fffffff

08009c9c <_calloc_r>:
 8009c9c:	b570      	push	{r4, r5, r6, lr}
 8009c9e:	0c13      	lsrs	r3, r2, #16
 8009ca0:	0c0d      	lsrs	r5, r1, #16
 8009ca2:	d11e      	bne.n	8009ce2 <_calloc_r+0x46>
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10c      	bne.n	8009cc2 <_calloc_r+0x26>
 8009ca8:	b289      	uxth	r1, r1
 8009caa:	b294      	uxth	r4, r2
 8009cac:	434c      	muls	r4, r1
 8009cae:	0021      	movs	r1, r4
 8009cb0:	f000 f88c 	bl	8009dcc <_malloc_r>
 8009cb4:	1e05      	subs	r5, r0, #0
 8009cb6:	d01b      	beq.n	8009cf0 <_calloc_r+0x54>
 8009cb8:	0022      	movs	r2, r4
 8009cba:	2100      	movs	r1, #0
 8009cbc:	f7fe f8f4 	bl	8007ea8 <memset>
 8009cc0:	e016      	b.n	8009cf0 <_calloc_r+0x54>
 8009cc2:	1c1d      	adds	r5, r3, #0
 8009cc4:	1c0b      	adds	r3, r1, #0
 8009cc6:	b292      	uxth	r2, r2
 8009cc8:	b289      	uxth	r1, r1
 8009cca:	b29c      	uxth	r4, r3
 8009ccc:	4351      	muls	r1, r2
 8009cce:	b2ab      	uxth	r3, r5
 8009cd0:	4363      	muls	r3, r4
 8009cd2:	0c0c      	lsrs	r4, r1, #16
 8009cd4:	191c      	adds	r4, r3, r4
 8009cd6:	0c22      	lsrs	r2, r4, #16
 8009cd8:	d107      	bne.n	8009cea <_calloc_r+0x4e>
 8009cda:	0424      	lsls	r4, r4, #16
 8009cdc:	b289      	uxth	r1, r1
 8009cde:	430c      	orrs	r4, r1
 8009ce0:	e7e5      	b.n	8009cae <_calloc_r+0x12>
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d101      	bne.n	8009cea <_calloc_r+0x4e>
 8009ce6:	1c13      	adds	r3, r2, #0
 8009ce8:	e7ed      	b.n	8009cc6 <_calloc_r+0x2a>
 8009cea:	230c      	movs	r3, #12
 8009cec:	2500      	movs	r5, #0
 8009cee:	6003      	str	r3, [r0, #0]
 8009cf0:	0028      	movs	r0, r5
 8009cf2:	bd70      	pop	{r4, r5, r6, pc}

08009cf4 <_free_r>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	0005      	movs	r5, r0
 8009cf8:	2900      	cmp	r1, #0
 8009cfa:	d010      	beq.n	8009d1e <_free_r+0x2a>
 8009cfc:	1f0c      	subs	r4, r1, #4
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	da00      	bge.n	8009d06 <_free_r+0x12>
 8009d04:	18e4      	adds	r4, r4, r3
 8009d06:	0028      	movs	r0, r5
 8009d08:	f000 fa9e 	bl	800a248 <__malloc_lock>
 8009d0c:	4a1d      	ldr	r2, [pc, #116]	; (8009d84 <_free_r+0x90>)
 8009d0e:	6813      	ldr	r3, [r2, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d105      	bne.n	8009d20 <_free_r+0x2c>
 8009d14:	6063      	str	r3, [r4, #4]
 8009d16:	6014      	str	r4, [r2, #0]
 8009d18:	0028      	movs	r0, r5
 8009d1a:	f000 fa9d 	bl	800a258 <__malloc_unlock>
 8009d1e:	bd70      	pop	{r4, r5, r6, pc}
 8009d20:	42a3      	cmp	r3, r4
 8009d22:	d908      	bls.n	8009d36 <_free_r+0x42>
 8009d24:	6821      	ldr	r1, [r4, #0]
 8009d26:	1860      	adds	r0, r4, r1
 8009d28:	4283      	cmp	r3, r0
 8009d2a:	d1f3      	bne.n	8009d14 <_free_r+0x20>
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	1841      	adds	r1, r0, r1
 8009d32:	6021      	str	r1, [r4, #0]
 8009d34:	e7ee      	b.n	8009d14 <_free_r+0x20>
 8009d36:	001a      	movs	r2, r3
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <_free_r+0x4e>
 8009d3e:	42a3      	cmp	r3, r4
 8009d40:	d9f9      	bls.n	8009d36 <_free_r+0x42>
 8009d42:	6811      	ldr	r1, [r2, #0]
 8009d44:	1850      	adds	r0, r2, r1
 8009d46:	42a0      	cmp	r0, r4
 8009d48:	d10b      	bne.n	8009d62 <_free_r+0x6e>
 8009d4a:	6820      	ldr	r0, [r4, #0]
 8009d4c:	1809      	adds	r1, r1, r0
 8009d4e:	1850      	adds	r0, r2, r1
 8009d50:	6011      	str	r1, [r2, #0]
 8009d52:	4283      	cmp	r3, r0
 8009d54:	d1e0      	bne.n	8009d18 <_free_r+0x24>
 8009d56:	6818      	ldr	r0, [r3, #0]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	1841      	adds	r1, r0, r1
 8009d5c:	6011      	str	r1, [r2, #0]
 8009d5e:	6053      	str	r3, [r2, #4]
 8009d60:	e7da      	b.n	8009d18 <_free_r+0x24>
 8009d62:	42a0      	cmp	r0, r4
 8009d64:	d902      	bls.n	8009d6c <_free_r+0x78>
 8009d66:	230c      	movs	r3, #12
 8009d68:	602b      	str	r3, [r5, #0]
 8009d6a:	e7d5      	b.n	8009d18 <_free_r+0x24>
 8009d6c:	6821      	ldr	r1, [r4, #0]
 8009d6e:	1860      	adds	r0, r4, r1
 8009d70:	4283      	cmp	r3, r0
 8009d72:	d103      	bne.n	8009d7c <_free_r+0x88>
 8009d74:	6818      	ldr	r0, [r3, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	1841      	adds	r1, r0, r1
 8009d7a:	6021      	str	r1, [r4, #0]
 8009d7c:	6063      	str	r3, [r4, #4]
 8009d7e:	6054      	str	r4, [r2, #4]
 8009d80:	e7ca      	b.n	8009d18 <_free_r+0x24>
 8009d82:	46c0      	nop			; (mov r8, r8)
 8009d84:	2000043c 	.word	0x2000043c

08009d88 <sbrk_aligned>:
 8009d88:	b570      	push	{r4, r5, r6, lr}
 8009d8a:	4e0f      	ldr	r6, [pc, #60]	; (8009dc8 <sbrk_aligned+0x40>)
 8009d8c:	000d      	movs	r5, r1
 8009d8e:	6831      	ldr	r1, [r6, #0]
 8009d90:	0004      	movs	r4, r0
 8009d92:	2900      	cmp	r1, #0
 8009d94:	d102      	bne.n	8009d9c <sbrk_aligned+0x14>
 8009d96:	f000 f9f1 	bl	800a17c <_sbrk_r>
 8009d9a:	6030      	str	r0, [r6, #0]
 8009d9c:	0029      	movs	r1, r5
 8009d9e:	0020      	movs	r0, r4
 8009da0:	f000 f9ec 	bl	800a17c <_sbrk_r>
 8009da4:	1c43      	adds	r3, r0, #1
 8009da6:	d00a      	beq.n	8009dbe <sbrk_aligned+0x36>
 8009da8:	2303      	movs	r3, #3
 8009daa:	1cc5      	adds	r5, r0, #3
 8009dac:	439d      	bics	r5, r3
 8009dae:	42a8      	cmp	r0, r5
 8009db0:	d007      	beq.n	8009dc2 <sbrk_aligned+0x3a>
 8009db2:	1a29      	subs	r1, r5, r0
 8009db4:	0020      	movs	r0, r4
 8009db6:	f000 f9e1 	bl	800a17c <_sbrk_r>
 8009dba:	1c43      	adds	r3, r0, #1
 8009dbc:	d101      	bne.n	8009dc2 <sbrk_aligned+0x3a>
 8009dbe:	2501      	movs	r5, #1
 8009dc0:	426d      	negs	r5, r5
 8009dc2:	0028      	movs	r0, r5
 8009dc4:	bd70      	pop	{r4, r5, r6, pc}
 8009dc6:	46c0      	nop			; (mov r8, r8)
 8009dc8:	20000440 	.word	0x20000440

08009dcc <_malloc_r>:
 8009dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dce:	2203      	movs	r2, #3
 8009dd0:	1ccb      	adds	r3, r1, #3
 8009dd2:	4393      	bics	r3, r2
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	0006      	movs	r6, r0
 8009dd8:	001f      	movs	r7, r3
 8009dda:	2b0c      	cmp	r3, #12
 8009ddc:	d232      	bcs.n	8009e44 <_malloc_r+0x78>
 8009dde:	270c      	movs	r7, #12
 8009de0:	42b9      	cmp	r1, r7
 8009de2:	d831      	bhi.n	8009e48 <_malloc_r+0x7c>
 8009de4:	0030      	movs	r0, r6
 8009de6:	f000 fa2f 	bl	800a248 <__malloc_lock>
 8009dea:	4d32      	ldr	r5, [pc, #200]	; (8009eb4 <_malloc_r+0xe8>)
 8009dec:	682b      	ldr	r3, [r5, #0]
 8009dee:	001c      	movs	r4, r3
 8009df0:	2c00      	cmp	r4, #0
 8009df2:	d12e      	bne.n	8009e52 <_malloc_r+0x86>
 8009df4:	0039      	movs	r1, r7
 8009df6:	0030      	movs	r0, r6
 8009df8:	f7ff ffc6 	bl	8009d88 <sbrk_aligned>
 8009dfc:	0004      	movs	r4, r0
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	d11e      	bne.n	8009e40 <_malloc_r+0x74>
 8009e02:	682c      	ldr	r4, [r5, #0]
 8009e04:	0025      	movs	r5, r4
 8009e06:	2d00      	cmp	r5, #0
 8009e08:	d14a      	bne.n	8009ea0 <_malloc_r+0xd4>
 8009e0a:	6823      	ldr	r3, [r4, #0]
 8009e0c:	0029      	movs	r1, r5
 8009e0e:	18e3      	adds	r3, r4, r3
 8009e10:	0030      	movs	r0, r6
 8009e12:	9301      	str	r3, [sp, #4]
 8009e14:	f000 f9b2 	bl	800a17c <_sbrk_r>
 8009e18:	9b01      	ldr	r3, [sp, #4]
 8009e1a:	4283      	cmp	r3, r0
 8009e1c:	d143      	bne.n	8009ea6 <_malloc_r+0xda>
 8009e1e:	6823      	ldr	r3, [r4, #0]
 8009e20:	3703      	adds	r7, #3
 8009e22:	1aff      	subs	r7, r7, r3
 8009e24:	2303      	movs	r3, #3
 8009e26:	439f      	bics	r7, r3
 8009e28:	3708      	adds	r7, #8
 8009e2a:	2f0c      	cmp	r7, #12
 8009e2c:	d200      	bcs.n	8009e30 <_malloc_r+0x64>
 8009e2e:	270c      	movs	r7, #12
 8009e30:	0039      	movs	r1, r7
 8009e32:	0030      	movs	r0, r6
 8009e34:	f7ff ffa8 	bl	8009d88 <sbrk_aligned>
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	d034      	beq.n	8009ea6 <_malloc_r+0xda>
 8009e3c:	6823      	ldr	r3, [r4, #0]
 8009e3e:	19df      	adds	r7, r3, r7
 8009e40:	6027      	str	r7, [r4, #0]
 8009e42:	e013      	b.n	8009e6c <_malloc_r+0xa0>
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	dacb      	bge.n	8009de0 <_malloc_r+0x14>
 8009e48:	230c      	movs	r3, #12
 8009e4a:	2500      	movs	r5, #0
 8009e4c:	6033      	str	r3, [r6, #0]
 8009e4e:	0028      	movs	r0, r5
 8009e50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e52:	6822      	ldr	r2, [r4, #0]
 8009e54:	1bd1      	subs	r1, r2, r7
 8009e56:	d420      	bmi.n	8009e9a <_malloc_r+0xce>
 8009e58:	290b      	cmp	r1, #11
 8009e5a:	d917      	bls.n	8009e8c <_malloc_r+0xc0>
 8009e5c:	19e2      	adds	r2, r4, r7
 8009e5e:	6027      	str	r7, [r4, #0]
 8009e60:	42a3      	cmp	r3, r4
 8009e62:	d111      	bne.n	8009e88 <_malloc_r+0xbc>
 8009e64:	602a      	str	r2, [r5, #0]
 8009e66:	6863      	ldr	r3, [r4, #4]
 8009e68:	6011      	str	r1, [r2, #0]
 8009e6a:	6053      	str	r3, [r2, #4]
 8009e6c:	0030      	movs	r0, r6
 8009e6e:	0025      	movs	r5, r4
 8009e70:	f000 f9f2 	bl	800a258 <__malloc_unlock>
 8009e74:	2207      	movs	r2, #7
 8009e76:	350b      	adds	r5, #11
 8009e78:	1d23      	adds	r3, r4, #4
 8009e7a:	4395      	bics	r5, r2
 8009e7c:	1aea      	subs	r2, r5, r3
 8009e7e:	429d      	cmp	r5, r3
 8009e80:	d0e5      	beq.n	8009e4e <_malloc_r+0x82>
 8009e82:	1b5b      	subs	r3, r3, r5
 8009e84:	50a3      	str	r3, [r4, r2]
 8009e86:	e7e2      	b.n	8009e4e <_malloc_r+0x82>
 8009e88:	605a      	str	r2, [r3, #4]
 8009e8a:	e7ec      	b.n	8009e66 <_malloc_r+0x9a>
 8009e8c:	6862      	ldr	r2, [r4, #4]
 8009e8e:	42a3      	cmp	r3, r4
 8009e90:	d101      	bne.n	8009e96 <_malloc_r+0xca>
 8009e92:	602a      	str	r2, [r5, #0]
 8009e94:	e7ea      	b.n	8009e6c <_malloc_r+0xa0>
 8009e96:	605a      	str	r2, [r3, #4]
 8009e98:	e7e8      	b.n	8009e6c <_malloc_r+0xa0>
 8009e9a:	0023      	movs	r3, r4
 8009e9c:	6864      	ldr	r4, [r4, #4]
 8009e9e:	e7a7      	b.n	8009df0 <_malloc_r+0x24>
 8009ea0:	002c      	movs	r4, r5
 8009ea2:	686d      	ldr	r5, [r5, #4]
 8009ea4:	e7af      	b.n	8009e06 <_malloc_r+0x3a>
 8009ea6:	230c      	movs	r3, #12
 8009ea8:	0030      	movs	r0, r6
 8009eaa:	6033      	str	r3, [r6, #0]
 8009eac:	f000 f9d4 	bl	800a258 <__malloc_unlock>
 8009eb0:	e7cd      	b.n	8009e4e <_malloc_r+0x82>
 8009eb2:	46c0      	nop			; (mov r8, r8)
 8009eb4:	2000043c 	.word	0x2000043c

08009eb8 <__ssputs_r>:
 8009eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eba:	688e      	ldr	r6, [r1, #8]
 8009ebc:	b085      	sub	sp, #20
 8009ebe:	0007      	movs	r7, r0
 8009ec0:	000c      	movs	r4, r1
 8009ec2:	9203      	str	r2, [sp, #12]
 8009ec4:	9301      	str	r3, [sp, #4]
 8009ec6:	429e      	cmp	r6, r3
 8009ec8:	d83c      	bhi.n	8009f44 <__ssputs_r+0x8c>
 8009eca:	2390      	movs	r3, #144	; 0x90
 8009ecc:	898a      	ldrh	r2, [r1, #12]
 8009ece:	00db      	lsls	r3, r3, #3
 8009ed0:	421a      	tst	r2, r3
 8009ed2:	d034      	beq.n	8009f3e <__ssputs_r+0x86>
 8009ed4:	6909      	ldr	r1, [r1, #16]
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	6960      	ldr	r0, [r4, #20]
 8009eda:	1a5b      	subs	r3, r3, r1
 8009edc:	9302      	str	r3, [sp, #8]
 8009ede:	2303      	movs	r3, #3
 8009ee0:	4343      	muls	r3, r0
 8009ee2:	0fdd      	lsrs	r5, r3, #31
 8009ee4:	18ed      	adds	r5, r5, r3
 8009ee6:	9b01      	ldr	r3, [sp, #4]
 8009ee8:	9802      	ldr	r0, [sp, #8]
 8009eea:	3301      	adds	r3, #1
 8009eec:	181b      	adds	r3, r3, r0
 8009eee:	106d      	asrs	r5, r5, #1
 8009ef0:	42ab      	cmp	r3, r5
 8009ef2:	d900      	bls.n	8009ef6 <__ssputs_r+0x3e>
 8009ef4:	001d      	movs	r5, r3
 8009ef6:	0553      	lsls	r3, r2, #21
 8009ef8:	d532      	bpl.n	8009f60 <__ssputs_r+0xa8>
 8009efa:	0029      	movs	r1, r5
 8009efc:	0038      	movs	r0, r7
 8009efe:	f7ff ff65 	bl	8009dcc <_malloc_r>
 8009f02:	1e06      	subs	r6, r0, #0
 8009f04:	d109      	bne.n	8009f1a <__ssputs_r+0x62>
 8009f06:	230c      	movs	r3, #12
 8009f08:	603b      	str	r3, [r7, #0]
 8009f0a:	2340      	movs	r3, #64	; 0x40
 8009f0c:	2001      	movs	r0, #1
 8009f0e:	89a2      	ldrh	r2, [r4, #12]
 8009f10:	4240      	negs	r0, r0
 8009f12:	4313      	orrs	r3, r2
 8009f14:	81a3      	strh	r3, [r4, #12]
 8009f16:	b005      	add	sp, #20
 8009f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f1a:	9a02      	ldr	r2, [sp, #8]
 8009f1c:	6921      	ldr	r1, [r4, #16]
 8009f1e:	f7ff fb18 	bl	8009552 <memcpy>
 8009f22:	89a3      	ldrh	r3, [r4, #12]
 8009f24:	4a14      	ldr	r2, [pc, #80]	; (8009f78 <__ssputs_r+0xc0>)
 8009f26:	401a      	ands	r2, r3
 8009f28:	2380      	movs	r3, #128	; 0x80
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	81a3      	strh	r3, [r4, #12]
 8009f2e:	9b02      	ldr	r3, [sp, #8]
 8009f30:	6126      	str	r6, [r4, #16]
 8009f32:	18f6      	adds	r6, r6, r3
 8009f34:	6026      	str	r6, [r4, #0]
 8009f36:	6165      	str	r5, [r4, #20]
 8009f38:	9e01      	ldr	r6, [sp, #4]
 8009f3a:	1aed      	subs	r5, r5, r3
 8009f3c:	60a5      	str	r5, [r4, #8]
 8009f3e:	9b01      	ldr	r3, [sp, #4]
 8009f40:	429e      	cmp	r6, r3
 8009f42:	d900      	bls.n	8009f46 <__ssputs_r+0x8e>
 8009f44:	9e01      	ldr	r6, [sp, #4]
 8009f46:	0032      	movs	r2, r6
 8009f48:	9903      	ldr	r1, [sp, #12]
 8009f4a:	6820      	ldr	r0, [r4, #0]
 8009f4c:	f000 f968 	bl	800a220 <memmove>
 8009f50:	68a3      	ldr	r3, [r4, #8]
 8009f52:	2000      	movs	r0, #0
 8009f54:	1b9b      	subs	r3, r3, r6
 8009f56:	60a3      	str	r3, [r4, #8]
 8009f58:	6823      	ldr	r3, [r4, #0]
 8009f5a:	199e      	adds	r6, r3, r6
 8009f5c:	6026      	str	r6, [r4, #0]
 8009f5e:	e7da      	b.n	8009f16 <__ssputs_r+0x5e>
 8009f60:	002a      	movs	r2, r5
 8009f62:	0038      	movs	r0, r7
 8009f64:	f000 f980 	bl	800a268 <_realloc_r>
 8009f68:	1e06      	subs	r6, r0, #0
 8009f6a:	d1e0      	bne.n	8009f2e <__ssputs_r+0x76>
 8009f6c:	0038      	movs	r0, r7
 8009f6e:	6921      	ldr	r1, [r4, #16]
 8009f70:	f7ff fec0 	bl	8009cf4 <_free_r>
 8009f74:	e7c7      	b.n	8009f06 <__ssputs_r+0x4e>
 8009f76:	46c0      	nop			; (mov r8, r8)
 8009f78:	fffffb7f 	.word	0xfffffb7f

08009f7c <_svfiprintf_r>:
 8009f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f7e:	b0a1      	sub	sp, #132	; 0x84
 8009f80:	9003      	str	r0, [sp, #12]
 8009f82:	001d      	movs	r5, r3
 8009f84:	898b      	ldrh	r3, [r1, #12]
 8009f86:	000f      	movs	r7, r1
 8009f88:	0016      	movs	r6, r2
 8009f8a:	061b      	lsls	r3, r3, #24
 8009f8c:	d511      	bpl.n	8009fb2 <_svfiprintf_r+0x36>
 8009f8e:	690b      	ldr	r3, [r1, #16]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10e      	bne.n	8009fb2 <_svfiprintf_r+0x36>
 8009f94:	2140      	movs	r1, #64	; 0x40
 8009f96:	f7ff ff19 	bl	8009dcc <_malloc_r>
 8009f9a:	6038      	str	r0, [r7, #0]
 8009f9c:	6138      	str	r0, [r7, #16]
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d105      	bne.n	8009fae <_svfiprintf_r+0x32>
 8009fa2:	230c      	movs	r3, #12
 8009fa4:	9a03      	ldr	r2, [sp, #12]
 8009fa6:	3801      	subs	r0, #1
 8009fa8:	6013      	str	r3, [r2, #0]
 8009faa:	b021      	add	sp, #132	; 0x84
 8009fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fae:	2340      	movs	r3, #64	; 0x40
 8009fb0:	617b      	str	r3, [r7, #20]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	ac08      	add	r4, sp, #32
 8009fb6:	6163      	str	r3, [r4, #20]
 8009fb8:	3320      	adds	r3, #32
 8009fba:	7663      	strb	r3, [r4, #25]
 8009fbc:	3310      	adds	r3, #16
 8009fbe:	76a3      	strb	r3, [r4, #26]
 8009fc0:	9507      	str	r5, [sp, #28]
 8009fc2:	0035      	movs	r5, r6
 8009fc4:	782b      	ldrb	r3, [r5, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <_svfiprintf_r+0x52>
 8009fca:	2b25      	cmp	r3, #37	; 0x25
 8009fcc:	d147      	bne.n	800a05e <_svfiprintf_r+0xe2>
 8009fce:	1bab      	subs	r3, r5, r6
 8009fd0:	9305      	str	r3, [sp, #20]
 8009fd2:	42b5      	cmp	r5, r6
 8009fd4:	d00c      	beq.n	8009ff0 <_svfiprintf_r+0x74>
 8009fd6:	0032      	movs	r2, r6
 8009fd8:	0039      	movs	r1, r7
 8009fda:	9803      	ldr	r0, [sp, #12]
 8009fdc:	f7ff ff6c 	bl	8009eb8 <__ssputs_r>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d100      	bne.n	8009fe6 <_svfiprintf_r+0x6a>
 8009fe4:	e0ae      	b.n	800a144 <_svfiprintf_r+0x1c8>
 8009fe6:	6962      	ldr	r2, [r4, #20]
 8009fe8:	9b05      	ldr	r3, [sp, #20]
 8009fea:	4694      	mov	ip, r2
 8009fec:	4463      	add	r3, ip
 8009fee:	6163      	str	r3, [r4, #20]
 8009ff0:	782b      	ldrb	r3, [r5, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d100      	bne.n	8009ff8 <_svfiprintf_r+0x7c>
 8009ff6:	e0a5      	b.n	800a144 <_svfiprintf_r+0x1c8>
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	4252      	negs	r2, r2
 8009ffe:	6062      	str	r2, [r4, #4]
 800a000:	a904      	add	r1, sp, #16
 800a002:	3254      	adds	r2, #84	; 0x54
 800a004:	1852      	adds	r2, r2, r1
 800a006:	1c6e      	adds	r6, r5, #1
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	60e3      	str	r3, [r4, #12]
 800a00c:	60a3      	str	r3, [r4, #8]
 800a00e:	7013      	strb	r3, [r2, #0]
 800a010:	65a3      	str	r3, [r4, #88]	; 0x58
 800a012:	2205      	movs	r2, #5
 800a014:	7831      	ldrb	r1, [r6, #0]
 800a016:	4854      	ldr	r0, [pc, #336]	; (800a168 <_svfiprintf_r+0x1ec>)
 800a018:	f7ff fa90 	bl	800953c <memchr>
 800a01c:	1c75      	adds	r5, r6, #1
 800a01e:	2800      	cmp	r0, #0
 800a020:	d11f      	bne.n	800a062 <_svfiprintf_r+0xe6>
 800a022:	6822      	ldr	r2, [r4, #0]
 800a024:	06d3      	lsls	r3, r2, #27
 800a026:	d504      	bpl.n	800a032 <_svfiprintf_r+0xb6>
 800a028:	2353      	movs	r3, #83	; 0x53
 800a02a:	a904      	add	r1, sp, #16
 800a02c:	185b      	adds	r3, r3, r1
 800a02e:	2120      	movs	r1, #32
 800a030:	7019      	strb	r1, [r3, #0]
 800a032:	0713      	lsls	r3, r2, #28
 800a034:	d504      	bpl.n	800a040 <_svfiprintf_r+0xc4>
 800a036:	2353      	movs	r3, #83	; 0x53
 800a038:	a904      	add	r1, sp, #16
 800a03a:	185b      	adds	r3, r3, r1
 800a03c:	212b      	movs	r1, #43	; 0x2b
 800a03e:	7019      	strb	r1, [r3, #0]
 800a040:	7833      	ldrb	r3, [r6, #0]
 800a042:	2b2a      	cmp	r3, #42	; 0x2a
 800a044:	d016      	beq.n	800a074 <_svfiprintf_r+0xf8>
 800a046:	0035      	movs	r5, r6
 800a048:	2100      	movs	r1, #0
 800a04a:	200a      	movs	r0, #10
 800a04c:	68e3      	ldr	r3, [r4, #12]
 800a04e:	782a      	ldrb	r2, [r5, #0]
 800a050:	1c6e      	adds	r6, r5, #1
 800a052:	3a30      	subs	r2, #48	; 0x30
 800a054:	2a09      	cmp	r2, #9
 800a056:	d94e      	bls.n	800a0f6 <_svfiprintf_r+0x17a>
 800a058:	2900      	cmp	r1, #0
 800a05a:	d111      	bne.n	800a080 <_svfiprintf_r+0x104>
 800a05c:	e017      	b.n	800a08e <_svfiprintf_r+0x112>
 800a05e:	3501      	adds	r5, #1
 800a060:	e7b0      	b.n	8009fc4 <_svfiprintf_r+0x48>
 800a062:	4b41      	ldr	r3, [pc, #260]	; (800a168 <_svfiprintf_r+0x1ec>)
 800a064:	6822      	ldr	r2, [r4, #0]
 800a066:	1ac0      	subs	r0, r0, r3
 800a068:	2301      	movs	r3, #1
 800a06a:	4083      	lsls	r3, r0
 800a06c:	4313      	orrs	r3, r2
 800a06e:	002e      	movs	r6, r5
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	e7ce      	b.n	800a012 <_svfiprintf_r+0x96>
 800a074:	9b07      	ldr	r3, [sp, #28]
 800a076:	1d19      	adds	r1, r3, #4
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	9107      	str	r1, [sp, #28]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	db01      	blt.n	800a084 <_svfiprintf_r+0x108>
 800a080:	930b      	str	r3, [sp, #44]	; 0x2c
 800a082:	e004      	b.n	800a08e <_svfiprintf_r+0x112>
 800a084:	425b      	negs	r3, r3
 800a086:	60e3      	str	r3, [r4, #12]
 800a088:	2302      	movs	r3, #2
 800a08a:	4313      	orrs	r3, r2
 800a08c:	6023      	str	r3, [r4, #0]
 800a08e:	782b      	ldrb	r3, [r5, #0]
 800a090:	2b2e      	cmp	r3, #46	; 0x2e
 800a092:	d10a      	bne.n	800a0aa <_svfiprintf_r+0x12e>
 800a094:	786b      	ldrb	r3, [r5, #1]
 800a096:	2b2a      	cmp	r3, #42	; 0x2a
 800a098:	d135      	bne.n	800a106 <_svfiprintf_r+0x18a>
 800a09a:	9b07      	ldr	r3, [sp, #28]
 800a09c:	3502      	adds	r5, #2
 800a09e:	1d1a      	adds	r2, r3, #4
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	9207      	str	r2, [sp, #28]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	db2b      	blt.n	800a100 <_svfiprintf_r+0x184>
 800a0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0aa:	4e30      	ldr	r6, [pc, #192]	; (800a16c <_svfiprintf_r+0x1f0>)
 800a0ac:	2203      	movs	r2, #3
 800a0ae:	0030      	movs	r0, r6
 800a0b0:	7829      	ldrb	r1, [r5, #0]
 800a0b2:	f7ff fa43 	bl	800953c <memchr>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d006      	beq.n	800a0c8 <_svfiprintf_r+0x14c>
 800a0ba:	2340      	movs	r3, #64	; 0x40
 800a0bc:	1b80      	subs	r0, r0, r6
 800a0be:	4083      	lsls	r3, r0
 800a0c0:	6822      	ldr	r2, [r4, #0]
 800a0c2:	3501      	adds	r5, #1
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	6023      	str	r3, [r4, #0]
 800a0c8:	7829      	ldrb	r1, [r5, #0]
 800a0ca:	2206      	movs	r2, #6
 800a0cc:	4828      	ldr	r0, [pc, #160]	; (800a170 <_svfiprintf_r+0x1f4>)
 800a0ce:	1c6e      	adds	r6, r5, #1
 800a0d0:	7621      	strb	r1, [r4, #24]
 800a0d2:	f7ff fa33 	bl	800953c <memchr>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d03c      	beq.n	800a154 <_svfiprintf_r+0x1d8>
 800a0da:	4b26      	ldr	r3, [pc, #152]	; (800a174 <_svfiprintf_r+0x1f8>)
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d125      	bne.n	800a12c <_svfiprintf_r+0x1b0>
 800a0e0:	2207      	movs	r2, #7
 800a0e2:	9b07      	ldr	r3, [sp, #28]
 800a0e4:	3307      	adds	r3, #7
 800a0e6:	4393      	bics	r3, r2
 800a0e8:	3308      	adds	r3, #8
 800a0ea:	9307      	str	r3, [sp, #28]
 800a0ec:	6963      	ldr	r3, [r4, #20]
 800a0ee:	9a04      	ldr	r2, [sp, #16]
 800a0f0:	189b      	adds	r3, r3, r2
 800a0f2:	6163      	str	r3, [r4, #20]
 800a0f4:	e765      	b.n	8009fc2 <_svfiprintf_r+0x46>
 800a0f6:	4343      	muls	r3, r0
 800a0f8:	0035      	movs	r5, r6
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	189b      	adds	r3, r3, r2
 800a0fe:	e7a6      	b.n	800a04e <_svfiprintf_r+0xd2>
 800a100:	2301      	movs	r3, #1
 800a102:	425b      	negs	r3, r3
 800a104:	e7d0      	b.n	800a0a8 <_svfiprintf_r+0x12c>
 800a106:	2300      	movs	r3, #0
 800a108:	200a      	movs	r0, #10
 800a10a:	001a      	movs	r2, r3
 800a10c:	3501      	adds	r5, #1
 800a10e:	6063      	str	r3, [r4, #4]
 800a110:	7829      	ldrb	r1, [r5, #0]
 800a112:	1c6e      	adds	r6, r5, #1
 800a114:	3930      	subs	r1, #48	; 0x30
 800a116:	2909      	cmp	r1, #9
 800a118:	d903      	bls.n	800a122 <_svfiprintf_r+0x1a6>
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0c5      	beq.n	800a0aa <_svfiprintf_r+0x12e>
 800a11e:	9209      	str	r2, [sp, #36]	; 0x24
 800a120:	e7c3      	b.n	800a0aa <_svfiprintf_r+0x12e>
 800a122:	4342      	muls	r2, r0
 800a124:	0035      	movs	r5, r6
 800a126:	2301      	movs	r3, #1
 800a128:	1852      	adds	r2, r2, r1
 800a12a:	e7f1      	b.n	800a110 <_svfiprintf_r+0x194>
 800a12c:	ab07      	add	r3, sp, #28
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	003a      	movs	r2, r7
 800a132:	0021      	movs	r1, r4
 800a134:	4b10      	ldr	r3, [pc, #64]	; (800a178 <_svfiprintf_r+0x1fc>)
 800a136:	9803      	ldr	r0, [sp, #12]
 800a138:	f7fd ff68 	bl	800800c <_printf_float>
 800a13c:	9004      	str	r0, [sp, #16]
 800a13e:	9b04      	ldr	r3, [sp, #16]
 800a140:	3301      	adds	r3, #1
 800a142:	d1d3      	bne.n	800a0ec <_svfiprintf_r+0x170>
 800a144:	89bb      	ldrh	r3, [r7, #12]
 800a146:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a148:	065b      	lsls	r3, r3, #25
 800a14a:	d400      	bmi.n	800a14e <_svfiprintf_r+0x1d2>
 800a14c:	e72d      	b.n	8009faa <_svfiprintf_r+0x2e>
 800a14e:	2001      	movs	r0, #1
 800a150:	4240      	negs	r0, r0
 800a152:	e72a      	b.n	8009faa <_svfiprintf_r+0x2e>
 800a154:	ab07      	add	r3, sp, #28
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	003a      	movs	r2, r7
 800a15a:	0021      	movs	r1, r4
 800a15c:	4b06      	ldr	r3, [pc, #24]	; (800a178 <_svfiprintf_r+0x1fc>)
 800a15e:	9803      	ldr	r0, [sp, #12]
 800a160:	f7fe fa06 	bl	8008570 <_printf_i>
 800a164:	e7ea      	b.n	800a13c <_svfiprintf_r+0x1c0>
 800a166:	46c0      	nop			; (mov r8, r8)
 800a168:	0800bfcc 	.word	0x0800bfcc
 800a16c:	0800bfd2 	.word	0x0800bfd2
 800a170:	0800bfd6 	.word	0x0800bfd6
 800a174:	0800800d 	.word	0x0800800d
 800a178:	08009eb9 	.word	0x08009eb9

0800a17c <_sbrk_r>:
 800a17c:	2300      	movs	r3, #0
 800a17e:	b570      	push	{r4, r5, r6, lr}
 800a180:	4d06      	ldr	r5, [pc, #24]	; (800a19c <_sbrk_r+0x20>)
 800a182:	0004      	movs	r4, r0
 800a184:	0008      	movs	r0, r1
 800a186:	602b      	str	r3, [r5, #0]
 800a188:	f7fa fa24 	bl	80045d4 <_sbrk>
 800a18c:	1c43      	adds	r3, r0, #1
 800a18e:	d103      	bne.n	800a198 <_sbrk_r+0x1c>
 800a190:	682b      	ldr	r3, [r5, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d000      	beq.n	800a198 <_sbrk_r+0x1c>
 800a196:	6023      	str	r3, [r4, #0]
 800a198:	bd70      	pop	{r4, r5, r6, pc}
 800a19a:	46c0      	nop			; (mov r8, r8)
 800a19c:	20000444 	.word	0x20000444

0800a1a0 <__assert_func>:
 800a1a0:	b530      	push	{r4, r5, lr}
 800a1a2:	0014      	movs	r4, r2
 800a1a4:	001a      	movs	r2, r3
 800a1a6:	4b09      	ldr	r3, [pc, #36]	; (800a1cc <__assert_func+0x2c>)
 800a1a8:	0005      	movs	r5, r0
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	b085      	sub	sp, #20
 800a1ae:	68d8      	ldr	r0, [r3, #12]
 800a1b0:	4b07      	ldr	r3, [pc, #28]	; (800a1d0 <__assert_func+0x30>)
 800a1b2:	2c00      	cmp	r4, #0
 800a1b4:	d101      	bne.n	800a1ba <__assert_func+0x1a>
 800a1b6:	4b07      	ldr	r3, [pc, #28]	; (800a1d4 <__assert_func+0x34>)
 800a1b8:	001c      	movs	r4, r3
 800a1ba:	9301      	str	r3, [sp, #4]
 800a1bc:	9100      	str	r1, [sp, #0]
 800a1be:	002b      	movs	r3, r5
 800a1c0:	4905      	ldr	r1, [pc, #20]	; (800a1d8 <__assert_func+0x38>)
 800a1c2:	9402      	str	r4, [sp, #8]
 800a1c4:	f000 f80a 	bl	800a1dc <fiprintf>
 800a1c8:	f000 faba 	bl	800a740 <abort>
 800a1cc:	2000000c 	.word	0x2000000c
 800a1d0:	0800bfdd 	.word	0x0800bfdd
 800a1d4:	0800c018 	.word	0x0800c018
 800a1d8:	0800bfea 	.word	0x0800bfea

0800a1dc <fiprintf>:
 800a1dc:	b40e      	push	{r1, r2, r3}
 800a1de:	b503      	push	{r0, r1, lr}
 800a1e0:	0001      	movs	r1, r0
 800a1e2:	ab03      	add	r3, sp, #12
 800a1e4:	4804      	ldr	r0, [pc, #16]	; (800a1f8 <fiprintf+0x1c>)
 800a1e6:	cb04      	ldmia	r3!, {r2}
 800a1e8:	6800      	ldr	r0, [r0, #0]
 800a1ea:	9301      	str	r3, [sp, #4]
 800a1ec:	f000 f892 	bl	800a314 <_vfiprintf_r>
 800a1f0:	b002      	add	sp, #8
 800a1f2:	bc08      	pop	{r3}
 800a1f4:	b003      	add	sp, #12
 800a1f6:	4718      	bx	r3
 800a1f8:	2000000c 	.word	0x2000000c

0800a1fc <__ascii_mbtowc>:
 800a1fc:	b082      	sub	sp, #8
 800a1fe:	2900      	cmp	r1, #0
 800a200:	d100      	bne.n	800a204 <__ascii_mbtowc+0x8>
 800a202:	a901      	add	r1, sp, #4
 800a204:	1e10      	subs	r0, r2, #0
 800a206:	d006      	beq.n	800a216 <__ascii_mbtowc+0x1a>
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d006      	beq.n	800a21a <__ascii_mbtowc+0x1e>
 800a20c:	7813      	ldrb	r3, [r2, #0]
 800a20e:	600b      	str	r3, [r1, #0]
 800a210:	7810      	ldrb	r0, [r2, #0]
 800a212:	1e43      	subs	r3, r0, #1
 800a214:	4198      	sbcs	r0, r3
 800a216:	b002      	add	sp, #8
 800a218:	4770      	bx	lr
 800a21a:	2002      	movs	r0, #2
 800a21c:	4240      	negs	r0, r0
 800a21e:	e7fa      	b.n	800a216 <__ascii_mbtowc+0x1a>

0800a220 <memmove>:
 800a220:	b510      	push	{r4, lr}
 800a222:	4288      	cmp	r0, r1
 800a224:	d902      	bls.n	800a22c <memmove+0xc>
 800a226:	188b      	adds	r3, r1, r2
 800a228:	4298      	cmp	r0, r3
 800a22a:	d303      	bcc.n	800a234 <memmove+0x14>
 800a22c:	2300      	movs	r3, #0
 800a22e:	e007      	b.n	800a240 <memmove+0x20>
 800a230:	5c8b      	ldrb	r3, [r1, r2]
 800a232:	5483      	strb	r3, [r0, r2]
 800a234:	3a01      	subs	r2, #1
 800a236:	d2fb      	bcs.n	800a230 <memmove+0x10>
 800a238:	bd10      	pop	{r4, pc}
 800a23a:	5ccc      	ldrb	r4, [r1, r3]
 800a23c:	54c4      	strb	r4, [r0, r3]
 800a23e:	3301      	adds	r3, #1
 800a240:	429a      	cmp	r2, r3
 800a242:	d1fa      	bne.n	800a23a <memmove+0x1a>
 800a244:	e7f8      	b.n	800a238 <memmove+0x18>
	...

0800a248 <__malloc_lock>:
 800a248:	b510      	push	{r4, lr}
 800a24a:	4802      	ldr	r0, [pc, #8]	; (800a254 <__malloc_lock+0xc>)
 800a24c:	f000 fc4f 	bl	800aaee <__retarget_lock_acquire_recursive>
 800a250:	bd10      	pop	{r4, pc}
 800a252:	46c0      	nop			; (mov r8, r8)
 800a254:	20000448 	.word	0x20000448

0800a258 <__malloc_unlock>:
 800a258:	b510      	push	{r4, lr}
 800a25a:	4802      	ldr	r0, [pc, #8]	; (800a264 <__malloc_unlock+0xc>)
 800a25c:	f000 fc48 	bl	800aaf0 <__retarget_lock_release_recursive>
 800a260:	bd10      	pop	{r4, pc}
 800a262:	46c0      	nop			; (mov r8, r8)
 800a264:	20000448 	.word	0x20000448

0800a268 <_realloc_r>:
 800a268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a26a:	0007      	movs	r7, r0
 800a26c:	000e      	movs	r6, r1
 800a26e:	0014      	movs	r4, r2
 800a270:	2900      	cmp	r1, #0
 800a272:	d105      	bne.n	800a280 <_realloc_r+0x18>
 800a274:	0011      	movs	r1, r2
 800a276:	f7ff fda9 	bl	8009dcc <_malloc_r>
 800a27a:	0005      	movs	r5, r0
 800a27c:	0028      	movs	r0, r5
 800a27e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a280:	2a00      	cmp	r2, #0
 800a282:	d103      	bne.n	800a28c <_realloc_r+0x24>
 800a284:	f7ff fd36 	bl	8009cf4 <_free_r>
 800a288:	0025      	movs	r5, r4
 800a28a:	e7f7      	b.n	800a27c <_realloc_r+0x14>
 800a28c:	f000 fc9e 	bl	800abcc <_malloc_usable_size_r>
 800a290:	9001      	str	r0, [sp, #4]
 800a292:	4284      	cmp	r4, r0
 800a294:	d803      	bhi.n	800a29e <_realloc_r+0x36>
 800a296:	0035      	movs	r5, r6
 800a298:	0843      	lsrs	r3, r0, #1
 800a29a:	42a3      	cmp	r3, r4
 800a29c:	d3ee      	bcc.n	800a27c <_realloc_r+0x14>
 800a29e:	0021      	movs	r1, r4
 800a2a0:	0038      	movs	r0, r7
 800a2a2:	f7ff fd93 	bl	8009dcc <_malloc_r>
 800a2a6:	1e05      	subs	r5, r0, #0
 800a2a8:	d0e8      	beq.n	800a27c <_realloc_r+0x14>
 800a2aa:	9b01      	ldr	r3, [sp, #4]
 800a2ac:	0022      	movs	r2, r4
 800a2ae:	429c      	cmp	r4, r3
 800a2b0:	d900      	bls.n	800a2b4 <_realloc_r+0x4c>
 800a2b2:	001a      	movs	r2, r3
 800a2b4:	0031      	movs	r1, r6
 800a2b6:	0028      	movs	r0, r5
 800a2b8:	f7ff f94b 	bl	8009552 <memcpy>
 800a2bc:	0031      	movs	r1, r6
 800a2be:	0038      	movs	r0, r7
 800a2c0:	f7ff fd18 	bl	8009cf4 <_free_r>
 800a2c4:	e7da      	b.n	800a27c <_realloc_r+0x14>

0800a2c6 <__sfputc_r>:
 800a2c6:	6893      	ldr	r3, [r2, #8]
 800a2c8:	b510      	push	{r4, lr}
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	6093      	str	r3, [r2, #8]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	da04      	bge.n	800a2dc <__sfputc_r+0x16>
 800a2d2:	6994      	ldr	r4, [r2, #24]
 800a2d4:	42a3      	cmp	r3, r4
 800a2d6:	db07      	blt.n	800a2e8 <__sfputc_r+0x22>
 800a2d8:	290a      	cmp	r1, #10
 800a2da:	d005      	beq.n	800a2e8 <__sfputc_r+0x22>
 800a2dc:	6813      	ldr	r3, [r2, #0]
 800a2de:	1c58      	adds	r0, r3, #1
 800a2e0:	6010      	str	r0, [r2, #0]
 800a2e2:	7019      	strb	r1, [r3, #0]
 800a2e4:	0008      	movs	r0, r1
 800a2e6:	bd10      	pop	{r4, pc}
 800a2e8:	f000 f94e 	bl	800a588 <__swbuf_r>
 800a2ec:	0001      	movs	r1, r0
 800a2ee:	e7f9      	b.n	800a2e4 <__sfputc_r+0x1e>

0800a2f0 <__sfputs_r>:
 800a2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f2:	0006      	movs	r6, r0
 800a2f4:	000f      	movs	r7, r1
 800a2f6:	0014      	movs	r4, r2
 800a2f8:	18d5      	adds	r5, r2, r3
 800a2fa:	42ac      	cmp	r4, r5
 800a2fc:	d101      	bne.n	800a302 <__sfputs_r+0x12>
 800a2fe:	2000      	movs	r0, #0
 800a300:	e007      	b.n	800a312 <__sfputs_r+0x22>
 800a302:	7821      	ldrb	r1, [r4, #0]
 800a304:	003a      	movs	r2, r7
 800a306:	0030      	movs	r0, r6
 800a308:	f7ff ffdd 	bl	800a2c6 <__sfputc_r>
 800a30c:	3401      	adds	r4, #1
 800a30e:	1c43      	adds	r3, r0, #1
 800a310:	d1f3      	bne.n	800a2fa <__sfputs_r+0xa>
 800a312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a314 <_vfiprintf_r>:
 800a314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a316:	b0a1      	sub	sp, #132	; 0x84
 800a318:	0006      	movs	r6, r0
 800a31a:	000c      	movs	r4, r1
 800a31c:	001f      	movs	r7, r3
 800a31e:	9203      	str	r2, [sp, #12]
 800a320:	2800      	cmp	r0, #0
 800a322:	d004      	beq.n	800a32e <_vfiprintf_r+0x1a>
 800a324:	6983      	ldr	r3, [r0, #24]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <_vfiprintf_r+0x1a>
 800a32a:	f000 fb3f 	bl	800a9ac <__sinit>
 800a32e:	4b8e      	ldr	r3, [pc, #568]	; (800a568 <_vfiprintf_r+0x254>)
 800a330:	429c      	cmp	r4, r3
 800a332:	d11c      	bne.n	800a36e <_vfiprintf_r+0x5a>
 800a334:	6874      	ldr	r4, [r6, #4]
 800a336:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a338:	07db      	lsls	r3, r3, #31
 800a33a:	d405      	bmi.n	800a348 <_vfiprintf_r+0x34>
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	059b      	lsls	r3, r3, #22
 800a340:	d402      	bmi.n	800a348 <_vfiprintf_r+0x34>
 800a342:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a344:	f000 fbd3 	bl	800aaee <__retarget_lock_acquire_recursive>
 800a348:	89a3      	ldrh	r3, [r4, #12]
 800a34a:	071b      	lsls	r3, r3, #28
 800a34c:	d502      	bpl.n	800a354 <_vfiprintf_r+0x40>
 800a34e:	6923      	ldr	r3, [r4, #16]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d11d      	bne.n	800a390 <_vfiprintf_r+0x7c>
 800a354:	0021      	movs	r1, r4
 800a356:	0030      	movs	r0, r6
 800a358:	f000 f97a 	bl	800a650 <__swsetup_r>
 800a35c:	2800      	cmp	r0, #0
 800a35e:	d017      	beq.n	800a390 <_vfiprintf_r+0x7c>
 800a360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a362:	07db      	lsls	r3, r3, #31
 800a364:	d50d      	bpl.n	800a382 <_vfiprintf_r+0x6e>
 800a366:	2001      	movs	r0, #1
 800a368:	4240      	negs	r0, r0
 800a36a:	b021      	add	sp, #132	; 0x84
 800a36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a36e:	4b7f      	ldr	r3, [pc, #508]	; (800a56c <_vfiprintf_r+0x258>)
 800a370:	429c      	cmp	r4, r3
 800a372:	d101      	bne.n	800a378 <_vfiprintf_r+0x64>
 800a374:	68b4      	ldr	r4, [r6, #8]
 800a376:	e7de      	b.n	800a336 <_vfiprintf_r+0x22>
 800a378:	4b7d      	ldr	r3, [pc, #500]	; (800a570 <_vfiprintf_r+0x25c>)
 800a37a:	429c      	cmp	r4, r3
 800a37c:	d1db      	bne.n	800a336 <_vfiprintf_r+0x22>
 800a37e:	68f4      	ldr	r4, [r6, #12]
 800a380:	e7d9      	b.n	800a336 <_vfiprintf_r+0x22>
 800a382:	89a3      	ldrh	r3, [r4, #12]
 800a384:	059b      	lsls	r3, r3, #22
 800a386:	d4ee      	bmi.n	800a366 <_vfiprintf_r+0x52>
 800a388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a38a:	f000 fbb1 	bl	800aaf0 <__retarget_lock_release_recursive>
 800a38e:	e7ea      	b.n	800a366 <_vfiprintf_r+0x52>
 800a390:	2300      	movs	r3, #0
 800a392:	ad08      	add	r5, sp, #32
 800a394:	616b      	str	r3, [r5, #20]
 800a396:	3320      	adds	r3, #32
 800a398:	766b      	strb	r3, [r5, #25]
 800a39a:	3310      	adds	r3, #16
 800a39c:	76ab      	strb	r3, [r5, #26]
 800a39e:	9707      	str	r7, [sp, #28]
 800a3a0:	9f03      	ldr	r7, [sp, #12]
 800a3a2:	783b      	ldrb	r3, [r7, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d001      	beq.n	800a3ac <_vfiprintf_r+0x98>
 800a3a8:	2b25      	cmp	r3, #37	; 0x25
 800a3aa:	d14e      	bne.n	800a44a <_vfiprintf_r+0x136>
 800a3ac:	9b03      	ldr	r3, [sp, #12]
 800a3ae:	1afb      	subs	r3, r7, r3
 800a3b0:	9305      	str	r3, [sp, #20]
 800a3b2:	9b03      	ldr	r3, [sp, #12]
 800a3b4:	429f      	cmp	r7, r3
 800a3b6:	d00d      	beq.n	800a3d4 <_vfiprintf_r+0xc0>
 800a3b8:	9b05      	ldr	r3, [sp, #20]
 800a3ba:	0021      	movs	r1, r4
 800a3bc:	0030      	movs	r0, r6
 800a3be:	9a03      	ldr	r2, [sp, #12]
 800a3c0:	f7ff ff96 	bl	800a2f0 <__sfputs_r>
 800a3c4:	1c43      	adds	r3, r0, #1
 800a3c6:	d100      	bne.n	800a3ca <_vfiprintf_r+0xb6>
 800a3c8:	e0b5      	b.n	800a536 <_vfiprintf_r+0x222>
 800a3ca:	696a      	ldr	r2, [r5, #20]
 800a3cc:	9b05      	ldr	r3, [sp, #20]
 800a3ce:	4694      	mov	ip, r2
 800a3d0:	4463      	add	r3, ip
 800a3d2:	616b      	str	r3, [r5, #20]
 800a3d4:	783b      	ldrb	r3, [r7, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d100      	bne.n	800a3dc <_vfiprintf_r+0xc8>
 800a3da:	e0ac      	b.n	800a536 <_vfiprintf_r+0x222>
 800a3dc:	2201      	movs	r2, #1
 800a3de:	1c7b      	adds	r3, r7, #1
 800a3e0:	9303      	str	r3, [sp, #12]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	4252      	negs	r2, r2
 800a3e6:	606a      	str	r2, [r5, #4]
 800a3e8:	a904      	add	r1, sp, #16
 800a3ea:	3254      	adds	r2, #84	; 0x54
 800a3ec:	1852      	adds	r2, r2, r1
 800a3ee:	602b      	str	r3, [r5, #0]
 800a3f0:	60eb      	str	r3, [r5, #12]
 800a3f2:	60ab      	str	r3, [r5, #8]
 800a3f4:	7013      	strb	r3, [r2, #0]
 800a3f6:	65ab      	str	r3, [r5, #88]	; 0x58
 800a3f8:	9b03      	ldr	r3, [sp, #12]
 800a3fa:	2205      	movs	r2, #5
 800a3fc:	7819      	ldrb	r1, [r3, #0]
 800a3fe:	485d      	ldr	r0, [pc, #372]	; (800a574 <_vfiprintf_r+0x260>)
 800a400:	f7ff f89c 	bl	800953c <memchr>
 800a404:	9b03      	ldr	r3, [sp, #12]
 800a406:	1c5f      	adds	r7, r3, #1
 800a408:	2800      	cmp	r0, #0
 800a40a:	d120      	bne.n	800a44e <_vfiprintf_r+0x13a>
 800a40c:	682a      	ldr	r2, [r5, #0]
 800a40e:	06d3      	lsls	r3, r2, #27
 800a410:	d504      	bpl.n	800a41c <_vfiprintf_r+0x108>
 800a412:	2353      	movs	r3, #83	; 0x53
 800a414:	a904      	add	r1, sp, #16
 800a416:	185b      	adds	r3, r3, r1
 800a418:	2120      	movs	r1, #32
 800a41a:	7019      	strb	r1, [r3, #0]
 800a41c:	0713      	lsls	r3, r2, #28
 800a41e:	d504      	bpl.n	800a42a <_vfiprintf_r+0x116>
 800a420:	2353      	movs	r3, #83	; 0x53
 800a422:	a904      	add	r1, sp, #16
 800a424:	185b      	adds	r3, r3, r1
 800a426:	212b      	movs	r1, #43	; 0x2b
 800a428:	7019      	strb	r1, [r3, #0]
 800a42a:	9b03      	ldr	r3, [sp, #12]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	2b2a      	cmp	r3, #42	; 0x2a
 800a430:	d016      	beq.n	800a460 <_vfiprintf_r+0x14c>
 800a432:	2100      	movs	r1, #0
 800a434:	68eb      	ldr	r3, [r5, #12]
 800a436:	9f03      	ldr	r7, [sp, #12]
 800a438:	783a      	ldrb	r2, [r7, #0]
 800a43a:	1c78      	adds	r0, r7, #1
 800a43c:	3a30      	subs	r2, #48	; 0x30
 800a43e:	4684      	mov	ip, r0
 800a440:	2a09      	cmp	r2, #9
 800a442:	d94f      	bls.n	800a4e4 <_vfiprintf_r+0x1d0>
 800a444:	2900      	cmp	r1, #0
 800a446:	d111      	bne.n	800a46c <_vfiprintf_r+0x158>
 800a448:	e017      	b.n	800a47a <_vfiprintf_r+0x166>
 800a44a:	3701      	adds	r7, #1
 800a44c:	e7a9      	b.n	800a3a2 <_vfiprintf_r+0x8e>
 800a44e:	4b49      	ldr	r3, [pc, #292]	; (800a574 <_vfiprintf_r+0x260>)
 800a450:	682a      	ldr	r2, [r5, #0]
 800a452:	1ac0      	subs	r0, r0, r3
 800a454:	2301      	movs	r3, #1
 800a456:	4083      	lsls	r3, r0
 800a458:	4313      	orrs	r3, r2
 800a45a:	602b      	str	r3, [r5, #0]
 800a45c:	9703      	str	r7, [sp, #12]
 800a45e:	e7cb      	b.n	800a3f8 <_vfiprintf_r+0xe4>
 800a460:	9b07      	ldr	r3, [sp, #28]
 800a462:	1d19      	adds	r1, r3, #4
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	9107      	str	r1, [sp, #28]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	db01      	blt.n	800a470 <_vfiprintf_r+0x15c>
 800a46c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a46e:	e004      	b.n	800a47a <_vfiprintf_r+0x166>
 800a470:	425b      	negs	r3, r3
 800a472:	60eb      	str	r3, [r5, #12]
 800a474:	2302      	movs	r3, #2
 800a476:	4313      	orrs	r3, r2
 800a478:	602b      	str	r3, [r5, #0]
 800a47a:	783b      	ldrb	r3, [r7, #0]
 800a47c:	2b2e      	cmp	r3, #46	; 0x2e
 800a47e:	d10a      	bne.n	800a496 <_vfiprintf_r+0x182>
 800a480:	787b      	ldrb	r3, [r7, #1]
 800a482:	2b2a      	cmp	r3, #42	; 0x2a
 800a484:	d137      	bne.n	800a4f6 <_vfiprintf_r+0x1e2>
 800a486:	9b07      	ldr	r3, [sp, #28]
 800a488:	3702      	adds	r7, #2
 800a48a:	1d1a      	adds	r2, r3, #4
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	9207      	str	r2, [sp, #28]
 800a490:	2b00      	cmp	r3, #0
 800a492:	db2d      	blt.n	800a4f0 <_vfiprintf_r+0x1dc>
 800a494:	9309      	str	r3, [sp, #36]	; 0x24
 800a496:	2203      	movs	r2, #3
 800a498:	7839      	ldrb	r1, [r7, #0]
 800a49a:	4837      	ldr	r0, [pc, #220]	; (800a578 <_vfiprintf_r+0x264>)
 800a49c:	f7ff f84e 	bl	800953c <memchr>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d007      	beq.n	800a4b4 <_vfiprintf_r+0x1a0>
 800a4a4:	4b34      	ldr	r3, [pc, #208]	; (800a578 <_vfiprintf_r+0x264>)
 800a4a6:	682a      	ldr	r2, [r5, #0]
 800a4a8:	1ac0      	subs	r0, r0, r3
 800a4aa:	2340      	movs	r3, #64	; 0x40
 800a4ac:	4083      	lsls	r3, r0
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	3701      	adds	r7, #1
 800a4b2:	602b      	str	r3, [r5, #0]
 800a4b4:	7839      	ldrb	r1, [r7, #0]
 800a4b6:	1c7b      	adds	r3, r7, #1
 800a4b8:	2206      	movs	r2, #6
 800a4ba:	4830      	ldr	r0, [pc, #192]	; (800a57c <_vfiprintf_r+0x268>)
 800a4bc:	9303      	str	r3, [sp, #12]
 800a4be:	7629      	strb	r1, [r5, #24]
 800a4c0:	f7ff f83c 	bl	800953c <memchr>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d045      	beq.n	800a554 <_vfiprintf_r+0x240>
 800a4c8:	4b2d      	ldr	r3, [pc, #180]	; (800a580 <_vfiprintf_r+0x26c>)
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d127      	bne.n	800a51e <_vfiprintf_r+0x20a>
 800a4ce:	2207      	movs	r2, #7
 800a4d0:	9b07      	ldr	r3, [sp, #28]
 800a4d2:	3307      	adds	r3, #7
 800a4d4:	4393      	bics	r3, r2
 800a4d6:	3308      	adds	r3, #8
 800a4d8:	9307      	str	r3, [sp, #28]
 800a4da:	696b      	ldr	r3, [r5, #20]
 800a4dc:	9a04      	ldr	r2, [sp, #16]
 800a4de:	189b      	adds	r3, r3, r2
 800a4e0:	616b      	str	r3, [r5, #20]
 800a4e2:	e75d      	b.n	800a3a0 <_vfiprintf_r+0x8c>
 800a4e4:	210a      	movs	r1, #10
 800a4e6:	434b      	muls	r3, r1
 800a4e8:	4667      	mov	r7, ip
 800a4ea:	189b      	adds	r3, r3, r2
 800a4ec:	3909      	subs	r1, #9
 800a4ee:	e7a3      	b.n	800a438 <_vfiprintf_r+0x124>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	425b      	negs	r3, r3
 800a4f4:	e7ce      	b.n	800a494 <_vfiprintf_r+0x180>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	001a      	movs	r2, r3
 800a4fa:	3701      	adds	r7, #1
 800a4fc:	606b      	str	r3, [r5, #4]
 800a4fe:	7839      	ldrb	r1, [r7, #0]
 800a500:	1c78      	adds	r0, r7, #1
 800a502:	3930      	subs	r1, #48	; 0x30
 800a504:	4684      	mov	ip, r0
 800a506:	2909      	cmp	r1, #9
 800a508:	d903      	bls.n	800a512 <_vfiprintf_r+0x1fe>
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d0c3      	beq.n	800a496 <_vfiprintf_r+0x182>
 800a50e:	9209      	str	r2, [sp, #36]	; 0x24
 800a510:	e7c1      	b.n	800a496 <_vfiprintf_r+0x182>
 800a512:	230a      	movs	r3, #10
 800a514:	435a      	muls	r2, r3
 800a516:	4667      	mov	r7, ip
 800a518:	1852      	adds	r2, r2, r1
 800a51a:	3b09      	subs	r3, #9
 800a51c:	e7ef      	b.n	800a4fe <_vfiprintf_r+0x1ea>
 800a51e:	ab07      	add	r3, sp, #28
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	0022      	movs	r2, r4
 800a524:	0029      	movs	r1, r5
 800a526:	0030      	movs	r0, r6
 800a528:	4b16      	ldr	r3, [pc, #88]	; (800a584 <_vfiprintf_r+0x270>)
 800a52a:	f7fd fd6f 	bl	800800c <_printf_float>
 800a52e:	9004      	str	r0, [sp, #16]
 800a530:	9b04      	ldr	r3, [sp, #16]
 800a532:	3301      	adds	r3, #1
 800a534:	d1d1      	bne.n	800a4da <_vfiprintf_r+0x1c6>
 800a536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a538:	07db      	lsls	r3, r3, #31
 800a53a:	d405      	bmi.n	800a548 <_vfiprintf_r+0x234>
 800a53c:	89a3      	ldrh	r3, [r4, #12]
 800a53e:	059b      	lsls	r3, r3, #22
 800a540:	d402      	bmi.n	800a548 <_vfiprintf_r+0x234>
 800a542:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a544:	f000 fad4 	bl	800aaf0 <__retarget_lock_release_recursive>
 800a548:	89a3      	ldrh	r3, [r4, #12]
 800a54a:	065b      	lsls	r3, r3, #25
 800a54c:	d500      	bpl.n	800a550 <_vfiprintf_r+0x23c>
 800a54e:	e70a      	b.n	800a366 <_vfiprintf_r+0x52>
 800a550:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a552:	e70a      	b.n	800a36a <_vfiprintf_r+0x56>
 800a554:	ab07      	add	r3, sp, #28
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	0022      	movs	r2, r4
 800a55a:	0029      	movs	r1, r5
 800a55c:	0030      	movs	r0, r6
 800a55e:	4b09      	ldr	r3, [pc, #36]	; (800a584 <_vfiprintf_r+0x270>)
 800a560:	f7fe f806 	bl	8008570 <_printf_i>
 800a564:	e7e3      	b.n	800a52e <_vfiprintf_r+0x21a>
 800a566:	46c0      	nop			; (mov r8, r8)
 800a568:	0800c144 	.word	0x0800c144
 800a56c:	0800c164 	.word	0x0800c164
 800a570:	0800c124 	.word	0x0800c124
 800a574:	0800bfcc 	.word	0x0800bfcc
 800a578:	0800bfd2 	.word	0x0800bfd2
 800a57c:	0800bfd6 	.word	0x0800bfd6
 800a580:	0800800d 	.word	0x0800800d
 800a584:	0800a2f1 	.word	0x0800a2f1

0800a588 <__swbuf_r>:
 800a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58a:	0005      	movs	r5, r0
 800a58c:	000e      	movs	r6, r1
 800a58e:	0014      	movs	r4, r2
 800a590:	2800      	cmp	r0, #0
 800a592:	d004      	beq.n	800a59e <__swbuf_r+0x16>
 800a594:	6983      	ldr	r3, [r0, #24]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d101      	bne.n	800a59e <__swbuf_r+0x16>
 800a59a:	f000 fa07 	bl	800a9ac <__sinit>
 800a59e:	4b22      	ldr	r3, [pc, #136]	; (800a628 <__swbuf_r+0xa0>)
 800a5a0:	429c      	cmp	r4, r3
 800a5a2:	d12e      	bne.n	800a602 <__swbuf_r+0x7a>
 800a5a4:	686c      	ldr	r4, [r5, #4]
 800a5a6:	69a3      	ldr	r3, [r4, #24]
 800a5a8:	60a3      	str	r3, [r4, #8]
 800a5aa:	89a3      	ldrh	r3, [r4, #12]
 800a5ac:	071b      	lsls	r3, r3, #28
 800a5ae:	d532      	bpl.n	800a616 <__swbuf_r+0x8e>
 800a5b0:	6923      	ldr	r3, [r4, #16]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d02f      	beq.n	800a616 <__swbuf_r+0x8e>
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	6922      	ldr	r2, [r4, #16]
 800a5ba:	b2f7      	uxtb	r7, r6
 800a5bc:	1a98      	subs	r0, r3, r2
 800a5be:	6963      	ldr	r3, [r4, #20]
 800a5c0:	b2f6      	uxtb	r6, r6
 800a5c2:	4283      	cmp	r3, r0
 800a5c4:	dc05      	bgt.n	800a5d2 <__swbuf_r+0x4a>
 800a5c6:	0021      	movs	r1, r4
 800a5c8:	0028      	movs	r0, r5
 800a5ca:	f000 f94d 	bl	800a868 <_fflush_r>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d127      	bne.n	800a622 <__swbuf_r+0x9a>
 800a5d2:	68a3      	ldr	r3, [r4, #8]
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	60a3      	str	r3, [r4, #8]
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	1c5a      	adds	r2, r3, #1
 800a5de:	6022      	str	r2, [r4, #0]
 800a5e0:	701f      	strb	r7, [r3, #0]
 800a5e2:	6963      	ldr	r3, [r4, #20]
 800a5e4:	4283      	cmp	r3, r0
 800a5e6:	d004      	beq.n	800a5f2 <__swbuf_r+0x6a>
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	07db      	lsls	r3, r3, #31
 800a5ec:	d507      	bpl.n	800a5fe <__swbuf_r+0x76>
 800a5ee:	2e0a      	cmp	r6, #10
 800a5f0:	d105      	bne.n	800a5fe <__swbuf_r+0x76>
 800a5f2:	0021      	movs	r1, r4
 800a5f4:	0028      	movs	r0, r5
 800a5f6:	f000 f937 	bl	800a868 <_fflush_r>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d111      	bne.n	800a622 <__swbuf_r+0x9a>
 800a5fe:	0030      	movs	r0, r6
 800a600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a602:	4b0a      	ldr	r3, [pc, #40]	; (800a62c <__swbuf_r+0xa4>)
 800a604:	429c      	cmp	r4, r3
 800a606:	d101      	bne.n	800a60c <__swbuf_r+0x84>
 800a608:	68ac      	ldr	r4, [r5, #8]
 800a60a:	e7cc      	b.n	800a5a6 <__swbuf_r+0x1e>
 800a60c:	4b08      	ldr	r3, [pc, #32]	; (800a630 <__swbuf_r+0xa8>)
 800a60e:	429c      	cmp	r4, r3
 800a610:	d1c9      	bne.n	800a5a6 <__swbuf_r+0x1e>
 800a612:	68ec      	ldr	r4, [r5, #12]
 800a614:	e7c7      	b.n	800a5a6 <__swbuf_r+0x1e>
 800a616:	0021      	movs	r1, r4
 800a618:	0028      	movs	r0, r5
 800a61a:	f000 f819 	bl	800a650 <__swsetup_r>
 800a61e:	2800      	cmp	r0, #0
 800a620:	d0c9      	beq.n	800a5b6 <__swbuf_r+0x2e>
 800a622:	2601      	movs	r6, #1
 800a624:	4276      	negs	r6, r6
 800a626:	e7ea      	b.n	800a5fe <__swbuf_r+0x76>
 800a628:	0800c144 	.word	0x0800c144
 800a62c:	0800c164 	.word	0x0800c164
 800a630:	0800c124 	.word	0x0800c124

0800a634 <__ascii_wctomb>:
 800a634:	0003      	movs	r3, r0
 800a636:	1e08      	subs	r0, r1, #0
 800a638:	d005      	beq.n	800a646 <__ascii_wctomb+0x12>
 800a63a:	2aff      	cmp	r2, #255	; 0xff
 800a63c:	d904      	bls.n	800a648 <__ascii_wctomb+0x14>
 800a63e:	228a      	movs	r2, #138	; 0x8a
 800a640:	2001      	movs	r0, #1
 800a642:	601a      	str	r2, [r3, #0]
 800a644:	4240      	negs	r0, r0
 800a646:	4770      	bx	lr
 800a648:	2001      	movs	r0, #1
 800a64a:	700a      	strb	r2, [r1, #0]
 800a64c:	e7fb      	b.n	800a646 <__ascii_wctomb+0x12>
	...

0800a650 <__swsetup_r>:
 800a650:	4b37      	ldr	r3, [pc, #220]	; (800a730 <__swsetup_r+0xe0>)
 800a652:	b570      	push	{r4, r5, r6, lr}
 800a654:	681d      	ldr	r5, [r3, #0]
 800a656:	0006      	movs	r6, r0
 800a658:	000c      	movs	r4, r1
 800a65a:	2d00      	cmp	r5, #0
 800a65c:	d005      	beq.n	800a66a <__swsetup_r+0x1a>
 800a65e:	69ab      	ldr	r3, [r5, #24]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d102      	bne.n	800a66a <__swsetup_r+0x1a>
 800a664:	0028      	movs	r0, r5
 800a666:	f000 f9a1 	bl	800a9ac <__sinit>
 800a66a:	4b32      	ldr	r3, [pc, #200]	; (800a734 <__swsetup_r+0xe4>)
 800a66c:	429c      	cmp	r4, r3
 800a66e:	d10f      	bne.n	800a690 <__swsetup_r+0x40>
 800a670:	686c      	ldr	r4, [r5, #4]
 800a672:	230c      	movs	r3, #12
 800a674:	5ee2      	ldrsh	r2, [r4, r3]
 800a676:	b293      	uxth	r3, r2
 800a678:	0711      	lsls	r1, r2, #28
 800a67a:	d42d      	bmi.n	800a6d8 <__swsetup_r+0x88>
 800a67c:	06d9      	lsls	r1, r3, #27
 800a67e:	d411      	bmi.n	800a6a4 <__swsetup_r+0x54>
 800a680:	2309      	movs	r3, #9
 800a682:	2001      	movs	r0, #1
 800a684:	6033      	str	r3, [r6, #0]
 800a686:	3337      	adds	r3, #55	; 0x37
 800a688:	4313      	orrs	r3, r2
 800a68a:	81a3      	strh	r3, [r4, #12]
 800a68c:	4240      	negs	r0, r0
 800a68e:	bd70      	pop	{r4, r5, r6, pc}
 800a690:	4b29      	ldr	r3, [pc, #164]	; (800a738 <__swsetup_r+0xe8>)
 800a692:	429c      	cmp	r4, r3
 800a694:	d101      	bne.n	800a69a <__swsetup_r+0x4a>
 800a696:	68ac      	ldr	r4, [r5, #8]
 800a698:	e7eb      	b.n	800a672 <__swsetup_r+0x22>
 800a69a:	4b28      	ldr	r3, [pc, #160]	; (800a73c <__swsetup_r+0xec>)
 800a69c:	429c      	cmp	r4, r3
 800a69e:	d1e8      	bne.n	800a672 <__swsetup_r+0x22>
 800a6a0:	68ec      	ldr	r4, [r5, #12]
 800a6a2:	e7e6      	b.n	800a672 <__swsetup_r+0x22>
 800a6a4:	075b      	lsls	r3, r3, #29
 800a6a6:	d513      	bpl.n	800a6d0 <__swsetup_r+0x80>
 800a6a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6aa:	2900      	cmp	r1, #0
 800a6ac:	d008      	beq.n	800a6c0 <__swsetup_r+0x70>
 800a6ae:	0023      	movs	r3, r4
 800a6b0:	3344      	adds	r3, #68	; 0x44
 800a6b2:	4299      	cmp	r1, r3
 800a6b4:	d002      	beq.n	800a6bc <__swsetup_r+0x6c>
 800a6b6:	0030      	movs	r0, r6
 800a6b8:	f7ff fb1c 	bl	8009cf4 <_free_r>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	6363      	str	r3, [r4, #52]	; 0x34
 800a6c0:	2224      	movs	r2, #36	; 0x24
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	4393      	bics	r3, r2
 800a6c6:	81a3      	strh	r3, [r4, #12]
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	6063      	str	r3, [r4, #4]
 800a6cc:	6923      	ldr	r3, [r4, #16]
 800a6ce:	6023      	str	r3, [r4, #0]
 800a6d0:	2308      	movs	r3, #8
 800a6d2:	89a2      	ldrh	r2, [r4, #12]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	81a3      	strh	r3, [r4, #12]
 800a6d8:	6923      	ldr	r3, [r4, #16]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10b      	bne.n	800a6f6 <__swsetup_r+0xa6>
 800a6de:	21a0      	movs	r1, #160	; 0xa0
 800a6e0:	2280      	movs	r2, #128	; 0x80
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	0089      	lsls	r1, r1, #2
 800a6e6:	0092      	lsls	r2, r2, #2
 800a6e8:	400b      	ands	r3, r1
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d003      	beq.n	800a6f6 <__swsetup_r+0xa6>
 800a6ee:	0021      	movs	r1, r4
 800a6f0:	0030      	movs	r0, r6
 800a6f2:	f000 fa27 	bl	800ab44 <__smakebuf_r>
 800a6f6:	220c      	movs	r2, #12
 800a6f8:	5ea3      	ldrsh	r3, [r4, r2]
 800a6fa:	2001      	movs	r0, #1
 800a6fc:	001a      	movs	r2, r3
 800a6fe:	b299      	uxth	r1, r3
 800a700:	4002      	ands	r2, r0
 800a702:	4203      	tst	r3, r0
 800a704:	d00f      	beq.n	800a726 <__swsetup_r+0xd6>
 800a706:	2200      	movs	r2, #0
 800a708:	60a2      	str	r2, [r4, #8]
 800a70a:	6962      	ldr	r2, [r4, #20]
 800a70c:	4252      	negs	r2, r2
 800a70e:	61a2      	str	r2, [r4, #24]
 800a710:	2000      	movs	r0, #0
 800a712:	6922      	ldr	r2, [r4, #16]
 800a714:	4282      	cmp	r2, r0
 800a716:	d1ba      	bne.n	800a68e <__swsetup_r+0x3e>
 800a718:	060a      	lsls	r2, r1, #24
 800a71a:	d5b8      	bpl.n	800a68e <__swsetup_r+0x3e>
 800a71c:	2240      	movs	r2, #64	; 0x40
 800a71e:	4313      	orrs	r3, r2
 800a720:	81a3      	strh	r3, [r4, #12]
 800a722:	3801      	subs	r0, #1
 800a724:	e7b3      	b.n	800a68e <__swsetup_r+0x3e>
 800a726:	0788      	lsls	r0, r1, #30
 800a728:	d400      	bmi.n	800a72c <__swsetup_r+0xdc>
 800a72a:	6962      	ldr	r2, [r4, #20]
 800a72c:	60a2      	str	r2, [r4, #8]
 800a72e:	e7ef      	b.n	800a710 <__swsetup_r+0xc0>
 800a730:	2000000c 	.word	0x2000000c
 800a734:	0800c144 	.word	0x0800c144
 800a738:	0800c164 	.word	0x0800c164
 800a73c:	0800c124 	.word	0x0800c124

0800a740 <abort>:
 800a740:	2006      	movs	r0, #6
 800a742:	b510      	push	{r4, lr}
 800a744:	f000 fa74 	bl	800ac30 <raise>
 800a748:	2001      	movs	r0, #1
 800a74a:	f7f9 fed2 	bl	80044f2 <_exit>
	...

0800a750 <__sflush_r>:
 800a750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a752:	898b      	ldrh	r3, [r1, #12]
 800a754:	0005      	movs	r5, r0
 800a756:	000c      	movs	r4, r1
 800a758:	071a      	lsls	r2, r3, #28
 800a75a:	d45f      	bmi.n	800a81c <__sflush_r+0xcc>
 800a75c:	684a      	ldr	r2, [r1, #4]
 800a75e:	2a00      	cmp	r2, #0
 800a760:	dc04      	bgt.n	800a76c <__sflush_r+0x1c>
 800a762:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a764:	2a00      	cmp	r2, #0
 800a766:	dc01      	bgt.n	800a76c <__sflush_r+0x1c>
 800a768:	2000      	movs	r0, #0
 800a76a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a76c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a76e:	2f00      	cmp	r7, #0
 800a770:	d0fa      	beq.n	800a768 <__sflush_r+0x18>
 800a772:	2200      	movs	r2, #0
 800a774:	2180      	movs	r1, #128	; 0x80
 800a776:	682e      	ldr	r6, [r5, #0]
 800a778:	602a      	str	r2, [r5, #0]
 800a77a:	001a      	movs	r2, r3
 800a77c:	0149      	lsls	r1, r1, #5
 800a77e:	400a      	ands	r2, r1
 800a780:	420b      	tst	r3, r1
 800a782:	d034      	beq.n	800a7ee <__sflush_r+0x9e>
 800a784:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a786:	89a3      	ldrh	r3, [r4, #12]
 800a788:	075b      	lsls	r3, r3, #29
 800a78a:	d506      	bpl.n	800a79a <__sflush_r+0x4a>
 800a78c:	6863      	ldr	r3, [r4, #4]
 800a78e:	1ac0      	subs	r0, r0, r3
 800a790:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <__sflush_r+0x4a>
 800a796:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a798:	1ac0      	subs	r0, r0, r3
 800a79a:	0002      	movs	r2, r0
 800a79c:	6a21      	ldr	r1, [r4, #32]
 800a79e:	2300      	movs	r3, #0
 800a7a0:	0028      	movs	r0, r5
 800a7a2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a7a4:	47b8      	blx	r7
 800a7a6:	89a1      	ldrh	r1, [r4, #12]
 800a7a8:	1c43      	adds	r3, r0, #1
 800a7aa:	d106      	bne.n	800a7ba <__sflush_r+0x6a>
 800a7ac:	682b      	ldr	r3, [r5, #0]
 800a7ae:	2b1d      	cmp	r3, #29
 800a7b0:	d831      	bhi.n	800a816 <__sflush_r+0xc6>
 800a7b2:	4a2c      	ldr	r2, [pc, #176]	; (800a864 <__sflush_r+0x114>)
 800a7b4:	40da      	lsrs	r2, r3
 800a7b6:	07d3      	lsls	r3, r2, #31
 800a7b8:	d52d      	bpl.n	800a816 <__sflush_r+0xc6>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	6063      	str	r3, [r4, #4]
 800a7be:	6923      	ldr	r3, [r4, #16]
 800a7c0:	6023      	str	r3, [r4, #0]
 800a7c2:	04cb      	lsls	r3, r1, #19
 800a7c4:	d505      	bpl.n	800a7d2 <__sflush_r+0x82>
 800a7c6:	1c43      	adds	r3, r0, #1
 800a7c8:	d102      	bne.n	800a7d0 <__sflush_r+0x80>
 800a7ca:	682b      	ldr	r3, [r5, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d100      	bne.n	800a7d2 <__sflush_r+0x82>
 800a7d0:	6560      	str	r0, [r4, #84]	; 0x54
 800a7d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7d4:	602e      	str	r6, [r5, #0]
 800a7d6:	2900      	cmp	r1, #0
 800a7d8:	d0c6      	beq.n	800a768 <__sflush_r+0x18>
 800a7da:	0023      	movs	r3, r4
 800a7dc:	3344      	adds	r3, #68	; 0x44
 800a7de:	4299      	cmp	r1, r3
 800a7e0:	d002      	beq.n	800a7e8 <__sflush_r+0x98>
 800a7e2:	0028      	movs	r0, r5
 800a7e4:	f7ff fa86 	bl	8009cf4 <_free_r>
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	6360      	str	r0, [r4, #52]	; 0x34
 800a7ec:	e7bd      	b.n	800a76a <__sflush_r+0x1a>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	0028      	movs	r0, r5
 800a7f2:	6a21      	ldr	r1, [r4, #32]
 800a7f4:	47b8      	blx	r7
 800a7f6:	1c43      	adds	r3, r0, #1
 800a7f8:	d1c5      	bne.n	800a786 <__sflush_r+0x36>
 800a7fa:	682b      	ldr	r3, [r5, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d0c2      	beq.n	800a786 <__sflush_r+0x36>
 800a800:	2b1d      	cmp	r3, #29
 800a802:	d001      	beq.n	800a808 <__sflush_r+0xb8>
 800a804:	2b16      	cmp	r3, #22
 800a806:	d101      	bne.n	800a80c <__sflush_r+0xbc>
 800a808:	602e      	str	r6, [r5, #0]
 800a80a:	e7ad      	b.n	800a768 <__sflush_r+0x18>
 800a80c:	2340      	movs	r3, #64	; 0x40
 800a80e:	89a2      	ldrh	r2, [r4, #12]
 800a810:	4313      	orrs	r3, r2
 800a812:	81a3      	strh	r3, [r4, #12]
 800a814:	e7a9      	b.n	800a76a <__sflush_r+0x1a>
 800a816:	2340      	movs	r3, #64	; 0x40
 800a818:	430b      	orrs	r3, r1
 800a81a:	e7fa      	b.n	800a812 <__sflush_r+0xc2>
 800a81c:	690f      	ldr	r7, [r1, #16]
 800a81e:	2f00      	cmp	r7, #0
 800a820:	d0a2      	beq.n	800a768 <__sflush_r+0x18>
 800a822:	680a      	ldr	r2, [r1, #0]
 800a824:	600f      	str	r7, [r1, #0]
 800a826:	1bd2      	subs	r2, r2, r7
 800a828:	9201      	str	r2, [sp, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	079b      	lsls	r3, r3, #30
 800a82e:	d100      	bne.n	800a832 <__sflush_r+0xe2>
 800a830:	694a      	ldr	r2, [r1, #20]
 800a832:	60a2      	str	r2, [r4, #8]
 800a834:	9b01      	ldr	r3, [sp, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	dc00      	bgt.n	800a83c <__sflush_r+0xec>
 800a83a:	e795      	b.n	800a768 <__sflush_r+0x18>
 800a83c:	003a      	movs	r2, r7
 800a83e:	0028      	movs	r0, r5
 800a840:	9b01      	ldr	r3, [sp, #4]
 800a842:	6a21      	ldr	r1, [r4, #32]
 800a844:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a846:	47b0      	blx	r6
 800a848:	2800      	cmp	r0, #0
 800a84a:	dc06      	bgt.n	800a85a <__sflush_r+0x10a>
 800a84c:	2340      	movs	r3, #64	; 0x40
 800a84e:	2001      	movs	r0, #1
 800a850:	89a2      	ldrh	r2, [r4, #12]
 800a852:	4240      	negs	r0, r0
 800a854:	4313      	orrs	r3, r2
 800a856:	81a3      	strh	r3, [r4, #12]
 800a858:	e787      	b.n	800a76a <__sflush_r+0x1a>
 800a85a:	9b01      	ldr	r3, [sp, #4]
 800a85c:	183f      	adds	r7, r7, r0
 800a85e:	1a1b      	subs	r3, r3, r0
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	e7e7      	b.n	800a834 <__sflush_r+0xe4>
 800a864:	20400001 	.word	0x20400001

0800a868 <_fflush_r>:
 800a868:	690b      	ldr	r3, [r1, #16]
 800a86a:	b570      	push	{r4, r5, r6, lr}
 800a86c:	0005      	movs	r5, r0
 800a86e:	000c      	movs	r4, r1
 800a870:	2b00      	cmp	r3, #0
 800a872:	d102      	bne.n	800a87a <_fflush_r+0x12>
 800a874:	2500      	movs	r5, #0
 800a876:	0028      	movs	r0, r5
 800a878:	bd70      	pop	{r4, r5, r6, pc}
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d004      	beq.n	800a888 <_fflush_r+0x20>
 800a87e:	6983      	ldr	r3, [r0, #24]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d101      	bne.n	800a888 <_fflush_r+0x20>
 800a884:	f000 f892 	bl	800a9ac <__sinit>
 800a888:	4b14      	ldr	r3, [pc, #80]	; (800a8dc <_fflush_r+0x74>)
 800a88a:	429c      	cmp	r4, r3
 800a88c:	d11b      	bne.n	800a8c6 <_fflush_r+0x5e>
 800a88e:	686c      	ldr	r4, [r5, #4]
 800a890:	220c      	movs	r2, #12
 800a892:	5ea3      	ldrsh	r3, [r4, r2]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d0ed      	beq.n	800a874 <_fflush_r+0xc>
 800a898:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a89a:	07d2      	lsls	r2, r2, #31
 800a89c:	d404      	bmi.n	800a8a8 <_fflush_r+0x40>
 800a89e:	059b      	lsls	r3, r3, #22
 800a8a0:	d402      	bmi.n	800a8a8 <_fflush_r+0x40>
 800a8a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8a4:	f000 f923 	bl	800aaee <__retarget_lock_acquire_recursive>
 800a8a8:	0028      	movs	r0, r5
 800a8aa:	0021      	movs	r1, r4
 800a8ac:	f7ff ff50 	bl	800a750 <__sflush_r>
 800a8b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8b2:	0005      	movs	r5, r0
 800a8b4:	07db      	lsls	r3, r3, #31
 800a8b6:	d4de      	bmi.n	800a876 <_fflush_r+0xe>
 800a8b8:	89a3      	ldrh	r3, [r4, #12]
 800a8ba:	059b      	lsls	r3, r3, #22
 800a8bc:	d4db      	bmi.n	800a876 <_fflush_r+0xe>
 800a8be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8c0:	f000 f916 	bl	800aaf0 <__retarget_lock_release_recursive>
 800a8c4:	e7d7      	b.n	800a876 <_fflush_r+0xe>
 800a8c6:	4b06      	ldr	r3, [pc, #24]	; (800a8e0 <_fflush_r+0x78>)
 800a8c8:	429c      	cmp	r4, r3
 800a8ca:	d101      	bne.n	800a8d0 <_fflush_r+0x68>
 800a8cc:	68ac      	ldr	r4, [r5, #8]
 800a8ce:	e7df      	b.n	800a890 <_fflush_r+0x28>
 800a8d0:	4b04      	ldr	r3, [pc, #16]	; (800a8e4 <_fflush_r+0x7c>)
 800a8d2:	429c      	cmp	r4, r3
 800a8d4:	d1dc      	bne.n	800a890 <_fflush_r+0x28>
 800a8d6:	68ec      	ldr	r4, [r5, #12]
 800a8d8:	e7da      	b.n	800a890 <_fflush_r+0x28>
 800a8da:	46c0      	nop			; (mov r8, r8)
 800a8dc:	0800c144 	.word	0x0800c144
 800a8e0:	0800c164 	.word	0x0800c164
 800a8e4:	0800c124 	.word	0x0800c124

0800a8e8 <std>:
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	b510      	push	{r4, lr}
 800a8ec:	0004      	movs	r4, r0
 800a8ee:	6003      	str	r3, [r0, #0]
 800a8f0:	6043      	str	r3, [r0, #4]
 800a8f2:	6083      	str	r3, [r0, #8]
 800a8f4:	8181      	strh	r1, [r0, #12]
 800a8f6:	6643      	str	r3, [r0, #100]	; 0x64
 800a8f8:	0019      	movs	r1, r3
 800a8fa:	81c2      	strh	r2, [r0, #14]
 800a8fc:	6103      	str	r3, [r0, #16]
 800a8fe:	6143      	str	r3, [r0, #20]
 800a900:	6183      	str	r3, [r0, #24]
 800a902:	2208      	movs	r2, #8
 800a904:	305c      	adds	r0, #92	; 0x5c
 800a906:	f7fd facf 	bl	8007ea8 <memset>
 800a90a:	4b05      	ldr	r3, [pc, #20]	; (800a920 <std+0x38>)
 800a90c:	6224      	str	r4, [r4, #32]
 800a90e:	6263      	str	r3, [r4, #36]	; 0x24
 800a910:	4b04      	ldr	r3, [pc, #16]	; (800a924 <std+0x3c>)
 800a912:	62a3      	str	r3, [r4, #40]	; 0x28
 800a914:	4b04      	ldr	r3, [pc, #16]	; (800a928 <std+0x40>)
 800a916:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a918:	4b04      	ldr	r3, [pc, #16]	; (800a92c <std+0x44>)
 800a91a:	6323      	str	r3, [r4, #48]	; 0x30
 800a91c:	bd10      	pop	{r4, pc}
 800a91e:	46c0      	nop			; (mov r8, r8)
 800a920:	0800ac71 	.word	0x0800ac71
 800a924:	0800ac99 	.word	0x0800ac99
 800a928:	0800acd1 	.word	0x0800acd1
 800a92c:	0800acfd 	.word	0x0800acfd

0800a930 <_cleanup_r>:
 800a930:	b510      	push	{r4, lr}
 800a932:	4902      	ldr	r1, [pc, #8]	; (800a93c <_cleanup_r+0xc>)
 800a934:	f000 f8ba 	bl	800aaac <_fwalk_reent>
 800a938:	bd10      	pop	{r4, pc}
 800a93a:	46c0      	nop			; (mov r8, r8)
 800a93c:	0800a869 	.word	0x0800a869

0800a940 <__sfmoreglue>:
 800a940:	b570      	push	{r4, r5, r6, lr}
 800a942:	2568      	movs	r5, #104	; 0x68
 800a944:	1e4a      	subs	r2, r1, #1
 800a946:	4355      	muls	r5, r2
 800a948:	000e      	movs	r6, r1
 800a94a:	0029      	movs	r1, r5
 800a94c:	3174      	adds	r1, #116	; 0x74
 800a94e:	f7ff fa3d 	bl	8009dcc <_malloc_r>
 800a952:	1e04      	subs	r4, r0, #0
 800a954:	d008      	beq.n	800a968 <__sfmoreglue+0x28>
 800a956:	2100      	movs	r1, #0
 800a958:	002a      	movs	r2, r5
 800a95a:	6001      	str	r1, [r0, #0]
 800a95c:	6046      	str	r6, [r0, #4]
 800a95e:	300c      	adds	r0, #12
 800a960:	60a0      	str	r0, [r4, #8]
 800a962:	3268      	adds	r2, #104	; 0x68
 800a964:	f7fd faa0 	bl	8007ea8 <memset>
 800a968:	0020      	movs	r0, r4
 800a96a:	bd70      	pop	{r4, r5, r6, pc}

0800a96c <__sfp_lock_acquire>:
 800a96c:	b510      	push	{r4, lr}
 800a96e:	4802      	ldr	r0, [pc, #8]	; (800a978 <__sfp_lock_acquire+0xc>)
 800a970:	f000 f8bd 	bl	800aaee <__retarget_lock_acquire_recursive>
 800a974:	bd10      	pop	{r4, pc}
 800a976:	46c0      	nop			; (mov r8, r8)
 800a978:	20000449 	.word	0x20000449

0800a97c <__sfp_lock_release>:
 800a97c:	b510      	push	{r4, lr}
 800a97e:	4802      	ldr	r0, [pc, #8]	; (800a988 <__sfp_lock_release+0xc>)
 800a980:	f000 f8b6 	bl	800aaf0 <__retarget_lock_release_recursive>
 800a984:	bd10      	pop	{r4, pc}
 800a986:	46c0      	nop			; (mov r8, r8)
 800a988:	20000449 	.word	0x20000449

0800a98c <__sinit_lock_acquire>:
 800a98c:	b510      	push	{r4, lr}
 800a98e:	4802      	ldr	r0, [pc, #8]	; (800a998 <__sinit_lock_acquire+0xc>)
 800a990:	f000 f8ad 	bl	800aaee <__retarget_lock_acquire_recursive>
 800a994:	bd10      	pop	{r4, pc}
 800a996:	46c0      	nop			; (mov r8, r8)
 800a998:	2000044a 	.word	0x2000044a

0800a99c <__sinit_lock_release>:
 800a99c:	b510      	push	{r4, lr}
 800a99e:	4802      	ldr	r0, [pc, #8]	; (800a9a8 <__sinit_lock_release+0xc>)
 800a9a0:	f000 f8a6 	bl	800aaf0 <__retarget_lock_release_recursive>
 800a9a4:	bd10      	pop	{r4, pc}
 800a9a6:	46c0      	nop			; (mov r8, r8)
 800a9a8:	2000044a 	.word	0x2000044a

0800a9ac <__sinit>:
 800a9ac:	b513      	push	{r0, r1, r4, lr}
 800a9ae:	0004      	movs	r4, r0
 800a9b0:	f7ff ffec 	bl	800a98c <__sinit_lock_acquire>
 800a9b4:	69a3      	ldr	r3, [r4, #24]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d002      	beq.n	800a9c0 <__sinit+0x14>
 800a9ba:	f7ff ffef 	bl	800a99c <__sinit_lock_release>
 800a9be:	bd13      	pop	{r0, r1, r4, pc}
 800a9c0:	64a3      	str	r3, [r4, #72]	; 0x48
 800a9c2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a9c4:	6523      	str	r3, [r4, #80]	; 0x50
 800a9c6:	4b13      	ldr	r3, [pc, #76]	; (800aa14 <__sinit+0x68>)
 800a9c8:	4a13      	ldr	r2, [pc, #76]	; (800aa18 <__sinit+0x6c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9ce:	9301      	str	r3, [sp, #4]
 800a9d0:	42a3      	cmp	r3, r4
 800a9d2:	d101      	bne.n	800a9d8 <__sinit+0x2c>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	61a3      	str	r3, [r4, #24]
 800a9d8:	0020      	movs	r0, r4
 800a9da:	f000 f81f 	bl	800aa1c <__sfp>
 800a9de:	6060      	str	r0, [r4, #4]
 800a9e0:	0020      	movs	r0, r4
 800a9e2:	f000 f81b 	bl	800aa1c <__sfp>
 800a9e6:	60a0      	str	r0, [r4, #8]
 800a9e8:	0020      	movs	r0, r4
 800a9ea:	f000 f817 	bl	800aa1c <__sfp>
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2104      	movs	r1, #4
 800a9f2:	60e0      	str	r0, [r4, #12]
 800a9f4:	6860      	ldr	r0, [r4, #4]
 800a9f6:	f7ff ff77 	bl	800a8e8 <std>
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	2109      	movs	r1, #9
 800a9fe:	68a0      	ldr	r0, [r4, #8]
 800aa00:	f7ff ff72 	bl	800a8e8 <std>
 800aa04:	2202      	movs	r2, #2
 800aa06:	2112      	movs	r1, #18
 800aa08:	68e0      	ldr	r0, [r4, #12]
 800aa0a:	f7ff ff6d 	bl	800a8e8 <std>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	61a3      	str	r3, [r4, #24]
 800aa12:	e7d2      	b.n	800a9ba <__sinit+0xe>
 800aa14:	0800bda8 	.word	0x0800bda8
 800aa18:	0800a931 	.word	0x0800a931

0800aa1c <__sfp>:
 800aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1e:	0007      	movs	r7, r0
 800aa20:	f7ff ffa4 	bl	800a96c <__sfp_lock_acquire>
 800aa24:	4b1f      	ldr	r3, [pc, #124]	; (800aaa4 <__sfp+0x88>)
 800aa26:	681e      	ldr	r6, [r3, #0]
 800aa28:	69b3      	ldr	r3, [r6, #24]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d102      	bne.n	800aa34 <__sfp+0x18>
 800aa2e:	0030      	movs	r0, r6
 800aa30:	f7ff ffbc 	bl	800a9ac <__sinit>
 800aa34:	3648      	adds	r6, #72	; 0x48
 800aa36:	68b4      	ldr	r4, [r6, #8]
 800aa38:	6873      	ldr	r3, [r6, #4]
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	d504      	bpl.n	800aa48 <__sfp+0x2c>
 800aa3e:	6833      	ldr	r3, [r6, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d022      	beq.n	800aa8a <__sfp+0x6e>
 800aa44:	6836      	ldr	r6, [r6, #0]
 800aa46:	e7f6      	b.n	800aa36 <__sfp+0x1a>
 800aa48:	220c      	movs	r2, #12
 800aa4a:	5ea5      	ldrsh	r5, [r4, r2]
 800aa4c:	2d00      	cmp	r5, #0
 800aa4e:	d11a      	bne.n	800aa86 <__sfp+0x6a>
 800aa50:	0020      	movs	r0, r4
 800aa52:	4b15      	ldr	r3, [pc, #84]	; (800aaa8 <__sfp+0x8c>)
 800aa54:	3058      	adds	r0, #88	; 0x58
 800aa56:	60e3      	str	r3, [r4, #12]
 800aa58:	6665      	str	r5, [r4, #100]	; 0x64
 800aa5a:	f000 f847 	bl	800aaec <__retarget_lock_init_recursive>
 800aa5e:	f7ff ff8d 	bl	800a97c <__sfp_lock_release>
 800aa62:	0020      	movs	r0, r4
 800aa64:	2208      	movs	r2, #8
 800aa66:	0029      	movs	r1, r5
 800aa68:	6025      	str	r5, [r4, #0]
 800aa6a:	60a5      	str	r5, [r4, #8]
 800aa6c:	6065      	str	r5, [r4, #4]
 800aa6e:	6125      	str	r5, [r4, #16]
 800aa70:	6165      	str	r5, [r4, #20]
 800aa72:	61a5      	str	r5, [r4, #24]
 800aa74:	305c      	adds	r0, #92	; 0x5c
 800aa76:	f7fd fa17 	bl	8007ea8 <memset>
 800aa7a:	6365      	str	r5, [r4, #52]	; 0x34
 800aa7c:	63a5      	str	r5, [r4, #56]	; 0x38
 800aa7e:	64a5      	str	r5, [r4, #72]	; 0x48
 800aa80:	64e5      	str	r5, [r4, #76]	; 0x4c
 800aa82:	0020      	movs	r0, r4
 800aa84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa86:	3468      	adds	r4, #104	; 0x68
 800aa88:	e7d7      	b.n	800aa3a <__sfp+0x1e>
 800aa8a:	2104      	movs	r1, #4
 800aa8c:	0038      	movs	r0, r7
 800aa8e:	f7ff ff57 	bl	800a940 <__sfmoreglue>
 800aa92:	1e04      	subs	r4, r0, #0
 800aa94:	6030      	str	r0, [r6, #0]
 800aa96:	d1d5      	bne.n	800aa44 <__sfp+0x28>
 800aa98:	f7ff ff70 	bl	800a97c <__sfp_lock_release>
 800aa9c:	230c      	movs	r3, #12
 800aa9e:	603b      	str	r3, [r7, #0]
 800aaa0:	e7ef      	b.n	800aa82 <__sfp+0x66>
 800aaa2:	46c0      	nop			; (mov r8, r8)
 800aaa4:	0800bda8 	.word	0x0800bda8
 800aaa8:	ffff0001 	.word	0xffff0001

0800aaac <_fwalk_reent>:
 800aaac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaae:	0004      	movs	r4, r0
 800aab0:	0006      	movs	r6, r0
 800aab2:	2700      	movs	r7, #0
 800aab4:	9101      	str	r1, [sp, #4]
 800aab6:	3448      	adds	r4, #72	; 0x48
 800aab8:	6863      	ldr	r3, [r4, #4]
 800aaba:	68a5      	ldr	r5, [r4, #8]
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	9b00      	ldr	r3, [sp, #0]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	d504      	bpl.n	800aad0 <_fwalk_reent+0x24>
 800aac6:	6824      	ldr	r4, [r4, #0]
 800aac8:	2c00      	cmp	r4, #0
 800aaca:	d1f5      	bne.n	800aab8 <_fwalk_reent+0xc>
 800aacc:	0038      	movs	r0, r7
 800aace:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aad0:	89ab      	ldrh	r3, [r5, #12]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d908      	bls.n	800aae8 <_fwalk_reent+0x3c>
 800aad6:	220e      	movs	r2, #14
 800aad8:	5eab      	ldrsh	r3, [r5, r2]
 800aada:	3301      	adds	r3, #1
 800aadc:	d004      	beq.n	800aae8 <_fwalk_reent+0x3c>
 800aade:	0029      	movs	r1, r5
 800aae0:	0030      	movs	r0, r6
 800aae2:	9b01      	ldr	r3, [sp, #4]
 800aae4:	4798      	blx	r3
 800aae6:	4307      	orrs	r7, r0
 800aae8:	3568      	adds	r5, #104	; 0x68
 800aaea:	e7e8      	b.n	800aabe <_fwalk_reent+0x12>

0800aaec <__retarget_lock_init_recursive>:
 800aaec:	4770      	bx	lr

0800aaee <__retarget_lock_acquire_recursive>:
 800aaee:	4770      	bx	lr

0800aaf0 <__retarget_lock_release_recursive>:
 800aaf0:	4770      	bx	lr
	...

0800aaf4 <__swhatbuf_r>:
 800aaf4:	b570      	push	{r4, r5, r6, lr}
 800aaf6:	000e      	movs	r6, r1
 800aaf8:	001d      	movs	r5, r3
 800aafa:	230e      	movs	r3, #14
 800aafc:	5ec9      	ldrsh	r1, [r1, r3]
 800aafe:	0014      	movs	r4, r2
 800ab00:	b096      	sub	sp, #88	; 0x58
 800ab02:	2900      	cmp	r1, #0
 800ab04:	da08      	bge.n	800ab18 <__swhatbuf_r+0x24>
 800ab06:	220c      	movs	r2, #12
 800ab08:	5eb3      	ldrsh	r3, [r6, r2]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	602a      	str	r2, [r5, #0]
 800ab0e:	061b      	lsls	r3, r3, #24
 800ab10:	d411      	bmi.n	800ab36 <__swhatbuf_r+0x42>
 800ab12:	2380      	movs	r3, #128	; 0x80
 800ab14:	00db      	lsls	r3, r3, #3
 800ab16:	e00f      	b.n	800ab38 <__swhatbuf_r+0x44>
 800ab18:	466a      	mov	r2, sp
 800ab1a:	f000 f91b 	bl	800ad54 <_fstat_r>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	dbf1      	blt.n	800ab06 <__swhatbuf_r+0x12>
 800ab22:	23f0      	movs	r3, #240	; 0xf0
 800ab24:	9901      	ldr	r1, [sp, #4]
 800ab26:	021b      	lsls	r3, r3, #8
 800ab28:	4019      	ands	r1, r3
 800ab2a:	4b05      	ldr	r3, [pc, #20]	; (800ab40 <__swhatbuf_r+0x4c>)
 800ab2c:	18c9      	adds	r1, r1, r3
 800ab2e:	424b      	negs	r3, r1
 800ab30:	4159      	adcs	r1, r3
 800ab32:	6029      	str	r1, [r5, #0]
 800ab34:	e7ed      	b.n	800ab12 <__swhatbuf_r+0x1e>
 800ab36:	2340      	movs	r3, #64	; 0x40
 800ab38:	2000      	movs	r0, #0
 800ab3a:	6023      	str	r3, [r4, #0]
 800ab3c:	b016      	add	sp, #88	; 0x58
 800ab3e:	bd70      	pop	{r4, r5, r6, pc}
 800ab40:	ffffe000 	.word	0xffffe000

0800ab44 <__smakebuf_r>:
 800ab44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab46:	2602      	movs	r6, #2
 800ab48:	898b      	ldrh	r3, [r1, #12]
 800ab4a:	0005      	movs	r5, r0
 800ab4c:	000c      	movs	r4, r1
 800ab4e:	4233      	tst	r3, r6
 800ab50:	d006      	beq.n	800ab60 <__smakebuf_r+0x1c>
 800ab52:	0023      	movs	r3, r4
 800ab54:	3347      	adds	r3, #71	; 0x47
 800ab56:	6023      	str	r3, [r4, #0]
 800ab58:	6123      	str	r3, [r4, #16]
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	6163      	str	r3, [r4, #20]
 800ab5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ab60:	466a      	mov	r2, sp
 800ab62:	ab01      	add	r3, sp, #4
 800ab64:	f7ff ffc6 	bl	800aaf4 <__swhatbuf_r>
 800ab68:	9900      	ldr	r1, [sp, #0]
 800ab6a:	0007      	movs	r7, r0
 800ab6c:	0028      	movs	r0, r5
 800ab6e:	f7ff f92d 	bl	8009dcc <_malloc_r>
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d108      	bne.n	800ab88 <__smakebuf_r+0x44>
 800ab76:	220c      	movs	r2, #12
 800ab78:	5ea3      	ldrsh	r3, [r4, r2]
 800ab7a:	059a      	lsls	r2, r3, #22
 800ab7c:	d4ef      	bmi.n	800ab5e <__smakebuf_r+0x1a>
 800ab7e:	2203      	movs	r2, #3
 800ab80:	4393      	bics	r3, r2
 800ab82:	431e      	orrs	r6, r3
 800ab84:	81a6      	strh	r6, [r4, #12]
 800ab86:	e7e4      	b.n	800ab52 <__smakebuf_r+0xe>
 800ab88:	4b0f      	ldr	r3, [pc, #60]	; (800abc8 <__smakebuf_r+0x84>)
 800ab8a:	62ab      	str	r3, [r5, #40]	; 0x28
 800ab8c:	2380      	movs	r3, #128	; 0x80
 800ab8e:	89a2      	ldrh	r2, [r4, #12]
 800ab90:	6020      	str	r0, [r4, #0]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	81a3      	strh	r3, [r4, #12]
 800ab96:	9b00      	ldr	r3, [sp, #0]
 800ab98:	6120      	str	r0, [r4, #16]
 800ab9a:	6163      	str	r3, [r4, #20]
 800ab9c:	9b01      	ldr	r3, [sp, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00d      	beq.n	800abbe <__smakebuf_r+0x7a>
 800aba2:	0028      	movs	r0, r5
 800aba4:	230e      	movs	r3, #14
 800aba6:	5ee1      	ldrsh	r1, [r4, r3]
 800aba8:	f000 f8e6 	bl	800ad78 <_isatty_r>
 800abac:	2800      	cmp	r0, #0
 800abae:	d006      	beq.n	800abbe <__smakebuf_r+0x7a>
 800abb0:	2203      	movs	r2, #3
 800abb2:	89a3      	ldrh	r3, [r4, #12]
 800abb4:	4393      	bics	r3, r2
 800abb6:	001a      	movs	r2, r3
 800abb8:	2301      	movs	r3, #1
 800abba:	4313      	orrs	r3, r2
 800abbc:	81a3      	strh	r3, [r4, #12]
 800abbe:	89a0      	ldrh	r0, [r4, #12]
 800abc0:	4307      	orrs	r7, r0
 800abc2:	81a7      	strh	r7, [r4, #12]
 800abc4:	e7cb      	b.n	800ab5e <__smakebuf_r+0x1a>
 800abc6:	46c0      	nop			; (mov r8, r8)
 800abc8:	0800a931 	.word	0x0800a931

0800abcc <_malloc_usable_size_r>:
 800abcc:	1f0b      	subs	r3, r1, #4
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	1f18      	subs	r0, r3, #4
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	da01      	bge.n	800abda <_malloc_usable_size_r+0xe>
 800abd6:	580b      	ldr	r3, [r1, r0]
 800abd8:	18c0      	adds	r0, r0, r3
 800abda:	4770      	bx	lr

0800abdc <_raise_r>:
 800abdc:	b570      	push	{r4, r5, r6, lr}
 800abde:	0004      	movs	r4, r0
 800abe0:	000d      	movs	r5, r1
 800abe2:	291f      	cmp	r1, #31
 800abe4:	d904      	bls.n	800abf0 <_raise_r+0x14>
 800abe6:	2316      	movs	r3, #22
 800abe8:	6003      	str	r3, [r0, #0]
 800abea:	2001      	movs	r0, #1
 800abec:	4240      	negs	r0, r0
 800abee:	bd70      	pop	{r4, r5, r6, pc}
 800abf0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d004      	beq.n	800ac00 <_raise_r+0x24>
 800abf6:	008a      	lsls	r2, r1, #2
 800abf8:	189b      	adds	r3, r3, r2
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	2a00      	cmp	r2, #0
 800abfe:	d108      	bne.n	800ac12 <_raise_r+0x36>
 800ac00:	0020      	movs	r0, r4
 800ac02:	f000 f831 	bl	800ac68 <_getpid_r>
 800ac06:	002a      	movs	r2, r5
 800ac08:	0001      	movs	r1, r0
 800ac0a:	0020      	movs	r0, r4
 800ac0c:	f000 f81a 	bl	800ac44 <_kill_r>
 800ac10:	e7ed      	b.n	800abee <_raise_r+0x12>
 800ac12:	2000      	movs	r0, #0
 800ac14:	2a01      	cmp	r2, #1
 800ac16:	d0ea      	beq.n	800abee <_raise_r+0x12>
 800ac18:	1c51      	adds	r1, r2, #1
 800ac1a:	d103      	bne.n	800ac24 <_raise_r+0x48>
 800ac1c:	2316      	movs	r3, #22
 800ac1e:	3001      	adds	r0, #1
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	e7e4      	b.n	800abee <_raise_r+0x12>
 800ac24:	2400      	movs	r4, #0
 800ac26:	0028      	movs	r0, r5
 800ac28:	601c      	str	r4, [r3, #0]
 800ac2a:	4790      	blx	r2
 800ac2c:	0020      	movs	r0, r4
 800ac2e:	e7de      	b.n	800abee <_raise_r+0x12>

0800ac30 <raise>:
 800ac30:	b510      	push	{r4, lr}
 800ac32:	4b03      	ldr	r3, [pc, #12]	; (800ac40 <raise+0x10>)
 800ac34:	0001      	movs	r1, r0
 800ac36:	6818      	ldr	r0, [r3, #0]
 800ac38:	f7ff ffd0 	bl	800abdc <_raise_r>
 800ac3c:	bd10      	pop	{r4, pc}
 800ac3e:	46c0      	nop			; (mov r8, r8)
 800ac40:	2000000c 	.word	0x2000000c

0800ac44 <_kill_r>:
 800ac44:	2300      	movs	r3, #0
 800ac46:	b570      	push	{r4, r5, r6, lr}
 800ac48:	4d06      	ldr	r5, [pc, #24]	; (800ac64 <_kill_r+0x20>)
 800ac4a:	0004      	movs	r4, r0
 800ac4c:	0008      	movs	r0, r1
 800ac4e:	0011      	movs	r1, r2
 800ac50:	602b      	str	r3, [r5, #0]
 800ac52:	f7f9 fc3e 	bl	80044d2 <_kill>
 800ac56:	1c43      	adds	r3, r0, #1
 800ac58:	d103      	bne.n	800ac62 <_kill_r+0x1e>
 800ac5a:	682b      	ldr	r3, [r5, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d000      	beq.n	800ac62 <_kill_r+0x1e>
 800ac60:	6023      	str	r3, [r4, #0]
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	20000444 	.word	0x20000444

0800ac68 <_getpid_r>:
 800ac68:	b510      	push	{r4, lr}
 800ac6a:	f7f9 fc2c 	bl	80044c6 <_getpid>
 800ac6e:	bd10      	pop	{r4, pc}

0800ac70 <__sread>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	000c      	movs	r4, r1
 800ac74:	250e      	movs	r5, #14
 800ac76:	5f49      	ldrsh	r1, [r1, r5]
 800ac78:	f000 f8a4 	bl	800adc4 <_read_r>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	db03      	blt.n	800ac88 <__sread+0x18>
 800ac80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ac82:	181b      	adds	r3, r3, r0
 800ac84:	6563      	str	r3, [r4, #84]	; 0x54
 800ac86:	bd70      	pop	{r4, r5, r6, pc}
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	4a02      	ldr	r2, [pc, #8]	; (800ac94 <__sread+0x24>)
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	81a3      	strh	r3, [r4, #12]
 800ac90:	e7f9      	b.n	800ac86 <__sread+0x16>
 800ac92:	46c0      	nop			; (mov r8, r8)
 800ac94:	ffffefff 	.word	0xffffefff

0800ac98 <__swrite>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	001f      	movs	r7, r3
 800ac9c:	898b      	ldrh	r3, [r1, #12]
 800ac9e:	0005      	movs	r5, r0
 800aca0:	000c      	movs	r4, r1
 800aca2:	0016      	movs	r6, r2
 800aca4:	05db      	lsls	r3, r3, #23
 800aca6:	d505      	bpl.n	800acb4 <__swrite+0x1c>
 800aca8:	230e      	movs	r3, #14
 800acaa:	5ec9      	ldrsh	r1, [r1, r3]
 800acac:	2200      	movs	r2, #0
 800acae:	2302      	movs	r3, #2
 800acb0:	f000 f874 	bl	800ad9c <_lseek_r>
 800acb4:	89a3      	ldrh	r3, [r4, #12]
 800acb6:	4a05      	ldr	r2, [pc, #20]	; (800accc <__swrite+0x34>)
 800acb8:	0028      	movs	r0, r5
 800acba:	4013      	ands	r3, r2
 800acbc:	81a3      	strh	r3, [r4, #12]
 800acbe:	0032      	movs	r2, r6
 800acc0:	230e      	movs	r3, #14
 800acc2:	5ee1      	ldrsh	r1, [r4, r3]
 800acc4:	003b      	movs	r3, r7
 800acc6:	f000 f81f 	bl	800ad08 <_write_r>
 800acca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800accc:	ffffefff 	.word	0xffffefff

0800acd0 <__sseek>:
 800acd0:	b570      	push	{r4, r5, r6, lr}
 800acd2:	000c      	movs	r4, r1
 800acd4:	250e      	movs	r5, #14
 800acd6:	5f49      	ldrsh	r1, [r1, r5]
 800acd8:	f000 f860 	bl	800ad9c <_lseek_r>
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	1c42      	adds	r2, r0, #1
 800ace0:	d103      	bne.n	800acea <__sseek+0x1a>
 800ace2:	4a05      	ldr	r2, [pc, #20]	; (800acf8 <__sseek+0x28>)
 800ace4:	4013      	ands	r3, r2
 800ace6:	81a3      	strh	r3, [r4, #12]
 800ace8:	bd70      	pop	{r4, r5, r6, pc}
 800acea:	2280      	movs	r2, #128	; 0x80
 800acec:	0152      	lsls	r2, r2, #5
 800acee:	4313      	orrs	r3, r2
 800acf0:	81a3      	strh	r3, [r4, #12]
 800acf2:	6560      	str	r0, [r4, #84]	; 0x54
 800acf4:	e7f8      	b.n	800ace8 <__sseek+0x18>
 800acf6:	46c0      	nop			; (mov r8, r8)
 800acf8:	ffffefff 	.word	0xffffefff

0800acfc <__sclose>:
 800acfc:	b510      	push	{r4, lr}
 800acfe:	230e      	movs	r3, #14
 800ad00:	5ec9      	ldrsh	r1, [r1, r3]
 800ad02:	f000 f815 	bl	800ad30 <_close_r>
 800ad06:	bd10      	pop	{r4, pc}

0800ad08 <_write_r>:
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	0004      	movs	r4, r0
 800ad0c:	0008      	movs	r0, r1
 800ad0e:	0011      	movs	r1, r2
 800ad10:	001a      	movs	r2, r3
 800ad12:	2300      	movs	r3, #0
 800ad14:	4d05      	ldr	r5, [pc, #20]	; (800ad2c <_write_r+0x24>)
 800ad16:	602b      	str	r3, [r5, #0]
 800ad18:	f7f9 fc14 	bl	8004544 <_write>
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	d103      	bne.n	800ad28 <_write_r+0x20>
 800ad20:	682b      	ldr	r3, [r5, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d000      	beq.n	800ad28 <_write_r+0x20>
 800ad26:	6023      	str	r3, [r4, #0]
 800ad28:	bd70      	pop	{r4, r5, r6, pc}
 800ad2a:	46c0      	nop			; (mov r8, r8)
 800ad2c:	20000444 	.word	0x20000444

0800ad30 <_close_r>:
 800ad30:	2300      	movs	r3, #0
 800ad32:	b570      	push	{r4, r5, r6, lr}
 800ad34:	4d06      	ldr	r5, [pc, #24]	; (800ad50 <_close_r+0x20>)
 800ad36:	0004      	movs	r4, r0
 800ad38:	0008      	movs	r0, r1
 800ad3a:	602b      	str	r3, [r5, #0]
 800ad3c:	f7f9 fc1e 	bl	800457c <_close>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	d103      	bne.n	800ad4c <_close_r+0x1c>
 800ad44:	682b      	ldr	r3, [r5, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d000      	beq.n	800ad4c <_close_r+0x1c>
 800ad4a:	6023      	str	r3, [r4, #0]
 800ad4c:	bd70      	pop	{r4, r5, r6, pc}
 800ad4e:	46c0      	nop			; (mov r8, r8)
 800ad50:	20000444 	.word	0x20000444

0800ad54 <_fstat_r>:
 800ad54:	2300      	movs	r3, #0
 800ad56:	b570      	push	{r4, r5, r6, lr}
 800ad58:	4d06      	ldr	r5, [pc, #24]	; (800ad74 <_fstat_r+0x20>)
 800ad5a:	0004      	movs	r4, r0
 800ad5c:	0008      	movs	r0, r1
 800ad5e:	0011      	movs	r1, r2
 800ad60:	602b      	str	r3, [r5, #0]
 800ad62:	f7f9 fc15 	bl	8004590 <_fstat>
 800ad66:	1c43      	adds	r3, r0, #1
 800ad68:	d103      	bne.n	800ad72 <_fstat_r+0x1e>
 800ad6a:	682b      	ldr	r3, [r5, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d000      	beq.n	800ad72 <_fstat_r+0x1e>
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	bd70      	pop	{r4, r5, r6, pc}
 800ad74:	20000444 	.word	0x20000444

0800ad78 <_isatty_r>:
 800ad78:	2300      	movs	r3, #0
 800ad7a:	b570      	push	{r4, r5, r6, lr}
 800ad7c:	4d06      	ldr	r5, [pc, #24]	; (800ad98 <_isatty_r+0x20>)
 800ad7e:	0004      	movs	r4, r0
 800ad80:	0008      	movs	r0, r1
 800ad82:	602b      	str	r3, [r5, #0]
 800ad84:	f7f9 fc12 	bl	80045ac <_isatty>
 800ad88:	1c43      	adds	r3, r0, #1
 800ad8a:	d103      	bne.n	800ad94 <_isatty_r+0x1c>
 800ad8c:	682b      	ldr	r3, [r5, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d000      	beq.n	800ad94 <_isatty_r+0x1c>
 800ad92:	6023      	str	r3, [r4, #0]
 800ad94:	bd70      	pop	{r4, r5, r6, pc}
 800ad96:	46c0      	nop			; (mov r8, r8)
 800ad98:	20000444 	.word	0x20000444

0800ad9c <_lseek_r>:
 800ad9c:	b570      	push	{r4, r5, r6, lr}
 800ad9e:	0004      	movs	r4, r0
 800ada0:	0008      	movs	r0, r1
 800ada2:	0011      	movs	r1, r2
 800ada4:	001a      	movs	r2, r3
 800ada6:	2300      	movs	r3, #0
 800ada8:	4d05      	ldr	r5, [pc, #20]	; (800adc0 <_lseek_r+0x24>)
 800adaa:	602b      	str	r3, [r5, #0]
 800adac:	f7f9 fc07 	bl	80045be <_lseek>
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	d103      	bne.n	800adbc <_lseek_r+0x20>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d000      	beq.n	800adbc <_lseek_r+0x20>
 800adba:	6023      	str	r3, [r4, #0]
 800adbc:	bd70      	pop	{r4, r5, r6, pc}
 800adbe:	46c0      	nop			; (mov r8, r8)
 800adc0:	20000444 	.word	0x20000444

0800adc4 <_read_r>:
 800adc4:	b570      	push	{r4, r5, r6, lr}
 800adc6:	0004      	movs	r4, r0
 800adc8:	0008      	movs	r0, r1
 800adca:	0011      	movs	r1, r2
 800adcc:	001a      	movs	r2, r3
 800adce:	2300      	movs	r3, #0
 800add0:	4d05      	ldr	r5, [pc, #20]	; (800ade8 <_read_r+0x24>)
 800add2:	602b      	str	r3, [r5, #0]
 800add4:	f7f9 fb99 	bl	800450a <_read>
 800add8:	1c43      	adds	r3, r0, #1
 800adda:	d103      	bne.n	800ade4 <_read_r+0x20>
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d000      	beq.n	800ade4 <_read_r+0x20>
 800ade2:	6023      	str	r3, [r4, #0]
 800ade4:	bd70      	pop	{r4, r5, r6, pc}
 800ade6:	46c0      	nop			; (mov r8, r8)
 800ade8:	20000444 	.word	0x20000444

0800adec <pow>:
 800adec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adee:	0014      	movs	r4, r2
 800adf0:	001d      	movs	r5, r3
 800adf2:	9000      	str	r0, [sp, #0]
 800adf4:	9101      	str	r1, [sp, #4]
 800adf6:	f000 f867 	bl	800aec8 <__ieee754_pow>
 800adfa:	0022      	movs	r2, r4
 800adfc:	0006      	movs	r6, r0
 800adfe:	000f      	movs	r7, r1
 800ae00:	002b      	movs	r3, r5
 800ae02:	0020      	movs	r0, r4
 800ae04:	0029      	movs	r1, r5
 800ae06:	f7f7 fe2f 	bl	8002a68 <__aeabi_dcmpun>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d13f      	bne.n	800ae8e <pow+0xa2>
 800ae0e:	9800      	ldr	r0, [sp, #0]
 800ae10:	9901      	ldr	r1, [sp, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	2300      	movs	r3, #0
 800ae16:	f7f5 fb19 	bl	800044c <__aeabi_dcmpeq>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d019      	beq.n	800ae52 <pow+0x66>
 800ae1e:	2200      	movs	r2, #0
 800ae20:	2300      	movs	r3, #0
 800ae22:	0020      	movs	r0, r4
 800ae24:	0029      	movs	r1, r5
 800ae26:	f7f5 fb11 	bl	800044c <__aeabi_dcmpeq>
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	d146      	bne.n	800aebc <pow+0xd0>
 800ae2e:	0020      	movs	r0, r4
 800ae30:	0029      	movs	r1, r5
 800ae32:	f000 fe3d 	bl	800bab0 <finite>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d029      	beq.n	800ae8e <pow+0xa2>
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	0020      	movs	r0, r4
 800ae40:	0029      	movs	r1, r5
 800ae42:	f7f5 fb09 	bl	8000458 <__aeabi_dcmplt>
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d021      	beq.n	800ae8e <pow+0xa2>
 800ae4a:	f7fd f803 	bl	8007e54 <__errno>
 800ae4e:	2322      	movs	r3, #34	; 0x22
 800ae50:	e01c      	b.n	800ae8c <pow+0xa0>
 800ae52:	0030      	movs	r0, r6
 800ae54:	0039      	movs	r1, r7
 800ae56:	f000 fe2b 	bl	800bab0 <finite>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d11b      	bne.n	800ae96 <pow+0xaa>
 800ae5e:	9800      	ldr	r0, [sp, #0]
 800ae60:	9901      	ldr	r1, [sp, #4]
 800ae62:	f000 fe25 	bl	800bab0 <finite>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d015      	beq.n	800ae96 <pow+0xaa>
 800ae6a:	0020      	movs	r0, r4
 800ae6c:	0029      	movs	r1, r5
 800ae6e:	f000 fe1f 	bl	800bab0 <finite>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d00f      	beq.n	800ae96 <pow+0xaa>
 800ae76:	0032      	movs	r2, r6
 800ae78:	003b      	movs	r3, r7
 800ae7a:	0030      	movs	r0, r6
 800ae7c:	0039      	movs	r1, r7
 800ae7e:	f7f7 fdf3 	bl	8002a68 <__aeabi_dcmpun>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d0e1      	beq.n	800ae4a <pow+0x5e>
 800ae86:	f7fc ffe5 	bl	8007e54 <__errno>
 800ae8a:	2321      	movs	r3, #33	; 0x21
 800ae8c:	6003      	str	r3, [r0, #0]
 800ae8e:	0030      	movs	r0, r6
 800ae90:	0039      	movs	r1, r7
 800ae92:	b003      	add	sp, #12
 800ae94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae96:	2200      	movs	r2, #0
 800ae98:	2300      	movs	r3, #0
 800ae9a:	0030      	movs	r0, r6
 800ae9c:	0039      	movs	r1, r7
 800ae9e:	f7f5 fad5 	bl	800044c <__aeabi_dcmpeq>
 800aea2:	2800      	cmp	r0, #0
 800aea4:	d0f3      	beq.n	800ae8e <pow+0xa2>
 800aea6:	9800      	ldr	r0, [sp, #0]
 800aea8:	9901      	ldr	r1, [sp, #4]
 800aeaa:	f000 fe01 	bl	800bab0 <finite>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	d0ed      	beq.n	800ae8e <pow+0xa2>
 800aeb2:	0020      	movs	r0, r4
 800aeb4:	0029      	movs	r1, r5
 800aeb6:	f000 fdfb 	bl	800bab0 <finite>
 800aeba:	e7c4      	b.n	800ae46 <pow+0x5a>
 800aebc:	2600      	movs	r6, #0
 800aebe:	4f01      	ldr	r7, [pc, #4]	; (800aec4 <pow+0xd8>)
 800aec0:	e7e5      	b.n	800ae8e <pow+0xa2>
 800aec2:	46c0      	nop			; (mov r8, r8)
 800aec4:	3ff00000 	.word	0x3ff00000

0800aec8 <__ieee754_pow>:
 800aec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeca:	b095      	sub	sp, #84	; 0x54
 800aecc:	9202      	str	r2, [sp, #8]
 800aece:	9303      	str	r3, [sp, #12]
 800aed0:	9b03      	ldr	r3, [sp, #12]
 800aed2:	9a03      	ldr	r2, [sp, #12]
 800aed4:	9304      	str	r3, [sp, #16]
 800aed6:	9b02      	ldr	r3, [sp, #8]
 800aed8:	0056      	lsls	r6, r2, #1
 800aeda:	001a      	movs	r2, r3
 800aedc:	0876      	lsrs	r6, r6, #1
 800aede:	0007      	movs	r7, r0
 800aee0:	000d      	movs	r5, r1
 800aee2:	4332      	orrs	r2, r6
 800aee4:	d119      	bne.n	800af1a <__ieee754_pow+0x52>
 800aee6:	2180      	movs	r1, #128	; 0x80
 800aee8:	0309      	lsls	r1, r1, #12
 800aeea:	4069      	eors	r1, r5
 800aeec:	0002      	movs	r2, r0
 800aeee:	000b      	movs	r3, r1
 800aef0:	1892      	adds	r2, r2, r2
 800aef2:	415b      	adcs	r3, r3
 800aef4:	4989      	ldr	r1, [pc, #548]	; (800b11c <__ieee754_pow+0x254>)
 800aef6:	428b      	cmp	r3, r1
 800aef8:	d806      	bhi.n	800af08 <__ieee754_pow+0x40>
 800aefa:	d001      	beq.n	800af00 <__ieee754_pow+0x38>
 800aefc:	f000 fcb6 	bl	800b86c <__ieee754_pow+0x9a4>
 800af00:	2a00      	cmp	r2, #0
 800af02:	d101      	bne.n	800af08 <__ieee754_pow+0x40>
 800af04:	f000 fcb2 	bl	800b86c <__ieee754_pow+0x9a4>
 800af08:	9a02      	ldr	r2, [sp, #8]
 800af0a:	9b03      	ldr	r3, [sp, #12]
 800af0c:	0038      	movs	r0, r7
 800af0e:	0029      	movs	r1, r5
 800af10:	f7f6 f86e 	bl	8000ff0 <__aeabi_dadd>
 800af14:	9000      	str	r0, [sp, #0]
 800af16:	9101      	str	r1, [sp, #4]
 800af18:	e0ad      	b.n	800b076 <__ieee754_pow+0x1ae>
 800af1a:	4a81      	ldr	r2, [pc, #516]	; (800b120 <__ieee754_pow+0x258>)
 800af1c:	004c      	lsls	r4, r1, #1
 800af1e:	9108      	str	r1, [sp, #32]
 800af20:	9000      	str	r0, [sp, #0]
 800af22:	0864      	lsrs	r4, r4, #1
 800af24:	4294      	cmp	r4, r2
 800af26:	dc08      	bgt.n	800af3a <__ieee754_pow+0x72>
 800af28:	d101      	bne.n	800af2e <__ieee754_pow+0x66>
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d1ec      	bne.n	800af08 <__ieee754_pow+0x40>
 800af2e:	4a7c      	ldr	r2, [pc, #496]	; (800b120 <__ieee754_pow+0x258>)
 800af30:	4296      	cmp	r6, r2
 800af32:	dc02      	bgt.n	800af3a <__ieee754_pow+0x72>
 800af34:	d10c      	bne.n	800af50 <__ieee754_pow+0x88>
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00a      	beq.n	800af50 <__ieee754_pow+0x88>
 800af3a:	4b7a      	ldr	r3, [pc, #488]	; (800b124 <__ieee754_pow+0x25c>)
 800af3c:	18eb      	adds	r3, r5, r3
 800af3e:	433b      	orrs	r3, r7
 800af40:	d1e2      	bne.n	800af08 <__ieee754_pow+0x40>
 800af42:	2180      	movs	r1, #128	; 0x80
 800af44:	9803      	ldr	r0, [sp, #12]
 800af46:	0309      	lsls	r1, r1, #12
 800af48:	4048      	eors	r0, r1
 800af4a:	0003      	movs	r3, r0
 800af4c:	9a02      	ldr	r2, [sp, #8]
 800af4e:	e7cf      	b.n	800aef0 <__ieee754_pow+0x28>
 800af50:	2200      	movs	r2, #0
 800af52:	9206      	str	r2, [sp, #24]
 800af54:	2d00      	cmp	r5, #0
 800af56:	da69      	bge.n	800b02c <__ieee754_pow+0x164>
 800af58:	4a73      	ldr	r2, [pc, #460]	; (800b128 <__ieee754_pow+0x260>)
 800af5a:	4296      	cmp	r6, r2
 800af5c:	dc64      	bgt.n	800b028 <__ieee754_pow+0x160>
 800af5e:	4a73      	ldr	r2, [pc, #460]	; (800b12c <__ieee754_pow+0x264>)
 800af60:	4296      	cmp	r6, r2
 800af62:	dd11      	ble.n	800af88 <__ieee754_pow+0xc0>
 800af64:	4972      	ldr	r1, [pc, #456]	; (800b130 <__ieee754_pow+0x268>)
 800af66:	1532      	asrs	r2, r6, #20
 800af68:	1852      	adds	r2, r2, r1
 800af6a:	2a14      	cmp	r2, #20
 800af6c:	dd3c      	ble.n	800afe8 <__ieee754_pow+0x120>
 800af6e:	2134      	movs	r1, #52	; 0x34
 800af70:	1a8a      	subs	r2, r1, r2
 800af72:	9902      	ldr	r1, [sp, #8]
 800af74:	40d1      	lsrs	r1, r2
 800af76:	0008      	movs	r0, r1
 800af78:	4090      	lsls	r0, r2
 800af7a:	4298      	cmp	r0, r3
 800af7c:	d104      	bne.n	800af88 <__ieee754_pow+0xc0>
 800af7e:	2201      	movs	r2, #1
 800af80:	4011      	ands	r1, r2
 800af82:	1892      	adds	r2, r2, r2
 800af84:	1a52      	subs	r2, r2, r1
 800af86:	9206      	str	r2, [sp, #24]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d03c      	beq.n	800b006 <__ieee754_pow+0x13e>
 800af8c:	0038      	movs	r0, r7
 800af8e:	0029      	movs	r1, r5
 800af90:	f000 fd8b 	bl	800baaa <fabs>
 800af94:	9000      	str	r0, [sp, #0]
 800af96:	9101      	str	r1, [sp, #4]
 800af98:	2f00      	cmp	r7, #0
 800af9a:	d000      	beq.n	800af9e <__ieee754_pow+0xd6>
 800af9c:	e094      	b.n	800b0c8 <__ieee754_pow+0x200>
 800af9e:	2c00      	cmp	r4, #0
 800afa0:	d005      	beq.n	800afae <__ieee754_pow+0xe6>
 800afa2:	4a64      	ldr	r2, [pc, #400]	; (800b134 <__ieee754_pow+0x26c>)
 800afa4:	00ab      	lsls	r3, r5, #2
 800afa6:	089b      	lsrs	r3, r3, #2
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d000      	beq.n	800afae <__ieee754_pow+0xe6>
 800afac:	e08c      	b.n	800b0c8 <__ieee754_pow+0x200>
 800afae:	9b04      	ldr	r3, [sp, #16]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	da07      	bge.n	800afc4 <__ieee754_pow+0xfc>
 800afb4:	9a00      	ldr	r2, [sp, #0]
 800afb6:	9b01      	ldr	r3, [sp, #4]
 800afb8:	2000      	movs	r0, #0
 800afba:	495e      	ldr	r1, [pc, #376]	; (800b134 <__ieee754_pow+0x26c>)
 800afbc:	f7f6 fb54 	bl	8001668 <__aeabi_ddiv>
 800afc0:	9000      	str	r0, [sp, #0]
 800afc2:	9101      	str	r1, [sp, #4]
 800afc4:	9b08      	ldr	r3, [sp, #32]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	da55      	bge.n	800b076 <__ieee754_pow+0x1ae>
 800afca:	4b56      	ldr	r3, [pc, #344]	; (800b124 <__ieee754_pow+0x25c>)
 800afcc:	18e4      	adds	r4, r4, r3
 800afce:	9b06      	ldr	r3, [sp, #24]
 800afd0:	431c      	orrs	r4, r3
 800afd2:	d000      	beq.n	800afd6 <__ieee754_pow+0x10e>
 800afd4:	e06c      	b.n	800b0b0 <__ieee754_pow+0x1e8>
 800afd6:	9a00      	ldr	r2, [sp, #0]
 800afd8:	9b01      	ldr	r3, [sp, #4]
 800afda:	0010      	movs	r0, r2
 800afdc:	0019      	movs	r1, r3
 800afde:	f7f7 f9b1 	bl	8002344 <__aeabi_dsub>
 800afe2:	0002      	movs	r2, r0
 800afe4:	000b      	movs	r3, r1
 800afe6:	e01c      	b.n	800b022 <__ieee754_pow+0x15a>
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d1cf      	bne.n	800af8c <__ieee754_pow+0xc4>
 800afec:	3314      	adds	r3, #20
 800afee:	1a9a      	subs	r2, r3, r2
 800aff0:	0033      	movs	r3, r6
 800aff2:	4113      	asrs	r3, r2
 800aff4:	0019      	movs	r1, r3
 800aff6:	4091      	lsls	r1, r2
 800aff8:	42b1      	cmp	r1, r6
 800affa:	d104      	bne.n	800b006 <__ieee754_pow+0x13e>
 800affc:	2201      	movs	r2, #1
 800affe:	4013      	ands	r3, r2
 800b000:	1892      	adds	r2, r2, r2
 800b002:	1ad3      	subs	r3, r2, r3
 800b004:	9306      	str	r3, [sp, #24]
 800b006:	4b4b      	ldr	r3, [pc, #300]	; (800b134 <__ieee754_pow+0x26c>)
 800b008:	429e      	cmp	r6, r3
 800b00a:	d138      	bne.n	800b07e <__ieee754_pow+0x1b6>
 800b00c:	0038      	movs	r0, r7
 800b00e:	0029      	movs	r1, r5
 800b010:	9b04      	ldr	r3, [sp, #16]
 800b012:	9000      	str	r0, [sp, #0]
 800b014:	9101      	str	r1, [sp, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	da2d      	bge.n	800b076 <__ieee754_pow+0x1ae>
 800b01a:	003a      	movs	r2, r7
 800b01c:	002b      	movs	r3, r5
 800b01e:	2000      	movs	r0, #0
 800b020:	4944      	ldr	r1, [pc, #272]	; (800b134 <__ieee754_pow+0x26c>)
 800b022:	f7f6 fb21 	bl	8001668 <__aeabi_ddiv>
 800b026:	e775      	b.n	800af14 <__ieee754_pow+0x4c>
 800b028:	2202      	movs	r2, #2
 800b02a:	9206      	str	r2, [sp, #24]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1ad      	bne.n	800af8c <__ieee754_pow+0xc4>
 800b030:	4b3b      	ldr	r3, [pc, #236]	; (800b120 <__ieee754_pow+0x258>)
 800b032:	429e      	cmp	r6, r3
 800b034:	d1e7      	bne.n	800b006 <__ieee754_pow+0x13e>
 800b036:	4b3b      	ldr	r3, [pc, #236]	; (800b124 <__ieee754_pow+0x25c>)
 800b038:	18e3      	adds	r3, r4, r3
 800b03a:	431f      	orrs	r7, r3
 800b03c:	d101      	bne.n	800b042 <__ieee754_pow+0x17a>
 800b03e:	f000 fc15 	bl	800b86c <__ieee754_pow+0x9a4>
 800b042:	4b3a      	ldr	r3, [pc, #232]	; (800b12c <__ieee754_pow+0x264>)
 800b044:	429c      	cmp	r4, r3
 800b046:	dd09      	ble.n	800b05c <__ieee754_pow+0x194>
 800b048:	9b04      	ldr	r3, [sp, #16]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	da01      	bge.n	800b052 <__ieee754_pow+0x18a>
 800b04e:	f000 fc11 	bl	800b874 <__ieee754_pow+0x9ac>
 800b052:	9b02      	ldr	r3, [sp, #8]
 800b054:	9c03      	ldr	r4, [sp, #12]
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	9401      	str	r4, [sp, #4]
 800b05a:	e00c      	b.n	800b076 <__ieee754_pow+0x1ae>
 800b05c:	9b04      	ldr	r3, [sp, #16]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	db01      	blt.n	800b066 <__ieee754_pow+0x19e>
 800b062:	f000 fc07 	bl	800b874 <__ieee754_pow+0x9ac>
 800b066:	2280      	movs	r2, #128	; 0x80
 800b068:	0612      	lsls	r2, r2, #24
 800b06a:	4694      	mov	ip, r2
 800b06c:	9b02      	ldr	r3, [sp, #8]
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	9b03      	ldr	r3, [sp, #12]
 800b072:	4463      	add	r3, ip
 800b074:	9301      	str	r3, [sp, #4]
 800b076:	9800      	ldr	r0, [sp, #0]
 800b078:	9901      	ldr	r1, [sp, #4]
 800b07a:	b015      	add	sp, #84	; 0x54
 800b07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b07e:	2380      	movs	r3, #128	; 0x80
 800b080:	9a04      	ldr	r2, [sp, #16]
 800b082:	05db      	lsls	r3, r3, #23
 800b084:	429a      	cmp	r2, r3
 800b086:	d106      	bne.n	800b096 <__ieee754_pow+0x1ce>
 800b088:	003a      	movs	r2, r7
 800b08a:	002b      	movs	r3, r5
 800b08c:	0038      	movs	r0, r7
 800b08e:	0029      	movs	r1, r5
 800b090:	f7f6 feec 	bl	8001e6c <__aeabi_dmul>
 800b094:	e73e      	b.n	800af14 <__ieee754_pow+0x4c>
 800b096:	4b28      	ldr	r3, [pc, #160]	; (800b138 <__ieee754_pow+0x270>)
 800b098:	9a04      	ldr	r2, [sp, #16]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d000      	beq.n	800b0a0 <__ieee754_pow+0x1d8>
 800b09e:	e775      	b.n	800af8c <__ieee754_pow+0xc4>
 800b0a0:	2d00      	cmp	r5, #0
 800b0a2:	da00      	bge.n	800b0a6 <__ieee754_pow+0x1de>
 800b0a4:	e772      	b.n	800af8c <__ieee754_pow+0xc4>
 800b0a6:	0038      	movs	r0, r7
 800b0a8:	0029      	movs	r1, r5
 800b0aa:	f000 fc17 	bl	800b8dc <__ieee754_sqrt>
 800b0ae:	e731      	b.n	800af14 <__ieee754_pow+0x4c>
 800b0b0:	9b06      	ldr	r3, [sp, #24]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d1df      	bne.n	800b076 <__ieee754_pow+0x1ae>
 800b0b6:	9800      	ldr	r0, [sp, #0]
 800b0b8:	2180      	movs	r1, #128	; 0x80
 800b0ba:	0002      	movs	r2, r0
 800b0bc:	9801      	ldr	r0, [sp, #4]
 800b0be:	0609      	lsls	r1, r1, #24
 800b0c0:	1843      	adds	r3, r0, r1
 800b0c2:	9200      	str	r2, [sp, #0]
 800b0c4:	9301      	str	r3, [sp, #4]
 800b0c6:	e7d6      	b.n	800b076 <__ieee754_pow+0x1ae>
 800b0c8:	0feb      	lsrs	r3, r5, #31
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	930e      	str	r3, [sp, #56]	; 0x38
 800b0ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0d0:	9b06      	ldr	r3, [sp, #24]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	d104      	bne.n	800b0e0 <__ieee754_pow+0x218>
 800b0d6:	003a      	movs	r2, r7
 800b0d8:	002b      	movs	r3, r5
 800b0da:	0038      	movs	r0, r7
 800b0dc:	0029      	movs	r1, r5
 800b0de:	e77e      	b.n	800afde <__ieee754_pow+0x116>
 800b0e0:	4b16      	ldr	r3, [pc, #88]	; (800b13c <__ieee754_pow+0x274>)
 800b0e2:	429e      	cmp	r6, r3
 800b0e4:	dc00      	bgt.n	800b0e8 <__ieee754_pow+0x220>
 800b0e6:	e0ef      	b.n	800b2c8 <__ieee754_pow+0x400>
 800b0e8:	4b15      	ldr	r3, [pc, #84]	; (800b140 <__ieee754_pow+0x278>)
 800b0ea:	429e      	cmp	r6, r3
 800b0ec:	dd09      	ble.n	800b102 <__ieee754_pow+0x23a>
 800b0ee:	4b0f      	ldr	r3, [pc, #60]	; (800b12c <__ieee754_pow+0x264>)
 800b0f0:	429c      	cmp	r4, r3
 800b0f2:	dc0c      	bgt.n	800b10e <__ieee754_pow+0x246>
 800b0f4:	9b04      	ldr	r3, [sp, #16]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	da0c      	bge.n	800b114 <__ieee754_pow+0x24c>
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	f000 fcce 	bl	800ba9c <__math_oflow>
 800b100:	e708      	b.n	800af14 <__ieee754_pow+0x4c>
 800b102:	4b10      	ldr	r3, [pc, #64]	; (800b144 <__ieee754_pow+0x27c>)
 800b104:	429c      	cmp	r4, r3
 800b106:	ddf5      	ble.n	800b0f4 <__ieee754_pow+0x22c>
 800b108:	4b0a      	ldr	r3, [pc, #40]	; (800b134 <__ieee754_pow+0x26c>)
 800b10a:	429c      	cmp	r4, r3
 800b10c:	dd1c      	ble.n	800b148 <__ieee754_pow+0x280>
 800b10e:	9b04      	ldr	r3, [sp, #16]
 800b110:	2b00      	cmp	r3, #0
 800b112:	dcf2      	bgt.n	800b0fa <__ieee754_pow+0x232>
 800b114:	2000      	movs	r0, #0
 800b116:	f000 fcba 	bl	800ba8e <__math_uflow>
 800b11a:	e6fb      	b.n	800af14 <__ieee754_pow+0x4c>
 800b11c:	fff00000 	.word	0xfff00000
 800b120:	7ff00000 	.word	0x7ff00000
 800b124:	c0100000 	.word	0xc0100000
 800b128:	433fffff 	.word	0x433fffff
 800b12c:	3fefffff 	.word	0x3fefffff
 800b130:	fffffc01 	.word	0xfffffc01
 800b134:	3ff00000 	.word	0x3ff00000
 800b138:	3fe00000 	.word	0x3fe00000
 800b13c:	41e00000 	.word	0x41e00000
 800b140:	43f00000 	.word	0x43f00000
 800b144:	3feffffe 	.word	0x3feffffe
 800b148:	2200      	movs	r2, #0
 800b14a:	9800      	ldr	r0, [sp, #0]
 800b14c:	9901      	ldr	r1, [sp, #4]
 800b14e:	4b52      	ldr	r3, [pc, #328]	; (800b298 <__ieee754_pow+0x3d0>)
 800b150:	f7f7 f8f8 	bl	8002344 <__aeabi_dsub>
 800b154:	22c0      	movs	r2, #192	; 0xc0
 800b156:	4b51      	ldr	r3, [pc, #324]	; (800b29c <__ieee754_pow+0x3d4>)
 800b158:	05d2      	lsls	r2, r2, #23
 800b15a:	0004      	movs	r4, r0
 800b15c:	000d      	movs	r5, r1
 800b15e:	f7f6 fe85 	bl	8001e6c <__aeabi_dmul>
 800b162:	4a4f      	ldr	r2, [pc, #316]	; (800b2a0 <__ieee754_pow+0x3d8>)
 800b164:	9000      	str	r0, [sp, #0]
 800b166:	9101      	str	r1, [sp, #4]
 800b168:	4b4e      	ldr	r3, [pc, #312]	; (800b2a4 <__ieee754_pow+0x3dc>)
 800b16a:	0020      	movs	r0, r4
 800b16c:	0029      	movs	r1, r5
 800b16e:	f7f6 fe7d 	bl	8001e6c <__aeabi_dmul>
 800b172:	2200      	movs	r2, #0
 800b174:	9004      	str	r0, [sp, #16]
 800b176:	9105      	str	r1, [sp, #20]
 800b178:	4b4b      	ldr	r3, [pc, #300]	; (800b2a8 <__ieee754_pow+0x3e0>)
 800b17a:	0020      	movs	r0, r4
 800b17c:	0029      	movs	r1, r5
 800b17e:	f7f6 fe75 	bl	8001e6c <__aeabi_dmul>
 800b182:	0002      	movs	r2, r0
 800b184:	000b      	movs	r3, r1
 800b186:	4849      	ldr	r0, [pc, #292]	; (800b2ac <__ieee754_pow+0x3e4>)
 800b188:	4949      	ldr	r1, [pc, #292]	; (800b2b0 <__ieee754_pow+0x3e8>)
 800b18a:	f7f7 f8db 	bl	8002344 <__aeabi_dsub>
 800b18e:	0022      	movs	r2, r4
 800b190:	002b      	movs	r3, r5
 800b192:	f7f6 fe6b 	bl	8001e6c <__aeabi_dmul>
 800b196:	0002      	movs	r2, r0
 800b198:	000b      	movs	r3, r1
 800b19a:	2000      	movs	r0, #0
 800b19c:	4945      	ldr	r1, [pc, #276]	; (800b2b4 <__ieee754_pow+0x3ec>)
 800b19e:	f7f7 f8d1 	bl	8002344 <__aeabi_dsub>
 800b1a2:	0022      	movs	r2, r4
 800b1a4:	0006      	movs	r6, r0
 800b1a6:	000f      	movs	r7, r1
 800b1a8:	002b      	movs	r3, r5
 800b1aa:	0020      	movs	r0, r4
 800b1ac:	0029      	movs	r1, r5
 800b1ae:	f7f6 fe5d 	bl	8001e6c <__aeabi_dmul>
 800b1b2:	0002      	movs	r2, r0
 800b1b4:	000b      	movs	r3, r1
 800b1b6:	0030      	movs	r0, r6
 800b1b8:	0039      	movs	r1, r7
 800b1ba:	f7f6 fe57 	bl	8001e6c <__aeabi_dmul>
 800b1be:	4a3e      	ldr	r2, [pc, #248]	; (800b2b8 <__ieee754_pow+0x3f0>)
 800b1c0:	4b36      	ldr	r3, [pc, #216]	; (800b29c <__ieee754_pow+0x3d4>)
 800b1c2:	f7f6 fe53 	bl	8001e6c <__aeabi_dmul>
 800b1c6:	0002      	movs	r2, r0
 800b1c8:	000b      	movs	r3, r1
 800b1ca:	9804      	ldr	r0, [sp, #16]
 800b1cc:	9905      	ldr	r1, [sp, #20]
 800b1ce:	f7f7 f8b9 	bl	8002344 <__aeabi_dsub>
 800b1d2:	0002      	movs	r2, r0
 800b1d4:	000b      	movs	r3, r1
 800b1d6:	0004      	movs	r4, r0
 800b1d8:	000d      	movs	r5, r1
 800b1da:	9800      	ldr	r0, [sp, #0]
 800b1dc:	9901      	ldr	r1, [sp, #4]
 800b1de:	f7f5 ff07 	bl	8000ff0 <__aeabi_dadd>
 800b1e2:	9a00      	ldr	r2, [sp, #0]
 800b1e4:	9b01      	ldr	r3, [sp, #4]
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	000f      	movs	r7, r1
 800b1ea:	0006      	movs	r6, r0
 800b1ec:	f7f7 f8aa 	bl	8002344 <__aeabi_dsub>
 800b1f0:	0002      	movs	r2, r0
 800b1f2:	000b      	movs	r3, r1
 800b1f4:	0020      	movs	r0, r4
 800b1f6:	0029      	movs	r1, r5
 800b1f8:	f7f7 f8a4 	bl	8002344 <__aeabi_dsub>
 800b1fc:	9b06      	ldr	r3, [sp, #24]
 800b1fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b200:	3b01      	subs	r3, #1
 800b202:	9004      	str	r0, [sp, #16]
 800b204:	9105      	str	r1, [sp, #20]
 800b206:	4313      	orrs	r3, r2
 800b208:	d000      	beq.n	800b20c <__ieee754_pow+0x344>
 800b20a:	e1db      	b.n	800b5c4 <__ieee754_pow+0x6fc>
 800b20c:	2300      	movs	r3, #0
 800b20e:	4c2b      	ldr	r4, [pc, #172]	; (800b2bc <__ieee754_pow+0x3f4>)
 800b210:	9300      	str	r3, [sp, #0]
 800b212:	9401      	str	r4, [sp, #4]
 800b214:	9c02      	ldr	r4, [sp, #8]
 800b216:	9d03      	ldr	r5, [sp, #12]
 800b218:	9802      	ldr	r0, [sp, #8]
 800b21a:	9903      	ldr	r1, [sp, #12]
 800b21c:	2400      	movs	r4, #0
 800b21e:	002b      	movs	r3, r5
 800b220:	0022      	movs	r2, r4
 800b222:	f7f7 f88f 	bl	8002344 <__aeabi_dsub>
 800b226:	0032      	movs	r2, r6
 800b228:	003b      	movs	r3, r7
 800b22a:	f7f6 fe1f 	bl	8001e6c <__aeabi_dmul>
 800b22e:	9a02      	ldr	r2, [sp, #8]
 800b230:	9b03      	ldr	r3, [sp, #12]
 800b232:	9006      	str	r0, [sp, #24]
 800b234:	9107      	str	r1, [sp, #28]
 800b236:	9804      	ldr	r0, [sp, #16]
 800b238:	9905      	ldr	r1, [sp, #20]
 800b23a:	f7f6 fe17 	bl	8001e6c <__aeabi_dmul>
 800b23e:	0002      	movs	r2, r0
 800b240:	000b      	movs	r3, r1
 800b242:	9806      	ldr	r0, [sp, #24]
 800b244:	9907      	ldr	r1, [sp, #28]
 800b246:	f7f5 fed3 	bl	8000ff0 <__aeabi_dadd>
 800b24a:	0022      	movs	r2, r4
 800b24c:	002b      	movs	r3, r5
 800b24e:	9004      	str	r0, [sp, #16]
 800b250:	9105      	str	r1, [sp, #20]
 800b252:	0030      	movs	r0, r6
 800b254:	0039      	movs	r1, r7
 800b256:	f7f6 fe09 	bl	8001e6c <__aeabi_dmul>
 800b25a:	0006      	movs	r6, r0
 800b25c:	000f      	movs	r7, r1
 800b25e:	000b      	movs	r3, r1
 800b260:	0002      	movs	r2, r0
 800b262:	9804      	ldr	r0, [sp, #16]
 800b264:	9905      	ldr	r1, [sp, #20]
 800b266:	9606      	str	r6, [sp, #24]
 800b268:	9707      	str	r7, [sp, #28]
 800b26a:	f7f5 fec1 	bl	8000ff0 <__aeabi_dadd>
 800b26e:	4b14      	ldr	r3, [pc, #80]	; (800b2c0 <__ieee754_pow+0x3f8>)
 800b270:	0005      	movs	r5, r0
 800b272:	000c      	movs	r4, r1
 800b274:	9108      	str	r1, [sp, #32]
 800b276:	4299      	cmp	r1, r3
 800b278:	dc00      	bgt.n	800b27c <__ieee754_pow+0x3b4>
 800b27a:	e2d6      	b.n	800b82a <__ieee754_pow+0x962>
 800b27c:	4b11      	ldr	r3, [pc, #68]	; (800b2c4 <__ieee754_pow+0x3fc>)
 800b27e:	18cb      	adds	r3, r1, r3
 800b280:	4303      	orrs	r3, r0
 800b282:	d100      	bne.n	800b286 <__ieee754_pow+0x3be>
 800b284:	e1d8      	b.n	800b638 <__ieee754_pow+0x770>
 800b286:	9800      	ldr	r0, [sp, #0]
 800b288:	9901      	ldr	r1, [sp, #4]
 800b28a:	2300      	movs	r3, #0
 800b28c:	2200      	movs	r2, #0
 800b28e:	f7f5 f8e3 	bl	8000458 <__aeabi_dcmplt>
 800b292:	1e43      	subs	r3, r0, #1
 800b294:	4198      	sbcs	r0, r3
 800b296:	e731      	b.n	800b0fc <__ieee754_pow+0x234>
 800b298:	3ff00000 	.word	0x3ff00000
 800b29c:	3ff71547 	.word	0x3ff71547
 800b2a0:	f85ddf44 	.word	0xf85ddf44
 800b2a4:	3e54ae0b 	.word	0x3e54ae0b
 800b2a8:	3fd00000 	.word	0x3fd00000
 800b2ac:	55555555 	.word	0x55555555
 800b2b0:	3fd55555 	.word	0x3fd55555
 800b2b4:	3fe00000 	.word	0x3fe00000
 800b2b8:	652b82fe 	.word	0x652b82fe
 800b2bc:	bff00000 	.word	0xbff00000
 800b2c0:	408fffff 	.word	0x408fffff
 800b2c4:	bf700000 	.word	0xbf700000
 800b2c8:	4bc0      	ldr	r3, [pc, #768]	; (800b5cc <__ieee754_pow+0x704>)
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	422b      	tst	r3, r5
 800b2ce:	d10a      	bne.n	800b2e6 <__ieee754_pow+0x41e>
 800b2d0:	9800      	ldr	r0, [sp, #0]
 800b2d2:	9901      	ldr	r1, [sp, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	4bbe      	ldr	r3, [pc, #760]	; (800b5d0 <__ieee754_pow+0x708>)
 800b2d8:	f7f6 fdc8 	bl	8001e6c <__aeabi_dmul>
 800b2dc:	2235      	movs	r2, #53	; 0x35
 800b2de:	9000      	str	r0, [sp, #0]
 800b2e0:	9101      	str	r1, [sp, #4]
 800b2e2:	9c01      	ldr	r4, [sp, #4]
 800b2e4:	4252      	negs	r2, r2
 800b2e6:	49bb      	ldr	r1, [pc, #748]	; (800b5d4 <__ieee754_pow+0x70c>)
 800b2e8:	1523      	asrs	r3, r4, #20
 800b2ea:	185b      	adds	r3, r3, r1
 800b2ec:	189b      	adds	r3, r3, r2
 800b2ee:	0324      	lsls	r4, r4, #12
 800b2f0:	4db9      	ldr	r5, [pc, #740]	; (800b5d8 <__ieee754_pow+0x710>)
 800b2f2:	930d      	str	r3, [sp, #52]	; 0x34
 800b2f4:	4bb9      	ldr	r3, [pc, #740]	; (800b5dc <__ieee754_pow+0x714>)
 800b2f6:	0b22      	lsrs	r2, r4, #12
 800b2f8:	4315      	orrs	r5, r2
 800b2fa:	2400      	movs	r4, #0
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	dd09      	ble.n	800b314 <__ieee754_pow+0x44c>
 800b300:	4bb7      	ldr	r3, [pc, #732]	; (800b5e0 <__ieee754_pow+0x718>)
 800b302:	3401      	adds	r4, #1
 800b304:	429a      	cmp	r2, r3
 800b306:	dd05      	ble.n	800b314 <__ieee754_pow+0x44c>
 800b308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b30a:	191b      	adds	r3, r3, r4
 800b30c:	2400      	movs	r4, #0
 800b30e:	930d      	str	r3, [sp, #52]	; 0x34
 800b310:	4bb4      	ldr	r3, [pc, #720]	; (800b5e4 <__ieee754_pow+0x71c>)
 800b312:	18ed      	adds	r5, r5, r3
 800b314:	00e3      	lsls	r3, r4, #3
 800b316:	930f      	str	r3, [sp, #60]	; 0x3c
 800b318:	4bb3      	ldr	r3, [pc, #716]	; (800b5e8 <__ieee754_pow+0x720>)
 800b31a:	00e2      	lsls	r2, r4, #3
 800b31c:	189b      	adds	r3, r3, r2
 800b31e:	9800      	ldr	r0, [sp, #0]
 800b320:	9901      	ldr	r1, [sp, #4]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	0029      	movs	r1, r5
 800b328:	0006      	movs	r6, r0
 800b32a:	920a      	str	r2, [sp, #40]	; 0x28
 800b32c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b32e:	f7f7 f809 	bl	8002344 <__aeabi_dsub>
 800b332:	0032      	movs	r2, r6
 800b334:	002b      	movs	r3, r5
 800b336:	9010      	str	r0, [sp, #64]	; 0x40
 800b338:	9111      	str	r1, [sp, #68]	; 0x44
 800b33a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b33c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b33e:	f7f5 fe57 	bl	8000ff0 <__aeabi_dadd>
 800b342:	0002      	movs	r2, r0
 800b344:	000b      	movs	r3, r1
 800b346:	2000      	movs	r0, #0
 800b348:	49a3      	ldr	r1, [pc, #652]	; (800b5d8 <__ieee754_pow+0x710>)
 800b34a:	f7f6 f98d 	bl	8001668 <__aeabi_ddiv>
 800b34e:	0002      	movs	r2, r0
 800b350:	000b      	movs	r3, r1
 800b352:	9012      	str	r0, [sp, #72]	; 0x48
 800b354:	9113      	str	r1, [sp, #76]	; 0x4c
 800b356:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b358:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b35a:	f7f6 fd87 	bl	8001e6c <__aeabi_dmul>
 800b35e:	9008      	str	r0, [sp, #32]
 800b360:	9109      	str	r1, [sp, #36]	; 0x24
 800b362:	9a08      	ldr	r2, [sp, #32]
 800b364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b366:	2180      	movs	r1, #128	; 0x80
 800b368:	9204      	str	r2, [sp, #16]
 800b36a:	9305      	str	r3, [sp, #20]
 800b36c:	2300      	movs	r3, #0
 800b36e:	002f      	movs	r7, r5
 800b370:	0589      	lsls	r1, r1, #22
 800b372:	106d      	asrs	r5, r5, #1
 800b374:	430d      	orrs	r5, r1
 800b376:	2180      	movs	r1, #128	; 0x80
 800b378:	9304      	str	r3, [sp, #16]
 800b37a:	9a04      	ldr	r2, [sp, #16]
 800b37c:	9b05      	ldr	r3, [sp, #20]
 800b37e:	9200      	str	r2, [sp, #0]
 800b380:	9301      	str	r3, [sp, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	0309      	lsls	r1, r1, #12
 800b386:	186d      	adds	r5, r5, r1
 800b388:	04a1      	lsls	r1, r4, #18
 800b38a:	186b      	adds	r3, r5, r1
 800b38c:	9800      	ldr	r0, [sp, #0]
 800b38e:	9901      	ldr	r1, [sp, #4]
 800b390:	0014      	movs	r4, r2
 800b392:	001d      	movs	r5, r3
 800b394:	f7f6 fd6a 	bl	8001e6c <__aeabi_dmul>
 800b398:	0002      	movs	r2, r0
 800b39a:	000b      	movs	r3, r1
 800b39c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b39e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b3a0:	f7f6 ffd0 	bl	8002344 <__aeabi_dsub>
 800b3a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3a8:	9010      	str	r0, [sp, #64]	; 0x40
 800b3aa:	9111      	str	r1, [sp, #68]	; 0x44
 800b3ac:	0020      	movs	r0, r4
 800b3ae:	0029      	movs	r1, r5
 800b3b0:	f7f6 ffc8 	bl	8002344 <__aeabi_dsub>
 800b3b4:	0002      	movs	r2, r0
 800b3b6:	000b      	movs	r3, r1
 800b3b8:	0030      	movs	r0, r6
 800b3ba:	0039      	movs	r1, r7
 800b3bc:	f7f6 ffc2 	bl	8002344 <__aeabi_dsub>
 800b3c0:	9a00      	ldr	r2, [sp, #0]
 800b3c2:	9b01      	ldr	r3, [sp, #4]
 800b3c4:	f7f6 fd52 	bl	8001e6c <__aeabi_dmul>
 800b3c8:	0002      	movs	r2, r0
 800b3ca:	000b      	movs	r3, r1
 800b3cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b3ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b3d0:	f7f6 ffb8 	bl	8002344 <__aeabi_dsub>
 800b3d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b3d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b3d8:	f7f6 fd48 	bl	8001e6c <__aeabi_dmul>
 800b3dc:	9a08      	ldr	r2, [sp, #32]
 800b3de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3e0:	900a      	str	r0, [sp, #40]	; 0x28
 800b3e2:	910b      	str	r1, [sp, #44]	; 0x2c
 800b3e4:	0010      	movs	r0, r2
 800b3e6:	0019      	movs	r1, r3
 800b3e8:	f7f6 fd40 	bl	8001e6c <__aeabi_dmul>
 800b3ec:	0006      	movs	r6, r0
 800b3ee:	000f      	movs	r7, r1
 800b3f0:	4a7e      	ldr	r2, [pc, #504]	; (800b5ec <__ieee754_pow+0x724>)
 800b3f2:	4b7f      	ldr	r3, [pc, #508]	; (800b5f0 <__ieee754_pow+0x728>)
 800b3f4:	f7f6 fd3a 	bl	8001e6c <__aeabi_dmul>
 800b3f8:	4a7e      	ldr	r2, [pc, #504]	; (800b5f4 <__ieee754_pow+0x72c>)
 800b3fa:	4b7f      	ldr	r3, [pc, #508]	; (800b5f8 <__ieee754_pow+0x730>)
 800b3fc:	f7f5 fdf8 	bl	8000ff0 <__aeabi_dadd>
 800b400:	0032      	movs	r2, r6
 800b402:	003b      	movs	r3, r7
 800b404:	f7f6 fd32 	bl	8001e6c <__aeabi_dmul>
 800b408:	4a7c      	ldr	r2, [pc, #496]	; (800b5fc <__ieee754_pow+0x734>)
 800b40a:	4b7d      	ldr	r3, [pc, #500]	; (800b600 <__ieee754_pow+0x738>)
 800b40c:	f7f5 fdf0 	bl	8000ff0 <__aeabi_dadd>
 800b410:	0032      	movs	r2, r6
 800b412:	003b      	movs	r3, r7
 800b414:	f7f6 fd2a 	bl	8001e6c <__aeabi_dmul>
 800b418:	4a7a      	ldr	r2, [pc, #488]	; (800b604 <__ieee754_pow+0x73c>)
 800b41a:	4b7b      	ldr	r3, [pc, #492]	; (800b608 <__ieee754_pow+0x740>)
 800b41c:	f7f5 fde8 	bl	8000ff0 <__aeabi_dadd>
 800b420:	0032      	movs	r2, r6
 800b422:	003b      	movs	r3, r7
 800b424:	f7f6 fd22 	bl	8001e6c <__aeabi_dmul>
 800b428:	4a78      	ldr	r2, [pc, #480]	; (800b60c <__ieee754_pow+0x744>)
 800b42a:	4b79      	ldr	r3, [pc, #484]	; (800b610 <__ieee754_pow+0x748>)
 800b42c:	f7f5 fde0 	bl	8000ff0 <__aeabi_dadd>
 800b430:	0032      	movs	r2, r6
 800b432:	003b      	movs	r3, r7
 800b434:	f7f6 fd1a 	bl	8001e6c <__aeabi_dmul>
 800b438:	4a76      	ldr	r2, [pc, #472]	; (800b614 <__ieee754_pow+0x74c>)
 800b43a:	4b77      	ldr	r3, [pc, #476]	; (800b618 <__ieee754_pow+0x750>)
 800b43c:	f7f5 fdd8 	bl	8000ff0 <__aeabi_dadd>
 800b440:	0032      	movs	r2, r6
 800b442:	0004      	movs	r4, r0
 800b444:	000d      	movs	r5, r1
 800b446:	003b      	movs	r3, r7
 800b448:	0030      	movs	r0, r6
 800b44a:	0039      	movs	r1, r7
 800b44c:	f7f6 fd0e 	bl	8001e6c <__aeabi_dmul>
 800b450:	0002      	movs	r2, r0
 800b452:	000b      	movs	r3, r1
 800b454:	0020      	movs	r0, r4
 800b456:	0029      	movs	r1, r5
 800b458:	f7f6 fd08 	bl	8001e6c <__aeabi_dmul>
 800b45c:	9a00      	ldr	r2, [sp, #0]
 800b45e:	9b01      	ldr	r3, [sp, #4]
 800b460:	0004      	movs	r4, r0
 800b462:	000d      	movs	r5, r1
 800b464:	9808      	ldr	r0, [sp, #32]
 800b466:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b468:	f7f5 fdc2 	bl	8000ff0 <__aeabi_dadd>
 800b46c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b46e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b470:	f7f6 fcfc 	bl	8001e6c <__aeabi_dmul>
 800b474:	0022      	movs	r2, r4
 800b476:	002b      	movs	r3, r5
 800b478:	f7f5 fdba 	bl	8000ff0 <__aeabi_dadd>
 800b47c:	9a00      	ldr	r2, [sp, #0]
 800b47e:	9b01      	ldr	r3, [sp, #4]
 800b480:	9010      	str	r0, [sp, #64]	; 0x40
 800b482:	9111      	str	r1, [sp, #68]	; 0x44
 800b484:	0010      	movs	r0, r2
 800b486:	0019      	movs	r1, r3
 800b488:	f7f6 fcf0 	bl	8001e6c <__aeabi_dmul>
 800b48c:	2200      	movs	r2, #0
 800b48e:	4b63      	ldr	r3, [pc, #396]	; (800b61c <__ieee754_pow+0x754>)
 800b490:	0004      	movs	r4, r0
 800b492:	000d      	movs	r5, r1
 800b494:	f7f5 fdac 	bl	8000ff0 <__aeabi_dadd>
 800b498:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b49a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b49c:	f7f5 fda8 	bl	8000ff0 <__aeabi_dadd>
 800b4a0:	2600      	movs	r6, #0
 800b4a2:	000f      	movs	r7, r1
 800b4a4:	0032      	movs	r2, r6
 800b4a6:	000b      	movs	r3, r1
 800b4a8:	9800      	ldr	r0, [sp, #0]
 800b4aa:	9901      	ldr	r1, [sp, #4]
 800b4ac:	f7f6 fcde 	bl	8001e6c <__aeabi_dmul>
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	9000      	str	r0, [sp, #0]
 800b4b4:	9101      	str	r1, [sp, #4]
 800b4b6:	4b59      	ldr	r3, [pc, #356]	; (800b61c <__ieee754_pow+0x754>)
 800b4b8:	0030      	movs	r0, r6
 800b4ba:	0039      	movs	r1, r7
 800b4bc:	f7f6 ff42 	bl	8002344 <__aeabi_dsub>
 800b4c0:	0022      	movs	r2, r4
 800b4c2:	002b      	movs	r3, r5
 800b4c4:	f7f6 ff3e 	bl	8002344 <__aeabi_dsub>
 800b4c8:	0002      	movs	r2, r0
 800b4ca:	000b      	movs	r3, r1
 800b4cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b4ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b4d0:	f7f6 ff38 	bl	8002344 <__aeabi_dsub>
 800b4d4:	9a08      	ldr	r2, [sp, #32]
 800b4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d8:	f7f6 fcc8 	bl	8001e6c <__aeabi_dmul>
 800b4dc:	0032      	movs	r2, r6
 800b4de:	0004      	movs	r4, r0
 800b4e0:	000d      	movs	r5, r1
 800b4e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b4e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4e6:	003b      	movs	r3, r7
 800b4e8:	f7f6 fcc0 	bl	8001e6c <__aeabi_dmul>
 800b4ec:	0002      	movs	r2, r0
 800b4ee:	000b      	movs	r3, r1
 800b4f0:	0020      	movs	r0, r4
 800b4f2:	0029      	movs	r1, r5
 800b4f4:	f7f5 fd7c 	bl	8000ff0 <__aeabi_dadd>
 800b4f8:	0004      	movs	r4, r0
 800b4fa:	000d      	movs	r5, r1
 800b4fc:	0002      	movs	r2, r0
 800b4fe:	000b      	movs	r3, r1
 800b500:	9800      	ldr	r0, [sp, #0]
 800b502:	9901      	ldr	r1, [sp, #4]
 800b504:	f7f5 fd74 	bl	8000ff0 <__aeabi_dadd>
 800b508:	2600      	movs	r6, #0
 800b50a:	22e0      	movs	r2, #224	; 0xe0
 800b50c:	4b44      	ldr	r3, [pc, #272]	; (800b620 <__ieee754_pow+0x758>)
 800b50e:	0612      	lsls	r2, r2, #24
 800b510:	0030      	movs	r0, r6
 800b512:	000f      	movs	r7, r1
 800b514:	f7f6 fcaa 	bl	8001e6c <__aeabi_dmul>
 800b518:	9008      	str	r0, [sp, #32]
 800b51a:	9109      	str	r1, [sp, #36]	; 0x24
 800b51c:	9a00      	ldr	r2, [sp, #0]
 800b51e:	9b01      	ldr	r3, [sp, #4]
 800b520:	0039      	movs	r1, r7
 800b522:	0030      	movs	r0, r6
 800b524:	f7f6 ff0e 	bl	8002344 <__aeabi_dsub>
 800b528:	0002      	movs	r2, r0
 800b52a:	000b      	movs	r3, r1
 800b52c:	0020      	movs	r0, r4
 800b52e:	0029      	movs	r1, r5
 800b530:	f7f6 ff08 	bl	8002344 <__aeabi_dsub>
 800b534:	4a3b      	ldr	r2, [pc, #236]	; (800b624 <__ieee754_pow+0x75c>)
 800b536:	4b3a      	ldr	r3, [pc, #232]	; (800b620 <__ieee754_pow+0x758>)
 800b538:	f7f6 fc98 	bl	8001e6c <__aeabi_dmul>
 800b53c:	4a3a      	ldr	r2, [pc, #232]	; (800b628 <__ieee754_pow+0x760>)
 800b53e:	0004      	movs	r4, r0
 800b540:	000d      	movs	r5, r1
 800b542:	4b3a      	ldr	r3, [pc, #232]	; (800b62c <__ieee754_pow+0x764>)
 800b544:	0039      	movs	r1, r7
 800b546:	0030      	movs	r0, r6
 800b548:	f7f6 fc90 	bl	8001e6c <__aeabi_dmul>
 800b54c:	0002      	movs	r2, r0
 800b54e:	000b      	movs	r3, r1
 800b550:	0020      	movs	r0, r4
 800b552:	0029      	movs	r1, r5
 800b554:	f7f5 fd4c 	bl	8000ff0 <__aeabi_dadd>
 800b558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b55a:	4b35      	ldr	r3, [pc, #212]	; (800b630 <__ieee754_pow+0x768>)
 800b55c:	189b      	adds	r3, r3, r2
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	f7f5 fd45 	bl	8000ff0 <__aeabi_dadd>
 800b566:	900a      	str	r0, [sp, #40]	; 0x28
 800b568:	910b      	str	r1, [sp, #44]	; 0x2c
 800b56a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b56c:	f7f7 fad0 	bl	8002b10 <__aeabi_i2d>
 800b570:	0004      	movs	r4, r0
 800b572:	000d      	movs	r5, r1
 800b574:	9808      	ldr	r0, [sp, #32]
 800b576:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b578:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b57a:	4b2e      	ldr	r3, [pc, #184]	; (800b634 <__ieee754_pow+0x76c>)
 800b57c:	189b      	adds	r3, r3, r2
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	9200      	str	r2, [sp, #0]
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b58a:	f7f5 fd31 	bl	8000ff0 <__aeabi_dadd>
 800b58e:	9a00      	ldr	r2, [sp, #0]
 800b590:	9b01      	ldr	r3, [sp, #4]
 800b592:	f7f5 fd2d 	bl	8000ff0 <__aeabi_dadd>
 800b596:	0022      	movs	r2, r4
 800b598:	002b      	movs	r3, r5
 800b59a:	f7f5 fd29 	bl	8000ff0 <__aeabi_dadd>
 800b59e:	0022      	movs	r2, r4
 800b5a0:	002b      	movs	r3, r5
 800b5a2:	0030      	movs	r0, r6
 800b5a4:	000f      	movs	r7, r1
 800b5a6:	f7f6 fecd 	bl	8002344 <__aeabi_dsub>
 800b5aa:	9a00      	ldr	r2, [sp, #0]
 800b5ac:	9b01      	ldr	r3, [sp, #4]
 800b5ae:	f7f6 fec9 	bl	8002344 <__aeabi_dsub>
 800b5b2:	9a08      	ldr	r2, [sp, #32]
 800b5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b6:	f7f6 fec5 	bl	8002344 <__aeabi_dsub>
 800b5ba:	0002      	movs	r2, r0
 800b5bc:	000b      	movs	r3, r1
 800b5be:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b5c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5c2:	e619      	b.n	800b1f8 <__ieee754_pow+0x330>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	4c04      	ldr	r4, [pc, #16]	; (800b5d8 <__ieee754_pow+0x710>)
 800b5c8:	e622      	b.n	800b210 <__ieee754_pow+0x348>
 800b5ca:	46c0      	nop			; (mov r8, r8)
 800b5cc:	7ff00000 	.word	0x7ff00000
 800b5d0:	43400000 	.word	0x43400000
 800b5d4:	fffffc01 	.word	0xfffffc01
 800b5d8:	3ff00000 	.word	0x3ff00000
 800b5dc:	0003988e 	.word	0x0003988e
 800b5e0:	000bb679 	.word	0x000bb679
 800b5e4:	fff00000 	.word	0xfff00000
 800b5e8:	0800c188 	.word	0x0800c188
 800b5ec:	4a454eef 	.word	0x4a454eef
 800b5f0:	3fca7e28 	.word	0x3fca7e28
 800b5f4:	93c9db65 	.word	0x93c9db65
 800b5f8:	3fcd864a 	.word	0x3fcd864a
 800b5fc:	a91d4101 	.word	0xa91d4101
 800b600:	3fd17460 	.word	0x3fd17460
 800b604:	518f264d 	.word	0x518f264d
 800b608:	3fd55555 	.word	0x3fd55555
 800b60c:	db6fabff 	.word	0xdb6fabff
 800b610:	3fdb6db6 	.word	0x3fdb6db6
 800b614:	33333303 	.word	0x33333303
 800b618:	3fe33333 	.word	0x3fe33333
 800b61c:	40080000 	.word	0x40080000
 800b620:	3feec709 	.word	0x3feec709
 800b624:	dc3a03fd 	.word	0xdc3a03fd
 800b628:	145b01f5 	.word	0x145b01f5
 800b62c:	be3e2fe0 	.word	0xbe3e2fe0
 800b630:	0800c1a8 	.word	0x0800c1a8
 800b634:	0800c198 	.word	0x0800c198
 800b638:	4a90      	ldr	r2, [pc, #576]	; (800b87c <__ieee754_pow+0x9b4>)
 800b63a:	4b91      	ldr	r3, [pc, #580]	; (800b880 <__ieee754_pow+0x9b8>)
 800b63c:	9804      	ldr	r0, [sp, #16]
 800b63e:	9905      	ldr	r1, [sp, #20]
 800b640:	f7f5 fcd6 	bl	8000ff0 <__aeabi_dadd>
 800b644:	0032      	movs	r2, r6
 800b646:	9002      	str	r0, [sp, #8]
 800b648:	9103      	str	r1, [sp, #12]
 800b64a:	003b      	movs	r3, r7
 800b64c:	0028      	movs	r0, r5
 800b64e:	0021      	movs	r1, r4
 800b650:	f7f6 fe78 	bl	8002344 <__aeabi_dsub>
 800b654:	0002      	movs	r2, r0
 800b656:	000b      	movs	r3, r1
 800b658:	9802      	ldr	r0, [sp, #8]
 800b65a:	9903      	ldr	r1, [sp, #12]
 800b65c:	f7f4 ff10 	bl	8000480 <__aeabi_dcmpgt>
 800b660:	2800      	cmp	r0, #0
 800b662:	d000      	beq.n	800b666 <__ieee754_pow+0x79e>
 800b664:	e60f      	b.n	800b286 <__ieee754_pow+0x3be>
 800b666:	2100      	movs	r1, #0
 800b668:	4a86      	ldr	r2, [pc, #536]	; (800b884 <__ieee754_pow+0x9bc>)
 800b66a:	0063      	lsls	r3, r4, #1
 800b66c:	085b      	lsrs	r3, r3, #1
 800b66e:	9102      	str	r1, [sp, #8]
 800b670:	4293      	cmp	r3, r2
 800b672:	dd25      	ble.n	800b6c0 <__ieee754_pow+0x7f8>
 800b674:	4a84      	ldr	r2, [pc, #528]	; (800b888 <__ieee754_pow+0x9c0>)
 800b676:	151b      	asrs	r3, r3, #20
 800b678:	189b      	adds	r3, r3, r2
 800b67a:	2280      	movs	r2, #128	; 0x80
 800b67c:	0352      	lsls	r2, r2, #13
 800b67e:	4694      	mov	ip, r2
 800b680:	411a      	asrs	r2, r3
 800b682:	1914      	adds	r4, r2, r4
 800b684:	4b81      	ldr	r3, [pc, #516]	; (800b88c <__ieee754_pow+0x9c4>)
 800b686:	0060      	lsls	r0, r4, #1
 800b688:	4d81      	ldr	r5, [pc, #516]	; (800b890 <__ieee754_pow+0x9c8>)
 800b68a:	0d40      	lsrs	r0, r0, #21
 800b68c:	18c0      	adds	r0, r0, r3
 800b68e:	4105      	asrs	r5, r0
 800b690:	0021      	movs	r1, r4
 800b692:	43a9      	bics	r1, r5
 800b694:	000b      	movs	r3, r1
 800b696:	4661      	mov	r1, ip
 800b698:	0324      	lsls	r4, r4, #12
 800b69a:	0b24      	lsrs	r4, r4, #12
 800b69c:	4321      	orrs	r1, r4
 800b69e:	2414      	movs	r4, #20
 800b6a0:	1a20      	subs	r0, r4, r0
 800b6a2:	4101      	asrs	r1, r0
 800b6a4:	9102      	str	r1, [sp, #8]
 800b6a6:	9908      	ldr	r1, [sp, #32]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	2900      	cmp	r1, #0
 800b6ac:	da02      	bge.n	800b6b4 <__ieee754_pow+0x7ec>
 800b6ae:	9902      	ldr	r1, [sp, #8]
 800b6b0:	4249      	negs	r1, r1
 800b6b2:	9102      	str	r1, [sp, #8]
 800b6b4:	0030      	movs	r0, r6
 800b6b6:	0039      	movs	r1, r7
 800b6b8:	f7f6 fe44 	bl	8002344 <__aeabi_dsub>
 800b6bc:	9006      	str	r0, [sp, #24]
 800b6be:	9107      	str	r1, [sp, #28]
 800b6c0:	9a04      	ldr	r2, [sp, #16]
 800b6c2:	9b05      	ldr	r3, [sp, #20]
 800b6c4:	9806      	ldr	r0, [sp, #24]
 800b6c6:	9907      	ldr	r1, [sp, #28]
 800b6c8:	2600      	movs	r6, #0
 800b6ca:	f7f5 fc91 	bl	8000ff0 <__aeabi_dadd>
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	0030      	movs	r0, r6
 800b6d2:	4b70      	ldr	r3, [pc, #448]	; (800b894 <__ieee754_pow+0x9cc>)
 800b6d4:	000f      	movs	r7, r1
 800b6d6:	f7f6 fbc9 	bl	8001e6c <__aeabi_dmul>
 800b6da:	9a06      	ldr	r2, [sp, #24]
 800b6dc:	9b07      	ldr	r3, [sp, #28]
 800b6de:	9008      	str	r0, [sp, #32]
 800b6e0:	9109      	str	r1, [sp, #36]	; 0x24
 800b6e2:	0030      	movs	r0, r6
 800b6e4:	0039      	movs	r1, r7
 800b6e6:	f7f6 fe2d 	bl	8002344 <__aeabi_dsub>
 800b6ea:	0002      	movs	r2, r0
 800b6ec:	000b      	movs	r3, r1
 800b6ee:	9804      	ldr	r0, [sp, #16]
 800b6f0:	9905      	ldr	r1, [sp, #20]
 800b6f2:	f7f6 fe27 	bl	8002344 <__aeabi_dsub>
 800b6f6:	4a68      	ldr	r2, [pc, #416]	; (800b898 <__ieee754_pow+0x9d0>)
 800b6f8:	4b68      	ldr	r3, [pc, #416]	; (800b89c <__ieee754_pow+0x9d4>)
 800b6fa:	f7f6 fbb7 	bl	8001e6c <__aeabi_dmul>
 800b6fe:	4a68      	ldr	r2, [pc, #416]	; (800b8a0 <__ieee754_pow+0x9d8>)
 800b700:	0004      	movs	r4, r0
 800b702:	000d      	movs	r5, r1
 800b704:	0030      	movs	r0, r6
 800b706:	0039      	movs	r1, r7
 800b708:	4b66      	ldr	r3, [pc, #408]	; (800b8a4 <__ieee754_pow+0x9dc>)
 800b70a:	f7f6 fbaf 	bl	8001e6c <__aeabi_dmul>
 800b70e:	0002      	movs	r2, r0
 800b710:	000b      	movs	r3, r1
 800b712:	0020      	movs	r0, r4
 800b714:	0029      	movs	r1, r5
 800b716:	f7f5 fc6b 	bl	8000ff0 <__aeabi_dadd>
 800b71a:	0004      	movs	r4, r0
 800b71c:	000d      	movs	r5, r1
 800b71e:	0002      	movs	r2, r0
 800b720:	000b      	movs	r3, r1
 800b722:	9808      	ldr	r0, [sp, #32]
 800b724:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b726:	f7f5 fc63 	bl	8000ff0 <__aeabi_dadd>
 800b72a:	9a08      	ldr	r2, [sp, #32]
 800b72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b72e:	0006      	movs	r6, r0
 800b730:	000f      	movs	r7, r1
 800b732:	f7f6 fe07 	bl	8002344 <__aeabi_dsub>
 800b736:	0002      	movs	r2, r0
 800b738:	000b      	movs	r3, r1
 800b73a:	0020      	movs	r0, r4
 800b73c:	0029      	movs	r1, r5
 800b73e:	f7f6 fe01 	bl	8002344 <__aeabi_dsub>
 800b742:	0032      	movs	r2, r6
 800b744:	9004      	str	r0, [sp, #16]
 800b746:	9105      	str	r1, [sp, #20]
 800b748:	003b      	movs	r3, r7
 800b74a:	0030      	movs	r0, r6
 800b74c:	0039      	movs	r1, r7
 800b74e:	f7f6 fb8d 	bl	8001e6c <__aeabi_dmul>
 800b752:	0004      	movs	r4, r0
 800b754:	000d      	movs	r5, r1
 800b756:	4a54      	ldr	r2, [pc, #336]	; (800b8a8 <__ieee754_pow+0x9e0>)
 800b758:	4b54      	ldr	r3, [pc, #336]	; (800b8ac <__ieee754_pow+0x9e4>)
 800b75a:	f7f6 fb87 	bl	8001e6c <__aeabi_dmul>
 800b75e:	4a54      	ldr	r2, [pc, #336]	; (800b8b0 <__ieee754_pow+0x9e8>)
 800b760:	4b54      	ldr	r3, [pc, #336]	; (800b8b4 <__ieee754_pow+0x9ec>)
 800b762:	f7f6 fdef 	bl	8002344 <__aeabi_dsub>
 800b766:	0022      	movs	r2, r4
 800b768:	002b      	movs	r3, r5
 800b76a:	f7f6 fb7f 	bl	8001e6c <__aeabi_dmul>
 800b76e:	4a52      	ldr	r2, [pc, #328]	; (800b8b8 <__ieee754_pow+0x9f0>)
 800b770:	4b52      	ldr	r3, [pc, #328]	; (800b8bc <__ieee754_pow+0x9f4>)
 800b772:	f7f5 fc3d 	bl	8000ff0 <__aeabi_dadd>
 800b776:	0022      	movs	r2, r4
 800b778:	002b      	movs	r3, r5
 800b77a:	f7f6 fb77 	bl	8001e6c <__aeabi_dmul>
 800b77e:	4a50      	ldr	r2, [pc, #320]	; (800b8c0 <__ieee754_pow+0x9f8>)
 800b780:	4b50      	ldr	r3, [pc, #320]	; (800b8c4 <__ieee754_pow+0x9fc>)
 800b782:	f7f6 fddf 	bl	8002344 <__aeabi_dsub>
 800b786:	0022      	movs	r2, r4
 800b788:	002b      	movs	r3, r5
 800b78a:	f7f6 fb6f 	bl	8001e6c <__aeabi_dmul>
 800b78e:	4a4e      	ldr	r2, [pc, #312]	; (800b8c8 <__ieee754_pow+0xa00>)
 800b790:	4b4e      	ldr	r3, [pc, #312]	; (800b8cc <__ieee754_pow+0xa04>)
 800b792:	f7f5 fc2d 	bl	8000ff0 <__aeabi_dadd>
 800b796:	0022      	movs	r2, r4
 800b798:	002b      	movs	r3, r5
 800b79a:	f7f6 fb67 	bl	8001e6c <__aeabi_dmul>
 800b79e:	0002      	movs	r2, r0
 800b7a0:	000b      	movs	r3, r1
 800b7a2:	0030      	movs	r0, r6
 800b7a4:	0039      	movs	r1, r7
 800b7a6:	f7f6 fdcd 	bl	8002344 <__aeabi_dsub>
 800b7aa:	0004      	movs	r4, r0
 800b7ac:	000d      	movs	r5, r1
 800b7ae:	0002      	movs	r2, r0
 800b7b0:	000b      	movs	r3, r1
 800b7b2:	0030      	movs	r0, r6
 800b7b4:	0039      	movs	r1, r7
 800b7b6:	f7f6 fb59 	bl	8001e6c <__aeabi_dmul>
 800b7ba:	2380      	movs	r3, #128	; 0x80
 800b7bc:	9006      	str	r0, [sp, #24]
 800b7be:	9107      	str	r1, [sp, #28]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	0020      	movs	r0, r4
 800b7c4:	0029      	movs	r1, r5
 800b7c6:	05db      	lsls	r3, r3, #23
 800b7c8:	f7f6 fdbc 	bl	8002344 <__aeabi_dsub>
 800b7cc:	0002      	movs	r2, r0
 800b7ce:	000b      	movs	r3, r1
 800b7d0:	9806      	ldr	r0, [sp, #24]
 800b7d2:	9907      	ldr	r1, [sp, #28]
 800b7d4:	f7f5 ff48 	bl	8001668 <__aeabi_ddiv>
 800b7d8:	9a04      	ldr	r2, [sp, #16]
 800b7da:	9b05      	ldr	r3, [sp, #20]
 800b7dc:	0004      	movs	r4, r0
 800b7de:	000d      	movs	r5, r1
 800b7e0:	0030      	movs	r0, r6
 800b7e2:	0039      	movs	r1, r7
 800b7e4:	f7f6 fb42 	bl	8001e6c <__aeabi_dmul>
 800b7e8:	9a04      	ldr	r2, [sp, #16]
 800b7ea:	9b05      	ldr	r3, [sp, #20]
 800b7ec:	f7f5 fc00 	bl	8000ff0 <__aeabi_dadd>
 800b7f0:	0002      	movs	r2, r0
 800b7f2:	000b      	movs	r3, r1
 800b7f4:	0020      	movs	r0, r4
 800b7f6:	0029      	movs	r1, r5
 800b7f8:	f7f6 fda4 	bl	8002344 <__aeabi_dsub>
 800b7fc:	0032      	movs	r2, r6
 800b7fe:	003b      	movs	r3, r7
 800b800:	f7f6 fda0 	bl	8002344 <__aeabi_dsub>
 800b804:	0002      	movs	r2, r0
 800b806:	000b      	movs	r3, r1
 800b808:	2000      	movs	r0, #0
 800b80a:	4931      	ldr	r1, [pc, #196]	; (800b8d0 <__ieee754_pow+0xa08>)
 800b80c:	f7f6 fd9a 	bl	8002344 <__aeabi_dsub>
 800b810:	9b02      	ldr	r3, [sp, #8]
 800b812:	051b      	lsls	r3, r3, #20
 800b814:	185b      	adds	r3, r3, r1
 800b816:	151a      	asrs	r2, r3, #20
 800b818:	2a00      	cmp	r2, #0
 800b81a:	dc25      	bgt.n	800b868 <__ieee754_pow+0x9a0>
 800b81c:	9a02      	ldr	r2, [sp, #8]
 800b81e:	f000 f94f 	bl	800bac0 <scalbn>
 800b822:	9a00      	ldr	r2, [sp, #0]
 800b824:	9b01      	ldr	r3, [sp, #4]
 800b826:	f7ff fc33 	bl	800b090 <__ieee754_pow+0x1c8>
 800b82a:	4a2a      	ldr	r2, [pc, #168]	; (800b8d4 <__ieee754_pow+0xa0c>)
 800b82c:	004b      	lsls	r3, r1, #1
 800b82e:	085b      	lsrs	r3, r3, #1
 800b830:	4293      	cmp	r3, r2
 800b832:	dc00      	bgt.n	800b836 <__ieee754_pow+0x96e>
 800b834:	e717      	b.n	800b666 <__ieee754_pow+0x79e>
 800b836:	4b28      	ldr	r3, [pc, #160]	; (800b8d8 <__ieee754_pow+0xa10>)
 800b838:	18cb      	adds	r3, r1, r3
 800b83a:	4303      	orrs	r3, r0
 800b83c:	d008      	beq.n	800b850 <__ieee754_pow+0x988>
 800b83e:	9800      	ldr	r0, [sp, #0]
 800b840:	9901      	ldr	r1, [sp, #4]
 800b842:	2300      	movs	r3, #0
 800b844:	2200      	movs	r2, #0
 800b846:	f7f4 fe07 	bl	8000458 <__aeabi_dcmplt>
 800b84a:	1e43      	subs	r3, r0, #1
 800b84c:	4198      	sbcs	r0, r3
 800b84e:	e462      	b.n	800b116 <__ieee754_pow+0x24e>
 800b850:	0032      	movs	r2, r6
 800b852:	003b      	movs	r3, r7
 800b854:	f7f6 fd76 	bl	8002344 <__aeabi_dsub>
 800b858:	9a04      	ldr	r2, [sp, #16]
 800b85a:	9b05      	ldr	r3, [sp, #20]
 800b85c:	f7f4 fe1a 	bl	8000494 <__aeabi_dcmpge>
 800b860:	2800      	cmp	r0, #0
 800b862:	d100      	bne.n	800b866 <__ieee754_pow+0x99e>
 800b864:	e6ff      	b.n	800b666 <__ieee754_pow+0x79e>
 800b866:	e7ea      	b.n	800b83e <__ieee754_pow+0x976>
 800b868:	0019      	movs	r1, r3
 800b86a:	e7da      	b.n	800b822 <__ieee754_pow+0x95a>
 800b86c:	2300      	movs	r3, #0
 800b86e:	4c18      	ldr	r4, [pc, #96]	; (800b8d0 <__ieee754_pow+0xa08>)
 800b870:	f7ff fbf1 	bl	800b056 <__ieee754_pow+0x18e>
 800b874:	2300      	movs	r3, #0
 800b876:	2400      	movs	r4, #0
 800b878:	f7ff fbed 	bl	800b056 <__ieee754_pow+0x18e>
 800b87c:	652b82fe 	.word	0x652b82fe
 800b880:	3c971547 	.word	0x3c971547
 800b884:	3fe00000 	.word	0x3fe00000
 800b888:	fffffc02 	.word	0xfffffc02
 800b88c:	fffffc01 	.word	0xfffffc01
 800b890:	000fffff 	.word	0x000fffff
 800b894:	3fe62e43 	.word	0x3fe62e43
 800b898:	fefa39ef 	.word	0xfefa39ef
 800b89c:	3fe62e42 	.word	0x3fe62e42
 800b8a0:	0ca86c39 	.word	0x0ca86c39
 800b8a4:	be205c61 	.word	0xbe205c61
 800b8a8:	72bea4d0 	.word	0x72bea4d0
 800b8ac:	3e663769 	.word	0x3e663769
 800b8b0:	c5d26bf1 	.word	0xc5d26bf1
 800b8b4:	3ebbbd41 	.word	0x3ebbbd41
 800b8b8:	af25de2c 	.word	0xaf25de2c
 800b8bc:	3f11566a 	.word	0x3f11566a
 800b8c0:	16bebd93 	.word	0x16bebd93
 800b8c4:	3f66c16c 	.word	0x3f66c16c
 800b8c8:	5555553e 	.word	0x5555553e
 800b8cc:	3fc55555 	.word	0x3fc55555
 800b8d0:	3ff00000 	.word	0x3ff00000
 800b8d4:	4090cbff 	.word	0x4090cbff
 800b8d8:	3f6f3400 	.word	0x3f6f3400

0800b8dc <__ieee754_sqrt>:
 800b8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8de:	000b      	movs	r3, r1
 800b8e0:	000c      	movs	r4, r1
 800b8e2:	4956      	ldr	r1, [pc, #344]	; (800ba3c <__ieee754_sqrt+0x160>)
 800b8e4:	0005      	movs	r5, r0
 800b8e6:	0002      	movs	r2, r0
 800b8e8:	0008      	movs	r0, r1
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	4020      	ands	r0, r4
 800b8ee:	4288      	cmp	r0, r1
 800b8f0:	d10f      	bne.n	800b912 <__ieee754_sqrt+0x36>
 800b8f2:	0028      	movs	r0, r5
 800b8f4:	0021      	movs	r1, r4
 800b8f6:	f7f6 fab9 	bl	8001e6c <__aeabi_dmul>
 800b8fa:	0002      	movs	r2, r0
 800b8fc:	000b      	movs	r3, r1
 800b8fe:	0028      	movs	r0, r5
 800b900:	0021      	movs	r1, r4
 800b902:	f7f5 fb75 	bl	8000ff0 <__aeabi_dadd>
 800b906:	0005      	movs	r5, r0
 800b908:	000c      	movs	r4, r1
 800b90a:	0028      	movs	r0, r5
 800b90c:	0021      	movs	r1, r4
 800b90e:	b005      	add	sp, #20
 800b910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b912:	2c00      	cmp	r4, #0
 800b914:	dc10      	bgt.n	800b938 <__ieee754_sqrt+0x5c>
 800b916:	0061      	lsls	r1, r4, #1
 800b918:	0849      	lsrs	r1, r1, #1
 800b91a:	4329      	orrs	r1, r5
 800b91c:	d0f5      	beq.n	800b90a <__ieee754_sqrt+0x2e>
 800b91e:	2100      	movs	r1, #0
 800b920:	428c      	cmp	r4, r1
 800b922:	d100      	bne.n	800b926 <__ieee754_sqrt+0x4a>
 800b924:	e080      	b.n	800ba28 <__ieee754_sqrt+0x14c>
 800b926:	0028      	movs	r0, r5
 800b928:	0021      	movs	r1, r4
 800b92a:	f7f6 fd0b 	bl	8002344 <__aeabi_dsub>
 800b92e:	0002      	movs	r2, r0
 800b930:	000b      	movs	r3, r1
 800b932:	f7f5 fe99 	bl	8001668 <__aeabi_ddiv>
 800b936:	e7e6      	b.n	800b906 <__ieee754_sqrt+0x2a>
 800b938:	1521      	asrs	r1, r4, #20
 800b93a:	d075      	beq.n	800ba28 <__ieee754_sqrt+0x14c>
 800b93c:	4840      	ldr	r0, [pc, #256]	; (800ba40 <__ieee754_sqrt+0x164>)
 800b93e:	031b      	lsls	r3, r3, #12
 800b940:	180c      	adds	r4, r1, r0
 800b942:	2080      	movs	r0, #128	; 0x80
 800b944:	0b1b      	lsrs	r3, r3, #12
 800b946:	0340      	lsls	r0, r0, #13
 800b948:	4303      	orrs	r3, r0
 800b94a:	07c9      	lsls	r1, r1, #31
 800b94c:	d403      	bmi.n	800b956 <__ieee754_sqrt+0x7a>
 800b94e:	0fd1      	lsrs	r1, r2, #31
 800b950:	005b      	lsls	r3, r3, #1
 800b952:	185b      	adds	r3, r3, r1
 800b954:	0052      	lsls	r2, r2, #1
 800b956:	1061      	asrs	r1, r4, #1
 800b958:	2400      	movs	r4, #0
 800b95a:	9103      	str	r1, [sp, #12]
 800b95c:	005b      	lsls	r3, r3, #1
 800b95e:	0fd1      	lsrs	r1, r2, #31
 800b960:	185b      	adds	r3, r3, r1
 800b962:	2180      	movs	r1, #128	; 0x80
 800b964:	2516      	movs	r5, #22
 800b966:	0020      	movs	r0, r4
 800b968:	0052      	lsls	r2, r2, #1
 800b96a:	0389      	lsls	r1, r1, #14
 800b96c:	1846      	adds	r6, r0, r1
 800b96e:	429e      	cmp	r6, r3
 800b970:	dc02      	bgt.n	800b978 <__ieee754_sqrt+0x9c>
 800b972:	1870      	adds	r0, r6, r1
 800b974:	1b9b      	subs	r3, r3, r6
 800b976:	1864      	adds	r4, r4, r1
 800b978:	0fd6      	lsrs	r6, r2, #31
 800b97a:	005b      	lsls	r3, r3, #1
 800b97c:	3d01      	subs	r5, #1
 800b97e:	18f3      	adds	r3, r6, r3
 800b980:	0052      	lsls	r2, r2, #1
 800b982:	0849      	lsrs	r1, r1, #1
 800b984:	2d00      	cmp	r5, #0
 800b986:	d1f1      	bne.n	800b96c <__ieee754_sqrt+0x90>
 800b988:	2620      	movs	r6, #32
 800b98a:	2780      	movs	r7, #128	; 0x80
 800b98c:	0029      	movs	r1, r5
 800b98e:	9601      	str	r6, [sp, #4]
 800b990:	063f      	lsls	r7, r7, #24
 800b992:	197e      	adds	r6, r7, r5
 800b994:	46b4      	mov	ip, r6
 800b996:	4283      	cmp	r3, r0
 800b998:	dc02      	bgt.n	800b9a0 <__ieee754_sqrt+0xc4>
 800b99a:	d114      	bne.n	800b9c6 <__ieee754_sqrt+0xea>
 800b99c:	4296      	cmp	r6, r2
 800b99e:	d812      	bhi.n	800b9c6 <__ieee754_sqrt+0xea>
 800b9a0:	4665      	mov	r5, ip
 800b9a2:	4666      	mov	r6, ip
 800b9a4:	19ed      	adds	r5, r5, r7
 800b9a6:	9002      	str	r0, [sp, #8]
 800b9a8:	2e00      	cmp	r6, #0
 800b9aa:	da03      	bge.n	800b9b4 <__ieee754_sqrt+0xd8>
 800b9ac:	43ee      	mvns	r6, r5
 800b9ae:	0ff6      	lsrs	r6, r6, #31
 800b9b0:	1986      	adds	r6, r0, r6
 800b9b2:	9602      	str	r6, [sp, #8]
 800b9b4:	1a1b      	subs	r3, r3, r0
 800b9b6:	4562      	cmp	r2, ip
 800b9b8:	4180      	sbcs	r0, r0
 800b9ba:	4240      	negs	r0, r0
 800b9bc:	1a1b      	subs	r3, r3, r0
 800b9be:	4660      	mov	r0, ip
 800b9c0:	1a12      	subs	r2, r2, r0
 800b9c2:	9802      	ldr	r0, [sp, #8]
 800b9c4:	19c9      	adds	r1, r1, r7
 800b9c6:	0fd6      	lsrs	r6, r2, #31
 800b9c8:	005b      	lsls	r3, r3, #1
 800b9ca:	199b      	adds	r3, r3, r6
 800b9cc:	9e01      	ldr	r6, [sp, #4]
 800b9ce:	0052      	lsls	r2, r2, #1
 800b9d0:	3e01      	subs	r6, #1
 800b9d2:	087f      	lsrs	r7, r7, #1
 800b9d4:	9601      	str	r6, [sp, #4]
 800b9d6:	2e00      	cmp	r6, #0
 800b9d8:	d1db      	bne.n	800b992 <__ieee754_sqrt+0xb6>
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	d003      	beq.n	800b9e6 <__ieee754_sqrt+0x10a>
 800b9de:	1c4b      	adds	r3, r1, #1
 800b9e0:	d127      	bne.n	800ba32 <__ieee754_sqrt+0x156>
 800b9e2:	0031      	movs	r1, r6
 800b9e4:	3401      	adds	r4, #1
 800b9e6:	4b17      	ldr	r3, [pc, #92]	; (800ba44 <__ieee754_sqrt+0x168>)
 800b9e8:	1060      	asrs	r0, r4, #1
 800b9ea:	18c0      	adds	r0, r0, r3
 800b9ec:	0849      	lsrs	r1, r1, #1
 800b9ee:	07e3      	lsls	r3, r4, #31
 800b9f0:	d502      	bpl.n	800b9f8 <__ieee754_sqrt+0x11c>
 800b9f2:	2380      	movs	r3, #128	; 0x80
 800b9f4:	061b      	lsls	r3, r3, #24
 800b9f6:	4319      	orrs	r1, r3
 800b9f8:	9b03      	ldr	r3, [sp, #12]
 800b9fa:	000d      	movs	r5, r1
 800b9fc:	051c      	lsls	r4, r3, #20
 800b9fe:	1823      	adds	r3, r4, r0
 800ba00:	001c      	movs	r4, r3
 800ba02:	e782      	b.n	800b90a <__ieee754_sqrt+0x2e>
 800ba04:	0ad3      	lsrs	r3, r2, #11
 800ba06:	3815      	subs	r0, #21
 800ba08:	0552      	lsls	r2, r2, #21
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d0fa      	beq.n	800ba04 <__ieee754_sqrt+0x128>
 800ba0e:	2480      	movs	r4, #128	; 0x80
 800ba10:	0364      	lsls	r4, r4, #13
 800ba12:	4223      	tst	r3, r4
 800ba14:	d00a      	beq.n	800ba2c <__ieee754_sqrt+0x150>
 800ba16:	2420      	movs	r4, #32
 800ba18:	0016      	movs	r6, r2
 800ba1a:	1a64      	subs	r4, r4, r1
 800ba1c:	40e6      	lsrs	r6, r4
 800ba1e:	1e4d      	subs	r5, r1, #1
 800ba20:	408a      	lsls	r2, r1
 800ba22:	4333      	orrs	r3, r6
 800ba24:	1b41      	subs	r1, r0, r5
 800ba26:	e789      	b.n	800b93c <__ieee754_sqrt+0x60>
 800ba28:	2000      	movs	r0, #0
 800ba2a:	e7ee      	b.n	800ba0a <__ieee754_sqrt+0x12e>
 800ba2c:	005b      	lsls	r3, r3, #1
 800ba2e:	3101      	adds	r1, #1
 800ba30:	e7ef      	b.n	800ba12 <__ieee754_sqrt+0x136>
 800ba32:	2301      	movs	r3, #1
 800ba34:	3101      	adds	r1, #1
 800ba36:	4399      	bics	r1, r3
 800ba38:	e7d5      	b.n	800b9e6 <__ieee754_sqrt+0x10a>
 800ba3a:	46c0      	nop			; (mov r8, r8)
 800ba3c:	7ff00000 	.word	0x7ff00000
 800ba40:	fffffc01 	.word	0xfffffc01
 800ba44:	3fe00000 	.word	0x3fe00000

0800ba48 <with_errno>:
 800ba48:	b570      	push	{r4, r5, r6, lr}
 800ba4a:	000d      	movs	r5, r1
 800ba4c:	0016      	movs	r6, r2
 800ba4e:	0004      	movs	r4, r0
 800ba50:	f7fc fa00 	bl	8007e54 <__errno>
 800ba54:	0029      	movs	r1, r5
 800ba56:	6006      	str	r6, [r0, #0]
 800ba58:	0020      	movs	r0, r4
 800ba5a:	bd70      	pop	{r4, r5, r6, pc}

0800ba5c <xflow>:
 800ba5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba5e:	0015      	movs	r5, r2
 800ba60:	001c      	movs	r4, r3
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d010      	beq.n	800ba88 <xflow+0x2c>
 800ba66:	2380      	movs	r3, #128	; 0x80
 800ba68:	0010      	movs	r0, r2
 800ba6a:	061b      	lsls	r3, r3, #24
 800ba6c:	18e1      	adds	r1, r4, r3
 800ba6e:	9000      	str	r0, [sp, #0]
 800ba70:	9101      	str	r1, [sp, #4]
 800ba72:	9a00      	ldr	r2, [sp, #0]
 800ba74:	9b01      	ldr	r3, [sp, #4]
 800ba76:	0028      	movs	r0, r5
 800ba78:	0021      	movs	r1, r4
 800ba7a:	f7f6 f9f7 	bl	8001e6c <__aeabi_dmul>
 800ba7e:	2222      	movs	r2, #34	; 0x22
 800ba80:	f7ff ffe2 	bl	800ba48 <with_errno>
 800ba84:	b003      	add	sp, #12
 800ba86:	bd30      	pop	{r4, r5, pc}
 800ba88:	0010      	movs	r0, r2
 800ba8a:	0019      	movs	r1, r3
 800ba8c:	e7ef      	b.n	800ba6e <xflow+0x12>

0800ba8e <__math_uflow>:
 800ba8e:	2380      	movs	r3, #128	; 0x80
 800ba90:	b510      	push	{r4, lr}
 800ba92:	2200      	movs	r2, #0
 800ba94:	055b      	lsls	r3, r3, #21
 800ba96:	f7ff ffe1 	bl	800ba5c <xflow>
 800ba9a:	bd10      	pop	{r4, pc}

0800ba9c <__math_oflow>:
 800ba9c:	23e0      	movs	r3, #224	; 0xe0
 800ba9e:	b510      	push	{r4, lr}
 800baa0:	2200      	movs	r2, #0
 800baa2:	05db      	lsls	r3, r3, #23
 800baa4:	f7ff ffda 	bl	800ba5c <xflow>
 800baa8:	bd10      	pop	{r4, pc}

0800baaa <fabs>:
 800baaa:	004b      	lsls	r3, r1, #1
 800baac:	0859      	lsrs	r1, r3, #1
 800baae:	4770      	bx	lr

0800bab0 <finite>:
 800bab0:	4b02      	ldr	r3, [pc, #8]	; (800babc <finite+0xc>)
 800bab2:	0048      	lsls	r0, r1, #1
 800bab4:	0840      	lsrs	r0, r0, #1
 800bab6:	18c0      	adds	r0, r0, r3
 800bab8:	0fc0      	lsrs	r0, r0, #31
 800baba:	4770      	bx	lr
 800babc:	80100000 	.word	0x80100000

0800bac0 <scalbn>:
 800bac0:	004b      	lsls	r3, r1, #1
 800bac2:	b570      	push	{r4, r5, r6, lr}
 800bac4:	0d5b      	lsrs	r3, r3, #21
 800bac6:	0014      	movs	r4, r2
 800bac8:	000a      	movs	r2, r1
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d10d      	bne.n	800baea <scalbn+0x2a>
 800bace:	004b      	lsls	r3, r1, #1
 800bad0:	085b      	lsrs	r3, r3, #1
 800bad2:	4303      	orrs	r3, r0
 800bad4:	d010      	beq.n	800baf8 <scalbn+0x38>
 800bad6:	4b27      	ldr	r3, [pc, #156]	; (800bb74 <scalbn+0xb4>)
 800bad8:	2200      	movs	r2, #0
 800bada:	f7f6 f9c7 	bl	8001e6c <__aeabi_dmul>
 800bade:	4b26      	ldr	r3, [pc, #152]	; (800bb78 <scalbn+0xb8>)
 800bae0:	429c      	cmp	r4, r3
 800bae2:	da0a      	bge.n	800bafa <scalbn+0x3a>
 800bae4:	4a25      	ldr	r2, [pc, #148]	; (800bb7c <scalbn+0xbc>)
 800bae6:	4b26      	ldr	r3, [pc, #152]	; (800bb80 <scalbn+0xc0>)
 800bae8:	e019      	b.n	800bb1e <scalbn+0x5e>
 800baea:	4d26      	ldr	r5, [pc, #152]	; (800bb84 <scalbn+0xc4>)
 800baec:	42ab      	cmp	r3, r5
 800baee:	d108      	bne.n	800bb02 <scalbn+0x42>
 800baf0:	0002      	movs	r2, r0
 800baf2:	000b      	movs	r3, r1
 800baf4:	f7f5 fa7c 	bl	8000ff0 <__aeabi_dadd>
 800baf8:	bd70      	pop	{r4, r5, r6, pc}
 800bafa:	000a      	movs	r2, r1
 800bafc:	004b      	lsls	r3, r1, #1
 800bafe:	0d5b      	lsrs	r3, r3, #21
 800bb00:	3b36      	subs	r3, #54	; 0x36
 800bb02:	4d21      	ldr	r5, [pc, #132]	; (800bb88 <scalbn+0xc8>)
 800bb04:	18e3      	adds	r3, r4, r3
 800bb06:	42ab      	cmp	r3, r5
 800bb08:	dd0c      	ble.n	800bb24 <scalbn+0x64>
 800bb0a:	4c20      	ldr	r4, [pc, #128]	; (800bb8c <scalbn+0xcc>)
 800bb0c:	4d20      	ldr	r5, [pc, #128]	; (800bb90 <scalbn+0xd0>)
 800bb0e:	2900      	cmp	r1, #0
 800bb10:	da01      	bge.n	800bb16 <scalbn+0x56>
 800bb12:	4c1e      	ldr	r4, [pc, #120]	; (800bb8c <scalbn+0xcc>)
 800bb14:	4d1f      	ldr	r5, [pc, #124]	; (800bb94 <scalbn+0xd4>)
 800bb16:	0020      	movs	r0, r4
 800bb18:	0029      	movs	r1, r5
 800bb1a:	4a1c      	ldr	r2, [pc, #112]	; (800bb8c <scalbn+0xcc>)
 800bb1c:	4b1c      	ldr	r3, [pc, #112]	; (800bb90 <scalbn+0xd0>)
 800bb1e:	f7f6 f9a5 	bl	8001e6c <__aeabi_dmul>
 800bb22:	e7e9      	b.n	800baf8 <scalbn+0x38>
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	dd05      	ble.n	800bb34 <scalbn+0x74>
 800bb28:	4c1b      	ldr	r4, [pc, #108]	; (800bb98 <scalbn+0xd8>)
 800bb2a:	051b      	lsls	r3, r3, #20
 800bb2c:	4022      	ands	r2, r4
 800bb2e:	431a      	orrs	r2, r3
 800bb30:	0011      	movs	r1, r2
 800bb32:	e7e1      	b.n	800baf8 <scalbn+0x38>
 800bb34:	001d      	movs	r5, r3
 800bb36:	3535      	adds	r5, #53	; 0x35
 800bb38:	da13      	bge.n	800bb62 <scalbn+0xa2>
 800bb3a:	4a18      	ldr	r2, [pc, #96]	; (800bb9c <scalbn+0xdc>)
 800bb3c:	0fcb      	lsrs	r3, r1, #31
 800bb3e:	4294      	cmp	r4, r2
 800bb40:	dd08      	ble.n	800bb54 <scalbn+0x94>
 800bb42:	4812      	ldr	r0, [pc, #72]	; (800bb8c <scalbn+0xcc>)
 800bb44:	4912      	ldr	r1, [pc, #72]	; (800bb90 <scalbn+0xd0>)
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d001      	beq.n	800bb4e <scalbn+0x8e>
 800bb4a:	4810      	ldr	r0, [pc, #64]	; (800bb8c <scalbn+0xcc>)
 800bb4c:	4911      	ldr	r1, [pc, #68]	; (800bb94 <scalbn+0xd4>)
 800bb4e:	4a0f      	ldr	r2, [pc, #60]	; (800bb8c <scalbn+0xcc>)
 800bb50:	4b0f      	ldr	r3, [pc, #60]	; (800bb90 <scalbn+0xd0>)
 800bb52:	e7e4      	b.n	800bb1e <scalbn+0x5e>
 800bb54:	4809      	ldr	r0, [pc, #36]	; (800bb7c <scalbn+0xbc>)
 800bb56:	490a      	ldr	r1, [pc, #40]	; (800bb80 <scalbn+0xc0>)
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d0c3      	beq.n	800bae4 <scalbn+0x24>
 800bb5c:	4807      	ldr	r0, [pc, #28]	; (800bb7c <scalbn+0xbc>)
 800bb5e:	4910      	ldr	r1, [pc, #64]	; (800bba0 <scalbn+0xe0>)
 800bb60:	e7c0      	b.n	800bae4 <scalbn+0x24>
 800bb62:	4c0d      	ldr	r4, [pc, #52]	; (800bb98 <scalbn+0xd8>)
 800bb64:	3336      	adds	r3, #54	; 0x36
 800bb66:	4022      	ands	r2, r4
 800bb68:	051b      	lsls	r3, r3, #20
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	0019      	movs	r1, r3
 800bb6e:	2200      	movs	r2, #0
 800bb70:	4b0c      	ldr	r3, [pc, #48]	; (800bba4 <scalbn+0xe4>)
 800bb72:	e7d4      	b.n	800bb1e <scalbn+0x5e>
 800bb74:	43500000 	.word	0x43500000
 800bb78:	ffff3cb0 	.word	0xffff3cb0
 800bb7c:	c2f8f359 	.word	0xc2f8f359
 800bb80:	01a56e1f 	.word	0x01a56e1f
 800bb84:	000007ff 	.word	0x000007ff
 800bb88:	000007fe 	.word	0x000007fe
 800bb8c:	8800759c 	.word	0x8800759c
 800bb90:	7e37e43c 	.word	0x7e37e43c
 800bb94:	fe37e43c 	.word	0xfe37e43c
 800bb98:	800fffff 	.word	0x800fffff
 800bb9c:	0000c350 	.word	0x0000c350
 800bba0:	81a56e1f 	.word	0x81a56e1f
 800bba4:	3c900000 	.word	0x3c900000

0800bba8 <_init>:
 800bba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbaa:	46c0      	nop			; (mov r8, r8)
 800bbac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbae:	bc08      	pop	{r3}
 800bbb0:	469e      	mov	lr, r3
 800bbb2:	4770      	bx	lr

0800bbb4 <_fini>:
 800bbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbb6:	46c0      	nop			; (mov r8, r8)
 800bbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbba:	bc08      	pop	{r3}
 800bbbc:	469e      	mov	lr, r3
 800bbbe:	4770      	bx	lr
